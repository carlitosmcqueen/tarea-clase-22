v8-version,9,4,146,24,-node.20,0
v8-platform,windows,unknown
shared-library,D:\\Carlos\\node\\node.exe,0x7ff723e60000,0x7ff727aae000,0
shared-library,C:\\WINDOWS\\SYSTEM32\\ntdll.dll,0x7ffe67ef0000,0x7ffe680e8000,0
shared-library,C:\\WINDOWS\\System32\\KERNEL32.DLL,0x7ffe66cc0000,0x7ffe66d7f000,0
shared-library,C:\\WINDOWS\\System32\\KERNELBASE.dll,0x7ffe659e0000,0x7ffe65cb2000,0
shared-library,C:\\WINDOWS\\System32\\WS2_32.dll,0x7ffe66760000,0x7ffe667cb000,0
shared-library,C:\\WINDOWS\\System32\\RPCRT4.dll,0x7ffe66b90000,0x7ffe66cb5000,0
shared-library,C:\\WINDOWS\\SYSTEM32\\dbghelp.dll,0x7ffe5cd00000,0x7ffe5cee4000,0
shared-library,C:\\WINDOWS\\System32\\ucrtbase.dll,0x7ffe65e00000,0x7ffe65f00000,0
shared-library,C:\\WINDOWS\\System32\\PSAPI.DLL,0x7ffe666c0000,0x7ffe666c8000,0
shared-library,C:\\WINDOWS\\System32\\ADVAPI32.dll,0x7ffe66580000,0x7ffe6662e000,0
shared-library,C:\\WINDOWS\\SYSTEM32\\USERENV.dll,0x7ffe654a0000,0x7ffe654ce000,0
shared-library,C:\\WINDOWS\\System32\\msvcrt.dll,0x7ffe66330000,0x7ffe663ce000,0
shared-library,C:\\WINDOWS\\System32\\sechost.dll,0x7ffe675f0000,0x7ffe6768c000,0
shared-library,C:\\WINDOWS\\System32\\USER32.dll,0x7ffe65f90000,0x7ffe66131000,0
shared-library,C:\\WINDOWS\\System32\\win32u.dll,0x7ffe65940000,0x7ffe65962000,0
shared-library,C:\\WINDOWS\\System32\\GDI32.dll,0x7ffe66690000,0x7ffe666bb000,0
shared-library,C:\\WINDOWS\\System32\\gdi32full.dll,0x7ffe65830000,0x7ffe6593f000,0
shared-library,C:\\WINDOWS\\System32\\msvcp_win.dll,0x7ffe655e0000,0x7ffe6567d000,0
shared-library,C:\\WINDOWS\\System32\\CRYPT32.dll,0x7ffe656d0000,0x7ffe65826000,0
shared-library,C:\\WINDOWS\\System32\\bcrypt.dll,0x7ffe65f00000,0x7ffe65f27000,0
shared-library,C:\\WINDOWS\\SYSTEM32\\WINMM.dll,0x7ffe5b450000,0x7ffe5b477000,0
shared-library,C:\\WINDOWS\\SYSTEM32\\IPHLPAPI.DLL,0x7ffe649b0000,0x7ffe649eb000,0
shared-library,C:\\WINDOWS\\SYSTEM32\\CRYPTBASE.DLL,0x7ffe64ed0000,0x7ffe64edc000,0
shared-library,C:\\WINDOWS\\System32\\IMM32.DLL,0x7ffe67020000,0x7ffe67052000,0
shared-library,C:\\WINDOWS\\SYSTEM32\\powrprof.dll,0x7ffe65450000,0x7ffe6549b000,0
shared-library,C:\\WINDOWS\\SYSTEM32\\UMPDC.dll,0x7ffe65430000,0x7ffe65442000,0
shared-library,C:\\WINDOWS\\system32\\uxtheme.dll,0x7ffe62c90000,0x7ffe62d2e000,0
shared-library,C:\\WINDOWS\\System32\\combase.dll,0x7ffe66830000,0x7ffe66b85000,0
shared-library,C:\\WINDOWS\\system32\\mswsock.dll,0x7ffe64cc0000,0x7ffe64d2a000,0
shared-library,C:\\WINDOWS\\SYSTEM32\\kernel.appcore.dll,0x7ffe63e40000,0x7ffe63e52000,0
shared-library,C:\\WINDOWS\\System32\\bcryptPrimitives.dll,0x7ffe65cc0000,0x7ffe65d42000,0
shared-library-end
tick,0x7ffe65a16530,262321,0,0x0,6
profiler,begin,1000
new,CodeRange,0x20b1dcf0000,0
new,MemoryChunk,0x1ffc71c0000,262144
new,MemoryChunk,0x2effe180000,262144
new,MemoryChunk,0x3d63280000,262144
new,MemoryChunk,0x372d5e80000,262144
new,MemoryChunk,0x31ebf540000,262144
heap-capacity,1031072
heap-available,2198652736
new,MemoryChunk,0x13fcdd00000,262144
new,MemoryChunk,0x860dfc0000,262144
new,MemoryChunk,0x423ed40000,262144
new,MemoryChunk,0x3d773fc0000,262144
new,MemoryChunk,0x14570b40000,262144
new,MemoryChunk,0x3898ea00000,262144
new,MemoryChunk,0x3096a100000,262144
new,MemoryChunk,0x20b1dd00000,262144
new,MemoryChunk,0x12714640000,262144
code-creation,Builtin,2,268869,0x7ff7249d0be4,1356,RecordWriteEmitRememberedSetSaveFP
code-creation,Builtin,2,268895,0x7ff7249d1144,448,RecordWriteOmitRememberedSetSaveFP
code-creation,Builtin,2,268907,0x7ff7249d1324,636,RecordWriteEmitRememberedSetIgnoreFP
code-creation,Builtin,2,268918,0x7ff7249d15a4,204,RecordWriteOmitRememberedSetIgnoreFP
code-creation,Builtin,2,268929,0x7ff7249d1684,364,EphemeronKeyBarrierSaveFP
code-creation,Builtin,2,268941,0x7ff7249d1804,128,EphemeronKeyBarrierIgnoreFP
code-creation,Builtin,2,268951,0x7ff7249d18a4,60,AdaptorWithBuiltinExitFrame
code-creation,Builtin,2,268962,0x7ff7249d18e4,360,CallFunction_ReceiverIsNullOrUndefined
code-creation,Builtin,2,268973,0x7ff7249d1a64,416,CallFunction_ReceiverIsNotNullOrUndefined
code-creation,Builtin,2,268985,0x7ff7249d1c24,444,CallFunction_ReceiverIsAny
code-creation,Builtin,2,269060,0x7ff7249d1de4,104,CallBoundFunction
code-creation,Builtin,2,269075,0x7ff7249d1e64,120,Call_ReceiverIsNullOrUndefined
code-creation,Builtin,2,269087,0x7ff7249d1ee4,120,Call_ReceiverIsNotNullOrUndefined
code-creation,Builtin,2,269098,0x7ff7249d1f64,120,Call_ReceiverIsAny
code-creation,Builtin,2,269108,0x7ff7249d1fe4,992,Call_ReceiverIsNullOrUndefined_Baseline_Compact
code-creation,Builtin,2,269120,0x7ff7249d23e4,992,Call_ReceiverIsNullOrUndefined_Baseline
code-creation,Builtin,2,269131,0x7ff7249d27e4,1080,Call_ReceiverIsNotNullOrUndefined_Baseline_Compact
code-creation,Builtin,2,269142,0x7ff7249d2c24,1076,Call_ReceiverIsNotNullOrUndefined_Baseline
code-creation,Builtin,2,269153,0x7ff7249d3064,1080,Call_ReceiverIsAny_Baseline_Compact
code-creation,Builtin,2,269165,0x7ff7249d34a4,1076,Call_ReceiverIsAny_Baseline
code-creation,Builtin,2,269175,0x7ff7249d38e4,948,Call_ReceiverIsNullOrUndefined_WithFeedback
code-creation,Builtin,2,269187,0x7ff7249d3ca4,948,Call_ReceiverIsNotNullOrUndefined_WithFeedback
code-creation,Builtin,2,269198,0x7ff7249d4064,948,Call_ReceiverIsAny_WithFeedback
code-creation,Builtin,2,269209,0x7ff7249d4424,736,CallProxy
code-creation,Builtin,2,269219,0x7ff7249d4724,148,CallVarargs
code-creation,Builtin,2,269229,0x7ff7249d47c4,944,CallWithSpread
code-creation,Builtin,2,269239,0x7ff7249d4b84,1956,CallWithSpread_Baseline
code-creation,Builtin,2,269250,0x7ff7249d5344,1928,CallWithSpread_WithFeedback
code-creation,Builtin,2,269261,0x7ff7249d5ae4,864,CallWithArrayLike
code-creation,Builtin,2,269271,0x7ff7249d5e64,1820,CallWithArrayLike_WithFeedback
code-creation,Builtin,2,269282,0x7ff7249d6584,156,CallForwardVarargs
code-creation,Builtin,2,269292,0x7ff7249d6624,156,CallFunctionForwardVarargs
code-creation,Builtin,2,269303,0x7ff7249d66c4,132,CallFunctionTemplate_CheckAccess
code-creation,Builtin,2,269313,0x7ff7249d6764,228,CallFunctionTemplate_CheckCompatibleReceiver
code-creation,Builtin,2,269325,0x7ff7249d6864,316,CallFunctionTemplate_CheckAccessAndCompatibleReceiver
code-creation,Builtin,2,269337,0x7ff7249d69a4,28,ConstructFunction
code-creation,Builtin,2,269347,0x7ff7249d69c4,104,ConstructBoundFunction
code-creation,Builtin,2,269358,0x7ff7249d6a44,28,ConstructedNonConstructable
code-creation,Builtin,2,269368,0x7ff7249d6a64,100,Construct
code-creation,Builtin,2,269378,0x7ff7249d6ae4,148,ConstructVarargs
code-creation,Builtin,2,269389,0x7ff7249d6b84,968,ConstructWithSpread
code-creation,Builtin,2,269399,0x7ff7249d6f64,1748,ConstructWithSpread_Baseline
code-creation,Builtin,2,269410,0x7ff7249d7644,1764,ConstructWithSpread_WithFeedback
code-creation,Builtin,2,269422,0x7ff7249d7d44,924,ConstructWithArrayLike
code-creation,Builtin,2,269433,0x7ff7249d80e4,1652,ConstructWithArrayLike_WithFeedback
code-creation,Builtin,2,269444,0x7ff7249d8764,196,ConstructForwardVarargs
code-creation,Builtin,2,269454,0x7ff7249d8844,196,ConstructFunctionForwardVarargs
code-creation,Builtin,2,269465,0x7ff7249d8924,804,Construct_Baseline
code-creation,Builtin,2,269475,0x7ff7249d8c64,820,Construct_WithFeedback
code-creation,Builtin,2,269486,0x7ff7249d8fa4,476,JSConstructStubGeneric
code-creation,Builtin,2,269497,0x7ff7249d9184,376,JSBuiltinsConstructStub
code-creation,Builtin,2,269507,0x7ff7249d9304,676,FastNewObject
code-creation,Builtin,2,269517,0x7ff7249d95c4,292,FastNewClosure
code-creation,Builtin,2,269527,0x7ff7249d9704,720,ConstructProxy
code-creation,Builtin,2,269538,0x7ff7249d99e4,360,JSEntry
code-creation,Builtin,2,269547,0x7ff7249d9b64,360,JSConstructEntry
code-creation,Builtin,2,269558,0x7ff7249d9ce4,360,JSRunMicrotasksEntry
code-creation,Builtin,2,269568,0x7ff7249d9e64,96,JSEntryTrampoline
code-creation,Builtin,2,269578,0x7ff7249d9ee4,96,JSConstructEntryTrampoline
code-creation,Builtin,2,269589,0x7ff7249d9f64,280,ResumeGeneratorTrampoline
code-creation,Builtin,2,269600,0x7ff7249da084,1116,StringCodePointAt
code-creation,Builtin,2,269610,0x7ff7249da4e4,1552,StringFromCodePointAt
code-creation,Builtin,2,269628,0x7ff7249dab04,544,StringEqual
code-creation,Builtin,2,269638,0x7ff7249dad44,276,StringGreaterThan
code-creation,Builtin,2,269691,0x7ff7249dae64,276,StringGreaterThanOrEqual
code-creation,Builtin,2,269705,0x7ff7249daf84,276,StringLessThan
code-creation,Builtin,2,269716,0x7ff7249db0a4,276,StringLessThanOrEqual
code-creation,Builtin,2,269726,0x7ff7249db1c4,2492,StringSubstring
code-creation,Builtin,2,269737,0x7ff7249dbb84,80,OrderedHashTableHealIndex
code-creation,Builtin,2,269747,0x7ff7249dbbe4,1168,InterpreterEntryTrampoline
code-creation,Builtin,2,269758,0x7ff7249dc084,76,InterpreterPushArgsThenCall
code-creation,Builtin,2,269769,0x7ff7249dc0e4,84,InterpreterPushUndefinedAndArgsThenCall
code-creation,Builtin,2,269780,0x7ff7249dc144,84,InterpreterPushArgsThenCallWithFinalSpread
code-creation,Builtin,2,269791,0x7ff7249dc1a4,80,InterpreterPushArgsThenConstruct
code-creation,Builtin,2,269802,0x7ff7249dc204,80,InterpreterPushArgsThenConstructArrayFunction
code-creation,Builtin,2,269813,0x7ff7249dc264,84,InterpreterPushArgsThenConstructWithFinalSpread
code-creation,Builtin,2,269825,0x7ff7249dc2c4,84,InterpreterEnterAtBytecode
code-creation,Builtin,2,269835,0x7ff7249dc324,220,InterpreterEnterAtNextBytecode
code-creation,Builtin,2,269846,0x7ff7249dc404,52,InterpreterOnStackReplacement
code-creation,Builtin,2,269857,0x7ff7249dc444,592,BaselineOutOfLinePrologue
code-creation,Builtin,2,269867,0x7ff7249dc6a4,56,BaselineOnStackReplacement
code-creation,Builtin,2,269878,0x7ff7249dc6e4,84,BaselineLeaveFrame
code-creation,Builtin,2,269888,0x7ff7249dc744,216,BaselineOrInterpreterEnterAtBytecode
code-creation,Builtin,2,269899,0x7ff7249dc824,224,BaselineOrInterpreterEnterAtNextBytecode
code-creation,Builtin,2,269910,0x7ff7249dc924,192,InterpreterOnStackReplacement_ToBaseline
code-creation,Builtin,2,269921,0x7ff7249dca04,1004,CompileLazy
code-creation,Builtin,2,269931,0x7ff7249dce04,68,CompileLazyDeoptimizedCode
code-creation,Builtin,2,269942,0x7ff7249dce64,252,InstantiateAsmJs
code-creation,Builtin,2,269952,0x7ff7249dcf64,32,NotifyDeoptimized
code-creation,Builtin,2,269962,0x7ff7249dcfa4,796,DeoptimizationEntry_Eager
code-creation,Builtin,2,269973,0x7ff7249dd2c4,796,DeoptimizationEntry_Soft
code-creation,Builtin,2,269984,0x7ff7249dd5e4,796,DeoptimizationEntry_Bailout
code-creation,Builtin,2,269994,0x7ff7249dd904,796,DeoptimizationEntry_Lazy
code-creation,Builtin,2,270005,0x7ff7249ddc24,52,ContinueToCodeStubBuiltin
code-creation,Builtin,2,270016,0x7ff7249ddc64,60,ContinueToCodeStubBuiltinWithResult
code-creation,Builtin,2,270027,0x7ff7249ddca4,56,ContinueToJavaScriptBuiltin
code-creation,Builtin,2,270038,0x7ff7249ddce4,64,ContinueToJavaScriptBuiltinWithResult
code-creation,Builtin,2,270049,0x7ff7249ddd44,288,CallApiCallback
code-creation,Builtin,2,270059,0x7ff7249dde84,268,CallApiGetter
code-creation,Builtin,2,270069,0x7ff7249ddfa4,12,HandleApiCall
code-creation,Builtin,2,270079,0x7ff7249ddfc4,12,HandleApiCallAsFunction
code-creation,Builtin,2,270090,0x7ff7249ddfe4,12,HandleApiCallAsConstructor
code-creation,Builtin,2,270101,0x7ff7249de004,64,AllocateInYoungGeneration
code-creation,Builtin,2,270111,0x7ff7249de064,52,AllocateRegularInYoungGeneration
code-creation,Builtin,2,270122,0x7ff7249de0a4,64,AllocateInOldGeneration
code-creation,Builtin,2,270133,0x7ff7249de104,52,AllocateRegularInOldGeneration
code-creation,Builtin,2,270143,0x7ff7249de144,420,CopyFastSmiOrObjectElements
code-creation,Builtin,2,270154,0x7ff7249de304,496,GrowFastDoubleElements
code-creation,Builtin,2,270164,0x7ff7249de504,400,GrowFastSmiOrObjectElements
code-creation,Builtin,2,270175,0x7ff7249de6a4,388,DebugBreakTrampoline
code-creation,Builtin,2,270186,0x7ff7249de844,180,ToNumber
code-creation,Builtin,2,270195,0x7ff7249de904,292,ToNumber_Baseline
code-creation,Builtin,2,270206,0x7ff7249dea44,360,ToNumeric_Baseline
code-creation,Builtin,2,270216,0x7ff7249debc4,104,PlainPrimitiveToNumber
code-creation,Builtin,2,270227,0x7ff7249dec44,212,ToNumberConvertBigInt
code-creation,Builtin,2,270237,0x7ff7249ded24,132,Typeof
code-creation,Builtin,2,270247,0x7ff7249dedc4,104,BigIntToI64
code-creation,Builtin,2,270257,0x7ff7249dee44,4,BigIntToI32Pair
code-creation,Builtin,2,270267,0x7ff7249dee64,232,I64ToBigInt
code-creation,Builtin,2,271018,0x7ff7249def64,4,I32PairToBigInt
code-creation,Builtin,2,271040,0x7ff7249def84,100,ToBooleanLazyDeoptContinuation
code-creation,Builtin,2,271052,0x7ff7249df004,4232,KeyedLoadIC_PolymorphicName
code-creation,Builtin,2,271063,0x7ff7249e00a4,15848,KeyedStoreIC_Megamorphic
code-creation,Builtin,2,271074,0x7ff7249e3ea4,280,LoadGlobalIC_NoFeedback
code-creation,Builtin,2,271085,0x7ff7249e3fc4,60,LoadIC_FunctionPrototype
code-creation,Builtin,2,271096,0x7ff7249e4004,12,LoadIC_StringLength
code-creation,Builtin,2,271106,0x7ff7249e4024,16,LoadIC_StringWrapperLength
code-creation,Builtin,2,271117,0x7ff7249e4044,3056,LoadIC_NoFeedback
code-creation,Builtin,2,271127,0x7ff7249e4c44,32,StoreGlobalIC_Slow
code-creation,Builtin,2,271137,0x7ff7249e4c84,7332,StoreIC_NoFeedback
code-creation,Builtin,2,271148,0x7ff7249e6944,180,KeyedLoadIC_SloppyArguments
code-creation,Builtin,2,271158,0x7ff7249e6a04,72,LoadIndexedInterceptorIC
code-creation,Builtin,2,271169,0x7ff7249e6a64,236,KeyedStoreIC_SloppyArguments_Standard
code-creation,Builtin,2,271180,0x7ff7249e6b64,236,KeyedStoreIC_SloppyArguments_GrowNoTransitionHandleCOW
code-creation,Builtin,2,271192,0x7ff7249e6c64,236,KeyedStoreIC_SloppyArguments_NoTransitionIgnoreOOB
code-creation,Builtin,2,271203,0x7ff7249e6d64,236,KeyedStoreIC_SloppyArguments_NoTransitionHandleCOW
code-creation,Builtin,2,271215,0x7ff7249e6e64,14344,StoreFastElementIC_Standard
code-creation,Builtin,2,271225,0x7ff7249ea684,9616,StoreFastElementIC_GrowNoTransitionHandleCOW
code-creation,Builtin,2,271237,0x7ff7249ecc24,13364,StoreFastElementIC_NoTransitionIgnoreOOB
code-creation,Builtin,2,271248,0x7ff7249f0064,6088,StoreFastElementIC_NoTransitionHandleCOW
code-creation,Builtin,2,271259,0x7ff7249f1844,8484,ElementsTransitionAndStore_Standard
code-creation,Builtin,2,271270,0x7ff7249f3984,19368,ElementsTransitionAndStore_GrowNoTransitionHandleCOW
code-creation,Builtin,2,271282,0x7ff7249f8544,8484,ElementsTransitionAndStore_NoTransitionIgnoreOOB
code-creation,Builtin,2,271293,0x7ff7249fa684,11024,ElementsTransitionAndStore_NoTransitionHandleCOW
code-creation,Builtin,2,271305,0x7ff7249fd1a4,792,KeyedHasIC_PolymorphicName
code-creation,Builtin,2,271315,0x7ff7249fd4c4,164,KeyedHasIC_SloppyArguments
code-creation,Builtin,2,271326,0x7ff7249fd584,72,HasIndexedInterceptorIC
code-creation,Builtin,2,271336,0x7ff7249fd5e4,96,DynamicCheckMapsTrampoline
code-creation,Builtin,2,271347,0x7ff7249fd664,224,DynamicCheckMaps
code-creation,Builtin,2,271357,0x7ff7249fd764,96,DynamicCheckMapsWithFeedbackVectorTrampoline
code-creation,Builtin,2,271369,0x7ff7249fd7e4,188,DynamicCheckMapsWithFeedbackVector
code-creation,Builtin,2,271379,0x7ff7249fd8a4,152,EnqueueMicrotask
code-creation,Builtin,2,271390,0x7ff7249fd944,8,RunMicrotasksTrampoline
code-creation,Builtin,2,271400,0x7ff7249fd964,3476,RunMicrotasks
code-creation,Builtin,2,271410,0x7ff7249fe704,2636,HasProperty
code-creation,Builtin,2,271423,0x7ff7249ff164,1156,DeleteProperty
code-creation,Builtin,2,271433,0x7ff7249ff604,1972,CopyDataProperties
code-creation,Builtin,2,271444,0x7ff7249ffdc4,9184,SetDataProperties
code-creation,Builtin,2,271454,0x7ff724a021c4,28,Abort
code-creation,Builtin,2,271464,0x7ff724a021e4,28,AbortCSAAssert
code-creation,Builtin,2,271474,0x7ff724a02204,12,EmptyFunction
code-creation,Builtin,2,271484,0x7ff724a02224,12,Illegal
code-creation,Builtin,2,271494,0x7ff724a02244,12,StrictPoisonPillThrower
code-creation,Builtin,2,271505,0x7ff724a02264,12,UnsupportedThrower
code-creation,Builtin,2,271515,0x7ff724a02284,64,ReturnReceiver
code-creation,Builtin,2,271525,0x7ff724a022e4,28,ArrayConstructor
code-creation,Builtin,2,271535,0x7ff724a02304,404,ArrayConstructorImpl
code-creation,Builtin,2,271546,0x7ff724a024a4,216,ArrayNoArgumentConstructor_PackedSmi_DontOverride
code-creation,Builtin,2,271557,0x7ff724a02584,216,ArrayNoArgumentConstructor_HoleySmi_DontOverride
code-creation,Builtin,2,271569,0x7ff724a02664,176,ArrayNoArgumentConstructor_PackedSmi_DisableAllocationSites
code-creation,Builtin,2,271580,0x7ff724a02724,176,ArrayNoArgumentConstructor_HoleySmi_DisableAllocationSites
code-creation,Builtin,2,271597,0x7ff724a027e4,176,ArrayNoArgumentConstructor_Packed_DisableAllocationSites
code-creation,Builtin,2,271611,0x7ff724a028a4,176,ArrayNoArgumentConstructor_Holey_DisableAllocationSites
code-creation,Builtin,2,271622,0x7ff724a02964,188,ArrayNoArgumentConstructor_PackedDouble_DisableAllocationSites
code-creation,Builtin,2,271634,0x7ff724a02a24,188,ArrayNoArgumentConstructor_HoleyDouble_DisableAllocationSites
code-creation,Builtin,2,271646,0x7ff724a02ae4,512,ArraySingleArgumentConstructor_PackedSmi_DontOverride
code-creation,Builtin,2,271658,0x7ff724a02d04,480,ArraySingleArgumentConstructor_HoleySmi_DontOverride
code-creation,Builtin,2,271670,0x7ff724a02f04,436,ArraySingleArgumentConstructor_PackedSmi_DisableAllocationSites
code-creation,Builtin,2,271682,0x7ff724a030c4,404,ArraySingleArgumentConstructor_HoleySmi_DisableAllocationSites
code-creation,Builtin,2,271694,0x7ff724a03264,436,ArraySingleArgumentConstructor_Packed_DisableAllocationSites
code-creation,Builtin,2,271706,0x7ff724a03424,404,ArraySingleArgumentConstructor_Holey_DisableAllocationSites
code-creation,Builtin,2,271718,0x7ff724a035c4,448,ArraySingleArgumentConstructor_PackedDouble_DisableAllocationSites
code-creation,Builtin,2,271730,0x7ff724a037a4,412,ArraySingleArgumentConstructor_HoleyDouble_DisableAllocationSites
code-creation,Builtin,2,271742,0x7ff724a03944,64,ArrayNArgumentsConstructor
code-creation,Builtin,2,271752,0x7ff724a039a4,12,ArrayConcat
code-creation,Builtin,2,271762,0x7ff724a039c4,12,ArrayPrototypeFill
code-creation,Builtin,2,271773,0x7ff724a039e4,932,ArrayIncludesSmiOrObject
code-creation,Builtin,2,271783,0x7ff724a03da4,140,ArrayIncludesPackedDoubles
code-creation,Builtin,2,271794,0x7ff724a03e44,208,ArrayIncludesHoleyDoubles
code-creation,Builtin,2,271804,0x7ff724a03f24,548,ArrayIncludes
code-creation,Builtin,2,271821,0x7ff724a04164,856,ArrayIndexOfSmiOrObject
code-creation,Builtin,2,271832,0x7ff724a044c4,116,ArrayIndexOfPackedDoubles
code-creation,Builtin,2,271842,0x7ff724a04544,116,ArrayIndexOfHoleyDoubles
code-creation,Builtin,2,271853,0x7ff724a045c4,552,ArrayIndexOf
code-creation,Builtin,2,271863,0x7ff724a04804,12,ArrayPop
code-creation,Builtin,2,271872,0x7ff724a04824,616,ArrayPrototypePop
code-creation,Builtin,2,271883,0x7ff724a04aa4,12,ArrayPush
code-creation,Builtin,2,271892,0x7ff724a04ac4,2424,ArrayPrototypePush
code-creation,Builtin,2,271903,0x7ff724a05444,12,ArrayShift
code-creation,Builtin,2,271913,0x7ff724a05464,12,ArrayUnshift
code-creation,Builtin,2,271923,0x7ff724a05484,956,CloneFastJSArray
code-creation,Builtin,2,271933,0x7ff724a05844,2196,CloneFastJSArrayFillingHoles
code-creation,Builtin,2,271944,0x7ff724a060e4,976,ExtractFastJSArray
code-creation,Builtin,2,271954,0x7ff724a064c4,260,ArrayPrototypeEntries
code-creation,Builtin,2,271964,0x7ff724a065e4,248,ArrayPrototypeKeys
code-creation,Builtin,2,271974,0x7ff724a066e4,260,ArrayPrototypeValues
code-creation,Builtin,2,271985,0x7ff724a06804,4428,ArrayIteratorPrototypeNext
code-creation,Builtin,2,271995,0x7ff724a07964,4168,FlattenIntoArray
code-creation,Builtin,2,272005,0x7ff724a089c4,4172,FlatMapIntoArray
code-creation,Builtin,2,272016,0x7ff724a09a24,372,ArrayPrototypeFlat
code-creation,Builtin,2,272026,0x7ff724a09ba4,428,ArrayPrototypeFlatMap
code-creation,Builtin,2,272036,0x7ff724a09d64,12,ArrayBufferConstructor
code-creation,Builtin,2,272047,0x7ff724a09d84,12,ArrayBufferConstructor_DoNotInitialize
code-creation,Builtin,2,272057,0x7ff724a09da4,12,ArrayBufferPrototypeSlice
code-creation,Builtin,2,272068,0x7ff724a09dc4,12,ArrayBufferPrototypeResize
code-creation,Builtin,2,272078,0x7ff724a09de4,804,AsyncFunctionEnter
code-creation,Builtin,2,272089,0x7ff724a0a124,132,AsyncFunctionReject
code-creation,Builtin,2,272099,0x7ff724a0a1c4,128,AsyncFunctionResolve
code-creation,Builtin,2,272110,0x7ff724a0a264,12,AsyncFunctionLazyDeoptContinuation
code-creation,Builtin,2,272120,0x7ff724a0a284,2804,AsyncFunctionAwaitCaught
code-creation,Builtin,2,272131,0x7ff724a0ad84,2804,AsyncFunctionAwaitUncaught
code-creation,Builtin,2,272144,0x7ff724a0b884,172,AsyncFunctionAwaitRejectClosure
code-creation,Builtin,2,272156,0x7ff724a0b944,164,AsyncFunctionAwaitResolveClosure
code-creation,Builtin,2,272167,0x7ff724a0ba04,12,BigIntConstructor
code-creation,Builtin,2,272177,0x7ff724a0ba24,12,BigIntAsUintN
code-creation,Builtin,2,272187,0x7ff724a0ba44,12,BigIntAsIntN
code-creation,Builtin,2,272197,0x7ff724a0ba64,12,BigIntPrototypeToLocaleString
code-creation,Builtin,2,272208,0x7ff724a0ba84,12,BigIntPrototypeToString
code-creation,Builtin,2,272218,0x7ff724a0baa4,12,BigIntPrototypeValueOf
code-creation,Builtin,2,272228,0x7ff724a0bac4,12,CallSitePrototypeGetColumnNumber
code-creation,Builtin,2,272239,0x7ff724a0bae4,12,CallSitePrototypeGetEnclosingColumnNumber
code-creation,Builtin,2,272250,0x7ff724a0bb04,12,CallSitePrototypeGetEnclosingLineNumber
code-creation,Builtin,2,272261,0x7ff724a0bb24,12,CallSitePrototypeGetEvalOrigin
code-creation,Builtin,2,272272,0x7ff724a0bb44,12,CallSitePrototypeGetFileName
code-creation,Builtin,2,272282,0x7ff724a0bb64,12,CallSitePrototypeGetFunction
code-creation,Builtin,2,272293,0x7ff724a0bb84,12,CallSitePrototypeGetFunctionName
code-creation,Builtin,2,272304,0x7ff724a0bba4,12,CallSitePrototypeGetLineNumber
code-creation,Builtin,2,272315,0x7ff724a0bbc4,12,CallSitePrototypeGetMethodName
code-creation,Builtin,2,272325,0x7ff724a0bbe4,12,CallSitePrototypeGetPosition
code-creation,Builtin,2,272336,0x7ff724a0bc04,12,CallSitePrototypeGetPromiseIndex
code-creation,Builtin,2,272347,0x7ff724a0bc24,12,CallSitePrototypeGetScriptNameOrSourceURL
code-creation,Builtin,2,272358,0x7ff724a0bc44,12,CallSitePrototypeGetThis
code-creation,Builtin,2,272368,0x7ff724a0bc64,12,CallSitePrototypeGetTypeName
code-creation,Builtin,2,272379,0x7ff724a0bc84,12,CallSitePrototypeIsAsync
code-creation,Builtin,2,272389,0x7ff724a0bca4,12,CallSitePrototypeIsConstructor
code-creation,Builtin,2,272400,0x7ff724a0bcc4,12,CallSitePrototypeIsEval
code-creation,Builtin,2,272410,0x7ff724a0bce4,12,CallSitePrototypeIsNative
code-creation,Builtin,2,272422,0x7ff724a0bd04,12,CallSitePrototypeIsPromiseAll
code-creation,Builtin,2,272432,0x7ff724a0bd24,12,CallSitePrototypeIsToplevel
code-creation,Builtin,2,272443,0x7ff724a0bd44,12,CallSitePrototypeToString
code-creation,Builtin,2,272454,0x7ff724a0bd64,12,ConsoleDebug
code-creation,Builtin,2,272463,0x7ff724a0bd84,12,ConsoleError
code-creation,Builtin,2,272473,0x7ff724a0bda4,12,ConsoleInfo
code-creation,Builtin,2,272483,0x7ff724a0bdc4,12,ConsoleLog
code-creation,Builtin,2,272493,0x7ff724a0bde4,12,ConsoleWarn
code-creation,Builtin,2,272503,0x7ff724a0be04,12,ConsoleDir
code-creation,Builtin,2,272513,0x7ff724a0be24,12,ConsoleDirXml
code-creation,Builtin,2,272523,0x7ff724a0be44,12,ConsoleTable
code-creation,Builtin,2,272533,0x7ff724a0be64,12,ConsoleTrace
code-creation,Builtin,2,272543,0x7ff724a0be84,12,ConsoleGroup
code-creation,Builtin,2,272553,0x7ff724a0bea4,12,ConsoleGroupCollapsed
code-creation,Builtin,2,272563,0x7ff724a0bec4,12,ConsoleGroupEnd
code-creation,Builtin,2,272573,0x7ff724a0bee4,12,ConsoleClear
code-creation,Builtin,2,272583,0x7ff724a0bf04,12,ConsoleCount
code-creation,Builtin,2,272593,0x7ff724a0bf24,12,ConsoleCountReset
code-creation,Builtin,2,272603,0x7ff724a0bf44,12,ConsoleAssert
code-creation,Builtin,2,272613,0x7ff724a0bf64,12,ConsoleProfile
code-creation,Builtin,2,272623,0x7ff724a0bf84,12,ConsoleProfileEnd
code-creation,Builtin,2,272634,0x7ff724a0bfa4,12,ConsoleTime
code-creation,Builtin,2,272644,0x7ff724a0bfc4,12,ConsoleTimeLog
code-creation,Builtin,2,272654,0x7ff724a0bfe4,12,ConsoleTimeEnd
code-creation,Builtin,2,272664,0x7ff724a0c004,12,ConsoleTimeStamp
code-creation,Builtin,2,272674,0x7ff724a0c024,12,ConsoleContext
code-creation,Builtin,2,272687,0x7ff724a0c044,12,DataViewConstructor
code-creation,Builtin,2,272698,0x7ff724a0c064,12,DateConstructor
code-creation,Builtin,2,272708,0x7ff724a0c084,216,DatePrototypeGetDate
code-creation,Builtin,2,272719,0x7ff724a0c164,216,DatePrototypeGetDay
code-creation,Builtin,2,272729,0x7ff724a0c244,216,DatePrototypeGetFullYear
code-creation,Builtin,2,272739,0x7ff724a0c324,216,DatePrototypeGetHours
code-creation,Builtin,2,272753,0x7ff724a0c404,196,DatePrototypeGetMilliseconds
code-creation,Builtin,2,272765,0x7ff724a0c4e4,216,DatePrototypeGetMinutes
code-creation,Builtin,2,272775,0x7ff724a0c5c4,216,DatePrototypeGetMonth
code-creation,Builtin,2,272786,0x7ff724a0c6a4,216,DatePrototypeGetSeconds
code-creation,Builtin,2,272796,0x7ff724a0c784,124,DatePrototypeGetTime
code-creation,Builtin,2,272806,0x7ff724a0c804,196,DatePrototypeGetTimezoneOffset
code-creation,Builtin,2,272817,0x7ff724a0c8e4,196,DatePrototypeGetUTCDate
code-creation,Builtin,2,272828,0x7ff724a0c9c4,196,DatePrototypeGetUTCDay
code-creation,Builtin,2,272838,0x7ff724a0caa4,196,DatePrototypeGetUTCFullYear
code-creation,Builtin,2,272849,0x7ff724a0cb84,196,DatePrototypeGetUTCHours
code-creation,Builtin,2,272859,0x7ff724a0cc64,196,DatePrototypeGetUTCMilliseconds
code-creation,Builtin,2,272870,0x7ff724a0cd44,196,DatePrototypeGetUTCMinutes
code-creation,Builtin,2,272881,0x7ff724a0ce24,196,DatePrototypeGetUTCMonth
code-creation,Builtin,2,272891,0x7ff724a0cf04,196,DatePrototypeGetUTCSeconds
code-creation,Builtin,2,272902,0x7ff724a0cfe4,124,DatePrototypeValueOf
code-creation,Builtin,2,272912,0x7ff724a0d064,352,DatePrototypeToPrimitive
code-creation,Builtin,2,272922,0x7ff724a0d1e4,12,DatePrototypeGetYear
code-creation,Builtin,2,272933,0x7ff724a0d204,12,DatePrototypeSetYear
code-creation,Builtin,2,272943,0x7ff724a0d224,12,DateNow
code-creation,Builtin,2,272953,0x7ff724a0d244,12,DateParse
code-creation,Builtin,2,272962,0x7ff724a0d264,12,DatePrototypeSetDate
code-creation,Builtin,2,272973,0x7ff724a0d284,12,DatePrototypeSetFullYear
code-creation,Builtin,2,272983,0x7ff724a0d2a4,12,DatePrototypeSetHours
code-creation,Builtin,2,272993,0x7ff724a0d2c4,12,DatePrototypeSetMilliseconds
code-creation,Builtin,2,273004,0x7ff724a0d2e4,12,DatePrototypeSetMinutes
code-creation,Builtin,2,273014,0x7ff724a0d304,12,DatePrototypeSetMonth
code-creation,Builtin,2,273025,0x7ff724a0d324,12,DatePrototypeSetSeconds
code-creation,Builtin,2,273035,0x7ff724a0d344,12,DatePrototypeSetTime
code-creation,Builtin,2,273045,0x7ff724a0d364,12,DatePrototypeSetUTCDate
code-creation,Builtin,2,273056,0x7ff724a0d384,12,DatePrototypeSetUTCFullYear
code-creation,Builtin,2,273066,0x7ff724a0d3a4,12,DatePrototypeSetUTCHours
code-creation,Builtin,2,273076,0x7ff724a0d3c4,12,DatePrototypeSetUTCMilliseconds
code-creation,Builtin,2,273087,0x7ff724a0d3e4,12,DatePrototypeSetUTCMinutes
code-creation,Builtin,2,273097,0x7ff724a0d404,12,DatePrototypeSetUTCMonth
code-creation,Builtin,2,273108,0x7ff724a0d424,12,DatePrototypeSetUTCSeconds
code-creation,Builtin,2,273118,0x7ff724a0d444,12,DatePrototypeToDateString
code-creation,Builtin,2,273129,0x7ff724a0d464,12,DatePrototypeToISOString
code-creation,Builtin,2,273139,0x7ff724a0d484,12,DatePrototypeToUTCString
code-creation,Builtin,2,273150,0x7ff724a0d4a4,12,DatePrototypeToString
code-creation,Builtin,2,273167,0x7ff724a0d4c4,12,DatePrototypeToTimeString
code-creation,Builtin,2,273177,0x7ff724a0d4e4,12,DatePrototypeToJson
code-creation,Builtin,2,273187,0x7ff724a0d504,12,DateUTC
code-creation,Builtin,2,273197,0x7ff724a0d524,12,ErrorConstructor
code-creation,Builtin,2,273207,0x7ff724a0d544,12,ErrorCaptureStackTrace
code-creation,Builtin,2,273217,0x7ff724a0d564,12,ErrorPrototypeToString
code-creation,Builtin,2,273228,0x7ff724a0d584,12,FunctionConstructor
code-creation,Builtin,2,273238,0x7ff724a0d5a4,68,FunctionPrototypeApply
code-creation,Builtin,2,273248,0x7ff724a0d604,12,FunctionPrototypeBind
code-creation,Builtin,2,273258,0x7ff724a0d624,32,FunctionPrototypeCall
code-creation,Builtin,2,273269,0x7ff724a0d664,12,FunctionPrototypeToString
code-creation,Builtin,2,273279,0x7ff724a0d684,192,CreateIterResultObject
code-creation,Builtin,2,273289,0x7ff724a0d764,788,CreateGeneratorObject
code-creation,Builtin,2,273300,0x7ff724a0da84,12,GeneratorFunctionConstructor
code-creation,Builtin,2,273310,0x7ff724a0daa4,412,GeneratorPrototypeNext
code-creation,Builtin,2,273321,0x7ff724a0dc44,420,GeneratorPrototypeReturn
code-creation,Builtin,2,273331,0x7ff724a0de04,424,GeneratorPrototypeThrow
code-creation,Builtin,2,273344,0x7ff724a0dfc4,12,AsyncFunctionConstructor
code-creation,Builtin,2,273355,0x7ff724a0dfe4,372,SuspendGeneratorBaseline
code-creation,Builtin,2,273366,0x7ff724a0e164,88,ResumeGeneratorBaseline
code-creation,Builtin,2,273376,0x7ff724a0e1c4,36,GetIteratorWithFeedbackLazyDeoptContinuation
code-creation,Builtin,2,273387,0x7ff724a0e204,12,GlobalDecodeURI
code-creation,Builtin,2,273398,0x7ff724a0e224,12,GlobalDecodeURIComponent
code-creation,Builtin,2,273408,0x7ff724a0e244,12,GlobalEncodeURI
code-creation,Builtin,2,273418,0x7ff724a0e264,12,GlobalEncodeURIComponent
code-creation,Builtin,2,273430,0x7ff724a0e284,12,GlobalEscape
code-creation,Builtin,2,273440,0x7ff724a0e2a4,12,GlobalUnescape
code-creation,Builtin,2,273450,0x7ff724a0e2c4,12,GlobalEval
code-creation,Builtin,2,273460,0x7ff724a0e2e4,132,GlobalIsFinite
code-creation,Builtin,2,273470,0x7ff724a0e384,124,GlobalIsNaN
code-creation,Builtin,2,273480,0x7ff724a0e404,12,JsonParse
code-creation,Builtin,2,273490,0x7ff724a0e424,12,JsonStringify
code-creation,Builtin,2,273500,0x7ff724a0e444,4608,LoadIC
code-creation,Builtin,2,273510,0x7ff724a0f664,4296,LoadIC_Megamorphic
code-creation,Builtin,2,273520,0x7ff724a10744,4520,LoadIC_Noninlined
code-creation,Builtin,2,273531,0x7ff724a11904,44,LoadICTrampoline
code-creation,Builtin,2,273541,0x7ff724a11944,24,LoadICBaseline
code-creation,Builtin,2,273551,0x7ff724a11964,44,LoadICTrampoline_Megamorphic
code-creation,Builtin,2,273561,0x7ff724a119a4,7376,LoadSuperIC
code-creation,Builtin,2,273571,0x7ff724a13684,24,LoadSuperICBaseline
code-creation,Builtin,2,273582,0x7ff724a136a4,8148,KeyedLoadIC
code-creation,Builtin,2,273592,0x7ff724a15684,13088,KeyedLoadIC_Megamorphic
code-creation,Builtin,2,273602,0x7ff724a189c4,44,KeyedLoadICTrampoline
code-creation,Builtin,2,273613,0x7ff724a18a04,24,KeyedLoadICBaseline
code-creation,Builtin,2,273623,0x7ff724a18a24,44,KeyedLoadICTrampoline_Megamorphic
code-creation,Builtin,2,273634,0x7ff724a18a64,5104,StoreGlobalIC
code-creation,Builtin,2,273644,0x7ff724a19e64,44,StoreGlobalICTrampoline
code-creation,Builtin,2,273654,0x7ff724a19ea4,24,StoreGlobalICBaseline
code-creation,Builtin,2,273664,0x7ff724a19ec4,5340,StoreIC
code-creation,Builtin,2,273674,0x7ff724a1b3a4,44,StoreICTrampoline
code-creation,Builtin,2,273685,0x7ff724a1b3e4,24,StoreICBaseline
code-creation,Builtin,2,273695,0x7ff724a1b404,5780,KeyedStoreIC
code-creation,Builtin,2,273705,0x7ff724a1caa4,44,KeyedStoreICTrampoline
code-creation,Builtin,2,273715,0x7ff724a1cae4,24,KeyedStoreICBaseline
code-creation,Builtin,2,273725,0x7ff724a1cb04,404,StoreInArrayLiteralIC
code-creation,Builtin,2,273736,0x7ff724a1cca4,24,StoreInArrayLiteralICBaseline
code-creation,Builtin,2,273746,0x7ff724a1ccc4,140,LookupContextBaseline
code-creation,Builtin,2,273757,0x7ff724a1cd64,140,LookupContextInsideTypeofBaseline
code-creation,Builtin,2,273768,0x7ff724a1ce04,3244,LoadGlobalIC
code-creation,Builtin,2,273778,0x7ff724a1dac4,3220,LoadGlobalICInsideTypeof
code-creation,Builtin,2,273788,0x7ff724a1e764,44,LoadGlobalICTrampoline
code-creation,Builtin,2,273799,0x7ff724a1e7a4,24,LoadGlobalICBaseline
code-creation,Builtin,2,273809,0x7ff724a1e7c4,44,LoadGlobalICInsideTypeofTrampoline
code-creation,Builtin,2,273820,0x7ff724a1e804,24,LoadGlobalICInsideTypeofBaseline
code-creation,Builtin,2,273830,0x7ff724a1e824,140,LookupGlobalICBaseline
code-creation,Builtin,2,273841,0x7ff724a1e8c4,140,LookupGlobalICInsideTypeofBaseline
code-creation,Builtin,2,273852,0x7ff724a1e964,2064,CloneObjectIC
code-creation,Builtin,2,273862,0x7ff724a1f184,24,CloneObjectICBaseline
code-creation,Builtin,2,273872,0x7ff724a1f1a4,1988,CloneObjectIC_Slow
code-creation,Builtin,2,273882,0x7ff724a1f984,2756,KeyedHasIC
code-creation,Builtin,2,273892,0x7ff724a20464,24,KeyedHasICBaseline
code-creation,Builtin,2,273902,0x7ff724a20484,2640,KeyedHasIC_Megamorphic
code-creation,Builtin,2,273913,0x7ff724a20ee4,1436,IterableToList
code-creation,Builtin,2,273923,0x7ff724a21484,1240,IterableToFixedArray
code-creation,Builtin,2,273933,0x7ff724a21964,748,IterableToListWithSymbolLookup
code-creation,Builtin,2,274174,0x7ff724a21c64,56,IterableToFixedArrayWithSymbolLookupSlow
code-creation,Builtin,2,274193,0x7ff724a21ca4,124,IterableToListMayPreserveHoles
code-creation,Builtin,2,274204,0x7ff724a21d24,984,IterableToFixedArrayForWasm
code-creation,Builtin,2,274215,0x7ff724a22104,1616,StringListFromIterable
code-creation,Builtin,2,274225,0x7ff724a22764,1228,FindOrderedHashMapEntry
code-creation,Builtin,2,274236,0x7ff724a22c44,4156,MapConstructor
code-creation,Builtin,2,274246,0x7ff724a23c84,1996,MapPrototypeSet
code-creation,Builtin,2,274256,0x7ff724a24464,1524,MapPrototypeDelete
code-creation,Builtin,2,274266,0x7ff724a24a64,204,MapPrototypeGet
code-creation,Builtin,2,274276,0x7ff724a24b44,164,MapPrototypeHas
code-creation,Builtin,2,274286,0x7ff724a24c04,12,MapPrototypeClear
code-creation,Builtin,2,274296,0x7ff724a24c24,284,MapPrototypeEntries
code-creation,Builtin,2,274307,0x7ff724a24d44,144,MapPrototypeGetSize
code-creation,Builtin,2,274317,0x7ff724a24de4,492,MapPrototypeForEach
code-creation,Builtin,2,274327,0x7ff724a24fe4,284,MapPrototypeKeys
code-creation,Builtin,2,274337,0x7ff724a25104,284,MapPrototypeValues
code-creation,Builtin,2,274348,0x7ff724a25224,1052,MapIteratorPrototypeNext
code-creation,Builtin,2,274358,0x7ff724a25644,1168,MapIteratorToList
code-creation,Builtin,2,274368,0x7ff724a25ae4,12,NumberPrototypeToExponential
code-creation,Builtin,2,274379,0x7ff724a25b04,12,NumberPrototypeToFixed
code-creation,Builtin,2,274389,0x7ff724a25b24,12,NumberPrototypeToLocaleString
code-creation,Builtin,2,274400,0x7ff724a25b44,12,NumberPrototypeToPrecision
code-creation,Builtin,2,274410,0x7ff724a25b64,328,SameValue
code-creation,Builtin,2,274422,0x7ff724a25cc4,204,SameValueNumbersOnly
code-creation,Builtin,2,274432,0x7ff724a25da4,792,Add_Baseline
code-creation,Builtin,2,274442,0x7ff724a260c4,828,Subtract_Baseline
code-creation,Builtin,2,274452,0x7ff724a26404,808,Multiply_Baseline
code-creation,Builtin,2,274462,0x7ff724a26744,832,Divide_Baseline
code-creation,Builtin,2,274473,0x7ff724a26aa4,764,Modulus_Baseline
code-creation,Builtin,2,274486,0x7ff724a26da4,808,Exponentiate_Baseline
code-creation,Builtin,2,274497,0x7ff724a270e4,708,BitwiseAnd_Baseline
code-creation,Builtin,2,274507,0x7ff724a273c4,700,BitwiseOr_Baseline
code-creation,Builtin,2,274517,0x7ff724a27684,708,BitwiseXor_Baseline
code-creation,Builtin,2,274528,0x7ff724a27964,720,ShiftLeft_Baseline
code-creation,Builtin,2,274538,0x7ff724a27c44,720,ShiftRight_Baseline
code-creation,Builtin,2,274548,0x7ff724a27f24,836,ShiftRightLogical_Baseline
code-creation,Builtin,2,274558,0x7ff724a28284,720,Add_WithFeedback
code-creation,Builtin,2,274568,0x7ff724a28564,780,Subtract_WithFeedback
code-creation,Builtin,2,274579,0x7ff724a28884,776,Multiply_WithFeedback
code-creation,Builtin,2,274589,0x7ff724a28ba4,804,Divide_WithFeedback
code-creation,Builtin,2,274599,0x7ff724a28ee4,724,Modulus_WithFeedback
code-creation,Builtin,2,274610,0x7ff724a291c4,764,Exponentiate_WithFeedback
code-creation,Builtin,2,274620,0x7ff724a294c4,684,BitwiseAnd_WithFeedback
code-creation,Builtin,2,274630,0x7ff724a29784,676,BitwiseOr_WithFeedback
code-creation,Builtin,2,274641,0x7ff724a29a44,684,BitwiseXor_WithFeedback
code-creation,Builtin,2,274651,0x7ff724a29d04,692,ShiftLeft_WithFeedback
code-creation,Builtin,2,274661,0x7ff724a29fc4,692,ShiftRight_WithFeedback
code-creation,Builtin,2,274672,0x7ff724a2a284,808,ShiftRightLogical_WithFeedback
code-creation,Builtin,2,274682,0x7ff724a2a5c4,1696,Equal_Baseline
code-creation,Builtin,2,274693,0x7ff724a2ac84,908,StrictEqual_Baseline
code-creation,Builtin,2,274703,0x7ff724a2b024,1264,LessThan_Baseline
code-creation,Builtin,2,274713,0x7ff724a2b524,1264,GreaterThan_Baseline
code-creation,Builtin,2,274723,0x7ff724a2ba24,1264,LessThanOrEqual_Baseline
code-creation,Builtin,2,274741,0x7ff724a2bf24,1264,GreaterThanOrEqual_Baseline
code-creation,Builtin,2,274751,0x7ff724a2c424,1620,Equal_WithFeedback
code-creation,Builtin,2,274761,0x7ff724a2ca84,940,StrictEqual_WithFeedback
code-creation,Builtin,2,274772,0x7ff724a2ce44,1240,LessThan_WithFeedback
code-creation,Builtin,2,274785,0x7ff724a2d324,1240,GreaterThan_WithFeedback
code-creation,Builtin,2,274797,0x7ff724a2d804,1240,LessThanOrEqual_WithFeedback
code-creation,Builtin,2,274808,0x7ff724a2dce4,1240,GreaterThanOrEqual_WithFeedback
code-creation,Builtin,2,274818,0x7ff724a2e1c4,332,BitwiseNot_Baseline
code-creation,Builtin,2,274829,0x7ff724a2e324,460,Decrement_Baseline
code-creation,Builtin,2,274839,0x7ff724a2e504,464,Increment_Baseline
code-creation,Builtin,2,274849,0x7ff724a2e6e4,488,Negate_Baseline
code-creation,Builtin,2,274859,0x7ff724a2e8e4,316,BitwiseNot_WithFeedback
code-creation,Builtin,2,274869,0x7ff724a2ea24,440,Decrement_WithFeedback
code-creation,Builtin,2,274880,0x7ff724a2ebe4,444,Increment_WithFeedback
code-creation,Builtin,2,274890,0x7ff724a2eda4,472,Negate_WithFeedback
code-creation,Builtin,2,274900,0x7ff724a2ef84,252,ObjectAssign
code-creation,Builtin,2,274910,0x7ff724a2f084,864,ObjectCreate
code-creation,Builtin,2,274920,0x7ff724a2f404,12,ObjectDefineGetter
code-creation,Builtin,2,274931,0x7ff724a2f424,12,ObjectDefineProperties
code-creation,Builtin,2,274941,0x7ff724a2f444,12,ObjectDefineProperty
code-creation,Builtin,2,274951,0x7ff724a2f464,12,ObjectDefineSetter
code-creation,Builtin,2,274961,0x7ff724a2f484,1516,ObjectEntries
code-creation,Builtin,2,274971,0x7ff724a2fa84,12,ObjectFreeze
code-creation,Builtin,2,274981,0x7ff724a2faa4,5620,ObjectGetOwnPropertyDescriptor
code-creation,Builtin,2,274992,0x7ff724a310a4,12,ObjectGetOwnPropertyDescriptors
code-creation,Builtin,2,275003,0x7ff724a310c4,600,ObjectGetOwnPropertyNames
code-creation,Builtin,2,275013,0x7ff724a31324,12,ObjectGetOwnPropertySymbols
code-creation,Builtin,2,275024,0x7ff724a31344,164,ObjectHasOwn
code-creation,Builtin,2,275034,0x7ff724a31404,388,ObjectIs
code-creation,Builtin,2,275044,0x7ff724a315a4,12,ObjectIsFrozen
code-creation,Builtin,2,275054,0x7ff724a315c4,12,ObjectIsSealed
code-creation,Builtin,2,275064,0x7ff724a315e4,536,ObjectKeys
code-creation,Builtin,2,275073,0x7ff724a31804,12,ObjectLookupGetter
code-creation,Builtin,2,275084,0x7ff724a31824,12,ObjectLookupSetter
code-creation,Builtin,2,275094,0x7ff724a31844,2280,ObjectPrototypeHasOwnProperty
code-creation,Builtin,2,275104,0x7ff724a32144,216,ObjectPrototypeIsPrototypeOf
code-creation,Builtin,2,275115,0x7ff724a32224,12,ObjectPrototypePropertyIsEnumerable
code-creation,Builtin,2,275126,0x7ff724a32244,12,ObjectPrototypeGetProto
code-creation,Builtin,2,275136,0x7ff724a32264,12,ObjectPrototypeSetProto
code-creation,Builtin,2,275146,0x7ff724a32284,12,ObjectSeal
code-creation,Builtin,2,275156,0x7ff724a322a4,1108,ObjectToString
code-creation,Builtin,2,275166,0x7ff724a32704,1284,ObjectValues
code-creation,Builtin,2,275176,0x7ff724a32c24,280,OrdinaryHasInstance
code-creation,Builtin,2,275187,0x7ff724a32d44,344,InstanceOf
code-creation,Builtin,2,275197,0x7ff724a32ea4,632,InstanceOf_WithFeedback
code-creation,Builtin,2,275207,0x7ff724a33124,648,InstanceOf_Baseline
code-creation,Builtin,2,275217,0x7ff724a333c4,268,ForInEnumerate
code-creation,Builtin,2,275228,0x7ff724a334e4,148,ForInPrepare
code-creation,Builtin,2,275238,0x7ff724a33584,2584,ForInFilter
code-creation,Builtin,2,275248,0x7ff724a33fa4,52,ReflectApply
code-creation,Builtin,2,275258,0x7ff724a33fe4,60,ReflectConstruct
code-creation,Builtin,2,275268,0x7ff724a34024,12,ReflectDefineProperty
code-creation,Builtin,2,275278,0x7ff724a34044,12,ReflectGetOwnPropertyDescriptor
code-creation,Builtin,2,275289,0x7ff724a34064,12,ReflectOwnKeys
code-creation,Builtin,2,275299,0x7ff724a34084,12,ReflectSet
code-creation,Builtin,2,275309,0x7ff724a340a4,12,RegExpCapture1Getter
code-creation,Builtin,2,275319,0x7ff724a340c4,12,RegExpCapture2Getter
code-creation,Builtin,2,275329,0x7ff724a340e4,12,RegExpCapture3Getter
code-creation,Builtin,2,275340,0x7ff724a34104,12,RegExpCapture4Getter
code-creation,Builtin,2,275350,0x7ff724a34124,12,RegExpCapture5Getter
code-creation,Builtin,2,275360,0x7ff724a34144,12,RegExpCapture6Getter
code-creation,Builtin,2,275370,0x7ff724a34164,12,RegExpCapture7Getter
code-creation,Builtin,2,275380,0x7ff724a34184,12,RegExpCapture8Getter
code-creation,Builtin,2,275393,0x7ff724a341a4,12,RegExpCapture9Getter
code-creation,Builtin,2,275404,0x7ff724a341c4,2212,RegExpConstructor
code-creation,Builtin,2,275415,0x7ff724a34a84,12,RegExpInputGetter
code-creation,Builtin,2,275426,0x7ff724a34aa4,12,RegExpInputSetter
code-creation,Builtin,2,275436,0x7ff724a34ac4,12,RegExpLastMatchGetter
code-creation,Builtin,2,275446,0x7ff724a34ae4,12,RegExpLastParenGetter
code-creation,Builtin,2,275457,0x7ff724a34b04,12,RegExpLeftContextGetter
code-creation,Builtin,2,275467,0x7ff724a34b24,908,RegExpPrototypeCompile
code-creation,Builtin,2,275478,0x7ff724a34ec4,12,RegExpPrototypeToString
code-creation,Builtin,2,275488,0x7ff724a34ee4,12,RegExpRightContextGetter
code-creation,Builtin,2,275498,0x7ff724a34f04,252,RegExpExecAtom
code-creation,Builtin,2,275509,0x7ff724a35004,1040,RegExpExecInternal
code-creation,Builtin,2,275519,0x7ff724a35424,8,RegExpInterpreterTrampoline
code-creation,Builtin,2,275529,0x7ff724a35444,8,RegExpExperimentalTrampoline
code-creation,Builtin,2,275540,0x7ff724a35464,2684,SetConstructor
code-creation,Builtin,2,275550,0x7ff724a35ee4,1284,SetPrototypeHas
code-creation,Builtin,2,275560,0x7ff724a36404,1736,SetPrototypeAdd
code-creation,Builtin,2,275570,0x7ff724a36ae4,1476,SetPrototypeDelete
code-creation,Builtin,2,275581,0x7ff724a370c4,12,SetPrototypeClear
code-creation,Builtin,2,275591,0x7ff724a370e4,284,SetPrototypeEntries
code-creation,Builtin,2,275601,0x7ff724a37204,144,SetPrototypeGetSize
code-creation,Builtin,2,275611,0x7ff724a372a4,444,SetPrototypeForEach
code-creation,Builtin,2,275622,0x7ff724a37464,284,SetPrototypeValues
code-creation,Builtin,2,275632,0x7ff724a37584,988,SetIteratorPrototypeNext
code-creation,Builtin,2,275642,0x7ff724a37964,1112,SetOrSetIteratorToList
code-creation,Builtin,2,275653,0x7ff724a37dc4,12,SharedArrayBufferPrototypeGetByteLength
code-creation,Builtin,2,275664,0x7ff724a37de4,12,SharedArrayBufferPrototypeSlice
code-creation,Builtin,2,275674,0x7ff724a37e04,12,SharedArrayBufferPrototypeGrow
code-creation,Builtin,2,275685,0x7ff724a37e24,1280,AtomicsLoad
code-creation,Builtin,2,275695,0x7ff724a38344,1008,AtomicsStore
code-creation,Builtin,2,275705,0x7ff724a38744,1704,AtomicsExchange
code-creation,Builtin,2,275715,0x7ff724a38e04,2092,AtomicsCompareExchange
code-creation,Builtin,2,275725,0x7ff724a39644,1804,AtomicsAdd
code-creation,Builtin,2,275735,0x7ff724a39d64,1804,AtomicsSub
code-creation,Builtin,2,275745,0x7ff724a3a484,1804,AtomicsAnd
code-creation,Builtin,2,275755,0x7ff724a3aba4,1804,AtomicsOr
code-creation,Builtin,2,275765,0x7ff724a3b2c4,1804,AtomicsXor
code-creation,Builtin,2,275775,0x7ff724a3b9e4,12,AtomicsNotify
code-creation,Builtin,2,275785,0x7ff724a3ba04,12,AtomicsIsLockFree
code-creation,Builtin,2,275795,0x7ff724a3ba24,12,AtomicsWait
code-creation,Builtin,2,275805,0x7ff724a3ba44,12,AtomicsWaitAsync
code-creation,Builtin,2,275815,0x7ff724a3ba64,12,StringFromCodePoint
code-creation,Builtin,2,275825,0x7ff724a3ba84,1428,StringFromCharCode
code-creation,Builtin,2,275836,0x7ff724a3c024,12,StringPrototypeLastIndexOf
code-creation,Builtin,2,275846,0x7ff724a3c044,4360,StringPrototypeMatchAll
code-creation,Builtin,2,275856,0x7ff724a3d164,12,StringPrototypeLocaleCompare
code-creation,Builtin,2,275867,0x7ff724a3d184,1228,StringPrototypeReplace
code-creation,Builtin,2,275877,0x7ff724a3d664,2900,StringPrototypeSplit
code-creation,Builtin,2,275888,0x7ff724a3e1c4,12,StringRaw
code-creation,Builtin,2,275897,0x7ff724a3e1e4,12,SymbolConstructor
code-creation,Builtin,2,275908,0x7ff724a3e204,12,SymbolFor
code-creation,Builtin,2,275917,0x7ff724a3e224,12,SymbolKeyFor
code-creation,Builtin,2,275927,0x7ff724a3e244,88,TypedArrayBaseConstructor
code-creation,Builtin,2,275938,0x7ff724a3e2a4,256,TypedArrayConstructor
code-creation,Builtin,2,275948,0x7ff724a3e3c4,12,TypedArrayPrototypeBuffer
code-creation,Builtin,2,275958,0x7ff724a3e3e4,888,TypedArrayPrototypeByteLength
code-creation,Builtin,2,275969,0x7ff724a3e764,368,TypedArrayPrototypeByteOffset
code-creation,Builtin,2,275980,0x7ff724a3e8e4,584,TypedArrayPrototypeLength
code-creation,Builtin,2,275990,0x7ff724a3eb44,12,TypedArrayPrototypeCopyWithin
code-creation,Builtin,2,276003,0x7ff724a3eb64,12,TypedArrayPrototypeFill
code-creation,Builtin,2,276015,0x7ff724a3eb84,12,TypedArrayPrototypeIncludes
code-creation,Builtin,2,276025,0x7ff724a3eba4,12,TypedArrayPrototypeIndexOf
code-creation,Builtin,2,276036,0x7ff724a3ebc4,12,TypedArrayPrototypeLastIndexOf
code-creation,Builtin,2,276046,0x7ff724a3ebe4,12,TypedArrayPrototypeReverse
code-creation,Builtin,2,276057,0x7ff724a3ec04,316,TypedArrayPrototypeToStringTag
code-creation,Builtin,2,276074,0x7ff724a3ed44,10664,TypedArrayPrototypeMap
code-creation,Builtin,2,276085,0x7ff724a41704,792,GenericJSToWasmWrapper
code-creation,Builtin,2,276095,0x7ff724a41a24,148,WasmCompileLazy
code-creation,Builtin,2,276105,0x7ff724a41ac4,168,WasmDebugBreak
code-creation,Builtin,2,276115,0x7ff724a41b84,16,WasmOnStackReplace
code-creation,Builtin,2,276126,0x7ff724a41ba4,140,WasmFloat32ToNumber
code-creation,Builtin,2,276136,0x7ff724a41c44,152,WasmFloat64ToNumber
code-creation,Builtin,2,276146,0x7ff724a41ce4,4,WasmI32AtomicWait32
code-creation,Builtin,2,276156,0x7ff724a41d04,4,WasmI64AtomicWait32
code-creation,Builtin,2,276166,0x7ff724a41d24,24,JSToWasmLazyDeoptContinuation
code-creation,Builtin,2,276177,0x7ff724a41d44,4320,WeakMapConstructor
code-creation,Builtin,2,276187,0x7ff724a42e44,196,WeakMapLookupHashIndex
code-creation,Builtin,2,276198,0x7ff724a42f24,220,WeakMapGet
code-creation,Builtin,2,276208,0x7ff724a43004,176,WeakMapPrototypeHas
code-creation,Builtin,2,276218,0x7ff724a430c4,204,WeakMapPrototypeSet
code-creation,Builtin,2,276228,0x7ff724a431a4,144,WeakMapPrototypeDelete
code-creation,Builtin,2,276238,0x7ff724a43244,2876,WeakSetConstructor
code-creation,Builtin,2,276249,0x7ff724a43d84,176,WeakSetPrototypeHas
code-creation,Builtin,2,276259,0x7ff724a43e44,204,WeakSetPrototypeAdd
code-creation,Builtin,2,276269,0x7ff724a43f24,144,WeakSetPrototypeDelete
code-creation,Builtin,2,276280,0x7ff724a43fc4,372,WeakCollectionDelete
code-creation,Builtin,2,276290,0x7ff724a44144,764,WeakCollectionSet
code-creation,Builtin,2,276300,0x7ff724a44444,296,AsyncGeneratorResolve
code-creation,Builtin,2,276311,0x7ff724a44584,100,AsyncGeneratorReject
code-creation,Builtin,2,276321,0x7ff724a44604,2760,AsyncGeneratorYield
code-creation,Builtin,2,276331,0x7ff724a450e4,2872,AsyncGeneratorReturn
code-creation,Builtin,2,276342,0x7ff724a45c24,292,AsyncGeneratorResumeNext
code-creation,Builtin,2,276352,0x7ff724a45d64,12,AsyncGeneratorFunctionConstructor
code-creation,Builtin,2,276363,0x7ff724a45d84,1020,AsyncGeneratorPrototypeNext
code-creation,Builtin,2,276374,0x7ff724a46184,1028,AsyncGeneratorPrototypeReturn
code-creation,Builtin,2,276384,0x7ff724a465a4,1028,AsyncGeneratorPrototypeThrow
code-creation,Builtin,2,276395,0x7ff724a469c4,2736,AsyncGeneratorAwaitCaught
code-creation,Builtin,2,276405,0x7ff724a47484,2736,AsyncGeneratorAwaitUncaught
code-creation,Builtin,2,276416,0x7ff724a47f44,116,AsyncGeneratorAwaitResolveClosure
code-creation,Builtin,2,276428,0x7ff724a47fc4,128,AsyncGeneratorAwaitRejectClosure
code-creation,Builtin,2,276439,0x7ff724a48064,116,AsyncGeneratorYieldResolveClosure
code-creation,Builtin,2,276486,0x7ff724a480e4,116,AsyncGeneratorReturnClosedResolveClosure
code-creation,Builtin,2,276508,0x7ff724a48164,112,AsyncGeneratorReturnClosedRejectClosure
code-creation,Builtin,2,276519,0x7ff724a481e4,128,AsyncGeneratorReturnResolveClosure
code-creation,Builtin,2,276531,0x7ff724a48284,1592,AsyncFromSyncIteratorPrototypeNext
code-creation,Builtin,2,276544,0x7ff724a488c4,1696,AsyncFromSyncIteratorPrototypeThrow
code-creation,Builtin,2,276557,0x7ff724a48f84,1716,AsyncFromSyncIteratorPrototypeReturn
code-creation,Builtin,2,276569,0x7ff724a49644,100,AsyncIteratorValueUnwrap
code-creation,Builtin,2,276581,0x7ff724a496c4,224,CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit
code-creation,Builtin,2,276594,0x7ff724a497c4,224,CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit
code-creation,Builtin,2,276608,0x7ff724a498c4,208,CEntry_Return1_DontSaveFPRegs_ArgvInRegister_NoBuiltinExit
code-creation,Builtin,2,276621,0x7ff724a499a4,400,CEntry_Return1_SaveFPRegs_ArgvOnStack_NoBuiltinExit
code-creation,Builtin,2,276638,0x7ff724a49b44,400,CEntry_Return1_SaveFPRegs_ArgvOnStack_BuiltinExit
code-creation,Builtin,2,276653,0x7ff724a49ce4,240,CEntry_Return2_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit
code-creation,Builtin,2,276666,0x7ff724a49de4,240,CEntry_Return2_DontSaveFPRegs_ArgvOnStack_BuiltinExit
code-creation,Builtin,2,276679,0x7ff724a49ee4,224,CEntry_Return2_DontSaveFPRegs_ArgvInRegister_NoBuiltinExit
code-creation,Builtin,2,276693,0x7ff724a49fe4,412,CEntry_Return2_SaveFPRegs_ArgvOnStack_NoBuiltinExit
code-creation,Builtin,2,276706,0x7ff724a4a184,412,CEntry_Return2_SaveFPRegs_ArgvOnStack_BuiltinExit
code-creation,Builtin,2,276719,0x7ff724a4a324,4,DirectCEntry
code-creation,Builtin,2,276730,0x7ff724a4a344,1096,StringAdd_CheckNone
code-creation,Builtin,2,276742,0x7ff724a4a7a4,2484,SubString
code-creation,Builtin,2,276753,0x7ff724a4b164,16,StackCheck
code-creation,Builtin,2,276765,0x7ff724a4b184,84,DoubleToI
code-creation,Builtin,2,276776,0x7ff724a4b1e4,2236,GetProperty
code-creation,Builtin,2,276788,0x7ff724a4baa4,2308,GetPropertyWithReceiver
code-creation,Builtin,2,276801,0x7ff724a4c3c4,16004,SetProperty
code-creation,Builtin,2,276822,0x7ff724a50264,13480,SetPropertyInLiteral
code-creation,Builtin,2,276844,0x7ff724a53724,8,MemCopyUint8Uint8
code-creation,Builtin,2,276865,0x7ff724a53744,8,MemMove
code-creation,Builtin,2,276886,0x7ff724a53764,12,IsTraceCategoryEnabled
code-creation,Builtin,2,276907,0x7ff724a53784,12,Trace
code-creation,Builtin,2,276928,0x7ff724a537a4,12,FinalizationRegistryUnregister
code-creation,Builtin,2,276950,0x7ff724a537c4,416,AsyncModuleEvaluate
code-creation,Builtin,2,276971,0x7ff724a53984,12,CallAsyncModuleFulfilled
code-creation,Builtin,2,276993,0x7ff724a539a4,12,CallAsyncModuleRejected
code-creation,Builtin,2,277015,0x7ff724a539c4,260,AggregateErrorConstructor
code-creation,Builtin,2,277037,0x7ff724a53ae4,856,ArrayPrototypeAt
code-creation,Builtin,2,277058,0x7ff724a53e44,656,ArrayPrototypeConcat
code-creation,Builtin,2,277195,0x7ff724a540e4,5824,ArrayPrototypeCopyWithin
code-creation,Builtin,2,277220,0x7ff724a557c4,212,ArrayEveryLoopEagerDeoptContinuation
code-creation,Builtin,2,277243,0x7ff724a558a4,612,ArrayEveryLoopLazyDeoptContinuation
code-creation,Builtin,2,277266,0x7ff724a55b24,3316,ArrayEveryLoopContinuation
code-creation,Builtin,2,277288,0x7ff724a56824,1464,ArrayEvery
code-creation,Builtin,2,277309,0x7ff724a56de4,284,ArrayFilterLoopEagerDeoptContinuation
code-creation,Builtin,2,277332,0x7ff724a56f04,988,ArrayFilterLoopLazyDeoptContinuation
code-creation,Builtin,2,277355,0x7ff724a572e4,3564,ArrayFilterLoopContinuation
code-creation,Builtin,2,277377,0x7ff724a580e4,4260,ArrayFilter
code-creation,Builtin,2,277398,0x7ff724a591a4,204,ArrayFindLoopEagerDeoptContinuation
code-creation,Builtin,2,277421,0x7ff724a59284,32,ArrayFindLoopLazyDeoptContinuation
code-creation,Builtin,2,277443,0x7ff724a592c4,312,ArrayFindLoopAfterCallbackLazyDeoptContinuation
code-creation,Builtin,2,277467,0x7ff724a59404,528,ArrayFindLoopContinuation
code-creation,Builtin,2,277489,0x7ff724a59624,1460,ArrayPrototypeFind
code-creation,Builtin,2,277510,0x7ff724a59be4,204,ArrayFindIndexLoopEagerDeoptContinuation
code-creation,Builtin,2,277533,0x7ff724a59cc4,32,ArrayFindIndexLoopLazyDeoptContinuation
code-creation,Builtin,2,277558,0x7ff724a59d04,312,ArrayFindIndexLoopAfterCallbackLazyDeoptContinuation
code-creation,Builtin,2,277582,0x7ff724a59e44,524,ArrayFindIndexLoopContinuation
code-creation,Builtin,2,277604,0x7ff724a5a064,1460,ArrayPrototypeFindIndex
code-creation,Builtin,2,277626,0x7ff724a5a624,448,ArrayFindLastLoopContinuation
code-creation,Builtin,2,277648,0x7ff724a5a804,1700,ArrayPrototypeFindLast
code-creation,Builtin,2,277670,0x7ff724a5aec4,448,ArrayFindLastIndexLoopContinuation
code-creation,Builtin,2,277692,0x7ff724a5b0a4,1700,ArrayPrototypeFindLastIndex
code-creation,Builtin,2,277715,0x7ff724a5b764,212,ArrayForEachLoopEagerDeoptContinuation
code-creation,Builtin,2,277737,0x7ff724a5b844,212,ArrayForEachLoopLazyDeoptContinuation
code-creation,Builtin,2,277766,0x7ff724a5b924,3156,ArrayForEachLoopContinuation
code-creation,Builtin,2,277792,0x7ff724a5c584,1328,ArrayForEach
code-creation,Builtin,2,277813,0x7ff724a5cac4,3572,ArrayFrom
code-creation,Builtin,2,277834,0x7ff724a5d8c4,148,ArrayIsArray
code-creation,Builtin,2,277855,0x7ff724a5d964,404,LoadJoinElement_DictionaryElements_0
code-creation,Builtin,2,277877,0x7ff724a5db04,36,LoadJoinElement_FastSmiOrObjectElements_0
code-creation,Builtin,2,277900,0x7ff724a5db44,140,LoadJoinElement_FastDoubleElements_0
code-creation,Builtin,2,277923,0x7ff724a5dbe4,312,ConvertToLocaleString
code-creation,Builtin,2,277945,0x7ff724a5dd24,752,JoinStackPush
code-creation,Builtin,2,277966,0x7ff724a5e024,272,JoinStackPop
code-creation,Builtin,2,277987,0x7ff724a5e144,6628,ArrayPrototypeJoin
code-creation,Builtin,2,278008,0x7ff724a5fb44,5360,ArrayPrototypeToLocaleString
code-creation,Builtin,2,278030,0x7ff724a61044,236,ArrayPrototypeToString
code-creation,Builtin,2,278052,0x7ff724a61144,5924,TypedArrayPrototypeJoin
code-creation,Builtin,2,278074,0x7ff724a62884,4636,TypedArrayPrototypeToLocaleString
code-creation,Builtin,2,278096,0x7ff724a63aa4,3824,ArrayPrototypeLastIndexOf
code-creation,Builtin,2,278118,0x7ff724a649a4,260,ArrayMapPreLoopLazyDeoptContinuation
code-creation,Builtin,2,278141,0x7ff724a64ac4,252,ArrayMapLoopEagerDeoptContinuation
code-creation,Builtin,2,278163,0x7ff724a64bc4,532,ArrayMapLoopLazyDeoptContinuation
code-creation,Builtin,2,278186,0x7ff724a64de4,3192,ArrayMapLoopContinuation
code-creation,Builtin,2,278208,0x7ff724a65a64,3912,ArrayMap
code-creation,Builtin,2,278228,0x7ff724a669c4,1000,ArrayOf
code-creation,Builtin,2,278249,0x7ff724a66dc4,444,ArrayReduceRightPreLoopEagerDeoptContinuation
code-creation,Builtin,2,278272,0x7ff724a66f84,204,ArrayReduceRightLoopEagerDeoptContinuation
code-creation,Builtin,2,278295,0x7ff724a67064,204,ArrayReduceRightLoopLazyDeoptContinuation
code-creation,Builtin,2,278317,0x7ff724a67144,3200,ArrayReduceRightLoopContinuation
code-creation,Builtin,2,278331,0x7ff724a67de4,2000,ArrayReduceRight
code-creation,Builtin,2,278344,0x7ff724a685c4,176,ArrayReducePreLoopEagerDeoptContinuation
code-creation,Builtin,2,278358,0x7ff724a68684,204,ArrayReduceLoopEagerDeoptContinuation
code-creation,Builtin,2,278373,0x7ff724a68764,204,ArrayReduceLoopLazyDeoptContinuation
tick,0x7ffe67f8d1c4,278390,0,0x0,6
code-creation,Builtin,2,278417,0x7ff724a68844,3252,ArrayReduceLoopContinuation
code-creation,Builtin,2,278431,0x7ff724a69504,1604,ArrayReduce
code-creation,Builtin,2,278443,0x7ff724a69b64,3216,ArrayPrototypeReverse
code-creation,Builtin,2,278453,0x7ff724a6a804,3592,ArrayPrototypeShift
code-creation,Builtin,2,278463,0x7ff724a6b624,5220,ArrayPrototypeSlice
code-creation,Builtin,2,278474,0x7ff724a6caa4,212,ArraySomeLoopEagerDeoptContinuation
code-creation,Builtin,2,278485,0x7ff724a6cb84,580,ArraySomeLoopLazyDeoptContinuation
code-creation,Builtin,2,278495,0x7ff724a6cde4,3304,ArraySomeLoopContinuation
code-creation,Builtin,2,278506,0x7ff724a6dae4,1448,ArraySome
code-creation,Builtin,2,278516,0x7ff724a6e0a4,14216,ArrayPrototypeSplice
code-creation,Builtin,2,278526,0x7ff724a71844,3264,ArrayPrototypeUnshift
code-creation,Builtin,2,278537,0x7ff724a72524,332,ArrayBufferPrototypeGetByteLength
code-creation,Builtin,2,278547,0x7ff724a72684,348,ArrayBufferPrototypeGetMaxByteLength
code-creation,Builtin,2,278560,0x7ff724a727e4,208,ArrayBufferPrototypeGetResizable
code-creation,Builtin,2,278570,0x7ff724a728c4,332,SharedArrayBufferPrototypeGetMaxByteLength
code-creation,Builtin,2,278582,0x7ff724a72a24,208,SharedArrayBufferPrototypeGetGrowable
code-creation,Builtin,2,278592,0x7ff724a72b04,96,ArrayBufferIsView
code-creation,Builtin,2,278603,0x7ff724a72b84,396,ToInteger
code-creation,Builtin,2,278613,0x7ff724a72d24,3084,FastCreateDataProperty
code-creation,Builtin,2,278623,0x7ff724a73944,676,CheckNumberInRange
code-creation,Builtin,2,278633,0x7ff724a73c04,584,CheckSameObject
code-creation,Builtin,2,278643,0x7ff724a73e64,904,BooleanConstructor
code-creation,Builtin,2,278654,0x7ff724a74204,164,BooleanPrototypeToString
code-creation,Builtin,2,278667,0x7ff724a742c4,156,BooleanPrototypeValueOf
code-creation,Builtin,2,278679,0x7ff724a74364,1184,BigIntAddNoThrow
code-creation,Builtin,2,278689,0x7ff724a74824,1280,BigIntAdd
code-creation,Builtin,2,278700,0x7ff724a74d44,1184,BigIntSubtractNoThrow
code-creation,Builtin,2,278710,0x7ff724a75204,1280,BigIntSubtract
code-creation,Builtin,2,278720,0x7ff724a75724,284,BigIntUnaryMinus
code-creation,Builtin,2,278731,0x7ff724a75844,1360,ToString
code-creation,Builtin,2,278741,0x7ff724a75da4,156,StringPrototypeToString
code-creation,Builtin,2,278751,0x7ff724a75e44,156,StringPrototypeValueOf
code-creation,Builtin,2,278762,0x7ff724a75ee4,2480,StringToList
code-creation,Builtin,2,278772,0x7ff724a768a4,1012,StringPrototypeCharAt
code-creation,Builtin,2,278782,0x7ff724a76ca4,700,StringPrototypeCharCodeAt
code-creation,Builtin,2,278793,0x7ff724a76f64,1288,StringPrototypeCodePointAt
code-creation,Builtin,2,278804,0x7ff724a77484,400,StringPrototypeConcat
code-creation,Builtin,2,278814,0x7ff724a77624,992,StringConstructor
code-creation,Builtin,2,278824,0x7ff724a77a24,1436,StringAddConvertLeft
code-creation,Builtin,2,278835,0x7ff724a77fc4,1464,StringAddConvertRight
code-creation,Builtin,2,278845,0x7ff724a78584,816,StringCharAt
code-creation,Builtin,2,278855,0x7ff724a788c4,16,FastNewClosureBaseline
code-creation,Builtin,2,278866,0x7ff724a788e4,196,FastNewFunctionContextEval
code-creation,Builtin,2,278876,0x7ff724a789c4,196,FastNewFunctionContextFunction
code-creation,Builtin,2,278887,0x7ff724a78aa4,248,CreateRegExpLiteral
code-creation,Builtin,2,278898,0x7ff724a78ba4,1060,CreateShallowArrayLiteral
code-creation,Builtin,2,278908,0x7ff724a78fe4,504,CreateEmptyArrayLiteral
code-creation,Builtin,2,278919,0x7ff724a791e4,1736,CreateShallowObjectLiteral
code-creation,Builtin,2,278930,0x7ff724a798c4,384,ObjectConstructor
code-creation,Builtin,2,278940,0x7ff724a79a64,176,CreateEmptyLiteralObject
code-creation,Builtin,2,278951,0x7ff724a79b24,536,NumberConstructor
code-creation,Builtin,2,278961,0x7ff724a79d44,64,GenericLazyDeoptContinuation
code-creation,Builtin,2,278971,0x7ff724a79da4,64,StringToNumber
code-creation,Builtin,2,278982,0x7ff724a79e04,184,NonNumberToNumber
code-creation,Builtin,2,278992,0x7ff724a79ec4,240,NonNumberToNumeric
code-creation,Builtin,2,279002,0x7ff724a79fc4,36,ToNumeric
code-creation,Builtin,2,279012,0x7ff724a7a004,1184,NumberToString
code-creation,Builtin,2,279022,0x7ff724a7a4c4,92,ToBoolean
code-creation,Builtin,2,279032,0x7ff724a7a524,96,ToBooleanForBaselineJump
code-creation,Builtin,2,279043,0x7ff724a7a5a4,728,ToLength
code-creation,Builtin,2,279053,0x7ff724a7a884,1312,ToName
code-creation,Builtin,2,279062,0x7ff724a7adc4,756,ToObject
code-creation,Builtin,2,279072,0x7ff724a7b0c4,208,NonPrimitiveToPrimitive_Default
code-creation,Builtin,2,279083,0x7ff724a7b1a4,208,NonPrimitiveToPrimitive_Number
code-creation,Builtin,2,279094,0x7ff724a7b284,208,NonPrimitiveToPrimitive_String
code-creation,Builtin,2,279105,0x7ff724a7b364,288,OrdinaryToPrimitive_Number
code-creation,Builtin,2,279116,0x7ff724a7b4a4,288,OrdinaryToPrimitive_String
code-creation,Builtin,2,279126,0x7ff724a7b5e4,216,FastConsoleAssert
code-creation,Builtin,2,279136,0x7ff724a7b6c4,160,DataViewPrototypeGetBuffer
code-creation,Builtin,2,279147,0x7ff724a7b784,336,DataViewPrototypeGetByteLength
code-creation,Builtin,2,279158,0x7ff724a7b8e4,336,DataViewPrototypeGetByteOffset
code-creation,Builtin,2,279168,0x7ff724a7ba44,572,DataViewPrototypeGetUint8
code-creation,Builtin,2,279179,0x7ff724a7bc84,572,DataViewPrototypeGetInt8
code-creation,Builtin,2,279189,0x7ff724a7bec4,644,DataViewPrototypeGetUint16
code-creation,Builtin,2,279200,0x7ff724a7c164,644,DataViewPrototypeGetInt16
code-creation,Builtin,2,279210,0x7ff724a7c404,808,DataViewPrototypeGetUint32
code-creation,Builtin,2,279221,0x7ff724a7c744,684,DataViewPrototypeGetInt32
code-creation,Builtin,2,279231,0x7ff724a7ca04,848,DataViewPrototypeGetFloat32
code-creation,Builtin,2,279242,0x7ff724a7cd64,912,DataViewPrototypeGetFloat64
code-creation,Builtin,2,279253,0x7ff724a7d104,984,DataViewPrototypeGetBigUint64
code-creation,Builtin,2,279266,0x7ff724a7d4e4,1004,DataViewPrototypeGetBigInt64
code-creation,Builtin,2,279278,0x7ff724a7d8e4,928,DataViewPrototypeSetUint8
code-creation,Builtin,2,279288,0x7ff724a7dca4,928,DataViewPrototypeSetInt8
code-creation,Builtin,2,279299,0x7ff724a7e064,1028,DataViewPrototypeSetUint16
code-creation,Builtin,2,279310,0x7ff724a7e484,1028,DataViewPrototypeSetInt16
code-creation,Builtin,2,279320,0x7ff724a7e8a4,1064,DataViewPrototypeSetUint32
code-creation,Builtin,2,279331,0x7ff724a7ece4,1064,DataViewPrototypeSetInt32
code-creation,Builtin,2,279341,0x7ff724a7f124,1032,DataViewPrototypeSetFloat32
code-creation,Builtin,2,279352,0x7ff724a7f544,1096,DataViewPrototypeSetFloat64
code-creation,Builtin,2,279363,0x7ff724a7f9a4,944,DataViewPrototypeSetBigUint64
code-creation,Builtin,2,279373,0x7ff724a7fd64,944,DataViewPrototypeSetBigInt64
code-creation,Builtin,2,279384,0x7ff724a80124,828,FinalizationRegistryConstructor
code-creation,Builtin,2,279395,0x7ff724a80464,1152,FinalizationRegistryRegister
code-creation,Builtin,2,279406,0x7ff724a80904,648,FinalizationRegistryPrototypeCleanupSome
code-creation,Builtin,2,279417,0x7ff724a80ba4,328,FunctionPrototypeHasInstance
code-creation,Builtin,2,279427,0x7ff724a80d04,924,FastFunctionPrototypeBind
code-creation,Builtin,2,279438,0x7ff724a810a4,88,IncBlockCounter
code-creation,Builtin,2,279448,0x7ff724a81104,228,GetTemplateObject
code-creation,Builtin,2,279458,0x7ff724a81204,28,BytecodeBudgetInterruptFromCode
code-creation,Builtin,2,279469,0x7ff724a81224,92,ForInNext
code-creation,Builtin,2,279479,0x7ff724a81284,128,GetImportMetaObjectBaseline
code-creation,Builtin,2,279490,0x7ff724a81324,116,GetIteratorWithFeedback
code-creation,Builtin,2,279500,0x7ff724a813a4,100,GetIteratorBaseline
code-creation,Builtin,2,279511,0x7ff724a81424,268,CreateAsyncFromSyncIteratorBaseline
code-creation,Builtin,2,279522,0x7ff724a81544,1084,CallIteratorWithFeedback
code-creation,Builtin,2,279532,0x7ff724a81984,288,MathAbs
code-creation,Builtin,2,279542,0x7ff724a81ac4,428,MathCeil
code-creation,Builtin,2,279553,0x7ff724a81c84,432,MathFloor
code-creation,Builtin,2,279563,0x7ff724a81e44,488,MathRound
code-creation,Builtin,2,279573,0x7ff724a82044,428,MathTrunc
code-creation,Builtin,2,279583,0x7ff724a82204,368,MathPow
code-creation,Builtin,2,279593,0x7ff724a82384,396,MathMax
code-creation,Builtin,2,279603,0x7ff724a82524,404,MathMin
code-creation,Builtin,2,279612,0x7ff724a826c4,320,MathAcos
code-creation,Builtin,2,279622,0x7ff724a82824,320,MathAcosh
code-creation,Builtin,2,279632,0x7ff724a82984,320,MathAsin
code-creation,Builtin,2,279642,0x7ff724a82ae4,320,MathAsinh
code-creation,Builtin,2,279652,0x7ff724a82c44,320,MathAtan
code-creation,Builtin,2,279662,0x7ff724a82da4,416,MathAtan2
code-creation,Builtin,2,279672,0x7ff724a82f64,320,MathAtanh
code-creation,Builtin,2,279682,0x7ff724a830c4,320,MathCbrt
code-creation,Builtin,2,279691,0x7ff724a83224,168,MathClz32
code-creation,Builtin,2,279701,0x7ff724a832e4,320,MathCos
code-creation,Builtin,2,279711,0x7ff724a83444,320,MathCosh
code-creation,Builtin,2,279721,0x7ff724a835a4,320,MathExp
code-creation,Builtin,2,279731,0x7ff724a83704,320,MathExpm1
code-creation,Builtin,2,279741,0x7ff724a83864,272,MathFround
code-creation,Builtin,2,279751,0x7ff724a83984,304,MathImul
code-creation,Builtin,2,279768,0x7ff724a83ac4,320,MathLog
code-creation,Builtin,2,279778,0x7ff724a83c24,320,MathLog1p
code-creation,Builtin,2,279787,0x7ff724a83d84,320,MathLog10
code-creation,Builtin,2,279797,0x7ff724a83ee4,320,MathLog2
code-creation,Builtin,2,279807,0x7ff724a84044,320,MathSin
code-creation,Builtin,2,279817,0x7ff724a841a4,180,MathSign
code-creation,Builtin,2,279827,0x7ff724a84264,320,MathSinh
code-creation,Builtin,2,279837,0x7ff724a843c4,268,MathSqrt
code-creation,Builtin,2,279847,0x7ff724a844e4,320,MathTan
code-creation,Builtin,2,279857,0x7ff724a84644,320,MathTanh
code-creation,Builtin,2,279867,0x7ff724a847a4,1060,MathHypot
code-creation,Builtin,2,279877,0x7ff724a84be4,332,MathRandom
code-creation,Builtin,2,279887,0x7ff724a84d44,2956,NumberPrototypeToString
code-creation,Builtin,2,279955,0x7ff724a858e4,136,NumberIsFinite
code-creation,Builtin,2,279969,0x7ff724a85984,340,NumberIsInteger
code-creation,Builtin,2,279979,0x7ff724a85ae4,116,NumberIsNaN
code-creation,Builtin,2,279989,0x7ff724a85b64,372,NumberIsSafeInteger
code-creation,Builtin,2,279999,0x7ff724a85ce4,156,NumberPrototypeValueOf
code-creation,Builtin,2,280010,0x7ff724a85d84,196,NumberParseFloat
code-creation,Builtin,2,280020,0x7ff724a85e64,248,ParseInt
code-creation,Builtin,2,280030,0x7ff724a85f64,84,NumberParseInt
code-creation,Builtin,2,280040,0x7ff724a85fc4,860,Add
code-creation,Builtin,2,280050,0x7ff724a86324,424,Subtract
code-creation,Builtin,2,280060,0x7ff724a864e4,608,Multiply
code-creation,Builtin,2,280070,0x7ff724a86764,532,Divide
code-creation,Builtin,2,280080,0x7ff724a86984,592,Modulus
code-creation,Builtin,2,280090,0x7ff724a86be4,524,Exponentiate
code-creation,Builtin,2,280100,0x7ff724a86e04,344,Negate
code-creation,Builtin,2,280110,0x7ff724a86f64,112,BitwiseNot
code-creation,Builtin,2,280119,0x7ff724a86fe4,112,Decrement
code-creation,Builtin,2,280143,0x7ff724a87064,112,Increment
code-creation,Builtin,2,280153,0x7ff724a870e4,392,ShiftLeft
code-creation,Builtin,2,280163,0x7ff724a87284,392,ShiftRight
code-creation,Builtin,2,280173,0x7ff724a87424,508,ShiftRightLogical
code-creation,Builtin,2,280183,0x7ff724a87624,388,BitwiseAnd
code-creation,Builtin,2,280193,0x7ff724a877c4,388,BitwiseOr
code-creation,Builtin,2,280203,0x7ff724a87964,388,BitwiseXor
code-creation,Builtin,2,280213,0x7ff724a87b04,796,LessThan
code-creation,Builtin,2,280242,0x7ff724a87e24,796,LessThanOrEqual
code-creation,Builtin,2,280252,0x7ff724a88144,796,GreaterThan
code-creation,Builtin,2,280262,0x7ff724a88464,796,GreaterThanOrEqual
code-creation,Builtin,2,280273,0x7ff724a88784,860,Equal
code-creation,Builtin,2,280282,0x7ff724a88ae4,348,StrictEqual
code-creation,Builtin,2,280292,0x7ff724a88c44,3132,ObjectFromEntries
code-creation,Builtin,2,280303,0x7ff724a89884,756,CreateObjectWithoutProperties
code-creation,Builtin,2,280313,0x7ff724a89b84,144,ObjectIsExtensible
code-creation,Builtin,2,280324,0x7ff724a89c24,148,ObjectPreventExtensions
code-creation,Builtin,2,280334,0x7ff724a89cc4,144,ObjectGetPrototypeOf
code-creation,Builtin,2,280345,0x7ff724a89d64,300,ObjectSetPrototypeOf
code-creation,Builtin,2,280355,0x7ff724a89ea4,80,ObjectPrototypeToString
code-creation,Builtin,2,280365,0x7ff724a89f04,96,ObjectPrototypeValueOf
code-creation,Builtin,2,280376,0x7ff724a89f84,164,ObjectPrototypeToLocaleString
code-creation,Builtin,2,280386,0x7ff724a8a044,868,FulfillPromise
code-creation,Builtin,2,280397,0x7ff724a8a3c4,988,RejectPromise
code-creation,Builtin,2,280407,0x7ff724a8a7a4,2416,NewPromiseCapability
code-creation,Builtin,2,280417,0x7ff724a8b124,164,PromiseCapabilityDefaultReject
code-creation,Builtin,2,280428,0x7ff724a8b1e4,148,PromiseCapabilityDefaultResolve
code-creation,Builtin,2,280438,0x7ff724a8b284,1416,PerformPromiseThen
code-creation,Builtin,2,280449,0x7ff724a8b824,648,PromiseReject
code-creation,Builtin,2,280459,0x7ff724a8bac4,284,PromiseGetCapabilitiesExecutor
code-creation,Builtin,2,280470,0x7ff724a8bbe4,104,PromiseConstructorLazyDeoptContinuation
code-creation,Builtin,2,280481,0x7ff724a8bc64,4560,PromiseAll
code-creation,Builtin,2,280491,0x7ff724a8ce44,4880,PromiseAllSettled
code-creation,Builtin,2,280501,0x7ff724a8e164,1104,PromiseAllResolveElementClosure
code-creation,Builtin,2,280512,0x7ff724a8e5c4,1392,PromiseAllSettledResolveElementClosure
code-creation,Builtin,2,280523,0x7ff724a8eb44,1400,PromiseAllSettledRejectElementClosure
code-creation,Builtin,2,280534,0x7ff724a8f0c4,1180,PromiseAnyRejectElementClosure
code-creation,Builtin,2,280545,0x7ff724a8f564,2368,PromiseAny
code-creation,Builtin,2,280556,0x7ff724a8fec4,2908,PromiseConstructor
code-creation,Builtin,2,280567,0x7ff724a90a24,296,PromisePrototypeCatch
code-creation,Builtin,2,280577,0x7ff724a90b64,88,PromiseValueThunkFinally
code-creation,Builtin,2,280587,0x7ff724a90bc4,84,PromiseThrowerFinally
code-creation,Builtin,2,280598,0x7ff724a90c24,904,PromiseCatchFinally
code-creation,Builtin,2,280608,0x7ff724a90fc4,904,PromiseThenFinally
code-creation,Builtin,2,280664,0x7ff724a91364,1700,PromisePrototypeFinally
code-creation,Builtin,2,280678,0x7ff724a91a24,1336,PromiseRace
code-creation,Builtin,2,280688,0x7ff724a91f64,268,PromiseFulfillReactionJob
code-creation,Builtin,2,280699,0x7ff724a92084,364,PromiseRejectReactionJob
code-creation,Builtin,2,280710,0x7ff724a92204,156,PromiseResolveTrampoline
code-creation,Builtin,2,280720,0x7ff724a922a4,656,PromiseResolve
code-creation,Builtin,2,280730,0x7ff724a92544,712,ResolvePromise
code-creation,Builtin,2,280740,0x7ff724a92824,2224,PromisePrototypeThen
code-creation,Builtin,2,280751,0x7ff724a930e4,1144,PromiseResolveThenableJob
code-creation,Builtin,2,280761,0x7ff724a93564,448,ProxyConstructor
code-creation,Builtin,2,280772,0x7ff724a93744,1760,ProxyDeleteProperty
code-creation,Builtin,2,280782,0x7ff724a93e44,2112,ProxyGetProperty
code-creation,Builtin,2,280792,0x7ff724a946a4,1060,ProxyGetPrototypeOf
code-creation,Builtin,2,280802,0x7ff724a94ae4,1668,ProxyHasProperty
code-creation,Builtin,2,280813,0x7ff724a95184,760,ProxyIsExtensible
code-creation,Builtin,2,280823,0x7ff724a95484,800,ProxyPreventExtensions
code-creation,Builtin,2,280833,0x7ff724a957c4,1148,ProxyRevocable
code-creation,Builtin,2,280844,0x7ff724a95c44,120,ProxyRevoke
code-creation,Builtin,2,280854,0x7ff724a95cc4,2216,ProxySetProperty
code-creation,Builtin,2,280864,0x7ff724a96584,1292,ProxySetPrototypeOf
code-creation,Builtin,2,280875,0x7ff724a96aa4,208,ReflectIsExtensible
code-creation,Builtin,2,280885,0x7ff724a96b84,212,ReflectPreventExtensions
code-creation,Builtin,2,280895,0x7ff724a96c64,188,ReflectGetPrototypeOf
code-creation,Builtin,2,280906,0x7ff724a96d24,292,ReflectSetPrototypeOf
code-creation,Builtin,2,280916,0x7ff724a96e64,284,ReflectGet
code-creation,Builtin,2,280926,0x7ff724a96f84,160,ReflectDeleteProperty
code-creation,Builtin,2,280937,0x7ff724a97044,148,ReflectHas
code-creation,Builtin,2,280947,0x7ff724a970e4,5132,RegExpPrototypeExecSlow
code-creation,Builtin,2,280957,0x7ff724a98504,5104,RegExpPrototypeExec
code-creation,Builtin,2,280968,0x7ff724a99904,2360,RegExpPrototypeMatchAll
code-creation,Builtin,2,280978,0x7ff724a9a244,9428,RegExpStringIteratorPrototypeNext
code-creation,Builtin,2,280989,0x7ff724a9c724,8840,RegExpMatchFast
code-creation,Builtin,2,281000,0x7ff724a9e9c4,3600,RegExpPrototypeMatch
code-creation,Builtin,2,281010,0x7ff724a9f7e4,6328,RegExpReplace
code-creation,Builtin,2,281020,0x7ff724aa10a4,524,RegExpPrototypeReplace
code-creation,Builtin,2,281031,0x7ff724aa12c4,1424,RegExpSearchFast
code-creation,Builtin,2,281041,0x7ff724aa1864,1640,RegExpPrototypeSearch
code-creation,Builtin,2,281052,0x7ff724aa1ee4,200,RegExpPrototypeSourceGetter
code-creation,Builtin,2,281063,0x7ff724aa1fc4,5872,RegExpSplit
code-creation,Builtin,2,281073,0x7ff724aa36c4,476,RegExpPrototypeSplit
code-creation,Builtin,2,281083,0x7ff724aa38a4,2252,RegExpPrototypeTest
code-creation,Builtin,2,281094,0x7ff724aa4184,1360,RegExpPrototypeTestFast
code-creation,Builtin,2,281104,0x7ff724aa46e4,228,RegExpPrototypeGlobalGetter
code-creation,Builtin,2,281115,0x7ff724aa47e4,244,RegExpPrototypeIgnoreCaseGetter
code-creation,Builtin,2,281126,0x7ff724aa48e4,244,RegExpPrototypeMultilineGetter
code-creation,Builtin,2,281137,0x7ff724aa49e4,244,RegExpPrototypeHasIndicesGetter
code-creation,Builtin,2,281148,0x7ff724aa4ae4,244,RegExpPrototypeLinearGetter
code-creation,Builtin,2,281159,0x7ff724aa4be4,244,RegExpPrototypeDotAllGetter
code-creation,Builtin,2,281169,0x7ff724aa4ce4,272,RegExpPrototypeStickyGetter
code-creation,Builtin,2,281180,0x7ff724aa4e04,272,RegExpPrototypeUnicodeGetter
code-creation,Builtin,2,281191,0x7ff724aa4f24,2256,RegExpPrototypeFlagsGetter
code-creation,Builtin,2,281202,0x7ff724aa5804,1500,StringPrototypeAt
code-creation,Builtin,2,281212,0x7ff724aa5de4,3008,StringPrototypeEndsWith
code-creation,Builtin,2,281223,0x7ff724aa69c4,480,CreateHTML
code-creation,Builtin,2,281240,0x7ff724aa6bc4,164,StringPrototypeAnchor
code-creation,Builtin,2,281250,0x7ff724aa6c84,128,StringPrototypeBig
code-creation,Builtin,2,281260,0x7ff724aa6d24,128,StringPrototypeBlink
code-creation,Builtin,2,281310,0x7ff724aa6dc4,128,StringPrototypeBold
code-creation,Builtin,2,281323,0x7ff724aa6e64,168,StringPrototypeFontcolor
code-creation,Builtin,2,281334,0x7ff724aa6f24,168,StringPrototypeFontsize
code-creation,Builtin,2,281344,0x7ff724aa6fe4,128,StringPrototypeFixed
code-creation,Builtin,2,281355,0x7ff724aa7084,128,StringPrototypeItalics
code-creation,Builtin,2,281365,0x7ff724aa7124,168,StringPrototypeLink
code-creation,Builtin,2,281375,0x7ff724aa71e4,128,StringPrototypeSmall
code-creation,Builtin,2,281386,0x7ff724aa7284,128,StringPrototypeStrike
code-creation,Builtin,2,281396,0x7ff724aa7324,128,StringPrototypeSub
code-creation,Builtin,2,281407,0x7ff724aa73c4,128,StringPrototypeSup
code-creation,Builtin,2,281417,0x7ff724aa7464,1028,StringPrototypeIncludes
code-creation,Builtin,2,281428,0x7ff724aa7884,628,StringPrototypeIndexOf
code-creation,Builtin,2,281438,0x7ff724aa7b04,344,StringPrototypeIterator
code-creation,Builtin,2,281448,0x7ff724aa7c64,2024,StringIteratorPrototypeNext
code-creation,Builtin,2,281459,0x7ff724aa8464,1304,StringPrototypeMatch
code-creation,Builtin,2,281469,0x7ff724aa8984,1304,StringPrototypeSearch
code-creation,Builtin,2,281480,0x7ff724aa8ea4,824,StringPrototypePadStart
code-creation,Builtin,2,281490,0x7ff724aa91e4,824,StringPrototypePadEnd
code-creation,Builtin,2,281501,0x7ff724aa9524,120,StringRepeat
code-creation,Builtin,2,281511,0x7ff724aa95a4,400,StringPrototypeRepeat
code-creation,Builtin,2,281521,0x7ff724aa9744,11188,StringPrototypeReplaceAll
code-creation,Builtin,2,281532,0x7ff724aac304,3388,StringPrototypeSlice
code-creation,Builtin,2,281542,0x7ff724aad044,3028,StringPrototypeStartsWith
code-creation,Builtin,2,281554,0x7ff724aadc24,3328,StringPrototypeSubstr
code-creation,Builtin,2,281580,0x7ff724aae944,3260,StringPrototypeSubstring
code-creation,Builtin,2,281590,0x7ff724aaf604,6916,StringPrototypeTrim
code-creation,Builtin,2,281601,0x7ff724ab1124,6332,StringPrototypeTrimStart
code-creation,Builtin,2,281611,0x7ff724ab29e4,5836,StringPrototypeTrimEnd
code-creation,Builtin,2,281622,0x7ff724ab40c4,160,SymbolPrototypeDescriptionGetter
code-creation,Builtin,2,281632,0x7ff724ab4184,156,SymbolPrototypeToPrimitive
code-creation,Builtin,2,281643,0x7ff724ab4224,172,SymbolPrototypeToString
code-creation,Builtin,2,281653,0x7ff724ab42e4,156,SymbolPrototypeValueOf
code-creation,Builtin,2,281664,0x7ff724ab4384,832,TypedArrayPrototypeAt
code-creation,Builtin,2,281674,0x7ff724ab46e4,10064,CreateTypedArray
code-creation,Builtin,2,281684,0x7ff724ab6e44,1000,TypedArrayPrototypeEvery
code-creation,Builtin,2,281695,0x7ff724ab7244,372,TypedArrayPrototypeEntries
code-creation,Builtin,2,281705,0x7ff724ab73c4,3512,TypedArrayPrototypeFilter
code-creation,Builtin,2,281716,0x7ff724ab8184,996,TypedArrayPrototypeFind
code-creation,Builtin,2,281726,0x7ff724ab8584,1004,TypedArrayPrototypeFindIndex
code-creation,Builtin,2,281737,0x7ff724ab8984,428,FindLastAllElementsDetachedContinuation
code-creation,Builtin,2,281748,0x7ff724ab8b44,1208,TypedArrayPrototypeFindLast
code-creation,Builtin,2,281758,0x7ff724ab9004,436,FindLastIndexAllElementsDetachedContinuation
code-creation,Builtin,2,281769,0x7ff724ab91c4,1216,TypedArrayPrototypeFindLastIndex
code-creation,Builtin,2,281780,0x7ff724ab96a4,864,TypedArrayPrototypeForEach
code-creation,Builtin,2,281791,0x7ff724ab9a24,2352,TypedArrayFrom
code-creation,Builtin,2,281801,0x7ff724aba364,356,TypedArrayPrototypeKeys
code-creation,Builtin,2,281811,0x7ff724aba4e4,1028,TypedArrayOf
code-creation,Builtin,2,281821,0x7ff724aba904,952,TypedArrayPrototypeReduce
code-creation,Builtin,2,281832,0x7ff724abacc4,944,TypedArrayPrototypeReduceRight
code-creation,Builtin,2,281842,0x7ff724abb084,2508,TypedArrayPrototypeSet
code-creation,Builtin,2,281853,0x7ff724abba64,3040,TypedArrayPrototypeSlice
code-creation,Builtin,2,281863,0x7ff724abc664,992,TypedArrayPrototypeSome
code-creation,Builtin,2,281874,0x7ff724abca64,1060,TypedArrayMergeSort
code-creation,Builtin,2,281884,0x7ff724abcea4,1620,TypedArrayPrototypeSort
code-creation,Builtin,2,281895,0x7ff724abd504,2736,TypedArrayPrototypeSubArray
code-creation,Builtin,2,281944,0x7ff724abdfc4,372,TypedArrayPrototypeValues
code-creation,Builtin,2,281958,0x7ff724abe144,952,WeakRefConstructor
code-creation,Builtin,2,281969,0x7ff724abe504,184,WeakRefDeref
code-creation,Builtin,2,281979,0x7ff724abe5c4,680,NewSloppyArgumentsElements
code-creation,Builtin,2,281990,0x7ff724abe884,296,NewStrictArgumentsElements
code-creation,Builtin,2,282000,0x7ff724abe9c4,320,NewRestArgumentsElements
code-creation,Builtin,2,282012,0x7ff724abeb24,1388,FastNewSloppyArguments
code-creation,Builtin,2,282023,0x7ff724abf0a4,524,FastNewStrictArguments
code-creation,Builtin,2,282033,0x7ff724abf2c4,556,FastNewRestArguments
code-creation,Builtin,2,282044,0x7ff724abf504,676,StringSlowFlatten
code-creation,Builtin,2,282054,0x7ff724abf7c4,2068,StringIndexOf
code-creation,Builtin,2,282064,0x7ff724abffe4,4,GenericBuiltinTest_JSAny_0
code-creation,Builtin,2,282075,0x7ff724ac0004,20,TestHelperPlus1
code-creation,Builtin,2,282085,0x7ff724ac0024,20,TestHelperPlus2
code-creation,Builtin,2,282095,0x7ff724ac0044,96,NewSmiBox
code-creation,Builtin,2,282105,0x7ff724ac00c4,24,ReturnTwoValues
code-creation,Builtin,2,282115,0x7ff724ac00e4,32,Load_FastSmiElements_0
code-creation,Builtin,2,282125,0x7ff724ac0124,32,Load_FastObjectElements_0
code-creation,Builtin,2,282135,0x7ff724ac0164,144,Load_FastDoubleElements_0
code-creation,Builtin,2,282146,0x7ff724ac0204,32,Store_FastSmiElements_0
code-creation,Builtin,2,282156,0x7ff724ac0244,96,Store_FastObjectElements_0
code-creation,Builtin,2,282167,0x7ff724ac02c4,48,Store_FastDoubleElements_0
code-creation,Builtin,2,282177,0x7ff724ac0304,36,Delete_FastSmiElements_0
code-creation,Builtin,2,282188,0x7ff724ac0344,36,Delete_FastObjectElements_0
code-creation,Builtin,2,282198,0x7ff724ac0384,44,Delete_FastDoubleElements_0
code-creation,Builtin,2,282209,0x7ff724ac03c4,308,SortCompareDefault
code-creation,Builtin,2,282219,0x7ff724ac0504,92,SortCompareUserFn
code-creation,Builtin,2,282229,0x7ff724ac0564,8,CanUseSameAccessor_GenericElementsAccessor_0
code-creation,Builtin,2,282240,0x7ff724ac0584,312,Copy
code-creation,Builtin,2,282250,0x7ff724ac06c4,5776,MergeAt
code-creation,Builtin,2,282260,0x7ff724ac1d64,792,GallopLeft
code-creation,Builtin,2,282270,0x7ff724ac2084,832,GallopRight
code-creation,Builtin,2,282280,0x7ff724ac23e4,3832,ArrayTimSort
code-creation,Builtin,2,282290,0x7ff724ac32e4,2112,ArrayPrototypeSort
code-creation,Builtin,2,282300,0x7ff724ac3b44,100,WasmInt32ToHeapNumber
code-creation,Builtin,2,282311,0x7ff724ac3bc4,124,WasmTaggedNonSmiToInt32
code-creation,Builtin,2,282321,0x7ff724ac3c44,76,WasmTaggedToFloat64
code-creation,Builtin,2,282331,0x7ff724ac3ca4,72,WasmMemoryGrow
code-creation,Builtin,2,282342,0x7ff724ac3d04,100,WasmTableInit
code-creation,Builtin,2,282352,0x7ff724ac3d84,100,WasmTableCopy
code-creation,Builtin,2,282362,0x7ff724ac3e04,84,WasmTableFill
code-creation,Builtin,2,282372,0x7ff724ac3e64,72,WasmTableGrow
code-creation,Builtin,2,282382,0x7ff724ac3ec4,144,WasmTableGet
code-creation,Builtin,2,282392,0x7ff724ac3f64,236,WasmTableSet
code-creation,Builtin,2,282402,0x7ff724ac4064,88,WasmRefFunc
code-creation,Builtin,2,282412,0x7ff724ac40c4,144,WasmAllocateFixedArray
code-creation,Builtin,2,282422,0x7ff724ac4164,44,WasmThrow
code-creation,Builtin,2,282432,0x7ff724ac41a4,52,WasmRethrow
code-creation,Builtin,2,282442,0x7ff724ac41e4,44,WasmTriggerTierUp
code-creation,Builtin,2,282452,0x7ff724ac4224,32,WasmStackGuard
code-creation,Builtin,2,282462,0x7ff724ac4264,32,WasmStackOverflow
code-creation,Builtin,2,282472,0x7ff724ac42a4,40,WasmTraceMemory
code-creation,Builtin,2,282482,0x7ff724ac42e4,32,WasmTraceEnter
code-creation,Builtin,2,282493,0x7ff724ac4324,40,WasmTraceExit
code-creation,Builtin,2,282502,0x7ff724ac4364,332,WasmAllocateJSArray
code-creation,Builtin,2,282513,0x7ff724ac44c4,104,WasmAllocatePair
code-creation,Builtin,2,282523,0x7ff724ac4544,64,WasmAllocateRtt
code-creation,Builtin,2,282533,0x7ff724ac45a4,72,WasmAllocateFreshRtt
code-creation,Builtin,2,282543,0x7ff724ac4604,124,WasmAllocateStructWithRtt
code-creation,Builtin,2,282593,0x7ff724ac4684,140,WasmAllocateArray_Uninitialized
code-creation,Builtin,2,282607,0x7ff724ac4724,176,WasmAllocateArray_InitZero
code-creation,Builtin,2,282618,0x7ff724ac47e4,176,WasmAllocateArray_InitNull
code-creation,Builtin,2,282628,0x7ff724ac48a4,116,WasmArrayCopyWithChecks
code-creation,Builtin,2,282639,0x7ff724ac4924,60,WasmArrayCopy
code-creation,Builtin,2,282649,0x7ff724ac4964,240,WasmAllocateObjectWrapper
code-creation,Builtin,2,282660,0x7ff724ac4a64,52,WasmSubtypeCheck
code-creation,Builtin,2,282670,0x7ff724ac4aa4,8,WasmInt32ToNumber
code-creation,Builtin,2,282680,0x7ff724ac4ac4,116,WasmUint32ToNumber
code-creation,Builtin,2,282690,0x7ff724ac4b44,144,UintPtr53ToNumber
code-creation,Builtin,2,282700,0x7ff724ac4be4,96,WasmAtomicNotify
code-creation,Builtin,2,282717,0x7ff724ac4c64,116,WasmI32AtomicWait64
code-creation,Builtin,2,282727,0x7ff724ac4ce4,116,WasmI64AtomicWait64
code-creation,Builtin,2,282738,0x7ff724ac4d64,580,WasmGetOwnProperty
code-creation,Builtin,2,282748,0x7ff724ac4fc4,40,WasmTrap
code-creation,Builtin,2,282758,0x7ff724ac5004,16,ThrowWasmTrapUnreachable
code-creation,Builtin,2,282768,0x7ff724ac5024,16,ThrowWasmTrapMemOutOfBounds
code-creation,Builtin,2,282779,0x7ff724ac5044,16,ThrowWasmTrapUnalignedAccess
code-creation,Builtin,2,282789,0x7ff724ac5064,16,ThrowWasmTrapDivByZero
code-creation,Builtin,2,282800,0x7ff724ac5084,16,ThrowWasmTrapDivUnrepresentable
code-creation,Builtin,2,282810,0x7ff724ac50a4,16,ThrowWasmTrapRemByZero
code-creation,Builtin,2,282821,0x7ff724ac50c4,16,ThrowWasmTrapFloatUnrepresentable
code-creation,Builtin,2,282831,0x7ff724ac50e4,16,ThrowWasmTrapFuncSigMismatch
code-creation,Builtin,2,282842,0x7ff724ac5104,16,ThrowWasmTrapDataSegmentDropped
code-creation,Builtin,2,282853,0x7ff724ac5124,16,ThrowWasmTrapElemSegmentDropped
code-creation,Builtin,2,282863,0x7ff724ac5144,16,ThrowWasmTrapTableOutOfBounds
code-creation,Builtin,2,282874,0x7ff724ac5164,16,ThrowWasmTrapRethrowNull
code-creation,Builtin,2,282884,0x7ff724ac5184,16,ThrowWasmTrapNullDereference
code-creation,Builtin,2,282895,0x7ff724ac51a4,16,ThrowWasmTrapIllegalCast
code-creation,Builtin,2,282905,0x7ff724ac51c4,16,ThrowWasmTrapArrayOutOfBounds
code-creation,Builtin,2,282916,0x7ff724ac51e4,16,ThrowWasmTrapArrayTooLarge
code-creation,Builtin,2,282926,0x7ff724ac5204,172,LoadJoinElement_GenericElementsAccessor_0
code-creation,Builtin,2,282937,0x7ff724ac52c4,24,LoadJoinTypedElement_Int32Elements_0
code-creation,Builtin,2,282948,0x7ff724ac52e4,116,LoadJoinTypedElement_Float32Elements_0
code-creation,Builtin,2,282959,0x7ff724ac5364,112,LoadJoinTypedElement_Float64Elements_0
code-creation,Builtin,2,282970,0x7ff724ac53e4,24,LoadJoinTypedElement_Uint8ClampedElements_0
code-creation,Builtin,2,282981,0x7ff724ac5404,220,LoadJoinTypedElement_BigUint64Elements_0
code-creation,Builtin,2,282992,0x7ff724ac54e4,248,LoadJoinTypedElement_BigInt64Elements_0
code-creation,Builtin,2,283003,0x7ff724ac55e4,24,LoadJoinTypedElement_Uint8Elements_0
code-creation,Builtin,2,283014,0x7ff724ac5604,24,LoadJoinTypedElement_Int8Elements_0
code-creation,Builtin,2,283025,0x7ff724ac5624,24,LoadJoinTypedElement_Uint16Elements_0
code-creation,Builtin,2,283036,0x7ff724ac5644,24,LoadJoinTypedElement_Int16Elements_0
code-creation,Builtin,2,283047,0x7ff724ac5664,132,LoadJoinTypedElement_Uint32Elements_0
code-creation,Builtin,2,283058,0x7ff724ac5704,8,GenericBuiltinTest_Smi_0
code-creation,Builtin,2,283068,0x7ff724ac5724,32,CanUseSameAccessor_FastDoubleElements_0
code-creation,Builtin,2,283079,0x7ff724ac5764,32,CanUseSameAccessor_FastSmiElements_0
code-creation,Builtin,2,283090,0x7ff724ac57a4,32,CanUseSameAccessor_FastObjectElements_0
code-creation,Builtin,2,283101,0x7ff724ac57e4,2680,Load_GenericElementsAccessor_0
code-creation,Builtin,2,283112,0x7ff724ac6264,24,Store_GenericElementsAccessor_0
code-creation,Builtin,2,283122,0x7ff724ac6284,36,Delete_GenericElementsAccessor_0
code-creation,Builtin,2,283133,0x7ff724ac62c4,24,LoadTypedElement_Int32Elements_0
code-creation,Builtin,2,283144,0x7ff724ac62e4,164,StoreTypedElementNumeric_Int32Elements_0
code-creation,Builtin,2,283197,0x7ff724ac63a4,180,StoreTypedElementJSAny_Int32Elements_0
code-creation,Builtin,2,283211,0x7ff724ac6464,116,LoadTypedElement_Float32Elements_0
code-creation,Builtin,2,283223,0x7ff724ac64e4,32,StoreTypedElementNumeric_Float32Elements_0
code-creation,Builtin,2,283234,0x7ff724ac6524,156,StoreTypedElementJSAny_Float32Elements_0
code-creation,Builtin,2,283245,0x7ff724ac65c4,112,LoadTypedElement_Float64Elements_0
code-creation,Builtin,2,283256,0x7ff724ac6644,28,StoreTypedElementNumeric_Float64Elements_0
code-creation,Builtin,2,283267,0x7ff724ac6664,152,StoreTypedElementJSAny_Float64Elements_0
code-creation,Builtin,2,283278,0x7ff724ac6704,24,LoadTypedElement_Uint8ClampedElements_0
code-creation,Builtin,2,283289,0x7ff724ac6724,24,StoreTypedElementNumeric_Uint8ClampedElements_0
code-creation,Builtin,2,283301,0x7ff724ac6744,620,StoreTypedElementJSAny_Uint8ClampedElements_0
code-creation,Builtin,2,283312,0x7ff724ac69c4,220,LoadTypedElement_BigUint64Elements_0
code-creation,Builtin,2,283323,0x7ff724ac6aa4,56,StoreTypedElementNumeric_BigUint64Elements_0
code-creation,Builtin,2,283335,0x7ff724ac6ae4,200,StoreTypedElementJSAny_BigUint64Elements_0
code-creation,Builtin,2,283346,0x7ff724ac6bc4,248,LoadTypedElement_BigInt64Elements_0
code-creation,Builtin,2,283357,0x7ff724ac6cc4,56,StoreTypedElementNumeric_BigInt64Elements_0
code-creation,Builtin,2,283368,0x7ff724ac6d04,200,StoreTypedElementJSAny_BigInt64Elements_0
code-creation,Builtin,2,283379,0x7ff724ac6de4,24,LoadTypedElement_Uint8Elements_0
code-creation,Builtin,2,283390,0x7ff724ac6e04,24,StoreTypedElementNumeric_Uint8Elements_0
code-creation,Builtin,2,283401,0x7ff724ac6e24,180,StoreTypedElementJSAny_Uint8Elements_0
code-creation,Builtin,2,283412,0x7ff724ac6ee4,24,LoadTypedElement_Int8Elements_0
code-creation,Builtin,2,283423,0x7ff724ac6f04,24,StoreTypedElementNumeric_Int8Elements_0
code-creation,Builtin,2,283434,0x7ff724ac6f24,180,StoreTypedElementJSAny_Int8Elements_0
code-creation,Builtin,2,283445,0x7ff724ac6fe4,24,LoadTypedElement_Uint16Elements_0
code-creation,Builtin,2,283455,0x7ff724ac7004,24,StoreTypedElementNumeric_Uint16Elements_0
code-creation,Builtin,2,283466,0x7ff724ac7024,180,StoreTypedElementJSAny_Uint16Elements_0
code-creation,Builtin,2,283477,0x7ff724ac70e4,24,LoadTypedElement_Int16Elements_0
code-creation,Builtin,2,283488,0x7ff724ac7104,24,StoreTypedElementNumeric_Int16Elements_0
code-creation,Builtin,2,283499,0x7ff724ac7124,180,StoreTypedElementJSAny_Int16Elements_0
code-creation,Builtin,2,283510,0x7ff724ac71e4,132,LoadTypedElement_Uint32Elements_0
code-creation,Builtin,2,283521,0x7ff724ac7284,164,StoreTypedElementNumeric_Uint32Elements_0
code-creation,Builtin,2,283532,0x7ff724ac7344,180,StoreTypedElementJSAny_Uint32Elements_0
code-creation,Builtin,2,283543,0x7ff724ac7404,12,CollatorConstructor
code-creation,Builtin,2,283554,0x7ff724ac7424,12,CollatorInternalCompare
code-creation,Builtin,2,283565,0x7ff724ac7444,12,CollatorPrototypeCompare
code-creation,Builtin,2,283575,0x7ff724ac7464,12,CollatorSupportedLocalesOf
code-creation,Builtin,2,283586,0x7ff724ac7484,12,CollatorPrototypeResolvedOptions
code-creation,Builtin,2,283597,0x7ff724ac74a4,12,DatePrototypeToLocaleDateString
code-creation,Builtin,2,283607,0x7ff724ac74c4,12,DatePrototypeToLocaleString
code-creation,Builtin,2,283618,0x7ff724ac74e4,12,DatePrototypeToLocaleTimeString
code-creation,Builtin,2,283628,0x7ff724ac7504,12,DateTimeFormatConstructor
code-creation,Builtin,2,283639,0x7ff724ac7524,12,DateTimeFormatInternalFormat
code-creation,Builtin,2,283649,0x7ff724ac7544,12,DateTimeFormatPrototypeFormat
code-creation,Builtin,2,283660,0x7ff724ac7564,12,DateTimeFormatPrototypeFormatRange
code-creation,Builtin,2,283671,0x7ff724ac7584,12,DateTimeFormatPrototypeFormatRangeToParts
code-creation,Builtin,2,283682,0x7ff724ac75a4,12,DateTimeFormatPrototypeFormatToParts
code-creation,Builtin,2,283693,0x7ff724ac75c4,12,DateTimeFormatPrototypeResolvedOptions
code-creation,Builtin,2,283704,0x7ff724ac75e4,12,DateTimeFormatSupportedLocalesOf
code-creation,Builtin,2,283714,0x7ff724ac7604,12,DisplayNamesConstructor
code-creation,Builtin,2,283727,0x7ff724ac7624,12,DisplayNamesPrototypeOf
code-creation,Builtin,2,283739,0x7ff724ac7644,12,DisplayNamesPrototypeResolvedOptions
code-creation,Builtin,2,283750,0x7ff724ac7664,12,DisplayNamesSupportedLocalesOf
code-creation,Builtin,2,283760,0x7ff724ac7684,12,IntlGetCanonicalLocales
code-creation,Builtin,2,283771,0x7ff724ac76a4,12,ListFormatConstructor
code-creation,Builtin,2,283781,0x7ff724ac76c4,224,ListFormatPrototypeFormat
code-creation,Builtin,2,283792,0x7ff724ac77c4,224,ListFormatPrototypeFormatToParts
code-creation,Builtin,2,283802,0x7ff724ac78c4,12,ListFormatPrototypeResolvedOptions
code-creation,Builtin,2,283813,0x7ff724ac78e4,12,ListFormatSupportedLocalesOf
code-creation,Builtin,2,283824,0x7ff724ac7904,12,LocaleConstructor
code-creation,Builtin,2,283834,0x7ff724ac7924,12,LocalePrototypeBaseName
code-creation,Builtin,2,283844,0x7ff724ac7944,12,LocalePrototypeCalendar
code-creation,Builtin,2,283855,0x7ff724ac7964,12,LocalePrototypeCalendars
code-creation,Builtin,2,283865,0x7ff724ac7984,12,LocalePrototypeCaseFirst
code-creation,Builtin,2,283876,0x7ff724ac79a4,12,LocalePrototypeCollation
code-creation,Builtin,2,283886,0x7ff724ac79c4,12,LocalePrototypeCollations
code-creation,Builtin,2,283897,0x7ff724ac79e4,12,LocalePrototypeHourCycle
code-creation,Builtin,2,283907,0x7ff724ac7a04,12,LocalePrototypeHourCycles
code-creation,Builtin,2,283917,0x7ff724ac7a24,12,LocalePrototypeLanguage
code-creation,Builtin,2,283928,0x7ff724ac7a44,12,LocalePrototypeMaximize
code-creation,Builtin,2,283938,0x7ff724ac7a64,12,LocalePrototypeMinimize
code-creation,Builtin,2,283949,0x7ff724ac7a84,12,LocalePrototypeNumeric
code-creation,Builtin,2,283959,0x7ff724ac7aa4,12,LocalePrototypeNumberingSystem
code-creation,Builtin,2,283970,0x7ff724ac7ac4,12,LocalePrototypeNumberingSystems
code-creation,Builtin,2,283980,0x7ff724ac7ae4,12,LocalePrototypeRegion
code-creation,Builtin,2,283990,0x7ff724ac7b04,12,LocalePrototypeScript
code-creation,Builtin,2,284001,0x7ff724ac7b24,12,LocalePrototypeTextInfo
code-creation,Builtin,2,284011,0x7ff724ac7b44,12,LocalePrototypeTimeZones
code-creation,Builtin,2,284021,0x7ff724ac7b64,12,LocalePrototypeToString
code-creation,Builtin,2,284032,0x7ff724ac7b84,12,LocalePrototypeWeekInfo
code-creation,Builtin,2,284042,0x7ff724ac7ba4,12,NumberFormatConstructor
code-creation,Builtin,2,284053,0x7ff724ac7bc4,12,NumberFormatInternalFormatNumber
code-creation,Builtin,2,284064,0x7ff724ac7be4,12,NumberFormatPrototypeFormatNumber
code-creation,Builtin,2,284074,0x7ff724ac7c04,12,NumberFormatPrototypeFormatToParts
code-creation,Builtin,2,284085,0x7ff724ac7c24,12,NumberFormatPrototypeResolvedOptions
code-creation,Builtin,2,284096,0x7ff724ac7c44,12,NumberFormatSupportedLocalesOf
code-creation,Builtin,2,284107,0x7ff724ac7c64,12,PluralRulesConstructor
code-creation,Builtin,2,284117,0x7ff724ac7c84,12,PluralRulesPrototypeResolvedOptions
code-creation,Builtin,2,284128,0x7ff724ac7ca4,12,PluralRulesPrototypeSelect
code-creation,Builtin,2,284145,0x7ff724ac7cc4,12,PluralRulesSupportedLocalesOf
code-creation,Builtin,2,284156,0x7ff724ac7ce4,12,RelativeTimeFormatConstructor
code-creation,Builtin,2,284166,0x7ff724ac7d04,12,RelativeTimeFormatPrototypeFormat
code-creation,Builtin,2,284177,0x7ff724ac7d24,12,RelativeTimeFormatPrototypeFormatToParts
code-creation,Builtin,2,284188,0x7ff724ac7d44,12,RelativeTimeFormatPrototypeResolvedOptions
code-creation,Builtin,2,284199,0x7ff724ac7d64,12,RelativeTimeFormatSupportedLocalesOf
code-creation,Builtin,2,284210,0x7ff724ac7d84,12,SegmenterConstructor
code-creation,Builtin,2,284220,0x7ff724ac7da4,12,SegmenterPrototypeResolvedOptions
code-creation,Builtin,2,284231,0x7ff724ac7dc4,12,SegmenterPrototypeSegment
code-creation,Builtin,2,284241,0x7ff724ac7de4,12,SegmenterSupportedLocalesOf
code-creation,Builtin,2,284252,0x7ff724ac7e04,12,SegmentIteratorPrototypeNext
code-creation,Builtin,2,284262,0x7ff724ac7e24,12,SegmentsPrototypeContaining
code-creation,Builtin,2,284273,0x7ff724ac7e44,12,SegmentsPrototypeIterator
code-creation,Builtin,2,284283,0x7ff724ac7e64,12,StringPrototypeNormalizeIntl
code-creation,Builtin,2,284296,0x7ff724ac7e84,12,StringPrototypeToLocaleLowerCase
code-creation,Builtin,2,284308,0x7ff724ac7ea4,12,StringPrototypeToLocaleUpperCase
code-creation,Builtin,2,284319,0x7ff724ac7ec4,200,StringPrototypeToLowerCaseIntl
code-creation,Builtin,2,284329,0x7ff724ac7fa4,12,StringPrototypeToUpperCaseIntl
code-creation,Builtin,2,284340,0x7ff724ac7fc4,636,StringToLowerCaseIntl
code-creation,Builtin,2,284350,0x7ff724ac8244,12,V8BreakIteratorConstructor
code-creation,Builtin,2,284361,0x7ff724ac8264,12,V8BreakIteratorInternalAdoptText
code-creation,Builtin,2,284372,0x7ff724ac8284,12,V8BreakIteratorInternalBreakType
code-creation,Builtin,2,284382,0x7ff724ac82a4,12,V8BreakIteratorInternalCurrent
code-creation,Builtin,2,284393,0x7ff724ac82c4,12,V8BreakIteratorInternalFirst
code-creation,Builtin,2,284404,0x7ff724ac82e4,12,V8BreakIteratorInternalNext
code-creation,Builtin,2,284414,0x7ff724ac8304,12,V8BreakIteratorPrototypeAdoptText
code-creation,Builtin,2,284425,0x7ff724ac8324,12,V8BreakIteratorPrototypeBreakType
code-creation,Builtin,2,284436,0x7ff724ac8344,12,V8BreakIteratorPrototypeCurrent
code-creation,Builtin,2,284447,0x7ff724ac8364,12,V8BreakIteratorPrototypeFirst
code-creation,Builtin,2,284457,0x7ff724ac8384,12,V8BreakIteratorPrototypeNext
code-creation,Builtin,2,284468,0x7ff724ac83a4,12,V8BreakIteratorPrototypeResolvedOptions
code-creation,Builtin,2,284479,0x7ff724ac83c4,12,V8BreakIteratorSupportedLocalesOf
code-creation,BytecodeHandler,0,284490,0x7ff724ac83e4,24,Wide
code-creation,BytecodeHandler,0,284500,0x7ff724ac8404,24,ExtraWide
code-creation,BytecodeHandler,0,284511,0x7ff724ac8424,104,DebugBreakWide
code-creation,BytecodeHandler,0,284521,0x7ff724ac84a4,104,DebugBreakExtraWide
code-creation,BytecodeHandler,0,284532,0x7ff724ac8524,164,DebugBreak0
code-creation,BytecodeHandler,0,284542,0x7ff724ac85e4,104,DebugBreak1
code-creation,BytecodeHandler,0,284554,0x7ff724ac8664,104,DebugBreak2
code-creation,BytecodeHandler,0,284564,0x7ff724ac86e4,104,DebugBreak3
code-creation,BytecodeHandler,0,284575,0x7ff724ac8764,104,DebugBreak4
code-creation,BytecodeHandler,0,284585,0x7ff724ac87e4,104,DebugBreak5
code-creation,BytecodeHandler,0,284595,0x7ff724ac8864,104,DebugBreak6
code-creation,BytecodeHandler,0,284606,0x7ff724ac88e4,32,Ldar
code-creation,BytecodeHandler,0,284616,0x7ff724ac8924,68,LdaZero
code-creation,BytecodeHandler,0,284626,0x7ff724ac8984,76,LdaSmi
code-creation,BytecodeHandler,0,284636,0x7ff724ac89e4,68,LdaUndefined
code-creation,BytecodeHandler,0,284647,0x7ff724ac8a44,68,LdaNull
code-creation,BytecodeHandler,0,284657,0x7ff724ac8aa4,68,LdaTheHole
code-creation,BytecodeHandler,0,284667,0x7ff724ac8b04,20,LdaTrue
code-creation,BytecodeHandler,0,284677,0x7ff724ac8b24,20,LdaFalse
code-creation,BytecodeHandler,0,284687,0x7ff724ac8b44,76,LdaConstant
code-creation,BytecodeHandler,0,284698,0x7ff724ac8ba4,132,LdaContextSlot
code-creation,BytecodeHandler,0,284708,0x7ff724ac8c44,132,LdaImmutableContextSlot
code-creation,BytecodeHandler,0,284719,0x7ff724ac8ce4,88,LdaCurrentContextSlot
code-creation,BytecodeHandler,0,284730,0x7ff724ac8d44,88,LdaImmutableCurrentContextSlot
code-creation,BytecodeHandler,0,284741,0x7ff724ac8da4,32,Star
code-creation,BytecodeHandler,0,284751,0x7ff724ac8de4,40,Mov
code-creation,BytecodeHandler,0,284761,0x7ff724ac8e24,40,PushContext
code-creation,BytecodeHandler,0,284771,0x7ff724ac8e64,36,PopContext
code-creation,BytecodeHandler,0,284782,0x7ff724ac8ea4,48,TestReferenceEqual
code-creation,BytecodeHandler,0,284792,0x7ff724ac8ee4,52,TestUndetectable
code-creation,BytecodeHandler,0,284803,0x7ff724ac8f24,36,TestNull
code-creation,BytecodeHandler,0,284813,0x7ff724ac8f64,36,TestUndefined
code-creation,BytecodeHandler,0,284824,0x7ff724ac8fa4,336,TestTypeOf
code-creation,BytecodeHandler,0,284834,0x7ff724ac9104,6036,LdaGlobal
code-creation,BytecodeHandler,0,284844,0x7ff724aca8a4,4536,LdaGlobalInsideTypeof
code-creation,BytecodeHandler,0,284855,0x7ff724acba64,168,StaGlobal
code-creation,BytecodeHandler,0,284865,0x7ff724acbb24,160,StaContextSlot
code-creation,BytecodeHandler,0,284876,0x7ff724acbbe4,116,StaCurrentContextSlot
code-creation,BytecodeHandler,0,284889,0x7ff724acbc64,124,LdaLookupSlot
code-creation,BytecodeHandler,0,284901,0x7ff724acbce4,240,LdaLookupContextSlot
code-creation,BytecodeHandler,0,284912,0x7ff724acbde4,4776,LdaLookupGlobalSlot
code-creation,BytecodeHandler,0,284923,0x7ff724acd0a4,124,LdaLookupSlotInsideTypeof
code-creation,BytecodeHandler,0,284934,0x7ff724acd124,240,LdaLookupContextSlotInsideTypeof
code-creation,BytecodeHandler,0,284946,0x7ff724acd224,4740,LdaLookupGlobalSlotInsideTypeof
code-creation,BytecodeHandler,0,284957,0x7ff724ace4c4,220,StaLookupSlot
code-creation,BytecodeHandler,0,284967,0x7ff724ace5a4,5216,LdaNamedProperty
code-creation,BytecodeHandler,0,284978,0x7ff724acfa24,180,LdaNamedPropertyFromSuper
code-creation,BytecodeHandler,0,284989,0x7ff724acfae4,212,LdaKeyedProperty
code-creation,BytecodeHandler,0,285000,0x7ff724acfbc4,160,LdaModuleVariable
code-creation,BytecodeHandler,0,285010,0x7ff724acfc84,292,StaModuleVariable
code-creation,BytecodeHandler,0,285021,0x7ff724acfdc4,172,StaNamedProperty
code-creation,BytecodeHandler,0,285032,0x7ff724acfe84,172,StaNamedOwnProperty
code-creation,BytecodeHandler,0,285042,0x7ff724acff44,164,StaKeyedProperty
code-creation,BytecodeHandler,0,285053,0x7ff724ad0004,164,StaInArrayLiteral
code-creation,BytecodeHandler,0,285063,0x7ff724ad00c4,196,StaDataPropertyInLiteral
code-creation,BytecodeHandler,0,285074,0x7ff724ad01a4,160,CollectTypeProfile
code-creation,BytecodeHandler,0,285085,0x7ff724ad0264,1028,Add
code-creation,BytecodeHandler,0,285095,0x7ff724ad0684,1064,Sub
code-creation,BytecodeHandler,0,285105,0x7ff724ad0ac4,1024,Mul
code-creation,BytecodeHandler,0,285115,0x7ff724ad0ee4,988,Div
code-creation,BytecodeHandler,0,285125,0x7ff724ad12c4,912,Mod
code-creation,BytecodeHandler,0,285135,0x7ff724ad1664,964,Exp
code-creation,BytecodeHandler,0,285145,0x7ff724ad1a44,876,BitwiseOr
code-creation,BytecodeHandler,0,285156,0x7ff724ad1dc4,888,BitwiseXor
code-creation,BytecodeHandler,0,285166,0x7ff724ad2144,888,BitwiseAnd
code-creation,BytecodeHandler,0,285176,0x7ff724ad24c4,900,ShiftLeft
code-creation,BytecodeHandler,0,285186,0x7ff724ad2864,900,ShiftRight
code-creation,BytecodeHandler,0,285197,0x7ff724ad2c04,1020,ShiftRightLogical
code-creation,BytecodeHandler,0,285207,0x7ff724ad3004,960,AddSmi
code-creation,BytecodeHandler,0,285217,0x7ff724ad33e4,1000,SubSmi
code-creation,BytecodeHandler,0,285228,0x7ff724ad37e4,916,MulSmi
code-creation,BytecodeHandler,0,285238,0x7ff724ad3b84,920,DivSmi
code-creation,BytecodeHandler,0,285248,0x7ff724ad3f24,816,ModSmi
code-creation,BytecodeHandler,0,285258,0x7ff724ad4264,872,ExpSmi
code-creation,BytecodeHandler,0,285268,0x7ff724ad45e4,488,BitwiseOrSmi
code-creation,BytecodeHandler,0,285278,0x7ff724ad47e4,488,BitwiseXorSmi
code-creation,BytecodeHandler,0,285289,0x7ff724ad49e4,488,BitwiseAndSmi
code-creation,BytecodeHandler,0,285299,0x7ff724ad4be4,488,ShiftLeftSmi
code-creation,BytecodeHandler,0,285310,0x7ff724ad4de4,488,ShiftRightSmi
code-creation,BytecodeHandler,0,285320,0x7ff724ad4fe4,640,ShiftRightLogicalSmi
code-creation,BytecodeHandler,0,285331,0x7ff724ad5284,656,Inc
code-creation,BytecodeHandler,0,285341,0x7ff724ad5524,656,Dec
code-creation,BytecodeHandler,0,285351,0x7ff724ad57c4,640,Negate
code-creation,BytecodeHandler,0,285368,0x7ff724ad5a64,480,BitwiseNot
code-creation,BytecodeHandler,0,285378,0x7ff724ad5c64,108,ToBooleanLogicalNot
code-creation,BytecodeHandler,0,285389,0x7ff724ad5ce4,36,LogicalNot
code-creation,BytecodeHandler,0,285399,0x7ff724ad5d24,208,TypeOf
code-creation,BytecodeHandler,0,285409,0x7ff724ad5e04,120,DeletePropertyStrict
code-creation,BytecodeHandler,0,285420,0x7ff724ad5e84,112,DeletePropertySloppy
code-creation,BytecodeHandler,0,285431,0x7ff724ad5f04,40,GetSuperConstructor
code-creation,BytecodeHandler,0,285441,0x7ff724ad5f44,1132,CallAnyReceiver
code-creation,BytecodeHandler,0,285452,0x7ff724ad63c4,1132,CallProperty
code-creation,BytecodeHandler,0,285462,0x7ff724ad6844,1012,CallProperty0
code-creation,BytecodeHandler,0,285473,0x7ff724ad6c44,1028,CallProperty1
code-creation,BytecodeHandler,0,285486,0x7ff724ad7064,1040,CallProperty2
code-creation,BytecodeHandler,0,285498,0x7ff724ad7484,1016,CallUndefinedReceiver
code-creation,BytecodeHandler,0,285509,0x7ff724ad7884,1048,CallUndefinedReceiver0
code-creation,BytecodeHandler,0,285520,0x7ff724ad7ca4,1020,CallUndefinedReceiver1
code-creation,BytecodeHandler,0,285530,0x7ff724ad80a4,1040,CallUndefinedReceiver2
code-creation,BytecodeHandler,0,285541,0x7ff724ad84c4,1132,CallWithSpread
code-creation,BytecodeHandler,0,285553,0x7ff724ad8944,124,CallRuntime
code-creation,BytecodeHandler,0,285563,0x7ff724ad89c4,156,CallRuntimeForPair
code-creation,BytecodeHandler,0,285574,0x7ff724ad8a64,80,CallJSRuntime
code-creation,BytecodeHandler,0,285585,0x7ff724ad8ac4,1236,InvokeIntrinsic
code-creation,BytecodeHandler,0,285595,0x7ff724ad8fa4,1020,Construct
code-creation,BytecodeHandler,0,285606,0x7ff724ad93a4,536,ConstructWithSpread
code-creation,BytecodeHandler,0,285616,0x7ff724ad95c4,1936,TestEqual
code-creation,BytecodeHandler,0,285626,0x7ff724ad9d64,1064,TestEqualStrict
code-creation,BytecodeHandler,0,285637,0x7ff724ada1a4,1624,TestLessThan
code-creation,BytecodeHandler,0,285647,0x7ff724ada804,1624,TestGreaterThan
code-creation,BytecodeHandler,0,285658,0x7ff724adae64,1624,TestLessThanOrEqual
code-creation,BytecodeHandler,0,285669,0x7ff724adb4c4,1624,TestGreaterThanOrEqual
code-creation,BytecodeHandler,0,285680,0x7ff724adbb24,860,TestInstanceOf
code-creation,BytecodeHandler,0,285690,0x7ff724adbe84,156,TestIn
code-creation,BytecodeHandler,0,285701,0x7ff724adbf24,112,ToName
code-creation,BytecodeHandler,0,285711,0x7ff724adbfa4,212,ToNumber
code-creation,BytecodeHandler,0,285721,0x7ff724adc084,232,ToNumeric
code-creation,BytecodeHandler,0,285731,0x7ff724adc184,112,ToObject
code-creation,BytecodeHandler,0,285741,0x7ff724adc204,116,ToString
code-creation,BytecodeHandler,0,285752,0x7ff724adc284,400,CreateRegExpLiteral
code-creation,BytecodeHandler,0,285762,0x7ff724adc424,1468,CreateArrayLiteral
code-creation,BytecodeHandler,0,285773,0x7ff724adc9e4,92,CreateArrayFromIterable
code-creation,BytecodeHandler,0,285784,0x7ff724adca44,788,CreateEmptyArrayLiteral
code-creation,BytecodeHandler,0,285795,0x7ff724adcd64,2140,CreateObjectLiteral
code-creation,BytecodeHandler,0,285806,0x7ff724add5c4,224,CreateEmptyObjectLiteral
code-creation,BytecodeHandler,0,285817,0x7ff724add6c4,168,CloneObject
code-creation,BytecodeHandler,0,285827,0x7ff724add784,212,GetTemplateObject
code-creation,BytecodeHandler,0,285840,0x7ff724add864,328,CreateClosure
code-creation,BytecodeHandler,0,285850,0x7ff724add9c4,120,CreateBlockContext
code-creation,BytecodeHandler,0,285862,0x7ff724adda44,132,CreateCatchContext
code-creation,BytecodeHandler,0,285873,0x7ff724addae4,256,CreateFunctionContext
code-creation,BytecodeHandler,0,285884,0x7ff724addc04,256,CreateEvalContext
code-creation,BytecodeHandler,0,285895,0x7ff724addd24,132,CreateWithContext
code-creation,BytecodeHandler,0,285907,0x7ff724adddc4,1568,CreateMappedArguments
code-creation,BytecodeHandler,0,285918,0x7ff724ade404,592,CreateUnmappedArguments
code-creation,BytecodeHandler,0,285929,0x7ff724ade664,632,CreateRestParameter
code-creation,BytecodeHandler,0,285940,0x7ff724ade8e4,424,JumpLoop
code-creation,BytecodeHandler,0,285949,0x7ff724adeaa4,44,Jump
code-creation,BytecodeHandler,0,285958,0x7ff724adeae4,56,JumpConstant
code-creation,BytecodeHandler,0,285968,0x7ff724adeb24,80,JumpIfNullConstant
code-creation,BytecodeHandler,0,285978,0x7ff724adeb84,80,JumpIfNotNullConstant
code-creation,BytecodeHandler,0,285987,0x7ff724adebe4,80,JumpIfUndefinedConstant
code-creation,BytecodeHandler,0,285996,0x7ff724adec44,80,JumpIfNotUndefinedConstant
code-creation,BytecodeHandler,0,286006,0x7ff724adeca4,84,JumpIfUndefinedOrNullConstant
code-creation,BytecodeHandler,0,286015,0x7ff724aded04,80,JumpIfTrueConstant
code-creation,BytecodeHandler,0,286024,0x7ff724aded64,80,JumpIfFalseConstant
code-creation,BytecodeHandler,0,286033,0x7ff724adedc4,88,JumpIfJSReceiverConstant
code-creation,BytecodeHandler,0,286043,0x7ff724adee24,152,JumpIfToBooleanTrueConstant
code-creation,BytecodeHandler,0,286052,0x7ff724adeec4,152,JumpIfToBooleanFalseConstant
code-creation,BytecodeHandler,0,286064,0x7ff724adef64,136,JumpIfToBooleanTrue
code-creation,BytecodeHandler,0,286074,0x7ff724adf004,136,JumpIfToBooleanFalse
code-creation,BytecodeHandler,0,286083,0x7ff724adf0a4,64,JumpIfTrue
code-creation,BytecodeHandler,0,286092,0x7ff724adf104,64,JumpIfFalse
code-creation,BytecodeHandler,0,286101,0x7ff724adf164,64,JumpIfNull
code-creation,BytecodeHandler,0,286110,0x7ff724adf1c4,64,JumpIfNotNull
code-creation,BytecodeHandler,0,286119,0x7ff724adf224,64,JumpIfUndefined
code-creation,BytecodeHandler,0,286128,0x7ff724adf284,64,JumpIfNotUndefined
code-creation,BytecodeHandler,0,286137,0x7ff724adf2e4,72,JumpIfUndefinedOrNull
code-creation,BytecodeHandler,0,286146,0x7ff724adf344,76,JumpIfJSReceiver
code-creation,BytecodeHandler,0,286155,0x7ff724adf3a4,108,SwitchOnSmiNoFeedback
code-creation,BytecodeHandler,0,286164,0x7ff724adf424,464,ForInEnumerate
code-creation,BytecodeHandler,0,286174,0x7ff724adf604,252,ForInPrepare
code-creation,BytecodeHandler,0,286182,0x7ff724adf704,60,ForInContinue
code-creation,BytecodeHandler,0,286191,0x7ff724adf744,256,ForInNext
code-creation,BytecodeHandler,0,286200,0x7ff724adf864,48,ForInStep
code-creation,BytecodeHandler,0,286209,0x7ff724adf8a4,36,SetPendingMessage
code-creation,BytecodeHandler,0,286218,0x7ff724adf8e4,116,Throw
code-creation,BytecodeHandler,0,286227,0x7ff724adf964,116,ReThrow
code-creation,BytecodeHandler,0,286236,0x7ff724adf9e4,112,Return
code-creation,BytecodeHandler,0,286244,0x7ff724adfa64,196,ThrowReferenceErrorIfHole
code-creation,BytecodeHandler,0,286254,0x7ff724adfb44,132,ThrowSuperNotCalledIfHole
code-creation,BytecodeHandler,0,286263,0x7ff724adfbe4,132,ThrowSuperAlreadyCalledIfNotHole
code-creation,BytecodeHandler,0,286273,0x7ff724adfc84,156,ThrowIfNotSuperConstructor
code-creation,BytecodeHandler,0,286282,0x7ff724adfd24,120,SwitchOnGeneratorState
code-creation,BytecodeHandler,0,286292,0x7ff724adfda4,512,SuspendGenerator
code-creation,BytecodeHandler,0,286301,0x7ff724adffc4,128,ResumeGenerator
code-creation,BytecodeHandler,0,286310,0x7ff724ae0064,152,GetIterator
code-creation,BytecodeHandler,0,286319,0x7ff724ae0104,116,Debugger
code-creation,BytecodeHandler,0,286328,0x7ff724ae0184,124,IncBlockCounter
code-creation,BytecodeHandler,0,286337,0x7ff724ae0204,56,Abort
code-creation,BytecodeHandler,0,286345,0x7ff724ae0244,32,Star0
code-creation,BytecodeHandler,0,286354,0x7ff724ae0284,60,Illegal
code-creation,BytecodeHandler,0,286364,0x7ff724ae02c4,108,DebugBreak1.Wide
code-creation,BytecodeHandler,0,286373,0x7ff724ae0344,108,DebugBreak2.Wide
code-creation,BytecodeHandler,0,286389,0x7ff724ae03c4,108,DebugBreak3.Wide
code-creation,BytecodeHandler,0,286398,0x7ff724ae0444,108,DebugBreak4.Wide
code-creation,BytecodeHandler,0,286408,0x7ff724ae04c4,108,DebugBreak5.Wide
code-creation,BytecodeHandler,0,286417,0x7ff724ae0544,108,DebugBreak6.Wide
code-creation,BytecodeHandler,0,286426,0x7ff724ae05c4,32,Ldar.Wide
code-creation,BytecodeHandler,0,286435,0x7ff724ae0604,32,LdaSmi.Wide
code-creation,BytecodeHandler,0,286444,0x7ff724ae0644,32,LdaConstant.Wide
code-creation,BytecodeHandler,0,286453,0x7ff724ae0684,92,LdaContextSlot.Wide
code-creation,BytecodeHandler,0,286463,0x7ff724ae06e4,92,LdaImmutableContextSlot.Wide
code-creation,BytecodeHandler,0,286472,0x7ff724ae0744,48,LdaCurrentContextSlot.Wide
code-creation,BytecodeHandler,0,286482,0x7ff724ae0784,48,LdaImmutableCurrentContextSlot.Wide
code-creation,BytecodeHandler,0,286492,0x7ff724ae07c4,32,Star.Wide
code-creation,BytecodeHandler,0,286501,0x7ff724ae0804,40,Mov.Wide
code-creation,BytecodeHandler,0,286510,0x7ff724ae0844,40,PushContext.Wide
code-creation,BytecodeHandler,0,286519,0x7ff724ae0884,36,PopContext.Wide
code-creation,BytecodeHandler,0,286528,0x7ff724ae08c4,48,TestReferenceEqual.Wide
code-creation,BytecodeHandler,0,286537,0x7ff724ae0904,4668,LdaGlobal.Wide
code-creation,BytecodeHandler,0,286547,0x7ff724ae1b44,4604,LdaGlobalInsideTypeof.Wide
code-creation,BytecodeHandler,0,286557,0x7ff724ae2d44,172,StaGlobal.Wide
code-creation,BytecodeHandler,0,286566,0x7ff724ae2e04,160,StaContextSlot.Wide
code-creation,BytecodeHandler,0,286578,0x7ff724ae2ec4,116,StaCurrentContextSlot.Wide
code-creation,BytecodeHandler,0,286589,0x7ff724ae2f44,128,LdaLookupSlot.Wide
code-creation,BytecodeHandler,0,286598,0x7ff724ae2fe4,244,LdaLookupContextSlot.Wide
code-creation,BytecodeHandler,0,286608,0x7ff724ae30e4,4852,LdaLookupGlobalSlot.Wide
code-creation,BytecodeHandler,0,286617,0x7ff724ae43e4,128,LdaLookupSlotInsideTypeof.Wide
code-creation,BytecodeHandler,0,286627,0x7ff724ae4484,244,LdaLookupContextSlotInsideTypeof.Wide
code-creation,BytecodeHandler,0,286637,0x7ff724ae4584,4812,LdaLookupGlobalSlotInsideTypeof.Wide
code-creation,BytecodeHandler,0,286647,0x7ff724ae5864,220,StaLookupSlot.Wide
code-creation,BytecodeHandler,0,286657,0x7ff724ae5944,5216,LdaNamedProperty.Wide
code-creation,BytecodeHandler,0,286666,0x7ff724ae6dc4,188,LdaNamedPropertyFromSuper.Wide
code-creation,BytecodeHandler,0,286676,0x7ff724ae6e84,160,LdaKeyedProperty.Wide
code-creation,BytecodeHandler,0,286685,0x7ff724ae6f44,160,LdaModuleVariable.Wide
code-creation,BytecodeHandler,0,286695,0x7ff724ae7004,300,StaModuleVariable.Wide
code-creation,BytecodeHandler,0,286704,0x7ff724ae7144,176,StaNamedProperty.Wide
code-creation,BytecodeHandler,0,286713,0x7ff724ae7204,176,StaNamedOwnProperty.Wide
code-creation,BytecodeHandler,0,286723,0x7ff724ae72c4,168,StaKeyedProperty.Wide
code-creation,BytecodeHandler,0,286732,0x7ff724ae7384,168,StaInArrayLiteral.Wide
code-creation,BytecodeHandler,0,286742,0x7ff724ae7444,200,StaDataPropertyInLiteral.Wide
code-creation,BytecodeHandler,0,286752,0x7ff724ae7524,164,CollectTypeProfile.Wide
code-creation,BytecodeHandler,0,286761,0x7ff724ae75e4,984,Add.Wide
code-creation,BytecodeHandler,0,286770,0x7ff724ae79c4,1020,Sub.Wide
code-creation,BytecodeHandler,0,286779,0x7ff724ae7dc4,972,Mul.Wide
code-creation,BytecodeHandler,0,286788,0x7ff724ae81a4,988,Div.Wide
code-creation,BytecodeHandler,0,286796,0x7ff724ae8584,916,Mod.Wide
code-creation,BytecodeHandler,0,286805,0x7ff724ae8924,988,Exp.Wide
code-creation,BytecodeHandler,0,286814,0x7ff724ae8d04,904,BitwiseOr.Wide
code-creation,BytecodeHandler,0,286823,0x7ff724ae90a4,920,BitwiseXor.Wide
code-creation,BytecodeHandler,0,286832,0x7ff724ae9444,920,BitwiseAnd.Wide
code-creation,BytecodeHandler,0,286841,0x7ff724ae97e4,932,ShiftLeft.Wide
code-creation,BytecodeHandler,0,286850,0x7ff724ae9ba4,932,ShiftRight.Wide
code-creation,BytecodeHandler,0,286859,0x7ff724ae9f64,1052,ShiftRightLogical.Wide
code-creation,BytecodeHandler,0,286869,0x7ff724aea384,916,AddSmi.Wide
code-creation,BytecodeHandler,0,286878,0x7ff724aea724,960,SubSmi.Wide
code-creation,BytecodeHandler,0,286887,0x7ff724aeab04,912,MulSmi.Wide
code-creation,BytecodeHandler,0,286896,0x7ff724aeaea4,920,DivSmi.Wide
code-creation,BytecodeHandler,0,286904,0x7ff724aeb244,816,ModSmi.Wide
code-creation,BytecodeHandler,0,286913,0x7ff724aeb584,872,ExpSmi.Wide
code-creation,BytecodeHandler,0,286922,0x7ff724aeb904,496,BitwiseOrSmi.Wide
code-creation,BytecodeHandler,0,286932,0x7ff724aebb04,496,BitwiseXorSmi.Wide
code-creation,BytecodeHandler,0,286941,0x7ff724aebd04,496,BitwiseAndSmi.Wide
code-creation,BytecodeHandler,0,286950,0x7ff724aebf04,496,ShiftLeftSmi.Wide
code-creation,BytecodeHandler,0,286960,0x7ff724aec104,496,ShiftRightSmi.Wide
code-creation,BytecodeHandler,0,286969,0x7ff724aec304,648,ShiftRightLogicalSmi.Wide
code-creation,BytecodeHandler,0,286979,0x7ff724aec5a4,616,Inc.Wide
code-creation,BytecodeHandler,0,286987,0x7ff724aec824,616,Dec.Wide
code-creation,BytecodeHandler,0,286996,0x7ff724aecaa4,648,Negate.Wide
code-creation,BytecodeHandler,0,287005,0x7ff724aecd44,492,BitwiseNot.Wide
code-creation,BytecodeHandler,0,287014,0x7ff724aecf44,124,DeletePropertyStrict.Wide
code-creation,BytecodeHandler,0,287024,0x7ff724aecfc4,116,DeletePropertySloppy.Wide
code-creation,BytecodeHandler,0,287033,0x7ff724aed044,40,GetSuperConstructor.Wide
code-creation,BytecodeHandler,0,287043,0x7ff724aed084,1136,CallAnyReceiver.Wide
code-creation,BytecodeHandler,0,287053,0x7ff724aed504,1136,CallProperty.Wide
code-creation,BytecodeHandler,0,287062,0x7ff724aed984,1016,CallProperty0.Wide
code-creation,BytecodeHandler,0,287073,0x7ff724aedd84,1032,CallProperty1.Wide
code-creation,BytecodeHandler,0,287084,0x7ff724aee1a4,1044,CallProperty2.Wide
code-creation,BytecodeHandler,0,287093,0x7ff724aee5c4,1020,CallUndefinedReceiver.Wide
code-creation,BytecodeHandler,0,287103,0x7ff724aee9c4,1052,CallUndefinedReceiver0.Wide
code-creation,BytecodeHandler,0,287119,0x7ff724aeede4,1024,CallUndefinedReceiver1.Wide
code-creation,BytecodeHandler,0,287129,0x7ff724aef204,1044,CallUndefinedReceiver2.Wide
code-creation,BytecodeHandler,0,287139,0x7ff724aef624,1136,CallWithSpread.Wide
code-creation,BytecodeHandler,0,287148,0x7ff724aefaa4,128,CallRuntime.Wide
code-creation,BytecodeHandler,0,287157,0x7ff724aefb44,168,CallRuntimeForPair.Wide
code-creation,BytecodeHandler,0,287167,0x7ff724aefc04,84,CallJSRuntime.Wide
code-creation,BytecodeHandler,0,287176,0x7ff724aefc64,1240,InvokeIntrinsic.Wide
code-creation,BytecodeHandler,0,287186,0x7ff724af0144,968,Construct.Wide
code-creation,BytecodeHandler,0,287195,0x7ff724af0524,476,ConstructWithSpread.Wide
code-creation,BytecodeHandler,0,287204,0x7ff724af0704,1964,TestEqual.Wide
code-creation,BytecodeHandler,0,287214,0x7ff724af0ec4,1068,TestEqualStrict.Wide
code-creation,BytecodeHandler,0,287223,0x7ff724af1304,1512,TestLessThan.Wide
code-creation,BytecodeHandler,0,287232,0x7ff724af1904,1512,TestGreaterThan.Wide
code-creation,BytecodeHandler,0,287242,0x7ff724af1f04,1512,TestLessThanOrEqual.Wide
code-creation,BytecodeHandler,0,287251,0x7ff724af2504,1512,TestGreaterThanOrEqual.Wide
code-creation,BytecodeHandler,0,287261,0x7ff724af2b04,864,TestInstanceOf.Wide
code-creation,BytecodeHandler,0,287270,0x7ff724af2e84,160,TestIn.Wide
code-creation,BytecodeHandler,0,287279,0x7ff724af2f44,116,ToName.Wide
code-creation,BytecodeHandler,0,287288,0x7ff724af2fc4,216,ToNumber.Wide
code-creation,BytecodeHandler,0,287297,0x7ff724af30a4,236,ToNumeric.Wide
code-creation,BytecodeHandler,0,287306,0x7ff724af31a4,116,ToObject.Wide
code-creation,BytecodeHandler,0,287316,0x7ff724af3224,404,CreateRegExpLiteral.Wide
code-creation,BytecodeHandler,0,287325,0x7ff724af33c4,1376,CreateArrayLiteral.Wide
code-creation,BytecodeHandler,0,287335,0x7ff724af3944,788,CreateEmptyArrayLiteral.Wide
code-creation,BytecodeHandler,0,287344,0x7ff724af3c64,2040,CreateObjectLiteral.Wide
code-creation,BytecodeHandler,0,287354,0x7ff724af4464,172,CloneObject.Wide
code-creation,BytecodeHandler,0,287363,0x7ff724af4524,164,GetTemplateObject.Wide
code-creation,BytecodeHandler,0,287373,0x7ff724af45e4,320,CreateClosure.Wide
code-creation,BytecodeHandler,0,287384,0x7ff724af4744,124,CreateBlockContext.Wide
code-creation,BytecodeHandler,0,287393,0x7ff724af47c4,136,CreateCatchContext.Wide
code-creation,BytecodeHandler,0,287403,0x7ff724af4864,256,CreateFunctionContext.Wide
code-creation,BytecodeHandler,0,287412,0x7ff724af4984,256,CreateEvalContext.Wide
code-creation,BytecodeHandler,0,287422,0x7ff724af4aa4,136,CreateWithContext.Wide
code-creation,BytecodeHandler,0,287431,0x7ff724af4b44,440,JumpLoop.Wide
code-creation,BytecodeHandler,0,287440,0x7ff724af4d04,44,Jump.Wide
code-creation,BytecodeHandler,0,287449,0x7ff724af4d44,56,JumpConstant.Wide
code-creation,BytecodeHandler,0,287458,0x7ff724af4d84,80,JumpIfNullConstant.Wide
code-creation,BytecodeHandler,0,287468,0x7ff724af4de4,80,JumpIfNotNullConstant.Wide
code-creation,BytecodeHandler,0,287477,0x7ff724af4e44,80,JumpIfUndefinedConstant.Wide
code-creation,BytecodeHandler,0,287487,0x7ff724af4ea4,80,JumpIfNotUndefinedConstant.Wide
code-creation,BytecodeHandler,0,287497,0x7ff724af4f04,84,JumpIfUndefinedOrNullConstant.Wide
code-creation,BytecodeHandler,0,287507,0x7ff724af4f64,80,JumpIfTrueConstant.Wide
code-creation,BytecodeHandler,0,287516,0x7ff724af4fc4,80,JumpIfFalseConstant.Wide
code-creation,BytecodeHandler,0,287525,0x7ff724af5024,88,JumpIfJSReceiverConstant.Wide
code-creation,BytecodeHandler,0,287535,0x7ff724af5084,152,JumpIfToBooleanTrueConstant.Wide
code-creation,BytecodeHandler,0,287545,0x7ff724af5124,152,JumpIfToBooleanFalseConstant.Wide
code-creation,BytecodeHandler,0,287558,0x7ff724af51c4,136,JumpIfToBooleanTrue.Wide
code-creation,BytecodeHandler,0,287569,0x7ff724af5264,136,JumpIfToBooleanFalse.Wide
code-creation,BytecodeHandler,0,287578,0x7ff724af5304,64,JumpIfTrue.Wide
code-creation,BytecodeHandler,0,287588,0x7ff724af5364,64,JumpIfFalse.Wide
code-creation,BytecodeHandler,0,287597,0x7ff724af53c4,64,JumpIfNull.Wide
code-creation,BytecodeHandler,0,287606,0x7ff724af5424,64,JumpIfNotNull.Wide
code-creation,BytecodeHandler,0,287616,0x7ff724af5484,64,JumpIfUndefined.Wide
code-creation,BytecodeHandler,0,287626,0x7ff724af54e4,64,JumpIfNotUndefined.Wide
code-creation,BytecodeHandler,0,287635,0x7ff724af5544,72,JumpIfUndefinedOrNull.Wide
code-creation,BytecodeHandler,0,287646,0x7ff724af55a4,76,JumpIfJSReceiver.Wide
code-creation,BytecodeHandler,0,287655,0x7ff724af5604,108,SwitchOnSmiNoFeedback.Wide
code-creation,BytecodeHandler,0,287665,0x7ff724af5684,468,ForInEnumerate.Wide
code-creation,BytecodeHandler,0,287674,0x7ff724af5864,252,ForInPrepare.Wide
code-creation,BytecodeHandler,0,287683,0x7ff724af5964,60,ForInContinue.Wide
code-creation,BytecodeHandler,0,287692,0x7ff724af59a4,260,ForInNext.Wide
code-creation,BytecodeHandler,0,287701,0x7ff724af5ac4,48,ForInStep.Wide
code-creation,BytecodeHandler,0,287710,0x7ff724af5b04,156,ThrowReferenceErrorIfHole.Wide
code-creation,BytecodeHandler,0,287720,0x7ff724af5ba4,160,ThrowIfNotSuperConstructor.Wide
code-creation,BytecodeHandler,0,287730,0x7ff724af5c64,120,SwitchOnGeneratorState.Wide
code-creation,BytecodeHandler,0,287739,0x7ff724af5ce4,516,SuspendGenerator.Wide
code-creation,BytecodeHandler,0,287749,0x7ff724af5f04,128,ResumeGenerator.Wide
code-creation,BytecodeHandler,0,287758,0x7ff724af5fa4,156,GetIterator.Wide
code-creation,BytecodeHandler,0,287767,0x7ff724af6044,128,IncBlockCounter.Wide
code-creation,BytecodeHandler,0,287776,0x7ff724af60e4,56,Abort.Wide
code-creation,BytecodeHandler,0,287792,0x7ff724af6124,108,DebugBreak1.ExtraWide
code-creation,BytecodeHandler,0,287801,0x7ff724af61a4,108,DebugBreak2.ExtraWide
code-creation,BytecodeHandler,0,287811,0x7ff724af6224,108,DebugBreak3.ExtraWide
code-creation,BytecodeHandler,0,287820,0x7ff724af62a4,108,DebugBreak4.ExtraWide
code-creation,BytecodeHandler,0,287829,0x7ff724af6324,108,DebugBreak5.ExtraWide
code-creation,BytecodeHandler,0,287839,0x7ff724af63a4,108,DebugBreak6.ExtraWide
code-creation,BytecodeHandler,0,287848,0x7ff724af6424,32,Ldar.ExtraWide
code-creation,BytecodeHandler,0,287857,0x7ff724af6464,28,LdaSmi.ExtraWide
code-creation,BytecodeHandler,0,287867,0x7ff724af6484,32,LdaConstant.ExtraWide
code-creation,BytecodeHandler,0,287876,0x7ff724af64c4,88,LdaContextSlot.ExtraWide
code-creation,BytecodeHandler,0,287886,0x7ff724af6524,88,LdaImmutableContextSlot.ExtraWide
code-creation,BytecodeHandler,0,287895,0x7ff724af6584,48,LdaCurrentContextSlot.ExtraWide
code-creation,BytecodeHandler,0,287905,0x7ff724af65c4,48,LdaImmutableCurrentContextSlot.ExtraWide
code-creation,BytecodeHandler,0,287915,0x7ff724af6604,28,Star.ExtraWide
code-creation,BytecodeHandler,0,287924,0x7ff724af6624,40,Mov.ExtraWide
code-creation,BytecodeHandler,0,287933,0x7ff724af6664,36,PushContext.ExtraWide
code-creation,BytecodeHandler,0,287942,0x7ff724af66a4,32,PopContext.ExtraWide
code-creation,BytecodeHandler,0,287952,0x7ff724af66e4,48,TestReferenceEqual.ExtraWide
code-creation,BytecodeHandler,0,287961,0x7ff724af6724,4656,LdaGlobal.ExtraWide
code-creation,BytecodeHandler,0,287970,0x7ff724af7964,4592,LdaGlobalInsideTypeof.ExtraWide
code-creation,BytecodeHandler,0,287980,0x7ff724af8b64,168,StaGlobal.ExtraWide
code-creation,BytecodeHandler,0,287990,0x7ff724af8c24,156,StaContextSlot.ExtraWide
code-creation,BytecodeHandler,0,287999,0x7ff724af8cc4,116,StaCurrentContextSlot.ExtraWide
code-creation,BytecodeHandler,0,288009,0x7ff724af8d44,128,LdaLookupSlot.ExtraWide
code-creation,BytecodeHandler,0,288018,0x7ff724af8de4,240,LdaLookupContextSlot.ExtraWide
code-creation,BytecodeHandler,0,288028,0x7ff724af8ee4,4836,LdaLookupGlobalSlot.ExtraWide
code-creation,BytecodeHandler,0,288038,0x7ff724afa1e4,128,LdaLookupSlotInsideTypeof.ExtraWide
code-creation,BytecodeHandler,0,288050,0x7ff724afa284,240,LdaLookupContextSlotInsideTypeof.ExtraWide
code-creation,BytecodeHandler,0,288061,0x7ff724afa384,4800,LdaLookupGlobalSlotInsideTypeof.ExtraWide
code-creation,BytecodeHandler,0,288071,0x7ff724afb664,220,StaLookupSlot.ExtraWide
code-creation,BytecodeHandler,0,288081,0x7ff724afb744,5196,LdaNamedProperty.ExtraWide
code-creation,BytecodeHandler,0,288090,0x7ff724afcba4,184,LdaNamedPropertyFromSuper.ExtraWide
code-creation,BytecodeHandler,0,288100,0x7ff724afcc64,156,LdaKeyedProperty.ExtraWide
code-creation,BytecodeHandler,0,288110,0x7ff724afcd04,160,LdaModuleVariable.ExtraWide
code-creation,BytecodeHandler,0,288119,0x7ff724afcdc4,296,StaModuleVariable.ExtraWide
code-creation,BytecodeHandler,0,288129,0x7ff724afcf04,172,StaNamedProperty.ExtraWide
code-creation,BytecodeHandler,0,288138,0x7ff724afcfc4,172,StaNamedOwnProperty.ExtraWide
code-creation,BytecodeHandler,0,288148,0x7ff724afd084,168,StaKeyedProperty.ExtraWide
code-creation,BytecodeHandler,0,288157,0x7ff724afd144,168,StaInArrayLiteral.ExtraWide
code-creation,BytecodeHandler,0,288167,0x7ff724afd204,196,StaDataPropertyInLiteral.ExtraWide
code-creation,BytecodeHandler,0,288177,0x7ff724afd2e4,164,CollectTypeProfile.ExtraWide
code-creation,BytecodeHandler,0,288186,0x7ff724afd3a4,980,Add.ExtraWide
code-creation,BytecodeHandler,0,288195,0x7ff724afd784,1016,Sub.ExtraWide
code-creation,BytecodeHandler,0,288204,0x7ff724afdb84,972,Mul.ExtraWide
code-creation,BytecodeHandler,0,288213,0x7ff724afdf64,988,Div.ExtraWide
code-creation,BytecodeHandler,0,288222,0x7ff724afe344,916,Mod.ExtraWide
code-creation,BytecodeHandler,0,288231,0x7ff724afe6e4,984,Exp.ExtraWide
code-creation,BytecodeHandler,0,288240,0x7ff724afeac4,904,BitwiseOr.ExtraWide
code-creation,BytecodeHandler,0,288249,0x7ff724afee64,916,BitwiseXor.ExtraWide
code-creation,BytecodeHandler,0,288258,0x7ff724aff204,916,BitwiseAnd.ExtraWide
code-creation,BytecodeHandler,0,288268,0x7ff724aff5a4,928,ShiftLeft.ExtraWide
code-creation,BytecodeHandler,0,288277,0x7ff724aff964,928,ShiftRight.ExtraWide
code-creation,BytecodeHandler,0,288286,0x7ff724affd24,1048,ShiftRightLogical.ExtraWide
code-creation,BytecodeHandler,0,288296,0x7ff724b00144,916,AddSmi.ExtraWide
code-creation,BytecodeHandler,0,288305,0x7ff724b004e4,960,SubSmi.ExtraWide
code-creation,BytecodeHandler,0,288314,0x7ff724b008c4,912,MulSmi.ExtraWide
code-creation,BytecodeHandler,0,288324,0x7ff724b00c64,916,DivSmi.ExtraWide
code-creation,BytecodeHandler,0,288333,0x7ff724b01004,816,ModSmi.ExtraWide
code-creation,BytecodeHandler,0,288342,0x7ff724b01344,872,ExpSmi.ExtraWide
code-creation,BytecodeHandler,0,288351,0x7ff724b016c4,492,BitwiseOrSmi.ExtraWide
code-creation,BytecodeHandler,0,288361,0x7ff724b018c4,492,BitwiseXorSmi.ExtraWide
code-creation,BytecodeHandler,0,288370,0x7ff724b01ac4,492,BitwiseAndSmi.ExtraWide
code-creation,BytecodeHandler,0,288380,0x7ff724b01cc4,492,ShiftLeftSmi.ExtraWide
code-creation,BytecodeHandler,0,288389,0x7ff724b01ec4,492,ShiftRightSmi.ExtraWide
code-creation,BytecodeHandler,0,288399,0x7ff724b020c4,644,ShiftRightLogicalSmi.ExtraWide
code-creation,BytecodeHandler,0,288408,0x7ff724b02364,616,Inc.ExtraWide
code-creation,BytecodeHandler,0,288417,0x7ff724b025e4,616,Dec.ExtraWide
code-creation,BytecodeHandler,0,288426,0x7ff724b02864,644,Negate.ExtraWide
code-creation,BytecodeHandler,0,288442,0x7ff724b02b04,488,BitwiseNot.ExtraWide
code-creation,BytecodeHandler,0,288451,0x7ff724b02d04,124,DeletePropertyStrict.ExtraWide
code-creation,BytecodeHandler,0,288461,0x7ff724b02d84,116,DeletePropertySloppy.ExtraWide
code-creation,BytecodeHandler,0,288471,0x7ff724b02e04,36,GetSuperConstructor.ExtraWide
code-creation,BytecodeHandler,0,288480,0x7ff724b02e44,1128,CallAnyReceiver.ExtraWide
code-creation,BytecodeHandler,0,288490,0x7ff724b032c4,1128,CallProperty.ExtraWide
code-creation,BytecodeHandler,0,288499,0x7ff724b03744,1012,CallProperty0.ExtraWide
code-creation,BytecodeHandler,0,288509,0x7ff724b03b44,1024,CallProperty1.ExtraWide
code-creation,BytecodeHandler,0,288518,0x7ff724b03f64,1036,CallProperty2.ExtraWide
code-creation,BytecodeHandler,0,288530,0x7ff724b04384,1016,CallUndefinedReceiver.ExtraWide
code-creation,BytecodeHandler,0,288542,0x7ff724b04784,1048,CallUndefinedReceiver0.ExtraWide
code-creation,BytecodeHandler,0,288552,0x7ff724b04ba4,1020,CallUndefinedReceiver1.ExtraWide
code-creation,BytecodeHandler,0,288561,0x7ff724b04fa4,1040,CallUndefinedReceiver2.ExtraWide
code-creation,BytecodeHandler,0,288571,0x7ff724b053c4,1128,CallWithSpread.ExtraWide
code-creation,BytecodeHandler,0,288581,0x7ff724b05844,128,CallRuntime.ExtraWide
code-creation,BytecodeHandler,0,288590,0x7ff724b058e4,164,CallRuntimeForPair.ExtraWide
code-creation,BytecodeHandler,0,288600,0x7ff724b059a4,80,CallJSRuntime.ExtraWide
code-creation,BytecodeHandler,0,288609,0x7ff724b05a04,1240,InvokeIntrinsic.ExtraWide
code-creation,BytecodeHandler,0,288619,0x7ff724b05ee4,964,Construct.ExtraWide
code-creation,BytecodeHandler,0,288628,0x7ff724b062c4,472,ConstructWithSpread.ExtraWide
code-creation,BytecodeHandler,0,288638,0x7ff724b064a4,1964,TestEqual.ExtraWide
code-creation,BytecodeHandler,0,288648,0x7ff724b06c64,1068,TestEqualStrict.ExtraWide
code-creation,BytecodeHandler,0,288658,0x7ff724b070a4,1508,TestLessThan.ExtraWide
code-creation,BytecodeHandler,0,288667,0x7ff724b076a4,1508,TestGreaterThan.ExtraWide
code-creation,BytecodeHandler,0,288676,0x7ff724b07ca4,1508,TestLessThanOrEqual.ExtraWide
code-creation,BytecodeHandler,0,288686,0x7ff724b082a4,1508,TestGreaterThanOrEqual.ExtraWide
code-creation,BytecodeHandler,0,288696,0x7ff724b088a4,864,TestInstanceOf.ExtraWide
code-creation,BytecodeHandler,0,288705,0x7ff724b08c24,156,TestIn.ExtraWide
code-creation,BytecodeHandler,0,288715,0x7ff724b08cc4,116,ToName.ExtraWide
code-creation,BytecodeHandler,0,288724,0x7ff724b08d44,216,ToNumber.ExtraWide
code-creation,BytecodeHandler,0,288733,0x7ff724b08e24,236,ToNumeric.ExtraWide
code-creation,BytecodeHandler,0,288742,0x7ff724b08f24,116,ToObject.ExtraWide
code-creation,BytecodeHandler,0,288752,0x7ff724b08fa4,400,CreateRegExpLiteral.ExtraWide
code-creation,BytecodeHandler,0,288761,0x7ff724b09144,1376,CreateArrayLiteral.ExtraWide
code-creation,BytecodeHandler,0,288771,0x7ff724b096c4,788,CreateEmptyArrayLiteral.ExtraWide
code-creation,BytecodeHandler,0,288781,0x7ff724b099e4,2040,CreateObjectLiteral.ExtraWide
code-creation,BytecodeHandler,0,288790,0x7ff724b0a1e4,168,CloneObject.ExtraWide
code-creation,BytecodeHandler,0,288800,0x7ff724b0a2a4,160,GetTemplateObject.ExtraWide
code-creation,BytecodeHandler,0,288809,0x7ff724b0a364,320,CreateClosure.ExtraWide
code-creation,BytecodeHandler,0,288819,0x7ff724b0a4c4,124,CreateBlockContext.ExtraWide
code-creation,BytecodeHandler,0,288828,0x7ff724b0a544,132,CreateCatchContext.ExtraWide
code-creation,BytecodeHandler,0,288838,0x7ff724b0a5e4,256,CreateFunctionContext.ExtraWide
code-creation,BytecodeHandler,0,288847,0x7ff724b0a704,256,CreateEvalContext.ExtraWide
code-creation,BytecodeHandler,0,288857,0x7ff724b0a824,132,CreateWithContext.ExtraWide
code-creation,BytecodeHandler,0,288866,0x7ff724b0a8c4,436,JumpLoop.ExtraWide
code-creation,BytecodeHandler,0,288875,0x7ff724b0aa84,44,Jump.ExtraWide
code-creation,BytecodeHandler,0,288885,0x7ff724b0aac4,56,JumpConstant.ExtraWide
code-creation,BytecodeHandler,0,288897,0x7ff724b0ab04,76,JumpIfNullConstant.ExtraWide
code-creation,BytecodeHandler,0,288908,0x7ff724b0ab64,76,JumpIfNotNullConstant.ExtraWide
code-creation,BytecodeHandler,0,288918,0x7ff724b0abc4,76,JumpIfUndefinedConstant.ExtraWide
code-creation,BytecodeHandler,0,288927,0x7ff724b0ac24,76,JumpIfNotUndefinedConstant.ExtraWide
code-creation,BytecodeHandler,0,288937,0x7ff724b0ac84,84,JumpIfUndefinedOrNullConstant.ExtraWide
code-creation,BytecodeHandler,0,288947,0x7ff724b0ace4,76,JumpIfTrueConstant.ExtraWide
code-creation,BytecodeHandler,0,288957,0x7ff724b0ad44,76,JumpIfFalseConstant.ExtraWide
code-creation,BytecodeHandler,0,288966,0x7ff724b0ada4,88,JumpIfJSReceiverConstant.ExtraWide
code-creation,BytecodeHandler,0,288976,0x7ff724b0ae04,148,JumpIfToBooleanTrueConstant.ExtraWide
code-creation,BytecodeHandler,0,288986,0x7ff724b0aea4,148,JumpIfToBooleanFalseConstant.ExtraWide
code-creation,BytecodeHandler,0,288998,0x7ff724b0af44,136,JumpIfToBooleanTrue.ExtraWide
code-creation,BytecodeHandler,0,289009,0x7ff724b0afe4,136,JumpIfToBooleanFalse.ExtraWide
code-creation,BytecodeHandler,0,289019,0x7ff724b0b084,64,JumpIfTrue.ExtraWide
code-creation,BytecodeHandler,0,289028,0x7ff724b0b0e4,64,JumpIfFalse.ExtraWide
code-creation,BytecodeHandler,0,289037,0x7ff724b0b144,64,JumpIfNull.ExtraWide
code-creation,BytecodeHandler,0,289053,0x7ff724b0b1a4,64,JumpIfNotNull.ExtraWide
code-creation,BytecodeHandler,0,289063,0x7ff724b0b204,64,JumpIfUndefined.ExtraWide
code-creation,BytecodeHandler,0,289072,0x7ff724b0b264,64,JumpIfNotUndefined.ExtraWide
code-creation,BytecodeHandler,0,289081,0x7ff724b0b2c4,68,JumpIfUndefinedOrNull.ExtraWide
code-creation,BytecodeHandler,0,289091,0x7ff724b0b324,72,JumpIfJSReceiver.ExtraWide
code-creation,BytecodeHandler,0,289101,0x7ff724b0b384,108,SwitchOnSmiNoFeedback.ExtraWide
code-creation,BytecodeHandler,0,289110,0x7ff724b0b404,464,ForInEnumerate.ExtraWide
code-creation,BytecodeHandler,0,289120,0x7ff724b0b5e4,252,ForInPrepare.ExtraWide
code-creation,BytecodeHandler,0,289129,0x7ff724b0b6e4,56,ForInContinue.ExtraWide
code-creation,BytecodeHandler,0,289138,0x7ff724b0b724,256,ForInNext.ExtraWide
code-creation,BytecodeHandler,0,289147,0x7ff724b0b844,44,ForInStep.ExtraWide
code-creation,BytecodeHandler,0,289157,0x7ff724b0b884,156,ThrowReferenceErrorIfHole.ExtraWide
code-creation,BytecodeHandler,0,289167,0x7ff724b0b924,160,ThrowIfNotSuperConstructor.ExtraWide
code-creation,BytecodeHandler,0,289177,0x7ff724b0b9e4,120,SwitchOnGeneratorState.ExtraWide
code-creation,BytecodeHandler,0,289186,0x7ff724b0ba64,512,SuspendGenerator.ExtraWide
code-creation,BytecodeHandler,0,289196,0x7ff724b0bc84,124,ResumeGenerator.ExtraWide
code-creation,BytecodeHandler,0,289205,0x7ff724b0bd04,152,GetIterator.ExtraWide
code-creation,BytecodeHandler,0,289215,0x7ff724b0bda4,124,IncBlockCounter.ExtraWide
code-creation,BytecodeHandler,0,289224,0x7ff724b0be24,56,Abort.ExtraWide
new,MemoryChunk,0x2e02ca40000,262144
new,MemoryChunk,0x8802980000,262144
tick,0x7ff724566dbc,291712,0,0x0,5
new,MemoryChunk,0x32a8b00000,262144
new,MemoryChunk,0x3979d380000,262144
code-creation,Eval,10,295095,0x3979d3bee8e,5, node:internal/main/run_main_module:1:1,0x3979d3bed48,~
script-source,94,node:internal/main/run_main_module,'use strict';\x0d\n\x0d\nconst {\x0d\n  prepareMainThreadExecution\x0d\n} = require('internal/bootstrap/pre_execution');\x0d\n\x0d\nprepareMainThreadExecution(true);\x0d\n\x0d\nmarkBootstrapComplete();\x0d\n\x0d\n// Note: this loads the module through the ESM loader if the module is\x0d\n// determined to be an ES module. This hangs from the CJS module loader\x0d\n// because we currently allow monkey-patching of the module loaders\x0d\n// in the preloaded scripts through require('module').\x0d\n// runMain here might be monkey-patched by users in --require.\x0d\n// XXX: the monkey-patchability here should probably be deprecated.\x0d\nrequire('internal/modules/cjs/loader').Module.runMain(process.argv[1]);\x0d\n
code-source-info,0x3979d3bee8e,94,0,649,C0O0C4O649,,
code-creation,Function,10,295199,0x3979d3bef36,58, node:internal/main/run_main_module:1:1,0x3979d3bee08,~
code-source-info,0x3979d3bef36,94,0,649,C0O60C3O60C8O28C13O108C15O108C19O145C22O576C25O576C30O614C35O621C40O638C47O642C51O622C57O648,,
code-creation,LazyCompile,10,295580,0x3979d3bf176,76,nativeModuleRequire node:internal/bootstrap/loaders:332:29,0x13fcdd0fd30,~
script-source,9,node:internal/bootstrap/loaders,// This file creates the internal module & binding loaders used by built-in\x0d\n// modules. In contrast\x2C user land modules are loaded using\x0d\n// lib/internal/modules/cjs/loader.js (CommonJS Modules) or\x0d\n// lib/internal/modules/esm/* (ES Modules).\x0d\n//\x0d\n// This file is compiled and run by node.cc before bootstrap/node.js\x0d\n// was called\x2C therefore the loaders are bootstrapped before we start to\x0d\n// actually bootstrap Node.js. It creates the following objects:\x0d\n//\x0d\n// C++ binding loaders:\x0d\n// - process.binding(): the legacy C++ binding loader\x2C accessible from user land\x0d\n//   because it is an object attached to the global process object.\x0d\n//   These C++ bindings are created using NODE_BUILTIN_MODULE_CONTEXT_AWARE()\x0d\n//   and have their nm_flags set to NM_F_BUILTIN. We do not make any guarantees\x0d\n//   about the stability of these bindings\x2C but still have to take care of\x0d\n//   compatibility issues caused by them from time to time.\x0d\n// - process._linkedBinding(): intended to be used by embedders to add\x0d\n//   additional C++ bindings in their applications. These C++ bindings\x0d\n//   can be created using NODE_MODULE_CONTEXT_AWARE_CPP() with the flag\x0d\n//   NM_F_LINKED.\x0d\n// - internalBinding(): the private internal C++ binding loader\x2C inaccessible\x0d\n//   from user land unless through `require('internal/test/binding')`.\x0d\n//   These C++ bindings are created using NODE_MODULE_CONTEXT_AWARE_INTERNAL()\x0d\n//   and have their nm_flags set to NM_F_INTERNAL.\x0d\n//\x0d\n// Internal JavaScript module loader:\x0d\n// - NativeModule: a minimal module system used to load the JavaScript core\x0d\n//   modules found in lib/**/*.js and deps/**/*.js. All core modules are\x0d\n//   compiled into the node binary via node_javascript.cc generated by js2c.py\x2C\x0d\n//   so they can be loaded faster without the cost of I/O. This class makes the\x0d\n//   lib/internal/*\x2C deps/internal/* modules and internalBinding() available by\x0d\n//   default to core modules\x2C and lets the core modules require itself via\x0d\n//   require('internal/bootstrap/loaders') even when this file is not written in\x0d\n//   CommonJS style.\x0d\n//\x0d\n// Other objects:\x0d\n// - process.moduleLoadList: an array recording the bindings and the modules\x0d\n//   loaded in the process and the order in which they are loaded.\x0d\n\x0d\n'use strict';\x0d\n\x0d\n// This file is compiled as if it's wrapped in a function with arguments\x0d\n// passed by node::RunBootstrapping()\x0d\n/* global process\x2C getLinkedBinding\x2C getInternalBinding\x2C primordials */\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeMap\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  Error\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectKeys\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  ReflectGet\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeSet\x2C\x0d\n  String\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n  TypeError\x2C\x0d\n} = primordials;\x0d\n\x0d\n// Set up process.moduleLoadList.\x0d\nconst moduleLoadList = [];\x0d\nObjectDefineProperty(process\x2C 'moduleLoadList'\x2C {\x0d\n  value: moduleLoadList\x2C\x0d\n  configurable: true\x2C\x0d\n  enumerable: true\x2C\x0d\n  writable: false\x0d\n});\x0d\n\x0d\n\x0d\n// internalBindingAllowlist contains the name of internalBinding modules\x0d\n// that are allowed for access via process.binding()... This is used\x0d\n// to provide a transition path for modules that are being moved over to\x0d\n// internalBinding.\x0d\nconst internalBindingAllowlist = new SafeSet([\x0d\n  'async_wrap'\x2C\x0d\n  'buffer'\x2C\x0d\n  'cares_wrap'\x2C\x0d\n  'config'\x2C\x0d\n  'constants'\x2C\x0d\n  'contextify'\x2C\x0d\n  'crypto'\x2C\x0d\n  'fs'\x2C\x0d\n  'fs_event_wrap'\x2C\x0d\n  'http_parser'\x2C\x0d\n  'icu'\x2C\x0d\n  'inspector'\x2C\x0d\n  'js_stream'\x2C\x0d\n  'natives'\x2C\x0d\n  'os'\x2C\x0d\n  'pipe_wrap'\x2C\x0d\n  'process_wrap'\x2C\x0d\n  'signal_wrap'\x2C\x0d\n  'spawn_sync'\x2C\x0d\n  'stream_wrap'\x2C\x0d\n  'tcp_wrap'\x2C\x0d\n  'tls_wrap'\x2C\x0d\n  'tty_wrap'\x2C\x0d\n  'udp_wrap'\x2C\x0d\n  'url'\x2C\x0d\n  'util'\x2C\x0d\n  'uv'\x2C\x0d\n  'v8'\x2C\x0d\n  'zlib'\x2C\x0d\n]);\x0d\n\x0d\nconst runtimeDeprecatedList = new SafeSet([\x0d\n  'async_wrap'\x2C\x0d\n  'crypto'\x2C\x0d\n  'http_parser'\x2C\x0d\n  'signal_wrap'\x2C\x0d\n  'url'\x2C\x0d\n  'v8'\x2C\x0d\n]);\x0d\n\x0d\nconst legacyWrapperList = new SafeSet([\x0d\n  'util'\x2C\x0d\n]);\x0d\n\x0d\n// Set up process.binding() and process._linkedBinding().\x0d\n{\x0d\n  const bindingObj = ObjectCreate(null);\x0d\n\x0d\n  process.binding = function binding(module) {\x0d\n    module = String(module);\x0d\n    // Deprecated specific process.binding() modules\x2C but not all\x2C allow\x0d\n    // selective fallback to internalBinding for the deprecated ones.\x0d\n    if (internalBindingAllowlist.has(module)) {\x0d\n      if (runtimeDeprecatedList.has(module)) {\x0d\n        runtimeDeprecatedList.delete(module);\x0d\n        process.emitWarning(\x0d\n          `Access to process.binding('${module}') is deprecated.`\x2C\x0d\n          'DeprecationWarning'\x2C\x0d\n          'DEP0111');\x0d\n      }\x0d\n      if (legacyWrapperList.has(module)) {\x0d\n        return nativeModuleRequire('internal/legacy/processbinding')[module]();\x0d\n      }\x0d\n      return internalBinding(module);\x0d\n    }\x0d\n    // eslint-disable-next-line no-restricted-syntax\x0d\n    throw new Error(`No such module: ${module}`);\x0d\n  };\x0d\n\x0d\n  process._linkedBinding = function _linkedBinding(module) {\x0d\n    module = String(module);\x0d\n    let mod = bindingObj[module];\x0d\n    if (typeof mod !== 'object')\x0d\n      mod = bindingObj[module] = getLinkedBinding(module);\x0d\n    return mod;\x0d\n  };\x0d\n}\x0d\n\x0d\n// Set up internalBinding() in the closure.\x0d\n/**\x0d\n * @type {InternalBinding}\x0d\n */\x0d\nlet internalBinding;\x0d\n{\x0d\n  const bindingObj = ObjectCreate(null);\x0d\n  // eslint-disable-next-line no-global-assign\x0d\n  internalBinding = function internalBinding(module) {\x0d\n    let mod = bindingObj[module];\x0d\n    if (typeof mod !== 'object') {\x0d\n      mod = bindingObj[module] = getInternalBinding(module);\x0d\n      ArrayPrototypePush(moduleLoadList\x2C `Internal Binding ${module}`);\x0d\n    }\x0d\n    return mod;\x0d\n  };\x0d\n}\x0d\n\x0d\nconst loaderId = 'internal/bootstrap/loaders';\x0d\nconst {\x0d\n  moduleIds\x2C\x0d\n  compileFunction\x0d\n} = internalBinding('native_module');\x0d\n\x0d\nconst getOwn = (target\x2C property\x2C receiver) => {\x0d\n  return ObjectPrototypeHasOwnProperty(target\x2C property) ?\x0d\n    ReflectGet(target\x2C property\x2C receiver) :\x0d\n    undefined;\x0d\n};\x0d\n\x0d\n/**\x0d\n * An internal abstraction for the built-in JavaScript modules of Node.js.\x0d\n * Be careful not to expose this to user land unless --expose-internals is\x0d\n * used\x2C in which case there is no compatibility guarantee about this class.\x0d\n */\x0d\nclass NativeModule {\x0d\n  /**\x0d\n   * A map from the module IDs to the module instances.\x0d\n   * @type {Map<string\x2C NativeModule>}\x0d\n   */\x0d\n  static map = new SafeMap(\x0d\n    ArrayPrototypeMap(moduleIds\x2C (id) => [id\x2C new NativeModule(id)])\x0d\n  );\x0d\n\x0d\n  constructor(id) {\x0d\n    this.filename = `${id}.js`;\x0d\n    this.id = id;\x0d\n    this.canBeRequiredByUsers = !StringPrototypeStartsWith(id\x2C 'internal/');\x0d\n\x0d\n    // The CJS exports object of the module.\x0d\n    this.exports = {};\x0d\n    // States used to work around circular dependencies.\x0d\n    this.loaded = false;\x0d\n    this.loading = false;\x0d\n\x0d\n    // The following properties are used by the ESM implementation and only\x0d\n    // initialized when the native module is loaded by users.\x0d\n    /**\x0d\n     * The C++ ModuleWrap binding used to interface with the ESM implementation.\x0d\n     * @type {ModuleWrap|undefined}\x0d\n     */\x0d\n    this.module = undefined;\x0d\n    /**\x0d\n     * Exported names for the ESM imports.\x0d\n     * @type {string[]|undefined}\x0d\n     */\x0d\n    this.exportKeys = undefined;\x0d\n  }\x0d\n\x0d\n  // To be called during pre-execution when --expose-internals is on.\x0d\n  // Enables the user-land module loader to access internal modules.\x0d\n  static exposeInternals() {\x0d\n    for (const { 0: id\x2C 1: mod } of NativeModule.map) {\x0d\n      // Do not expose this to user land even with --expose-internals.\x0d\n      if (id !== loaderId) {\x0d\n        mod.canBeRequiredByUsers = true;\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  static exists(id) {\x0d\n    return NativeModule.map.has(id);\x0d\n  }\x0d\n\x0d\n  static canBeRequiredByUsers(id) {\x0d\n    const mod = NativeModule.map.get(id);\x0d\n    return mod && mod.canBeRequiredByUsers;\x0d\n  }\x0d\n\x0d\n  // Used by user-land module loaders to compile and load builtins.\x0d\n  compileForPublicLoader() {\x0d\n    if (!this.canBeRequiredByUsers) {\x0d\n      // No code because this is an assertion against bugs\x0d\n      // eslint-disable-next-line no-restricted-syntax\x0d\n      throw new Error(`Should not compile ${this.id} for public use`);\x0d\n    }\x0d\n    this.compileForInternalLoader();\x0d\n    if (!this.exportKeys) {\x0d\n      // When using --expose-internals\x2C we do not want to reflect the named\x0d\n      // exports from core modules as this can trigger unnecessary getters.\x0d\n      const internal = StringPrototypeStartsWith(this.id\x2C 'internal/');\x0d\n      this.exportKeys = internal ? [] : ObjectKeys(this.exports);\x0d\n    }\x0d\n    this.getESMFacade();\x0d\n    this.syncExports();\x0d\n    return this.exports;\x0d\n  }\x0d\n\x0d\n  getESMFacade() {\x0d\n    if (this.module) return this.module;\x0d\n    const { ModuleWrap } = internalBinding('module_wrap');\x0d\n    const url = `node:${this.id}`;\x0d\n    const nativeModule = this;\x0d\n    const exportsKeys = ArrayPrototypeSlice(this.exportKeys);\x0d\n    ArrayPrototypePush(exportsKeys\x2C 'default');\x0d\n    this.module = new ModuleWrap(\x0d\n      url\x2C undefined\x2C exportsKeys\x2C\x0d\n      function() {\x0d\n        nativeModule.syncExports();\x0d\n        this.setExport('default'\x2C nativeModule.exports);\x0d\n      });\x0d\n    // Ensure immediate sync execution to capture exports now\x0d\n    this.module.instantiate();\x0d\n    this.module.evaluate(-1\x2C false);\x0d\n    return this.module;\x0d\n  }\x0d\n\x0d\n  // Provide named exports for all builtin libraries so that the libraries\x0d\n  // may be imported in a nicer way for ESM users. The default export is left\x0d\n  // as the entire namespace (module.exports) and updates when this function is\x0d\n  // called so that APMs and other behavior are supported.\x0d\n  syncExports() {\x0d\n    const names = this.exportKeys;\x0d\n    if (this.module) {\x0d\n      for (let i = 0; i < names.length; i++) {\x0d\n        const exportName = names[i];\x0d\n        if (exportName === 'default') continue;\x0d\n        this.module.setExport(exportName\x2C\x0d\n                              getOwn(this.exports\x2C exportName\x2C this.exports));\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  compileForInternalLoader() {\x0d\n    if (this.loaded || this.loading) {\x0d\n      return this.exports;\x0d\n    }\x0d\n\x0d\n    const id = this.id;\x0d\n    this.loading = true;\x0d\n\x0d\n    try {\x0d\n      const requireFn = StringPrototypeStartsWith(this.id\x2C 'internal/deps/') ?\x0d\n        requireWithFallbackInDeps : nativeModuleRequire;\x0d\n\x0d\n      const fn = compileFunction(id);\x0d\n      fn(this.exports\x2C requireFn\x2C this\x2C process\x2C internalBinding\x2C primordials);\x0d\n\x0d\n      this.loaded = true;\x0d\n    } finally {\x0d\n      this.loading = false;\x0d\n    }\x0d\n\x0d\n    ArrayPrototypePush(moduleLoadList\x2C `NativeModule ${id}`);\x0d\n    return this.exports;\x0d\n  }\x0d\n}\x0d\n\x0d\n// Think of this as module.exports in this file even though it is not\x0d\n// written in CommonJS style.\x0d\nconst loaderExports = {\x0d\n  internalBinding\x2C\x0d\n  NativeModule\x2C\x0d\n  require: nativeModuleRequire\x0d\n};\x0d\n\x0d\nfunction nativeModuleRequire(id) {\x0d\n  if (id === loaderId) {\x0d\n    return loaderExports;\x0d\n  }\x0d\n\x0d\n  const mod = NativeModule.map.get(id);\x0d\n  // Can't load the internal errors module from here\x2C have to use a raw error.\x0d\n  // eslint-disable-next-line no-restricted-syntax\x0d\n  if (!mod) throw new TypeError(`Missing internal module '${id}'`);\x0d\n  return mod.compileForInternalLoader();\x0d\n}\x0d\n\x0d\n// Allow internal modules from dependencies to require\x0d\n// other modules from dependencies by providing fallbacks.\x0d\nfunction requireWithFallbackInDeps(request) {\x0d\n  if (!NativeModule.map.has(request)) {\x0d\n    request = `internal/deps/${request}`;\x0d\n  }\x0d\n  return nativeModuleRequire(request);\x0d\n}\x0d\n\x0d\n// Pass the exports back to C++ land for C++ internals to use.\x0d\nreturn loaderExports;\x0d\n
code-source-info,0x3979d3bf176,9,10647,11000,C0O10657C2O10668C4O10664C9O10685C13O10706C14O10729C19O10742C24O10746C29O10746C35O10890C37O10900C47O10948C60O10906C65O10900C66O10970C71O10970C75O10997,,
code-creation,LazyCompile,10,296514,0x3979d3bfe86,175,compileForInternalLoader node:internal/bootstrap/loaders:299:27,0x13fcdd0fc60,~
code-source-info,0x3979d3bfe86,9,9827,10410,C0O9846C6O9861C12O9891C16O9899C17O9930C22O9939C23O9952C30O9998C37O10029C45O9998C63O10131C70O10131C75O10167C89O10202C103O10159C108O10242C109O10254C124O10286C126O10299C141O10322C152O10341C160O10373C165O10322C170O10397C174O10405,,
new,MemoryChunk,0x2e2fa680000,262144
code-creation,Eval,10,297179,0x2e2fa681ede,5, node:internal/bootstrap/pre_execution:1:1,0x2e2fa681b48,~
script-source,95,node:internal/bootstrap/pre_execution,'use strict';\x0d\n\x0d\nconst {\x0d\n  NumberParseInt\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeWeakMap\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n  globalThis\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  getOptionValue\x2C\x0d\n  getEmbedderOptions\x2C\x0d\n} = require('internal/options');\x0d\nconst { reconnectZeroFillToggle } = require('internal/buffer');\x0d\n\x0d\nconst { Buffer } = require('buffer');\x0d\nconst { ERR_MANIFEST_ASSERT_INTEGRITY } = require('internal/errors').codes;\x0d\nconst assert = require('internal/assert');\x0d\n\x0d\nfunction prepareMainThreadExecution(expandArgv1 = false) {\x0d\n  // TODO(joyeecheung): this is also necessary for workers when they deserialize\x0d\n  // this toggle from the snapshot.\x0d\n  reconnectZeroFillToggle();\x0d\n\x0d\n  // Patch the process object with legacy properties and normalizations\x0d\n  patchProcessObject(expandArgv1);\x0d\n  setupTraceCategoryState();\x0d\n  setupPerfHooks();\x0d\n  setupInspectorHooks();\x0d\n  setupWarningHandler();\x0d\n\x0d\n  // Resolve the coverage directory to an absolute path\x2C and\x0d\n  // overwrite process.env so that the original path gets passed\x0d\n  // to child processes even when they switch cwd.\x0d\n  if (process.env.NODE_V8_COVERAGE) {\x0d\n    process.env.NODE_V8_COVERAGE =\x0d\n      setupCoverageHooks(process.env.NODE_V8_COVERAGE);\x0d\n  }\x0d\n\x0d\n\x0d\n  setupDebugEnv();\x0d\n\x0d\n  // Print stack trace on `SIGINT` if option `--trace-sigint` presents.\x0d\n  setupStacktracePrinterOnSigint();\x0d\n\x0d\n  // Process initial diagnostic reporting configuration\x2C if present.\x0d\n  initializeReport();\x0d\n  initializeReportSignalHandlers();  // Main-thread-only.\x0d\n\x0d\n  initializeHeapSnapshotSignalHandlers();\x0d\n\x0d\n  // If the process is spawned with env NODE_CHANNEL_FD\x2C it's probably\x0d\n  // spawned by our child_process module\x2C then initialize IPC.\x0d\n  // This attaches some internal event listeners and creates:\x0d\n  // process.send()\x2C process.channel\x2C process.connected\x2C\x0d\n  // process.disconnect().\x0d\n  setupChildProcessIpcChannel();\x0d\n\x0d\n  // Load policy from disk and parse it.\x0d\n  initializePolicy();\x0d\n\x0d\n  // If this is a worker in cluster mode\x2C start up the communication\x0d\n  // channel. This needs to be done before any user code gets executed\x0d\n  // (including preload modules).\x0d\n  initializeClusterIPC();\x0d\n\x0d\n  initializeSourceMapsHandlers();\x0d\n  initializeDeprecations();\x0d\n  initializeWASI();\x0d\n  initializeCJSLoader();\x0d\n  initializeESMLoader();\x0d\n\x0d\n  const CJSLoader = require('internal/modules/cjs/loader');\x0d\n  assert(!CJSLoader.hasLoadedAnyUserCJSModule);\x0d\n  loadPreloadModules();\x0d\n  initializeFrozenIntrinsics();\x0d\n}\x0d\n\x0d\nfunction patchProcessObject(expandArgv1) {\x0d\n  const binding = internalBinding('process_methods');\x0d\n  binding.patchProcessObject(process);\x0d\n\x0d\n  require('internal/process/per_thread').refreshHrtimeBuffer();\x0d\n\x0d\n  ObjectDefineProperty(process\x2C 'argv0'\x2C {\x0d\n    enumerable: true\x2C\x0d\n    configurable: false\x2C\x0d\n    value: process.argv[0]\x0d\n  });\x0d\n  process.argv[0] = process.execPath;\x0d\n\x0d\n  if (expandArgv1 && process.argv[1] &&\x0d\n      !StringPrototypeStartsWith(process.argv[1]\x2C '-')) {\x0d\n    // Expand process.argv[1] into a full path.\x0d\n    const path = require('path');\x0d\n    try {\x0d\n      process.argv[1] = path.resolve(process.argv[1]);\x0d\n    } catch {\x0d\n      // Continue regardless of error.\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // TODO(joyeecheung): most of these should be deprecated and removed\x2C\x0d\n  // except some that we need to be able to mutate during run time.\x0d\n  addReadOnlyProcessAlias('_eval'\x2C '--eval');\x0d\n  addReadOnlyProcessAlias('_print_eval'\x2C '--print');\x0d\n  addReadOnlyProcessAlias('_syntax_check_only'\x2C '--check');\x0d\n  addReadOnlyProcessAlias('_forceRepl'\x2C '--interactive');\x0d\n  addReadOnlyProcessAlias('_preload_modules'\x2C '--require');\x0d\n  addReadOnlyProcessAlias('noDeprecation'\x2C '--no-deprecation');\x0d\n  addReadOnlyProcessAlias('noProcessWarnings'\x2C '--no-warnings');\x0d\n  addReadOnlyProcessAlias('traceProcessWarnings'\x2C '--trace-warnings');\x0d\n  addReadOnlyProcessAlias('throwDeprecation'\x2C '--throw-deprecation');\x0d\n  addReadOnlyProcessAlias('profProcess'\x2C '--prof-process');\x0d\n  addReadOnlyProcessAlias('traceDeprecation'\x2C '--trace-deprecation');\x0d\n  addReadOnlyProcessAlias('_breakFirstLine'\x2C '--inspect-brk'\x2C false);\x0d\n  addReadOnlyProcessAlias('_breakNodeFirstLine'\x2C '--inspect-brk-node'\x2C false);\x0d\n}\x0d\n\x0d\nfunction addReadOnlyProcessAlias(name\x2C option\x2C enumerable = true) {\x0d\n  const value = getOptionValue(option);\x0d\n  if (value) {\x0d\n    ObjectDefineProperty(process\x2C name\x2C {\x0d\n      writable: false\x2C\x0d\n      configurable: true\x2C\x0d\n      enumerable\x2C\x0d\n      value\x0d\n    });\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction setupWarningHandler() {\x0d\n  const {\x0d\n    onWarning\x0d\n  } = require('internal/process/warning');\x0d\n  if (getOptionValue('--warnings') &&\x0d\n    process.env.NODE_NO_WARNINGS !== '1') {\x0d\n    process.on('warning'\x2C onWarning);\x0d\n  }\x0d\n}\x0d\n\x0d\n// Setup User-facing NODE_V8_COVERAGE environment variable that writes\x0d\n// ScriptCoverage to a specified file.\x0d\nfunction setupCoverageHooks(dir) {\x0d\n  const cwd = require('internal/process/execution').tryGetCwd();\x0d\n  const { resolve } = require('path');\x0d\n  const coverageDirectory = resolve(cwd\x2C dir);\x0d\n  const { sourceMapCacheToObject } =\x0d\n    require('internal/source_map/source_map_cache');\x0d\n\x0d\n  if (process.features.inspector) {\x0d\n    internalBinding('profiler').setCoverageDirectory(coverageDirectory);\x0d\n    internalBinding('profiler').setSourceMapCacheGetter(sourceMapCacheToObject);\x0d\n  } else {\x0d\n    process.emitWarning('The inspector is disabled\x2C ' +\x0d\n                        'coverage could not be collected'\x2C\x0d\n                        'Warning');\x0d\n    return '';\x0d\n  }\x0d\n  return coverageDirectory;\x0d\n}\x0d\n\x0d\nfunction setupStacktracePrinterOnSigint() {\x0d\n  if (!getOptionValue('--trace-sigint')) {\x0d\n    return;\x0d\n  }\x0d\n  const { SigintWatchdog } = require('internal/watchdog');\x0d\n\x0d\n  const watchdog = new SigintWatchdog();\x0d\n  watchdog.start();\x0d\n}\x0d\n\x0d\nfunction initializeReport() {\x0d\n  const { report } = require('internal/process/report');\x0d\n  ObjectDefineProperty(process\x2C 'report'\x2C {\x0d\n    enumerable: false\x2C\x0d\n    configurable: true\x2C\x0d\n    get() {\x0d\n      return report;\x0d\n    }\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction setupDebugEnv() {\x0d\n  require('internal/util/debuglog').initializeDebugEnv(process.env.NODE_DEBUG);\x0d\n  if (getOptionValue('--expose-internals')) {\x0d\n    require('internal/bootstrap/loaders').NativeModule.exposeInternals();\x0d\n  }\x0d\n}\x0d\n\x0d\n// This has to be called after initializeReport() is called\x0d\nfunction initializeReportSignalHandlers() {\x0d\n  const { addSignalHandler } = require('internal/process/report');\x0d\n\x0d\n  addSignalHandler();\x0d\n}\x0d\n\x0d\nfunction initializeHeapSnapshotSignalHandlers() {\x0d\n  const signal = getOptionValue('--heapsnapshot-signal');\x0d\n\x0d\n  if (!signal)\x0d\n    return;\x0d\n\x0d\n  require('internal/validators').validateSignalName(signal);\x0d\n  const { writeHeapSnapshot } = require('v8');\x0d\n\x0d\n  process.on(signal\x2C () => {\x0d\n    writeHeapSnapshot();\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction setupTraceCategoryState() {\x0d\n  const { isTraceCategoryEnabled } = internalBinding('trace_events');\x0d\n  const { toggleTraceCategoryState } = require('internal/process/per_thread');\x0d\n  toggleTraceCategoryState(isTraceCategoryEnabled('node.async_hooks'));\x0d\n}\x0d\n\x0d\nfunction setupPerfHooks() {\x0d\n  require('internal/perf/performance').refreshTimeOrigin();\x0d\n  require('internal/perf/utils').refreshTimeOrigin();\x0d\n}\x0d\n\x0d\nfunction setupInspectorHooks() {\x0d\n  // If Debugger.setAsyncCallStackDepth is sent during bootstrap\x2C\x0d\n  // we cannot immediately call into JS to enable the hooks\x2C which could\x0d\n  // interrupt the JS execution of bootstrap. So instead we save the\x0d\n  // notification in the inspector agent if it's sent in the middle of\x0d\n  // bootstrap\x2C and process the notification later here.\x0d\n  if (internalBinding('config').hasInspector) {\x0d\n    const {\x0d\n      enable\x2C\x0d\n      disable\x0d\n    } = require('internal/inspector_async_hook');\x0d\n    internalBinding('inspector').registerAsyncHook(enable\x2C disable);\x0d\n  }\x0d\n}\x0d\n\x0d\n// In general deprecations are initialized wherever the APIs are implemented\x2C\x0d\n// this is used to deprecate APIs implemented in C++ where the deprecation\x0d\n// utilities are not easily accessible.\x0d\nfunction initializeDeprecations() {\x0d\n  const { deprecate } = require('internal/util');\x0d\n  const pendingDeprecation = getOptionValue('--pending-deprecation');\x0d\n\x0d\n  // DEP0103: access to `process.binding('util').isX` type checkers\x0d\n  // TODO(addaleax): Turn into a full runtime deprecation.\x0d\n  const utilBinding = internalBinding('util');\x0d\n  const types = require('internal/util/types');\x0d\n  for (const name of [\x0d\n    'isArrayBuffer'\x2C\x0d\n    'isArrayBufferView'\x2C\x0d\n    'isAsyncFunction'\x2C\x0d\n    'isDataView'\x2C\x0d\n    'isDate'\x2C\x0d\n    'isExternal'\x2C\x0d\n    'isMap'\x2C\x0d\n    'isMapIterator'\x2C\x0d\n    'isNativeError'\x2C\x0d\n    'isPromise'\x2C\x0d\n    'isRegExp'\x2C\x0d\n    'isSet'\x2C\x0d\n    'isSetIterator'\x2C\x0d\n    'isTypedArray'\x2C\x0d\n    'isUint8Array'\x2C\x0d\n    'isAnyArrayBuffer'\x2C\x0d\n  ]) {\x0d\n    utilBinding[name] = pendingDeprecation ?\x0d\n      deprecate(types[name]\x2C\x0d\n                'Accessing native typechecking bindings of Node ' +\x0d\n                'directly is deprecated. ' +\x0d\n                `Please use \\`util.types.${name}\\` instead.`\x2C\x0d\n                'DEP0103') :\x0d\n      types[name];\x0d\n  }\x0d\n\x0d\n  // TODO(joyeecheung): this is a legacy property exposed to process.\x0d\n  // Now that we use the config binding to carry this information\x2C remove\x0d\n  // it from the process. We may consider exposing it properly in\x0d\n  // process.features.\x0d\n  const { noBrowserGlobals } = internalBinding('config');\x0d\n  if (noBrowserGlobals) {\x0d\n    ObjectDefineProperty(process\x2C '_noBrowserGlobals'\x2C {\x0d\n      writable: false\x2C\x0d\n      enumerable: true\x2C\x0d\n      configurable: true\x2C\x0d\n      value: noBrowserGlobals\x0d\n    });\x0d\n  }\x0d\n\x0d\n  if (pendingDeprecation) {\x0d\n    process.binding = deprecate(process.binding\x2C\x0d\n                                'process.binding() is deprecated. ' +\x0d\n                                'Please use public APIs instead.'\x2C 'DEP0111');\x0d\n\x0d\n    process._tickCallback = deprecate(process._tickCallback\x2C\x0d\n                                      'process._tickCallback() is deprecated'\x2C\x0d\n                                      'DEP0134');\x0d\n  }\x0d\n\x0d\n  // Create global.process and global.Buffer as getters so that we have a\x0d\n  // deprecation path for these in ES Modules.\x0d\n  // See https://github.com/nodejs/node/pull/26334.\x0d\n  let _process = process;\x0d\n  ObjectDefineProperty(globalThis\x2C 'process'\x2C {\x0d\n    get() {\x0d\n      return _process;\x0d\n    }\x2C\x0d\n    set(value) {\x0d\n      _process = value;\x0d\n    }\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: true\x0d\n  });\x0d\n\x0d\n  let _Buffer = Buffer;\x0d\n  ObjectDefineProperty(globalThis\x2C 'Buffer'\x2C {\x0d\n    get() {\x0d\n      return _Buffer;\x0d\n    }\x2C\x0d\n    set(value) {\x0d\n      _Buffer = value;\x0d\n    }\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: true\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction setupChildProcessIpcChannel() {\x0d\n  if (process.env.NODE_CHANNEL_FD) {\x0d\n    const assert = require('internal/assert');\x0d\n\x0d\n    const fd = NumberParseInt(process.env.NODE_CHANNEL_FD\x2C 10);\x0d\n    assert(fd >= 0);\x0d\n\x0d\n    // Make sure it's not accidentally inherited by child processes.\x0d\n    delete process.env.NODE_CHANNEL_FD;\x0d\n\x0d\n    const serializationMode =\x0d\n      process.env.NODE_CHANNEL_SERIALIZATION_MODE || 'json';\x0d\n    delete process.env.NODE_CHANNEL_SERIALIZATION_MODE;\x0d\n\x0d\n    require('child_process')._forkChild(fd\x2C serializationMode);\x0d\n    assert(process.send);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction initializeClusterIPC() {\x0d\n  if (process.argv[1] && process.env.NODE_UNIQUE_ID) {\x0d\n    const cluster = require('cluster');\x0d\n    cluster._setupWorker();\x0d\n    // Make sure it's not accidentally inherited by child processes.\x0d\n    delete process.env.NODE_UNIQUE_ID;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction initializePolicy() {\x0d\n  const experimentalPolicy = getOptionValue('--experimental-policy');\x0d\n  if (experimentalPolicy) {\x0d\n    process.emitWarning('Policies are experimental.'\x2C\x0d\n                        'ExperimentalWarning');\x0d\n    const { pathToFileURL\x2C URL } = require('internal/url');\x0d\n    // URL here as it is slightly different parsing\x0d\n    // no bare specifiers for now\x0d\n    let manifestURL;\x0d\n    if (require('path').isAbsolute(experimentalPolicy)) {\x0d\n      manifestURL = new URL(`file://${experimentalPolicy}`);\x0d\n    } else {\x0d\n      const cwdURL = pathToFileURL(process.cwd());\x0d\n      cwdURL.pathname += '/';\x0d\n      manifestURL = new URL(experimentalPolicy\x2C cwdURL);\x0d\n    }\x0d\n    const fs = require('fs');\x0d\n    const src = fs.readFileSync(manifestURL\x2C 'utf8');\x0d\n    const experimentalPolicyIntegrity = getOptionValue('--policy-integrity');\x0d\n    if (experimentalPolicyIntegrity) {\x0d\n      const SRI = require('internal/policy/sri');\x0d\n      const { createHash\x2C timingSafeEqual } = require('crypto');\x0d\n      const realIntegrities = new SafeMap();\x0d\n      const integrityEntries = SRI.parse(experimentalPolicyIntegrity);\x0d\n      let foundMatch = false;\x0d\n      for (let i = 0; i < integrityEntries.length; i++) {\x0d\n        const {\x0d\n          algorithm\x2C\x0d\n          value: expected\x0d\n        } = integrityEntries[i];\x0d\n        const hash = createHash(algorithm);\x0d\n        hash.update(src);\x0d\n        const digest = hash.digest();\x0d\n        if (digest.length === expected.length &&\x0d\n          timingSafeEqual(digest\x2C expected)) {\x0d\n          foundMatch = true;\x0d\n          break;\x0d\n        }\x0d\n        realIntegrities.set(algorithm\x2C digest.toString('base64'));\x0d\n      }\x0d\n      if (!foundMatch) {\x0d\n        throw new ERR_MANIFEST_ASSERT_INTEGRITY(manifestURL\x2C realIntegrities);\x0d\n      }\x0d\n    }\x0d\n    require('internal/process/policy')\x0d\n      .setup(src\x2C manifestURL.href);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction initializeWASI() {\x0d\n  const { NativeModule } = require('internal/bootstrap/loaders');\x0d\n  const mod = NativeModule.map.get('wasi');\x0d\n  mod.canBeRequiredByUsers =\x0d\n    getOptionValue('--experimental-wasi-unstable-preview1');\x0d\n}\x0d\n\x0d\nfunction initializeCJSLoader() {\x0d\n  const CJSLoader = require('internal/modules/cjs/loader');\x0d\n  if (!getEmbedderOptions().noGlobalSearchPaths) {\x0d\n    CJSLoader.Module._initPaths();\x0d\n  }\x0d\n  // TODO(joyeecheung): deprecate this in favor of a proper hook?\x0d\n  CJSLoader.Module.runMain =\x0d\n    require('internal/modules/run_main').executeUserEntryPoint;\x0d\n}\x0d\n\x0d\nfunction initializeESMLoader() {\x0d\n  // Create this WeakMap in js-land because V8 has no C++ API for WeakMap.\x0d\n  internalBinding('module_wrap').callbackMap = new SafeWeakMap();\x0d\n\x0d\n  if (getEmbedderOptions().shouldNotRegisterESMLoader) return;\x0d\n\x0d\n  const {\x0d\n    setImportModuleDynamicallyCallback\x2C\x0d\n    setInitializeImportMetaObjectCallback\x0d\n  } = internalBinding('module_wrap');\x0d\n  const esm = require('internal/process/esm_loader');\x0d\n  // Setup per-isolate callbacks that locate data or callbacks that we keep\x0d\n  // track of for different ESM modules.\x0d\n  setInitializeImportMetaObjectCallback(esm.initializeImportMetaObject);\x0d\n  setImportModuleDynamicallyCallback(esm.importModuleDynamicallyCallback);\x0d\n\x0d\n  // Patch the vm module when --experimental-vm-modules is on.\x0d\n  // Please update the comments in vm.js when this block changes.\x0d\n  if (getOptionValue('--experimental-vm-modules')) {\x0d\n    const {\x0d\n      Module\x2C SourceTextModule\x2C SyntheticModule\x2C\x0d\n    } = require('internal/vm/module');\x0d\n    const vm = require('vm');\x0d\n    vm.Module = Module;\x0d\n    vm.SourceTextModule = SourceTextModule;\x0d\n    vm.SyntheticModule = SyntheticModule;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction initializeSourceMapsHandlers() {\x0d\n  const { setSourceMapsEnabled } =\x0d\n    require('internal/source_map/source_map_cache');\x0d\n  process.setSourceMapsEnabled = setSourceMapsEnabled;\x0d\n}\x0d\n\x0d\nfunction initializeFrozenIntrinsics() {\x0d\n  if (getOptionValue('--frozen-intrinsics')) {\x0d\n    process.emitWarning('The --frozen-intrinsics flag is experimental'\x2C\x0d\n                        'ExperimentalWarning');\x0d\n    require('internal/freeze_intrinsics')();\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction loadPreloadModules() {\x0d\n  // For user code\x2C we preload modules if `-r` is passed\x0d\n  const preloadModules = getOptionValue('--require');\x0d\n  if (preloadModules && preloadModules.length > 0) {\x0d\n    const {\x0d\n      Module: {\x0d\n        _preloadModules\x0d\n      }\x2C\x0d\n    } = require('internal/modules/cjs/loader');\x0d\n    _preloadModules(preloadModules);\x0d\n  }\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  patchProcessObject\x2C\x0d\n  setupCoverageHooks\x2C\x0d\n  setupWarningHandler\x2C\x0d\n  setupDebugEnv\x2C\x0d\n  setupPerfHooks\x2C\x0d\n  prepareMainThreadExecution\x2C\x0d\n  initializeDeprecations\x2C\x0d\n  initializeESMLoader\x2C\x0d\n  initializeFrozenIntrinsics\x2C\x0d\n  initializeSourceMapsHandlers\x2C\x0d\n  loadPreloadModules\x2C\x0d\n  setupTraceCategoryState\x2C\x0d\n  setupInspectorHooks\x2C\x0d\n  initializeReport\x2C\x0d\n  initializeCJSLoader\x2C\x0d\n  initializeWASI\x0d\n};\x0d\n
code-source-info,0x2e2fa681ede,95,0,16254,C0O0C4O16254,,
code-creation,Function,10,298374,0x2e2fa6829de,426, node:internal/bootstrap/pre_execution:1:1,0x2e2fa681e58,~
code-source-info,0x2e2fa6829de,95,0,16254,C0O0C190O28C196O47C202O72C208O84C214O100C220O130C226O218C232O218C237O174C243O193C249O284C255O284C260O256C266O334C272O334C277O323C283O396C289O396C294O422C299O362C305O446C311O446C315O446C317O15839C324O15861C330O15884C336O15907C342O15931C348O15949C354O15968C360O15999C366O16026C372O16050C378O16081C384O16114C390O16137C396O16165C402O16189C408O16210C414O16234C420O15854C425O16253,,
code-creation,Eval,10,298749,0x2e2fa68432e,5, node:internal/options:1:1,0x2e2fa684158,~
script-source,96,node:internal/options,'use strict';\x0d\n\x0d\nconst {\x0d\n  getCLIOptions\x2C\x0d\n  getEmbedderOptions: getEmbedderOptionsFromBinding\x2C\x0d\n} = internalBinding('options');\x0d\n\x0d\nlet warnOnAllowUnauthorized = true;\x0d\n\x0d\nlet optionsMap;\x0d\nlet aliasesMap;\x0d\nlet embedderOptions;\x0d\n\x0d\n// getCLIOptions() would serialize the option values from C++ land.\x0d\n// It would error if the values are queried before bootstrap is\x0d\n// complete so that we don't accidentally include runtime-dependent\x0d\n// states into a runtime-independent snapshot.\x0d\nfunction getCLIOptionsFromBinding() {\x0d\n  if (!optionsMap) {\x0d\n    ({ options: optionsMap } = getCLIOptions());\x0d\n  }\x0d\n  return optionsMap;\x0d\n}\x0d\n\x0d\nfunction getAliasesFromBinding() {\x0d\n  if (!aliasesMap) {\x0d\n    ({ aliases: aliasesMap } = getCLIOptions());\x0d\n  }\x0d\n  return aliasesMap;\x0d\n}\x0d\n\x0d\nfunction getEmbedderOptions() {\x0d\n  if (!embedderOptions) {\x0d\n    embedderOptions = getEmbedderOptionsFromBinding();\x0d\n  }\x0d\n  return embedderOptions;\x0d\n}\x0d\n\x0d\nfunction getOptionValue(optionName) {\x0d\n  const options = getCLIOptionsFromBinding();\x0d\n  if (optionName.startsWith('--no-')) {\x0d\n    const option = options.get('--' + optionName.slice(5));\x0d\n    return option && !option.value;\x0d\n  }\x0d\n  return options.get(optionName)?.value;\x0d\n}\x0d\n\x0d\nfunction getAllowUnauthorized() {\x0d\n  const allowUnauthorized = process.env.NODE_TLS_REJECT_UNAUTHORIZED === '0';\x0d\n\x0d\n  if (allowUnauthorized && warnOnAllowUnauthorized) {\x0d\n    warnOnAllowUnauthorized = false;\x0d\n    process.emitWarning(\x0d\n      'Setting the NODE_TLS_REJECT_UNAUTHORIZED ' +\x0d\n      'environment variable to \\'0\\' makes TLS connections ' +\x0d\n      'and HTTPS requests insecure by disabling ' +\x0d\n      'certificate verification.');\x0d\n  }\x0d\n  return allowUnauthorized;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  get options() {\x0d\n    return getCLIOptionsFromBinding();\x0d\n  }\x2C\x0d\n  get aliases() {\x0d\n    return getAliasesFromBinding();\x0d\n  }\x2C\x0d\n  getOptionValue\x2C\x0d\n  getAllowUnauthorized\x2C\x0d\n  getEmbedderOptions\x0d\n};\x0d\n
code-source-info,0x2e2fa68432e,96,0,1892,C0O0C4O1892,,
code-creation,Function,10,298951,0x2e2fa6846fe,154, node:internal/options:1:1,0x2e2fa6842a8,~
code-source-info,0x2e2fa6846fe,96,0,1892,C0O0C54O102C57O102C62O28C68O66C74O163C75O163C77O176C78O176C80O193C81O193C83O210C84O210C86O1675C93O1824C99O1843C105O1868C148O1690C153O1891,,
code-creation,LazyCompile,10,299137,0x2e2fa684c0e,69,internalBinding node:internal/bootstrap/loaders:164:45,0x13fcdd0f7b0,~
code-source-info,0x2e2fa684c0e,9,5278,5523,C0O5304C7O5314C11O5329C15O5367C25O5394C30O5392C37O5429C48O5448C56O5484C61O5429C66O5507C68O5518,,
code-creation,LazyCompile,10,299438,0x2e2fa68545e,213,prepareMainThreadExecution node:internal/bootstrap/pre_execution:22:36,0x2e2fa681f10,~
code-source-info,0x2e2fa68545e,95,512,2458,C10O658C15O658C18O763C21O763C25O799C28O799C31O829C34O829C37O850C40O850C43O876C46O876C49O1084C52O1096C57O1100C63O1125C66O1133C77O1190C82O1194C87O1163C91O1154C95O1225C98O1225C101O1320C104O1320C107O1429C110O1429C113O1452C116O1452C119O1513C122O1513C125O1843C128O1843C131O1921C134O1921C137O2123C140O2123C143O2152C146O2152C149O2187C152O2187C155O2216C158O2216C161O2237C164O2237C167O2263C170O2263C173O2309C179O2309C184O2352C189O2370C195O2352C199O2401C202O2401C205O2426C208O2426C212O2457,,
code-creation,LazyCompile,10,299637,0x2e2fa68664e,19,reconnectZeroFillToggle node:internal/buffer:1072:33,0x3d773fcbdb8,~
script-source,25,node:internal/buffer,'use strict';\x0d\n\x0d\nconst {\x0d\n  BigInt\x2C\x0d\n  Float32Array\x2C\x0d\n  Float64Array\x2C\x0d\n  MathFloor\x2C\x0d\n  Number\x2C\x0d\n  Uint8Array\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  ERR_BUFFER_OUT_OF_BOUNDS\x2C\x0d\n  ERR_INVALID_ARG_TYPE\x2C\x0d\n  ERR_OUT_OF_RANGE\x0d\n} = require('internal/errors').codes;\x0d\nconst { validateNumber } = require('internal/validators');\x0d\nconst {\x0d\n  asciiSlice\x2C\x0d\n  base64Slice\x2C\x0d\n  base64urlSlice\x2C\x0d\n  latin1Slice\x2C\x0d\n  hexSlice\x2C\x0d\n  ucs2Slice\x2C\x0d\n  utf8Slice\x2C\x0d\n  asciiWrite\x2C\x0d\n  base64Write\x2C\x0d\n  base64urlWrite\x2C\x0d\n  latin1Write\x2C\x0d\n  hexWrite\x2C\x0d\n  ucs2Write\x2C\x0d\n  utf8Write\x2C\x0d\n  getZeroFillToggle\x0d\n} = internalBinding('buffer');\x0d\nconst {\x0d\n  untransferable_object_private_symbol\x2C\x0d\n  setHiddenValue\x2C\x0d\n} = internalBinding('util');\x0d\n\x0d\n// Temporary buffers to convert numbers.\x0d\nconst float32Array = new Float32Array(1);\x0d\nconst uInt8Float32Array = new Uint8Array(float32Array.buffer);\x0d\nconst float64Array = new Float64Array(1);\x0d\nconst uInt8Float64Array = new Uint8Array(float64Array.buffer);\x0d\n\x0d\n// Check endianness.\x0d\nfloat32Array[0] = -1; // 0xBF800000\x0d\n// Either it is [0\x2C 0\x2C 128\x2C 191] or [191\x2C 128\x2C 0\x2C 0]. It is not possible to\x0d\n// check this with `os.endianness()` because that is determined at compile time.\x0d\nconst bigEndian = uInt8Float32Array[3] === 0;\x0d\n\x0d\nfunction checkBounds(buf\x2C offset\x2C byteLength) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined)\x0d\n    boundsError(offset\x2C buf.length - (byteLength + 1));\x0d\n}\x0d\n\x0d\nfunction checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C byteLength) {\x0d\n  if (value > max || value < min) {\x0d\n    const n = typeof min === 'bigint' ? 'n' : '';\x0d\n    let range;\x0d\n    if (byteLength > 3) {\x0d\n      if (min === 0 || min === 0n) {\x0d\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;\x0d\n      } else {\x0d\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and ` +\x0d\n                `< 2${n} ** ${(byteLength + 1) * 8 - 1}${n}`;\x0d\n      }\x0d\n    } else {\x0d\n      range = `>= ${min}${n} and <= ${max}${n}`;\x0d\n    }\x0d\n    throw new ERR_OUT_OF_RANGE('value'\x2C range\x2C value);\x0d\n  }\x0d\n  checkBounds(buf\x2C offset\x2C byteLength);\x0d\n}\x0d\n\x0d\nfunction boundsError(value\x2C length\x2C type) {\x0d\n  if (MathFloor(value) !== value) {\x0d\n    validateNumber(value\x2C type);\x0d\n    throw new ERR_OUT_OF_RANGE(type || 'offset'\x2C 'an integer'\x2C value);\x0d\n  }\x0d\n\x0d\n  if (length < 0)\x0d\n    throw new ERR_BUFFER_OUT_OF_BOUNDS();\x0d\n\x0d\n  throw new ERR_OUT_OF_RANGE(type || 'offset'\x2C\x0d\n                             `>= ${type ? 1 : 0} and <= ${length}`\x2C\x0d\n                             value);\x0d\n}\x0d\n\x0d\n// Read integers.\x0d\nfunction readBigUInt64LE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 7];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 8);\x0d\n\x0d\n  const lo = first +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    this[++offset] * 2 ** 24;\x0d\n\x0d\n  const hi = this[++offset] +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    last * 2 ** 24;\x0d\n\x0d\n  return BigInt(lo) + (BigInt(hi) << 32n);\x0d\n}\x0d\n\x0d\nfunction readBigUInt64BE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 7];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 8);\x0d\n\x0d\n  const hi = first * 2 ** 24 +\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    this[++offset];\x0d\n\x0d\n  const lo = this[++offset] * 2 ** 24 +\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    last;\x0d\n\x0d\n  return (BigInt(hi) << 32n) + BigInt(lo);\x0d\n}\x0d\n\x0d\nfunction readBigInt64LE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 7];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 8);\x0d\n\x0d\n  const val = this[offset + 4] +\x0d\n    this[offset + 5] * 2 ** 8 +\x0d\n    this[offset + 6] * 2 ** 16 +\x0d\n    (last << 24); // Overflow\x0d\n  return (BigInt(val) << 32n) +\x0d\n    BigInt(first +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    this[++offset] * 2 ** 24);\x0d\n}\x0d\n\x0d\nfunction readBigInt64BE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 7];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 8);\x0d\n\x0d\n  const val = (first << 24) + // Overflow\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    this[++offset];\x0d\n  return (BigInt(val) << 32n) +\x0d\n    BigInt(this[++offset] * 2 ** 24 +\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    last);\x0d\n}\x0d\n\x0d\nfunction readUIntLE(offset\x2C byteLength) {\x0d\n  if (offset === undefined)\x0d\n    throw new ERR_INVALID_ARG_TYPE('offset'\x2C 'number'\x2C offset);\x0d\n  if (byteLength === 6)\x0d\n    return readUInt48LE(this\x2C offset);\x0d\n  if (byteLength === 5)\x0d\n    return readUInt40LE(this\x2C offset);\x0d\n  if (byteLength === 3)\x0d\n    return readUInt24LE(this\x2C offset);\x0d\n  if (byteLength === 4)\x0d\n    return this.readUInt32LE(offset);\x0d\n  if (byteLength === 2)\x0d\n    return this.readUInt16LE(offset);\x0d\n  if (byteLength === 1)\x0d\n    return this.readUInt8(offset);\x0d\n\x0d\n  boundsError(byteLength\x2C 6\x2C 'byteLength');\x0d\n}\x0d\n\x0d\nfunction readUInt48LE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 5];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 6);\x0d\n\x0d\n  return first +\x0d\n    buf[++offset] * 2 ** 8 +\x0d\n    buf[++offset] * 2 ** 16 +\x0d\n    buf[++offset] * 2 ** 24 +\x0d\n    (buf[++offset] + last * 2 ** 8) * 2 ** 32;\x0d\n}\x0d\n\x0d\nfunction readUInt40LE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 4];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 5);\x0d\n\x0d\n  return first +\x0d\n    buf[++offset] * 2 ** 8 +\x0d\n    buf[++offset] * 2 ** 16 +\x0d\n    buf[++offset] * 2 ** 24 +\x0d\n    last * 2 ** 32;\x0d\n}\x0d\n\x0d\nfunction readUInt32LE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 3];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 4);\x0d\n\x0d\n  return first +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    last * 2 ** 24;\x0d\n}\x0d\n\x0d\nfunction readUInt24LE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 2];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 3);\x0d\n\x0d\n  return first + buf[++offset] * 2 ** 8 + last * 2 ** 16;\x0d\n}\x0d\n\x0d\nfunction readUInt16LE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 1];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 2);\x0d\n\x0d\n  return first + last * 2 ** 8;\x0d\n}\x0d\n\x0d\nfunction readUInt8(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const val = this[offset];\x0d\n  if (val === undefined)\x0d\n    boundsError(offset\x2C this.length - 1);\x0d\n\x0d\n  return val;\x0d\n}\x0d\n\x0d\nfunction readUIntBE(offset\x2C byteLength) {\x0d\n  if (offset === undefined)\x0d\n    throw new ERR_INVALID_ARG_TYPE('offset'\x2C 'number'\x2C offset);\x0d\n  if (byteLength === 6)\x0d\n    return readUInt48BE(this\x2C offset);\x0d\n  if (byteLength === 5)\x0d\n    return readUInt40BE(this\x2C offset);\x0d\n  if (byteLength === 3)\x0d\n    return readUInt24BE(this\x2C offset);\x0d\n  if (byteLength === 4)\x0d\n    return this.readUInt32BE(offset);\x0d\n  if (byteLength === 2)\x0d\n    return this.readUInt16BE(offset);\x0d\n  if (byteLength === 1)\x0d\n    return this.readUInt8(offset);\x0d\n\x0d\n  boundsError(byteLength\x2C 6\x2C 'byteLength');\x0d\n}\x0d\n\x0d\nfunction readUInt48BE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 5];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 6);\x0d\n\x0d\n  return (first * 2 ** 8 + buf[++offset]) * 2 ** 32 +\x0d\n    buf[++offset] * 2 ** 24 +\x0d\n    buf[++offset] * 2 ** 16 +\x0d\n    buf[++offset] * 2 ** 8 +\x0d\n    last;\x0d\n}\x0d\n\x0d\nfunction readUInt40BE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 4];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 5);\x0d\n\x0d\n  return first * 2 ** 32 +\x0d\n    buf[++offset] * 2 ** 24 +\x0d\n    buf[++offset] * 2 ** 16 +\x0d\n    buf[++offset] * 2 ** 8 +\x0d\n    last;\x0d\n}\x0d\n\x0d\nfunction readUInt32BE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 3];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 4);\x0d\n\x0d\n  return first * 2 ** 24 +\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    last;\x0d\n}\x0d\n\x0d\nfunction readUInt24BE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 2];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 3);\x0d\n\x0d\n  return first * 2 ** 16 + buf[++offset] * 2 ** 8 + last;\x0d\n}\x0d\n\x0d\nfunction readUInt16BE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 1];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 2);\x0d\n\x0d\n  return first * 2 ** 8 + last;\x0d\n}\x0d\n\x0d\nfunction readIntLE(offset\x2C byteLength) {\x0d\n  if (offset === undefined)\x0d\n    throw new ERR_INVALID_ARG_TYPE('offset'\x2C 'number'\x2C offset);\x0d\n  if (byteLength === 6)\x0d\n    return readInt48LE(this\x2C offset);\x0d\n  if (byteLength === 5)\x0d\n    return readInt40LE(this\x2C offset);\x0d\n  if (byteLength === 3)\x0d\n    return readInt24LE(this\x2C offset);\x0d\n  if (byteLength === 4)\x0d\n    return this.readInt32LE(offset);\x0d\n  if (byteLength === 2)\x0d\n    return this.readInt16LE(offset);\x0d\n  if (byteLength === 1)\x0d\n    return this.readInt8(offset);\x0d\n\x0d\n  boundsError(byteLength\x2C 6\x2C 'byteLength');\x0d\n}\x0d\n\x0d\nfunction readInt48LE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 5];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 6);\x0d\n\x0d\n  const val = buf[offset + 4] + last * 2 ** 8;\x0d\n  return (val | (val & 2 ** 15) * 0x1fffe) * 2 ** 32 +\x0d\n    first +\x0d\n    buf[++offset] * 2 ** 8 +\x0d\n    buf[++offset] * 2 ** 16 +\x0d\n    buf[++offset] * 2 ** 24;\x0d\n}\x0d\n\x0d\nfunction readInt40LE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 4];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 5);\x0d\n\x0d\n  return (last | (last & 2 ** 7) * 0x1fffffe) * 2 ** 32 +\x0d\n    first +\x0d\n    buf[++offset] * 2 ** 8 +\x0d\n    buf[++offset] * 2 ** 16 +\x0d\n    buf[++offset] * 2 ** 24;\x0d\n}\x0d\n\x0d\nfunction readInt32LE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 3];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 4);\x0d\n\x0d\n  return first +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    (last << 24); // Overflow\x0d\n}\x0d\n\x0d\nfunction readInt24LE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 2];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 3);\x0d\n\x0d\n  const val = first + buf[++offset] * 2 ** 8 + last * 2 ** 16;\x0d\n  return val | (val & 2 ** 23) * 0x1fe;\x0d\n}\x0d\n\x0d\nfunction readInt16LE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 1];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 2);\x0d\n\x0d\n  const val = first + last * 2 ** 8;\x0d\n  return val | (val & 2 ** 15) * 0x1fffe;\x0d\n}\x0d\n\x0d\nfunction readInt8(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const val = this[offset];\x0d\n  if (val === undefined)\x0d\n    boundsError(offset\x2C this.length - 1);\x0d\n\x0d\n  return val | (val & 2 ** 7) * 0x1fffffe;\x0d\n}\x0d\n\x0d\nfunction readIntBE(offset\x2C byteLength) {\x0d\n  if (offset === undefined)\x0d\n    throw new ERR_INVALID_ARG_TYPE('offset'\x2C 'number'\x2C offset);\x0d\n  if (byteLength === 6)\x0d\n    return readInt48BE(this\x2C offset);\x0d\n  if (byteLength === 5)\x0d\n    return readInt40BE(this\x2C offset);\x0d\n  if (byteLength === 3)\x0d\n    return readInt24BE(this\x2C offset);\x0d\n  if (byteLength === 4)\x0d\n    return this.readInt32BE(offset);\x0d\n  if (byteLength === 2)\x0d\n    return this.readInt16BE(offset);\x0d\n  if (byteLength === 1)\x0d\n    return this.readInt8(offset);\x0d\n\x0d\n  boundsError(byteLength\x2C 6\x2C 'byteLength');\x0d\n}\x0d\n\x0d\nfunction readInt48BE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 5];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 6);\x0d\n\x0d\n  const val = buf[++offset] + first * 2 ** 8;\x0d\n  return (val | (val & 2 ** 15) * 0x1fffe) * 2 ** 32 +\x0d\n    buf[++offset] * 2 ** 24 +\x0d\n    buf[++offset] * 2 ** 16 +\x0d\n    buf[++offset] * 2 ** 8 +\x0d\n    last;\x0d\n}\x0d\n\x0d\nfunction readInt40BE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 4];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 5);\x0d\n\x0d\n  return (first | (first & 2 ** 7) * 0x1fffffe) * 2 ** 32 +\x0d\n    buf[++offset] * 2 ** 24 +\x0d\n    buf[++offset] * 2 ** 16 +\x0d\n    buf[++offset] * 2 ** 8 +\x0d\n    last;\x0d\n}\x0d\n\x0d\nfunction readInt32BE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 3];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 4);\x0d\n\x0d\n  return (first << 24) + // Overflow\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    last;\x0d\n}\x0d\n\x0d\nfunction readInt24BE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 2];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 3);\x0d\n\x0d\n  const val = first * 2 ** 16 + buf[++offset] * 2 ** 8 + last;\x0d\n  return val | (val & 2 ** 23) * 0x1fe;\x0d\n}\x0d\n\x0d\nfunction readInt16BE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 1];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 2);\x0d\n\x0d\n  const val = first * 2 ** 8 + last;\x0d\n  return val | (val & 2 ** 15) * 0x1fffe;\x0d\n}\x0d\n\x0d\n// Read floats\x0d\nfunction readFloatBackwards(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 3];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 4);\x0d\n\x0d\n  uInt8Float32Array[3] = first;\x0d\n  uInt8Float32Array[2] = this[++offset];\x0d\n  uInt8Float32Array[1] = this[++offset];\x0d\n  uInt8Float32Array[0] = last;\x0d\n  return float32Array[0];\x0d\n}\x0d\n\x0d\nfunction readFloatForwards(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 3];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 4);\x0d\n\x0d\n  uInt8Float32Array[0] = first;\x0d\n  uInt8Float32Array[1] = this[++offset];\x0d\n  uInt8Float32Array[2] = this[++offset];\x0d\n  uInt8Float32Array[3] = last;\x0d\n  return float32Array[0];\x0d\n}\x0d\n\x0d\nfunction readDoubleBackwards(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 7];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 8);\x0d\n\x0d\n  uInt8Float64Array[7] = first;\x0d\n  uInt8Float64Array[6] = this[++offset];\x0d\n  uInt8Float64Array[5] = this[++offset];\x0d\n  uInt8Float64Array[4] = this[++offset];\x0d\n  uInt8Float64Array[3] = this[++offset];\x0d\n  uInt8Float64Array[2] = this[++offset];\x0d\n  uInt8Float64Array[1] = this[++offset];\x0d\n  uInt8Float64Array[0] = last;\x0d\n  return float64Array[0];\x0d\n}\x0d\n\x0d\nfunction readDoubleForwards(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 7];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 8);\x0d\n\x0d\n  uInt8Float64Array[0] = first;\x0d\n  uInt8Float64Array[1] = this[++offset];\x0d\n  uInt8Float64Array[2] = this[++offset];\x0d\n  uInt8Float64Array[3] = this[++offset];\x0d\n  uInt8Float64Array[4] = this[++offset];\x0d\n  uInt8Float64Array[5] = this[++offset];\x0d\n  uInt8Float64Array[6] = this[++offset];\x0d\n  uInt8Float64Array[7] = last;\x0d\n  return float64Array[0];\x0d\n}\x0d\n\x0d\n// Write integers.\x0d\nfunction writeBigU_Int64LE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 7);\x0d\n\x0d\n  let lo = Number(value & 0xffffffffn);\x0d\n  buf[offset++] = lo;\x0d\n  lo = lo >> 8;\x0d\n  buf[offset++] = lo;\x0d\n  lo = lo >> 8;\x0d\n  buf[offset++] = lo;\x0d\n  lo = lo >> 8;\x0d\n  buf[offset++] = lo;\x0d\n  let hi = Number(value >> 32n & 0xffffffffn);\x0d\n  buf[offset++] = hi;\x0d\n  hi = hi >> 8;\x0d\n  buf[offset++] = hi;\x0d\n  hi = hi >> 8;\x0d\n  buf[offset++] = hi;\x0d\n  hi = hi >> 8;\x0d\n  buf[offset++] = hi;\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeBigUInt64LE(value\x2C offset = 0) {\x0d\n  return writeBigU_Int64LE(this\x2C value\x2C offset\x2C 0n\x2C 0xffffffffffffffffn);\x0d\n}\x0d\n\x0d\nfunction writeBigU_Int64BE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 7);\x0d\n\x0d\n  let lo = Number(value & 0xffffffffn);\x0d\n  buf[offset + 7] = lo;\x0d\n  lo = lo >> 8;\x0d\n  buf[offset + 6] = lo;\x0d\n  lo = lo >> 8;\x0d\n  buf[offset + 5] = lo;\x0d\n  lo = lo >> 8;\x0d\n  buf[offset + 4] = lo;\x0d\n  let hi = Number(value >> 32n & 0xffffffffn);\x0d\n  buf[offset + 3] = hi;\x0d\n  hi = hi >> 8;\x0d\n  buf[offset + 2] = hi;\x0d\n  hi = hi >> 8;\x0d\n  buf[offset + 1] = hi;\x0d\n  hi = hi >> 8;\x0d\n  buf[offset] = hi;\x0d\n  return offset + 8;\x0d\n}\x0d\n\x0d\nfunction writeBigUInt64BE(value\x2C offset = 0) {\x0d\n  return writeBigU_Int64BE(this\x2C value\x2C offset\x2C 0n\x2C 0xffffffffffffffffn);\x0d\n}\x0d\n\x0d\nfunction writeBigInt64LE(value\x2C offset = 0) {\x0d\n  return writeBigU_Int64LE(\x0d\n    this\x2C value\x2C offset\x2C -0x8000000000000000n\x2C 0x7fffffffffffffffn);\x0d\n}\x0d\n\x0d\nfunction writeBigInt64BE(value\x2C offset = 0) {\x0d\n  return writeBigU_Int64BE(\x0d\n    this\x2C value\x2C offset\x2C -0x8000000000000000n\x2C 0x7fffffffffffffffn);\x0d\n}\x0d\n\x0d\nfunction writeUIntLE(value\x2C offset\x2C byteLength) {\x0d\n  if (byteLength === 6)\x0d\n    return writeU_Int48LE(this\x2C value\x2C offset\x2C 0\x2C 0xffffffffffff);\x0d\n  if (byteLength === 5)\x0d\n    return writeU_Int40LE(this\x2C value\x2C offset\x2C 0\x2C 0xffffffffff);\x0d\n  if (byteLength === 3)\x0d\n    return writeU_Int24LE(this\x2C value\x2C offset\x2C 0\x2C 0xffffff);\x0d\n  if (byteLength === 4)\x0d\n    return writeU_Int32LE(this\x2C value\x2C offset\x2C 0\x2C 0xffffffff);\x0d\n  if (byteLength === 2)\x0d\n    return writeU_Int16LE(this\x2C value\x2C offset\x2C 0\x2C 0xffff);\x0d\n  if (byteLength === 1)\x0d\n    return writeU_Int8(this\x2C value\x2C offset\x2C 0\x2C 0xff);\x0d\n\x0d\n  boundsError(byteLength\x2C 6\x2C 'byteLength');\x0d\n}\x0d\n\x0d\nfunction writeU_Int48LE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 5);\x0d\n\x0d\n  const newVal = MathFloor(value * 2 ** -32);\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  buf[offset++] = newVal;\x0d\n  buf[offset++] = (newVal >>> 8);\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeU_Int40LE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 4);\x0d\n\x0d\n  const newVal = value;\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  buf[offset++] = MathFloor(newVal * 2 ** -32);\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeU_Int32LE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 3);\x0d\n\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeUInt32LE(value\x2C offset = 0) {\x0d\n  return writeU_Int32LE(this\x2C value\x2C offset\x2C 0\x2C 0xffffffff);\x0d\n}\x0d\n\x0d\nfunction writeU_Int24LE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 2);\x0d\n\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeU_Int16LE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 1);\x0d\n\x0d\n  buf[offset++] = value;\x0d\n  buf[offset++] = (value >>> 8);\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeUInt16LE(value\x2C offset = 0) {\x0d\n  return writeU_Int16LE(this\x2C value\x2C offset\x2C 0\x2C 0xffff);\x0d\n}\x0d\n\x0d\nfunction writeU_Int8(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  // `checkInt()` can not be used here because it checks two entries.\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  if (value > max || value < min) {\x0d\n    throw new ERR_OUT_OF_RANGE('value'\x2C `>= ${min} and <= ${max}`\x2C value);\x0d\n  }\x0d\n  if (buf[offset] === undefined)\x0d\n    boundsError(offset\x2C buf.length - 1);\x0d\n\x0d\n  buf[offset] = value;\x0d\n  return offset + 1;\x0d\n}\x0d\n\x0d\nfunction writeUInt8(value\x2C offset = 0) {\x0d\n  return writeU_Int8(this\x2C value\x2C offset\x2C 0\x2C 0xff);\x0d\n}\x0d\n\x0d\nfunction writeUIntBE(value\x2C offset\x2C byteLength) {\x0d\n  if (byteLength === 6)\x0d\n    return writeU_Int48BE(this\x2C value\x2C offset\x2C 0\x2C 0xffffffffffff);\x0d\n  if (byteLength === 5)\x0d\n    return writeU_Int40BE(this\x2C value\x2C offset\x2C 0\x2C 0xffffffffff);\x0d\n  if (byteLength === 3)\x0d\n    return writeU_Int24BE(this\x2C value\x2C offset\x2C 0\x2C 0xffffff);\x0d\n  if (byteLength === 4)\x0d\n    return writeU_Int32BE(this\x2C value\x2C offset\x2C 0\x2C 0xffffffff);\x0d\n  if (byteLength === 2)\x0d\n    return writeU_Int16BE(this\x2C value\x2C offset\x2C 0\x2C 0xffff);\x0d\n  if (byteLength === 1)\x0d\n    return writeU_Int8(this\x2C value\x2C offset\x2C 0\x2C 0xff);\x0d\n\x0d\n  boundsError(byteLength\x2C 6\x2C 'byteLength');\x0d\n}\x0d\n\x0d\nfunction writeU_Int48BE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 5);\x0d\n\x0d\n  const newVal = MathFloor(value * 2 ** -32);\x0d\n  buf[offset++] = (newVal >>> 8);\x0d\n  buf[offset++] = newVal;\x0d\n  buf[offset + 3] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset + 2] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset + 1] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset] = value;\x0d\n  return offset + 4;\x0d\n}\x0d\n\x0d\nfunction writeU_Int40BE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 4);\x0d\n\x0d\n  buf[offset++] = MathFloor(value * 2 ** -32);\x0d\n  buf[offset + 3] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset + 2] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset + 1] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset] = value;\x0d\n  return offset + 4;\x0d\n}\x0d\n\x0d\nfunction writeU_Int32BE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 3);\x0d\n\x0d\n  buf[offset + 3] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset + 2] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset + 1] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset] = value;\x0d\n  return offset + 4;\x0d\n}\x0d\n\x0d\nfunction writeUInt32BE(value\x2C offset = 0) {\x0d\n  return writeU_Int32BE(this\x2C value\x2C offset\x2C 0\x2C 0xffffffff);\x0d\n}\x0d\n\x0d\nfunction writeU_Int24BE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 2);\x0d\n\x0d\n  buf[offset + 2] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset + 1] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset] = value;\x0d\n  return offset + 3;\x0d\n}\x0d\n\x0d\nfunction writeU_Int16BE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 1);\x0d\n\x0d\n  buf[offset++] = (value >>> 8);\x0d\n  buf[offset++] = value;\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeUInt16BE(value\x2C offset = 0) {\x0d\n  return writeU_Int16BE(this\x2C value\x2C offset\x2C 0\x2C 0xffff);\x0d\n}\x0d\n\x0d\nfunction writeIntLE(value\x2C offset\x2C byteLength) {\x0d\n  if (byteLength === 6)\x0d\n    return writeU_Int48LE(this\x2C value\x2C offset\x2C -0x800000000000\x2C 0x7fffffffffff);\x0d\n  if (byteLength === 5)\x0d\n    return writeU_Int40LE(this\x2C value\x2C offset\x2C -0x8000000000\x2C 0x7fffffffff);\x0d\n  if (byteLength === 3)\x0d\n    return writeU_Int24LE(this\x2C value\x2C offset\x2C -0x800000\x2C 0x7fffff);\x0d\n  if (byteLength === 4)\x0d\n    return writeU_Int32LE(this\x2C value\x2C offset\x2C -0x80000000\x2C 0x7fffffff);\x0d\n  if (byteLength === 2)\x0d\n    return writeU_Int16LE(this\x2C value\x2C offset\x2C -0x8000\x2C 0x7fff);\x0d\n  if (byteLength === 1)\x0d\n    return writeU_Int8(this\x2C value\x2C offset\x2C -0x80\x2C 0x7f);\x0d\n\x0d\n  boundsError(byteLength\x2C 6\x2C 'byteLength');\x0d\n}\x0d\n\x0d\nfunction writeInt32LE(value\x2C offset = 0) {\x0d\n  return writeU_Int32LE(this\x2C value\x2C offset\x2C -0x80000000\x2C 0x7fffffff);\x0d\n}\x0d\n\x0d\nfunction writeInt16LE(value\x2C offset = 0) {\x0d\n  return writeU_Int16LE(this\x2C value\x2C offset\x2C -0x8000\x2C 0x7fff);\x0d\n}\x0d\n\x0d\nfunction writeInt8(value\x2C offset = 0) {\x0d\n  return writeU_Int8(this\x2C value\x2C offset\x2C -0x80\x2C 0x7f);\x0d\n}\x0d\n\x0d\nfunction writeIntBE(value\x2C offset\x2C byteLength) {\x0d\n  if (byteLength === 6)\x0d\n    return writeU_Int48BE(this\x2C value\x2C offset\x2C -0x800000000000\x2C 0x7fffffffffff);\x0d\n  if (byteLength === 5)\x0d\n    return writeU_Int40BE(this\x2C value\x2C offset\x2C -0x8000000000\x2C 0x7fffffffff);\x0d\n  if (byteLength === 3)\x0d\n    return writeU_Int24BE(this\x2C value\x2C offset\x2C -0x800000\x2C 0x7fffff);\x0d\n  if (byteLength === 4)\x0d\n    return writeU_Int32BE(this\x2C value\x2C offset\x2C -0x80000000\x2C 0x7fffffff);\x0d\n  if (byteLength === 2)\x0d\n    return writeU_Int16BE(this\x2C value\x2C offset\x2C -0x8000\x2C 0x7fff);\x0d\n  if (byteLength === 1)\x0d\n    return writeU_Int8(this\x2C value\x2C offset\x2C -0x80\x2C 0x7f);\x0d\n\x0d\n  boundsError(byteLength\x2C 6\x2C 'byteLength');\x0d\n}\x0d\n\x0d\nfunction writeInt32BE(value\x2C offset = 0) {\x0d\n  return writeU_Int32BE(this\x2C value\x2C offset\x2C -0x80000000\x2C 0x7fffffff);\x0d\n}\x0d\n\x0d\nfunction writeInt16BE(value\x2C offset = 0) {\x0d\n  return writeU_Int16BE(this\x2C value\x2C offset\x2C -0x8000\x2C 0x7fff);\x0d\n}\x0d\n\x0d\n// Write floats.\x0d\nfunction writeDoubleForwards(val\x2C offset = 0) {\x0d\n  val = +val;\x0d\n  checkBounds(this\x2C offset\x2C 7);\x0d\n\x0d\n  float64Array[0] = val;\x0d\n  this[offset++] = uInt8Float64Array[0];\x0d\n  this[offset++] = uInt8Float64Array[1];\x0d\n  this[offset++] = uInt8Float64Array[2];\x0d\n  this[offset++] = uInt8Float64Array[3];\x0d\n  this[offset++] = uInt8Float64Array[4];\x0d\n  this[offset++] = uInt8Float64Array[5];\x0d\n  this[offset++] = uInt8Float64Array[6];\x0d\n  this[offset++] = uInt8Float64Array[7];\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeDoubleBackwards(val\x2C offset = 0) {\x0d\n  val = +val;\x0d\n  checkBounds(this\x2C offset\x2C 7);\x0d\n\x0d\n  float64Array[0] = val;\x0d\n  this[offset++] = uInt8Float64Array[7];\x0d\n  this[offset++] = uInt8Float64Array[6];\x0d\n  this[offset++] = uInt8Float64Array[5];\x0d\n  this[offset++] = uInt8Float64Array[4];\x0d\n  this[offset++] = uInt8Float64Array[3];\x0d\n  this[offset++] = uInt8Float64Array[2];\x0d\n  this[offset++] = uInt8Float64Array[1];\x0d\n  this[offset++] = uInt8Float64Array[0];\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeFloatForwards(val\x2C offset = 0) {\x0d\n  val = +val;\x0d\n  checkBounds(this\x2C offset\x2C 3);\x0d\n\x0d\n  float32Array[0] = val;\x0d\n  this[offset++] = uInt8Float32Array[0];\x0d\n  this[offset++] = uInt8Float32Array[1];\x0d\n  this[offset++] = uInt8Float32Array[2];\x0d\n  this[offset++] = uInt8Float32Array[3];\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeFloatBackwards(val\x2C offset = 0) {\x0d\n  val = +val;\x0d\n  checkBounds(this\x2C offset\x2C 3);\x0d\n\x0d\n  float32Array[0] = val;\x0d\n  this[offset++] = uInt8Float32Array[3];\x0d\n  this[offset++] = uInt8Float32Array[2];\x0d\n  this[offset++] = uInt8Float32Array[1];\x0d\n  this[offset++] = uInt8Float32Array[0];\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nclass FastBuffer extends Uint8Array {\x0d\n  // Using an explicit constructor here is necessary to avoid relying on\x0d\n  // `Array.prototype[Symbol.iterator]`\x2C which can be mutated by users.\x0d\n  // eslint-disable-next-line no-useless-constructor\x0d\n  constructor(bufferOrLength\x2C byteOffset\x2C length) {\x0d\n    super(bufferOrLength\x2C byteOffset\x2C length);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction addBufferPrototypeMethods(proto) {\x0d\n  proto.readBigUInt64LE = readBigUInt64LE;\x0d\n  proto.readBigUInt64BE = readBigUInt64BE;\x0d\n  proto.readBigUint64LE = readBigUInt64LE;\x0d\n  proto.readBigUint64BE = readBigUInt64BE;\x0d\n  proto.readBigInt64LE = readBigInt64LE;\x0d\n  proto.readBigInt64BE = readBigInt64BE;\x0d\n  proto.writeBigUInt64LE = writeBigUInt64LE;\x0d\n  proto.writeBigUInt64BE = writeBigUInt64BE;\x0d\n  proto.writeBigUint64LE = writeBigUInt64LE;\x0d\n  proto.writeBigUint64BE = writeBigUInt64BE;\x0d\n  proto.writeBigInt64LE = writeBigInt64LE;\x0d\n  proto.writeBigInt64BE = writeBigInt64BE;\x0d\n\x0d\n  proto.readUIntLE = readUIntLE;\x0d\n  proto.readUInt32LE = readUInt32LE;\x0d\n  proto.readUInt16LE = readUInt16LE;\x0d\n  proto.readUInt8 = readUInt8;\x0d\n  proto.readUIntBE = readUIntBE;\x0d\n  proto.readUInt32BE = readUInt32BE;\x0d\n  proto.readUInt16BE = readUInt16BE;\x0d\n  proto.readUintLE = readUIntLE;\x0d\n  proto.readUint32LE = readUInt32LE;\x0d\n  proto.readUint16LE = readUInt16LE;\x0d\n  proto.readUint8 = readUInt8;\x0d\n  proto.readUintBE = readUIntBE;\x0d\n  proto.readUint32BE = readUInt32BE;\x0d\n  proto.readUint16BE = readUInt16BE;\x0d\n  proto.readIntLE = readIntLE;\x0d\n  proto.readInt32LE = readInt32LE;\x0d\n  proto.readInt16LE = readInt16LE;\x0d\n  proto.readInt8 = readInt8;\x0d\n  proto.readIntBE = readIntBE;\x0d\n  proto.readInt32BE = readInt32BE;\x0d\n  proto.readInt16BE = readInt16BE;\x0d\n\x0d\n  proto.writeUIntLE = writeUIntLE;\x0d\n  proto.writeUInt32LE = writeUInt32LE;\x0d\n  proto.writeUInt16LE = writeUInt16LE;\x0d\n  proto.writeUInt8 = writeUInt8;\x0d\n  proto.writeUIntBE = writeUIntBE;\x0d\n  proto.writeUInt32BE = writeUInt32BE;\x0d\n  proto.writeUInt16BE = writeUInt16BE;\x0d\n  proto.writeUintLE = writeUIntLE;\x0d\n  proto.writeUint32LE = writeUInt32LE;\x0d\n  proto.writeUint16LE = writeUInt16LE;\x0d\n  proto.writeUint8 = writeUInt8;\x0d\n  proto.writeUintBE = writeUIntBE;\x0d\n  proto.writeUint32BE = writeUInt32BE;\x0d\n  proto.writeUint16BE = writeUInt16BE;\x0d\n  proto.writeIntLE = writeIntLE;\x0d\n  proto.writeInt32LE = writeInt32LE;\x0d\n  proto.writeInt16LE = writeInt16LE;\x0d\n  proto.writeInt8 = writeInt8;\x0d\n  proto.writeIntBE = writeIntBE;\x0d\n  proto.writeInt32BE = writeInt32BE;\x0d\n  proto.writeInt16BE = writeInt16BE;\x0d\n\x0d\n  proto.readFloatLE = bigEndian ? readFloatBackwards : readFloatForwards;\x0d\n  proto.readFloatBE = bigEndian ? readFloatForwards : readFloatBackwards;\x0d\n  proto.readDoubleLE = bigEndian ? readDoubleBackwards : readDoubleForwards;\x0d\n  proto.readDoubleBE = bigEndian ? readDoubleForwards : readDoubleBackwards;\x0d\n  proto.writeFloatLE = bigEndian ? writeFloatBackwards : writeFloatForwards;\x0d\n  proto.writeFloatBE = bigEndian ? writeFloatForwards : writeFloatBackwards;\x0d\n  proto.writeDoubleLE = bigEndian ? writeDoubleBackwards : writeDoubleForwards;\x0d\n  proto.writeDoubleBE = bigEndian ? writeDoubleForwards : writeDoubleBackwards;\x0d\n\x0d\n  proto.asciiSlice = asciiSlice;\x0d\n  proto.base64Slice = base64Slice;\x0d\n  proto.base64urlSlice = base64urlSlice;\x0d\n  proto.latin1Slice = latin1Slice;\x0d\n  proto.hexSlice = hexSlice;\x0d\n  proto.ucs2Slice = ucs2Slice;\x0d\n  proto.utf8Slice = utf8Slice;\x0d\n  proto.asciiWrite = asciiWrite;\x0d\n  proto.base64Write = base64Write;\x0d\n  proto.base64urlWrite = base64urlWrite;\x0d\n  proto.latin1Write = latin1Write;\x0d\n  proto.hexWrite = hexWrite;\x0d\n  proto.ucs2Write = ucs2Write;\x0d\n  proto.utf8Write = utf8Write;\x0d\n}\x0d\n\x0d\n// This would better be placed in internal/worker/io.js\x2C but that doesn't work\x0d\n// because Buffer needs this and that would introduce a cyclic dependency.\x0d\nfunction markAsUntransferable(obj) {\x0d\n  if ((typeof obj !== 'object' && typeof obj !== 'function') || obj === null)\x0d\n    return;  // This object is a primitive and therefore already untransferable.\x0d\n  setHiddenValue(obj\x2C untransferable_object_private_symbol\x2C true);\x0d\n}\x0d\n\x0d\n// A toggle used to access the zero fill setting of the array buffer allocator\x0d\n// in C++.\x0d\n// |zeroFill| can be undefined when running inside an isolate where we\x0d\n// do not own the ArrayBuffer allocator.  Zero fill is always on in that case.\x0d\nlet zeroFill = getZeroFillToggle();\x0d\nfunction createUnsafeBuffer(size) {\x0d\n  zeroFill[0] = 0;\x0d\n  try {\x0d\n    return new FastBuffer(size);\x0d\n  } finally {\x0d\n    zeroFill[0] = 1;\x0d\n  }\x0d\n}\x0d\n\x0d\n// The connection between the JS land zero fill toggle and the\x0d\n// C++ one in the NodeArrayBufferAllocator gets lost if the toggle\x0d\n// is deserialized from the snapshot\x2C because V8 owns the underlying\x0d\n// memory of this toggle. This resets the connection.\x0d\nfunction reconnectZeroFillToggle() {\x0d\n  zeroFill = getZeroFillToggle();\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  FastBuffer\x2C\x0d\n  addBufferPrototypeMethods\x2C\x0d\n  markAsUntransferable\x2C\x0d\n  createUnsafeBuffer\x2C\x0d\n  readUInt16BE\x2C\x0d\n  readUInt32BE\x2C\x0d\n  reconnectZeroFillToggle\x0d\n};\x0d\n
code-source-info,0x2e2fa68664e,25,31788,31830,C0O31796C5O31807C11O31805C18O31829,,
code-creation,LazyCompile,10,302191,0x2e2fa688e86,397,patchProcessObject node:internal/bootstrap/pre_execution:81:28,0x2e2fa681f60,~
code-source-info,0x2e2fa688e
code-creation,LazyCompile,10,302431,0x2e2fa689316,69,refreshHrtimeBuffer node:internal/process/per_thread:66:29,0x3d773fd8538,~
script-source,30,node:internal/process/per_thread,'use strict';\x0d\n\x0d\n// This files contains process bootstrappers that can be\x0d\n// run when setting up each thread\x2C including the main\x0d\n// thread and the worker threads.\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeEvery\x2C\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  ArrayPrototypeIncludes\x2C\x0d\n  ArrayPrototypeMap\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeSplice\x2C\x0d\n  BigUint64Array\x2C\x0d\n  Float64Array\x2C\x0d\n  NumberMAX_SAFE_INTEGER\x2C\x0d\n  ObjectFreeze\x2C\x0d\n  ReflectApply\x2C\x0d\n  RegExpPrototypeTest\x2C\x0d\n  SafeArrayIterator\x2C\x0d\n  Set\x2C\x0d\n  SetPrototypeEntries\x2C\x0d\n  SetPrototypeValues\x2C\x0d\n  StringPrototypeEndsWith\x2C\x0d\n  StringPrototypeReplace\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n  Symbol\x2C\x0d\n  SymbolIterator\x2C\x0d\n  Uint32Array\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  errnoException\x2C\x0d\n  codes: {\x0d\n    ERR_ASSERTION\x2C\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_OUT_OF_RANGE\x2C\x0d\n    ERR_UNKNOWN_SIGNAL\x0d\n  }\x0d\n} = require('internal/errors');\x0d\nconst format = require('internal/util/inspect').format;\x0d\nconst {\x0d\n  validateArray\x2C\x0d\n  validateNumber\x2C\x0d\n  validateObject\x2C\x0d\n} = require('internal/validators');\x0d\nconst constants = internalBinding('constants').os.signals;\x0d\n\x0d\nconst {\x0d\n  handleProcessExit\x2C\x0d\n} = require('internal/modules/esm/handle_process_exit');\x0d\n\x0d\nconst kInternal = Symbol('internal properties');\x0d\n\x0d\nfunction assert(x\x2C msg) {\x0d\n  if (!x) throw new ERR_ASSERTION(msg || 'assertion error');\x0d\n}\x0d\n\x0d\nconst binding = internalBinding('process_methods');\x0d\n\x0d\nlet hrValues;\x0d\nlet hrBigintValues;\x0d\n\x0d\nfunction refreshHrtimeBuffer() {\x0d\n  // The 3 entries filled in by the original process.hrtime contains\x0d\n  // the upper/lower 32 bits of the second part of the value\x2C\x0d\n  // and the remaining nanoseconds of the value.\x0d\n  hrValues = new Uint32Array(binding.hrtimeBuffer);\x0d\n  // Use a BigUint64Array in the closure because this is actually a bit\x0d\n  // faster than simply returning a BigInt from C++ in V8 7.1.\x0d\n  hrBigintValues = new BigUint64Array(binding.hrtimeBuffer\x2C 0\x2C 1);\x0d\n}\x0d\n\x0d\n// Create the buffers.\x0d\nrefreshHrtimeBuffer();\x0d\n\x0d\nfunction hrtime(time) {\x0d\n  binding.hrtime();\x0d\n\x0d\n  if (time !== undefined) {\x0d\n    validateArray(time\x2C 'time');\x0d\n    if (time.length !== 2) {\x0d\n      throw new ERR_OUT_OF_RANGE('time'\x2C 2\x2C time.length);\x0d\n    }\x0d\n\x0d\n    const sec = (hrValues[0] * 0x100000000 + hrValues[1]) - time[0];\x0d\n    const nsec = hrValues[2] - time[1];\x0d\n    const needsBorrow = nsec < 0;\x0d\n    return [needsBorrow ? sec - 1 : sec\x2C needsBorrow ? nsec + 1e9 : nsec];\x0d\n  }\x0d\n\x0d\n  return [\x0d\n    hrValues[0] * 0x100000000 + hrValues[1]\x2C\x0d\n    hrValues[2]\x2C\x0d\n  ];\x0d\n}\x0d\n\x0d\nfunction hrtimeBigInt() {\x0d\n  binding.hrtimeBigInt();\x0d\n  return hrBigintValues[0];\x0d\n}\x0d\n\x0d\n// The execution of this function itself should not cause any side effects.\x0d\nfunction wrapProcessMethods(binding) {\x0d\n  const {\x0d\n    cpuUsage: _cpuUsage\x2C\x0d\n    memoryUsage: _memoryUsage\x2C\x0d\n    rss\x2C\x0d\n    resourceUsage: _resourceUsage\x0d\n  } = binding;\x0d\n\x0d\n  function _rawDebug(...args) {\x0d\n    binding._rawDebug(ReflectApply(format\x2C null\x2C args));\x0d\n  }\x0d\n\x0d\n  // Create the argument array that will be passed to the native function.\x0d\n  const cpuValues = new Float64Array(2);\x0d\n\x0d\n  // Replace the native function with the JS version that calls the native\x0d\n  // function.\x0d\n  function cpuUsage(prevValue) {\x0d\n    // If a previous value was passed in\x2C ensure it has the correct shape.\x0d\n    if (prevValue) {\x0d\n      if (!previousValueIsValid(prevValue.user)) {\x0d\n        validateObject(prevValue\x2C 'prevValue');\x0d\n\x0d\n        validateNumber(prevValue.user\x2C 'prevValue.user');\x0d\n        throw new ERR_INVALID_ARG_VALUE.RangeError('prevValue.user'\x2C\x0d\n                                                   prevValue.user);\x0d\n      }\x0d\n\x0d\n      if (!previousValueIsValid(prevValue.system)) {\x0d\n        validateNumber(prevValue.system\x2C 'prevValue.system');\x0d\n        throw new ERR_INVALID_ARG_VALUE.RangeError('prevValue.system'\x2C\x0d\n                                                   prevValue.system);\x0d\n      }\x0d\n    }\x0d\n\x0d\n    // Call the native function to get the current values.\x0d\n    _cpuUsage(cpuValues);\x0d\n\x0d\n    // If a previous value was passed in\x2C return diff of current from previous.\x0d\n    if (prevValue) {\x0d\n      return {\x0d\n        user: cpuValues[0] - prevValue.user\x2C\x0d\n        system: cpuValues[1] - prevValue.system\x0d\n      };\x0d\n    }\x0d\n\x0d\n    // If no previous value passed in\x2C return current value.\x0d\n    return {\x0d\n      user: cpuValues[0]\x2C\x0d\n      system: cpuValues[1]\x0d\n    };\x0d\n  }\x0d\n\x0d\n  // Ensure that a previously passed in value is valid. Currently\x2C the native\x0d\n  // implementation always returns numbers <= Number.MAX_SAFE_INTEGER.\x0d\n  function previousValueIsValid(num) {\x0d\n    return typeof num === 'number' &&\x0d\n        num <= NumberMAX_SAFE_INTEGER &&\x0d\n        num >= 0;\x0d\n  }\x0d\n\x0d\n  const memValues = new Float64Array(5);\x0d\n  function memoryUsage() {\x0d\n    _memoryUsage(memValues);\x0d\n    return {\x0d\n      rss: memValues[0]\x2C\x0d\n      heapTotal: memValues[1]\x2C\x0d\n      heapUsed: memValues[2]\x2C\x0d\n      external: memValues[3]\x2C\x0d\n      arrayBuffers: memValues[4]\x0d\n    };\x0d\n  }\x0d\n\x0d\n  memoryUsage.rss = rss;\x0d\n\x0d\n  function exit(code) {\x0d\n    process.off('exit'\x2C handleProcessExit);\x0d\n\x0d\n    if (code || code === 0)\x0d\n      process.exitCode = code;\x0d\n\x0d\n    if (!process._exiting) {\x0d\n      process._exiting = true;\x0d\n      process.emit('exit'\x2C process.exitCode || 0);\x0d\n    }\x0d\n    // FIXME(joyeecheung): This is an undocumented API that gets monkey-patched\x0d\n    // in the user land. Either document it\x2C or deprecate it in favor of a\x0d\n    // better public alternative.\x0d\n    process.reallyExit(process.exitCode || 0);\x0d\n  }\x0d\n\x0d\n  function kill(pid\x2C sig) {\x0d\n    let err;\x0d\n\x0d\n    // eslint-disable-next-line eqeqeq\x0d\n    if (pid != (pid | 0)) {\x0d\n      throw new ERR_INVALID_ARG_TYPE('pid'\x2C 'number'\x2C pid);\x0d\n    }\x0d\n\x0d\n    // Preserve null signal\x0d\n    if (sig === (sig | 0)) {\x0d\n      // XXX(joyeecheung): we have to use process._kill here because\x0d\n      // it's monkey-patched by tests.\x0d\n      err = process._kill(pid\x2C sig);\x0d\n    } else {\x0d\n      sig = sig || 'SIGTERM';\x0d\n      if (constants[sig]) {\x0d\n        err = process._kill(pid\x2C constants[sig]);\x0d\n      } else {\x0d\n        throw new ERR_UNKNOWN_SIGNAL(sig);\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (err)\x0d\n      throw errnoException(err\x2C 'kill');\x0d\n\x0d\n    return true;\x0d\n  }\x0d\n\x0d\n  const resourceValues = new Float64Array(16);\x0d\n  function resourceUsage() {\x0d\n    _resourceUsage(resourceValues);\x0d\n    return {\x0d\n      userCPUTime: resourceValues[0]\x2C\x0d\n      systemCPUTime: resourceValues[1]\x2C\x0d\n      maxRSS: resourceValues[2]\x2C\x0d\n      sharedMemorySize: resourceValues[3]\x2C\x0d\n      unsharedDataSize: resourceValues[4]\x2C\x0d\n      unsharedStackSize: resourceValues[5]\x2C\x0d\n      minorPageFault: resourceValues[6]\x2C\x0d\n      majorPageFault: resourceValues[7]\x2C\x0d\n      swappedOut: resourceValues[8]\x2C\x0d\n      fsRead: resourceValues[9]\x2C\x0d\n      fsWrite: resourceValues[10]\x2C\x0d\n      ipcSent: resourceValues[11]\x2C\x0d\n      ipcReceived: resourceValues[12]\x2C\x0d\n      signalsCount: resourceValues[13]\x2C\x0d\n      voluntaryContextSwitches: resourceValues[14]\x2C\x0d\n      involuntaryContextSwitches: resourceValues[15]\x0d\n    };\x0d\n  }\x0d\n\x0d\n\x0d\n  return {\x0d\n    _rawDebug\x2C\x0d\n    cpuUsage\x2C\x0d\n    resourceUsage\x2C\x0d\n    memoryUsage\x2C\x0d\n    kill\x2C\x0d\n    exit\x0d\n  };\x0d\n}\x0d\n\x0d\nconst replaceUnderscoresRegex = /_/g;\x0d\nconst leadingDashesRegex = /^--?/;\x0d\nconst trailingValuesRegex = /=.*$/;\x0d\n\x0d\n// This builds the initial process.allowedNodeEnvironmentFlags\x0d\n// from data in the config binding.\x0d\nfunction buildAllowedFlags() {\x0d\n  const {\x0d\n    envSettings: { kAllowedInEnvironment }\x2C\x0d\n    types: { kBoolean }\x2C\x0d\n  } = internalBinding('options');\x0d\n  const { options\x2C aliases } = require('internal/options');\x0d\n\x0d\n  const allowedNodeEnvironmentFlags = [];\x0d\n  for (const { 0: name\x2C 1: info } of options) {\x0d\n    if (info.envVarSettings === kAllowedInEnvironment) {\x0d\n      ArrayPrototypePush(allowedNodeEnvironmentFlags\x2C name);\x0d\n      if (info.type === kBoolean) {\x0d\n        const negatedName = `--no-${name.slice(2)}`;\x0d\n        ArrayPrototypePush(allowedNodeEnvironmentFlags\x2C negatedName);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  function isAccepted(to) {\x0d\n    if (!StringPrototypeStartsWith(to\x2C '-') || to === '--') return true;\x0d\n    const recursiveExpansion = aliases.get(to);\x0d\n    if (recursiveExpansion) {\x0d\n      if (recursiveExpansion[0] === to)\x0d\n        ArrayPrototypeSplice(recursiveExpansion\x2C 0\x2C 1);\x0d\n      return ArrayPrototypeEvery(recursiveExpansion\x2C isAccepted);\x0d\n    }\x0d\n    return options.get(to).envVarSettings === kAllowedInEnvironment;\x0d\n  }\x0d\n  for (const { 0: from\x2C 1: expansion } of aliases) {\x0d\n    if (ArrayPrototypeEvery(expansion\x2C isAccepted)) {\x0d\n      let canonical = from;\x0d\n      if (StringPrototypeEndsWith(canonical\x2C '='))\x0d\n        canonical = StringPrototypeSlice(canonical\x2C 0\x2C canonical.length - 1);\x0d\n      if (StringPrototypeEndsWith(canonical\x2C ' <arg>'))\x0d\n        canonical = StringPrototypeSlice(canonical\x2C 0\x2C canonical.length - 4);\x0d\n      ArrayPrototypePush(allowedNodeEnvironmentFlags\x2C canonical);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  const trimLeadingDashes =\x0d\n    (flag) => StringPrototypeReplace(flag\x2C leadingDashesRegex\x2C '');\x0d\n\x0d\n  // Save these for comparison against flags provided to\x0d\n  // process.allowedNodeEnvironmentFlags.has() which lack leading dashes.\x0d\n  const nodeFlags = ArrayPrototypeMap(allowedNodeEnvironmentFlags\x2C\x0d\n                                      trimLeadingDashes);\x0d\n\x0d\n  class NodeEnvironmentFlagsSet extends Set {\x0d\n    constructor(array) {\x0d\n      super();\x0d\n      this[kInternal] = { array };\x0d\n    }\x0d\n\x0d\n    add() {\x0d\n      // No-op\x2C `Set` API compatible\x0d\n      return this;\x0d\n    }\x0d\n\x0d\n    delete() {\x0d\n      // No-op\x2C `Set` API compatible\x0d\n      return false;\x0d\n    }\x0d\n\x0d\n    clear() {\x0d\n      // No-op\x2C `Set` API compatible\x0d\n    }\x0d\n\x0d\n    has(key) {\x0d\n      // This will return `true` based on various possible\x0d\n      // permutations of a flag\x2C including present/missing leading\x0d\n      // dash(es) and/or underscores-for-dashes.\x0d\n      // Strips any values after `=`\x2C inclusive.\x0d\n      // TODO(addaleax): It might be more flexible to run the option parser\x0d\n      // on a dummy option set and see whether it rejects the argument or\x0d\n      // not.\x0d\n      if (typeof key === 'string') {\x0d\n        key = StringPrototypeReplace(key\x2C replaceUnderscoresRegex\x2C '-');\x0d\n        if (RegExpPrototypeTest(leadingDashesRegex\x2C key)) {\x0d\n          key = StringPrototypeReplace(key\x2C trailingValuesRegex\x2C '');\x0d\n          return ArrayPrototypeIncludes(this[kInternal].array\x2C key);\x0d\n        }\x0d\n        return ArrayPrototypeIncludes(nodeFlags\x2C key);\x0d\n      }\x0d\n      return false;\x0d\n    }\x0d\n\x0d\n    entries() {\x0d\n      this[kInternal].set ??=\x0d\n        new Set(new SafeArrayIterator(this[kInternal].array));\x0d\n      return SetPrototypeEntries(this[kInternal].set);\x0d\n    }\x0d\n\x0d\n    forEach(callback\x2C thisArg = undefined) {\x0d\n      ArrayPrototypeForEach(\x0d\n        this[kInternal].array\x2C\x0d\n        (v) => ReflectApply(callback\x2C thisArg\x2C [v\x2C v\x2C this])\x0d\n      );\x0d\n    }\x0d\n\x0d\n    get size() {\x0d\n      return this[kInternal].array.length;\x0d\n    }\x0d\n\x0d\n    values() {\x0d\n      this[kInternal].set ??=\x0d\n        new Set(new SafeArrayIterator(this[kInternal].array));\x0d\n      return SetPrototypeValues(this[kInternal].set);\x0d\n    }\x0d\n  }\x0d\n  NodeEnvironmentFlagsSet.prototype.keys =\x0d\n  NodeEnvironmentFlagsSet.prototype[SymbolIterator] =\x0d\n    NodeEnvironmentFlagsSet.prototype.values;\x0d\n\x0d\n  ObjectFreeze(NodeEnvironmentFlagsSet.prototype.constructor);\x0d\n  ObjectFreeze(NodeEnvironmentFlagsSet.prototype);\x0d\n\x0d\n  return ObjectFreeze(new NodeEnvironmentFlagsSet(\x0d\n    allowedNodeEnvironmentFlags\x0d\n  ));\x0d\n}\x0d\n\x0d\n// Lazy load internal/trace_events_async_hooks only if the async_hooks\x0d\n// trace event category is enabled.\x0d\nlet traceEventsAsyncHook;\x0d\n// Dynamically enable/disable the traceEventsAsyncHook\x0d\nfunction toggleTraceCategoryState(asyncHooksEnabled) {\x0d\n  if (asyncHooksEnabled) {\x0d\n    if (!traceEventsAsyncHook) {\x0d\n      traceEventsAsyncHook =\x0d\n        require('internal/trace_events_async_hooks').createHook();\x0d\n    }\x0d\n    traceEventsAsyncHook.enable();\x0d\n  } else if (traceEventsAsyncHook) {\x0d\n    traceEventsAsyncHook.disable();\x0d\n  }\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  toggleTraceCategoryState\x2C\x0d\n  assert\x2C\x0d\n  buildAllowedFlags\x2C\x0d\n  wrapProcessMethods\x2C\x0d\n  hrtime\x2C\x0d\n  hrtimeBigInt\x2C\x0d\n  refreshHrtimeBuffer\x2C\x0d\n};\x0d\n
code-source-info,0x2e2fa689316,30,1477,1925,C0O1668C7O1695C10O1703C17O1679C25O1677C31O1858C38O1894C41O1902C53O1875C61O1873C68O1924,,
code-creation,LazyCompile,10,303703,0x2e2fa68a3d6,832,resolve node:path:158:10,0x14570b4d510,~
script-source,41,node:path,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  FunctionPrototypeBind\x2C\x0d\n  StringPrototypeCharCodeAt\x2C\x0d\n  StringPrototypeIndexOf\x2C\x0d\n  StringPrototypeLastIndexOf\x2C\x0d\n  StringPrototypeReplace\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeToLowerCase\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  CHAR_UPPERCASE_A\x2C\x0d\n  CHAR_LOWERCASE_A\x2C\x0d\n  CHAR_UPPERCASE_Z\x2C\x0d\n  CHAR_LOWERCASE_Z\x2C\x0d\n  CHAR_DOT\x2C\x0d\n  CHAR_FORWARD_SLASH\x2C\x0d\n  CHAR_BACKWARD_SLASH\x2C\x0d\n  CHAR_COLON\x2C\x0d\n  CHAR_QUESTION_MARK\x2C\x0d\n} = require('internal/constants');\x0d\nconst {\x0d\n  validateObject\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst platformIsWin32 = (process.platform === 'win32');\x0d\n\x0d\nfunction isPathSeparator(code) {\x0d\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\x0d\n}\x0d\n\x0d\nfunction isPosixPathSeparator(code) {\x0d\n  return code === CHAR_FORWARD_SLASH;\x0d\n}\x0d\n\x0d\nfunction isWindowsDeviceRoot(code) {\x0d\n  return (code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z) ||\x0d\n         (code >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z);\x0d\n}\x0d\n\x0d\n// Resolves . and .. elements in a path with directory names\x0d\nfunction normalizeString(path\x2C allowAboveRoot\x2C separator\x2C isPathSeparator) {\x0d\n  let res = '';\x0d\n  let lastSegmentLength = 0;\x0d\n  let lastSlash = -1;\x0d\n  let dots = 0;\x0d\n  let code = 0;\x0d\n  for (let i = 0; i <= path.length; ++i) {\x0d\n    if (i < path.length)\x0d\n      code = StringPrototypeCharCodeAt(path\x2C i);\x0d\n    else if (isPathSeparator(code))\x0d\n      break;\x0d\n    else\x0d\n      code = CHAR_FORWARD_SLASH;\x0d\n\x0d\n    if (isPathSeparator(code)) {\x0d\n      if (lastSlash === i - 1 || dots === 1) {\x0d\n        // NOOP\x0d\n      } else if (dots === 2) {\x0d\n        if (res.length < 2 || lastSegmentLength !== 2 ||\x0d\n            StringPrototypeCharCodeAt(res\x2C res.length - 1) !== CHAR_DOT ||\x0d\n            StringPrototypeCharCodeAt(res\x2C res.length - 2) !== CHAR_DOT) {\x0d\n          if (res.length > 2) {\x0d\n            const lastSlashIndex = StringPrototypeLastIndexOf(res\x2C separator);\x0d\n            if (lastSlashIndex === -1) {\x0d\n              res = '';\x0d\n              lastSegmentLength = 0;\x0d\n            } else {\x0d\n              res = StringPrototypeSlice(res\x2C 0\x2C lastSlashIndex);\x0d\n              lastSegmentLength =\x0d\n                res.length - 1 - StringPrototypeLastIndexOf(res\x2C separator);\x0d\n            }\x0d\n            lastSlash = i;\x0d\n            dots = 0;\x0d\n            continue;\x0d\n          } else if (res.length !== 0) {\x0d\n            res = '';\x0d\n            lastSegmentLength = 0;\x0d\n            lastSlash = i;\x0d\n            dots = 0;\x0d\n            continue;\x0d\n          }\x0d\n        }\x0d\n        if (allowAboveRoot) {\x0d\n          res += res.length > 0 ? `${separator}..` : '..';\x0d\n          lastSegmentLength = 2;\x0d\n        }\x0d\n      } else {\x0d\n        if (res.length > 0)\x0d\n          res += `${separator}${StringPrototypeSlice(path\x2C lastSlash + 1\x2C i)}`;\x0d\n        else\x0d\n          res = StringPrototypeSlice(path\x2C lastSlash + 1\x2C i);\x0d\n        lastSegmentLength = i - lastSlash - 1;\x0d\n      }\x0d\n      lastSlash = i;\x0d\n      dots = 0;\x0d\n    } else if (code === CHAR_DOT && dots !== -1) {\x0d\n      ++dots;\x0d\n    } else {\x0d\n      dots = -1;\x0d\n    }\x0d\n  }\x0d\n  return res;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} sep\x0d\n * @param {{\x0d\n *  dir?: string;\x0d\n *  root?: string;\x0d\n *  base?: string;\x0d\n *  name?: string;\x0d\n *  ext?: string;\x0d\n *  }} pathObject\x0d\n * @returns {string}\x0d\n */\x0d\nfunction _format(sep\x2C pathObject) {\x0d\n  validateObject(pathObject\x2C 'pathObject');\x0d\n  const dir = pathObject.dir || pathObject.root;\x0d\n  const base = pathObject.base ||\x0d\n    `${pathObject.name || ''}${pathObject.ext || ''}`;\x0d\n  if (!dir) {\x0d\n    return base;\x0d\n  }\x0d\n  return dir === pathObject.root ? `${dir}${base}` : `${dir}${sep}${base}`;\x0d\n}\x0d\n\x0d\nconst win32 = {\x0d\n  /**\x0d\n   * path.resolve([from ...]\x2C to)\x0d\n   * @param {...string} args\x0d\n   * @returns {string}\x0d\n   */\x0d\n  resolve(...args) {\x0d\n    let resolvedDevice = '';\x0d\n    let resolvedTail = '';\x0d\n    let resolvedAbsolute = false;\x0d\n\x0d\n    for (let i = args.length - 1; i >= -1; i--) {\x0d\n      let path;\x0d\n      if (i >= 0) {\x0d\n        path = args[i];\x0d\n        validateString(path\x2C 'path');\x0d\n\x0d\n        // Skip empty entries\x0d\n        if (path.length === 0) {\x0d\n          continue;\x0d\n        }\x0d\n      } else if (resolvedDevice.length === 0) {\x0d\n        path = process.cwd();\x0d\n      } else {\x0d\n        // Windows has the concept of drive-specific current working\x0d\n        // directories. If we've resolved a drive letter but not yet an\x0d\n        // absolute path\x2C get cwd for that drive\x2C or the process cwd if\x0d\n        // the drive cwd is not available. We're sure the device is not\x0d\n        // a UNC path at this points\x2C because UNC paths are always absolute.\x0d\n        path = process.env[`=${resolvedDevice}`] || process.cwd();\x0d\n\x0d\n        // Verify that a cwd was found and that it actually points\x0d\n        // to our drive. If not\x2C default to the drive's root.\x0d\n        if (path === undefined ||\x0d\n            (StringPrototypeToLowerCase(StringPrototypeSlice(path\x2C 0\x2C 2)) !==\x0d\n            StringPrototypeToLowerCase(resolvedDevice) &&\x0d\n            StringPrototypeCharCodeAt(path\x2C 2) === CHAR_BACKWARD_SLASH)) {\x0d\n          path = `${resolvedDevice}\\\\`;\x0d\n        }\x0d\n      }\x0d\n\x0d\n      const len = path.length;\x0d\n      let rootEnd = 0;\x0d\n      let device = '';\x0d\n      let isAbsolute = false;\x0d\n      const code = StringPrototypeCharCodeAt(path\x2C 0);\x0d\n\x0d\n      // Try to match a root\x0d\n      if (len === 1) {\x0d\n        if (isPathSeparator(code)) {\x0d\n          // `path` contains just a path separator\x0d\n          rootEnd = 1;\x0d\n          isAbsolute = true;\x0d\n        }\x0d\n      } else if (isPathSeparator(code)) {\x0d\n        // Possible UNC root\x0d\n\x0d\n        // If we started with a separator\x2C we know we at least have an\x0d\n        // absolute path of some kind (UNC or otherwise)\x0d\n        isAbsolute = true;\x0d\n\x0d\n        if (isPathSeparator(StringPrototypeCharCodeAt(path\x2C 1))) {\x0d\n          // Matched double path separator at beginning\x0d\n          let j = 2;\x0d\n          let last = j;\x0d\n          // Match 1 or more non-path separators\x0d\n          while (j < len &&\x0d\n                 !isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n            j++;\x0d\n          }\x0d\n          if (j < len && j !== last) {\x0d\n            const firstPart = StringPrototypeSlice(path\x2C last\x2C j);\x0d\n            // Matched!\x0d\n            last = j;\x0d\n            // Match 1 or more path separators\x0d\n            while (j < len &&\x0d\n                   isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n              j++;\x0d\n            }\x0d\n            if (j < len && j !== last) {\x0d\n              // Matched!\x0d\n              last = j;\x0d\n              // Match 1 or more non-path separators\x0d\n              while (j < len &&\x0d\n                     !isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n                j++;\x0d\n              }\x0d\n              if (j === len || j !== last) {\x0d\n                // We matched a UNC root\x0d\n                device =\x0d\n                  `\\\\\\\\${firstPart}\\\\${StringPrototypeSlice(path\x2C last\x2C j)}`;\x0d\n                rootEnd = j;\x0d\n              }\x0d\n            }\x0d\n          }\x0d\n        } else {\x0d\n          rootEnd = 1;\x0d\n        }\x0d\n      } else if (isWindowsDeviceRoot(code) &&\x0d\n                  StringPrototypeCharCodeAt(path\x2C 1) === CHAR_COLON) {\x0d\n        // Possible device root\x0d\n        device = StringPrototypeSlice(path\x2C 0\x2C 2);\x0d\n        rootEnd = 2;\x0d\n        if (len > 2 && isPathSeparator(StringPrototypeCharCodeAt(path\x2C 2))) {\x0d\n          // Treat separator following drive name as an absolute path\x0d\n          // indicator\x0d\n          isAbsolute = true;\x0d\n          rootEnd = 3;\x0d\n        }\x0d\n      }\x0d\n\x0d\n      if (device.length > 0) {\x0d\n        if (resolvedDevice.length > 0) {\x0d\n          if (StringPrototypeToLowerCase(device) !==\x0d\n              StringPrototypeToLowerCase(resolvedDevice))\x0d\n            // This path points to another device so it is not applicable\x0d\n            continue;\x0d\n        } else {\x0d\n          resolvedDevice = device;\x0d\n        }\x0d\n      }\x0d\n\x0d\n      if (resolvedAbsolute) {\x0d\n        if (resolvedDevice.length > 0)\x0d\n          break;\x0d\n      } else {\x0d\n        resolvedTail =\x0d\n          `${StringPrototypeSlice(path\x2C rootEnd)}\\\\${resolvedTail}`;\x0d\n        resolvedAbsolute = isAbsolute;\x0d\n        if (isAbsolute && resolvedDevice.length > 0) {\x0d\n          break;\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n\x0d\n    // At this point the path should be resolved to a full absolute path\x2C\x0d\n    // but handle relative paths to be safe (might happen when process.cwd()\x0d\n    // fails)\x0d\n\x0d\n    // Normalize the tail path\x0d\n    resolvedTail = normalizeString(resolvedTail\x2C !resolvedAbsolute\x2C '\\\\'\x2C\x0d\n                                   isPathSeparator);\x0d\n\x0d\n    return resolvedAbsolute ?\x0d\n      `${resolvedDevice}\\\\${resolvedTail}` :\x0d\n      `${resolvedDevice}${resolvedTail}` || '.';\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {string}\x0d\n   */\x0d\n  normalize(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n    const len = path.length;\x0d\n    if (len === 0)\x0d\n      return '.';\x0d\n    let rootEnd = 0;\x0d\n    let device;\x0d\n    let isAbsolute = false;\x0d\n    const code = StringPrototypeCharCodeAt(path\x2C 0);\x0d\n\x0d\n    // Try to match a root\x0d\n    if (len === 1) {\x0d\n      // `path` contains just a single char\x2C exit early to avoid\x0d\n      // unnecessary work\x0d\n      return isPosixPathSeparator(code) ? '\\\\' : path;\x0d\n    }\x0d\n    if (isPathSeparator(code)) {\x0d\n      // Possible UNC root\x0d\n\x0d\n      // If we started with a separator\x2C we know we at least have an absolute\x0d\n      // path of some kind (UNC or otherwise)\x0d\n      isAbsolute = true;\x0d\n\x0d\n      if (isPathSeparator(StringPrototypeCharCodeAt(path\x2C 1))) {\x0d\n        // Matched double path separator at beginning\x0d\n        let j = 2;\x0d\n        let last = j;\x0d\n        // Match 1 or more non-path separators\x0d\n        while (j < len &&\x0d\n               !isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n          j++;\x0d\n        }\x0d\n        if (j < len && j !== last) {\x0d\n          const firstPart = StringPrototypeSlice(path\x2C last\x2C j);\x0d\n          // Matched!\x0d\n          last = j;\x0d\n          // Match 1 or more path separators\x0d\n          while (j < len &&\x0d\n                 isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n            j++;\x0d\n          }\x0d\n          if (j < len && j !== last) {\x0d\n            // Matched!\x0d\n            last = j;\x0d\n            // Match 1 or more non-path separators\x0d\n            while (j < len &&\x0d\n                   !isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n              j++;\x0d\n            }\x0d\n            if (j === len) {\x0d\n              // We matched a UNC root only\x0d\n              // Return the normalized version of the UNC root since there\x0d\n              // is nothing left to process\x0d\n              return `\\\\\\\\${firstPart}\\\\${StringPrototypeSlice(path\x2C last)}\\\\`;\x0d\n            }\x0d\n            if (j !== last) {\x0d\n              // We matched a UNC root with leftovers\x0d\n              device =\x0d\n                `\\\\\\\\${firstPart}\\\\${StringPrototypeSlice(path\x2C last\x2C j)}`;\x0d\n              rootEnd = j;\x0d\n            }\x0d\n          }\x0d\n        }\x0d\n      } else {\x0d\n        rootEnd = 1;\x0d\n      }\x0d\n    } else if (isWindowsDeviceRoot(code) &&\x0d\n               StringPrototypeCharCodeAt(path\x2C 1) === CHAR_COLON) {\x0d\n      // Possible device root\x0d\n      device = StringPrototypeSlice(path\x2C 0\x2C 2);\x0d\n      rootEnd = 2;\x0d\n      if (len > 2 && isPathSeparator(StringPrototypeCharCodeAt(path\x2C 2))) {\x0d\n        // Treat separator following drive name as an absolute path\x0d\n        // indicator\x0d\n        isAbsolute = true;\x0d\n        rootEnd = 3;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    let tail = rootEnd < len ?\x0d\n      normalizeString(StringPrototypeSlice(path\x2C rootEnd)\x2C\x0d\n                      !isAbsolute\x2C '\\\\'\x2C isPathSeparator) :\x0d\n      '';\x0d\n    if (tail.length === 0 && !isAbsolute)\x0d\n      tail = '.';\x0d\n    if (tail.length > 0 &&\x0d\n        isPathSeparator(StringPrototypeCharCodeAt(path\x2C len - 1)))\x0d\n      tail += '\\\\';\x0d\n    if (device === undefined) {\x0d\n      return isAbsolute ? `\\\\${tail}` : tail;\x0d\n    }\x0d\n    return isAbsolute ? `${device}\\\\${tail}` : `${device}${tail}`;\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {boolean}\x0d\n   */\x0d\n  isAbsolute(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n    const len = path.length;\x0d\n    if (len === 0)\x0d\n      return false;\x0d\n\x0d\n    const code = StringPrototypeCharCodeAt(path\x2C 0);\x0d\n    return isPathSeparator(code) ||\x0d\n      // Possible device root\x0d\n      (len > 2 &&\x0d\n      isWindowsDeviceRoot(code) &&\x0d\n      StringPrototypeCharCodeAt(path\x2C 1) === CHAR_COLON &&\x0d\n      isPathSeparator(StringPrototypeCharCodeAt(path\x2C 2)));\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {...string} args\x0d\n   * @returns {string}\x0d\n   */\x0d\n  join(...args) {\x0d\n    if (args.length === 0)\x0d\n      return '.';\x0d\n\x0d\n    let joined;\x0d\n    let firstPart;\x0d\n    for (let i = 0; i < args.length; ++i) {\x0d\n      const arg = args[i];\x0d\n      validateString(arg\x2C 'path');\x0d\n      if (arg.length > 0) {\x0d\n        if (joined === undefined)\x0d\n          joined = firstPart = arg;\x0d\n        else\x0d\n          joined += `\\\\${arg}`;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (joined === undefined)\x0d\n      return '.';\x0d\n\x0d\n    // Make sure that the joined path doesn't start with two slashes\x2C because\x0d\n    // normalize() will mistake it for a UNC path then.\x0d\n    //\x0d\n    // This step is skipped when it is very clear that the user actually\x0d\n    // intended to point at a UNC path. This is assumed when the first\x0d\n    // non-empty string arguments starts with exactly two slashes followed by\x0d\n    // at least one more non-slash character.\x0d\n    //\x0d\n    // Note that for normalize() to treat a path as a UNC path it needs to\x0d\n    // have at least 2 components\x2C so we don't filter for that here.\x0d\n    // This means that the user can use join to construct UNC paths from\x0d\n    // a server name and a share name; for example:\x0d\n    //   path.join('//server'\x2C 'share') -> '\\\\\\\\server\\\\share\\\\')\x0d\n    let needsReplace = true;\x0d\n    let slashCount = 0;\x0d\n    if (isPathSeparator(StringPrototypeCharCodeAt(firstPart\x2C 0))) {\x0d\n      ++slashCount;\x0d\n      const firstLen = firstPart.length;\x0d\n      if (firstLen > 1 &&\x0d\n          isPathSeparator(StringPrototypeCharCodeAt(firstPart\x2C 1))) {\x0d\n        ++slashCount;\x0d\n        if (firstLen > 2) {\x0d\n          if (isPathSeparator(StringPrototypeCharCodeAt(firstPart\x2C 2)))\x0d\n            ++slashCount;\x0d\n          else {\x0d\n            // We matched a UNC path in the first part\x0d\n            needsReplace = false;\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n    if (needsReplace) {\x0d\n      // Find any more consecutive slashes we need to replace\x0d\n      while (slashCount < joined.length &&\x0d\n             isPathSeparator(StringPrototypeCharCodeAt(joined\x2C slashCount))) {\x0d\n        slashCount++;\x0d\n      }\x0d\n\x0d\n      // Replace the slashes if needed\x0d\n      if (slashCount >= 2)\x0d\n        joined = `\\\\${StringPrototypeSlice(joined\x2C slashCount)}`;\x0d\n    }\x0d\n\x0d\n    return win32.normalize(joined);\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * It will solve the relative path from `from` to `to`\x2C for instance\x0d\n   * from = 'C:\\\\orandea\\\\test\\\\aaa'\x0d\n   * to = 'C:\\\\orandea\\\\impl\\\\bbb'\x0d\n   * The output of the function should be: '..\\\\..\\\\impl\\\\bbb'\x0d\n   * @param {string} from\x0d\n   * @param {string} to\x0d\n   * @returns {string}\x0d\n   */\x0d\n  relative(from\x2C to) {\x0d\n    validateString(from\x2C 'from');\x0d\n    validateString(to\x2C 'to');\x0d\n\x0d\n    if (from === to)\x0d\n      return '';\x0d\n\x0d\n    const fromOrig = win32.resolve(from);\x0d\n    const toOrig = win32.resolve(to);\x0d\n\x0d\n    if (fromOrig === toOrig)\x0d\n      return '';\x0d\n\x0d\n    from = StringPrototypeToLowerCase(fromOrig);\x0d\n    to = StringPrototypeToLowerCase(toOrig);\x0d\n\x0d\n    if (from === to)\x0d\n      return '';\x0d\n\x0d\n    // Trim any leading backslashes\x0d\n    let fromStart = 0;\x0d\n    while (fromStart < from.length &&\x0d\n           StringPrototypeCharCodeAt(from\x2C fromStart) === CHAR_BACKWARD_SLASH) {\x0d\n      fromStart++;\x0d\n    }\x0d\n    // Trim trailing backslashes (applicable to UNC paths only)\x0d\n    let fromEnd = from.length;\x0d\n    while (\x0d\n      fromEnd - 1 > fromStart &&\x0d\n      StringPrototypeCharCodeAt(from\x2C fromEnd - 1) === CHAR_BACKWARD_SLASH\x0d\n    ) {\x0d\n      fromEnd--;\x0d\n    }\x0d\n    const fromLen = fromEnd - fromStart;\x0d\n\x0d\n    // Trim any leading backslashes\x0d\n    let toStart = 0;\x0d\n    while (toStart < to.length &&\x0d\n           StringPrototypeCharCodeAt(to\x2C toStart) === CHAR_BACKWARD_SLASH) {\x0d\n      toStart++;\x0d\n    }\x0d\n    // Trim trailing backslashes (applicable to UNC paths only)\x0d\n    let toEnd = to.length;\x0d\n    while (toEnd - 1 > toStart &&\x0d\n           StringPrototypeCharCodeAt(to\x2C toEnd - 1) === CHAR_BACKWARD_SLASH) {\x0d\n      toEnd--;\x0d\n    }\x0d\n    const toLen = toEnd - toStart;\x0d\n\x0d\n    // Compare paths to find the longest common path from root\x0d\n    const length = fromLen < toLen ? fromLen : toLen;\x0d\n    let lastCommonSep = -1;\x0d\n    let i = 0;\x0d\n    for (; i < length; i++) {\x0d\n      const fromCode = StringPrototypeCharCodeAt(from\x2C fromStart + i);\x0d\n      if (fromCode !== StringPrototypeCharCodeAt(to\x2C toStart + i))\x0d\n        break;\x0d\n      else if (fromCode === CHAR_BACKWARD_SLASH)\x0d\n        lastCommonSep = i;\x0d\n    }\x0d\n\x0d\n    // We found a mismatch before the first common path separator was seen\x2C so\x0d\n    // return the original `to`.\x0d\n    if (i !== length) {\x0d\n      if (lastCommonSep === -1)\x0d\n        return toOrig;\x0d\n    } else {\x0d\n      if (toLen > length) {\x0d\n        if (StringPrototypeCharCodeAt(to\x2C toStart + i) ===\x0d\n            CHAR_BACKWARD_SLASH) {\x0d\n          // We get here if `from` is the exact base path for `to`.\x0d\n          // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo\\\\bar\\\\baz'\x0d\n          return StringPrototypeSlice(toOrig\x2C toStart + i + 1);\x0d\n        }\x0d\n        if (i === 2) {\x0d\n          // We get here if `from` is the device root.\x0d\n          // For example: from='C:\\\\'; to='C:\\\\foo'\x0d\n          return StringPrototypeSlice(toOrig\x2C toStart + i);\x0d\n        }\x0d\n      }\x0d\n      if (fromLen > length) {\x0d\n        if (StringPrototypeCharCodeAt(from\x2C fromStart + i) ===\x0d\n            CHAR_BACKWARD_SLASH) {\x0d\n          // We get here if `to` is the exact base path for `from`.\x0d\n          // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo'\x0d\n          lastCommonSep = i;\x0d\n        } else if (i === 2) {\x0d\n          // We get here if `to` is the device root.\x0d\n          // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\'\x0d\n          lastCommonSep = 3;\x0d\n        }\x0d\n      }\x0d\n      if (lastCommonSep === -1)\x0d\n        lastCommonSep = 0;\x0d\n    }\x0d\n\x0d\n    let out = '';\x0d\n    // Generate the relative path based on the path difference between `to` and\x0d\n    // `from`\x0d\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\x0d\n      if (i === fromEnd ||\x0d\n          StringPrototypeCharCodeAt(from\x2C i) === CHAR_BACKWARD_SLASH) {\x0d\n        out += out.length === 0 ? '..' : '\\\\..';\x0d\n      }\x0d\n    }\x0d\n\x0d\n    toStart += lastCommonSep;\x0d\n\x0d\n    // Lastly\x2C append the rest of the destination (`to`) path that comes after\x0d\n    // the common path parts\x0d\n    if (out.length > 0)\x0d\n      return `${out}${StringPrototypeSlice(toOrig\x2C toStart\x2C toEnd)}`;\x0d\n\x0d\n    if (StringPrototypeCharCodeAt(toOrig\x2C toStart) === CHAR_BACKWARD_SLASH)\x0d\n      ++toStart;\x0d\n    return StringPrototypeSlice(toOrig\x2C toStart\x2C toEnd);\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {string}\x0d\n   */\x0d\n  toNamespacedPath(path) {\x0d\n    // Note: this will *probably* throw somewhere.\x0d\n    if (typeof path !== 'string' || path.length === 0)\x0d\n      return path;\x0d\n\x0d\n    const resolvedPath = win32.resolve(path);\x0d\n\x0d\n    if (resolvedPath.length <= 2)\x0d\n      return path;\x0d\n\x0d\n    if (StringPrototypeCharCodeAt(resolvedPath\x2C 0) === CHAR_BACKWARD_SLASH) {\x0d\n      // Possible UNC root\x0d\n      if (StringPrototypeCharCodeAt(resolvedPath\x2C 1) === CHAR_BACKWARD_SLASH) {\x0d\n        const code = StringPrototypeCharCodeAt(resolvedPath\x2C 2);\x0d\n        if (code !== CHAR_QUESTION_MARK && code !== CHAR_DOT) {\x0d\n          // Matched non-long UNC root\x2C convert the path to a long UNC path\x0d\n          return `\\\\\\\\?\\\\UNC\\\\${StringPrototypeSlice(resolvedPath\x2C 2)}`;\x0d\n        }\x0d\n      }\x0d\n    } else if (\x0d\n      isWindowsDeviceRoot(StringPrototypeCharCodeAt(resolvedPath\x2C 0)) &&\x0d\n      StringPrototypeCharCodeAt(resolvedPath\x2C 1) === CHAR_COLON &&\x0d\n      StringPrototypeCharCodeAt(resolvedPath\x2C 2) === CHAR_BACKWARD_SLASH\x0d\n    ) {\x0d\n      // Matched device root\x2C convert the path to a long UNC path\x0d\n      return `\\\\\\\\?\\\\${resolvedPath}`;\x0d\n    }\x0d\n\x0d\n    return path;\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {string}\x0d\n   */\x0d\n  dirname(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n    const len = path.length;\x0d\n    if (len === 0)\x0d\n      return '.';\x0d\n    let rootEnd = -1;\x0d\n    let offset = 0;\x0d\n    const code = StringPrototypeCharCodeAt(path\x2C 0);\x0d\n\x0d\n    if (len === 1) {\x0d\n      // `path` contains just a path separator\x2C exit early to avoid\x0d\n      // unnecessary work or a dot.\x0d\n      return isPathSeparator(code) ? path : '.';\x0d\n    }\x0d\n\x0d\n    // Try to match a root\x0d\n    if (isPathSeparator(code)) {\x0d\n      // Possible UNC root\x0d\n\x0d\n      rootEnd = offset = 1;\x0d\n\x0d\n      if (isPathSeparator(StringPrototypeCharCodeAt(path\x2C 1))) {\x0d\n        // Matched double path separator at beginning\x0d\n        let j = 2;\x0d\n        let last = j;\x0d\n        // Match 1 or more non-path separators\x0d\n        while (j < len &&\x0d\n               !isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n          j++;\x0d\n        }\x0d\n        if (j < len && j !== last) {\x0d\n          // Matched!\x0d\n          last = j;\x0d\n          // Match 1 or more path separators\x0d\n          while (j < len &&\x0d\n                 isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n            j++;\x0d\n          }\x0d\n          if (j < len && j !== last) {\x0d\n            // Matched!\x0d\n            last = j;\x0d\n            // Match 1 or more non-path separators\x0d\n            while (j < len &&\x0d\n                   !isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n              j++;\x0d\n            }\x0d\n            if (j === len) {\x0d\n              // We matched a UNC root only\x0d\n              return path;\x0d\n            }\x0d\n            if (j !== last) {\x0d\n              // We matched a UNC root with leftovers\x0d\n\x0d\n              // Offset by 1 to include the separator after the UNC root to\x0d\n              // treat it as a "normal root" on top of a (UNC) root\x0d\n              rootEnd = offset = j + 1;\x0d\n            }\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n    // Possible device root\x0d\n    } else if (isWindowsDeviceRoot(code) &&\x0d\n               StringPrototypeCharCodeAt(path\x2C 1) === CHAR_COLON) {\x0d\n      rootEnd =\x0d\n        len > 2 && isPathSeparator(StringPrototypeCharCodeAt(path\x2C 2)) ? 3 : 2;\x0d\n      offset = rootEnd;\x0d\n    }\x0d\n\x0d\n    let end = -1;\x0d\n    let matchedSlash = true;\x0d\n    for (let i = len - 1; i >= offset; --i) {\x0d\n      if (isPathSeparator(StringPrototypeCharCodeAt(path\x2C i))) {\x0d\n        if (!matchedSlash) {\x0d\n          end = i;\x0d\n          break;\x0d\n        }\x0d\n      } else {\x0d\n        // We saw the first non-path separator\x0d\n        matchedSlash = false;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (end === -1) {\x0d\n      if (rootEnd === -1)\x0d\n        return '.';\x0d\n\x0d\n      end = rootEnd;\x0d\n    }\x0d\n    return StringPrototypeSlice(path\x2C 0\x2C end);\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @param {string} [ext]\x0d\n   * @returns {string}\x0d\n   */\x0d\n  basename(path\x2C ext) {\x0d\n    if (ext !== undefined)\x0d\n      validateString(ext\x2C 'ext');\x0d\n    validateString(path\x2C 'path');\x0d\n    let start = 0;\x0d\n    let end = -1;\x0d\n    let matchedSlash = true;\x0d\n\x0d\n    // Check for a drive letter prefix so as not to mistake the following\x0d\n    // path separator as an extra separator at the end of the path that can be\x0d\n    // disregarded\x0d\n    if (path.length >= 2 &&\x0d\n        isWindowsDeviceRoot(StringPrototypeCharCodeAt(path\x2C 0)) &&\x0d\n        StringPrototypeCharCodeAt(path\x2C 1) === CHAR_COLON) {\x0d\n      start = 2;\x0d\n    }\x0d\n\x0d\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\x0d\n      if (ext === path)\x0d\n        return '';\x0d\n      let extIdx = ext.length - 1;\x0d\n      let firstNonSlashEnd = -1;\x0d\n      for (let i = path.length - 1; i >= start; --i) {\x0d\n        const code = StringPrototypeCharCodeAt(path\x2C i);\x0d\n        if (isPathSeparator(code)) {\x0d\n          // If we reached a path separator that was not part of a set of path\x0d\n          // separators at the end of the string\x2C stop now\x0d\n          if (!matchedSlash) {\x0d\n            start = i + 1;\x0d\n            break;\x0d\n          }\x0d\n        } else {\x0d\n          if (firstNonSlashEnd === -1) {\x0d\n            // We saw the first non-path separator\x2C remember this index in case\x0d\n            // we need it if the extension ends up not matching\x0d\n            matchedSlash = false;\x0d\n            firstNonSlashEnd = i + 1;\x0d\n          }\x0d\n          if (extIdx >= 0) {\x0d\n            // Try to match the explicit extension\x0d\n            if (code === StringPrototypeCharCodeAt(ext\x2C extIdx)) {\x0d\n              if (--extIdx === -1) {\x0d\n                // We matched the extension\x2C so mark this as the end of our path\x0d\n                // component\x0d\n                end = i;\x0d\n              }\x0d\n            } else {\x0d\n              // Extension does not match\x2C so our result is the entire path\x0d\n              // component\x0d\n              extIdx = -1;\x0d\n              end = firstNonSlashEnd;\x0d\n            }\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n\x0d\n      if (start === end)\x0d\n        end = firstNonSlashEnd;\x0d\n      else if (end === -1)\x0d\n        end = path.length;\x0d\n      return StringPrototypeSlice(path\x2C start\x2C end);\x0d\n    }\x0d\n    for (let i = path.length - 1; i >= start; --i) {\x0d\n      if (isPathSeparator(StringPrototypeCharCodeAt(path\x2C i))) {\x0d\n        // If we reached a path separator that was not part of a set of path\x0d\n        // separators at the end of the string\x2C stop now\x0d\n        if (!matchedSlash) {\x0d\n          start = i + 1;\x0d\n          break;\x0d\n        }\x0d\n      } else if (end === -1) {\x0d\n        // We saw the first non-path separator\x2C mark this as the end of our\x0d\n        // path component\x0d\n        matchedSlash = false;\x0d\n        end = i + 1;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (end === -1)\x0d\n      return '';\x0d\n    return StringPrototypeSlice(path\x2C start\x2C end);\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {string}\x0d\n   */\x0d\n  extname(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n    let start = 0;\x0d\n    let startDot = -1;\x0d\n    let startPart = 0;\x0d\n    let end = -1;\x0d\n    let matchedSlash = true;\x0d\n    // Track the state of characters (if any) we see before our first dot and\x0d\n    // after any path separator we find\x0d\n    let preDotState = 0;\x0d\n\x0d\n    // Check for a drive letter prefix so as not to mistake the following\x0d\n    // path separator as an extra separator at the end of the path that can be\x0d\n    // disregarded\x0d\n\x0d\n    if (path.length >= 2 &&\x0d\n        StringPrototypeCharCodeAt(path\x2C 1) === CHAR_COLON &&\x0d\n        isWindowsDeviceRoot(StringPrototypeCharCodeAt(path\x2C 0))) {\x0d\n      start = startPart = 2;\x0d\n    }\x0d\n\x0d\n    for (let i = path.length - 1; i >= start; --i) {\x0d\n      const code = StringPrototypeCharCodeAt(path\x2C i);\x0d\n      if (isPathSeparator(code)) {\x0d\n        // If we reached a path separator that was not part of a set of path\x0d\n        // separators at the end of the string\x2C stop now\x0d\n        if (!matchedSlash) {\x0d\n          startPart = i + 1;\x0d\n          break;\x0d\n        }\x0d\n        continue;\x0d\n      }\x0d\n      if (end === -1) {\x0d\n        // We saw the first non-path separator\x2C mark this as the end of our\x0d\n        // extension\x0d\n        matchedSlash = false;\x0d\n        end = i + 1;\x0d\n      }\x0d\n      if (code === CHAR_DOT) {\x0d\n        // If this is our first dot\x2C mark it as the start of our extension\x0d\n        if (startDot === -1)\x0d\n          startDot = i;\x0d\n        else if (preDotState !== 1)\x0d\n          preDotState = 1;\x0d\n      } else if (startDot !== -1) {\x0d\n        // We saw a non-dot and non-path separator before our dot\x2C so we should\x0d\n        // have a good chance at having a non-empty extension\x0d\n        preDotState = -1;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (startDot === -1 ||\x0d\n        end === -1 ||\x0d\n        // We saw a non-dot character immediately before the dot\x0d\n        preDotState === 0 ||\x0d\n        // The (right-most) trimmed path component is exactly '..'\x0d\n        (preDotState === 1 &&\x0d\n         startDot === end - 1 &&\x0d\n         startDot === startPart + 1)) {\x0d\n      return '';\x0d\n    }\x0d\n    return StringPrototypeSlice(path\x2C startDot\x2C end);\x0d\n  }\x2C\x0d\n\x0d\n  format: FunctionPrototypeBind(_format\x2C null\x2C '\\\\')\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {{\x0d\n   *  dir: string;\x0d\n   *  root: string;\x0d\n   *  base: string;\x0d\n   *  name: string;\x0d\n   *  ext: string;\x0d\n   *  }}\x0d\n   */\x0d\n  parse(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n\x0d\n    const ret = { root: ''\x2C dir: ''\x2C base: ''\x2C ext: ''\x2C name: '' };\x0d\n    if (path.length === 0)\x0d\n      return ret;\x0d\n\x0d\n    const len = path.length;\x0d\n    let rootEnd = 0;\x0d\n    let code = StringPrototypeCharCodeAt(path\x2C 0);\x0d\n\x0d\n    if (len === 1) {\x0d\n      if (isPathSeparator(code)) {\x0d\n        // `path` contains just a path separator\x2C exit early to avoid\x0d\n        // unnecessary work\x0d\n        ret.root = ret.dir = path;\x0d\n        return ret;\x0d\n      }\x0d\n      ret.base = ret.name = path;\x0d\n      return ret;\x0d\n    }\x0d\n    // Try to match a root\x0d\n    if (isPathSeparator(code)) {\x0d\n      // Possible UNC root\x0d\n\x0d\n      rootEnd = 1;\x0d\n      if (isPathSeparator(StringPrototypeCharCodeAt(path\x2C 1))) {\x0d\n        // Matched double path separator at beginning\x0d\n        let j = 2;\x0d\n        let last = j;\x0d\n        // Match 1 or more non-path separators\x0d\n        while (j < len &&\x0d\n               !isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n          j++;\x0d\n        }\x0d\n        if (j < len && j !== last) {\x0d\n          // Matched!\x0d\n          last = j;\x0d\n          // Match 1 or more path separators\x0d\n          while (j < len &&\x0d\n                 isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n            j++;\x0d\n          }\x0d\n          if (j < len && j !== last) {\x0d\n            // Matched!\x0d\n            last = j;\x0d\n            // Match 1 or more non-path separators\x0d\n            while (j < len &&\x0d\n                   !isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n              j++;\x0d\n            }\x0d\n            if (j === len) {\x0d\n              // We matched a UNC root only\x0d\n              rootEnd = j;\x0d\n            } else if (j !== last) {\x0d\n              // We matched a UNC root with leftovers\x0d\n              rootEnd = j + 1;\x0d\n            }\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n    } else if (isWindowsDeviceRoot(code) &&\x0d\n               StringPrototypeCharCodeAt(path\x2C 1) === CHAR_COLON) {\x0d\n      // Possible device root\x0d\n      if (len <= 2) {\x0d\n        // `path` contains just a drive root\x2C exit early to avoid\x0d\n        // unnecessary work\x0d\n        ret.root = ret.dir = path;\x0d\n        return ret;\x0d\n      }\x0d\n      rootEnd = 2;\x0d\n      if (isPathSeparator(StringPrototypeCharCodeAt(path\x2C 2))) {\x0d\n        if (len === 3) {\x0d\n          // `path` contains just a drive root\x2C exit early to avoid\x0d\n          // unnecessary work\x0d\n          ret.root = ret.dir = path;\x0d\n          return ret;\x0d\n        }\x0d\n        rootEnd = 3;\x0d\n      }\x0d\n    }\x0d\n    if (rootEnd > 0)\x0d\n      ret.root = StringPrototypeSlice(path\x2C 0\x2C rootEnd);\x0d\n\x0d\n    let startDot = -1;\x0d\n    let startPart = rootEnd;\x0d\n    let end = -1;\x0d\n    let matchedSlash = true;\x0d\n    let i = path.length - 1;\x0d\n\x0d\n    // Track the state of characters (if any) we see before our first dot and\x0d\n    // after any path separator we find\x0d\n    let preDotState = 0;\x0d\n\x0d\n    // Get non-dir info\x0d\n    for (; i >= rootEnd; --i) {\x0d\n      code = StringPrototypeCharCodeAt(path\x2C i);\x0d\n      if (isPathSeparator(code)) {\x0d\n        // If we reached a path separator that was not part of a set of path\x0d\n        // separators at the end of the string\x2C stop now\x0d\n        if (!matchedSlash) {\x0d\n          startPart = i + 1;\x0d\n          break;\x0d\n        }\x0d\n        continue;\x0d\n      }\x0d\n      if (end === -1) {\x0d\n        // We saw the first non-path separator\x2C mark this as the end of our\x0d\n        // extension\x0d\n        matchedSlash = false;\x0d\n        end = i + 1;\x0d\n      }\x0d\n      if (code === CHAR_DOT) {\x0d\n        // If this is our first dot\x2C mark it as the start of our extension\x0d\n        if (startDot === -1)\x0d\n          startDot = i;\x0d\n        else if (preDotState !== 1)\x0d\n          preDotState = 1;\x0d\n      } else if (startDot !== -1) {\x0d\n        // We saw a non-dot and non-path separator before our dot\x2C so we should\x0d\n        // have a good chance at having a non-empty extension\x0d\n        preDotState = -1;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (end !== -1) {\x0d\n      if (startDot === -1 ||\x0d\n          // We saw a non-dot character immediately before the dot\x0d\n          preDotState === 0 ||\x0d\n          // The (right-most) trimmed path component is exactly '..'\x0d\n          (preDotState === 1 &&\x0d\n           startDot === end - 1 &&\x0d\n           startDot === startPart + 1)) {\x0d\n        ret.base = ret.name = StringPrototypeSlice(path\x2C startPart\x2C end);\x0d\n      } else {\x0d\n        ret.name = StringPrototypeSlice(path\x2C startPart\x2C startDot);\x0d\n        ret.base = StringPrototypeSlice(path\x2C startPart\x2C end);\x0d\n        ret.ext = StringPrototypeSlice(path\x2C startDot\x2C end);\x0d\n      }\x0d\n    }\x0d\n\x0d\n    // If the directory is the root\x2C use the entire root as the `dir` including\x0d\n    // the trailing slash if any (`C:\\abc` -> `C:\\`). Otherwise\x2C strip out the\x0d\n    // trailing slash (`C:\\abc\\def` -> `C:\\abc`).\x0d\n    if (startPart > 0 && startPart !== rootEnd)\x0d\n      ret.dir = StringPrototypeSlice(path\x2C 0\x2C startPart - 1);\x0d\n    else\x0d\n      ret.dir = ret.root;\x0d\n\x0d\n    return ret;\x0d\n  }\x2C\x0d\n\x0d\n  sep: '\\\\'\x2C\x0d\n  delimiter: ';'\x2C\x0d\n  win32: null\x2C\x0d\n  posix: null\x0d\n};\x0d\n\x0d\nconst posixCwd = (() => {\x0d\n  if (platformIsWin32) {\x0d\n    // Converts Windows' backslash path separators to POSIX forward slashes\x0d\n    // and truncates any drive indicator\x0d\n    const regexp = /\\\\/g;\x0d\n    return () => {\x0d\n      const cwd = StringPrototypeReplace(process.cwd()\x2C regexp\x2C '/');\x0d\n      return StringPrototypeSlice(cwd\x2C StringPrototypeIndexOf(cwd\x2C '/'));\x0d\n    };\x0d\n  }\x0d\n\x0d\n  // We're already on POSIX\x2C no need for any transformations\x0d\n  return () => process.cwd();\x0d\n})();\x0d\n\x0d\nconst posix = {\x0d\n  /**\x0d\n   * path.resolve([from ...]\x2C to)\x0d\n   * @param {...string} args\x0d\n   * @returns {string}\x0d\n   */\x0d\n  resolve(...args) {\x0d\n    let resolvedPath = '';\x0d\n    let resolvedAbsolute = false;\x0d\n\x0d\n    for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\x0d\n      const path = i >= 0 ? args[i] : posixCwd();\x0d\n\x0d\n      validateString(path\x2C 'path');\x0d\n\x0d\n      // Skip empty entries\x0d\n      if (path.length === 0) {\x0d\n        continue;\x0d\n      }\x0d\n\x0d\n      resolvedPath = `${path}/${resolvedPath}`;\x0d\n      resolvedAbsolute =\x0d\n        StringPrototypeCharCodeAt(path\x2C 0) === CHAR_FORWARD_SLASH;\x0d\n    }\x0d\n\x0d\n    // At this point the path should be resolved to a full absolute path\x2C but\x0d\n    // handle relative paths to be safe (might happen when process.cwd() fails)\x0d\n\x0d\n    // Normalize the path\x0d\n    resolvedPath = normalizeString(resolvedPath\x2C !resolvedAbsolute\x2C '/'\x2C\x0d\n                                   isPosixPathSeparator);\x0d\n\x0d\n    if (resolvedAbsolute) {\x0d\n      return `/${resolvedPath}`;\x0d\n    }\x0d\n    return resolvedPath.length > 0 ? resolvedPath : '.';\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {string}\x0d\n   */\x0d\n  normalize(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n\x0d\n    if (path.length === 0)\x0d\n      return '.';\x0d\n\x0d\n    const isAbsolute =\x0d\n      StringPrototypeCharCodeAt(path\x2C 0) === CHAR_FORWARD_SLASH;\x0d\n    const trailingSeparator =\x0d\n      StringPrototypeCharCodeAt(path\x2C path.length - 1) === CHAR_FORWARD_SLASH;\x0d\n\x0d\n    // Normalize the path\x0d\n    path = normalizeString(path\x2C !isAbsolute\x2C '/'\x2C isPosixPathSeparator);\x0d\n\x0d\n    if (path.length === 0) {\x0d\n      if (isAbsolute)\x0d\n        return '/';\x0d\n      return trailingSeparator ? './' : '.';\x0d\n    }\x0d\n    if (trailingSeparator)\x0d\n      path += '/';\x0d\n\x0d\n    return isAbsolute ? `/${path}` : path;\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {boolean}\x0d\n   */\x0d\n  isAbsolute(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n    return path.length > 0 &&\x0d\n           StringPrototypeCharCodeAt(path\x2C 0) === CHAR_FORWARD_SLASH;\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {...string} args\x0d\n   * @returns {string}\x0d\n   */\x0d\n  join(...args) {\x0d\n    if (args.length === 0)\x0d\n      return '.';\x0d\n    let joined;\x0d\n    for (let i = 0; i < args.length; ++i) {\x0d\n      const arg = args[i];\x0d\n      validateString(arg\x2C 'path');\x0d\n      if (arg.length > 0) {\x0d\n        if (joined === undefined)\x0d\n          joined = arg;\x0d\n        else\x0d\n          joined += `/${arg}`;\x0d\n      }\x0d\n    }\x0d\n    if (joined === undefined)\x0d\n      return '.';\x0d\n    return posix.normalize(joined);\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} from\x0d\n   * @param {string} to\x0d\n   * @returns {string}\x0d\n   */\x0d\n  relative(from\x2C to) {\x0d\n    validateString(from\x2C 'from');\x0d\n    validateString(to\x2C 'to');\x0d\n\x0d\n    if (from === to)\x0d\n      return '';\x0d\n\x0d\n    // Trim leading forward slashes.\x0d\n    from = posix.resolve(from);\x0d\n    to = posix.resolve(to);\x0d\n\x0d\n    if (from === to)\x0d\n      return '';\x0d\n\x0d\n    const fromStart = 1;\x0d\n    const fromEnd = from.length;\x0d\n    const fromLen = fromEnd - fromStart;\x0d\n    const toStart = 1;\x0d\n    const toLen = to.length - toStart;\x0d\n\x0d\n    // Compare paths to find the longest common path from root\x0d\n    const length = (fromLen < toLen ? fromLen : toLen);\x0d\n    let lastCommonSep = -1;\x0d\n    let i = 0;\x0d\n    for (; i < length; i++) {\x0d\n      const fromCode = StringPrototypeCharCodeAt(from\x2C fromStart + i);\x0d\n      if (fromCode !== StringPrototypeCharCodeAt(to\x2C toStart + i))\x0d\n        break;\x0d\n      else if (fromCode === CHAR_FORWARD_SLASH)\x0d\n        lastCommonSep = i;\x0d\n    }\x0d\n    if (i === length) {\x0d\n      if (toLen > length) {\x0d\n        if (StringPrototypeCharCodeAt(to\x2C toStart + i) === CHAR_FORWARD_SLASH) {\x0d\n          // We get here if `from` is the exact base path for `to`.\x0d\n          // For example: from='/foo/bar'; to='/foo/bar/baz'\x0d\n          return StringPrototypeSlice(to\x2C toStart + i + 1);\x0d\n        }\x0d\n        if (i === 0) {\x0d\n          // We get here if `from` is the root\x0d\n          // For example: from='/'; to='/foo'\x0d\n          return StringPrototypeSlice(to\x2C toStart + i);\x0d\n        }\x0d\n      } else if (fromLen > length) {\x0d\n        if (StringPrototypeCharCodeAt(from\x2C fromStart + i) ===\x0d\n            CHAR_FORWARD_SLASH) {\x0d\n          // We get here if `to` is the exact base path for `from`.\x0d\n          // For example: from='/foo/bar/baz'; to='/foo/bar'\x0d\n          lastCommonSep = i;\x0d\n        } else if (i === 0) {\x0d\n          // We get here if `to` is the root.\x0d\n          // For example: from='/foo/bar'; to='/'\x0d\n          lastCommonSep = 0;\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n\x0d\n    let out = '';\x0d\n    // Generate the relative path based on the path difference between `to`\x0d\n    // and `from`.\x0d\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\x0d\n      if (i === fromEnd ||\x0d\n          StringPrototypeCharCodeAt(from\x2C i) === CHAR_FORWARD_SLASH) {\x0d\n        out += out.length === 0 ? '..' : '/..';\x0d\n      }\x0d\n    }\x0d\n\x0d\n    // Lastly\x2C append the rest of the destination (`to`) path that comes after\x0d\n    // the common path parts.\x0d\n    return `${out}${StringPrototypeSlice(to\x2C toStart + lastCommonSep)}`;\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {string}\x0d\n   */\x0d\n  toNamespacedPath(path) {\x0d\n    // Non-op on posix systems\x0d\n    return path;\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {string}\x0d\n   */\x0d\n  dirname(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n    if (path.length === 0)\x0d\n      return '.';\x0d\n    const hasRoot = StringPrototypeCharCodeAt(path\x2C 0) === CHAR_FORWARD_SLASH;\x0d\n    let end = -1;\x0d\n    let matchedSlash = true;\x0d\n    for (let i = path.length - 1; i >= 1; --i) {\x0d\n      if (StringPrototypeCharCodeAt(path\x2C i) === CHAR_FORWARD_SLASH) {\x0d\n        if (!matchedSlash) {\x0d\n          end = i;\x0d\n          break;\x0d\n        }\x0d\n      } else {\x0d\n        // We saw the first non-path separator\x0d\n        matchedSlash = false;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (end === -1)\x0d\n      return hasRoot ? '/' : '.';\x0d\n    if (hasRoot && end === 1)\x0d\n      return '//';\x0d\n    return StringPrototypeSlice(path\x2C 0\x2C end);\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @param {string} [ext]\x0d\n   * @returns {string}\x0d\n   */\x0d\n  basename(path\x2C ext) {\x0d\n    if (ext !== undefined)\x0d\n      validateString(ext\x2C 'ext');\x0d\n    validateString(path\x2C 'path');\x0d\n\x0d\n    let start = 0;\x0d\n    let end = -1;\x0d\n    let matchedSlash = true;\x0d\n\x0d\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\x0d\n      if (ext === path)\x0d\n        return '';\x0d\n      let extIdx = ext.length - 1;\x0d\n      let firstNonSlashEnd = -1;\x0d\n      for (let i = path.length - 1; i >= 0; --i) {\x0d\n        const code = StringPrototypeCharCodeAt(path\x2C i);\x0d\n        if (code === CHAR_FORWARD_SLASH) {\x0d\n          // If we reached a path separator that was not part of a set of path\x0d\n          // separators at the end of the string\x2C stop now\x0d\n          if (!matchedSlash) {\x0d\n            start = i + 1;\x0d\n            break;\x0d\n          }\x0d\n        } else {\x0d\n          if (firstNonSlashEnd === -1) {\x0d\n            // We saw the first non-path separator\x2C remember this index in case\x0d\n            // we need it if the extension ends up not matching\x0d\n            matchedSlash = false;\x0d\n            firstNonSlashEnd = i + 1;\x0d\n          }\x0d\n          if (extIdx >= 0) {\x0d\n            // Try to match the explicit extension\x0d\n            if (code === StringPrototypeCharCodeAt(ext\x2C extIdx)) {\x0d\n              if (--extIdx === -1) {\x0d\n                // We matched the extension\x2C so mark this as the end of our path\x0d\n                // component\x0d\n                end = i;\x0d\n              }\x0d\n            } else {\x0d\n              // Extension does not match\x2C so our result is the entire path\x0d\n              // component\x0d\n              extIdx = -1;\x0d\n              end = firstNonSlashEnd;\x0d\n            }\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n\x0d\n      if (start === end)\x0d\n        end = firstNonSlashEnd;\x0d\n      else if (end === -1)\x0d\n        end = path.length;\x0d\n      return StringPrototypeSlice(path\x2C start\x2C end);\x0d\n    }\x0d\n    for (let i = path.length - 1; i >= 0; --i) {\x0d\n      if (StringPrototypeCharCodeAt(path\x2C i) === CHAR_FORWARD_SLASH) {\x0d\n        // If we reached a path separator that was not part of a set of path\x0d\n        // separators at the end of the string\x2C stop now\x0d\n        if (!matchedSlash) {\x0d\n          start = i + 1;\x0d\n          break;\x0d\n        }\x0d\n      } else if (end === -1) {\x0d\n        // We saw the first non-path separator\x2C mark this as the end of our\x0d\n        // path component\x0d\n        matchedSlash = false;\x0d\n        end = i + 1;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (end === -1)\x0d\n      return '';\x0d\n    return StringPrototypeSlice(path\x2C start\x2C end);\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {string}\x0d\n   */\x0d\n  extname(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n    let startDot = -1;\x0d\n    let startPart = 0;\x0d\n    let end = -1;\x0d\n    let matchedSlash = true;\x0d\n    // Track the state of characters (if any) we see before our first dot and\x0d\n    // after any path separator we find\x0d\n    let preDotState = 0;\x0d\n    for (let i = path.length - 1; i >= 0; --i) {\x0d\n      const code = StringPrototypeCharCodeAt(path\x2C i);\x0d\n      if (code === CHAR_FORWARD_SLASH) {\x0d\n        // If we reached a path separator that was not part of a set of path\x0d\n        // separators at the end of the string\x2C stop now\x0d\n        if (!matchedSlash) {\x0d\n          startPart = i + 1;\x0d\n          break;\x0d\n        }\x0d\n        continue;\x0d\n      }\x0d\n      if (end === -1) {\x0d\n        // We saw the first non-path separator\x2C mark this as the end of our\x0d\n        // extension\x0d\n        matchedSlash = false;\x0d\n        end = i + 1;\x0d\n      }\x0d\n      if (code === CHAR_DOT) {\x0d\n        // If this is our first dot\x2C mark it as the start of our extension\x0d\n        if (startDot === -1)\x0d\n          startDot = i;\x0d\n        else if (preDotState !== 1)\x0d\n          preDotState = 1;\x0d\n      } else if (startDot !== -1) {\x0d\n        // We saw a non-dot and non-path separator before our dot\x2C so we should\x0d\n        // have a good chance at having a non-empty extension\x0d\n        preDotState = -1;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (startDot === -1 ||\x0d\n        end === -1 ||\x0d\n        // We saw a non-dot character immediately before the dot\x0d\n        preDotState === 0 ||\x0d\n        // The (right-most) trimmed path component is exactly '..'\x0d\n        (preDotState === 1 &&\x0d\n         startDot === end - 1 &&\x0d\n         startDot === startPart + 1)) {\x0d\n      return '';\x0d\n    }\x0d\n    return StringPrototypeSlice(path\x2C startDot\x2C end);\x0d\n  }\x2C\x0d\n\x0d\n  format: FunctionPrototypeBind(_format\x2C null\x2C '/')\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {{\x0d\n   *   dir: string;\x0d\n   *   root: string;\x0d\n   *   base: string;\x0d\n   *   name: string;\x0d\n   *   ext: string;\x0d\n   *   }}\x0d\n   */\x0d\n  parse(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n\x0d\n    const ret = { root: ''\x2C dir: ''\x2C base: ''\x2C ext: ''\x2C name: '' };\x0d\n    if (path.length === 0)\x0d\n      return ret;\x0d\n    const isAbsolute =\x0d\n      StringPrototypeCharCodeAt(path\x2C 0) === CHAR_FORWARD_SLASH;\x0d\n    let start;\x0d\n    if (isAbsolute) {\x0d\n      ret.root = '/';\x0d\n      start = 1;\x0d\n    } else {\x0d\n      start = 0;\x0d\n    }\x0d\n    let startDot = -1;\x0d\n    let startPart = 0;\x0d\n    let end = -1;\x0d\n    let matchedSlash = true;\x0d\n    let i = path.length - 1;\x0d\n\x0d\n    // Track the state of characters (if any) we see before our first dot and\x0d\n    // after any path separator we find\x0d\n    let preDotState = 0;\x0d\n\x0d\n    // Get non-dir info\x0d\n    for (; i >= start; --i) {\x0d\n      const code = StringPrototypeCharCodeAt(path\x2C i);\x0d\n      if (code === CHAR_FORWARD_SLASH) {\x0d\n        // If we reached a path separator that was not part of a set of path\x0d\n        // separators at the end of the string\x2C stop now\x0d\n        if (!matchedSlash) {\x0d\n          startPart = i + 1;\x0d\n          break;\x0d\n        }\x0d\n        continue;\x0d\n      }\x0d\n      if (end === -1) {\x0d\n        // We saw the first non-path separator\x2C mark this as the end of our\x0d\n        // extension\x0d\n        matchedSlash = false;\x0d\n        end = i + 1;\x0d\n      }\x0d\n      if (code === CHAR_DOT) {\x0d\n        // If this is our first dot\x2C mark it as the start of our extension\x0d\n        if (startDot === -1)\x0d\n          startDot = i;\x0d\n        else if (preDotState !== 1)\x0d\n          preDotState = 1;\x0d\n      } else if (startDot !== -1) {\x0d\n        // We saw a non-dot and non-path separator before our dot\x2C so we should\x0d\n        // have a good chance at having a non-empty extension\x0d\n        preDotState = -1;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (end !== -1) {\x0d\n      const start = startPart === 0 && isAbsolute ? 1 : startPart;\x0d\n      if (startDot === -1 ||\x0d\n          // We saw a non-dot character immediately before the dot\x0d\n          preDotState === 0 ||\x0d\n          // The (right-most) trimmed path component is exactly '..'\x0d\n          (preDotState === 1 &&\x0d\n          startDot === end - 1 &&\x0d\n          startDot === startPart + 1)) {\x0d\n        ret.base = ret.name = StringPrototypeSlice(path\x2C start\x2C end);\x0d\n      } else {\x0d\n        ret.name = StringPrototypeSlice(path\x2C start\x2C startDot);\x0d\n        ret.base = StringPrototypeSlice(path\x2C start\x2C end);\x0d\n        ret.ext = StringPrototypeSlice(path\x2C startDot\x2C end);\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (startPart > 0)\x0d\n      ret.dir = StringPrototypeSlice(path\x2C 0\x2C startPart - 1);\x0d\n    else if (isAbsolute)\x0d\n      ret.dir = '/';\x0d\n\x0d\n    return ret;\x0d\n  }\x2C\x0d\n\x0d\n  sep: '/'\x2C\x0d\n  delimiter: ':'\x2C\x0d\n  win32: null\x2C\x0d\n  posix: null\x0d\n};\x0d\n\x0d\nposix.win32 = win32.win32 = win32;\x0d\nposix.posix = win32.posix = posix;\x0d\n\x0d\n// Legacy internal API\x2C docs-only deprecated: DEP0080\x0d\nwin32._makeLong = win32.toNamespacedPath;\x0d\nposix._makeLong = posix.toNamespacedPath;\x0d\n\x0d\nmodule.exports = platformIsWin32 ? win32 : posix;\x0d\n
code-source-info,0x2e2fa68a3d
code-creation,LazyCompile,10,307019,0x2e2fa68d9ee,30,validateString node:internal/validators:118:24,0x13fcdd3c958,~
script-source,15,node:internal/validators,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypeIncludes\x2C\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypeMap\x2C\x0d\n  NumberIsInteger\x2C\x0d\n  NumberMAX_SAFE_INTEGER\x2C\x0d\n  NumberMIN_SAFE_INTEGER\x2C\x0d\n  NumberParseInt\x2C\x0d\n  RegExpPrototypeTest\x2C\x0d\n  String\x2C\x0d\n  StringPrototypeToUpperCase\x2C\x0d\n  StringPrototypeTrim\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  hideStackFrames\x2C\x0d\n  codes: {\x0d\n    ERR_SOCKET_BAD_PORT\x2C\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_OUT_OF_RANGE\x2C\x0d\n    ERR_UNKNOWN_SIGNAL\x2C\x0d\n    ERR_INVALID_CALLBACK\x2C\x0d\n  }\x0d\n} = require('internal/errors');\x0d\nconst { normalizeEncoding } = require('internal/util');\x0d\nconst {\x0d\n  isAsyncFunction\x2C\x0d\n  isArrayBufferView\x0d\n} = require('internal/util/types');\x0d\nconst { signals } = internalBinding('constants').os;\x0d\n\x0d\nfunction isInt32(value) {\x0d\n  return value === (value | 0);\x0d\n}\x0d\n\x0d\nfunction isUint32(value) {\x0d\n  return value === (value >>> 0);\x0d\n}\x0d\n\x0d\nconst octalReg = /^[0-7]+$/;\x0d\nconst modeDesc = 'must be a 32-bit unsigned integer or an octal string';\x0d\n\x0d\n/**\x0d\n * Parse and validate values that will be converted into mode_t (the S_*\x0d\n * constants). Only valid numbers and octal strings are allowed. They could be\x0d\n * converted to 32-bit unsigned integers or non-negative signed integers in the\x0d\n * C++ land\x2C but any value higher than 0o777 will result in platform-specific\x0d\n * behaviors.\x0d\n *\x0d\n * @param {*} value Values to be validated\x0d\n * @param {string} name Name of the argument\x0d\n * @param {number} [def] If specified\x2C will be returned for invalid values\x0d\n * @returns {number}\x0d\n */\x0d\nfunction parseFileMode(value\x2C name\x2C def) {\x0d\n  value ??= def;\x0d\n  if (typeof value === 'string') {\x0d\n    if (!RegExpPrototypeTest(octalReg\x2C value)) {\x0d\n      throw new ERR_INVALID_ARG_VALUE(name\x2C value\x2C modeDesc);\x0d\n    }\x0d\n    value = NumberParseInt(value\x2C 8);\x0d\n  }\x0d\n\x0d\n  validateInt32(value\x2C name\x2C 0\x2C 2 ** 32 - 1);\x0d\n  return value;\x0d\n}\x0d\n\x0d\nconst validateInteger = hideStackFrames(\x0d\n  (value\x2C name\x2C min = NumberMIN_SAFE_INTEGER\x2C max = NumberMAX_SAFE_INTEGER) => {\x0d\n    if (typeof value !== 'number')\x0d\n      throw new ERR_INVALID_ARG_TYPE(name\x2C 'number'\x2C value);\x0d\n    if (!NumberIsInteger(value))\x0d\n      throw new ERR_OUT_OF_RANGE(name\x2C 'an integer'\x2C value);\x0d\n    if (value < min || value > max)\x0d\n      throw new ERR_OUT_OF_RANGE(name\x2C `>= ${min} && <= ${max}`\x2C value);\x0d\n  }\x0d\n);\x0d\n\x0d\nconst validateInt32 = hideStackFrames(\x0d\n  (value\x2C name\x2C min = -2147483648\x2C max = 2147483647) => {\x0d\n    // The defaults for min and max correspond to the limits of 32-bit integers.\x0d\n    if (!isInt32(value)) {\x0d\n      if (typeof value !== 'number') {\x0d\n        throw new ERR_INVALID_ARG_TYPE(name\x2C 'number'\x2C value);\x0d\n      }\x0d\n      if (!NumberIsInteger(value)) {\x0d\n        throw new ERR_OUT_OF_RANGE(name\x2C 'an integer'\x2C value);\x0d\n      }\x0d\n      throw new ERR_OUT_OF_RANGE(name\x2C `>= ${min} && <= ${max}`\x2C value);\x0d\n    }\x0d\n    if (value < min || value > max) {\x0d\n      throw new ERR_OUT_OF_RANGE(name\x2C `>= ${min} && <= ${max}`\x2C value);\x0d\n    }\x0d\n  }\x0d\n);\x0d\n\x0d\nconst validateUint32 = hideStackFrames((value\x2C name\x2C positive) => {\x0d\n  if (!isUint32(value)) {\x0d\n    if (typeof value !== 'number') {\x0d\n      throw new ERR_INVALID_ARG_TYPE(name\x2C 'number'\x2C value);\x0d\n    }\x0d\n    if (!NumberIsInteger(value)) {\x0d\n      throw new ERR_OUT_OF_RANGE(name\x2C 'an integer'\x2C value);\x0d\n    }\x0d\n    const min = positive ? 1 : 0;\x0d\n    // 2 ** 32 === 4294967296\x0d\n    throw new ERR_OUT_OF_RANGE(name\x2C `>= ${min} && < 4294967296`\x2C value);\x0d\n  }\x0d\n  if (positive && value === 0) {\x0d\n    throw new ERR_OUT_OF_RANGE(name\x2C '>= 1 && < 4294967296'\x2C value);\x0d\n  }\x0d\n});\x0d\n\x0d\nfunction validateString(value\x2C name) {\x0d\n  if (typeof value !== 'string')\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C 'string'\x2C value);\x0d\n}\x0d\n\x0d\nfunction validateNumber(value\x2C name) {\x0d\n  if (typeof value !== 'number')\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C 'number'\x2C value);\x0d\n}\x0d\n\x0d\nconst validateOneOf = hideStackFrames((value\x2C name\x2C oneOf) => {\x0d\n  if (!ArrayPrototypeIncludes(oneOf\x2C value)) {\x0d\n    const allowed = ArrayPrototypeJoin(\x0d\n      ArrayPrototypeMap(oneOf\x2C (v) =>\x0d\n        (typeof v === 'string' ? `'${v}'` : String(v)))\x2C\x0d\n      '\x2C ');\x0d\n    const reason = 'must be one of: ' + allowed;\x0d\n    throw new ERR_INVALID_ARG_VALUE(name\x2C value\x2C reason);\x0d\n  }\x0d\n});\x0d\n\x0d\nfunction validateBoolean(value\x2C name) {\x0d\n  if (typeof value !== 'boolean')\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C 'boolean'\x2C value);\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {unknown} value\x0d\n * @param {string} name\x0d\n * @param {{\x0d\n *   allowArray?: boolean\x2C\x0d\n *   allowFunction?: boolean\x2C\x0d\n *   nullable?: boolean\x0d\n * }} [options]\x0d\n */\x0d\nconst validateObject = hideStackFrames(\x0d\n  (value\x2C name\x2C options) => {\x0d\n    const useDefaultOptions = options == null;\x0d\n    const allowArray = useDefaultOptions ? false : options.allowArray;\x0d\n    const allowFunction = useDefaultOptions ? false : options.allowFunction;\x0d\n    const nullable = useDefaultOptions ? false : options.nullable;\x0d\n    if ((!nullable && value === null) ||\x0d\n        (!allowArray && ArrayIsArray(value)) ||\x0d\n        (typeof value !== 'object' && (\x0d\n          !allowFunction || typeof value !== 'function'\x0d\n        ))) {\x0d\n      throw new ERR_INVALID_ARG_TYPE(name\x2C 'Object'\x2C value);\x0d\n    }\x0d\n  });\x0d\n\x0d\nconst validateArray = hideStackFrames((value\x2C name\x2C minLength = 0) => {\x0d\n  if (!ArrayIsArray(value)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C 'Array'\x2C value);\x0d\n  }\x0d\n  if (value.length < minLength) {\x0d\n    const reason = `must be longer than ${minLength}`;\x0d\n    throw new ERR_INVALID_ARG_VALUE(name\x2C value\x2C reason);\x0d\n  }\x0d\n});\x0d\n\x0d\nfunction validateSignalName(signal\x2C name = 'signal') {\x0d\n  validateString(signal\x2C name);\x0d\n\x0d\n  if (signals[signal] === undefined) {\x0d\n    if (signals[StringPrototypeToUpperCase(signal)] !== undefined) {\x0d\n      throw new ERR_UNKNOWN_SIGNAL(signal +\x0d\n                                   ' (signals must use all capital letters)');\x0d\n    }\x0d\n\x0d\n    throw new ERR_UNKNOWN_SIGNAL(signal);\x0d\n  }\x0d\n}\x0d\n\x0d\nconst validateBuffer = hideStackFrames((buffer\x2C name = 'buffer') => {\x0d\n  if (!isArrayBufferView(buffer)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C\x0d\n                                   ['Buffer'\x2C 'TypedArray'\x2C 'DataView']\x2C\x0d\n                                   buffer);\x0d\n  }\x0d\n});\x0d\n\x0d\nfunction validateEncoding(data\x2C encoding) {\x0d\n  const normalizedEncoding = normalizeEncoding(encoding);\x0d\n  const length = data.length;\x0d\n\x0d\n  if (normalizedEncoding === 'hex' && length % 2 !== 0) {\x0d\n    throw new ERR_INVALID_ARG_VALUE('encoding'\x2C encoding\x2C\x0d\n                                    `is invalid for data of length ${length}`);\x0d\n  }\x0d\n}\x0d\n\x0d\n// Check that the port number is not NaN when coerced to a number\x2C\x0d\n// is an integer and that it falls within the legal range of port numbers.\x0d\nfunction validatePort(port\x2C name = 'Port'\x2C allowZero = true) {\x0d\n  if ((typeof port !== 'number' && typeof port !== 'string') ||\x0d\n      (typeof port === 'string' && StringPrototypeTrim(port).length === 0) ||\x0d\n      +port !== (+port >>> 0) ||\x0d\n      port > 0xFFFF ||\x0d\n      (port === 0 && !allowZero)) {\x0d\n    throw new ERR_SOCKET_BAD_PORT(name\x2C port\x2C allowZero);\x0d\n  }\x0d\n  return port | 0;\x0d\n}\x0d\n\x0d\nconst validateCallback = hideStackFrames((callback) => {\x0d\n  if (typeof callback !== 'function')\x0d\n    throw new ERR_INVALID_CALLBACK(callback);\x0d\n});\x0d\n\x0d\nconst validateAbortSignal = hideStackFrames((signal\x2C name) => {\x0d\n  if (signal !== undefined &&\x0d\n      (signal === null ||\x0d\n       typeof signal !== 'object' ||\x0d\n       !('aborted' in signal))) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C 'AbortSignal'\x2C signal);\x0d\n  }\x0d\n});\x0d\n\x0d\nconst validateFunction = hideStackFrames((value\x2C name) => {\x0d\n  if (typeof value !== 'function')\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C 'Function'\x2C value);\x0d\n});\x0d\n\x0d\nconst validatePlainFunction = hideStackFrames((value\x2C name) => {\x0d\n  if (typeof value !== 'function' || isAsyncFunction(value))\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C 'Function'\x2C value);\x0d\n});\x0d\n\x0d\nconst validateUndefined = hideStackFrames((value\x2C name) => {\x0d\n  if (value !== undefined)\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C 'undefined'\x2C value);\x0d\n});\x0d\n\x0d\nmodule.exports = {\x0d\n  isInt32\x2C\x0d\n  isUint32\x2C\x0d\n  parseFileMode\x2C\x0d\n  validateArray\x2C\x0d\n  validateBoolean\x2C\x0d\n  validateBuffer\x2C\x0d\n  validateEncoding\x2C\x0d\n  validateFunction\x2C\x0d\n  validateInt32\x2C\x0d\n  validateInteger\x2C\x0d\n  validateNumber\x2C\x0d\n  validateObject\x2C\x0d\n  validateOneOf\x2C\x0d\n  validatePlainFunction\x2C\x0d\n  validatePort\x2C\x0d\n  validateSignalName\x2C\x0d\n  validateString\x2C\x0d\n  validateUint32\x2C\x0d\n  validateUndefined\x2C\x0d\n  validateCallback\x2C\x0d\n  validateAbortSignal\x2C\x0d\n};\x0d\n
code-source-info,0x2e2fa68d9ee,15,3534,3646,C0O3553C6O3589C22O3595C27O3589C29O3645,,
code-creation,LazyCompile,10,307559,0x2e2fa68e38e,17,isPathSeparator node:path:52:25,0x14570b4cf90,~
code-source-info,0x2e2fa68e38e,41,1794,1876,C0O1806C2O1822C4O1818C11O1853C13O1849C16O1873,,
code-creation,LazyCompile,10,307619,0x2e2fa68e48e,35,isWindowsDeviceRoot node:path:60:29,0x14570b4d408,~
code-source-info,0x2e2fa68e48e,41,1991,2136,C0O2003C2O2019C4O2016C11O2047C13O2044C20O2087C22O2084C29O2115C31O2112C34O2133,,
code-creation,LazyCompile,10,307686,0x2e2fa68e5ae,40,wrappedCwd node:internal/bootstrap/switches/does_own_process_state:124:20,0x13fcdd3e030,~
script-source,93,node:internal/bootstrap/switches/does_own_process_state,'use strict';\x0d\n\x0d\nconst credentials = internalBinding('credentials');\x0d\nconst rawMethods = internalBinding('process_methods');\x0d\n\x0d\nprocess.abort = rawMethods.abort;\x0d\nprocess.umask = wrappedUmask;\x0d\nprocess.chdir = wrappedChdir;\x0d\nprocess.cwd = wrappedCwd;\x0d\n\x0d\nif (credentials.implementsPosixCredentials) {\x0d\n  const wrapped = wrapPosixCredentialSetters(credentials);\x0d\n\x0d\n  process.initgroups = wrapped.initgroups;\x0d\n  process.setgroups = wrapped.setgroups;\x0d\n  process.setegid = wrapped.setegid;\x0d\n  process.seteuid = wrapped.seteuid;\x0d\n  process.setgid = wrapped.setgid;\x0d\n  process.setuid = wrapped.setuid;\x0d\n}\x0d\n\x0d\n// ---- keep the attachment of the wrappers above so that it's easier to ----\x0d\n// ----              compare the setups side-by-side                    -----\x0d\n\x0d\nconst {\x0d\n  parseFileMode\x2C\x0d\n  validateArray\x2C\x0d\n  validateString\x0d\n} = require('internal/validators');\x0d\n\x0d\nfunction wrapPosixCredentialSetters(credentials) {\x0d\n  const {\x0d\n    codes: {\x0d\n      ERR_INVALID_ARG_TYPE\x2C\x0d\n      ERR_UNKNOWN_CREDENTIAL\x0d\n    }\x0d\n  } = require('internal/errors');\x0d\n  const {\x0d\n    validateUint32\x0d\n  } = require('internal/validators');\x0d\n\x0d\n  const {\x0d\n    initgroups: _initgroups\x2C\x0d\n    setgroups: _setgroups\x2C\x0d\n    setegid: _setegid\x2C\x0d\n    seteuid: _seteuid\x2C\x0d\n    setgid: _setgid\x2C\x0d\n    setuid: _setuid\x0d\n  } = credentials;\x0d\n\x0d\n  function initgroups(user\x2C extraGroup) {\x0d\n    validateId(user\x2C 'user');\x0d\n    validateId(extraGroup\x2C 'extraGroup');\x0d\n    // Result is 0 on success\x2C 1 if user is unknown\x2C 2 if group is unknown.\x0d\n    const result = _initgroups(user\x2C extraGroup);\x0d\n    if (result === 1) {\x0d\n      throw new ERR_UNKNOWN_CREDENTIAL('User'\x2C user);\x0d\n    } else if (result === 2) {\x0d\n      throw new ERR_UNKNOWN_CREDENTIAL('Group'\x2C extraGroup);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  function setgroups(groups) {\x0d\n    validateArray(groups\x2C 'groups');\x0d\n    for (let i = 0; i < groups.length; i++) {\x0d\n      validateId(groups[i]\x2C `groups[${i}]`);\x0d\n    }\x0d\n    // Result is 0 on success. A positive integer indicates that the\x0d\n    // corresponding group was not found.\x0d\n    const result = _setgroups(groups);\x0d\n    if (result > 0) {\x0d\n      throw new ERR_UNKNOWN_CREDENTIAL('Group'\x2C groups[result - 1]);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  function wrapIdSetter(type\x2C method) {\x0d\n    return function(id) {\x0d\n      validateId(id\x2C 'id');\x0d\n      if (typeof id === 'number') id |= 0;\x0d\n      // Result is 0 on success\x2C 1 if credential is unknown.\x0d\n      const result = method(id);\x0d\n      if (result === 1) {\x0d\n        throw new ERR_UNKNOWN_CREDENTIAL(type\x2C id);\x0d\n      }\x0d\n    };\x0d\n  }\x0d\n\x0d\n  function validateId(id\x2C name) {\x0d\n    if (typeof id === 'number') {\x0d\n      validateUint32(id\x2C name);\x0d\n    } else if (typeof id !== 'string') {\x0d\n      throw new ERR_INVALID_ARG_TYPE(name\x2C ['number'\x2C 'string']\x2C id);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return {\x0d\n    initgroups\x2C\x0d\n    setgroups\x2C\x0d\n    setegid: wrapIdSetter('Group'\x2C _setegid)\x2C\x0d\n    seteuid: wrapIdSetter('User'\x2C _seteuid)\x2C\x0d\n    setgid: wrapIdSetter('Group'\x2C _setgid)\x2C\x0d\n    setuid: wrapIdSetter('User'\x2C _setuid)\x0d\n  };\x0d\n}\x0d\n\x0d\n// Cache the working directory to prevent lots of lookups. If the working\x0d\n// directory is changed by `chdir`\x2C it'll be updated.\x0d\nlet cachedCwd = '';\x0d\n\x0d\nfunction wrappedChdir(directory) {\x0d\n  validateString(directory\x2C 'directory');\x0d\n  rawMethods.chdir(directory);\x0d\n  // Mark cache that it requires an update.\x0d\n  cachedCwd = '';\x0d\n}\x0d\n\x0d\nfunction wrappedUmask(mask) {\x0d\n  if (mask !== undefined) {\x0d\n    mask = parseFileMode(mask\x2C 'mask');\x0d\n  }\x0d\n  return rawMethods.umask(mask);\x0d\n}\x0d\n\x0d\nfunction wrappedCwd() {\x0d\n  if (cachedCwd === '')\x0d\n    cachedCwd = rawMethods.cwd();\x0d\n  return cachedCwd;\x0d\n}\x0d\n
code-source-info,0x2e2fa68e5ae,93,3464,3552,C0O3472C7O3486C12O3499C17O3522C22O3522C29O3509C35O3532C39O3549,,
tick,0x7ffe67f1f25f,308030,0,0x0,3,0x7ff7245a4800,0x2e2fa68a42f,0x2e2fa688f48,0x2e2fa685473,0x3979d3bef45
code-creation,LazyCompile,10,308226,0x2e2fa68ec16,442,normalizeString node:path:66:25,0x14570b4d458,~
code-source-info,0x2e2fa68ec
code-creation,LazyCompile,10,308474,0x2e2fa68f15e,63,addReadOnlyProcessAlias node:internal/bootstrap/pre_execution:122:33,0x2e2fa681fb0,~
code-source-info,0x2e2fa68f15e,95,4177,4412,C16O4230C21O4230C26O4257C28O4275C36O4305C43O4371C49O4390C56O4275C62O4411,,
code-creation,LazyCompile,10,308572,0x2e2fa68f2de,82,getOptionValue node:internal/options:39:24,0x2e2fa684450,~
code-source-info,0x2e2fa68f2de,96,940,1190,C0O974C3O974C7O1020C15O1020C22O1071C30O1093C38O1093C43O1080C47O1071C53O1109C55O1134C60O1140C61O1164C66O1164C74O1179C81O1187,,
code-creation,LazyCompile,10,308652,0x2e2fa68f68e,33,getCLIOptionsFromBinding node:internal/options:18:34,0x2e2fa684360,~
code-source-info,0x2e2fa68f68e,96,514,620,C0O522C6O546C11O573C15O558C28O599C32O617,,
code-creation,LazyCompile,10,309158,0x2e2fa68f80e,46,setupTraceCategoryState node:internal/bootstrap/pre_execution:214:33,0x2e2fa682258,~
code-source-info,0x2e2fa68f80e,95,6737,6968,C0O6780C6O6780C11O6753C16O6853C22O6853C27O6824C32O6896C35O6921C40O6896C45O6967,,
code-creation,LazyCompile,10,309252,0x2e2fa68f9a6,77,toggleTraceCategoryState node:internal/process/per_thread:390:34,0x3d773fd8c58,~
code-source-info,0x2e2fa68f9a6,30,11548,11855,C0O11573C4O11603C10O11639C16O11671C21O11715C26O11716C33O11660C39O11742C44O11763C49O11763C55O11783C61O11816C66O11837C71O11837C76O11854,,
code-creation,LazyCompile,10,309329,0x2e2fa68fb56,42,setupPerfHooks node:internal/bootstrap/pre_execution:220:24,0x2e2fa6822a8,~
code-source-info,0x2e2fa68fb56,95,6995,7118,C0O7003C6O7003C11O7039C16O7040C20O7064C26O7064C31O7094C36O7095C41O7117,,
code-creation,LazyCompile,10,309423,0x2e2fa68fcd6,42,refreshTimeOrigin node:internal/perf/performance:178:27,0x3898ea2b760,~
script-source,73,node:internal/perf/performance,'use strict';\x0d\n\x0d\nconst {\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_ILLEGAL_CONSTRUCTOR\x2C\x0d\n  }\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst {\x0d\n  EventTarget\x2C\x0d\n} = require('internal/event_target');\x0d\n\x0d\nconst { now } = require('internal/perf/utils');\x0d\n\x0d\nconst {\x0d\n  mark\x2C\x0d\n  measure\x2C\x0d\n  clearMarkTimings\x2C\x0d\n} = require('internal/perf/usertiming');\x0d\nconst {\x0d\n  clearEntriesFromBuffer\x2C\x0d\n  filterBufferMapByNameAndType\x2C\x0d\n} = require('internal/perf/observe');\x0d\n\x0d\nconst eventLoopUtilization = require('internal/perf/event_loop_utilization');\x0d\nconst nodeTiming = require('internal/perf/nodetiming');\x0d\nconst timerify = require('internal/perf/timerify');\x0d\nconst { customInspectSymbol: kInspect } = require('internal/util');\x0d\nconst { inspect } = require('util');\x0d\n\x0d\nconst {\x0d\n  getTimeOriginTimestamp\x0d\n} = internalBinding('performance');\x0d\n\x0d\nclass Performance extends EventTarget {\x0d\n  constructor() {\x0d\n    throw new ERR_ILLEGAL_CONSTRUCTOR();\x0d\n  }\x0d\n\x0d\n  [kInspect](depth\x2C options) {\x0d\n    if (depth < 0) return this;\x0d\n\x0d\n    const opts = {\x0d\n      ...options\x2C\x0d\n      depth: options.depth == null ? null : options.depth - 1\x0d\n    };\x0d\n\x0d\n    return `Performance ${inspect({\x0d\n      nodeTiming: this.nodeTiming\x2C\x0d\n      timeOrigin: this.timeOrigin\x2C\x0d\n    }\x2C opts)}`;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction toJSON() {\x0d\n  return {\x0d\n    nodeTiming: this.nodeTiming\x2C\x0d\n    timeOrigin: this.timeOrigin\x2C\x0d\n    eventLoopUtilization: this.eventLoopUtilization()\x0d\n  };\x0d\n}\x0d\n\x0d\nfunction clearMarks(name) {\x0d\n  if (name !== undefined) {\x0d\n    name = `${name}`;\x0d\n  }\x0d\n  clearMarkTimings(name);\x0d\n  clearEntriesFromBuffer('mark'\x2C name);\x0d\n}\x0d\n\x0d\nfunction clearMeasures(name) {\x0d\n  if (name !== undefined) {\x0d\n    name = `${name}`;\x0d\n  }\x0d\n  clearEntriesFromBuffer('measure'\x2C name);\x0d\n}\x0d\n\x0d\nfunction getEntries() {\x0d\n  return filterBufferMapByNameAndType();\x0d\n}\x0d\n\x0d\nfunction getEntriesByName(name) {\x0d\n  if (name !== undefined) {\x0d\n    name = `${name}`;\x0d\n  }\x0d\n  return filterBufferMapByNameAndType(name\x2C undefined);\x0d\n}\x0d\n\x0d\nfunction getEntriesByType(type) {\x0d\n  if (type !== undefined) {\x0d\n    type = `${type}`;\x0d\n  }\x0d\n  return filterBufferMapByNameAndType(undefined\x2C type);\x0d\n}\x0d\n\x0d\nclass InternalPerformance extends EventTarget {}\x0d\nInternalPerformance.prototype.constructor = Performance.prototype.constructor;\x0d\nObjectSetPrototypeOf(InternalPerformance.prototype\x2C Performance.prototype);\x0d\n\x0d\nObjectDefineProperties(Performance.prototype\x2C {\x0d\n  clearMarks: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: clearMarks\x2C\x0d\n  }\x2C\x0d\n  clearMeasures: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: clearMeasures\x2C\x0d\n  }\x2C\x0d\n  eventLoopUtilization: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: eventLoopUtilization\x2C\x0d\n  }\x2C\x0d\n  getEntries: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: getEntries\x2C\x0d\n  }\x2C\x0d\n  getEntriesByName: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: getEntriesByName\x2C\x0d\n  }\x2C\x0d\n  getEntriesByType: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: getEntriesByType\x2C\x0d\n  }\x2C\x0d\n  mark: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: mark\x2C\x0d\n  }\x2C\x0d\n  measure: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: measure\x2C\x0d\n  }\x2C\x0d\n  nodeTiming: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: nodeTiming\x2C\x0d\n  }\x2C\x0d\n  now: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: now\x2C\x0d\n  }\x2C\x0d\n  timerify: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: timerify\x2C\x0d\n  }\x2C\x0d\n  // This would be updated during pre-execution in case\x0d\n  // the process is launched from a snapshot.\x0d\n  // TODO(joyeecheung): we may want to warn about access to\x0d\n  // this during snapshot building.\x0d\n  timeOrigin: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: true\x2C\x0d\n    value: getTimeOriginTimestamp()\x2C\x0d\n  }\x2C\x0d\n  toJSON: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: true\x2C\x0d\n    value: toJSON\x2C\x0d\n  }\x0d\n});\x0d\n\x0d\nfunction refreshTimeOrigin() {\x0d\n  ObjectDefineProperty(Performance.prototype\x2C 'timeOrigin'\x2C {\x0d\n    configurable: true\x2C\x0d\n    enumerable: true\x2C\x0d\n    value: getTimeOriginTimestamp()\x2C\x0d\n  });\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  InternalPerformance\x2C\x0d\n  refreshTimeOrigin\x0d\n};\x0d\n
code-source-info,0x2e2fa68fcd6,73,3932,4095,C0O3940C7O3961C10O3973C25O4060C28O4060C35O3940C41O4094,,
code-creation,LazyCompile,10,309856,0x2e2fa6903e6,19,refreshTimeOrigin node:internal/perf/utils:25:27,0x14570b62148,~
script-source,46,node:internal/perf/utils,'use strict';\x0d\n\x0d\nconst binding = internalBinding('performance');\x0d\nconst {\x0d\n  milestones\x2C\x0d\n  getTimeOrigin\x2C\x0d\n} = binding;\x0d\n\x0d\n// TODO(joyeecheung): we may want to warn about access to\x0d\n// this during snapshot building.\x0d\nlet timeOrigin = getTimeOrigin();\x0d\n\x0d\nfunction now() {\x0d\n  const hr = process.hrtime();\x0d\n  return (hr[0] * 1000 + hr[1] / 1e6) - timeOrigin;\x0d\n}\x0d\n\x0d\nfunction getMilestoneTimestamp(milestoneIdx) {\x0d\n  const ns = milestones[milestoneIdx];\x0d\n  if (ns === -1)\x0d\n    return ns;\x0d\n  return ns / 1e6 - timeOrigin;\x0d\n}\x0d\n\x0d\nfunction refreshTimeOrigin() {\x0d\n  timeOrigin = getTimeOrigin();\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  now\x2C\x0d\n  getMilestoneTimestamp\x2C\x0d\n  refreshTimeOrigin\x0d\n};\x0d\n
code-source-info,0x2e2fa6903e6,46,549,589,C0O557C5O570C11O568C18O588,,
code-creation,LazyCompile,10,309993,0x2e2fa690656,62,setupInspectorHooks node:internal/bootstrap/pre_execution:225:29,0x2e2fa6822f8,~
code-source-info,0x2e2fa690656,95,7150,7716,C0O7499C6O7503C11O7528C17O7597C23O7597C28O7565C33O7580C38O7644C44O7644C49O7672C54O7673C61O7715,,
code-creation,Eval,10,310174,0x2e2fa690a06,5, node:internal/inspector_async_hook:1:1,0x2e2fa690850,~
script-source,97,node:internal/inspector_async_hook,'use strict';\x0d\n\x0d\nlet hook;\x0d\nlet config;\x0d\n\x0d\nconst {\x0d\n  SafeSet\x2C\x0d\n} = primordials;\x0d\n\x0d\nfunction lazyHookCreation() {\x0d\n  const inspector = internalBinding('inspector');\x0d\n  const { createHook } = require('async_hooks');\x0d\n  config = internalBinding('config');\x0d\n\x0d\n  hook = createHook({\x0d\n    init(asyncId\x2C type\x2C triggerAsyncId\x2C resource) {\x0d\n    // It's difficult to tell which tasks will be recurring and which won't\x2C\x0d\n    // therefore we mark all tasks as recurring. Based on the discussion\x0d\n    // in https://github.com/nodejs/node/pull/13870#discussion_r124515293\x2C\x0d\n    // this should be fine as long as we call asyncTaskCanceled() too.\x0d\n      const recurring = true;\x0d\n      if (type === 'PROMISE')\x0d\n        this.promiseIds.add(asyncId);\x0d\n      else\x0d\n        inspector.asyncTaskScheduled(type\x2C asyncId\x2C recurring);\x0d\n    }\x2C\x0d\n\x0d\n    before(asyncId) {\x0d\n      if (this.promiseIds.has(asyncId))\x0d\n        return;\x0d\n      inspector.asyncTaskStarted(asyncId);\x0d\n    }\x2C\x0d\n\x0d\n    after(asyncId) {\x0d\n      if (this.promiseIds.has(asyncId))\x0d\n        return;\x0d\n      inspector.asyncTaskFinished(asyncId);\x0d\n    }\x2C\x0d\n\x0d\n    destroy(asyncId) {\x0d\n      if (this.promiseIds.has(asyncId))\x0d\n        return this.promiseIds.delete(asyncId);\x0d\n      inspector.asyncTaskCanceled(asyncId);\x0d\n    }\x2C\x0d\n  });\x0d\n\x0d\n  hook.promiseIds = new SafeSet();\x0d\n}\x0d\n\x0d\nfunction enable() {\x0d\n  if (hook === undefined) lazyHookCreation();\x0d\n  if (config.bits < 64) {\x0d\n    // V8 Inspector stores task ids as (void*) pointers.\x0d\n    // async_hooks store ids as 64bit numbers.\x0d\n    // As a result\x2C we cannot reliably translate async_hook ids to V8 async_task\x0d\n    // ids on 32bit platforms.\x0d\n    process.emitWarning(\x0d\n      'Warning: Async stack traces in debugger are not available ' +\x0d\n      `on ${config.bits}bit platforms. The feature is disabled.`\x2C\x0d\n      {\x0d\n        code: 'INSPECTOR_ASYNC_STACK_TRACES_NOT_AVAILABLE'\x2C\x0d\n      });\x0d\n  } else {\x0d\n    hook.enable();\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction disable() {\x0d\n  if (hook === undefined) lazyHookCreation();\x0d\n  hook.disable();\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  enable\x2C\x0d\n  disable\x0d\n};\x0d\n
code-source-info,0x2e2fa690a06,97,0,2048,C0O0C4O2048,,
code-creation,Function,10,310392,0x2e2fa690c26,79, node:internal/inspector_async_hook:1:1,0x2e2fa690980,~
code-source-info,0x2e2fa690c26,97,0,2048,C0O0C42O21C43O21C45O32C46O32C48O54C54O2002C61O2024C67O2035C73O2017C78O2047,,
code-creation,LazyCompile,10,310603,0x2e2fa69129e,69,setupWarningHandler node:internal/bootstrap/pre_execution:134:29,0x2e2fa682000,~
code-source-info,0x2e2fa69129e,95,4444,4649,C0O4482C6O4482C11O4465C16O4522C24O4526C33O4571C38O4575C45O4592C50O4608C53O4616C61O4616C68O4648,,
code-creation,LazyCompile,10,310772,0x2e2fa6913fe,20,addListener node:events:622:58,0x423ed6b738,~
script-source,23,node:events,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeIndexOf\x2C\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypeShift\x2C\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  ArrayPrototypeSplice\x2C\x0d\n  ArrayPrototypeUnshift\x2C\x0d\n  Boolean\x2C\x0d\n  Error\x2C\x0d\n  ErrorCaptureStackTrace\x2C\x0d\n  FunctionPrototypeBind\x2C\x0d\n  FunctionPrototypeCall\x2C\x0d\n  MathMin\x2C\x0d\n  NumberIsNaN\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectGetPrototypeOf\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  Promise\x2C\x0d\n  PromiseReject\x2C\x0d\n  PromiseResolve\x2C\x0d\n  ReflectApply\x2C\x0d\n  ReflectOwnKeys\x2C\x0d\n  String\x2C\x0d\n  StringPrototypeSplit\x2C\x0d\n  Symbol\x2C\x0d\n  SymbolFor\x2C\x0d\n  SymbolAsyncIterator\x2C\x0d\n} = primordials;\x0d\nconst kRejection = SymbolFor('nodejs.rejection');\x0d\nconst { inspect } = require('internal/util/inspect');\x0d\n\x0d\nlet spliceOne;\x0d\n\x0d\nconst {\x0d\n  AbortError\x2C\x0d\n  kEnhanceStackBeforeInspector\x2C\x0d\n  codes: {\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_THIS\x2C\x0d\n    ERR_OUT_OF_RANGE\x2C\x0d\n    ERR_UNHANDLED_ERROR\x0d\n  }\x2C\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst {\x0d\n  validateAbortSignal\x2C\x0d\n  validateBoolean\x2C\x0d\n  validateFunction\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst kCapture = Symbol('kCapture');\x0d\nconst kErrorMonitor = Symbol('events.errorMonitor');\x0d\nconst kMaxEventTargetListeners = Symbol('events.maxEventTargetListeners');\x0d\nconst kMaxEventTargetListenersWarned =\x0d\n  Symbol('events.maxEventTargetListenersWarned');\x0d\n\x0d\nlet EventEmitterAsyncResource;\x0d\n// The EventEmitterAsyncResource has to be initialized lazily because event.js\x0d\n// is loaded so early in the bootstrap process\x2C before async_hooks is available.\x0d\n//\x0d\n// This implementation was adapted straight from addaleax's\x0d\n// eventemitter-asyncresource MIT-licensed userland module.\x0d\n// https://github.com/addaleax/eventemitter-asyncresource\x0d\nfunction lazyEventEmitterAsyncResource() {\x0d\n  if (EventEmitterAsyncResource === undefined) {\x0d\n    const {\x0d\n      AsyncResource\x0d\n    } = require('async_hooks');\x0d\n\x0d\n    const kEventEmitter = Symbol('kEventEmitter');\x0d\n    const kAsyncResource = Symbol('kAsyncResource');\x0d\n    class EventEmitterReferencingAsyncResource extends AsyncResource {\x0d\n      /**\x0d\n       * @param {EventEmitter} ee\x0d\n       * @param {string} [type]\x0d\n       * @param {{\x0d\n       *   triggerAsyncId?: number\x2C\x0d\n       *   requireManualDestroy?: boolean\x2C\x0d\n       * }} [options]\x0d\n       */\x0d\n      constructor(ee\x2C type\x2C options) {\x0d\n        super(type\x2C options);\x0d\n        this[kEventEmitter] = ee;\x0d\n      }\x0d\n\x0d\n      /**\x0d\n       * @type {EventEmitter}\x0d\n       */\x0d\n      get eventEmitter() {\x0d\n        if (this[kEventEmitter] === undefined)\x0d\n          throw new ERR_INVALID_THIS('EventEmitterReferencingAsyncResource');\x0d\n        return this[kEventEmitter];\x0d\n      }\x0d\n    }\x0d\n\x0d\n    EventEmitterAsyncResource =\x0d\n      class EventEmitterAsyncResource extends EventEmitter {\x0d\n        /**\x0d\n         * @param {{\x0d\n         *   name?: string\x2C\x0d\n         *   triggerAsyncId?: number\x2C\x0d\n         *   requireManualDestroy?: boolean\x2C\x0d\n         * }} [options]\x0d\n         */\x0d\n        constructor(options = undefined) {\x0d\n          let name;\x0d\n          if (typeof options === 'string') {\x0d\n            name = options;\x0d\n            options = undefined;\x0d\n          } else {\x0d\n            if (new.target === EventEmitterAsyncResource) {\x0d\n              validateString(options?.name\x2C 'options.name');\x0d\n            }\x0d\n            name = options?.name || new.target.name;\x0d\n          }\x0d\n          super(options);\x0d\n\x0d\n          this[kAsyncResource] =\x0d\n            new EventEmitterReferencingAsyncResource(this\x2C name\x2C options);\x0d\n        }\x0d\n\x0d\n        /**\x0d\n         * @param {symbol\x2Cstring} event\x0d\n         * @param  {...any} args\x0d\n         * @returns {boolean}\x0d\n         */\x0d\n        emit(event\x2C ...args) {\x0d\n          if (this[kAsyncResource] === undefined)\x0d\n            throw new ERR_INVALID_THIS('EventEmitterAsyncResource');\x0d\n          const { asyncResource } = this;\x0d\n          ArrayPrototypeUnshift(args\x2C super.emit\x2C this\x2C event);\x0d\n          return ReflectApply(asyncResource.runInAsyncScope\x2C asyncResource\x2C\x0d\n                              args);\x0d\n        }\x0d\n\x0d\n        /**\x0d\n         * @returns {void}\x0d\n         */\x0d\n        emitDestroy() {\x0d\n          if (this[kAsyncResource] === undefined)\x0d\n            throw new ERR_INVALID_THIS('EventEmitterAsyncResource');\x0d\n          this.asyncResource.emitDestroy();\x0d\n        }\x0d\n\x0d\n        /**\x0d\n         * @type {number}\x0d\n         */\x0d\n        get asyncId() {\x0d\n          if (this[kAsyncResource] === undefined)\x0d\n            throw new ERR_INVALID_THIS('EventEmitterAsyncResource');\x0d\n          return this.asyncResource.asyncId();\x0d\n        }\x0d\n\x0d\n        /**\x0d\n         * @type {number}\x0d\n         */\x0d\n        get triggerAsyncId() {\x0d\n          if (this[kAsyncResource] === undefined)\x0d\n            throw new ERR_INVALID_THIS('EventEmitterAsyncResource');\x0d\n          return this.asyncResource.triggerAsyncId();\x0d\n        }\x0d\n\x0d\n        /**\x0d\n         * @type {EventEmitterReferencingAsyncResource}\x0d\n         */\x0d\n        get asyncResource() {\x0d\n          if (this[kAsyncResource] === undefined)\x0d\n            throw new ERR_INVALID_THIS('EventEmitterAsyncResource');\x0d\n          return this[kAsyncResource];\x0d\n        }\x0d\n      };\x0d\n  }\x0d\n  return EventEmitterAsyncResource;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Creates a new `EventEmitter` instance.\x0d\n * @param {{ captureRejections?: boolean; }} [opts]\x0d\n * @constructs {EventEmitter}\x0d\n */\x0d\nfunction EventEmitter(opts) {\x0d\n  EventEmitter.init.call(this\x2C opts);\x0d\n}\x0d\nmodule.exports = EventEmitter;\x0d\nmodule.exports.once = once;\x0d\nmodule.exports.on = on;\x0d\nmodule.exports.getEventListeners = getEventListeners;\x0d\n// Backwards-compat with node 0.10.x\x0d\nEventEmitter.EventEmitter = EventEmitter;\x0d\n\x0d\nEventEmitter.usingDomains = false;\x0d\n\x0d\nEventEmitter.captureRejectionSymbol = kRejection;\x0d\nObjectDefineProperty(EventEmitter\x2C 'captureRejections'\x2C {\x0d\n  get() {\x0d\n    return EventEmitter.prototype[kCapture];\x0d\n  }\x2C\x0d\n  set(value) {\x0d\n    validateBoolean(value\x2C 'EventEmitter.captureRejections');\x0d\n\x0d\n    EventEmitter.prototype[kCapture] = value;\x0d\n  }\x2C\x0d\n  enumerable: true\x0d\n});\x0d\n\x0d\nObjectDefineProperty(EventEmitter\x2C 'EventEmitterAsyncResource'\x2C {\x0d\n  enumerable: true\x2C\x0d\n  get: lazyEventEmitterAsyncResource\x2C\x0d\n  set: undefined\x2C\x0d\n  configurable: true\x2C\x0d\n});\x0d\n\x0d\nEventEmitter.errorMonitor = kErrorMonitor;\x0d\n\x0d\n// The default for captureRejections is false\x0d\nObjectDefineProperty(EventEmitter.prototype\x2C kCapture\x2C {\x0d\n  value: false\x2C\x0d\n  writable: true\x2C\x0d\n  enumerable: false\x0d\n});\x0d\n\x0d\nEventEmitter.prototype._events = undefined;\x0d\nEventEmitter.prototype._eventsCount = 0;\x0d\nEventEmitter.prototype._maxListeners = undefined;\x0d\n\x0d\n// By default EventEmitters will print a warning if more than 10 listeners are\x0d\n// added to it. This is a useful default which helps finding memory leaks.\x0d\nlet defaultMaxListeners = 10;\x0d\nlet isEventTarget;\x0d\n\x0d\nfunction checkListener(listener) {\x0d\n  validateFunction(listener\x2C 'listener');\x0d\n}\x0d\n\x0d\nObjectDefineProperty(EventEmitter\x2C 'defaultMaxListeners'\x2C {\x0d\n  enumerable: true\x2C\x0d\n  get: function() {\x0d\n    return defaultMaxListeners;\x0d\n  }\x2C\x0d\n  set: function(arg) {\x0d\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\x0d\n      throw new ERR_OUT_OF_RANGE('defaultMaxListeners'\x2C\x0d\n                                 'a non-negative number'\x2C\x0d\n                                 arg);\x0d\n    }\x0d\n    defaultMaxListeners = arg;\x0d\n  }\x0d\n});\x0d\n\x0d\nObjectDefineProperties(EventEmitter\x2C {\x0d\n  kMaxEventTargetListeners: {\x0d\n    value: kMaxEventTargetListeners\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: false\x2C\x0d\n    writable: false\x2C\x0d\n  }\x2C\x0d\n  kMaxEventTargetListenersWarned: {\x0d\n    value: kMaxEventTargetListenersWarned\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: false\x2C\x0d\n    writable: false\x2C\x0d\n  }\x0d\n});\x0d\n\x0d\n/**\x0d\n * Sets the max listeners.\x0d\n * @param {number} n\x0d\n * @param {EventTarget[] | EventEmitter[]} [eventTargets]\x0d\n * @returns {void}\x0d\n */\x0d\nEventEmitter.setMaxListeners =\x0d\n  function(n = defaultMaxListeners\x2C ...eventTargets) {\x0d\n    if (typeof n !== 'number' || n < 0 || NumberIsNaN(n))\x0d\n      throw new ERR_OUT_OF_RANGE('n'\x2C 'a non-negative number'\x2C n);\x0d\n    if (eventTargets.length === 0) {\x0d\n      defaultMaxListeners = n;\x0d\n    } else {\x0d\n      if (isEventTarget === undefined)\x0d\n        isEventTarget = require('internal/event_target').isEventTarget;\x0d\n\x0d\n      for (let i = 0; i < eventTargets.length; i++) {\x0d\n        const target = eventTargets[i];\x0d\n        if (isEventTarget(target)) {\x0d\n          target[kMaxEventTargetListeners] = n;\x0d\n          target[kMaxEventTargetListenersWarned] = false;\x0d\n        } else if (typeof target.setMaxListeners === 'function') {\x0d\n          target.setMaxListeners(n);\x0d\n        } else {\x0d\n          throw new ERR_INVALID_ARG_TYPE(\x0d\n            'eventTargets'\x2C\x0d\n            ['EventEmitter'\x2C 'EventTarget']\x2C\x0d\n            target);\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n  };\x0d\n\x0d\n// If you're updating this function definition\x2C please also update any\x0d\n// re-definitions\x2C such as the one in the Domain module (lib/domain.js).\x0d\nEventEmitter.init = function(opts) {\x0d\n\x0d\n  if (this._events === undefined ||\x0d\n      this._events === ObjectGetPrototypeOf(this)._events) {\x0d\n    this._events = ObjectCreate(null);\x0d\n    this._eventsCount = 0;\x0d\n  }\x0d\n\x0d\n  this._maxListeners = this._maxListeners || undefined;\x0d\n\x0d\n\x0d\n  if (opts?.captureRejections) {\x0d\n    validateBoolean(opts.captureRejections\x2C 'options.captureRejections');\x0d\n    this[kCapture] = Boolean(opts.captureRejections);\x0d\n  } else {\x0d\n    // Assigning the kCapture property directly saves an expensive\x0d\n    // prototype lookup in a very sensitive hot path.\x0d\n    this[kCapture] = EventEmitter.prototype[kCapture];\x0d\n  }\x0d\n};\x0d\n\x0d\nfunction addCatch(that\x2C promise\x2C type\x2C args) {\x0d\n  if (!that[kCapture]) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  // Handle Promises/A+ spec\x2C then could be a getter\x0d\n  // that throws on second use.\x0d\n  try {\x0d\n    const then = promise.then;\x0d\n\x0d\n    if (typeof then === 'function') {\x0d\n      then.call(promise\x2C undefined\x2C function(err) {\x0d\n        // The callback is called with nextTick to avoid a follow-up\x0d\n        // rejection from this promise.\x0d\n        process.nextTick(emitUnhandledRejectionOrErr\x2C that\x2C err\x2C type\x2C args);\x0d\n      });\x0d\n    }\x0d\n  } catch (err) {\x0d\n    that.emit('error'\x2C err);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction emitUnhandledRejectionOrErr(ee\x2C err\x2C type\x2C args) {\x0d\n  if (typeof ee[kRejection] === 'function') {\x0d\n    ee[kRejection](err\x2C type\x2C ...args);\x0d\n  } else {\x0d\n    // We have to disable the capture rejections mechanism\x2C otherwise\x0d\n    // we might end up in an infinite loop.\x0d\n    const prev = ee[kCapture];\x0d\n\x0d\n    // If the error handler throws\x2C it is not catchable and it\x0d\n    // will end up in 'uncaughtException'. We restore the previous\x0d\n    // value of kCapture in case the uncaughtException is present\x0d\n    // and the exception is handled.\x0d\n    try {\x0d\n      ee[kCapture] = false;\x0d\n      ee.emit('error'\x2C err);\x0d\n    } finally {\x0d\n      ee[kCapture] = prev;\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Increases the max listeners of the event emitter.\x0d\n * @param {number} n\x0d\n * @returns {EventEmitter}\x0d\n */\x0d\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\x0d\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\x0d\n    throw new ERR_OUT_OF_RANGE('n'\x2C 'a non-negative number'\x2C n);\x0d\n  }\x0d\n  this._maxListeners = n;\x0d\n  return this;\x0d\n};\x0d\n\x0d\nfunction _getMaxListeners(that) {\x0d\n  if (that._maxListeners === undefined)\x0d\n    return EventEmitter.defaultMaxListeners;\x0d\n  return that._maxListeners;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Returns the current max listener value for the event emitter.\x0d\n * @returns {number}\x0d\n */\x0d\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\x0d\n  return _getMaxListeners(this);\x0d\n};\x0d\n\x0d\n// Returns the length and line number of the first sequence of `a` that fully\x0d\n// appears in `b` with a length of at least 4.\x0d\nfunction identicalSequenceRange(a\x2C b) {\x0d\n  for (let i = 0; i < a.length - 3; i++) {\x0d\n    // Find the first entry of b that matches the current entry of a.\x0d\n    const pos = ArrayPrototypeIndexOf(b\x2C a[i]);\x0d\n    if (pos !== -1) {\x0d\n      const rest = b.length - pos;\x0d\n      if (rest > 3) {\x0d\n        let len = 1;\x0d\n        const maxLen = MathMin(a.length - i\x2C rest);\x0d\n        // Count the number of consecutive entries.\x0d\n        while (maxLen > len && a[i + len] === b[pos + len]) {\x0d\n          len++;\x0d\n        }\x0d\n        if (len > 3) {\x0d\n          return [len\x2C i];\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return [0\x2C 0];\x0d\n}\x0d\n\x0d\nfunction enhanceStackTrace(err\x2C own) {\x0d\n  let ctorInfo = '';\x0d\n  try {\x0d\n    const { name } = this.constructor;\x0d\n    if (name !== 'EventEmitter')\x0d\n      ctorInfo = ` on ${name} instance`;\x0d\n  } catch {\x0d\n    // Continue regardless of error.\x0d\n  }\x0d\n  const sep = `\\nEmitted 'error' event${ctorInfo} at:\\n`;\x0d\n\x0d\n  const errStack = ArrayPrototypeSlice(\x0d\n    StringPrototypeSplit(err.stack\x2C '\\n')\x2C 1);\x0d\n  const ownStack = ArrayPrototypeSlice(\x0d\n    StringPrototypeSplit(own.stack\x2C '\\n')\x2C 1);\x0d\n\x0d\n  const { 0: len\x2C 1: off } = identicalSequenceRange(ownStack\x2C errStack);\x0d\n  if (len > 0) {\x0d\n    ArrayPrototypeSplice(ownStack\x2C off + 1\x2C len - 2\x2C\x0d\n                         '    [... lines matching original stack trace ...]');\x0d\n  }\x0d\n\x0d\n  return err.stack + sep + ArrayPrototypeJoin(ownStack\x2C '\\n');\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously calls each of the listeners registered\x0d\n * for the event.\x0d\n * @param {string | symbol} type\x0d\n * @param {...any} [args]\x0d\n * @returns {boolean}\x0d\n */\x0d\nEventEmitter.prototype.emit = function emit(type\x2C ...args) {\x0d\n  let doError = (type === 'error');\x0d\n\x0d\n  const events = this._events;\x0d\n  if (events !== undefined) {\x0d\n    if (doError && events[kErrorMonitor] !== undefined)\x0d\n      this.emit(kErrorMonitor\x2C ...args);\x0d\n    doError = (doError && events.error === undefined);\x0d\n  } else if (!doError)\x0d\n    return false;\x0d\n\x0d\n  // If there is no 'error' event listener then throw.\x0d\n  if (doError) {\x0d\n    let er;\x0d\n    if (args.length > 0)\x0d\n      er = args[0];\x0d\n    if (er instanceof Error) {\x0d\n      try {\x0d\n        const capture = {};\x0d\n        ErrorCaptureStackTrace(capture\x2C EventEmitter.prototype.emit);\x0d\n        ObjectDefineProperty(er\x2C kEnhanceStackBeforeInspector\x2C {\x0d\n          value: FunctionPrototypeBind(enhanceStackTrace\x2C this\x2C er\x2C capture)\x2C\x0d\n          configurable: true\x0d\n        });\x0d\n      } catch {\x0d\n        // Continue regardless of error.\x0d\n      }\x0d\n\x0d\n      // Note: The comments on the `throw` lines are intentional\x2C they show\x0d\n      // up in Node's output if this results in an unhandled exception.\x0d\n      throw er; // Unhandled 'error' event\x0d\n    }\x0d\n\x0d\n    let stringifiedEr;\x0d\n    try {\x0d\n      stringifiedEr = inspect(er);\x0d\n    } catch {\x0d\n      stringifiedEr = er;\x0d\n    }\x0d\n\x0d\n    // At least give some kind of context to the user\x0d\n    const err = new ERR_UNHANDLED_ERROR(stringifiedEr);\x0d\n    err.context = er;\x0d\n    throw err; // Unhandled 'error' event\x0d\n  }\x0d\n\x0d\n  const handler = events[type];\x0d\n\x0d\n  if (handler === undefined)\x0d\n    return false;\x0d\n\x0d\n  if (typeof handler === 'function') {\x0d\n    const result = handler.apply(this\x2C args);\x0d\n\x0d\n    // We check if result is undefined first because that\x0d\n    // is the most common case so we do not pay any perf\x0d\n    // penalty\x0d\n    if (result !== undefined && result !== null) {\x0d\n      addCatch(this\x2C result\x2C type\x2C args);\x0d\n    }\x0d\n  } else {\x0d\n    const len = handler.length;\x0d\n    const listeners = arrayClone(handler);\x0d\n    for (let i = 0; i < len; ++i) {\x0d\n      const result = listeners[i].apply(this\x2C args);\x0d\n\x0d\n      // We check if result is undefined first because that\x0d\n      // is the most common case so we do not pay any perf\x0d\n      // penalty.\x0d\n      // This code is duplicated because extracting it away\x0d\n      // would make it non-inlineable.\x0d\n      if (result !== undefined && result !== null) {\x0d\n        addCatch(this\x2C result\x2C type\x2C args);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return true;\x0d\n};\x0d\n\x0d\nfunction _addListener(target\x2C type\x2C listener\x2C prepend) {\x0d\n  let m;\x0d\n  let events;\x0d\n  let existing;\x0d\n\x0d\n  checkListener(listener);\x0d\n\x0d\n  events = target._events;\x0d\n  if (events === undefined) {\x0d\n    events = target._events = ObjectCreate(null);\x0d\n    target._eventsCount = 0;\x0d\n  } else {\x0d\n    // To avoid recursion in the case that type === "newListener"! Before\x0d\n    // adding it to the listeners\x2C first emit "newListener".\x0d\n    if (events.newListener !== undefined) {\x0d\n      target.emit('newListener'\x2C type\x2C\x0d\n                  listener.listener ?? listener);\x0d\n\x0d\n      // Re-assign `events` because a newListener handler could have caused the\x0d\n      // this._events to be assigned to a new object\x0d\n      events = target._events;\x0d\n    }\x0d\n    existing = events[type];\x0d\n  }\x0d\n\x0d\n  if (existing === undefined) {\x0d\n    // Optimize the case of one listener. Don't need the extra array object.\x0d\n    events[type] = listener;\x0d\n    ++target._eventsCount;\x0d\n  } else {\x0d\n    if (typeof existing === 'function') {\x0d\n      // Adding the second element\x2C need to change to array.\x0d\n      existing = events[type] =\x0d\n        prepend ? [listener\x2C existing] : [existing\x2C listener];\x0d\n      // If we've already got an array\x2C just append.\x0d\n    } else if (prepend) {\x0d\n      existing.unshift(listener);\x0d\n    } else {\x0d\n      existing.push(listener);\x0d\n    }\x0d\n\x0d\n    // Check for listener leak\x0d\n    m = _getMaxListeners(target);\x0d\n    if (m > 0 && existing.length > m && !existing.warned) {\x0d\n      existing.warned = true;\x0d\n      // No error code for this since it is a Warning\x0d\n      // eslint-disable-next-line no-restricted-syntax\x0d\n      const w = new Error('Possible EventEmitter memory leak detected. ' +\x0d\n                          `${existing.length} ${String(type)} listeners ` +\x0d\n                          `added to ${inspect(target\x2C { depth: -1 })}. Use ` +\x0d\n                          'emitter.setMaxListeners() to increase limit');\x0d\n      w.name = 'MaxListenersExceededWarning';\x0d\n      w.emitter = target;\x0d\n      w.type = type;\x0d\n      w.count = existing.length;\x0d\n      process.emitWarning(w);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return target;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Adds a listener to the event emitter.\x0d\n * @param {string | symbol} type\x0d\n * @param {Function} listener\x0d\n * @returns {EventEmitter}\x0d\n */\x0d\nEventEmitter.prototype.addListener = function addListener(type\x2C listener) {\x0d\n  return _addListener(this\x2C type\x2C listener\x2C false);\x0d\n};\x0d\n\x0d\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\x0d\n\x0d\n/**\x0d\n * Adds the `listener` function to the beginning of\x0d\n * the listeners array.\x0d\n * @param {string | symbol} type\x0d\n * @param {Function} listener\x0d\n * @returns {EventEmitter}\x0d\n */\x0d\nEventEmitter.prototype.prependListener =\x0d\n    function prependListener(type\x2C listener) {\x0d\n      return _addListener(this\x2C type\x2C listener\x2C true);\x0d\n    };\x0d\n\x0d\nfunction onceWrapper() {\x0d\n  if (!this.fired) {\x0d\n    this.target.removeListener(this.type\x2C this.wrapFn);\x0d\n    this.fired = true;\x0d\n    if (arguments.length === 0)\x0d\n      return this.listener.call(this.target);\x0d\n    return this.listener.apply(this.target\x2C arguments);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction _onceWrap(target\x2C type\x2C listener) {\x0d\n  const state = { fired: false\x2C wrapFn: undefined\x2C target\x2C type\x2C listener };\x0d\n  const wrapped = onceWrapper.bind(state);\x0d\n  wrapped.listener = listener;\x0d\n  state.wrapFn = wrapped;\x0d\n  return wrapped;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Adds a one-time `listener` function to the event emitter.\x0d\n * @param {string | symbol} type\x0d\n * @param {Function} listener\x0d\n * @returns {EventEmitter}\x0d\n */\x0d\nEventEmitter.prototype.once = function once(type\x2C listener) {\x0d\n  checkListener(listener);\x0d\n\x0d\n  this.on(type\x2C _onceWrap(this\x2C type\x2C listener));\x0d\n  return this;\x0d\n};\x0d\n\x0d\n/**\x0d\n * Adds a one-time `listener` function to the beginning of\x0d\n * the listeners array.\x0d\n * @param {string | symbol} type\x0d\n * @param {Function} listener\x0d\n * @returns {EventEmitter}\x0d\n */\x0d\nEventEmitter.prototype.prependOnceListener =\x0d\n    function prependOnceListener(type\x2C listener) {\x0d\n      checkListener(listener);\x0d\n\x0d\n      this.prependListener(type\x2C _onceWrap(this\x2C type\x2C listener));\x0d\n      return this;\x0d\n    };\x0d\n\x0d\n/**\x0d\n * Removes the specified `listener` from the listeners array.\x0d\n * @param {string | symbol} type\x0d\n * @param {Function} listener\x0d\n * @returns {EventEmitter}\x0d\n */\x0d\nEventEmitter.prototype.removeListener =\x0d\n    function removeListener(type\x2C listener) {\x0d\n      checkListener(listener);\x0d\n\x0d\n      const events = this._events;\x0d\n      if (events === undefined)\x0d\n        return this;\x0d\n\x0d\n      const list = events[type];\x0d\n      if (list === undefined)\x0d\n        return this;\x0d\n\x0d\n      if (list === listener || list.listener === listener) {\x0d\n        if (--this._eventsCount === 0)\x0d\n          this._events = ObjectCreate(null);\x0d\n        else {\x0d\n          delete events[type];\x0d\n          if (events.removeListener)\x0d\n            this.emit('removeListener'\x2C type\x2C list.listener || listener);\x0d\n        }\x0d\n      } else if (typeof list !== 'function') {\x0d\n        let position = -1;\x0d\n\x0d\n        for (let i = list.length - 1; i >= 0; i--) {\x0d\n          if (list[i] === listener || list[i].listener === listener) {\x0d\n            position = i;\x0d\n            break;\x0d\n          }\x0d\n        }\x0d\n\x0d\n        if (position < 0)\x0d\n          return this;\x0d\n\x0d\n        if (position === 0)\x0d\n          list.shift();\x0d\n        else {\x0d\n          if (spliceOne === undefined)\x0d\n            spliceOne = require('internal/util').spliceOne;\x0d\n          spliceOne(list\x2C position);\x0d\n        }\x0d\n\x0d\n        if (list.length === 1)\x0d\n          events[type] = list[0];\x0d\n\x0d\n        if (events.removeListener !== undefined)\x0d\n          this.emit('removeListener'\x2C type\x2C listener);\x0d\n      }\x0d\n\x0d\n      return this;\x0d\n    };\x0d\n\x0d\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\x0d\n\x0d\n/**\x0d\n * Removes all listeners from the event emitter. (Only\x0d\n * removes listeners for a specific event name if specified\x0d\n * as `type`).\x0d\n * @param {string | symbol} [type]\x0d\n * @returns {EventEmitter}\x0d\n */\x0d\nEventEmitter.prototype.removeAllListeners =\x0d\n    function removeAllListeners(type) {\x0d\n      const events = this._events;\x0d\n      if (events === undefined)\x0d\n        return this;\x0d\n\x0d\n      // Not listening for removeListener\x2C no need to emit\x0d\n      if (events.removeListener === undefined) {\x0d\n        if (arguments.length === 0) {\x0d\n          this._events = ObjectCreate(null);\x0d\n          this._eventsCount = 0;\x0d\n        } else if (events[type] !== undefined) {\x0d\n          if (--this._eventsCount === 0)\x0d\n            this._events = ObjectCreate(null);\x0d\n          else\x0d\n            delete events[type];\x0d\n        }\x0d\n        return this;\x0d\n      }\x0d\n\x0d\n      // Emit removeListener for all listeners on all events\x0d\n      if (arguments.length === 0) {\x0d\n        for (const key of ReflectOwnKeys(events)) {\x0d\n          if (key === 'removeListener') continue;\x0d\n          this.removeAllListeners(key);\x0d\n        }\x0d\n        this.removeAllListeners('removeListener');\x0d\n        this._events = ObjectCreate(null);\x0d\n        this._eventsCount = 0;\x0d\n        return this;\x0d\n      }\x0d\n\x0d\n      const listeners = events[type];\x0d\n\x0d\n      if (typeof listeners === 'function') {\x0d\n        this.removeListener(type\x2C listeners);\x0d\n      } else if (listeners !== undefined) {\x0d\n        // LIFO order\x0d\n        for (let i = listeners.length - 1; i >= 0; i--) {\x0d\n          this.removeListener(type\x2C listeners[i]);\x0d\n        }\x0d\n      }\x0d\n\x0d\n      return this;\x0d\n    };\x0d\n\x0d\nfunction _listeners(target\x2C type\x2C unwrap) {\x0d\n  const events = target._events;\x0d\n\x0d\n  if (events === undefined)\x0d\n    return [];\x0d\n\x0d\n  const evlistener = events[type];\x0d\n  if (evlistener === undefined)\x0d\n    return [];\x0d\n\x0d\n  if (typeof evlistener === 'function')\x0d\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\x0d\n\x0d\n  return unwrap ?\x0d\n    unwrapListeners(evlistener) : arrayClone(evlistener);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Returns a copy of the array of listeners for the event name\x0d\n * specified as `type`.\x0d\n * @param {string | symbol} type\x0d\n * @returns {Function[]}\x0d\n */\x0d\nEventEmitter.prototype.listeners = function listeners(type) {\x0d\n  return _listeners(this\x2C type\x2C true);\x0d\n};\x0d\n\x0d\n/**\x0d\n * Returns a copy of the array of listeners and wrappers for\x0d\n * the event name specified as `type`.\x0d\n * @param {string | symbol} type\x0d\n * @returns {Function[]}\x0d\n */\x0d\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\x0d\n  return _listeners(this\x2C type\x2C false);\x0d\n};\x0d\n\x0d\n/**\x0d\n * Returns the number of listeners listening to the event name\x0d\n * specified as `type`.\x0d\n * @deprecated since v3.2.0\x0d\n * @param {EventEmitter} emitter\x0d\n * @param {string | symbol} type\x0d\n * @returns {number}\x0d\n */\x0d\nEventEmitter.listenerCount = function(emitter\x2C type) {\x0d\n  if (typeof emitter.listenerCount === 'function') {\x0d\n    return emitter.listenerCount(type);\x0d\n  }\x0d\n  return FunctionPrototypeCall(listenerCount\x2C emitter\x2C type);\x0d\n};\x0d\n\x0d\nEventEmitter.prototype.listenerCount = listenerCount;\x0d\n\x0d\n/**\x0d\n * Returns the number of listeners listening to event name\x0d\n * specified as `type`.\x0d\n * @param {string | symbol} type\x0d\n * @returns {number}\x0d\n */\x0d\nfunction listenerCount(type) {\x0d\n  const events = this._events;\x0d\n\x0d\n  if (events !== undefined) {\x0d\n    const evlistener = events[type];\x0d\n\x0d\n    if (typeof evlistener === 'function') {\x0d\n      return 1;\x0d\n    } else if (evlistener !== undefined) {\x0d\n      return evlistener.length;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return 0;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Returns an array listing the events for which\x0d\n * the emitter has registered listeners.\x0d\n * @returns {any[]}\x0d\n */\x0d\nEventEmitter.prototype.eventNames = function eventNames() {\x0d\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\x0d\n};\x0d\n\x0d\nfunction arrayClone(arr) {\x0d\n  // At least since V8 8.3\x2C this implementation is faster than the previous\x0d\n  // which always used a simple for-loop\x0d\n  switch (arr.length) {\x0d\n    case 2: return [arr[0]\x2C arr[1]];\x0d\n    case 3: return [arr[0]\x2C arr[1]\x2C arr[2]];\x0d\n    case 4: return [arr[0]\x2C arr[1]\x2C arr[2]\x2C arr[3]];\x0d\n    case 5: return [arr[0]\x2C arr[1]\x2C arr[2]\x2C arr[3]\x2C arr[4]];\x0d\n    case 6: return [arr[0]\x2C arr[1]\x2C arr[2]\x2C arr[3]\x2C arr[4]\x2C arr[5]];\x0d\n  }\x0d\n  return ArrayPrototypeSlice(arr);\x0d\n}\x0d\n\x0d\nfunction unwrapListeners(arr) {\x0d\n  const ret = arrayClone(arr);\x0d\n  for (let i = 0; i < ret.length; ++i) {\x0d\n    const orig = ret[i].listener;\x0d\n    if (typeof orig === 'function')\x0d\n      ret[i] = orig;\x0d\n  }\x0d\n  return ret;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Returns a copy of the array of listeners for the event name\x0d\n * specified as `type`.\x0d\n * @param {EventEmitter | EventTarget} emitterOrTarget\x0d\n * @param {string | symbol} type\x0d\n * @returns {Function[]}\x0d\n */\x0d\nfunction getEventListeners(emitterOrTarget\x2C type) {\x0d\n  // First check if EventEmitter\x0d\n  if (typeof emitterOrTarget.listeners === 'function') {\x0d\n    return emitterOrTarget.listeners(type);\x0d\n  }\x0d\n  // Require event target lazily to avoid always loading it\x0d\n  const { isEventTarget\x2C kEvents } = require('internal/event_target');\x0d\n  if (isEventTarget(emitterOrTarget)) {\x0d\n    const root = emitterOrTarget[kEvents].get(type);\x0d\n    const listeners = [];\x0d\n    let handler = root?.next;\x0d\n    while (handler?.listener !== undefined) {\x0d\n      const listener = handler.listener?.deref ?\x0d\n        handler.listener.deref() : handler.listener;\x0d\n      listeners.push(listener);\x0d\n      handler = handler.next;\x0d\n    }\x0d\n    return listeners;\x0d\n  }\x0d\n  throw new ERR_INVALID_ARG_TYPE('emitter'\x2C\x0d\n                                 ['EventEmitter'\x2C 'EventTarget']\x2C\x0d\n                                 emitterOrTarget);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Creates a `Promise` that is fulfilled when the emitter\x0d\n * emits the given event.\x0d\n * @param {EventEmitter} emitter\x0d\n * @param {string} name\x0d\n * @param {{ signal: AbortSignal; }} [options]\x0d\n * @returns {Promise}\x0d\n */\x0d\nasync function once(emitter\x2C name\x2C options = {}) {\x0d\n  const signal = options?.signal;\x0d\n  validateAbortSignal(signal\x2C 'options.signal');\x0d\n  if (signal?.aborted)\x0d\n    throw new AbortError();\x0d\n  return new Promise((resolve\x2C reject) => {\x0d\n    const errorListener = (err) => {\x0d\n      emitter.removeListener(name\x2C resolver);\x0d\n      if (signal != null) {\x0d\n        eventTargetAgnosticRemoveListener(signal\x2C 'abort'\x2C abortListener);\x0d\n      }\x0d\n      reject(err);\x0d\n    };\x0d\n    const resolver = (...args) => {\x0d\n      if (typeof emitter.removeListener === 'function') {\x0d\n        emitter.removeListener('error'\x2C errorListener);\x0d\n      }\x0d\n      if (signal != null) {\x0d\n        eventTargetAgnosticRemoveListener(signal\x2C 'abort'\x2C abortListener);\x0d\n      }\x0d\n      resolve(args);\x0d\n    };\x0d\n    eventTargetAgnosticAddListener(emitter\x2C name\x2C resolver\x2C { once: true });\x0d\n    if (name !== 'error' && typeof emitter.once === 'function') {\x0d\n      emitter.once('error'\x2C errorListener);\x0d\n    }\x0d\n    function abortListener() {\x0d\n      eventTargetAgnosticRemoveListener(emitter\x2C name\x2C resolver);\x0d\n      eventTargetAgnosticRemoveListener(emitter\x2C 'error'\x2C errorListener);\x0d\n      reject(new AbortError());\x0d\n    }\x0d\n    if (signal != null) {\x0d\n      eventTargetAgnosticAddListener(\x0d\n        signal\x2C 'abort'\x2C abortListener\x2C { once: true });\x0d\n    }\x0d\n  });\x0d\n}\x0d\n\x0d\nconst AsyncIteratorPrototype = ObjectGetPrototypeOf(\x0d\n  ObjectGetPrototypeOf(async function* () {}).prototype);\x0d\n\x0d\nfunction createIterResult(value\x2C done) {\x0d\n  return { value\x2C done };\x0d\n}\x0d\n\x0d\nfunction eventTargetAgnosticRemoveListener(emitter\x2C name\x2C listener\x2C flags) {\x0d\n  if (typeof emitter.removeListener === 'function') {\x0d\n    emitter.removeListener(name\x2C listener);\x0d\n  } else if (typeof emitter.removeEventListener === 'function') {\x0d\n    emitter.removeEventListener(name\x2C listener\x2C flags);\x0d\n  } else {\x0d\n    throw new ERR_INVALID_ARG_TYPE('emitter'\x2C 'EventEmitter'\x2C emitter);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction eventTargetAgnosticAddListener(emitter\x2C name\x2C listener\x2C flags) {\x0d\n  if (typeof emitter.on === 'function') {\x0d\n    if (flags?.once) {\x0d\n      emitter.once(name\x2C listener);\x0d\n    } else {\x0d\n      emitter.on(name\x2C listener);\x0d\n    }\x0d\n  } else if (typeof emitter.addEventListener === 'function') {\x0d\n    // EventTarget does not have `error` event semantics like Node\x0d\n    // EventEmitters\x2C we do not listen to `error` events here.\x0d\n    emitter.addEventListener(name\x2C (arg) => { listener(arg); }\x2C flags);\x0d\n  } else {\x0d\n    throw new ERR_INVALID_ARG_TYPE('emitter'\x2C 'EventEmitter'\x2C emitter);\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Returns an `AsyncIterator` that iterates `event` events.\x0d\n * @param {EventEmitter} emitter\x0d\n * @param {string | symbol} event\x0d\n * @param {{ signal: AbortSignal; }} [options]\x0d\n * @returns {AsyncIterator}\x0d\n */\x0d\nfunction on(emitter\x2C event\x2C options) {\x0d\n  const signal = options?.signal;\x0d\n  validateAbortSignal(signal\x2C 'options.signal');\x0d\n  if (signal?.aborted)\x0d\n    throw new AbortError();\x0d\n\x0d\n  const unconsumedEvents = [];\x0d\n  const unconsumedPromises = [];\x0d\n  let error = null;\x0d\n  let finished = false;\x0d\n\x0d\n  const iterator = ObjectSetPrototypeOf({\x0d\n    next() {\x0d\n      // First\x2C we consume all unread events\x0d\n      const value = unconsumedEvents.shift();\x0d\n      if (value) {\x0d\n        return PromiseResolve(createIterResult(value\x2C false));\x0d\n      }\x0d\n\x0d\n      // Then we error\x2C if an error happened\x0d\n      // This happens one time if at all\x2C because after 'error'\x0d\n      // we stop listening\x0d\n      if (error) {\x0d\n        const p = PromiseReject(error);\x0d\n        // Only the first element errors\x0d\n        error = null;\x0d\n        return p;\x0d\n      }\x0d\n\x0d\n      // If the iterator is finished\x2C resolve to done\x0d\n      if (finished) {\x0d\n        return PromiseResolve(createIterResult(undefined\x2C true));\x0d\n      }\x0d\n\x0d\n      // Wait until an event happens\x0d\n      return new Promise(function(resolve\x2C reject) {\x0d\n        unconsumedPromises.push({ resolve\x2C reject });\x0d\n      });\x0d\n    }\x2C\x0d\n\x0d\n    return() {\x0d\n      eventTargetAgnosticRemoveListener(emitter\x2C event\x2C eventHandler);\x0d\n      eventTargetAgnosticRemoveListener(emitter\x2C 'error'\x2C errorHandler);\x0d\n\x0d\n      if (signal) {\x0d\n        eventTargetAgnosticRemoveListener(\x0d\n          signal\x2C\x0d\n          'abort'\x2C\x0d\n          abortListener\x2C\x0d\n          { once: true });\x0d\n      }\x0d\n\x0d\n      finished = true;\x0d\n\x0d\n      for (const promise of unconsumedPromises) {\x0d\n        promise.resolve(createIterResult(undefined\x2C true));\x0d\n      }\x0d\n\x0d\n      return PromiseResolve(createIterResult(undefined\x2C true));\x0d\n    }\x2C\x0d\n\x0d\n    throw(err) {\x0d\n      if (!err || !(err instanceof Error)) {\x0d\n        throw new ERR_INVALID_ARG_TYPE('EventEmitter.AsyncIterator'\x2C\x0d\n                                       'Error'\x2C err);\x0d\n      }\x0d\n      error = err;\x0d\n      eventTargetAgnosticRemoveListener(emitter\x2C event\x2C eventHandler);\x0d\n      eventTargetAgnosticRemoveListener(emitter\x2C 'error'\x2C errorHandler);\x0d\n    }\x2C\x0d\n\x0d\n    [SymbolAsyncIterator]() {\x0d\n      return this;\x0d\n    }\x0d\n  }\x2C AsyncIteratorPrototype);\x0d\n\x0d\n  eventTargetAgnosticAddListener(emitter\x2C event\x2C eventHandler);\x0d\n  if (event !== 'error' && typeof emitter.on === 'function') {\x0d\n    emitter.on('error'\x2C errorHandler);\x0d\n  }\x0d\n\x0d\n  if (signal) {\x0d\n    eventTargetAgnosticAddListener(\x0d\n      signal\x2C\x0d\n      'abort'\x2C\x0d\n      abortListener\x2C\x0d\n      { once: true });\x0d\n  }\x0d\n\x0d\n  return iterator;\x0d\n\x0d\n  function abortListener() {\x0d\n    errorHandler(new AbortError());\x0d\n  }\x0d\n\x0d\n  function eventHandler(...args) {\x0d\n    const promise = ArrayPrototypeShift(unconsumedPromises);\x0d\n    if (promise) {\x0d\n      promise.resolve(createIterResult(args\x2C false));\x0d\n    } else {\x0d\n      unconsumedEvents.push(args);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  function errorHandler(err) {\x0d\n    finished = true;\x0d\n\x0d\n    const toError = ArrayPrototypeShift(unconsumedPromises);\x0d\n\x0d\n    if (toError) {\x0d\n      toError.reject(err);\x0d\n    } else {\x0d\n      // The next time we call next()\x0d\n      error = err;\x0d\n    }\x0d\n\x0d\n    iterator.return();\x0d\n  }\x0d\n}\x0d\n
code-source-info,0x2e2fa6913fe,23,18981,19055,C0O19003C14O19010C19O19052,,
code-creation,LazyCompile,10,313031,0x2e2fa693a9e,387,_addListener node:events:554:22,0x423ed6b698,~
code-source-info,0x2e2fa693a9e
code-creation,LazyCompile,10,313154,0x2e2fa693dd6,15,checkListener node:events:257:23,0x423ed6aff8,~
code-source-info,0x2e2fa693dd6,23,7863,7921,C0O7879C8O7879C14O7920,,
code-creation,LazyCompile,10,313202,0x2e2fa693ec6,30, node:internal/validators:236:42,0x13fcdd3cdf0,~
code-source-info,0x2e2fa693ec6,15,7461,7580,C0O7483C6O7521C22O7527C27O7521C29O7579,,
code-creation,LazyCompile,10,313371,0x2e2fa694146,380,emit node:events:474:44,0x423ed6b5d8,~
code-source-info,0x2e2fa
code-creation,LazyCompile,10,313554,0x2e2fa6944ee,172,startListeningIfSignal node:internal/process/signal:22:32,0x3096a13f7a8,~
script-source,92,node:internal/process/signal,'use strict';\x0d\n\x0d\nconst {\x0d\n  FunctionPrototypeBind\x2C\x0d\n  SafeMap\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  errnoException\x2C\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst { signals } = internalBinding('constants').os;\x0d\n\x0d\nlet Signal;\x0d\nconst signalWraps = new SafeMap();\x0d\n\x0d\nfunction isSignal(event) {\x0d\n  return typeof event === 'string' && signals[event] !== undefined;\x0d\n}\x0d\n\x0d\n// Detect presence of a listener for the special signal types\x0d\nfunction startListeningIfSignal(type) {\x0d\n  if (isSignal(type) && !signalWraps.has(type)) {\x0d\n    if (Signal === undefined)\x0d\n      Signal = internalBinding('signal_wrap').Signal;\x0d\n    const wrap = new Signal();\x0d\n\x0d\n    wrap.unref();\x0d\n\x0d\n    wrap.onsignal = FunctionPrototypeBind(process.emit\x2C process\x2C type\x2C type);\x0d\n\x0d\n    const signum = signals[type];\x0d\n    const err = wrap.start(signum);\x0d\n    if (err) {\x0d\n      wrap.close();\x0d\n      throw errnoException(err\x2C 'uv_signal_start');\x0d\n    }\x0d\n\x0d\n    signalWraps.set(type\x2C wrap);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction stopListeningIfSignal(type) {\x0d\n  const wrap = signalWraps.get(type);\x0d\n  if (wrap !== undefined && process.listenerCount(type) === 0) {\x0d\n    wrap.close();\x0d\n    signalWraps.delete(type);\x0d\n  }\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  startListeningIfSignal\x2C\x0d\n  stopListeningIfSignal\x0d\n};\x0d\n
code-source-info,0x2e2fa6944ee,92,450,944,C0O462C3O466C11O485C14O497C19O497C26O515C32O548C38O557C43O587C50O555C56O614C61O614C67O640C72O640C76O656C78O672C84O702C98O672C103O670C107O752C114O759C118O789C123O789C129O809C131O832C136O832C140O848C148O854C153O848C154O908C159O920C164O920C171O943,,
code-creation,LazyCompile,10,313721,0x2e2fa6948ae,19,isSignal node:internal/process/signal:17:18,0x3096a13f5f0,~
code-source-info,0x2e2fa6948ae,92,271,352,C0O284C8O320C13O327C17O335C18O349,,
code-creation,LazyCompile,10,313787,0x2e2fa694a4e,75,setupDebugEnv node:internal/bootstrap/pre_execution:186:23,0x2e2fa682168,~
code-source-info,0x2e2fa694a4e,95,5959,6174,C0O5967C6O5967C11O6000C19O6028C24O6032C29O6001C34O6048C42O6052C48O6097C54O6097C59O6134C64O6147C69O6148C74O6173,,
code-creation,LazyCompile,10,313895,0x2e2fa694de6,159,initializeDebugEnv node:internal/util/debuglog:22:28,0x423ed61680,~
script-source,22,node:internal/util/debuglog,'use strict';\x0d\n\x0d\nconst {\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  RegExp\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  SafeArrayIterator\x2C\x0d\n  StringPrototypeToLowerCase\x2C\x0d\n  StringPrototypeToUpperCase\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { inspect\x2C format\x2C formatWithOptions } = require('internal/util/inspect');\x0d\n\x0d\n// `debugImpls` and `testEnabled` are deliberately not initialized so any call\x0d\n// to `debuglog()` before `initializeDebugEnv()` is called will throw.\x0d\nlet debugImpls;\x0d\nlet testEnabled;\x0d\n\x0d\n\x0d\n// `debugEnv` is initial value of process.env.NODE_DEBUG\x0d\nfunction initializeDebugEnv(debugEnv) {\x0d\n  debugImpls = ObjectCreate(null);\x0d\n  if (debugEnv) {\x0d\n    // This is run before any user code\x2C it's OK not to use primordials.\x0d\n    debugEnv = debugEnv.replace(/[|\\\\{}()[\\]^$+?.]/g\x2C '\\\\$&')\x0d\n      .replaceAll('*'\x2C '.*')\x0d\n      .replaceAll('\x2C'\x2C '$|^');\x0d\n    const debugEnvRegex = new RegExp(`^${debugEnv}$`\x2C 'i');\x0d\n    testEnabled = (str) => RegExpPrototypeExec(debugEnvRegex\x2C str) !== null;\x0d\n  } else {\x0d\n    testEnabled = () => false;\x0d\n  }\x0d\n}\x0d\n\x0d\n// Emits warning when user sets\x0d\n// NODE_DEBUG=http or NODE_DEBUG=http2.\x0d\nfunction emitWarningIfNeeded(set) {\x0d\n  if ('HTTP' === set || 'HTTP2' === set) {\x0d\n    process.emitWarning('Setting the NODE_DEBUG environment variable ' +\x0d\n      'to \\'' + StringPrototypeToLowerCase(set) + '\\' can expose sensitive ' +\x0d\n      'data (such as passwords\x2C tokens and authentication headers) ' +\x0d\n      'in the resulting log.');\x0d\n  }\x0d\n}\x0d\n\x0d\nconst noop = () => {};\x0d\n\x0d\nfunction debuglogImpl(enabled\x2C set) {\x0d\n  if (debugImpls[set] === undefined) {\x0d\n    if (enabled) {\x0d\n      const pid = process.pid;\x0d\n      emitWarningIfNeeded(set);\x0d\n      debugImpls[set] = function debug(...args) {\x0d\n        const colors = process.stderr.hasColors && process.stderr.hasColors();\x0d\n        const msg = formatWithOptions({ colors }\x2C ...args);\x0d\n        const coloredPID = inspect(pid\x2C { colors });\x0d\n        process.stderr.write(format('%s %s: %s\\n'\x2C set\x2C coloredPID\x2C msg));\x0d\n      };\x0d\n    } else {\x0d\n      debugImpls[set] = noop;\x0d\n    }\x0d\n  }\x0d\n  return debugImpls[set];\x0d\n}\x0d\n\x0d\n// debuglogImpl depends on process.pid and process.env.NODE_DEBUG\x2C\x0d\n// so it needs to be called lazily in top scopes of internal modules\x0d\n// that may be loaded before these run time states are allowed to\x0d\n// be accessed.\x0d\nfunction debuglog(set\x2C cb) {\x0d\n  function init() {\x0d\n    set = StringPrototypeToUpperCase(set);\x0d\n    enabled = testEnabled(set);\x0d\n  }\x0d\n  let debug = (...args) => {\x0d\n    init();\x0d\n    // Only invokes debuglogImpl() when the debug function is\x0d\n    // called for the first time.\x0d\n    debug = debuglogImpl(enabled\x2C set);\x0d\n    if (typeof cb === 'function')\x0d\n      cb(debug);\x0d\n    switch (args.length) {\x0d\n      case 1: return debug(args[0]);\x0d\n      case 2: return debug(args[0]\x2C args[1]);\x0d\n      default: return debug(...new SafeArrayIterator(args));\x0d\n    }\x0d\n  };\x0d\n  let enabled;\x0d\n  let test = () => {\x0d\n    init();\x0d\n    test = () => enabled;\x0d\n    return enabled;\x0d\n  };\x0d\n  const logger = (...args) => {\x0d\n    switch (args.length) {\x0d\n      case 1: return debug(args[0]);\x0d\n      case 2: return debug(args[0]\x2C args[1]);\x0d\n      default: return debug(...new SafeArrayIterator(args));\x0d\n    }\x0d\n  };\x0d\n  ObjectDefineProperty(logger\x2C 'enabled'\x2C {\x0d\n    get() {\x0d\n      return test();\x0d\n    }\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: true\x0d\n  });\x0d\n  return logger;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  debuglog\x2C\x0d\n  initializeDebugEnv\x0d\n};\x0d\n
code-source-info,0x2e2fa694de6,22,567,1024,C0O583C7O596C14O594C20O619C31O734C44O734C51O779C62O780C69O809C80O810C88O861C100O876C116O861C121O861C123O900C132O912C144O990C151O1002C158O1023,,
code-creation,LazyCompile,10,314187,0x2e2fa6954c6,49,setupStacktracePrinterOnSigint node:internal/bootstrap/pre_execution:165:40,0x2e2fa6820a0,~
code-source-info,0x2e2fa6954c6,95,5502,5696,C0O5510C8O5515C14O5556C15O5563C16O5599C22O5599C27O5580C32O5651C38O5685C43O5685C48O5695,,
code-creation,LazyCompile,10,314265,0x2e2fa695736,62,initializeReport node:internal/bootstrap/pre_execution:175:26,0x2e2fa6820f0,~
code-source-info,0x2e2fa695736,95,5725,5933,C0O5725C8O5752C16O5752C21O5741C27O5791C42O5812C47O5887C55O5791C61O5932,,
code-creation,Eval,10,314460,0x2e2fa695ca6,5, node:internal/process/report:1:1,0x2e2fa695ab0,~
script-source,98,node:internal/process/report,'use strict';\x0d\nconst {\x0d\n  ERR_SYNTHETIC\x0d\n} = require('internal/errors').codes;\x0d\nconst {\x0d\n  validateBoolean\x2C\x0d\n  validateObject\x2C\x0d\n  validateSignalName\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\nconst nr = internalBinding('report');\x0d\nconst {\x0d\n  JSONParse\x2C\x0d\n} = primordials;\x0d\nconst report = {\x0d\n  writeReport(file\x2C err) {\x0d\n    if (typeof file === 'object' && file !== null) {\x0d\n      err = file;\x0d\n      file = undefined;\x0d\n    } else if (file !== undefined) {\x0d\n      validateString(file\x2C 'file');\x0d\n    }\x0d\n\x0d\n    if (err === undefined) {\x0d\n      err = new ERR_SYNTHETIC();\x0d\n    } else {\x0d\n      validateObject(err\x2C 'err');\x0d\n    }\x0d\n\x0d\n    return nr.writeReport('JavaScript API'\x2C 'API'\x2C file\x2C err);\x0d\n  }\x2C\x0d\n  getReport(err) {\x0d\n    if (err === undefined)\x0d\n      err = new ERR_SYNTHETIC();\x0d\n    else\x0d\n      validateObject(err\x2C 'err');\x0d\n\x0d\n    return JSONParse(nr.getReport(err));\x0d\n  }\x2C\x0d\n  get directory() {\x0d\n    return nr.getDirectory();\x0d\n  }\x2C\x0d\n  set directory(dir) {\x0d\n    validateString(dir\x2C 'directory');\x0d\n    nr.setDirectory(dir);\x0d\n  }\x2C\x0d\n  get filename() {\x0d\n    return nr.getFilename();\x0d\n  }\x2C\x0d\n  set filename(name) {\x0d\n    validateString(name\x2C 'filename');\x0d\n    nr.setFilename(name);\x0d\n  }\x2C\x0d\n  get compact() {\x0d\n    return nr.getCompact();\x0d\n  }\x2C\x0d\n  set compact(b) {\x0d\n    validateBoolean(b\x2C 'compact');\x0d\n    nr.setCompact(b);\x0d\n  }\x2C\x0d\n  get signal() {\x0d\n    return nr.getSignal();\x0d\n  }\x2C\x0d\n  set signal(sig) {\x0d\n    validateSignalName(sig\x2C 'signal');\x0d\n    removeSignalHandler();\x0d\n    addSignalHandler(sig);\x0d\n    nr.setSignal(sig);\x0d\n  }\x2C\x0d\n  get reportOnFatalError() {\x0d\n    return nr.shouldReportOnFatalError();\x0d\n  }\x2C\x0d\n  set reportOnFatalError(trigger) {\x0d\n    validateBoolean(trigger\x2C 'trigger');\x0d\n\x0d\n    nr.setReportOnFatalError(trigger);\x0d\n  }\x2C\x0d\n  get reportOnSignal() {\x0d\n    return nr.shouldReportOnSignal();\x0d\n  }\x2C\x0d\n  set reportOnSignal(trigger) {\x0d\n    validateBoolean(trigger\x2C 'trigger');\x0d\n\x0d\n    nr.setReportOnSignal(trigger);\x0d\n    removeSignalHandler();\x0d\n    addSignalHandler();\x0d\n  }\x2C\x0d\n  get reportOnUncaughtException() {\x0d\n    return nr.shouldReportOnUncaughtException();\x0d\n  }\x2C\x0d\n  set reportOnUncaughtException(trigger) {\x0d\n    validateBoolean(trigger\x2C 'trigger');\x0d\n\x0d\n    nr.setReportOnUncaughtException(trigger);\x0d\n  }\x0d\n};\x0d\n\x0d\nfunction addSignalHandler(sig) {\x0d\n  if (nr.shouldReportOnSignal()) {\x0d\n    if (typeof sig !== 'string')\x0d\n      sig = nr.getSignal();\x0d\n\x0d\n    process.on(sig\x2C signalHandler);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction removeSignalHandler() {\x0d\n  const sig = nr.getSignal();\x0d\n\x0d\n  if (sig)\x0d\n    process.removeListener(sig\x2C signalHandler);\x0d\n}\x0d\n\x0d\nfunction signalHandler(sig) {\x0d\n  nr.writeReport(sig\x2C 'Signal'\x2C null\x2C '');\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  addSignalHandler\x2C\x0d\n  report\x0d\n};\x0d\n
code-source-info,0x2e2fa695ca6,98,0,2666,C0O0C4O2666,,
code-creation,Function,10,314684,0x2e2fa6967b6,306, node:internal/process/report:1:1,0x2e2fa695c20,~
code-source-info,0x2e2fa6967b6,98,0,2666,C0O0C48O45C51O45C56O71C61O26C67O174C70O174C75O91C81O111C87O130C93O153C99O218C102O218C106O218C108O257C114O302C119O307C127O709C281O2611C288O2633C294O2654C300O2626C305O2665,,
code-creation,LazyCompile,10,314939,0x2e2fa69848e,21,initializeReportSignalHandlers node:internal/bootstrap/pre_execution:194:40,0x2e2fa6821b8,~
code-source-info,0x2e2fa69848e,95,6278,6378,C0O6315C6O6315C11O6294C16O6356C20O6377,,
code-creation,LazyCompile,10,315013,0x2e2fa6985d6,57,addSignalHandler node:internal/process/report:98:26,0x2e2fa695cd8,~
code-source-info,0x2e2fa6985d6,98,2241,2394,C0O2252C5O2259C10O2259C16O2290C22O2326C27O2335C32O2335C38O2355C41O2363C49O2363C56O2393,,
code-creation,LazyCompile,10,315086,0x2e2fa698b9e,92,initializeHeapSnapshotSignalHandlers node:internal/bootstrap/pre_execution:200:46,0x2e2fa682208,~
code-source-info,0x2e2fa698b9e,95,6427,6701,C0O6427C8O6450C18O6450C23O6496C25O6514C26O6521C27O6527C35O6527C40O6557C45O6558C50O6619C58O6619C63O6597C69O6639C74O6647C79O6650C84O6647C91O6700,,
code-creation,LazyCompile,10,315174,0x2e2fa698e2e,138,setupChildProcessIpcChannel node:internal/bootstrap/pre_execution:330:37,0x2e2fa6823d8,~
code-source-info,0x2e2fa698e2e,95,10571,11117,C0O10579C3O10591C8O10595C14O10634C20O10634C25O10680C33O10703C38O10707C46O10680C52O10734C53O10744C57O10734C61O10828C64O10843C73O10904C76O10912C81O10916C90O10964C93O10979C102O11023C108O11023C113O11047C118O11048C124O11088C127O11103C132O11088C137O11116,,
code-creation,LazyCompile,10,315269,0x2e2fa698fbe,21,assert node:internal/assert:11:16,0x423ed60658,~
script-source,21,node:internal/assert,'use strict';\x0d\n\x0d\nlet error;\x0d\nfunction lazyError() {\x0d\n  if (!error) {\x0d\n    error = require('internal/errors').codes.ERR_INTERNAL_ASSERTION;\x0d\n  }\x0d\n  return error;\x0d\n}\x0d\n\x0d\nfunction assert(value\x2C message) {\x0d\n  if (!value) {\x0d\n    const ERR_INTERNAL_ASSERTION = lazyError();\x0d\n    throw new ERR_INTERNAL_ASSERTION(message);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction fail(message) {\x0d\n  const ERR_INTERNAL_ASSERTION = lazyError();\x0d\n  throw new ERR_INTERNAL_ASSERTION(message);\x0d\n}\x0d\n\x0d\nassert.fail = fail;\x0d\n\x0d\nmodule.exports = assert;\x0d\n
code-source-info,0x2e2fa698fbe,21,182,322,C0O204C4O254C7O254C11O272C13O278C18O272C20O321,,
code-creation,Eval,10,315981,0x2e2fa699e56,5, node:child_process:1:1,0x2e2fa699980,~
script-source,99,node:child_process,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypeFilter\x2C\x0d\n  ArrayPrototypeIncludes\x2C\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypeLastIndexOf\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  ArrayPrototypeSort\x2C\x0d\n  ArrayPrototypeSplice\x2C\x0d\n  ArrayPrototypeUnshift\x2C\x0d\n  Error\x2C\x0d\n  NumberIsInteger\x2C\x0d\n  ObjectAssign\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  RegExpPrototypeTest\x2C\x0d\n  SafeSet\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeToUpperCase\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  promisify\x2C\x0d\n  convertToValidSignal\x2C\x0d\n  createDeferredPromise\x2C\x0d\n  getSystemErrorName\x0d\n} = require('internal/util');\x0d\nconst { isArrayBufferView } = require('internal/util/types');\x0d\nlet debug = require('internal/util/debuglog').debuglog(\x0d\n  'child_process'\x2C\x0d\n  (fn) => {\x0d\n    debug = fn;\x0d\n  }\x0d\n);\x0d\nconst { Buffer } = require('buffer');\x0d\nconst { Pipe\x2C constants: PipeConstants } = internalBinding('pipe_wrap');\x0d\n\x0d\nconst {\x0d\n  AbortError\x2C\x0d\n  codes: errorCodes\x2C\x0d\n} = require('internal/errors');\x0d\nconst {\x0d\n  ERR_INVALID_ARG_VALUE\x2C\x0d\n  ERR_CHILD_PROCESS_IPC_REQUIRED\x2C\x0d\n  ERR_CHILD_PROCESS_STDIO_MAXBUFFER\x2C\x0d\n  ERR_INVALID_ARG_TYPE\x2C\x0d\n  ERR_OUT_OF_RANGE\x2C\x0d\n} = errorCodes;\x0d\nconst { clearTimeout\x2C setTimeout } = require('timers');\x0d\nconst { getValidatedPath } = require('internal/fs/utils');\x0d\nconst {\x0d\n  isInt32\x2C\x0d\n  validateAbortSignal\x2C\x0d\n  validateBoolean\x2C\x0d\n  validateObject\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\nconst child_process = require('internal/child_process');\x0d\nconst {\x0d\n  getValidStdio\x2C\x0d\n  setupChannel\x2C\x0d\n  ChildProcess\x2C\x0d\n  stdioStringToArray\x0d\n} = child_process;\x0d\n\x0d\nconst MAX_BUFFER = 1024 * 1024;\x0d\n\x0d\n/**\x0d\n * Spawns a new Node.js process + fork.\x0d\n * @param {string|URL} modulePath\x0d\n * @param {string[]} [args]\x0d\n * @param {{\x0d\n *   cwd?: string;\x0d\n *   detached?: boolean;\x0d\n *   env?: Object;\x0d\n *   execPath?: string;\x0d\n *   execArgv?: string[];\x0d\n *   gid?: number;\x0d\n *   serialization?: string;\x0d\n *   signal?: AbortSignal;\x0d\n *   killSignal?: string | number;\x0d\n *   silent?: boolean;\x0d\n *   stdio?: Array | string;\x0d\n *   uid?: number;\x0d\n *   windowsVerbatimArguments?: boolean;\x0d\n *   timeout?: number;\x0d\n *   }} [options]\x0d\n * @returns {ChildProcess}\x0d\n */\x0d\nfunction fork(modulePath\x2C args = []\x2C options) {\x0d\n  modulePath = getValidatedPath(modulePath\x2C 'modulePath');\x0d\n\x0d\n  // Get options and args arguments.\x0d\n  let execArgv;\x0d\n\x0d\n  if (args == null) {\x0d\n    args = [];\x0d\n  } else if (typeof args !== 'object') {\x0d\n    throw new ERR_INVALID_ARG_VALUE('args'\x2C args);\x0d\n  } else if (!ArrayIsArray(args)) {\x0d\n    options = args;\x0d\n    args = [];\x0d\n  }\x0d\n\x0d\n  if (options == null) {\x0d\n    options = {};\x0d\n  } else if (typeof options !== 'object') {\x0d\n    throw new ERR_INVALID_ARG_VALUE('options'\x2C options);\x0d\n  } else {\x0d\n    options = { ...options };\x0d\n  }\x0d\n\x0d\n  // Prepare arguments for fork:\x0d\n  execArgv = options.execArgv || process.execArgv;\x0d\n\x0d\n  if (execArgv === process.execArgv && process._eval != null) {\x0d\n    const index = ArrayPrototypeLastIndexOf(execArgv\x2C process._eval);\x0d\n    if (index > 0) {\x0d\n      // Remove the -e switch to avoid fork bombing ourselves.\x0d\n      execArgv = ArrayPrototypeSlice(execArgv);\x0d\n      ArrayPrototypeSplice(execArgv\x2C index - 1\x2C 2);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  args = [...execArgv\x2C modulePath\x2C ...args];\x0d\n\x0d\n  if (typeof options.stdio === 'string') {\x0d\n    options.stdio = stdioStringToArray(options.stdio\x2C 'ipc');\x0d\n  } else if (!ArrayIsArray(options.stdio)) {\x0d\n    // Use a separate fd=3 for the IPC channel. Inherit stdin\x2C stdout\x2C\x0d\n    // and stderr from the parent if silent isn't set.\x0d\n    options.stdio = stdioStringToArray(\x0d\n      options.silent ? 'pipe' : 'inherit'\x2C\x0d\n      'ipc');\x0d\n  } else if (!ArrayPrototypeIncludes(options.stdio\x2C 'ipc')) {\x0d\n    throw new ERR_CHILD_PROCESS_IPC_REQUIRED('options.stdio');\x0d\n  }\x0d\n\x0d\n  options.execPath = options.execPath || process.execPath;\x0d\n  options.shell = false;\x0d\n\x0d\n  return spawn(options.execPath\x2C args\x2C options);\x0d\n}\x0d\n\x0d\nfunction _forkChild(fd\x2C serializationMode) {\x0d\n  // set process.send()\x0d\n  const p = new Pipe(PipeConstants.IPC);\x0d\n  p.open(fd);\x0d\n  p.unref();\x0d\n  const control = setupChannel(process\x2C p\x2C serializationMode);\x0d\n  process.on('newListener'\x2C function onNewListener(name) {\x0d\n    if (name === 'message' || name === 'disconnect') control.refCounted();\x0d\n  });\x0d\n  process.on('removeListener'\x2C function onRemoveListener(name) {\x0d\n    if (name === 'message' || name === 'disconnect') control.unrefCounted();\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction normalizeExecArgs(command\x2C options\x2C callback) {\x0d\n  if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n    options = undefined;\x0d\n  }\x0d\n\x0d\n  // Make a shallow copy so we don't clobber the user's options object.\x0d\n  options = { ...options };\x0d\n  options.shell = typeof options.shell === 'string' ? options.shell : true;\x0d\n\x0d\n  return {\x0d\n    file: command\x2C\x0d\n    options: options\x2C\x0d\n    callback: callback\x0d\n  };\x0d\n}\x0d\n\x0d\n/**\x0d\n * Spawns a shell executing the given command.\x0d\n * @param {string} command\x0d\n * @param {{\x0d\n *   cmd?: string;\x0d\n *   env?: Object;\x0d\n *   encoding?: string;\x0d\n *   shell?: string;\x0d\n *   signal?: AbortSignal;\x0d\n *   timeout?: number;\x0d\n *   maxBuffer?: number;\x0d\n *   killSignal?: string | number;\x0d\n *   uid?: number;\x0d\n *   gid?: number;\x0d\n *   windowsHide?: boolean;\x0d\n *   }} [options]\x0d\n * @param {(\x0d\n *   error?: Error\x2C\x0d\n *   stdout?: string | Buffer\x2C\x0d\n *   stderr?: string | Buffer\x0d\n *   ) => any} [callback]\x0d\n * @returns {ChildProcess}\x0d\n */\x0d\nfunction exec(command\x2C options\x2C callback) {\x0d\n  const opts = normalizeExecArgs(command\x2C options\x2C callback);\x0d\n  return module.exports.execFile(opts.file\x2C\x0d\n                                 opts.options\x2C\x0d\n                                 opts.callback);\x0d\n}\x0d\n\x0d\nconst customPromiseExecFunction = (orig) => {\x0d\n  return (...args) => {\x0d\n    const { promise\x2C resolve\x2C reject } = createDeferredPromise();\x0d\n\x0d\n    promise.child = orig(...args\x2C (err\x2C stdout\x2C stderr) => {\x0d\n      if (err !== null) {\x0d\n        err.stdout = stdout;\x0d\n        err.stderr = stderr;\x0d\n        reject(err);\x0d\n      } else {\x0d\n        resolve({ stdout\x2C stderr });\x0d\n      }\x0d\n    });\x0d\n\x0d\n    return promise;\x0d\n  };\x0d\n};\x0d\n\x0d\nObjectDefineProperty(exec\x2C promisify.custom\x2C {\x0d\n  enumerable: false\x2C\x0d\n  value: customPromiseExecFunction(exec)\x0d\n});\x0d\n\x0d\n/**\x0d\n * Spawns the specified file as a shell.\x0d\n * @param {string} file\x0d\n * @param {string[]} [args]\x0d\n * @param {{\x0d\n *   cwd?: string;\x0d\n *   env?: Object;\x0d\n *   encoding?: string;\x0d\n *   timeout?: number;\x0d\n *   maxBuffer?: number;\x0d\n *   killSignal?: string | number;\x0d\n *   uid?: number;\x0d\n *   gid?: number;\x0d\n *   windowsHide?: boolean;\x0d\n *   windowsVerbatimArguments?: boolean;\x0d\n *   shell?: boolean | string;\x0d\n *   signal?: AbortSignal;\x0d\n *   }} [options]\x0d\n * @param {(\x0d\n *   error?: Error\x2C\x0d\n *   stdout?: string | Buffer\x2C\x0d\n *   stderr?: string | Buffer\x0d\n *   ) => any} [callback]\x0d\n * @returns {ChildProcess}\x0d\n */\x0d\nfunction execFile(file\x2C args = []\x2C options\x2C callback) {\x0d\n  if (args == null) {\x0d\n    args = [];\x0d\n  } else if (typeof args === 'object') {\x0d\n    if (!ArrayIsArray(args)) {\x0d\n      callback = options;\x0d\n      options = args;\x0d\n      args = [];\x0d\n    }\x0d\n  } else if (typeof args === 'function') {\x0d\n    callback = args;\x0d\n    options = {};\x0d\n    args = [];\x0d\n  } else {\x0d\n    throw new ERR_INVALID_ARG_VALUE('args'\x2C args);\x0d\n  }\x0d\n\x0d\n  if (options == null) {\x0d\n    options = {};\x0d\n  } else if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n    options = {};\x0d\n  } else if (typeof options !== 'object') {\x0d\n    throw new ERR_INVALID_ARG_VALUE('options'\x2C options);\x0d\n  }\x0d\n\x0d\n  if (callback && typeof callback !== 'function') {\x0d\n    throw new ERR_INVALID_ARG_VALUE('callback'\x2C callback);\x0d\n  }\x0d\n\x0d\n  options = {\x0d\n    encoding: 'utf8'\x2C\x0d\n    timeout: 0\x2C\x0d\n    maxBuffer: MAX_BUFFER\x2C\x0d\n    killSignal: 'SIGTERM'\x2C\x0d\n    cwd: null\x2C\x0d\n    env: null\x2C\x0d\n    shell: false\x2C\x0d\n    ...options\x0d\n  };\x0d\n\x0d\n  // Validate the timeout\x2C if present.\x0d\n  validateTimeout(options.timeout);\x0d\n\x0d\n  // Validate maxBuffer\x2C if present.\x0d\n  validateMaxBuffer(options.maxBuffer);\x0d\n\x0d\n  options.killSignal = sanitizeKillSignal(options.killSignal);\x0d\n\x0d\n  const child = spawn(file\x2C args\x2C {\x0d\n    cwd: options.cwd\x2C\x0d\n    env: options.env\x2C\x0d\n    gid: options.gid\x2C\x0d\n    shell: options.shell\x2C\x0d\n    signal: options.signal\x2C\x0d\n    uid: options.uid\x2C\x0d\n    windowsHide: !!options.windowsHide\x2C\x0d\n    windowsVerbatimArguments: !!options.windowsVerbatimArguments\x0d\n  });\x0d\n\x0d\n  let encoding;\x0d\n  const _stdout = [];\x0d\n  const _stderr = [];\x0d\n  if (options.encoding !== 'buffer' && Buffer.isEncoding(options.encoding)) {\x0d\n    encoding = options.encoding;\x0d\n  } else {\x0d\n    encoding = null;\x0d\n  }\x0d\n  let stdoutLen = 0;\x0d\n  let stderrLen = 0;\x0d\n  let killed = false;\x0d\n  let exited = false;\x0d\n  let timeoutId;\x0d\n\x0d\n  let ex = null;\x0d\n\x0d\n  let cmd = file;\x0d\n\x0d\n  function exithandler(code\x2C signal) {\x0d\n    if (exited) return;\x0d\n    exited = true;\x0d\n\x0d\n    if (timeoutId) {\x0d\n      clearTimeout(timeoutId);\x0d\n      timeoutId = null;\x0d\n    }\x0d\n\x0d\n    if (!callback) return;\x0d\n\x0d\n    // merge chunks\x0d\n    let stdout;\x0d\n    let stderr;\x0d\n    if (encoding ||\x0d\n      (\x0d\n        child.stdout &&\x0d\n        child.stdout.readableEncoding\x0d\n      )) {\x0d\n      stdout = ArrayPrototypeJoin(_stdout\x2C '');\x0d\n    } else {\x0d\n      stdout = Buffer.concat(_stdout);\x0d\n    }\x0d\n    if (encoding ||\x0d\n      (\x0d\n        child.stderr &&\x0d\n        child.stderr.readableEncoding\x0d\n      )) {\x0d\n      stderr = ArrayPrototypeJoin(_stderr\x2C '');\x0d\n    } else {\x0d\n      stderr = Buffer.concat(_stderr);\x0d\n    }\x0d\n\x0d\n    if (!ex && code === 0 && signal === null) {\x0d\n      callback(null\x2C stdout\x2C stderr);\x0d\n      return;\x0d\n    }\x0d\n\x0d\n    if (args.length !== 0)\x0d\n      cmd += ` ${ArrayPrototypeJoin(args\x2C ' ')}`;\x0d\n\x0d\n    if (!ex) {\x0d\n      // eslint-disable-next-line no-restricted-syntax\x0d\n      ex = new Error('Command failed: ' + cmd + '\\n' + stderr);\x0d\n      ex.killed = child.killed || killed;\x0d\n      ex.code = code < 0 ? getSystemErrorName(code) : code;\x0d\n      ex.signal = signal;\x0d\n    }\x0d\n\x0d\n    ex.cmd = cmd;\x0d\n    callback(ex\x2C stdout\x2C stderr);\x0d\n  }\x0d\n\x0d\n  function errorhandler(e) {\x0d\n    ex = e;\x0d\n\x0d\n    if (child.stdout)\x0d\n      child.stdout.destroy();\x0d\n\x0d\n    if (child.stderr)\x0d\n      child.stderr.destroy();\x0d\n\x0d\n    exithandler();\x0d\n  }\x0d\n\x0d\n  function kill() {\x0d\n    if (child.stdout)\x0d\n      child.stdout.destroy();\x0d\n\x0d\n    if (child.stderr)\x0d\n      child.stderr.destroy();\x0d\n\x0d\n    killed = true;\x0d\n    try {\x0d\n      child.kill(options.killSignal);\x0d\n    } catch (e) {\x0d\n      ex = e;\x0d\n      exithandler();\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (options.timeout > 0) {\x0d\n    timeoutId = setTimeout(function delayedKill() {\x0d\n      kill();\x0d\n      timeoutId = null;\x0d\n    }\x2C options.timeout);\x0d\n  }\x0d\n\x0d\n  if (child.stdout) {\x0d\n    if (encoding)\x0d\n      child.stdout.setEncoding(encoding);\x0d\n\x0d\n    child.stdout.on('data'\x2C function onChildStdout(chunk) {\x0d\n      const encoding = child.stdout.readableEncoding;\x0d\n      const length = encoding ?\x0d\n        Buffer.byteLength(chunk\x2C encoding) :\x0d\n        chunk.length;\x0d\n      const slice = encoding ? StringPrototypeSlice :\x0d\n        (buf\x2C ...args) => buf.slice(...args);\x0d\n      stdoutLen += length;\x0d\n\x0d\n      if (stdoutLen > options.maxBuffer) {\x0d\n        const truncatedLen = options.maxBuffer - (stdoutLen - length);\x0d\n        ArrayPrototypePush(_stdout\x2C slice(chunk\x2C 0\x2C truncatedLen));\x0d\n\x0d\n        ex = new ERR_CHILD_PROCESS_STDIO_MAXBUFFER('stdout');\x0d\n        kill();\x0d\n      } else {\x0d\n        ArrayPrototypePush(_stdout\x2C chunk);\x0d\n      }\x0d\n    });\x0d\n  }\x0d\n\x0d\n  if (child.stderr) {\x0d\n    if (encoding)\x0d\n      child.stderr.setEncoding(encoding);\x0d\n\x0d\n    child.stderr.on('data'\x2C function onChildStderr(chunk) {\x0d\n      const encoding = child.stderr.readableEncoding;\x0d\n      const length = encoding ?\x0d\n        Buffer.byteLength(chunk\x2C encoding) :\x0d\n        chunk.length;\x0d\n      stderrLen += length;\x0d\n\x0d\n      if (stderrLen > options.maxBuffer) {\x0d\n        const truncatedLen = options.maxBuffer - (stderrLen - length);\x0d\n        ArrayPrototypePush(_stderr\x2C\x0d\n                           chunk.slice(0\x2C truncatedLen));\x0d\n\x0d\n        ex = new ERR_CHILD_PROCESS_STDIO_MAXBUFFER('stderr');\x0d\n        kill();\x0d\n      } else {\x0d\n        _stderr.push(chunk);\x0d\n      }\x0d\n    });\x0d\n  }\x0d\n\x0d\n  child.addListener('close'\x2C exithandler);\x0d\n  child.addListener('error'\x2C errorhandler);\x0d\n\x0d\n  return child;\x0d\n}\x0d\n\x0d\nObjectDefineProperty(execFile\x2C promisify.custom\x2C {\x0d\n  enumerable: false\x2C\x0d\n  value: customPromiseExecFunction(execFile)\x0d\n});\x0d\n\x0d\nfunction normalizeSpawnArguments(file\x2C args\x2C options) {\x0d\n  validateString(file\x2C 'file');\x0d\n\x0d\n  if (file.length === 0)\x0d\n    throw new ERR_INVALID_ARG_VALUE('file'\x2C file\x2C 'cannot be empty');\x0d\n\x0d\n  if (ArrayIsArray(args)) {\x0d\n    args = ArrayPrototypeSlice(args);\x0d\n  } else if (args == null) {\x0d\n    args = [];\x0d\n  } else if (typeof args !== 'object') {\x0d\n    throw new ERR_INVALID_ARG_TYPE('args'\x2C 'object'\x2C args);\x0d\n  } else {\x0d\n    options = args;\x0d\n    args = [];\x0d\n  }\x0d\n\x0d\n  if (options === undefined)\x0d\n    options = {};\x0d\n  else\x0d\n    validateObject(options\x2C 'options');\x0d\n\x0d\n  let cwd = options.cwd;\x0d\n\x0d\n  // Validate the cwd\x2C if present.\x0d\n  if (cwd != null) {\x0d\n    cwd = getValidatedPath(cwd\x2C 'options.cwd');\x0d\n  }\x0d\n\x0d\n  // Validate detached\x2C if present.\x0d\n  if (options.detached != null) {\x0d\n    validateBoolean(options.detached\x2C 'options.detached');\x0d\n  }\x0d\n\x0d\n  // Validate the uid\x2C if present.\x0d\n  if (options.uid != null && !isInt32(options.uid)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE('options.uid'\x2C 'int32'\x2C options.uid);\x0d\n  }\x0d\n\x0d\n  // Validate the gid\x2C if present.\x0d\n  if (options.gid != null && !isInt32(options.gid)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE('options.gid'\x2C 'int32'\x2C options.gid);\x0d\n  }\x0d\n\x0d\n  // Validate the shell\x2C if present.\x0d\n  if (options.shell != null &&\x0d\n      typeof options.shell !== 'boolean' &&\x0d\n      typeof options.shell !== 'string') {\x0d\n    throw new ERR_INVALID_ARG_TYPE('options.shell'\x2C\x0d\n                                   ['boolean'\x2C 'string']\x2C options.shell);\x0d\n  }\x0d\n\x0d\n  // Validate argv0\x2C if present.\x0d\n  if (options.argv0 != null) {\x0d\n    validateString(options.argv0\x2C 'options.argv0');\x0d\n  }\x0d\n\x0d\n  // Validate windowsHide\x2C if present.\x0d\n  if (options.windowsHide != null) {\x0d\n    validateBoolean(options.windowsHide\x2C 'options.windowsHide');\x0d\n  }\x0d\n\x0d\n  // Validate windowsVerbatimArguments\x2C if present.\x0d\n  let { windowsVerbatimArguments } = options;\x0d\n  if (windowsVerbatimArguments != null) {\x0d\n    validateBoolean(windowsVerbatimArguments\x2C\x0d\n                    'options.windowsVerbatimArguments');\x0d\n  }\x0d\n\x0d\n  if (options.shell) {\x0d\n    const command = ArrayPrototypeJoin([file\x2C ...args]\x2C ' ');\x0d\n    // Set the shell\x2C switches\x2C and commands.\x0d\n    if (process.platform === 'win32') {\x0d\n      if (typeof options.shell === 'string')\x0d\n        file = options.shell;\x0d\n      else\x0d\n        file = process.env.comspec || 'cmd.exe';\x0d\n      // '/d /s /c' is used only for cmd.exe.\x0d\n      if (RegExpPrototypeTest(/^(?:.*\\\\)?cmd(?:\\.exe)?$/i\x2C file)) {\x0d\n        args = ['/d'\x2C '/s'\x2C '/c'\x2C `"${command}"`];\x0d\n        windowsVerbatimArguments = true;\x0d\n      } else {\x0d\n        args = ['-c'\x2C command];\x0d\n      }\x0d\n    } else {\x0d\n      if (typeof options.shell === 'string')\x0d\n        file = options.shell;\x0d\n      else if (process.platform === 'android')\x0d\n        file = '/system/bin/sh';\x0d\n      else\x0d\n        file = '/bin/sh';\x0d\n      args = ['-c'\x2C command];\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (typeof options.argv0 === 'string') {\x0d\n    ArrayPrototypeUnshift(args\x2C options.argv0);\x0d\n  } else {\x0d\n    ArrayPrototypeUnshift(args\x2C file);\x0d\n  }\x0d\n\x0d\n  const env = options.env || process.env;\x0d\n  const envPairs = [];\x0d\n\x0d\n  // process.env.NODE_V8_COVERAGE always propagates\x2C making it possible to\x0d\n  // collect coverage for programs that spawn with white-listed environment.\x0d\n  if (process.env.NODE_V8_COVERAGE &&\x0d\n      !ObjectPrototypeHasOwnProperty(options.env || {}\x2C 'NODE_V8_COVERAGE')) {\x0d\n    env.NODE_V8_COVERAGE = process.env.NODE_V8_COVERAGE;\x0d\n  }\x0d\n\x0d\n  let envKeys = [];\x0d\n  // Prototype values are intentionally included.\x0d\n  for (const key in env) {\x0d\n    ArrayPrototypePush(envKeys\x2C key);\x0d\n  }\x0d\n\x0d\n  if (process.platform === 'win32') {\x0d\n    // On Windows env keys are case insensitive. Filter out duplicates\x2C\x0d\n    // keeping only the first one (in lexicographic order)\x0d\n    const sawKey = new SafeSet();\x0d\n    envKeys = ArrayPrototypeFilter(\x0d\n      ArrayPrototypeSort(envKeys)\x2C\x0d\n      (key) => {\x0d\n        const uppercaseKey = StringPrototypeToUpperCase(key);\x0d\n        if (sawKey.has(uppercaseKey)) {\x0d\n          return false;\x0d\n        }\x0d\n        sawKey.add(uppercaseKey);\x0d\n        return true;\x0d\n      }\x0d\n    );\x0d\n  }\x0d\n\x0d\n  for (const key of envKeys) {\x0d\n    const value = env[key];\x0d\n    if (value !== undefined) {\x0d\n      ArrayPrototypePush(envPairs\x2C `${key}=${value}`);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return {\x0d\n    // Make a shallow copy so we don't clobber the user's options object.\x0d\n    ...options\x2C\x0d\n    args\x2C\x0d\n    cwd\x2C\x0d\n    detached: !!options.detached\x2C\x0d\n    envPairs\x2C\x0d\n    file\x2C\x0d\n    windowsHide: !!options.windowsHide\x2C\x0d\n    windowsVerbatimArguments: !!windowsVerbatimArguments\x2C\x0d\n  };\x0d\n}\x0d\n\x0d\nfunction abortChildProcess(child\x2C killSignal) {\x0d\n  if (!child)\x0d\n    return;\x0d\n  try {\x0d\n    if (child.kill(killSignal)) {\x0d\n      child.emit('error'\x2C new AbortError());\x0d\n    }\x0d\n  } catch (err) {\x0d\n    child.emit('error'\x2C err);\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Spawns a new process using the given `file`.\x0d\n * @param {string} file\x0d\n * @param {string[]} [args]\x0d\n * @param {{\x0d\n *   cwd?: string;\x0d\n *   env?: Object;\x0d\n *   argv0?: string;\x0d\n *   stdio?: Array | string;\x0d\n *   detached?: boolean;\x0d\n *   uid?: number;\x0d\n *   gid?: number;\x0d\n *   serialization?: string;\x0d\n *   shell?: boolean | string;\x0d\n *   windowsVerbatimArguments?: boolean;\x0d\n *   windowsHide?: boolean;\x0d\n *   signal?: AbortSignal;\x0d\n *   timeout?: number;\x0d\n *   killSignal?: string | number;\x0d\n *   }} [options]\x0d\n * @returns {ChildProcess}\x0d\n */\x0d\nfunction spawn(file\x2C args\x2C options) {\x0d\n  options = normalizeSpawnArguments(file\x2C args\x2C options);\x0d\n  validateTimeout(options.timeout);\x0d\n  validateAbortSignal(options.signal\x2C 'options.signal');\x0d\n  const killSignal = sanitizeKillSignal(options.killSignal);\x0d\n  const child = new ChildProcess();\x0d\n\x0d\n  debug('spawn'\x2C options);\x0d\n  child.spawn(options);\x0d\n\x0d\n  if (options.timeout > 0) {\x0d\n    let timeoutId = setTimeout(() => {\x0d\n      if (timeoutId) {\x0d\n        try {\x0d\n          child.kill(killSignal);\x0d\n        } catch (err) {\x0d\n          child.emit('error'\x2C err);\x0d\n        }\x0d\n        timeoutId = null;\x0d\n      }\x0d\n    }\x2C options.timeout);\x0d\n\x0d\n    child.once('exit'\x2C () => {\x0d\n      if (timeoutId) {\x0d\n        clearTimeout(timeoutId);\x0d\n        timeoutId = null;\x0d\n      }\x0d\n    });\x0d\n  }\x0d\n\x0d\n  if (options.signal) {\x0d\n    const signal = options.signal;\x0d\n    if (signal.aborted) {\x0d\n      process.nextTick(onAbortListener);\x0d\n    } else {\x0d\n      signal.addEventListener('abort'\x2C onAbortListener\x2C { once: true });\x0d\n      child.once('exit'\x2C\x0d\n                 () => signal.removeEventListener('abort'\x2C onAbortListener));\x0d\n    }\x0d\n\x0d\n    function onAbortListener() {\x0d\n      abortChildProcess(child\x2C killSignal);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return child;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Spawns a new process synchronously using the given `file`.\x0d\n * @param {string} file\x0d\n * @param {string[]} [args]\x0d\n * @param {{\x0d\n *   cwd?: string;\x0d\n *   input?: string | Buffer | TypedArray | DataView;\x0d\n *   argv0?: string;\x0d\n *   stdio?: string | Array;\x0d\n *   env?: Object;\x0d\n *   uid?: number;\x0d\n *   gid?: number;\x0d\n *   timeout?: number;\x0d\n *   killSignal?: string | number;\x0d\n *   maxBuffer?: number;\x0d\n *   encoding?: string;\x0d\n *   shell?: boolean | string;\x0d\n *   windowsVerbatimArguments?: boolean;\x0d\n *   windowsHide?: boolean;\x0d\n *   }} [options]\x0d\n * @returns {{\x0d\n *   pid: number;\x0d\n *   output: Array;\x0d\n *   stdout: Buffer | string;\x0d\n *   stderr: Buffer | string;\x0d\n *   status: number | null;\x0d\n *   signal: string | null;\x0d\n *   error: Error;\x0d\n *   }}\x0d\n */\x0d\nfunction spawnSync(file\x2C args\x2C options) {\x0d\n  options = {\x0d\n    maxBuffer: MAX_BUFFER\x2C\x0d\n    ...normalizeSpawnArguments(file\x2C args\x2C options)\x0d\n  };\x0d\n\x0d\n  debug('spawnSync'\x2C options);\x0d\n\x0d\n  // Validate the timeout\x2C if present.\x0d\n  validateTimeout(options.timeout);\x0d\n\x0d\n  // Validate maxBuffer\x2C if present.\x0d\n  validateMaxBuffer(options.maxBuffer);\x0d\n\x0d\n  // Validate and translate the kill signal\x2C if present.\x0d\n  options.killSignal = sanitizeKillSignal(options.killSignal);\x0d\n\x0d\n  options.stdio = getValidStdio(options.stdio || 'pipe'\x2C true).stdio;\x0d\n\x0d\n  if (options.input) {\x0d\n    const stdin = options.stdio[0] = { ...options.stdio[0] };\x0d\n    stdin.input = options.input;\x0d\n  }\x0d\n\x0d\n  // We may want to pass data in on any given fd\x2C ensure it is a valid buffer\x0d\n  for (let i = 0; i < options.stdio.length; i++) {\x0d\n    const input = options.stdio[i] && options.stdio[i].input;\x0d\n    if (input != null) {\x0d\n      const pipe = options.stdio[i] = { ...options.stdio[i] };\x0d\n      if (isArrayBufferView(input)) {\x0d\n        pipe.input = input;\x0d\n      } else if (typeof input === 'string') {\x0d\n        pipe.input = Buffer.from(input\x2C options.encoding);\x0d\n      } else {\x0d\n        throw new ERR_INVALID_ARG_TYPE(`options.stdio[${i}]`\x2C\x0d\n                                       ['Buffer'\x2C\x0d\n                                        'TypedArray'\x2C\x0d\n                                        'DataView'\x2C\x0d\n                                        'string']\x2C\x0d\n                                       input);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return child_process.spawnSync(options);\x0d\n}\x0d\n\x0d\n\x0d\nfunction checkExecSyncError(ret\x2C args\x2C cmd) {\x0d\n  let err;\x0d\n  if (ret.error) {\x0d\n    err = ret.error;\x0d\n  } else if (ret.status !== 0) {\x0d\n    let msg = 'Command failed: ';\x0d\n    msg += cmd || ArrayPrototypeJoin(args\x2C ' ');\x0d\n    if (ret.stderr && ret.stderr.length > 0)\x0d\n      msg += `\\n${ret.stderr.toString()}`;\x0d\n    // eslint-disable-next-line no-restricted-syntax\x0d\n    err = new Error(msg);\x0d\n  }\x0d\n  if (err) {\x0d\n    ObjectAssign(err\x2C ret);\x0d\n  }\x0d\n  return err;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Spawns a file as a shell synchronously.\x0d\n * @param {string} command\x0d\n * @param {string[]} [args]\x0d\n * @param {{\x0d\n *   cwd?: string;\x0d\n *   input?: string | Buffer | TypedArray | DataView;\x0d\n *   stdio?: string | Array;\x0d\n *   env?: Object;\x0d\n *   uid?: number;\x0d\n *   gid?: number;\x0d\n *   timeout?: number;\x0d\n *   killSignal?: string | number;\x0d\n *   maxBuffer?: number;\x0d\n *   encoding?: string;\x0d\n *   windowsHide?: boolean;\x0d\n *   shell?: boolean | string;\x0d\n *   }} [options]\x0d\n * @returns {Buffer | string}\x0d\n */\x0d\nfunction execFileSync(command\x2C args\x2C options) {\x0d\n  options = normalizeSpawnArguments(command\x2C args\x2C options);\x0d\n\x0d\n  const inheritStderr = !options.stdio;\x0d\n  const ret = spawnSync(options.file\x2C\x0d\n                        ArrayPrototypeSlice(options.args\x2C 1)\x2C options);\x0d\n\x0d\n  if (inheritStderr && ret.stderr)\x0d\n    process.stderr.write(ret.stderr);\x0d\n\x0d\n  const err = checkExecSyncError(ret\x2C options.args\x2C undefined);\x0d\n\x0d\n  if (err)\x0d\n    throw err;\x0d\n\x0d\n  return ret.stdout;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Spawns a shell executing the given `command` synchronously.\x0d\n * @param {string} command\x0d\n * @param {{\x0d\n *   cwd?: string;\x0d\n *   input?: string | Buffer | TypedArray | DataView;\x0d\n *   stdio?: string | Array;\x0d\n *   env?: Object;\x0d\n *   shell?: string;\x0d\n *   uid?: number;\x0d\n *   gid?: number;\x0d\n *   timeout?: number;\x0d\n *   killSignal?: string | number;\x0d\n *   maxBuffer?: number;\x0d\n *   encoding?: string;\x0d\n *   windowsHide?: boolean;\x0d\n *   }} [options]\x0d\n * @returns {Buffer | string}\x0d\n */\x0d\nfunction execSync(command\x2C options) {\x0d\n  const opts = normalizeExecArgs(command\x2C options\x2C null);\x0d\n  const inheritStderr = !opts.options.stdio;\x0d\n\x0d\n  const ret = spawnSync(opts.file\x2C opts.options);\x0d\n\x0d\n  if (inheritStderr && ret.stderr)\x0d\n    process.stderr.write(ret.stderr);\x0d\n\x0d\n  const err = checkExecSyncError(ret\x2C opts.args\x2C command);\x0d\n\x0d\n  if (err)\x0d\n    throw err;\x0d\n\x0d\n  return ret.stdout;\x0d\n}\x0d\n\x0d\n\x0d\nfunction validateTimeout(timeout) {\x0d\n  if (timeout != null && !(NumberIsInteger(timeout) && timeout >= 0)) {\x0d\n    throw new ERR_OUT_OF_RANGE('timeout'\x2C 'an unsigned integer'\x2C timeout);\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nfunction validateMaxBuffer(maxBuffer) {\x0d\n  if (maxBuffer != null && !(typeof maxBuffer === 'number' && maxBuffer >= 0)) {\x0d\n    throw new ERR_OUT_OF_RANGE('options.maxBuffer'\x2C\x0d\n                               'a positive number'\x2C\x0d\n                               maxBuffer);\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nfunction sanitizeKillSignal(killSignal) {\x0d\n  if (typeof killSignal === 'string' || typeof killSignal === 'number') {\x0d\n    return convertToValidSignal(killSignal);\x0d\n  } else if (killSignal != null) {\x0d\n    throw new ERR_INVALID_ARG_TYPE('options.killSignal'\x2C\x0d\n                                   ['string'\x2C 'number']\x2C\x0d\n                                   killSignal);\x0d\n  }\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  _forkChild\x2C\x0d\n  ChildProcess\x2C\x0d\n  exec\x2C\x0d\n  execFile\x2C\x0d\n  execFileSync\x2C\x0d\n  execSync\x2C\x0d\n  fork\x2C\x0d\n  spawn\x2C\x0d\n  spawnSync\x0d\n};\x0d\n
code-source-info,0x2e2fa699e56,99,0,25520,C0O0C4O25520,,
code-creation,Function,10,317568,0x2e2fa69a8b6,748, node:child_process:1:1,0x2e2fa699dd0,~
code-source-info,0x2e2fa69a8b
code-creation,LazyCompile,10,317872,0x2e2fa69ce9e,82,debuglog node:internal/util/debuglog:71:18,0x423ed619d0,~
code-source-info,0x2e2fa69ce9e,22,2302,3328,C0O2302C28O2432C32O2432C34O2847C35O2847C37O2870C41O2870C43O2963C48O3169C58O3190C63O3216C74O3169C79O3311C81O3325,,
code-creation,Eval,10,318855,0x2e2fa6a012e,5, node:internal/child_process:1:1,0x2e2fa69fa30,~
script-source,100,node:internal/child_process,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeReduce\x2C\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  FunctionPrototype\x2C\x0d\n  FunctionPrototypeCall\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  ReflectApply\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  Symbol\x2C\x0d\n  Uint8Array\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  errnoException\x2C\x0d\n  codes: {\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_INVALID_HANDLE_TYPE\x2C\x0d\n    ERR_INVALID_SYNC_FORK_INPUT\x2C\x0d\n    ERR_IPC_CHANNEL_CLOSED\x2C\x0d\n    ERR_IPC_DISCONNECTED\x2C\x0d\n    ERR_IPC_ONE_PIPE\x2C\x0d\n    ERR_IPC_SYNC_FORK\x2C\x0d\n    ERR_MISSING_ARGS\x0d\n  }\x0d\n} = require('internal/errors');\x0d\nconst {\x0d\n  validateArray\x2C\x0d\n  validateObject\x2C\x0d\n  validateOneOf\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\nconst EventEmitter = require('events');\x0d\nconst net = require('net');\x0d\nconst dgram = require('dgram');\x0d\nconst inspect = require('internal/util/inspect').inspect;\x0d\nconst assert = require('internal/assert');\x0d\n\x0d\nconst { Process } = internalBinding('process_wrap');\x0d\nconst {\x0d\n  WriteWrap\x2C\x0d\n  kReadBytesOrError\x2C\x0d\n  kArrayBufferOffset\x2C\x0d\n  kLastWriteWasAsync\x2C\x0d\n  streamBaseState\x0d\n} = internalBinding('stream_wrap');\x0d\nconst { Pipe\x2C constants: PipeConstants } = internalBinding('pipe_wrap');\x0d\nconst { TCP } = internalBinding('tcp_wrap');\x0d\nconst { TTY } = internalBinding('tty_wrap');\x0d\nconst { UDP } = internalBinding('udp_wrap');\x0d\nconst SocketList = require('internal/socket_list');\x0d\nconst { owner_symbol } = require('internal/async_hooks').symbols;\x0d\nconst { convertToValidSignal\x2C deprecate } = require('internal/util');\x0d\nconst { isArrayBufferView } = require('internal/util/types');\x0d\nconst spawn_sync = internalBinding('spawn_sync');\x0d\nconst { kStateSymbol } = require('internal/dgram');\x0d\n\x0d\nconst {\x0d\n  UV_EACCES\x2C\x0d\n  UV_EAGAIN\x2C\x0d\n  UV_EINVAL\x2C\x0d\n  UV_EMFILE\x2C\x0d\n  UV_ENFILE\x2C\x0d\n  UV_ENOENT\x2C\x0d\n  UV_ENOSYS\x2C\x0d\n  UV_ESRCH\x0d\n} = internalBinding('uv');\x0d\n\x0d\nconst { SocketListSend\x2C SocketListReceive } = SocketList;\x0d\n\x0d\n// Lazy loaded for startup performance and to allow monkey patching of\x0d\n// internalBinding('http_parser').HTTPParser.\x0d\nlet freeParser;\x0d\nlet HTTPParser;\x0d\n\x0d\nconst MAX_HANDLE_RETRANSMISSIONS = 3;\x0d\nconst kChannelHandle = Symbol('kChannelHandle');\x0d\nconst kIsUsedAsStdio = Symbol('kIsUsedAsStdio');\x0d\nconst kPendingMessages = Symbol('kPendingMessages');\x0d\n\x0d\n// This object contain function to convert TCP objects to native handle objects\x0d\n// and back again.\x0d\nconst handleConversion = {\x0d\n  'net.Native': {\x0d\n    simultaneousAccepts: true\x2C\x0d\n\x0d\n    send(message\x2C handle\x2C options) {\x0d\n      return handle;\x0d\n    }\x2C\x0d\n\x0d\n    got(message\x2C handle\x2C emit) {\x0d\n      emit(handle);\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  'net.Server': {\x0d\n    simultaneousAccepts: true\x2C\x0d\n\x0d\n    send(message\x2C server\x2C options) {\x0d\n      return server._handle;\x0d\n    }\x2C\x0d\n\x0d\n    got(message\x2C handle\x2C emit) {\x0d\n      const server = new net.Server();\x0d\n      server.listen(handle\x2C () => {\x0d\n        emit(server);\x0d\n      });\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  'net.Socket': {\x0d\n    send(message\x2C socket\x2C options) {\x0d\n      if (!socket._handle)\x0d\n        return;\x0d\n\x0d\n      // If the socket was created by net.Server\x0d\n      if (socket.server) {\x0d\n        // The worker should keep track of the socket\x0d\n        message.key = socket.server._connectionKey;\x0d\n\x0d\n        const firstTime = !this[kChannelHandle].sockets.send[message.key];\x0d\n        const socketList = getSocketList('send'\x2C this\x2C message.key);\x0d\n\x0d\n        // The server should no longer expose a .connection property\x0d\n        // and when asked to close it should query the socket status from\x0d\n        // the workers\x0d\n        if (firstTime) socket.server._setupWorker(socketList);\x0d\n\x0d\n        // Act like socket is detached\x0d\n        if (!options.keepOpen)\x0d\n          socket.server._connections--;\x0d\n      }\x0d\n\x0d\n      const handle = socket._handle;\x0d\n\x0d\n      // Remove handle from socket object\x2C it will be closed when the socket\x0d\n      // will be sent\x0d\n      if (!options.keepOpen) {\x0d\n        handle.onread = nop;\x0d\n        socket._handle = null;\x0d\n        socket.setTimeout(0);\x0d\n\x0d\n        if (freeParser === undefined)\x0d\n          freeParser = require('_http_common').freeParser;\x0d\n        if (HTTPParser === undefined)\x0d\n          HTTPParser = require('_http_common').HTTPParser;\x0d\n\x0d\n        // In case of an HTTP connection socket\x2C release the associated\x0d\n        // resources\x0d\n        if (socket.parser && socket.parser instanceof HTTPParser) {\x0d\n          freeParser(socket.parser\x2C null\x2C socket);\x0d\n          if (socket._httpMessage)\x0d\n            socket._httpMessage.detachSocket(socket);\x0d\n        }\x0d\n      }\x0d\n\x0d\n      return handle;\x0d\n    }\x2C\x0d\n\x0d\n    postSend(message\x2C handle\x2C options\x2C callback\x2C target) {\x0d\n      // Store the handle after successfully sending it\x2C so it can be closed\x0d\n      // when the NODE_HANDLE_ACK is received. If the handle could not be sent\x2C\x0d\n      // just close it.\x0d\n      if (handle && !options.keepOpen) {\x0d\n        if (target) {\x0d\n          // There can only be one _pendingMessage as passing handles are\x0d\n          // processed one at a time: handles are stored in _handleQueue while\x0d\n          // waiting for the NODE_HANDLE_ACK of the current passing handle.\x0d\n          assert(!target._pendingMessage);\x0d\n          target._pendingMessage =\x0d\n              { callback\x2C message\x2C handle\x2C options\x2C retransmissions: 0 };\x0d\n        } else {\x0d\n          handle.close();\x0d\n        }\x0d\n      }\x0d\n    }\x2C\x0d\n\x0d\n    got(message\x2C handle\x2C emit) {\x0d\n      const socket = new net.Socket({\x0d\n        handle: handle\x2C\x0d\n        readable: true\x2C\x0d\n        writable: true\x0d\n      });\x0d\n\x0d\n      // If the socket was created by net.Server we will track the socket\x0d\n      if (message.key) {\x0d\n\x0d\n        // Add socket to connections list\x0d\n        const socketList = getSocketList('got'\x2C this\x2C message.key);\x0d\n        socketList.add({\x0d\n          socket: socket\x0d\n        });\x0d\n      }\x0d\n\x0d\n      emit(socket);\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  'dgram.Native': {\x0d\n    simultaneousAccepts: false\x2C\x0d\n\x0d\n    send(message\x2C handle\x2C options) {\x0d\n      return handle;\x0d\n    }\x2C\x0d\n\x0d\n    got(message\x2C handle\x2C emit) {\x0d\n      emit(handle);\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  'dgram.Socket': {\x0d\n    simultaneousAccepts: false\x2C\x0d\n\x0d\n    send(message\x2C socket\x2C options) {\x0d\n      message.dgramType = socket.type;\x0d\n\x0d\n      return socket[kStateSymbol].handle;\x0d\n    }\x2C\x0d\n\x0d\n    got(message\x2C handle\x2C emit) {\x0d\n      const socket = new dgram.Socket(message.dgramType);\x0d\n\x0d\n      socket.bind(handle\x2C () => {\x0d\n        emit(socket);\x0d\n      });\x0d\n    }\x0d\n  }\x0d\n};\x0d\n\x0d\nfunction stdioStringToArray(stdio\x2C channel) {\x0d\n  const options = [];\x0d\n\x0d\n  switch (stdio) {\x0d\n    case 'ignore':\x0d\n    case 'overlapped':\x0d\n    case 'pipe': ArrayPrototypePush(options\x2C stdio\x2C stdio\x2C stdio); break;\x0d\n    case 'inherit': ArrayPrototypePush(options\x2C 0\x2C 1\x2C 2); break;\x0d\n    default:\x0d\n      throw new ERR_INVALID_ARG_VALUE('stdio'\x2C stdio);\x0d\n  }\x0d\n\x0d\n  if (channel) ArrayPrototypePush(options\x2C channel);\x0d\n\x0d\n  return options;\x0d\n}\x0d\n\x0d\nfunction ChildProcess() {\x0d\n  FunctionPrototypeCall(EventEmitter\x2C this);\x0d\n\x0d\n  this._closesNeeded = 1;\x0d\n  this._closesGot = 0;\x0d\n  this.connected = false;\x0d\n\x0d\n  this.signalCode = null;\x0d\n  this.exitCode = null;\x0d\n  this.killed = false;\x0d\n  this.spawnfile = null;\x0d\n\x0d\n  this._handle = new Process();\x0d\n  this._handle[owner_symbol] = this;\x0d\n\x0d\n  this._handle.onexit = (exitCode\x2C signalCode) => {\x0d\n    if (signalCode) {\x0d\n      this.signalCode = signalCode;\x0d\n    } else {\x0d\n      this.exitCode = exitCode;\x0d\n    }\x0d\n\x0d\n    if (this.stdin) {\x0d\n      this.stdin.destroy();\x0d\n    }\x0d\n\x0d\n    this._handle.close();\x0d\n    this._handle = null;\x0d\n\x0d\n    if (exitCode < 0) {\x0d\n      const syscall = this.spawnfile ? 'spawn ' + this.spawnfile : 'spawn';\x0d\n      const err = errnoException(exitCode\x2C syscall);\x0d\n\x0d\n      if (this.spawnfile)\x0d\n        err.path = this.spawnfile;\x0d\n\x0d\n      err.spawnargs = ArrayPrototypeSlice(this.spawnargs\x2C 1);\x0d\n      this.emit('error'\x2C err);\x0d\n    } else {\x0d\n      this.emit('exit'\x2C this.exitCode\x2C this.signalCode);\x0d\n    }\x0d\n\x0d\n    // If any of the stdio streams have not been touched\x2C\x0d\n    // then pull all the data through so that it can get the\x0d\n    // eof and emit a 'close' event.\x0d\n    // Do it on nextTick so that the user has one last chance\x0d\n    // to consume the output\x2C if for example they only want to\x0d\n    // start reading the data once the process exits.\x0d\n    process.nextTick(flushStdio\x2C this);\x0d\n\x0d\n    maybeClose(this);\x0d\n  };\x0d\n}\x0d\nObjectSetPrototypeOf(ChildProcess.prototype\x2C EventEmitter.prototype);\x0d\nObjectSetPrototypeOf(ChildProcess\x2C EventEmitter);\x0d\n\x0d\n\x0d\nfunction flushStdio(subprocess) {\x0d\n  const stdio = subprocess.stdio;\x0d\n\x0d\n  if (stdio == null) return;\x0d\n\x0d\n  for (let i = 0; i < stdio.length; i++) {\x0d\n    const stream = stdio[i];\x0d\n    // TODO(addaleax): This doesn't necessarily account for all the ways in\x0d\n    // which data can be read from a stream\x2C e.g. being consumed on the\x0d\n    // native layer directly as a StreamBase.\x0d\n    if (!stream || !stream.readable || stream[kIsUsedAsStdio]) {\x0d\n      continue;\x0d\n    }\x0d\n    stream.resume();\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nfunction createSocket(pipe\x2C readable) {\x0d\n  return net.Socket({ handle: pipe\x2C readable\x2C writable: !readable });\x0d\n}\x0d\n\x0d\n\x0d\nfunction getHandleWrapType(stream) {\x0d\n  if (stream instanceof Pipe) return 'pipe';\x0d\n  if (stream instanceof TTY) return 'tty';\x0d\n  if (stream instanceof TCP) return 'tcp';\x0d\n  if (stream instanceof UDP) return 'udp';\x0d\n\x0d\n  return false;\x0d\n}\x0d\n\x0d\nfunction closePendingHandle(target) {\x0d\n  target._pendingMessage.handle.close();\x0d\n  target._pendingMessage = null;\x0d\n}\x0d\n\x0d\n\x0d\nChildProcess.prototype.spawn = function(options) {\x0d\n  let i = 0;\x0d\n\x0d\n  validateObject(options\x2C 'options');\x0d\n\x0d\n  // If no `stdio` option was given - use default\x0d\n  let stdio = options.stdio || 'pipe';\x0d\n\x0d\n  stdio = getValidStdio(stdio\x2C false);\x0d\n\x0d\n  const ipc = stdio.ipc;\x0d\n  const ipcFd = stdio.ipcFd;\x0d\n  stdio = options.stdio = stdio.stdio;\x0d\n\x0d\n\x0d\n  validateOneOf(options.serialization\x2C 'options.serialization'\x2C\x0d\n                [undefined\x2C 'json'\x2C 'advanced']);\x0d\n  const serialization = options.serialization || 'json';\x0d\n\x0d\n  if (ipc !== undefined) {\x0d\n    // Let child process know about opened IPC channel\x0d\n    if (options.envPairs === undefined)\x0d\n      options.envPairs = [];\x0d\n    else\x0d\n      validateArray(options.envPairs\x2C 'options.envPairs');\x0d\n\x0d\n    ArrayPrototypePush(options.envPairs\x2C `NODE_CHANNEL_FD=${ipcFd}`);\x0d\n    ArrayPrototypePush(options.envPairs\x2C\x0d\n                       `NODE_CHANNEL_SERIALIZATION_MODE=${serialization}`);\x0d\n  }\x0d\n\x0d\n  validateString(options.file\x2C 'options.file');\x0d\n  this.spawnfile = options.file;\x0d\n\x0d\n  if (options.args === undefined) {\x0d\n    this.spawnargs = [];\x0d\n  } else {\x0d\n    validateArray(options.args\x2C 'options.args');\x0d\n    this.spawnargs = options.args;\x0d\n  }\x0d\n\x0d\n  const err = this._handle.spawn(options);\x0d\n\x0d\n  // Run-time errors should emit an error\x2C not throw an exception.\x0d\n  if (err === UV_EACCES ||\x0d\n      err === UV_EAGAIN ||\x0d\n      err === UV_EMFILE ||\x0d\n      err === UV_ENFILE ||\x0d\n      err === UV_ENOENT) {\x0d\n    process.nextTick(onErrorNT\x2C this\x2C err);\x0d\n\x0d\n    // There is no point in continuing when we've hit EMFILE or ENFILE\x0d\n    // because we won't be able to set up the stdio file descriptors.\x0d\n    if (err === UV_EMFILE || err === UV_ENFILE)\x0d\n      return err;\x0d\n  } else if (err) {\x0d\n    // Close all opened fds on error\x0d\n    for (i = 0; i < stdio.length; i++) {\x0d\n      const stream = stdio[i];\x0d\n      if (stream.type === 'pipe') {\x0d\n        stream.handle.close();\x0d\n      }\x0d\n    }\x0d\n\x0d\n    this._handle.close();\x0d\n    this._handle = null;\x0d\n    throw errnoException(err\x2C 'spawn');\x0d\n  } else {\x0d\n    process.nextTick(onSpawnNT\x2C this);\x0d\n  }\x0d\n\x0d\n  this.pid = this._handle.pid;\x0d\n\x0d\n  for (i = 0; i < stdio.length; i++) {\x0d\n    const stream = stdio[i];\x0d\n    if (stream.type === 'ignore') continue;\x0d\n\x0d\n    if (stream.ipc) {\x0d\n      this._closesNeeded++;\x0d\n      continue;\x0d\n    }\x0d\n\x0d\n    // The stream is already cloned and piped\x2C thus stop its readable side\x2C\x0d\n    // otherwise we might attempt to read from the stream when at the same time\x0d\n    // the child process does.\x0d\n    if (stream.type === 'wrap') {\x0d\n      stream.handle.reading = false;\x0d\n      stream.handle.readStop();\x0d\n      stream._stdio.pause();\x0d\n      stream._stdio.readableFlowing = false;\x0d\n      stream._stdio._readableState.reading = false;\x0d\n      stream._stdio[kIsUsedAsStdio] = true;\x0d\n      continue;\x0d\n    }\x0d\n\x0d\n    if (stream.handle) {\x0d\n      // When i === 0 - we're dealing with stdin\x0d\n      // (which is the only one writable pipe).\x0d\n      stream.socket = createSocket(this.pid !== 0 ?\x0d\n        stream.handle : null\x2C i > 0);\x0d\n\x0d\n      if (i > 0 && this.pid !== 0) {\x0d\n        this._closesNeeded++;\x0d\n        stream.socket.on('close'\x2C () => {\x0d\n          maybeClose(this);\x0d\n        });\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  this.stdin = stdio.length >= 1 && stdio[0].socket !== undefined ?\x0d\n    stdio[0].socket : null;\x0d\n  this.stdout = stdio.length >= 2 && stdio[1].socket !== undefined ?\x0d\n    stdio[1].socket : null;\x0d\n  this.stderr = stdio.length >= 3 && stdio[2].socket !== undefined ?\x0d\n    stdio[2].socket : null;\x0d\n\x0d\n  this.stdio = [];\x0d\n\x0d\n  for (i = 0; i < stdio.length; i++)\x0d\n    ArrayPrototypePush(this.stdio\x2C\x0d\n                       stdio[i].socket === undefined ? null : stdio[i].socket);\x0d\n\x0d\n  // Add .send() method and start listening for IPC data\x0d\n  if (ipc !== undefined) setupChannel(this\x2C ipc\x2C serialization);\x0d\n\x0d\n  return err;\x0d\n};\x0d\n\x0d\n\x0d\nfunction onErrorNT(self\x2C err) {\x0d\n  self._handle.onexit(err);\x0d\n}\x0d\n\x0d\n\x0d\nfunction onSpawnNT(self) {\x0d\n  self.emit('spawn');\x0d\n}\x0d\n\x0d\n\x0d\nChildProcess.prototype.kill = function(sig) {\x0d\n\x0d\n  const signal = sig === 0 ? sig :\x0d\n    convertToValidSignal(sig === undefined ? 'SIGTERM' : sig);\x0d\n\x0d\n  if (this._handle) {\x0d\n    const err = this._handle.kill(signal);\x0d\n    if (err === 0) {\x0d\n      /* Success. */\x0d\n      this.killed = true;\x0d\n      return true;\x0d\n    }\x0d\n    if (err === UV_ESRCH) {\x0d\n      /* Already dead. */\x0d\n    } else if (err === UV_EINVAL || err === UV_ENOSYS) {\x0d\n      /* The underlying platform doesn't support this signal. */\x0d\n      throw errnoException(err\x2C 'kill');\x0d\n    } else {\x0d\n      /* Other error\x2C almost certainly EPERM. */\x0d\n      this.emit('error'\x2C errnoException(err\x2C 'kill'));\x0d\n    }\x0d\n  }\x0d\n\x0d\n  /* Kill didn't succeed. */\x0d\n  return false;\x0d\n};\x0d\n\x0d\n\x0d\nChildProcess.prototype.ref = function() {\x0d\n  if (this._handle) this._handle.ref();\x0d\n};\x0d\n\x0d\n\x0d\nChildProcess.prototype.unref = function() {\x0d\n  if (this._handle) this._handle.unref();\x0d\n};\x0d\n\x0d\nclass Control extends EventEmitter {\x0d\n  #channel = null;\x0d\n  #refs = 0;\x0d\n  #refExplicitlySet = false;\x0d\n\x0d\n  constructor(channel) {\x0d\n    super();\x0d\n    this.#channel = channel;\x0d\n    this[kPendingMessages] = [];\x0d\n  }\x0d\n\x0d\n  // The methods keeping track of the counter are being used to track the\x0d\n  // listener count on the child process object as well as when writes are\x0d\n  // in progress. Once the user has explicitly requested a certain state\x2C these\x0d\n  // methods become no-ops in order to not interfere with the user's intentions.\x0d\n  refCounted() {\x0d\n    if (++this.#refs === 1 && !this.#refExplicitlySet) {\x0d\n      this.#channel.ref();\x0d\n    }\x0d\n  }\x0d\n\x0d\n  unrefCounted() {\x0d\n    if (--this.#refs === 0 && !this.#refExplicitlySet) {\x0d\n      this.#channel.unref();\x0d\n      this.emit('unref');\x0d\n    }\x0d\n  }\x0d\n\x0d\n  ref() {\x0d\n    this.#refExplicitlySet = true;\x0d\n    this.#channel.ref();\x0d\n  }\x0d\n\x0d\n  unref() {\x0d\n    this.#refExplicitlySet = true;\x0d\n    this.#channel.unref();\x0d\n  }\x0d\n\x0d\n  get fd() {\x0d\n    return this.#channel ? this.#channel.fd : undefined;\x0d\n  }\x0d\n}\x0d\n\x0d\nconst channelDeprecationMsg = '_channel is deprecated. ' +\x0d\n                              'Use ChildProcess.channel instead.';\x0d\n\x0d\nlet serialization;\x0d\nfunction setupChannel(target\x2C channel\x2C serializationMode) {\x0d\n  const control = new Control(channel);\x0d\n  target.channel = control;\x0d\n  target[kChannelHandle] = channel;\x0d\n\x0d\n  ObjectDefineProperty(target\x2C '_channel'\x2C {\x0d\n    get: deprecate(() => {\x0d\n      return target.channel;\x0d\n    }\x2C channelDeprecationMsg\x2C 'DEP0129')\x2C\x0d\n    set: deprecate((val) => {\x0d\n      target.channel = val;\x0d\n    }\x2C channelDeprecationMsg\x2C 'DEP0129')\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x0d\n  });\x0d\n\x0d\n  target._handleQueue = null;\x0d\n  target._pendingMessage = null;\x0d\n\x0d\n  if (serialization === undefined)\x0d\n    serialization = require('internal/child_process/serialization');\x0d\n  const {\x0d\n    initMessageChannel\x2C\x0d\n    parseChannelMessages\x2C\x0d\n    writeChannelMessage\x0d\n  } = serialization[serializationMode];\x0d\n\x0d\n  let pendingHandle = null;\x0d\n  initMessageChannel(channel);\x0d\n  channel.pendingHandle = null;\x0d\n  channel.onread = function(arrayBuffer) {\x0d\n    const recvHandle = channel.pendingHandle;\x0d\n    channel.pendingHandle = null;\x0d\n    if (arrayBuffer) {\x0d\n      const nread = streamBaseState[kReadBytesOrError];\x0d\n      const offset = streamBaseState[kArrayBufferOffset];\x0d\n      const pool = new Uint8Array(arrayBuffer\x2C offset\x2C nread);\x0d\n      if (recvHandle)\x0d\n        pendingHandle = recvHandle;\x0d\n\x0d\n      for (const message of parseChannelMessages(channel\x2C pool)) {\x0d\n        // There will be at most one NODE_HANDLE message in every chunk we\x0d\n        // read because SCM_RIGHTS messages don't get coalesced. Make sure\x0d\n        // that we deliver the handle with the right message however.\x0d\n        if (isInternal(message)) {\x0d\n          if (message.cmd === 'NODE_HANDLE') {\x0d\n            handleMessage(message\x2C pendingHandle\x2C true);\x0d\n            pendingHandle = null;\x0d\n          } else {\x0d\n            handleMessage(message\x2C undefined\x2C true);\x0d\n          }\x0d\n        } else {\x0d\n          handleMessage(message\x2C undefined\x2C false);\x0d\n        }\x0d\n      }\x0d\n    } else {\x0d\n      this.buffering = false;\x0d\n      target.disconnect();\x0d\n      channel.onread = nop;\x0d\n      channel.close();\x0d\n      target.channel = null;\x0d\n      maybeClose(target);\x0d\n    }\x0d\n  };\x0d\n\x0d\n  // Object where socket lists will live\x0d\n  channel.sockets = { got: {}\x2C send: {} };\x0d\n\x0d\n  // Handlers will go through this\x0d\n  target.on('internalMessage'\x2C function(message\x2C handle) {\x0d\n    // Once acknowledged - continue sending handles.\x0d\n    if (message.cmd === 'NODE_HANDLE_ACK' ||\x0d\n        message.cmd === 'NODE_HANDLE_NACK') {\x0d\n\x0d\n      if (target._pendingMessage) {\x0d\n        if (message.cmd === 'NODE_HANDLE_ACK') {\x0d\n          closePendingHandle(target);\x0d\n        } else if (target._pendingMessage.retransmissions++ ===\x0d\n                   MAX_HANDLE_RETRANSMISSIONS) {\x0d\n          closePendingHandle(target);\x0d\n          process.emitWarning('Handle did not reach the receiving process ' +\x0d\n                              'correctly'\x2C 'SentHandleNotReceivedWarning');\x0d\n        }\x0d\n      }\x0d\n\x0d\n      assert(ArrayIsArray(target._handleQueue));\x0d\n      const queue = target._handleQueue;\x0d\n      target._handleQueue = null;\x0d\n\x0d\n      if (target._pendingMessage) {\x0d\n        target._send(target._pendingMessage.message\x2C\x0d\n                     target._pendingMessage.handle\x2C\x0d\n                     target._pendingMessage.options\x2C\x0d\n                     target._pendingMessage.callback);\x0d\n      }\x0d\n\x0d\n      for (let i = 0; i < queue.length; i++) {\x0d\n        const args = queue[i];\x0d\n        target._send(args.message\x2C args.handle\x2C args.options\x2C args.callback);\x0d\n      }\x0d\n\x0d\n      // Process a pending disconnect (if any).\x0d\n      if (!target.connected && target.channel && !target._handleQueue)\x0d\n        target._disconnect();\x0d\n\x0d\n      return;\x0d\n    }\x0d\n\x0d\n    if (message.cmd !== 'NODE_HANDLE') return;\x0d\n\x0d\n    // It is possible that the handle is not received because of some error on\x0d\n    // ancillary data reception such as MSG_CTRUNC. In this case\x2C report the\x0d\n    // sender about it by sending a NODE_HANDLE_NACK message.\x0d\n    if (!handle)\x0d\n      return target._send({ cmd: 'NODE_HANDLE_NACK' }\x2C null\x2C true);\x0d\n\x0d\n    // Acknowledge handle receival. Don't emit error events (for example if\x0d\n    // the other side has disconnected) because this call to send() is not\x0d\n    // initiated by the user and it shouldn't be fatal to be unable to ACK\x0d\n    // a message.\x0d\n    target._send({ cmd: 'NODE_HANDLE_ACK' }\x2C null\x2C true);\x0d\n\x0d\n    const obj = handleConversion[message.type];\x0d\n\x0d\n    // Update simultaneous accepts on Windows\x0d\n    if (process.platform === 'win32') {\x0d\n      handle.setSimultaneousAccepts(false);\x0d\n    }\x0d\n\x0d\n    // Convert handle object\x0d\n    obj.got.call(this\x2C message\x2C handle\x2C (handle) => {\x0d\n      handleMessage(message.msg\x2C handle\x2C isInternal(message.msg));\x0d\n    });\x0d\n  });\x0d\n\x0d\n  target.on('newListener'\x2C function() {\x0d\n\x0d\n    process.nextTick(() => {\x0d\n      if (!target.channel || !target.listenerCount('message'))\x0d\n        return;\x0d\n\x0d\n      const messages = target.channel[kPendingMessages];\x0d\n      const { length } = messages;\x0d\n      if (!length) return;\x0d\n\x0d\n      for (let i = 0; i < length; i++) {\x0d\n        ReflectApply(target.emit\x2C target\x2C messages[i]);\x0d\n      }\x0d\n\x0d\n      target.channel[kPendingMessages] = [];\x0d\n    });\x0d\n  });\x0d\n\x0d\n  target.send = function(message\x2C handle\x2C options\x2C callback) {\x0d\n    if (typeof handle === 'function') {\x0d\n      callback = handle;\x0d\n      handle = undefined;\x0d\n      options = undefined;\x0d\n    } else if (typeof options === 'function') {\x0d\n      callback = options;\x0d\n      options = undefined;\x0d\n    } else if (options !== undefined) {\x0d\n      validateObject(options\x2C 'options');\x0d\n    }\x0d\n\x0d\n    options = { swallowErrors: false\x2C ...options };\x0d\n\x0d\n    if (this.connected) {\x0d\n      return this._send(message\x2C handle\x2C options\x2C callback);\x0d\n    }\x0d\n    const ex = new ERR_IPC_CHANNEL_CLOSED();\x0d\n    if (typeof callback === 'function') {\x0d\n      process.nextTick(callback\x2C ex);\x0d\n    } else {\x0d\n      process.nextTick(() => this.emit('error'\x2C ex));\x0d\n    }\x0d\n    return false;\x0d\n  };\x0d\n\x0d\n  target._send = function(message\x2C handle\x2C options\x2C callback) {\x0d\n    assert(this.connected || this.channel);\x0d\n\x0d\n    if (message === undefined)\x0d\n      throw new ERR_MISSING_ARGS('message');\x0d\n\x0d\n    // Non-serializable messages should not reach the remote\x0d\n    // end point; as any failure in the stringification there\x0d\n    // will result in error message that is weakly consumable.\x0d\n    // So perform a final check on message prior to sending.\x0d\n    if (typeof message !== 'string' &&\x0d\n        typeof message !== 'object' &&\x0d\n        typeof message !== 'number' &&\x0d\n        typeof message !== 'boolean') {\x0d\n      throw new ERR_INVALID_ARG_TYPE(\x0d\n        'message'\x2C ['string'\x2C 'object'\x2C 'number'\x2C 'boolean']\x2C message);\x0d\n    }\x0d\n\x0d\n    // Support legacy function signature\x0d\n    if (typeof options === 'boolean') {\x0d\n      options = { swallowErrors: options };\x0d\n    }\x0d\n\x0d\n    let obj;\x0d\n\x0d\n    // Package messages with a handle object\x0d\n    if (handle) {\x0d\n      // This message will be handled by an internalMessage event handler\x0d\n      message = {\x0d\n        cmd: 'NODE_HANDLE'\x2C\x0d\n        type: null\x2C\x0d\n        msg: message\x0d\n      };\x0d\n\x0d\n      if (handle instanceof net.Socket) {\x0d\n        message.type = 'net.Socket';\x0d\n      } else if (handle instanceof net.Server) {\x0d\n        message.type = 'net.Server';\x0d\n      } else if (handle instanceof TCP || handle instanceof Pipe) {\x0d\n        message.type = 'net.Native';\x0d\n      } else if (handle instanceof dgram.Socket) {\x0d\n        message.type = 'dgram.Socket';\x0d\n      } else if (handle instanceof UDP) {\x0d\n        message.type = 'dgram.Native';\x0d\n      } else {\x0d\n        throw new ERR_INVALID_HANDLE_TYPE();\x0d\n      }\x0d\n\x0d\n      // Queue-up message and handle if we haven't received ACK yet.\x0d\n      if (this._handleQueue) {\x0d\n        ArrayPrototypePush(this._handleQueue\x2C {\x0d\n          callback: callback\x2C\x0d\n          handle: handle\x2C\x0d\n          options: options\x2C\x0d\n          message: message.msg\x2C\x0d\n        });\x0d\n        return this._handleQueue.length === 1;\x0d\n      }\x0d\n\x0d\n      obj = handleConversion[message.type];\x0d\n\x0d\n      // convert TCP object to native handle object\x0d\n      handle = ReflectApply(handleConversion[message.type].send\x2C\x0d\n                            target\x2C [message\x2C handle\x2C options]);\x0d\n\x0d\n      // If handle was sent twice\x2C or it is impossible to get native handle\x0d\n      // out of it - just send a text without the handle.\x0d\n      if (!handle)\x0d\n        message = message.msg;\x0d\n\x0d\n      // Update simultaneous accepts on Windows\x0d\n      if (obj.simultaneousAccepts && process.platform === 'win32') {\x0d\n        handle.setSimultaneousAccepts(true);\x0d\n      }\x0d\n    } else if (this._handleQueue &&\x0d\n               !(message && (message.cmd === 'NODE_HANDLE_ACK' ||\x0d\n                             message.cmd === 'NODE_HANDLE_NACK'))) {\x0d\n      // Queue request anyway to avoid out-of-order messages.\x0d\n      ArrayPrototypePush(this._handleQueue\x2C {\x0d\n        callback: callback\x2C\x0d\n        handle: null\x2C\x0d\n        options: options\x2C\x0d\n        message: message\x2C\x0d\n      });\x0d\n      return this._handleQueue.length === 1;\x0d\n    }\x0d\n\x0d\n    const req = new WriteWrap();\x0d\n\x0d\n    const err = writeChannelMessage(channel\x2C req\x2C message\x2C handle);\x0d\n    const wasAsyncWrite = streamBaseState[kLastWriteWasAsync];\x0d\n\x0d\n    if (err === 0) {\x0d\n      if (handle) {\x0d\n        if (!this._handleQueue)\x0d\n          this._handleQueue = [];\x0d\n        if (obj && obj.postSend)\x0d\n          obj.postSend(message\x2C handle\x2C options\x2C callback\x2C target);\x0d\n      }\x0d\n\x0d\n      if (wasAsyncWrite) {\x0d\n        req.oncomplete = () => {\x0d\n          control.unrefCounted();\x0d\n          if (typeof callback === 'function')\x0d\n            callback(null);\x0d\n        };\x0d\n        control.refCounted();\x0d\n      } else if (typeof callback === 'function') {\x0d\n        process.nextTick(callback\x2C null);\x0d\n      }\x0d\n    } else {\x0d\n      // Cleanup handle on error\x0d\n      if (obj && obj.postSend)\x0d\n        obj.postSend(message\x2C handle\x2C options\x2C callback);\x0d\n\x0d\n      if (!options.swallowErrors) {\x0d\n        const ex = errnoException(err\x2C 'write');\x0d\n        if (typeof callback === 'function') {\x0d\n          process.nextTick(callback\x2C ex);\x0d\n        } else {\x0d\n          process.nextTick(() => this.emit('error'\x2C ex));\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n\x0d\n    /* If the primary is > 2 read() calls behind\x2C please stop sending. */\x0d\n    return channel.writeQueueSize < (65536 * 2);\x0d\n  };\x0d\n\x0d\n  // Connected will be set to false immediately when a disconnect() is\x0d\n  // requested\x2C even though the channel might still be alive internally to\x0d\n  // process queued messages. The three states are distinguished as follows:\x0d\n  // - disconnect() never requested: channel is not null and connected\x0d\n  //   is true\x0d\n  // - disconnect() requested\x2C messages in the queue: channel is not null\x0d\n  //   and connected is false\x0d\n  // - disconnect() requested\x2C channel actually disconnected: channel is\x0d\n  //   null and connected is false\x0d\n  target.connected = true;\x0d\n\x0d\n  target.disconnect = function() {\x0d\n    if (!this.connected) {\x0d\n      this.emit('error'\x2C new ERR_IPC_DISCONNECTED());\x0d\n      return;\x0d\n    }\x0d\n\x0d\n    // Do not allow any new messages to be written.\x0d\n    this.connected = false;\x0d\n\x0d\n    // If there are no queued messages\x2C disconnect immediately. Otherwise\x2C\x0d\n    // postpone the disconnect so that it happens internally after the\x0d\n    // queue is flushed.\x0d\n    if (!this._handleQueue)\x0d\n      this._disconnect();\x0d\n  };\x0d\n\x0d\n  target._disconnect = function() {\x0d\n    assert(this.channel);\x0d\n\x0d\n    // This marks the fact that the channel is actually disconnected.\x0d\n    this.channel = null;\x0d\n    this[kChannelHandle] = null;\x0d\n\x0d\n    if (this._pendingMessage)\x0d\n      closePendingHandle(this);\x0d\n\x0d\n    let fired = false;\x0d\n    function finish() {\x0d\n      if (fired) return;\x0d\n      fired = true;\x0d\n\x0d\n      channel.close();\x0d\n      target.emit('disconnect');\x0d\n    }\x0d\n\x0d\n    // If a message is being read\x2C then wait for it to complete.\x0d\n    if (channel.buffering) {\x0d\n      this.once('message'\x2C finish);\x0d\n      this.once('internalMessage'\x2C finish);\x0d\n\x0d\n      return;\x0d\n    }\x0d\n\x0d\n    process.nextTick(finish);\x0d\n  };\x0d\n\x0d\n  function emit(event\x2C message\x2C handle) {\x0d\n    if ('internalMessage' === event || target.listenerCount('message')) {\x0d\n      target.emit(event\x2C message\x2C handle);\x0d\n      return;\x0d\n    }\x0d\n\x0d\n    ArrayPrototypePush(\x0d\n      target.channel[kPendingMessages]\x2C\x0d\n      [event\x2C message\x2C handle]\x0d\n    );\x0d\n  }\x0d\n\x0d\n  function handleMessage(message\x2C handle\x2C internal) {\x0d\n    if (!target.channel)\x0d\n      return;\x0d\n\x0d\n    const eventName = (internal ? 'internalMessage' : 'message');\x0d\n\x0d\n    process.nextTick(emit\x2C eventName\x2C message\x2C handle);\x0d\n  }\x0d\n\x0d\n  channel.readStart();\x0d\n  return control;\x0d\n}\x0d\n\x0d\nconst INTERNAL_PREFIX = 'NODE_';\x0d\nfunction isInternal(message) {\x0d\n  return (message !== null &&\x0d\n          typeof message === 'object' &&\x0d\n          typeof message.cmd === 'string' &&\x0d\n          message.cmd.length > INTERNAL_PREFIX.length &&\x0d\n          StringPrototypeSlice(message.cmd\x2C 0\x2C INTERNAL_PREFIX.length) ===\x0d\n            INTERNAL_PREFIX);\x0d\n}\x0d\n\x0d\nconst nop = FunctionPrototype;\x0d\n\x0d\nfunction getValidStdio(stdio\x2C sync) {\x0d\n  let ipc;\x0d\n  let ipcFd;\x0d\n\x0d\n  // Replace shortcut with an array\x0d\n  if (typeof stdio === 'string') {\x0d\n    stdio = stdioStringToArray(stdio);\x0d\n  } else if (!ArrayIsArray(stdio)) {\x0d\n    throw new ERR_INVALID_ARG_VALUE('stdio'\x2C stdio);\x0d\n  }\x0d\n\x0d\n  // At least 3 stdio will be created\x0d\n  // Don't concat() a new Array() because it would be sparse\x2C and\x0d\n  // stdio.reduce() would skip the sparse elements of stdio.\x0d\n  // See https://stackoverflow.com/a/5501711/3561\x0d\n  while (stdio.length < 3) ArrayPrototypePush(stdio\x2C undefined);\x0d\n\x0d\n  // Translate stdio into C++-readable form\x0d\n  // (i.e. PipeWraps or fds)\x0d\n  stdio = ArrayPrototypeReduce(stdio\x2C (acc\x2C stdio\x2C i) => {\x0d\n    function cleanup() {\x0d\n      for (let i = 0; i < acc.length; i++) {\x0d\n        if ((acc[i].type === 'pipe' || acc[i].type === 'ipc') && acc[i].handle)\x0d\n          acc[i].handle.close();\x0d\n      }\x0d\n    }\x0d\n\x0d\n    // Defaults\x0d\n    if (stdio == null) {\x0d\n      stdio = i < 3 ? 'pipe' : 'ignore';\x0d\n    }\x0d\n\x0d\n    if (stdio === 'ignore') {\x0d\n      ArrayPrototypePush(acc\x2C { type: 'ignore' });\x0d\n    } else if (stdio === 'pipe' || stdio === 'overlapped' ||\x0d\n               (typeof stdio === 'number' && stdio < 0)) {\x0d\n      const a = {\x0d\n        type: stdio === 'overlapped' ? 'overlapped' : 'pipe'\x2C\x0d\n        readable: i === 0\x2C\x0d\n        writable: i !== 0\x0d\n      };\x0d\n\x0d\n      if (!sync)\x0d\n        a.handle = new Pipe(PipeConstants.SOCKET);\x0d\n\x0d\n      ArrayPrototypePush(acc\x2C a);\x0d\n    } else if (stdio === 'ipc') {\x0d\n      if (sync || ipc !== undefined) {\x0d\n        // Cleanup previously created pipes\x0d\n        cleanup();\x0d\n        if (!sync)\x0d\n          throw new ERR_IPC_ONE_PIPE();\x0d\n        else\x0d\n          throw new ERR_IPC_SYNC_FORK();\x0d\n      }\x0d\n\x0d\n      ipc = new Pipe(PipeConstants.IPC);\x0d\n      ipcFd = i;\x0d\n\x0d\n      ArrayPrototypePush(acc\x2C {\x0d\n        type: 'pipe'\x2C\x0d\n        handle: ipc\x2C\x0d\n        ipc: true\x0d\n      });\x0d\n    } else if (stdio === 'inherit') {\x0d\n      ArrayPrototypePush(acc\x2C {\x0d\n        type: 'inherit'\x2C\x0d\n        fd: i\x0d\n      });\x0d\n    } else if (typeof stdio === 'number' || typeof stdio.fd === 'number') {\x0d\n      ArrayPrototypePush(acc\x2C {\x0d\n        type: 'fd'\x2C\x0d\n        fd: typeof stdio === 'number' ? stdio : stdio.fd\x0d\n      });\x0d\n    } else if (getHandleWrapType(stdio) || getHandleWrapType(stdio.handle) ||\x0d\n               getHandleWrapType(stdio._handle)) {\x0d\n      const handle = getHandleWrapType(stdio) ?\x0d\n        stdio :\x0d\n        getHandleWrapType(stdio.handle) ? stdio.handle : stdio._handle;\x0d\n\x0d\n      ArrayPrototypePush(acc\x2C {\x0d\n        type: 'wrap'\x2C\x0d\n        wrapType: getHandleWrapType(handle)\x2C\x0d\n        handle: handle\x2C\x0d\n        _stdio: stdio\x0d\n      });\x0d\n    } else if (isArrayBufferView(stdio) || typeof stdio === 'string') {\x0d\n      if (!sync) {\x0d\n        cleanup();\x0d\n        throw new ERR_INVALID_SYNC_FORK_INPUT(inspect(stdio));\x0d\n      }\x0d\n    } else {\x0d\n      // Cleanup\x0d\n      cleanup();\x0d\n      throw new ERR_INVALID_ARG_VALUE('stdio'\x2C stdio);\x0d\n    }\x0d\n\x0d\n    return acc;\x0d\n  }\x2C []);\x0d\n\x0d\n  return { stdio\x2C ipc\x2C ipcFd };\x0d\n}\x0d\n\x0d\n\x0d\nfunction getSocketList(type\x2C worker\x2C key) {\x0d\n  const sockets = worker[kChannelHandle].sockets[type];\x0d\n  let socketList = sockets[key];\x0d\n  if (!socketList) {\x0d\n    const Construct = type === 'send' ? SocketListSend : SocketListReceive;\x0d\n    socketList = sockets[key] = new Construct(worker\x2C key);\x0d\n  }\x0d\n  return socketList;\x0d\n}\x0d\n\x0d\n\x0d\nfunction maybeClose(subprocess) {\x0d\n  subprocess._closesGot++;\x0d\n\x0d\n  if (subprocess._closesGot === subprocess._closesNeeded) {\x0d\n    subprocess.emit('close'\x2C subprocess.exitCode\x2C subprocess.signalCode);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction spawnSync(options) {\x0d\n  const result = spawn_sync.spawn(options);\x0d\n\x0d\n  if (result.output && options.encoding && options.encoding !== 'buffer') {\x0d\n    for (let i = 0; i < result.output.length; i++) {\x0d\n      if (!result.output[i])\x0d\n        continue;\x0d\n      result.output[i] = result.output[i].toString(options.encoding);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  result.stdout = result.output && result.output[1];\x0d\n  result.stderr = result.output && result.output[2];\x0d\n\x0d\n  if (result.error) {\x0d\n    result.error = errnoException(result.error\x2C 'spawnSync ' + options.file);\x0d\n    result.error.path = options.file;\x0d\n    result.error.spawnargs = ArrayPrototypeSlice(options.args\x2C 1);\x0d\n  }\x0d\n\x0d\n  return result;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  ChildProcess\x2C\x0d\n  kChannelHandle\x2C\x0d\n  setupChannel\x2C\x0d\n  getValidStdio\x2C\x0d\n  stdioStringToArray\x2C\x0d\n  spawnSync\x0d\n};\x0d\n
code-source-info,0x2e2fa6a012e,100,0,32650,C0O0C4O32650,,
code-creation,Function,10,320776,0x2e2fa6a174e,1265, node:internal/child_process:1:1,0x2e2fa6a00a8,~
code-source-info,0x2e2fa6a174e
code-creation,Function,10,320989,0x2e2fa6a1ec6,35,<instance_members_initializer> node:internal/child_process:525:3,0x2e2fa6a0e10,~
code-source-info,0x2e2fa6a1ec6,100,14231,14290,C3O14242C16O14259C26O14285C34O14290,,
code-creation,Eval,10,322398,0x2e2fa6a6156,5, node:net:1:1,0x2e2fa6a5978,~
script-source,101,node:net,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypeIndexOf\x2C\x0d\n  Boolean\x2C\x0d\n  Error\x2C\x0d\n  Number\x2C\x0d\n  NumberIsNaN\x2C\x0d\n  NumberParseInt\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  Symbol\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst EventEmitter = require('events');\x0d\nconst stream = require('stream');\x0d\nlet debug = require('internal/util/debuglog').debuglog('net'\x2C (fn) => {\x0d\n  debug = fn;\x0d\n});\x0d\nconst {\x0d\n  isIP\x2C\x0d\n  isIPv4\x2C\x0d\n  isIPv6\x2C\x0d\n  normalizedArgsSymbol\x2C\x0d\n  makeSyncWrite\x0d\n} = require('internal/net');\x0d\nconst assert = require('internal/assert');\x0d\nconst {\x0d\n  UV_EADDRINUSE\x2C\x0d\n  UV_EINVAL\x2C\x0d\n  UV_ENOTCONN\x0d\n} = internalBinding('uv');\x0d\n\x0d\nconst { Buffer } = require('buffer');\x0d\nconst { guessHandleType } = internalBinding('util');\x0d\nconst { ShutdownWrap } = internalBinding('stream_wrap');\x0d\nconst {\x0d\n  TCP\x2C\x0d\n  TCPConnectWrap\x2C\x0d\n  constants: TCPConstants\x0d\n} = internalBinding('tcp_wrap');\x0d\nconst {\x0d\n  Pipe\x2C\x0d\n  PipeConnectWrap\x2C\x0d\n  constants: PipeConstants\x0d\n} = internalBinding('pipe_wrap');\x0d\nconst {\x0d\n  newAsyncId\x2C\x0d\n  defaultTriggerAsyncIdScope\x2C\x0d\n  symbols: { async_id_symbol\x2C owner_symbol }\x0d\n} = require('internal/async_hooks');\x0d\nconst {\x0d\n  writevGeneric\x2C\x0d\n  writeGeneric\x2C\x0d\n  onStreamRead\x2C\x0d\n  kAfterAsyncWrite\x2C\x0d\n  kHandle\x2C\x0d\n  kUpdateTimer\x2C\x0d\n  setStreamTimeout\x2C\x0d\n  kBuffer\x2C\x0d\n  kBufferCb\x2C\x0d\n  kBufferGen\x0d\n} = require('internal/stream_base_commons');\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_INVALID_ADDRESS_FAMILY\x2C\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_INVALID_FD_TYPE\x2C\x0d\n    ERR_INVALID_IP_ADDRESS\x2C\x0d\n    ERR_SERVER_ALREADY_LISTEN\x2C\x0d\n    ERR_SERVER_NOT_RUNNING\x2C\x0d\n    ERR_SOCKET_CLOSED\x2C\x0d\n    ERR_MISSING_ARGS\x2C\x0d\n  }\x2C\x0d\n  errnoException\x2C\x0d\n  exceptionWithHostPort\x2C\x0d\n  uvExceptionWithHostPort\x0d\n} = require('internal/errors');\x0d\nconst { isUint8Array } = require('internal/util/types');\x0d\nconst {\x0d\n  validateAbortSignal\x2C\x0d\n  validateFunction\x2C\x0d\n  validateInt32\x2C\x0d\n  validateNumber\x2C\x0d\n  validatePort\x2C\x0d\n  validateString\x0d\n} = require('internal/validators');\x0d\nconst kLastWriteQueueSize = Symbol('lastWriteQueueSize');\x0d\nconst {\x0d\n  DTRACE_NET_SERVER_CONNECTION\x2C\x0d\n  DTRACE_NET_STREAM_END\x0d\n} = require('internal/dtrace');\x0d\n\x0d\n// Lazy loaded to improve startup performance.\x0d\nlet cluster;\x0d\nlet dns;\x0d\nlet BlockList;\x0d\nlet SocketAddress;\x0d\n\x0d\nconst { clearTimeout } = require('timers');\x0d\nconst { kTimeout } = require('internal/timers');\x0d\n\x0d\nconst DEFAULT_IPV4_ADDR = '0.0.0.0';\x0d\nconst DEFAULT_IPV6_ADDR = '::';\x0d\n\x0d\nconst isWindows = process.platform === 'win32';\x0d\n\x0d\nconst noop = () => {};\x0d\n\x0d\nfunction getFlags(ipv6Only) {\x0d\n  return ipv6Only === true ? TCPConstants.UV_TCP_IPV6ONLY : 0;\x0d\n}\x0d\n\x0d\nfunction createHandle(fd\x2C is_server) {\x0d\n  validateInt32(fd\x2C 'fd'\x2C 0);\x0d\n  const type = guessHandleType(fd);\x0d\n  if (type === 'PIPE') {\x0d\n    return new Pipe(\x0d\n      is_server ? PipeConstants.SERVER : PipeConstants.SOCKET\x0d\n    );\x0d\n  }\x0d\n\x0d\n  if (type === 'TCP') {\x0d\n    return new TCP(\x0d\n      is_server ? TCPConstants.SERVER : TCPConstants.SOCKET\x0d\n    );\x0d\n  }\x0d\n\x0d\n  throw new ERR_INVALID_FD_TYPE(type);\x0d\n}\x0d\n\x0d\n\x0d\nfunction getNewAsyncId(handle) {\x0d\n  return (!handle || typeof handle.getAsyncId !== 'function') ?\x0d\n    newAsyncId() : handle.getAsyncId();\x0d\n}\x0d\n\x0d\n\x0d\nfunction isPipeName(s) {\x0d\n  return typeof s === 'string' && toNumber(s) === false;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Creates a new TCP or IPC server\x0d\n * @param {{\x0d\n *   allowHalfOpen?: boolean;\x0d\n *   pauseOnConnect?: boolean;\x0d\n *   }} [options]\x0d\n * @param {Function} [connectionListener]\x0d\n * @returns {Server}\x0d\n */\x0d\n\x0d\nfunction createServer(options\x2C connectionListener) {\x0d\n  return new Server(options\x2C connectionListener);\x0d\n}\x0d\n\x0d\n\x0d\n// Target API:\x0d\n//\x0d\n// let s = net.connect({port: 80\x2C host: 'google.com'}\x2C function() {\x0d\n//   ...\x0d\n// });\x0d\n//\x0d\n// There are various forms:\x0d\n//\x0d\n// connect(options\x2C [cb])\x0d\n// connect(port\x2C [host]\x2C [cb])\x0d\n// connect(path\x2C [cb]);\x0d\n//\x0d\nfunction connect(...args) {\x0d\n  const normalized = normalizeArgs(args);\x0d\n  const options = normalized[0];\x0d\n  debug('createConnection'\x2C normalized);\x0d\n  const socket = new Socket(options);\x0d\n\x0d\n  if (options.timeout) {\x0d\n    socket.setTimeout(options.timeout);\x0d\n  }\x0d\n\x0d\n  return socket.connect(normalized);\x0d\n}\x0d\n\x0d\n\x0d\n// Returns an array [options\x2C cb]\x2C where options is an object\x2C\x0d\n// cb is either a function or null.\x0d\n// Used to normalize arguments of Socket.prototype.connect() and\x0d\n// Server.prototype.listen(). Possible combinations of parameters:\x0d\n//   (options[...][\x2C cb])\x0d\n//   (path[...][\x2C cb])\x0d\n//   ([port][\x2C host][...][\x2C cb])\x0d\n// For Socket.prototype.connect()\x2C the [...] part is ignored\x0d\n// For Server.prototype.listen()\x2C the [...] part is [\x2C backlog]\x0d\n// but will not be handled here (handled in listen())\x0d\nfunction normalizeArgs(args) {\x0d\n  let arr;\x0d\n\x0d\n  if (args.length === 0) {\x0d\n    arr = [{}\x2C null];\x0d\n    arr[normalizedArgsSymbol] = true;\x0d\n    return arr;\x0d\n  }\x0d\n\x0d\n  const arg0 = args[0];\x0d\n  let options = {};\x0d\n  if (typeof arg0 === 'object' && arg0 !== null) {\x0d\n    // (options[...][\x2C cb])\x0d\n    options = arg0;\x0d\n  } else if (isPipeName(arg0)) {\x0d\n    // (path[...][\x2C cb])\x0d\n    options.path = arg0;\x0d\n  } else {\x0d\n    // ([port][\x2C host][...][\x2C cb])\x0d\n    options.port = arg0;\x0d\n    if (args.length > 1 && typeof args[1] === 'string') {\x0d\n      options.host = args[1];\x0d\n    }\x0d\n  }\x0d\n\x0d\n  const cb = args[args.length - 1];\x0d\n  if (typeof cb !== 'function')\x0d\n    arr = [options\x2C null];\x0d\n  else\x0d\n    arr = [options\x2C cb];\x0d\n\x0d\n  arr[normalizedArgsSymbol] = true;\x0d\n  return arr;\x0d\n}\x0d\n\x0d\n\x0d\n// Called when creating new Socket\x2C or when re-using a closed Socket\x0d\nfunction initSocketHandle(self) {\x0d\n  self._undestroy();\x0d\n  self._sockname = null;\x0d\n\x0d\n  // Handle creation may be deferred to bind() or connect() time.\x0d\n  if (self._handle) {\x0d\n    self._handle[owner_symbol] = self;\x0d\n    self._handle.onread = onStreamRead;\x0d\n    self[async_id_symbol] = getNewAsyncId(self._handle);\x0d\n\x0d\n    let userBuf = self[kBuffer];\x0d\n    if (userBuf) {\x0d\n      const bufGen = self[kBufferGen];\x0d\n      if (bufGen !== null) {\x0d\n        userBuf = bufGen();\x0d\n        if (!isUint8Array(userBuf))\x0d\n          return;\x0d\n        self[kBuffer] = userBuf;\x0d\n      }\x0d\n      self._handle.useUserBuffer(userBuf);\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nconst kBytesRead = Symbol('kBytesRead');\x0d\nconst kBytesWritten = Symbol('kBytesWritten');\x0d\nconst kSetNoDelay = Symbol('kSetNoDelay');\x0d\n\x0d\nfunction Socket(options) {\x0d\n  if (!(this instanceof Socket)) return new Socket(options);\x0d\n  if (options?.objectMode) {\x0d\n    throw new ERR_INVALID_ARG_VALUE(\x0d\n      'options.objectMode'\x2C\x0d\n      options.objectMode\x2C\x0d\n      'is not supported'\x0d\n    );\x0d\n  } else if (options?.readableObjectMode || options?.writableObjectMode) {\x0d\n    throw new ERR_INVALID_ARG_VALUE(\x0d\n      `options.${\x0d\n        options.readableObjectMode ? 'readableObjectMode' : 'writableObjectMode'\x0d\n      }`\x2C\x0d\n      options.readableObjectMode || options.writableObjectMode\x2C\x0d\n      'is not supported'\x0d\n    );\x0d\n  }\x0d\n\x0d\n  this.connecting = false;\x0d\n  // Problem with this is that users can supply their own handle\x2C that may not\x0d\n  // have _handle.getAsyncId(). In this case an[async_id_symbol] should\x0d\n  // probably be supplied by async_hooks.\x0d\n  this[async_id_symbol] = -1;\x0d\n  this._hadError = false;\x0d\n  this[kHandle] = null;\x0d\n  this._parent = null;\x0d\n  this._host = null;\x0d\n  this[kSetNoDelay] = false;\x0d\n  this[kLastWriteQueueSize] = 0;\x0d\n  this[kTimeout] = null;\x0d\n  this[kBuffer] = null;\x0d\n  this[kBufferCb] = null;\x0d\n  this[kBufferGen] = null;\x0d\n\x0d\n  if (typeof options === 'number')\x0d\n    options = { fd: options }; // Legacy interface.\x0d\n  else\x0d\n    options = { ...options };\x0d\n\x0d\n  // Default to *not* allowing half open sockets.\x0d\n  options.allowHalfOpen = Boolean(options.allowHalfOpen);\x0d\n  // For backwards compat do not emit close on destroy.\x0d\n  options.emitClose = false;\x0d\n  options.autoDestroy = true;\x0d\n  // Handle strings directly.\x0d\n  options.decodeStrings = false;\x0d\n  stream.Duplex.call(this\x2C options);\x0d\n\x0d\n  if (options.handle) {\x0d\n    this._handle = options.handle; // private\x0d\n    this[async_id_symbol] = getNewAsyncId(this._handle);\x0d\n  } else if (options.fd !== undefined) {\x0d\n    const { fd } = options;\x0d\n    let err;\x0d\n\x0d\n    // createHandle will throw ERR_INVALID_FD_TYPE if `fd` is not\x0d\n    // a valid `PIPE` or `TCP` descriptor\x0d\n    this._handle = createHandle(fd\x2C false);\x0d\n\x0d\n    err = this._handle.open(fd);\x0d\n\x0d\n    // While difficult to fabricate\x2C in some architectures\x0d\n    // `open` may return an error code for valid file descriptors\x0d\n    // which cannot be opened. This is difficult to test as most\x0d\n    // un-openable fds will throw on `createHandle`\x0d\n    if (err)\x0d\n      throw errnoException(err\x2C 'open');\x0d\n\x0d\n    this[async_id_symbol] = this._handle.getAsyncId();\x0d\n\x0d\n    if ((fd === 1 || fd === 2) &&\x0d\n        (this._handle instanceof Pipe) && isWindows) {\x0d\n      // Make stdout and stderr blocking on Windows\x0d\n      err = this._handle.setBlocking(true);\x0d\n      if (err)\x0d\n        throw errnoException(err\x2C 'setBlocking');\x0d\n\x0d\n      this._writev = null;\x0d\n      this._write = makeSyncWrite(fd);\x0d\n      // makeSyncWrite adjusts this value like the original handle would\x2C so\x0d\n      // we need to let it do that by turning it into a writable\x2C own\x0d\n      // property.\x0d\n      ObjectDefineProperty(this._handle\x2C 'bytesWritten'\x2C {\x0d\n        value: 0\x2C writable: true\x0d\n      });\x0d\n    }\x0d\n  }\x0d\n\x0d\n  const onread = options.onread;\x0d\n  if (onread !== null && typeof onread === 'object' &&\x0d\n      (isUint8Array(onread.buffer) || typeof onread.buffer === 'function') &&\x0d\n      typeof onread.callback === 'function') {\x0d\n    if (typeof onread.buffer === 'function') {\x0d\n      this[kBuffer] = true;\x0d\n      this[kBufferGen] = onread.buffer;\x0d\n    } else {\x0d\n      this[kBuffer] = onread.buffer;\x0d\n    }\x0d\n    this[kBufferCb] = onread.callback;\x0d\n  }\x0d\n\x0d\n  // Shut down the socket when we're finished with it.\x0d\n  this.on('end'\x2C onReadableStreamEnd);\x0d\n\x0d\n  initSocketHandle(this);\x0d\n\x0d\n  this._pendingData = null;\x0d\n  this._pendingEncoding = '';\x0d\n\x0d\n  // If we have a handle\x2C then start the flow of data into the\x0d\n  // buffer.  if not\x2C then this will happen when we connect\x0d\n  if (this._handle && options.readable !== false) {\x0d\n    if (options.pauseOnCreate) {\x0d\n      // Stop the handle from reading and pause the stream\x0d\n      this._handle.reading = false;\x0d\n      this._handle.readStop();\x0d\n      this.readableFlowing = false;\x0d\n    } else if (!options.manualStart) {\x0d\n      this.read(0);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // Reserve properties\x0d\n  this.server = null;\x0d\n  this._server = null;\x0d\n\x0d\n  // Used after `.destroy()`\x0d\n  this[kBytesRead] = 0;\x0d\n  this[kBytesWritten] = 0;\x0d\n}\x0d\nObjectSetPrototypeOf(Socket.prototype\x2C stream.Duplex.prototype);\x0d\nObjectSetPrototypeOf(Socket\x2C stream.Duplex);\x0d\n\x0d\n// Refresh existing timeouts.\x0d\nSocket.prototype._unrefTimer = function _unrefTimer() {\x0d\n  for (let s = this; s !== null; s = s._parent) {\x0d\n    if (s[kTimeout])\x0d\n      s[kTimeout].refresh();\x0d\n  }\x0d\n};\x0d\n\x0d\n\x0d\n// The user has called .end()\x2C and all the bytes have been\x0d\n// sent out to the other side.\x0d\nSocket.prototype._final = function(cb) {\x0d\n  // If still connecting - defer handling `_final` until 'connect' will happen\x0d\n  if (this.pending) {\x0d\n    debug('_final: not yet connected');\x0d\n    return this.once('connect'\x2C () => this._final(cb));\x0d\n  }\x0d\n\x0d\n  if (!this._handle)\x0d\n    return cb();\x0d\n\x0d\n  debug('_final: not ended\x2C call shutdown()');\x0d\n\x0d\n  const req = new ShutdownWrap();\x0d\n  req.oncomplete = afterShutdown;\x0d\n  req.handle = this._handle;\x0d\n  req.callback = cb;\x0d\n  const err = this._handle.shutdown(req);\x0d\n\x0d\n  if (err === 1 || err === UV_ENOTCONN)  // synchronous finish\x0d\n    return cb();\x0d\n  else if (err !== 0)\x0d\n    return cb(errnoException(err\x2C 'shutdown'));\x0d\n};\x0d\n\x0d\nfunction afterShutdown() {\x0d\n  const self = this.handle[owner_symbol];\x0d\n\x0d\n  debug('afterShutdown destroyed=%j'\x2C self.destroyed\x2C\x0d\n        self._readableState);\x0d\n\x0d\n  this.callback();\x0d\n}\x0d\n\x0d\n// Provide a better error message when we call end() as a result\x0d\n// of the other side sending a FIN.  The standard 'write after end'\x0d\n// is overly vague\x2C and makes it seem like the user's code is to blame.\x0d\nfunction writeAfterFIN(chunk\x2C encoding\x2C cb) {\x0d\n  if (!this.writableEnded) {\x0d\n    return stream.Duplex.prototype.write.call(this\x2C chunk\x2C encoding\x2C cb);\x0d\n  }\x0d\n\x0d\n  if (typeof encoding === 'function') {\x0d\n    cb = encoding;\x0d\n    encoding = null;\x0d\n  }\x0d\n\x0d\n  // eslint-disable-next-line no-restricted-syntax\x0d\n  const er = new Error('This socket has been ended by the other party');\x0d\n  er.code = 'EPIPE';\x0d\n  if (typeof cb === 'function') {\x0d\n    defaultTriggerAsyncIdScope(this[async_id_symbol]\x2C process.nextTick\x2C cb\x2C er);\x0d\n  }\x0d\n  this.destroy(er);\x0d\n\x0d\n  return false;\x0d\n}\x0d\n\x0d\nSocket.prototype.setTimeout = setStreamTimeout;\x0d\n\x0d\n\x0d\nSocket.prototype._onTimeout = function() {\x0d\n  const handle = this._handle;\x0d\n  const lastWriteQueueSize = this[kLastWriteQueueSize];\x0d\n  if (lastWriteQueueSize > 0 && handle) {\x0d\n    // `lastWriteQueueSize !== writeQueueSize` means there is\x0d\n    // an active write in progress\x2C so we suppress the timeout.\x0d\n    const { writeQueueSize } = handle;\x0d\n    if (lastWriteQueueSize !== writeQueueSize) {\x0d\n      this[kLastWriteQueueSize] = writeQueueSize;\x0d\n      this._unrefTimer();\x0d\n      return;\x0d\n    }\x0d\n  }\x0d\n  debug('_onTimeout');\x0d\n  this.emit('timeout');\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.setNoDelay = function(enable) {\x0d\n  if (!this._handle) {\x0d\n    this.once('connect'\x2C\x0d\n              enable ? this.setNoDelay : () => this.setNoDelay(enable));\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  // Backwards compatibility: assume true when `enable` is omitted\x0d\n  const newValue = enable === undefined ? true : !!enable;\x0d\n  if (this._handle.setNoDelay && newValue !== this[kSetNoDelay]) {\x0d\n    this[kSetNoDelay] = newValue;\x0d\n    this._handle.setNoDelay(newValue);\x0d\n  }\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.setKeepAlive = function(setting\x2C msecs) {\x0d\n  if (!this._handle) {\x0d\n    this.once('connect'\x2C () => this.setKeepAlive(setting\x2C msecs));\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  if (this._handle.setKeepAlive)\x0d\n    this._handle.setKeepAlive(setting\x2C ~~(msecs / 1000));\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.address = function() {\x0d\n  return this._getsockname();\x0d\n};\x0d\n\x0d\n\x0d\nObjectDefineProperty(Socket.prototype\x2C '_connecting'\x2C {\x0d\n  get: function() {\x0d\n    return this.connecting;\x0d\n  }\x0d\n});\x0d\n\x0d\nObjectDefineProperty(Socket.prototype\x2C 'pending'\x2C {\x0d\n  get() {\x0d\n    return !this._handle || this.connecting;\x0d\n  }\x2C\x0d\n  configurable: true\x0d\n});\x0d\n\x0d\n\x0d\nObjectDefineProperty(Socket.prototype\x2C 'readyState'\x2C {\x0d\n  get: function() {\x0d\n    if (this.connecting) {\x0d\n      return 'opening';\x0d\n    } else if (this.readable && this.writable) {\x0d\n      return 'open';\x0d\n    } else if (this.readable && !this.writable) {\x0d\n      return 'readOnly';\x0d\n    } else if (!this.readable && this.writable) {\x0d\n      return 'writeOnly';\x0d\n    }\x0d\n    return 'closed';\x0d\n  }\x0d\n});\x0d\n\x0d\n\x0d\nObjectDefineProperty(Socket.prototype\x2C 'bufferSize'\x2C {\x0d\n  get: function() {\x0d\n    if (this._handle) {\x0d\n      return this.writableLength;\x0d\n    }\x0d\n  }\x0d\n});\x0d\n\x0d\nObjectDefineProperty(Socket.prototype\x2C kUpdateTimer\x2C {\x0d\n  get: function() {\x0d\n    return this._unrefTimer;\x0d\n  }\x0d\n});\x0d\n\x0d\n\x0d\nfunction tryReadStart(socket) {\x0d\n  // Not already reading\x2C start the flow\x0d\n  debug('Socket._handle.readStart');\x0d\n  socket._handle.reading = true;\x0d\n  const err = socket._handle.readStart();\x0d\n  if (err)\x0d\n    socket.destroy(errnoException(err\x2C 'read'));\x0d\n}\x0d\n\x0d\n// Just call handle.readStart until we have enough in the buffer\x0d\nSocket.prototype._read = function(n) {\x0d\n  debug('_read');\x0d\n\x0d\n  if (this.connecting || !this._handle) {\x0d\n    debug('_read wait for connection');\x0d\n    this.once('connect'\x2C () => this._read(n));\x0d\n  } else if (!this._handle.reading) {\x0d\n    tryReadStart(this);\x0d\n  }\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.end = function(data\x2C encoding\x2C callback) {\x0d\n  stream.Duplex.prototype.end.call(this\x2C\x0d\n                                   data\x2C encoding\x2C callback);\x0d\n  DTRACE_NET_STREAM_END(this);\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.pause = function() {\x0d\n  if (this[kBuffer] && !this.connecting && this._handle &&\x0d\n      this._handle.reading) {\x0d\n    this._handle.reading = false;\x0d\n    if (!this.destroyed) {\x0d\n      const err = this._handle.readStop();\x0d\n      if (err)\x0d\n        this.destroy(errnoException(err\x2C 'read'));\x0d\n    }\x0d\n  }\x0d\n  return stream.Duplex.prototype.pause.call(this);\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.resume = function() {\x0d\n  if (this[kBuffer] && !this.connecting && this._handle &&\x0d\n      !this._handle.reading) {\x0d\n    tryReadStart(this);\x0d\n  }\x0d\n  return stream.Duplex.prototype.resume.call(this);\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.read = function(n) {\x0d\n  if (this[kBuffer] && !this.connecting && this._handle &&\x0d\n      !this._handle.reading) {\x0d\n    tryReadStart(this);\x0d\n  }\x0d\n  return stream.Duplex.prototype.read.call(this\x2C n);\x0d\n};\x0d\n\x0d\n\x0d\n// Called when the 'end' event is emitted.\x0d\nfunction onReadableStreamEnd() {\x0d\n  if (!this.allowHalfOpen) {\x0d\n    this.write = writeAfterFIN;\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nSocket.prototype.destroySoon = function() {\x0d\n  if (this.writable)\x0d\n    this.end();\x0d\n\x0d\n  if (this.writableFinished)\x0d\n    this.destroy();\x0d\n  else\x0d\n    this.once('finish'\x2C this.destroy);\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype._destroy = function(exception\x2C cb) {\x0d\n  debug('destroy');\x0d\n\x0d\n  this.connecting = false;\x0d\n\x0d\n  for (let s = this; s !== null; s = s._parent) {\x0d\n    clearTimeout(s[kTimeout]);\x0d\n  }\x0d\n\x0d\n  debug('close');\x0d\n  if (this._handle) {\x0d\n    if (this !== process.stderr)\x0d\n      debug('close handle');\x0d\n    const isException = exception ? true : false;\x0d\n    // `bytesRead` and `kBytesWritten` should be accessible after `.destroy()`\x0d\n    this[kBytesRead] = this._handle.bytesRead;\x0d\n    this[kBytesWritten] = this._handle.bytesWritten;\x0d\n\x0d\n    this._handle.close(() => {\x0d\n      debug('emit close');\x0d\n      this.emit('close'\x2C isException);\x0d\n    });\x0d\n    this._handle.onread = noop;\x0d\n    this._handle = null;\x0d\n    this._sockname = null;\x0d\n    cb(exception);\x0d\n  } else {\x0d\n    cb(exception);\x0d\n    process.nextTick(emitCloseNT\x2C this);\x0d\n  }\x0d\n\x0d\n  if (this._server) {\x0d\n    debug('has server');\x0d\n    this._server._connections--;\x0d\n    if (this._server._emitCloseIfDrained) {\x0d\n      this._server._emitCloseIfDrained();\x0d\n    }\x0d\n  }\x0d\n};\x0d\n\x0d\nSocket.prototype._getpeername = function() {\x0d\n  if (!this._handle || !this._handle.getpeername) {\x0d\n    return this._peername || {};\x0d\n  } else if (!this._peername) {\x0d\n    this._peername = {};\x0d\n    // FIXME(bnoordhuis) Throw when the return value is not 0?\x0d\n    this._handle.getpeername(this._peername);\x0d\n  }\x0d\n  return this._peername;\x0d\n};\x0d\n\x0d\nfunction protoGetter(name\x2C callback) {\x0d\n  ObjectDefineProperty(Socket.prototype\x2C name\x2C {\x0d\n    configurable: false\x2C\x0d\n    enumerable: true\x2C\x0d\n    get: callback\x0d\n  });\x0d\n}\x0d\n\x0d\nprotoGetter('bytesRead'\x2C function bytesRead() {\x0d\n  return this._handle ? this._handle.bytesRead : this[kBytesRead];\x0d\n});\x0d\n\x0d\nprotoGetter('remoteAddress'\x2C function remoteAddress() {\x0d\n  return this._getpeername().address;\x0d\n});\x0d\n\x0d\nprotoGetter('remoteFamily'\x2C function remoteFamily() {\x0d\n  return this._getpeername().family;\x0d\n});\x0d\n\x0d\nprotoGetter('remotePort'\x2C function remotePort() {\x0d\n  return this._getpeername().port;\x0d\n});\x0d\n\x0d\n\x0d\nSocket.prototype._getsockname = function() {\x0d\n  if (!this._handle || !this._handle.getsockname) {\x0d\n    return {};\x0d\n  } else if (!this._sockname) {\x0d\n    this._sockname = {};\x0d\n    // FIXME(bnoordhuis) Throw when the return value is not 0?\x0d\n    this._handle.getsockname(this._sockname);\x0d\n  }\x0d\n  return this._sockname;\x0d\n};\x0d\n\x0d\n\x0d\nprotoGetter('localAddress'\x2C function localAddress() {\x0d\n  return this._getsockname().address;\x0d\n});\x0d\n\x0d\n\x0d\nprotoGetter('localPort'\x2C function localPort() {\x0d\n  return this._getsockname().port;\x0d\n});\x0d\n\x0d\n\x0d\nSocket.prototype[kAfterAsyncWrite] = function() {\x0d\n  this[kLastWriteQueueSize] = 0;\x0d\n};\x0d\n\x0d\nSocket.prototype._writeGeneric = function(writev\x2C data\x2C encoding\x2C cb) {\x0d\n  // If we are still connecting\x2C then buffer this for later.\x0d\n  // The Writable logic will buffer up any more writes while\x0d\n  // waiting for this one to be done.\x0d\n  if (this.connecting) {\x0d\n    this._pendingData = data;\x0d\n    this._pendingEncoding = encoding;\x0d\n    this.once('connect'\x2C function connect() {\x0d\n      this._writeGeneric(writev\x2C data\x2C encoding\x2C cb);\x0d\n    });\x0d\n    return;\x0d\n  }\x0d\n  this._pendingData = null;\x0d\n  this._pendingEncoding = '';\x0d\n\x0d\n  if (!this._handle) {\x0d\n    cb(new ERR_SOCKET_CLOSED());\x0d\n    return false;\x0d\n  }\x0d\n\x0d\n  this._unrefTimer();\x0d\n\x0d\n  let req;\x0d\n  if (writev)\x0d\n    req = writevGeneric(this\x2C data\x2C cb);\x0d\n  else\x0d\n    req = writeGeneric(this\x2C data\x2C encoding\x2C cb);\x0d\n  if (req.async)\x0d\n    this[kLastWriteQueueSize] = req.bytes;\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype._writev = function(chunks\x2C cb) {\x0d\n  this._writeGeneric(true\x2C chunks\x2C ''\x2C cb);\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype._write = function(data\x2C encoding\x2C cb) {\x0d\n  this._writeGeneric(false\x2C data\x2C encoding\x2C cb);\x0d\n};\x0d\n\x0d\n\x0d\n// Legacy alias. Having this is probably being overly cautious\x2C but it doesn't\x0d\n// really hurt anyone either. This can probably be removed safely if desired.\x0d\nprotoGetter('_bytesDispatched'\x2C function _bytesDispatched() {\x0d\n  return this._handle ? this._handle.bytesWritten : this[kBytesWritten];\x0d\n});\x0d\n\x0d\nprotoGetter('bytesWritten'\x2C function bytesWritten() {\x0d\n  let bytes = this._bytesDispatched;\x0d\n  const data = this._pendingData;\x0d\n  const encoding = this._pendingEncoding;\x0d\n  const writableBuffer = this.writableBuffer;\x0d\n\x0d\n  if (!writableBuffer)\x0d\n    return undefined;\x0d\n\x0d\n  for (const el of writableBuffer) {\x0d\n    bytes += el.chunk instanceof Buffer ?\x0d\n      el.chunk.length :\x0d\n      Buffer.byteLength(el.chunk\x2C el.encoding);\x0d\n  }\x0d\n\x0d\n  if (ArrayIsArray(data)) {\x0d\n    // Was a writev\x2C iterate over chunks to get total length\x0d\n    for (let i = 0; i < data.length; i++) {\x0d\n      const chunk = data[i];\x0d\n\x0d\n      if (data.allBuffers || chunk instanceof Buffer)\x0d\n        bytes += chunk.length;\x0d\n      else\x0d\n        bytes += Buffer.byteLength(chunk.chunk\x2C chunk.encoding);\x0d\n    }\x0d\n  } else if (data) {\x0d\n    // Writes are either a string or a Buffer.\x0d\n    if (typeof data !== 'string')\x0d\n      bytes += data.length;\x0d\n    else\x0d\n      bytes += Buffer.byteLength(data\x2C encoding);\x0d\n  }\x0d\n\x0d\n  return bytes;\x0d\n});\x0d\n\x0d\n\x0d\nfunction checkBindError(err\x2C port\x2C handle) {\x0d\n  // EADDRINUSE may not be reported until we call listen() or connect().\x0d\n  // To complicate matters\x2C a failed bind() followed by listen() or connect()\x0d\n  // will implicitly bind to a random port. Ergo\x2C check that the socket is\x0d\n  // bound to the expected port before calling listen() or connect().\x0d\n  //\x0d\n  // FIXME(bnoordhuis) Doesn't work for pipe handles\x2C they don't have a\x0d\n  // getsockname() method. Non-issue for now\x2C the cluster module doesn't\x0d\n  // really support pipes anyway.\x0d\n  if (err === 0 && port > 0 && handle.getsockname) {\x0d\n    const out = {};\x0d\n    err = handle.getsockname(out);\x0d\n    if (err === 0 && port !== out.port) {\x0d\n      debug(`checkBindError\x2C bound to ${out.port} instead of ${port}`);\x0d\n      err = UV_EADDRINUSE;\x0d\n    }\x0d\n  }\x0d\n  return err;\x0d\n}\x0d\n\x0d\n\x0d\nfunction internalConnect(\x0d\n  self\x2C address\x2C port\x2C addressType\x2C localAddress\x2C localPort\x2C flags) {\x0d\n  // TODO return promise from Socket.prototype.connect which\x0d\n  // wraps _connectReq.\x0d\n\x0d\n  assert(self.connecting);\x0d\n\x0d\n  let err;\x0d\n\x0d\n  if (localAddress || localPort) {\x0d\n    if (addressType === 4) {\x0d\n      localAddress = localAddress || DEFAULT_IPV4_ADDR;\x0d\n      err = self._handle.bind(localAddress\x2C localPort);\x0d\n    } else { // addressType === 6\x0d\n      localAddress = localAddress || DEFAULT_IPV6_ADDR;\x0d\n      err = self._handle.bind6(localAddress\x2C localPort\x2C flags);\x0d\n    }\x0d\n    debug('binding to localAddress: %s and localPort: %d (addressType: %d)'\x2C\x0d\n          localAddress\x2C localPort\x2C addressType);\x0d\n\x0d\n    err = checkBindError(err\x2C localPort\x2C self._handle);\x0d\n    if (err) {\x0d\n      const ex = exceptionWithHostPort(err\x2C 'bind'\x2C localAddress\x2C localPort);\x0d\n      self.destroy(ex);\x0d\n      return;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (addressType === 6 || addressType === 4) {\x0d\n    const req = new TCPConnectWrap();\x0d\n    req.oncomplete = afterConnect;\x0d\n    req.address = address;\x0d\n    req.port = port;\x0d\n    req.localAddress = localAddress;\x0d\n    req.localPort = localPort;\x0d\n\x0d\n    if (addressType === 4)\x0d\n      err = self._handle.connect(req\x2C address\x2C port);\x0d\n    else\x0d\n      err = self._handle.connect6(req\x2C address\x2C port);\x0d\n  } else {\x0d\n    const req = new PipeConnectWrap();\x0d\n    req.address = address;\x0d\n    req.oncomplete = afterConnect;\x0d\n\x0d\n    err = self._handle.connect(req\x2C address\x2C afterConnect);\x0d\n  }\x0d\n\x0d\n  if (err) {\x0d\n    const sockname = self._getsockname();\x0d\n    let details;\x0d\n\x0d\n    if (sockname) {\x0d\n      details = sockname.address + ':' + sockname.port;\x0d\n    }\x0d\n\x0d\n    const ex = exceptionWithHostPort(err\x2C 'connect'\x2C address\x2C port\x2C details);\x0d\n    self.destroy(ex);\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nSocket.prototype.connect = function(...args) {\x0d\n  let normalized;\x0d\n  // If passed an array\x2C it's treated as an array of arguments that have\x0d\n  // already been normalized (so we don't normalize more than once). This has\x0d\n  // been solved before in https://github.com/nodejs/node/pull/12342\x2C but was\x0d\n  // reverted as it had unintended side effects.\x0d\n  if (ArrayIsArray(args[0]) && args[0][normalizedArgsSymbol]) {\x0d\n    normalized = args[0];\x0d\n  } else {\x0d\n    normalized = normalizeArgs(args);\x0d\n  }\x0d\n  const options = normalized[0];\x0d\n  const cb = normalized[1];\x0d\n\x0d\n  // options.port === null will be checked later.\x0d\n  if (options.port === undefined && options.path == null)\x0d\n    throw new ERR_MISSING_ARGS(['options'\x2C 'port'\x2C 'path']);\x0d\n\x0d\n  if (this.write !== Socket.prototype.write)\x0d\n    this.write = Socket.prototype.write;\x0d\n\x0d\n  if (this.destroyed) {\x0d\n    this._handle = null;\x0d\n    this._peername = null;\x0d\n    this._sockname = null;\x0d\n  }\x0d\n\x0d\n  const { path } = options;\x0d\n  const pipe = !!path;\x0d\n  debug('pipe'\x2C pipe\x2C path);\x0d\n\x0d\n  if (!this._handle) {\x0d\n    this._handle = pipe ?\x0d\n      new Pipe(PipeConstants.SOCKET) :\x0d\n      new TCP(TCPConstants.SOCKET);\x0d\n    initSocketHandle(this);\x0d\n  }\x0d\n\x0d\n  if (cb !== null) {\x0d\n    this.once('connect'\x2C cb);\x0d\n  }\x0d\n\x0d\n  this._unrefTimer();\x0d\n\x0d\n  this.connecting = true;\x0d\n\x0d\n  if (pipe) {\x0d\n    validateString(path\x2C 'options.path');\x0d\n    defaultTriggerAsyncIdScope(\x0d\n      this[async_id_symbol]\x2C internalConnect\x2C this\x2C path\x0d\n    );\x0d\n  } else {\x0d\n    lookupAndConnect(this\x2C options);\x0d\n  }\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nfunction lookupAndConnect(self\x2C options) {\x0d\n  const { localAddress\x2C localPort } = options;\x0d\n  const host = options.host || 'localhost';\x0d\n  let { port } = options;\x0d\n\x0d\n  if (localAddress && !isIP(localAddress)) {\x0d\n    throw new ERR_INVALID_IP_ADDRESS(localAddress);\x0d\n  }\x0d\n\x0d\n  if (localPort) {\x0d\n    validateNumber(localPort\x2C 'options.localPort');\x0d\n  }\x0d\n\x0d\n  if (typeof port !== 'undefined') {\x0d\n    if (typeof port !== 'number' && typeof port !== 'string') {\x0d\n      throw new ERR_INVALID_ARG_TYPE('options.port'\x2C\x0d\n                                     ['number'\x2C 'string']\x2C port);\x0d\n    }\x0d\n    validatePort(port);\x0d\n  }\x0d\n  port |= 0;\x0d\n\x0d\n  // If host is an IP\x2C skip performing a lookup\x0d\n  const addressType = isIP(host);\x0d\n  if (addressType) {\x0d\n    defaultTriggerAsyncIdScope(self[async_id_symbol]\x2C process.nextTick\x2C () => {\x0d\n      if (self.connecting)\x0d\n        defaultTriggerAsyncIdScope(\x0d\n          self[async_id_symbol]\x2C\x0d\n          internalConnect\x2C\x0d\n          self\x2C host\x2C port\x2C addressType\x2C localAddress\x2C localPort\x0d\n        );\x0d\n    });\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  if (options.lookup !== undefined)\x0d\n    validateFunction(options.lookup\x2C 'options.lookup');\x0d\n\x0d\n  if (dns === undefined) dns = require('dns');\x0d\n  const dnsopts = {\x0d\n    family: options.family\x2C\x0d\n    hints: options.hints || 0\x0d\n  };\x0d\n\x0d\n  if (!isWindows &&\x0d\n      dnsopts.family !== 4 &&\x0d\n      dnsopts.family !== 6 &&\x0d\n      dnsopts.hints === 0) {\x0d\n    dnsopts.hints = dns.ADDRCONFIG;\x0d\n  }\x0d\n\x0d\n  debug('connect: find host'\x2C host);\x0d\n  debug('connect: dns options'\x2C dnsopts);\x0d\n  self._host = host;\x0d\n  const lookup = options.lookup || dns.lookup;\x0d\n  defaultTriggerAsyncIdScope(self[async_id_symbol]\x2C function() {\x0d\n    lookup(host\x2C dnsopts\x2C function emitLookup(err\x2C ip\x2C addressType) {\x0d\n      self.emit('lookup'\x2C err\x2C ip\x2C addressType\x2C host);\x0d\n\x0d\n      // It's possible we were destroyed while looking this up.\x0d\n      // XXX it would be great if we could cancel the promise returned by\x0d\n      // the look up.\x0d\n      if (!self.connecting) return;\x0d\n\x0d\n      if (err) {\x0d\n        // net.createConnection() creates a net.Socket object and immediately\x0d\n        // calls net.Socket.connect() on it (that's us). There are no event\x0d\n        // listeners registered yet so defer the error event to the next tick.\x0d\n        process.nextTick(connectErrorNT\x2C self\x2C err);\x0d\n      } else if (!isIP(ip)) {\x0d\n        err = new ERR_INVALID_IP_ADDRESS(ip);\x0d\n        process.nextTick(connectErrorNT\x2C self\x2C err);\x0d\n      } else if (addressType !== 4 && addressType !== 6) {\x0d\n        err = new ERR_INVALID_ADDRESS_FAMILY(addressType\x2C\x0d\n                                             options.host\x2C\x0d\n                                             options.port);\x0d\n        process.nextTick(connectErrorNT\x2C self\x2C err);\x0d\n      } else {\x0d\n        self._unrefTimer();\x0d\n        defaultTriggerAsyncIdScope(\x0d\n          self[async_id_symbol]\x2C\x0d\n          internalConnect\x2C\x0d\n          self\x2C ip\x2C port\x2C addressType\x2C localAddress\x2C localPort\x0d\n        );\x0d\n      }\x0d\n    });\x0d\n  });\x0d\n}\x0d\n\x0d\n\x0d\nfunction connectErrorNT(self\x2C err) {\x0d\n  self.destroy(err);\x0d\n}\x0d\n\x0d\n\x0d\nSocket.prototype.ref = function() {\x0d\n  if (!this._handle) {\x0d\n    this.once('connect'\x2C this.ref);\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  if (typeof this._handle.ref === 'function') {\x0d\n    this._handle.ref();\x0d\n  }\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.unref = function() {\x0d\n  if (!this._handle) {\x0d\n    this.once('connect'\x2C this.unref);\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  if (typeof this._handle.unref === 'function') {\x0d\n    this._handle.unref();\x0d\n  }\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nfunction afterConnect(status\x2C handle\x2C req\x2C readable\x2C writable) {\x0d\n  const self = handle[owner_symbol];\x0d\n\x0d\n  // Callback may come after call to destroy\x0d\n  if (self.destroyed) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  debug('afterConnect');\x0d\n\x0d\n  assert(self.connecting);\x0d\n  self.connecting = false;\x0d\n  self._sockname = null;\x0d\n\x0d\n  if (status === 0) {\x0d\n    if (self.readable && !readable) {\x0d\n      self.push(null);\x0d\n      self.read();\x0d\n    }\x0d\n    if (self.writable && !writable) {\x0d\n      self.end();\x0d\n    }\x0d\n    self._unrefTimer();\x0d\n\x0d\n    self.emit('connect');\x0d\n    self.emit('ready');\x0d\n\x0d\n    // Start the first read\x2C or get an immediate EOF.\x0d\n    // this doesn't actually consume any bytes\x2C because len=0.\x0d\n    if (readable && !self.isPaused())\x0d\n      self.read(0);\x0d\n\x0d\n  } else {\x0d\n    self.connecting = false;\x0d\n    let details;\x0d\n    if (req.localAddress && req.localPort) {\x0d\n      details = req.localAddress + ':' + req.localPort;\x0d\n    }\x0d\n    const ex = exceptionWithHostPort(status\x2C\x0d\n                                     'connect'\x2C\x0d\n                                     req.address\x2C\x0d\n                                     req.port\x2C\x0d\n                                     details);\x0d\n    if (details) {\x0d\n      ex.localAddress = req.localAddress;\x0d\n      ex.localPort = req.localPort;\x0d\n    }\x0d\n    self.destroy(ex);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction addAbortSignalOption(self\x2C options) {\x0d\n  if (options?.signal === undefined) {\x0d\n    return;\x0d\n  }\x0d\n  validateAbortSignal(options.signal\x2C 'options.signal');\x0d\n  const { signal } = options;\x0d\n  const onAborted = () => {\x0d\n    self.close();\x0d\n  };\x0d\n  if (signal.aborted) {\x0d\n    process.nextTick(onAborted);\x0d\n  } else {\x0d\n    signal.addEventListener('abort'\x2C onAborted);\x0d\n    self.once('close'\x2C () => signal.removeEventListener('abort'\x2C onAborted));\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction Server(options\x2C connectionListener) {\x0d\n  if (!(this instanceof Server))\x0d\n    return new Server(options\x2C connectionListener);\x0d\n\x0d\n  EventEmitter.call(this);\x0d\n\x0d\n  if (typeof options === 'function') {\x0d\n    connectionListener = options;\x0d\n    options = {};\x0d\n    this.on('connection'\x2C connectionListener);\x0d\n  } else if (options == null || typeof options === 'object') {\x0d\n    options = { ...options };\x0d\n\x0d\n    if (typeof connectionListener === 'function') {\x0d\n      this.on('connection'\x2C connectionListener);\x0d\n    }\x0d\n  } else {\x0d\n    throw new ERR_INVALID_ARG_TYPE('options'\x2C 'Object'\x2C options);\x0d\n  }\x0d\n\x0d\n  this._connections = 0;\x0d\n\x0d\n  this[async_id_symbol] = -1;\x0d\n  this._handle = null;\x0d\n  this._usingWorkers = false;\x0d\n  this._workers = [];\x0d\n  this._unref = false;\x0d\n\x0d\n  this.allowHalfOpen = options.allowHalfOpen || false;\x0d\n  this.pauseOnConnect = !!options.pauseOnConnect;\x0d\n}\x0d\nObjectSetPrototypeOf(Server.prototype\x2C EventEmitter.prototype);\x0d\nObjectSetPrototypeOf(Server\x2C EventEmitter);\x0d\n\x0d\n\x0d\nfunction toNumber(x) { return (x = Number(x)) >= 0 ? x : false; }\x0d\n\x0d\n// Returns handle if it can be created\x2C or error code if it can't\x0d\nfunction createServerHandle(address\x2C port\x2C addressType\x2C fd\x2C flags) {\x0d\n  let err = 0;\x0d\n  // Assign handle in listen\x2C and clean up if bind or listen fails\x0d\n  let handle;\x0d\n\x0d\n  let isTCP = false;\x0d\n  if (typeof fd === 'number' && fd >= 0) {\x0d\n    try {\x0d\n      handle = createHandle(fd\x2C true);\x0d\n    } catch (e) {\x0d\n      // Not a fd we can listen on.  This will trigger an error.\x0d\n      debug('listen invalid fd=%d:'\x2C fd\x2C e.message);\x0d\n      return UV_EINVAL;\x0d\n    }\x0d\n\x0d\n    err = handle.open(fd);\x0d\n    if (err)\x0d\n      return err;\x0d\n\x0d\n    assert(!address && !port);\x0d\n  } else if (port === -1 && addressType === -1) {\x0d\n    handle = new Pipe(PipeConstants.SERVER);\x0d\n    if (isWindows) {\x0d\n      const instances = NumberParseInt(process.env.NODE_PENDING_PIPE_INSTANCES);\x0d\n      if (!NumberIsNaN(instances)) {\x0d\n        handle.setPendingInstances(instances);\x0d\n      }\x0d\n    }\x0d\n  } else {\x0d\n    handle = new TCP(TCPConstants.SERVER);\x0d\n    isTCP = true;\x0d\n  }\x0d\n\x0d\n  if (address || port || isTCP) {\x0d\n    debug('bind to'\x2C address || 'any');\x0d\n    if (!address) {\x0d\n      // Try binding to ipv6 first\x0d\n      err = handle.bind6(DEFAULT_IPV6_ADDR\x2C port\x2C flags);\x0d\n      if (err) {\x0d\n        handle.close();\x0d\n        // Fallback to ipv4\x0d\n        return createServerHandle(DEFAULT_IPV4_ADDR\x2C port);\x0d\n      }\x0d\n    } else if (addressType === 6) {\x0d\n      err = handle.bind6(address\x2C port\x2C flags);\x0d\n    } else {\x0d\n      err = handle.bind(address\x2C port);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (err) {\x0d\n    handle.close();\x0d\n    return err;\x0d\n  }\x0d\n\x0d\n  return handle;\x0d\n}\x0d\n\x0d\nfunction setupListenHandle(address\x2C port\x2C addressType\x2C backlog\x2C fd\x2C flags) {\x0d\n  debug('setupListenHandle'\x2C address\x2C port\x2C addressType\x2C backlog\x2C fd);\x0d\n\x0d\n  // If there is not yet a handle\x2C we need to create one and bind.\x0d\n  // In the case of a server sent via IPC\x2C we don't need to do this.\x0d\n  if (this._handle) {\x0d\n    debug('setupListenHandle: have a handle already');\x0d\n  } else {\x0d\n    debug('setupListenHandle: create a handle');\x0d\n\x0d\n    let rval = null;\x0d\n\x0d\n    // Try to bind to the unspecified IPv6 address\x2C see if IPv6 is available\x0d\n    if (!address && typeof fd !== 'number') {\x0d\n      rval = createServerHandle(DEFAULT_IPV6_ADDR\x2C port\x2C 6\x2C fd\x2C flags);\x0d\n\x0d\n      if (typeof rval === 'number') {\x0d\n        rval = null;\x0d\n        address = DEFAULT_IPV4_ADDR;\x0d\n        addressType = 4;\x0d\n      } else {\x0d\n        address = DEFAULT_IPV6_ADDR;\x0d\n        addressType = 6;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (rval === null)\x0d\n      rval = createServerHandle(address\x2C port\x2C addressType\x2C fd\x2C flags);\x0d\n\x0d\n    if (typeof rval === 'number') {\x0d\n      const error = uvExceptionWithHostPort(rval\x2C 'listen'\x2C address\x2C port);\x0d\n      process.nextTick(emitErrorNT\x2C this\x2C error);\x0d\n      return;\x0d\n    }\x0d\n    this._handle = rval;\x0d\n  }\x0d\n\x0d\n  this[async_id_symbol] = getNewAsyncId(this._handle);\x0d\n  this._handle.onconnection = onconnection;\x0d\n  this._handle[owner_symbol] = this;\x0d\n\x0d\n  // Use a backlog of 512 entries. We pass 511 to the listen() call because\x0d\n  // the kernel does: backlogsize = roundup_pow_of_two(backlogsize + 1);\x0d\n  // which will thus give us a backlog of 512 entries.\x0d\n  const err = this._handle.listen(backlog || 511);\x0d\n\x0d\n  if (err) {\x0d\n    const ex = uvExceptionWithHostPort(err\x2C 'listen'\x2C address\x2C port);\x0d\n    this._handle.close();\x0d\n    this._handle = null;\x0d\n    defaultTriggerAsyncIdScope(this[async_id_symbol]\x2C\x0d\n                               process.nextTick\x2C\x0d\n                               emitErrorNT\x2C\x0d\n                               this\x2C\x0d\n                               ex);\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  // Generate connection key\x2C this should be unique to the connection\x0d\n  this._connectionKey = addressType + ':' + address + ':' + port;\x0d\n\x0d\n  // Unref the handle if the server was unref'ed prior to listening\x0d\n  if (this._unref)\x0d\n    this.unref();\x0d\n\x0d\n  defaultTriggerAsyncIdScope(this[async_id_symbol]\x2C\x0d\n                             process.nextTick\x2C\x0d\n                             emitListeningNT\x2C\x0d\n                             this);\x0d\n}\x0d\n\x0d\nServer.prototype._listen2 = setupListenHandle;  // legacy alias\x0d\n\x0d\nfunction emitErrorNT(self\x2C err) {\x0d\n  self.emit('error'\x2C err);\x0d\n}\x0d\n\x0d\n\x0d\nfunction emitListeningNT(self) {\x0d\n  // Ensure handle hasn't closed\x0d\n  if (self._handle)\x0d\n    self.emit('listening');\x0d\n}\x0d\n\x0d\n\x0d\nfunction listenInCluster(server\x2C address\x2C port\x2C addressType\x2C\x0d\n                         backlog\x2C fd\x2C exclusive\x2C flags) {\x0d\n  exclusive = !!exclusive;\x0d\n\x0d\n  if (cluster === undefined) cluster = require('cluster');\x0d\n\x0d\n  if (cluster.isPrimary || exclusive) {\x0d\n    // Will create a new handle\x0d\n    // _listen2 sets up the listened handle\x2C it is still named like this\x0d\n    // to avoid breaking code that wraps this method\x0d\n    server._listen2(address\x2C port\x2C addressType\x2C backlog\x2C fd\x2C flags);\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  const serverQuery = {\x0d\n    address: address\x2C\x0d\n    port: port\x2C\x0d\n    addressType: addressType\x2C\x0d\n    fd: fd\x2C\x0d\n    flags\x2C\x0d\n  };\x0d\n\x0d\n  // Get the primary's server handle\x2C and listen on it\x0d\n  cluster._getServer(server\x2C serverQuery\x2C listenOnPrimaryHandle);\x0d\n\x0d\n  function listenOnPrimaryHandle(err\x2C handle) {\x0d\n    err = checkBindError(err\x2C port\x2C handle);\x0d\n\x0d\n    if (err) {\x0d\n      const ex = exceptionWithHostPort(err\x2C 'bind'\x2C address\x2C port);\x0d\n      return server.emit('error'\x2C ex);\x0d\n    }\x0d\n\x0d\n    // Reuse primary's server handle\x0d\n    server._handle = handle;\x0d\n    // _listen2 sets up the listened handle\x2C it is still named like this\x0d\n    // to avoid breaking code that wraps this method\x0d\n    server._listen2(address\x2C port\x2C addressType\x2C backlog\x2C fd\x2C flags);\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nServer.prototype.listen = function(...args) {\x0d\n  const normalized = normalizeArgs(args);\x0d\n  let options = normalized[0];\x0d\n  const cb = normalized[1];\x0d\n\x0d\n  if (this._handle) {\x0d\n    throw new ERR_SERVER_ALREADY_LISTEN();\x0d\n  }\x0d\n\x0d\n  if (cb !== null) {\x0d\n    this.once('listening'\x2C cb);\x0d\n  }\x0d\n  const backlogFromArgs =\x0d\n    // (handle\x2C backlog) or (path\x2C backlog) or (port\x2C backlog)\x0d\n    toNumber(args.length > 1 && args[1]) ||\x0d\n    toNumber(args.length > 2 && args[2]);  // (port\x2C host\x2C backlog)\x0d\n\x0d\n  options = options._handle || options.handle || options;\x0d\n  const flags = getFlags(options.ipv6Only);\x0d\n  // (handle[\x2C backlog][\x2C cb]) where handle is an object with a handle\x0d\n  if (options instanceof TCP) {\x0d\n    this._handle = options;\x0d\n    this[async_id_symbol] = this._handle.getAsyncId();\x0d\n    listenInCluster(this\x2C null\x2C -1\x2C -1\x2C backlogFromArgs);\x0d\n    return this;\x0d\n  }\x0d\n  addAbortSignalOption(this\x2C options);\x0d\n  // (handle[\x2C backlog][\x2C cb]) where handle is an object with a fd\x0d\n  if (typeof options.fd === 'number' && options.fd >= 0) {\x0d\n    listenInCluster(this\x2C null\x2C null\x2C null\x2C backlogFromArgs\x2C options.fd);\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  // ([port][\x2C host][\x2C backlog][\x2C cb]) where port is omitted\x2C\x0d\n  // that is\x2C listen()\x2C listen(null)\x2C listen(cb)\x2C or listen(null\x2C cb)\x0d\n  // or (options[\x2C cb]) where options.port is explicitly set as undefined or\x0d\n  // null\x2C bind to an arbitrary unused port\x0d\n  if (args.length === 0 || typeof args[0] === 'function' ||\x0d\n      (typeof options.port === 'undefined' && 'port' in options) ||\x0d\n      options.port === null) {\x0d\n    options.port = 0;\x0d\n  }\x0d\n  // ([port][\x2C host][\x2C backlog][\x2C cb]) where port is specified\x0d\n  // or (options[\x2C cb]) where options.port is specified\x0d\n  // or if options.port is normalized as 0 before\x0d\n  let backlog;\x0d\n  if (typeof options.port === 'number' || typeof options.port === 'string') {\x0d\n    validatePort(options.port\x2C 'options.port');\x0d\n    backlog = options.backlog || backlogFromArgs;\x0d\n    // start TCP server listening on host:port\x0d\n    if (options.host) {\x0d\n      lookupAndListen(this\x2C options.port | 0\x2C options.host\x2C backlog\x2C\x0d\n                      options.exclusive\x2C flags);\x0d\n    } else { // Undefined host\x2C listens on unspecified address\x0d\n      // Default addressType 4 will be used to search for primary server\x0d\n      listenInCluster(this\x2C null\x2C options.port | 0\x2C 4\x2C\x0d\n                      backlog\x2C undefined\x2C options.exclusive);\x0d\n    }\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  // (path[\x2C backlog][\x2C cb]) or (options[\x2C cb])\x0d\n  // where path or options.path is a UNIX domain socket or Windows pipe\x0d\n  if (options.path && isPipeName(options.path)) {\x0d\n    const pipeName = this._pipeName = options.path;\x0d\n    backlog = options.backlog || backlogFromArgs;\x0d\n    listenInCluster(this\x2C pipeName\x2C -1\x2C -1\x2C\x0d\n                    backlog\x2C undefined\x2C options.exclusive);\x0d\n\x0d\n    if (!this._handle) {\x0d\n      // Failed and an error shall be emitted in the next tick.\x0d\n      // Therefore\x2C we directly return.\x0d\n      return this;\x0d\n    }\x0d\n\x0d\n    let mode = 0;\x0d\n    if (options.readableAll === true)\x0d\n      mode |= PipeConstants.UV_READABLE;\x0d\n    if (options.writableAll === true)\x0d\n      mode |= PipeConstants.UV_WRITABLE;\x0d\n    if (mode !== 0) {\x0d\n      const err = this._handle.fchmod(mode);\x0d\n      if (err) {\x0d\n        this._handle.close();\x0d\n        this._handle = null;\x0d\n        throw errnoException(err\x2C 'uv_pipe_chmod');\x0d\n      }\x0d\n    }\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  if (!(('port' in options) || ('path' in options))) {\x0d\n    throw new ERR_INVALID_ARG_VALUE('options'\x2C options\x2C\x0d\n                                    'must have the property "port" or "path"');\x0d\n  }\x0d\n\x0d\n  throw new ERR_INVALID_ARG_VALUE('options'\x2C options);\x0d\n};\x0d\n\x0d\nfunction lookupAndListen(self\x2C port\x2C address\x2C backlog\x2C exclusive\x2C flags) {\x0d\n  if (dns === undefined) dns = require('dns');\x0d\n  dns.lookup(address\x2C function doListen(err\x2C ip\x2C addressType) {\x0d\n    if (err) {\x0d\n      self.emit('error'\x2C err);\x0d\n    } else {\x0d\n      addressType = ip ? addressType : 4;\x0d\n      listenInCluster(self\x2C ip\x2C port\x2C addressType\x2C\x0d\n                      backlog\x2C undefined\x2C exclusive\x2C flags);\x0d\n    }\x0d\n  });\x0d\n}\x0d\n\x0d\nObjectDefineProperty(Server.prototype\x2C 'listening'\x2C {\x0d\n  get: function() {\x0d\n    return !!this._handle;\x0d\n  }\x2C\x0d\n  configurable: true\x2C\x0d\n  enumerable: true\x0d\n});\x0d\n\x0d\nServer.prototype.address = function() {\x0d\n  if (this._handle && this._handle.getsockname) {\x0d\n    const out = {};\x0d\n    const err = this._handle.getsockname(out);\x0d\n    if (err) {\x0d\n      throw errnoException(err\x2C 'address');\x0d\n    }\x0d\n    return out;\x0d\n  } else if (this._pipeName) {\x0d\n    return this._pipeName;\x0d\n  }\x0d\n  return null;\x0d\n};\x0d\n\x0d\nfunction onconnection(err\x2C clientHandle) {\x0d\n  const handle = this;\x0d\n  const self = handle[owner_symbol];\x0d\n\x0d\n  debug('onconnection');\x0d\n\x0d\n  if (err) {\x0d\n    self.emit('error'\x2C errnoException(err\x2C 'accept'));\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  if (self.maxConnections && self._connections >= self.maxConnections) {\x0d\n    clientHandle.close();\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  const socket = new Socket({\x0d\n    handle: clientHandle\x2C\x0d\n    allowHalfOpen: self.allowHalfOpen\x2C\x0d\n    pauseOnCreate: self.pauseOnConnect\x2C\x0d\n    readable: true\x2C\x0d\n    writable: true\x0d\n  });\x0d\n\x0d\n  self._connections++;\x0d\n  socket.server = self;\x0d\n  socket._server = self;\x0d\n\x0d\n  DTRACE_NET_SERVER_CONNECTION(socket);\x0d\n  self.emit('connection'\x2C socket);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Gets the number of concurrent connections on the server\x0d\n * @param {Function} cb\x0d\n * @returns {Server}\x0d\n */\x0d\n\x0d\nServer.prototype.getConnections = function(cb) {\x0d\n  const self = this;\x0d\n\x0d\n  function end(err\x2C connections) {\x0d\n    defaultTriggerAsyncIdScope(self[async_id_symbol]\x2C\x0d\n                               process.nextTick\x2C\x0d\n                               cb\x2C\x0d\n                               err\x2C\x0d\n                               connections);\x0d\n  }\x0d\n\x0d\n  if (!this._usingWorkers) {\x0d\n    end(null\x2C this._connections);\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  // Poll workers\x0d\n  let left = this._workers.length;\x0d\n  let total = this._connections;\x0d\n\x0d\n  function oncount(err\x2C count) {\x0d\n    if (err) {\x0d\n      left = -1;\x0d\n      return end(err);\x0d\n    }\x0d\n\x0d\n    total += count;\x0d\n    if (--left === 0) return end(null\x2C total);\x0d\n  }\x0d\n\x0d\n  for (let n = 0; n < this._workers.length; n++) {\x0d\n    this._workers[n].getConnections(oncount);\x0d\n  }\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nServer.prototype.close = function(cb) {\x0d\n  if (typeof cb === 'function') {\x0d\n    if (!this._handle) {\x0d\n      this.once('close'\x2C function close() {\x0d\n        cb(new ERR_SERVER_NOT_RUNNING());\x0d\n      });\x0d\n    } else {\x0d\n      this.once('close'\x2C cb);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (this._handle) {\x0d\n    this._handle.close();\x0d\n    this._handle = null;\x0d\n  }\x0d\n\x0d\n  if (this._usingWorkers) {\x0d\n    let left = this._workers.length;\x0d\n    const onWorkerClose = () => {\x0d\n      if (--left !== 0) return;\x0d\n\x0d\n      this._connections = 0;\x0d\n      this._emitCloseIfDrained();\x0d\n    };\x0d\n\x0d\n    // Increment connections to be sure that\x2C even if all sockets will be closed\x0d\n    // during polling of workers\x2C `close` event will be emitted only once.\x0d\n    this._connections++;\x0d\n\x0d\n    // Poll workers\x0d\n    for (let n = 0; n < this._workers.length; n++)\x0d\n      this._workers[n].close(onWorkerClose);\x0d\n  } else {\x0d\n    this._emitCloseIfDrained();\x0d\n  }\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\nServer.prototype._emitCloseIfDrained = function() {\x0d\n  debug('SERVER _emitCloseIfDrained');\x0d\n\x0d\n  if (this._handle || this._connections) {\x0d\n    debug('SERVER handle? %j   connections? %d'\x2C\x0d\n          !!this._handle\x2C this._connections);\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  defaultTriggerAsyncIdScope(this[async_id_symbol]\x2C\x0d\n                             process.nextTick\x2C\x0d\n                             emitCloseNT\x2C\x0d\n                             this);\x0d\n};\x0d\n\x0d\n\x0d\nfunction emitCloseNT(self) {\x0d\n  debug('SERVER: emit close');\x0d\n  self.emit('close');\x0d\n}\x0d\n\x0d\n\x0d\nServer.prototype[EventEmitter.captureRejectionSymbol] = function(\x0d\n  err\x2C event\x2C sock) {\x0d\n\x0d\n  switch (event) {\x0d\n    case 'connection':\x0d\n      sock.destroy(err);\x0d\n      break;\x0d\n    default:\x0d\n      this.emit('error'\x2C err);\x0d\n  }\x0d\n};\x0d\n\x0d\n\x0d\n// Legacy alias on the C++ wrapper object. This is not public API\x2C so we may\x0d\n// want to runtime-deprecate it at some point. There's no hurry\x2C though.\x0d\nObjectDefineProperty(TCP.prototype\x2C 'owner'\x2C {\x0d\n  get() { return this[owner_symbol]; }\x2C\x0d\n  set(v) { return this[owner_symbol] = v; }\x0d\n});\x0d\n\x0d\nObjectDefineProperty(Socket.prototype\x2C '_handle'\x2C {\x0d\n  get() { return this[kHandle]; }\x2C\x0d\n  set(v) { return this[kHandle] = v; }\x0d\n});\x0d\n\x0d\nServer.prototype._setupWorker = function(socketList) {\x0d\n  this._usingWorkers = true;\x0d\n  this._workers.push(socketList);\x0d\n  socketList.once('exit'\x2C (socketList) => {\x0d\n    const index = ArrayPrototypeIndexOf(this._workers\x2C socketList);\x0d\n    this._workers.splice(index\x2C 1);\x0d\n  });\x0d\n};\x0d\n\x0d\nServer.prototype.ref = function() {\x0d\n  this._unref = false;\x0d\n\x0d\n  if (this._handle)\x0d\n    this._handle.ref();\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\nServer.prototype.unref = function() {\x0d\n  this._unref = true;\x0d\n\x0d\n  if (this._handle)\x0d\n    this._handle.unref();\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\nlet _setSimultaneousAccepts;\x0d\nlet warnSimultaneousAccepts = true;\x0d\n\x0d\nif (isWindows) {\x0d\n  let simultaneousAccepts;\x0d\n\x0d\n  _setSimultaneousAccepts = function(handle) {\x0d\n    if (warnSimultaneousAccepts) {\x0d\n      process.emitWarning(\x0d\n        'net._setSimultaneousAccepts() is deprecated and will be removed.'\x2C\x0d\n        'DeprecationWarning'\x2C 'DEP0121');\x0d\n      warnSimultaneousAccepts = false;\x0d\n    }\x0d\n    if (handle === undefined) {\x0d\n      return;\x0d\n    }\x0d\n\x0d\n    if (simultaneousAccepts === undefined) {\x0d\n      simultaneousAccepts = (process.env.NODE_MANY_ACCEPTS &&\x0d\n                             process.env.NODE_MANY_ACCEPTS !== '0');\x0d\n    }\x0d\n\x0d\n    if (handle._simultaneousAccepts !== simultaneousAccepts) {\x0d\n      handle.setSimultaneousAccepts(!!simultaneousAccepts);\x0d\n      handle._simultaneousAccepts = simultaneousAccepts;\x0d\n    }\x0d\n  };\x0d\n} else {\x0d\n  _setSimultaneousAccepts = function() {\x0d\n    if (warnSimultaneousAccepts) {\x0d\n      process.emitWarning(\x0d\n        'net._setSimultaneousAccepts() is deprecated and will be removed.'\x2C\x0d\n        'DeprecationWarning'\x2C 'DEP0121');\x0d\n      warnSimultaneousAccepts = false;\x0d\n    }\x0d\n  };\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  _createServerHandle: createServerHandle\x2C\x0d\n  _normalizeArgs: normalizeArgs\x2C\x0d\n  _setSimultaneousAccepts\x2C\x0d\n  get BlockList() {\x0d\n    BlockList ??= require('internal/blocklist').BlockList;\x0d\n    return BlockList;\x0d\n  }\x2C\x0d\n  get SocketAddress() {\x0d\n    SocketAddress ??= require('internal/socketaddress').SocketAddress;\x0d\n    return SocketAddress;\x0d\n  }\x2C\x0d\n  connect\x2C\x0d\n  createConnection: connect\x2C\x0d\n  createServer\x2C\x0d\n  isIP: isIP\x2C\x0d\n  isIPv4: isIPv4\x2C\x0d\n  isIPv6: isIPv6\x2C\x0d\n  Server\x2C\x0d\n  Socket\x2C\x0d\n  Stream: Socket\x2C // Legacy naming\x0d\n};\x0d\n
code-source-info,0x2e2fa6a6156,101,0,49462,C0O0C4O49462,,
code-creation,Function,10,326039,0x2e2fa6a9026,2513, node:net:1:1,0x2e2fa6a60d0,~
code-source-info,0x2e2fa6a9026,101,0,49462,C0O0C411O1183C417O1200C423O1226C429O1238C435O1248C441O1259C447O1275C453O1294C459O1319C464O1344C469O1394C475O1394C479O1394C481O1429C487O1429C491O1429C493O1461C499O1461C504O1494C518O1495C524O1461C526O1628C532O1628C537O1553C543O1562C548O1573C553O1584C559O1609C565O1669C571O1669C575O1669C577O1758C580O1758C585O1709C591O1727C597O1741C603O1803C609O1803C614O1792C620O1851C623O1851C628O1831C634O1902C637O1902C642O1885C648O2002C651O2002C656O1946C662O1954C668O1984C674O2102C677O2102C682O2043C688O2052C694O2083C700O2238C706O2238C711O2144C717O2159C728O2201C734O2218C740O2448C746O2448C751O2283C757O2301C763O2318C769O2335C774O2356C780O2368C785O2385C790O2406C796O2418C802O2432C808O2844C814O2844C819O2844C824O2515C830O2548C836O2575C842O2603C848O2629C854O2658C860O2690C866O2719C872O2743C878O2770C884O2789C890O2815C896O2898C902O2898C907O2881C913O3061C919O3061C924O2942C930O2966C936O2987C942O3005C948O3024C954O3041C960O3122C963O3122C967O3122C969O3224C975O3224C980O3164C986O3197C992O3307C993O3307C995O3321C996O3321C998O3331C999O3331C1001O3347C1002O3347C1004O3390C1010O3390C1015O3373C1021O3431C1027O3431C1032O3418C1038O3488C1040O3488C1042O3526C1044O3526C1046O3553C1049O3561C1056O3570C1059O3553C1061O3599C1065O3599C1067O7199C1070O7199C1074O7199C1076O7244C1079O7244C1083O7244C1085O7290C1088O7290C1092O7290C1094O11513C1097O11541C1105O11559C1110O11566C1115O11513C1120O11579C1126O11615C1131O11579C1136O11658C1139O11665C1148O11687C1152O11923C1155O11930C1164O11947C1168O13550C1171O13557C1178O13578C1182O13603C1185O13610C1194O13631C1198O14159C1201O14166C1210O14187C1214O14660C1217O14667C1226O14690C1230O14956C1233O14963C1242O14981C1246O15036C1252O15064C1266O15100C1274O15036C1279O15155C1285O15183C1299O15210C1307O15155C1312O15302C1318O15330C1332O15365C1340O15302C1345O15702C1351O15730C1365O15765C1373O15702C1378O15858C1384O15886C1389O15897C1395O15921C1406O15858C1411O16302C1414O16309C1423O16325C1427O16572C1430O16579C1439O16593C1443O16794C1446O16801C1455O16817C1459O17171C1462O17178C1471O17195C1475O17394C1478O17401C1487O17416C1491O17770C1494O17777C1503O17799C1507O17963C1510O17970C1519O17989C1523O18988C1526O18995C1535O19018C1539O19498C1547O19498C1552O19622C1560O19622C1565O19725C1573O19725C1578O19825C1586O19825C1596O19921C1599O19928C1608O19951C1616O20245C1624O20245C1634O20348C1642O20348C1652O20442C1655O20449C1660O20459C1664O20477C1672O20533C1675O20540C1684O20564C1692O21363C1695O21370C1704O21388C1712O21467C1715O21474C1724O21491C1732O21742C1740O21742C1750O21886C1758O21886C1768O25478C1771O25485C1780O25503C1788O30058C1791O30065C1800O30079C1808O30286C1811O30293C1820O30309C1828O33157C1831O33185C1843O33209C1852O33157C1862O33222C1868O33222C1878O37343C1881O37350C1892O37369C1900O38873C1903O38880C1916O38897C1924O42966C1930O42994C1951O43028C1963O42966C1973O43126C1976O43133C1989O43151C1997O44273C2000O44280C2013O44305C2021O45102C2024O45109C2037O45125C2045O46036C2048O46043C2061O46073C2069O46573C2072O46580C2084O46603C2097O46627C2105O46960C2111O46985C2132O47010C2144O47051C2156O46960C2166O47101C2172O47129C2189O47156C2201O47192C2213O47101C2223O47237C2226O47244C2239O47267C2247O47522C2250O47529C2263O47543C2271O47655C2274O47662C2287O47678C2295O47795C2297O47851C2298O47851C2300O47860C2311O47884C2312O47884C2314O47910C2323O48640C2328O48922C2338O48965C2348O49004C2358O49022C2368O49290C2378O49320C2388O49332C2398O49355C2408O49372C2418O49391C2428O49402C2438O49413C2448O49432C2503O48937C2512O49461,,
tick,0x7ffe67f1fab3,326535,1,0x7ff72402d620,3,0x7ff7249760e0,0x3979d3bfecc,0x3979d3bf1bd,0x2e2fa6a193c,0x3979d3bfeed,0x3979d3bf1bd,0x2e2fa69aafa,0x3979d3bfeed,0x3979d3bf1bd,0x2e2fa698e9a,0x2e2fa6854de,0x3979d3bef45
code-creation,Eval,10,327079,0x2e2fa6ae7f6,5, node:internal/net:1:1,0x2e2fa6ae630,~
script-source,102,node:internal/net,'use strict';\x0d\n\x0d\nconst {\x0d\n  RegExp\x2C\x0d\n  RegExpPrototypeTest\x2C\x0d\n  Symbol\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst Buffer = require('buffer').Buffer;\x0d\nconst { writeBuffer } = internalBinding('fs');\x0d\nconst errors = require('internal/errors');\x0d\n\x0d\n// IPv4 Segment\x0d\nconst v4Seg = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\x0d\nconst v4Str = `(${v4Seg}[.]){3}${v4Seg}`;\x0d\nconst IPv4Reg = new RegExp(`^${v4Str}$`);\x0d\n\x0d\n// IPv6 Segment\x0d\nconst v6Seg = '(?:[0-9a-fA-F]{1\x2C4})';\x0d\nconst IPv6Reg = new RegExp('^(' +\x0d\n  `(?:${v6Seg}:){7}(?:${v6Seg}|:)|` +\x0d\n  `(?:${v6Seg}:){6}(?:${v4Str}|:${v6Seg}|:)|` +\x0d\n  `(?:${v6Seg}:){5}(?::${v4Str}|(:${v6Seg}){1\x2C2}|:)|` +\x0d\n  `(?:${v6Seg}:){4}(?:(:${v6Seg}){0\x2C1}:${v4Str}|(:${v6Seg}){1\x2C3}|:)|` +\x0d\n  `(?:${v6Seg}:){3}(?:(:${v6Seg}){0\x2C2}:${v4Str}|(:${v6Seg}){1\x2C4}|:)|` +\x0d\n  `(?:${v6Seg}:){2}(?:(:${v6Seg}){0\x2C3}:${v4Str}|(:${v6Seg}){1\x2C5}|:)|` +\x0d\n  `(?:${v6Seg}:){1}(?:(:${v6Seg}){0\x2C4}:${v4Str}|(:${v6Seg}){1\x2C6}|:)|` +\x0d\n  `(?::((?::${v6Seg}){0\x2C5}:${v4Str}|(?::${v6Seg}){1\x2C7}|:))` +\x0d\n')(%[0-9a-zA-Z-.:]{1\x2C})?$');\x0d\n\x0d\nfunction isIPv4(s) {\x0d\n  return RegExpPrototypeTest(IPv4Reg\x2C s);\x0d\n}\x0d\n\x0d\nfunction isIPv6(s) {\x0d\n  return RegExpPrototypeTest(IPv6Reg\x2C s);\x0d\n}\x0d\n\x0d\nfunction isIP(s) {\x0d\n  if (isIPv4(s)) return 4;\x0d\n  if (isIPv6(s)) return 6;\x0d\n  return 0;\x0d\n}\x0d\n\x0d\nfunction makeSyncWrite(fd) {\x0d\n  return function(chunk\x2C enc\x2C cb) {\x0d\n    if (enc !== 'buffer')\x0d\n      chunk = Buffer.from(chunk\x2C enc);\x0d\n\x0d\n    this._handle.bytesWritten += chunk.length;\x0d\n\x0d\n    const ctx = {};\x0d\n    writeBuffer(fd\x2C chunk\x2C 0\x2C chunk.length\x2C null\x2C undefined\x2C ctx);\x0d\n    if (ctx.errno !== undefined) {\x0d\n      const ex = errors.uvException(ctx);\x0d\n      ex.errno = ctx.errno;\x0d\n      return cb(ex);\x0d\n    }\x0d\n    cb();\x0d\n  };\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  isIP\x2C\x0d\n  isIPv4\x2C\x0d\n  isIPv6\x2C\x0d\n  makeSyncWrite\x2C\x0d\n  normalizedArgsSymbol: Symbol('normalizedArgs')\x0d\n};\x0d\n
code-source-info,0x2e2fa6ae7f6,102,0,1818,C0O0C4O1818,,
code-creation,Function,10,327283,0x2e2fa6aebe6,617, node:internal/net:1:1,0x2e2fa6ae770,~
code-source-info,0x2e2fa6aebe6,102,0,1818,C0O0C45O28C50O39C56O63C61O107C64O107C69O124C73O107C75O158C78O158C83O142C89O197C92O197C96O197C98O259C101O330C106O334C119O349C124O375C129O390C142O375C147O375C149O435C152O476C160O503C173O519C183O492C192O542C205O558C218O568C228O531C237O591C250O608C263O619C273O580C282O648C295O666C308O681C321O692C331O637C340O721C353O739C366O754C379O765C389O710C398O794C411O812C424O827C437O838C447O783C456O867C469O885C482O900C495O911C505O856C514O946C527O961C540O974C550O929C556O992C562O476C567O476C569O1695C576O1717C582O1726C588O1737C594O1748C601O1788C611O1710C616O1817,,
code-creation,Eval,10,327760,0x2e2fa6b053e,5, node:internal/dtrace:1:1,0x2e2fa6b03f8,~
script-source,103,node:internal/dtrace,'use strict';\x0d\n\x0d\nconst config = internalBinding('config');\x0d\n\x0d\nconst {\x0d\n  DTRACE_HTTP_CLIENT_REQUEST = () => {}\x2C\x0d\n  DTRACE_HTTP_CLIENT_RESPONSE = () => {}\x2C\x0d\n  DTRACE_HTTP_SERVER_REQUEST = () => {}\x2C\x0d\n  DTRACE_HTTP_SERVER_RESPONSE = () => {}\x2C\x0d\n  DTRACE_NET_SERVER_CONNECTION = () => {}\x2C\x0d\n  DTRACE_NET_STREAM_END = () => {}\x0d\n} = (config.hasDtrace ? internalBinding('dtrace') : {});\x0d\n\x0d\nmodule.exports = {\x0d\n  DTRACE_HTTP_CLIENT_REQUEST\x2C\x0d\n  DTRACE_HTTP_CLIENT_RESPONSE\x2C\x0d\n  DTRACE_HTTP_SERVER_REQUEST\x2C\x0d\n  DTRACE_HTTP_SERVER_RESPONSE\x2C\x0d\n  DTRACE_NET_SERVER_CONNECTION\x2C\x0d\n  DTRACE_NET_STREAM_END\x0d\n};\x0d\n
code-source-info,0x2e2fa6b053e,103,0,589,C0O0C4O589,,
code-creation,Function,10,327865,0x2e2fa6b0a16,140, node:internal/dtrace:1:1,0x2e2fa6b04b8,~
code-source-info,0x2e2fa6b0a16,103,0,589,C0O32C3O32C8O333C17O345C25O73C36O115C47O158C58O200C69O243C80O287C91O381C98O403C104O434C110O466C116O497C122O529C128O562C134O396C139O588,,
code-creation,LazyCompile,10,328244,0x2e2fa6b19ae,34,protoGetter node:net:718:21,0x2e2fa6a6598,~
code-source-info,0x2e2fa6b19ae,101,19348,19494,C0O19370C8O19398C13O19409C20O19476C27O19370C33O19493,,
code-creation,Eval,10,329394,0x2e2fa6b6cbe,5, node:dgram:1:1,0x2e2fa6b6758,~
script-source,104,node:dgram,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  Array\x2C\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  FunctionPrototypeBind\x2C\x0d\n  FunctionPrototypeCall\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  ReflectApply\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst errors = require('internal/errors');\x0d\nconst {\x0d\n  kStateSymbol\x2C\x0d\n  _createSocketHandle\x2C\x0d\n  newHandle\x2C\x0d\n} = require('internal/dgram');\x0d\nconst { guessHandleType } = internalBinding('util');\x0d\nconst {\x0d\n  ERR_BUFFER_OUT_OF_BOUNDS\x2C\x0d\n  ERR_INVALID_ARG_TYPE\x2C\x0d\n  ERR_MISSING_ARGS\x2C\x0d\n  ERR_SOCKET_ALREADY_BOUND\x2C\x0d\n  ERR_SOCKET_BAD_BUFFER_SIZE\x2C\x0d\n  ERR_SOCKET_BUFFER_SIZE\x2C\x0d\n  ERR_SOCKET_DGRAM_IS_CONNECTED\x2C\x0d\n  ERR_SOCKET_DGRAM_NOT_CONNECTED\x2C\x0d\n  ERR_SOCKET_DGRAM_NOT_RUNNING\x2C\x0d\n  ERR_INVALID_FD_TYPE\x0d\n} = errors.codes;\x0d\nconst {\x0d\n  isInt32\x2C\x0d\n  validateAbortSignal\x2C\x0d\n  validateString\x2C\x0d\n  validateNumber\x2C\x0d\n  validatePort\x2C\x0d\n} = require('internal/validators');\x0d\nconst { Buffer } = require('buffer');\x0d\nconst { deprecate } = require('internal/util');\x0d\nconst { isArrayBufferView } = require('internal/util/types');\x0d\nconst EventEmitter = require('events');\x0d\nconst {\x0d\n  defaultTriggerAsyncIdScope\x2C\x0d\n  symbols: { async_id_symbol\x2C owner_symbol }\x0d\n} = require('internal/async_hooks');\x0d\nconst { UV_UDP_REUSEADDR } = internalBinding('constants').os;\x0d\n\x0d\nconst {\x0d\n  constants: { UV_UDP_IPV6ONLY }\x2C\x0d\n  UDP\x2C\x0d\n  SendWrap\x0d\n} = internalBinding('udp_wrap');\x0d\n\x0d\nconst BIND_STATE_UNBOUND = 0;\x0d\nconst BIND_STATE_BINDING = 1;\x0d\nconst BIND_STATE_BOUND = 2;\x0d\n\x0d\nconst CONNECT_STATE_DISCONNECTED = 0;\x0d\nconst CONNECT_STATE_CONNECTING = 1;\x0d\nconst CONNECT_STATE_CONNECTED = 2;\x0d\n\x0d\nconst RECV_BUFFER = true;\x0d\nconst SEND_BUFFER = false;\x0d\n\x0d\n// Lazily loaded\x0d\nlet _cluster = null;\x0d\nfunction lazyLoadCluster() {\x0d\n  if (!_cluster) _cluster = require('cluster');\x0d\n  return _cluster;\x0d\n}\x0d\n\x0d\nconst errnoException = errors.errnoException;\x0d\nconst exceptionWithHostPort = errors.exceptionWithHostPort;\x0d\n\x0d\n\x0d\nfunction Socket(type\x2C listener) {\x0d\n  FunctionPrototypeCall(EventEmitter\x2C this);\x0d\n  let lookup;\x0d\n  let recvBufferSize;\x0d\n  let sendBufferSize;\x0d\n\x0d\n  let options;\x0d\n  if (type !== null && typeof type === 'object') {\x0d\n    options = type;\x0d\n    type = options.type;\x0d\n    lookup = options.lookup;\x0d\n    recvBufferSize = options.recvBufferSize;\x0d\n    sendBufferSize = options.sendBufferSize;\x0d\n  }\x0d\n\x0d\n  const handle = newHandle(type\x2C lookup);\x0d\n  handle[owner_symbol] = this;\x0d\n\x0d\n  this[async_id_symbol] = handle.getAsyncId();\x0d\n  this.type = type;\x0d\n\x0d\n  if (typeof listener === 'function')\x0d\n    this.on('message'\x2C listener);\x0d\n\x0d\n  this[kStateSymbol] = {\x0d\n    handle\x2C\x0d\n    receiving: false\x2C\x0d\n    bindState: BIND_STATE_UNBOUND\x2C\x0d\n    connectState: CONNECT_STATE_DISCONNECTED\x2C\x0d\n    queue: undefined\x2C\x0d\n    reuseAddr: options && options.reuseAddr\x2C // Use UV_UDP_REUSEADDR if true.\x0d\n    ipv6Only: options && options.ipv6Only\x2C\x0d\n    recvBufferSize\x2C\x0d\n    sendBufferSize\x0d\n  };\x0d\n\x0d\n  if (options?.signal !== undefined) {\x0d\n    const { signal } = options;\x0d\n    validateAbortSignal(signal\x2C 'options.signal');\x0d\n    const onAborted = () => {\x0d\n      this.close();\x0d\n    };\x0d\n    if (signal.aborted) {\x0d\n      onAborted();\x0d\n    } else {\x0d\n      signal.addEventListener('abort'\x2C onAborted);\x0d\n      this.once('close'\x2C () => signal.removeEventListener('abort'\x2C onAborted));\x0d\n    }\x0d\n  }\x0d\n}\x0d\nObjectSetPrototypeOf(Socket.prototype\x2C EventEmitter.prototype);\x0d\nObjectSetPrototypeOf(Socket\x2C EventEmitter);\x0d\n\x0d\n\x0d\nfunction createSocket(type\x2C listener) {\x0d\n  return new Socket(type\x2C listener);\x0d\n}\x0d\n\x0d\n\x0d\nfunction startListening(socket) {\x0d\n  const state = socket[kStateSymbol];\x0d\n\x0d\n  state.handle.onmessage = onMessage;\x0d\n  // Todo: handle errors\x0d\n  state.handle.recvStart();\x0d\n  state.receiving = true;\x0d\n  state.bindState = BIND_STATE_BOUND;\x0d\n\x0d\n  if (state.recvBufferSize)\x0d\n    bufferSize(socket\x2C state.recvBufferSize\x2C RECV_BUFFER);\x0d\n\x0d\n  if (state.sendBufferSize)\x0d\n    bufferSize(socket\x2C state.sendBufferSize\x2C SEND_BUFFER);\x0d\n\x0d\n  socket.emit('listening');\x0d\n}\x0d\n\x0d\nfunction replaceHandle(self\x2C newHandle) {\x0d\n  const state = self[kStateSymbol];\x0d\n  const oldHandle = state.handle;\x0d\n\x0d\n  // Set up the handle that we got from primary.\x0d\n  newHandle.lookup = oldHandle.lookup;\x0d\n  newHandle.bind = oldHandle.bind;\x0d\n  newHandle.send = oldHandle.send;\x0d\n  newHandle[owner_symbol] = self;\x0d\n\x0d\n  // Replace the existing handle by the handle we got from primary.\x0d\n  oldHandle.close();\x0d\n  state.handle = newHandle;\x0d\n}\x0d\n\x0d\nfunction bufferSize(self\x2C size\x2C buffer) {\x0d\n  if (size >>> 0 !== size)\x0d\n    throw new ERR_SOCKET_BAD_BUFFER_SIZE();\x0d\n\x0d\n  const ctx = {};\x0d\n  const ret = self[kStateSymbol].handle.bufferSize(size\x2C buffer\x2C ctx);\x0d\n  if (ret === undefined) {\x0d\n    throw new ERR_SOCKET_BUFFER_SIZE(ctx);\x0d\n  }\x0d\n  return ret;\x0d\n}\x0d\n\x0d\n// Query primary process to get the server handle and utilize it.\x0d\nfunction bindServerHandle(self\x2C options\x2C errCb) {\x0d\n  const cluster = lazyLoadCluster();\x0d\n\x0d\n  const state = self[kStateSymbol];\x0d\n  cluster._getServer(self\x2C options\x2C (err\x2C handle) => {\x0d\n    if (err) {\x0d\n      errCb(err);\x0d\n      return;\x0d\n    }\x0d\n\x0d\n    if (!state.handle) {\x0d\n      // Handle has been closed in the mean time.\x0d\n      return handle.close();\x0d\n    }\x0d\n\x0d\n    replaceHandle(self\x2C handle);\x0d\n    startListening(self);\x0d\n  });\x0d\n}\x0d\n\x0d\nSocket.prototype.bind = function(port_\x2C address_ /* \x2C callback */) {\x0d\n  let port = port_;\x0d\n\x0d\n  healthCheck(this);\x0d\n  const state = this[kStateSymbol];\x0d\n\x0d\n  if (state.bindState !== BIND_STATE_UNBOUND)\x0d\n    throw new ERR_SOCKET_ALREADY_BOUND();\x0d\n\x0d\n  state.bindState = BIND_STATE_BINDING;\x0d\n\x0d\n  const cb = arguments.length && arguments[arguments.length - 1];\x0d\n  if (typeof cb === 'function') {\x0d\n    function removeListeners() {\x0d\n      this.removeListener('error'\x2C removeListeners);\x0d\n      this.removeListener('listening'\x2C onListening);\x0d\n    }\x0d\n\x0d\n    function onListening() {\x0d\n      FunctionPrototypeCall(removeListeners\x2C this);\x0d\n      FunctionPrototypeCall(cb\x2C this);\x0d\n    }\x0d\n\x0d\n    this.on('error'\x2C removeListeners);\x0d\n    this.on('listening'\x2C onListening);\x0d\n  }\x0d\n\x0d\n  if (port !== null &&\x0d\n      typeof port === 'object' &&\x0d\n      typeof port.recvStart === 'function') {\x0d\n    replaceHandle(this\x2C port);\x0d\n    startListening(this);\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  // Open an existing fd instead of creating a new one.\x0d\n  if (port !== null && typeof port === 'object' &&\x0d\n      isInt32(port.fd) && port.fd > 0) {\x0d\n    const fd = port.fd;\x0d\n    const exclusive = !!port.exclusive;\x0d\n    const state = this[kStateSymbol];\x0d\n\x0d\n    const cluster = lazyLoadCluster();\x0d\n\x0d\n    if (cluster.isWorker && !exclusive) {\x0d\n      bindServerHandle(this\x2C {\x0d\n        address: null\x2C\x0d\n        port: null\x2C\x0d\n        addressType: this.type\x2C\x0d\n        fd\x2C\x0d\n        flags: null\x0d\n      }\x2C (err) => {\x0d\n        // Callback to handle error.\x0d\n        const ex = errnoException(err\x2C 'open');\x0d\n        state.bindState = BIND_STATE_UNBOUND;\x0d\n        this.emit('error'\x2C ex);\x0d\n      });\x0d\n      return this;\x0d\n    }\x0d\n\x0d\n    const type = guessHandleType(fd);\x0d\n    if (type !== 'UDP')\x0d\n      throw new ERR_INVALID_FD_TYPE(type);\x0d\n    const err = state.handle.open(fd);\x0d\n\x0d\n    if (err)\x0d\n      throw errnoException(err\x2C 'open');\x0d\n\x0d\n    startListening(this);\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  let address;\x0d\n  let exclusive;\x0d\n\x0d\n  if (port !== null && typeof port === 'object') {\x0d\n    address = port.address || '';\x0d\n    exclusive = !!port.exclusive;\x0d\n    port = port.port;\x0d\n  } else {\x0d\n    address = typeof address_ === 'function' ? '' : address_;\x0d\n    exclusive = false;\x0d\n  }\x0d\n\x0d\n  // Defaulting address for bind to all interfaces\x0d\n  if (!address) {\x0d\n    if (this.type === 'udp4')\x0d\n      address = '0.0.0.0';\x0d\n    else\x0d\n      address = '::';\x0d\n  }\x0d\n\x0d\n  // Resolve address first\x0d\n  state.handle.lookup(address\x2C (err\x2C ip) => {\x0d\n    if (err) {\x0d\n      state.bindState = BIND_STATE_UNBOUND;\x0d\n      this.emit('error'\x2C err);\x0d\n      return;\x0d\n    }\x0d\n\x0d\n    const cluster = lazyLoadCluster();\x0d\n\x0d\n    let flags = 0;\x0d\n    if (state.reuseAddr)\x0d\n      flags |= UV_UDP_REUSEADDR;\x0d\n    if (state.ipv6Only)\x0d\n      flags |= UV_UDP_IPV6ONLY;\x0d\n\x0d\n    if (cluster.isWorker && !exclusive) {\x0d\n      bindServerHandle(this\x2C {\x0d\n        address: ip\x2C\x0d\n        port: port\x2C\x0d\n        addressType: this.type\x2C\x0d\n        fd: -1\x2C\x0d\n        flags: flags\x0d\n      }\x2C (err) => {\x0d\n        // Callback to handle error.\x0d\n        const ex = exceptionWithHostPort(err\x2C 'bind'\x2C ip\x2C port);\x0d\n        state.bindState = BIND_STATE_UNBOUND;\x0d\n        this.emit('error'\x2C ex);\x0d\n      });\x0d\n    } else {\x0d\n      if (!state.handle)\x0d\n        return; // Handle has been closed in the mean time\x0d\n\x0d\n      const err = state.handle.bind(ip\x2C port || 0\x2C flags);\x0d\n      if (err) {\x0d\n        const ex = exceptionWithHostPort(err\x2C 'bind'\x2C ip\x2C port);\x0d\n        state.bindState = BIND_STATE_UNBOUND;\x0d\n        this.emit('error'\x2C ex);\x0d\n        // Todo: close?\x0d\n        return;\x0d\n      }\x0d\n\x0d\n      startListening(this);\x0d\n    }\x0d\n  });\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\nSocket.prototype.connect = function(port\x2C address\x2C callback) {\x0d\n  port = validatePort(port\x2C 'Port'\x2C false);\x0d\n  if (typeof address === 'function') {\x0d\n    callback = address;\x0d\n    address = '';\x0d\n  } else if (address === undefined) {\x0d\n    address = '';\x0d\n  }\x0d\n\x0d\n  validateString(address\x2C 'address');\x0d\n\x0d\n  const state = this[kStateSymbol];\x0d\n\x0d\n  if (state.connectState !== CONNECT_STATE_DISCONNECTED)\x0d\n    throw new ERR_SOCKET_DGRAM_IS_CONNECTED();\x0d\n\x0d\n  state.connectState = CONNECT_STATE_CONNECTING;\x0d\n  if (state.bindState === BIND_STATE_UNBOUND)\x0d\n    this.bind({ port: 0\x2C exclusive: true }\x2C null);\x0d\n\x0d\n  if (state.bindState !== BIND_STATE_BOUND) {\x0d\n    enqueue(this\x2C FunctionPrototypeBind(_connect\x2C this\x2C\x0d\n                                        port\x2C address\x2C callback));\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  ReflectApply(_connect\x2C this\x2C [port\x2C address\x2C callback]);\x0d\n};\x0d\n\x0d\n\x0d\nfunction _connect(port\x2C address\x2C callback) {\x0d\n  const state = this[kStateSymbol];\x0d\n  if (callback)\x0d\n    this.once('connect'\x2C callback);\x0d\n\x0d\n  const afterDns = (ex\x2C ip) => {\x0d\n    defaultTriggerAsyncIdScope(\x0d\n      this[async_id_symbol]\x2C\x0d\n      doConnect\x2C\x0d\n      ex\x2C this\x2C ip\x2C address\x2C port\x2C callback\x0d\n    );\x0d\n  };\x0d\n\x0d\n  state.handle.lookup(address\x2C afterDns);\x0d\n}\x0d\n\x0d\n\x0d\nfunction doConnect(ex\x2C self\x2C ip\x2C address\x2C port\x2C callback) {\x0d\n  const state = self[kStateSymbol];\x0d\n  if (!state.handle)\x0d\n    return;\x0d\n\x0d\n  if (!ex) {\x0d\n    const err = state.handle.connect(ip\x2C port);\x0d\n    if (err) {\x0d\n      ex = exceptionWithHostPort(err\x2C 'connect'\x2C address\x2C port);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (ex) {\x0d\n    state.connectState = CONNECT_STATE_DISCONNECTED;\x0d\n    return process.nextTick(() => {\x0d\n      if (callback) {\x0d\n        self.removeListener('connect'\x2C callback);\x0d\n        callback(ex);\x0d\n      } else {\x0d\n        self.emit('error'\x2C ex);\x0d\n      }\x0d\n    });\x0d\n  }\x0d\n\x0d\n  state.connectState = CONNECT_STATE_CONNECTED;\x0d\n  process.nextTick(() => self.emit('connect'));\x0d\n}\x0d\n\x0d\n\x0d\nSocket.prototype.disconnect = function() {\x0d\n  const state = this[kStateSymbol];\x0d\n  if (state.connectState !== CONNECT_STATE_CONNECTED)\x0d\n    throw new ERR_SOCKET_DGRAM_NOT_CONNECTED();\x0d\n\x0d\n  const err = state.handle.disconnect();\x0d\n  if (err)\x0d\n    throw errnoException(err\x2C 'connect');\x0d\n  else\x0d\n    state.connectState = CONNECT_STATE_DISCONNECTED;\x0d\n};\x0d\n\x0d\n\x0d\n// Thin wrapper around `send`\x2C here for compatibility with dgram_legacy.js\x0d\nSocket.prototype.sendto = function(buffer\x2C\x0d\n                                   offset\x2C\x0d\n                                   length\x2C\x0d\n                                   port\x2C\x0d\n                                   address\x2C\x0d\n                                   callback) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  validateNumber(length\x2C 'length');\x0d\n  validateNumber(port\x2C 'port');\x0d\n  validateString(address\x2C 'address');\x0d\n\x0d\n  this.send(buffer\x2C offset\x2C length\x2C port\x2C address\x2C callback);\x0d\n};\x0d\n\x0d\n\x0d\nfunction sliceBuffer(buffer\x2C offset\x2C length) {\x0d\n  if (typeof buffer === 'string') {\x0d\n    buffer = Buffer.from(buffer);\x0d\n  } else if (!isArrayBufferView(buffer)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE('buffer'\x2C\x0d\n                                   ['Buffer'\x2C\x0d\n                                    'TypedArray'\x2C\x0d\n                                    'DataView'\x2C\x0d\n                                    'string']\x2C\x0d\n                                   buffer);\x0d\n  }\x0d\n\x0d\n  offset = offset >>> 0;\x0d\n  length = length >>> 0;\x0d\n  if (offset > buffer.byteLength) {\x0d\n    throw new ERR_BUFFER_OUT_OF_BOUNDS('offset');\x0d\n  }\x0d\n\x0d\n  if (offset + length > buffer.byteLength) {\x0d\n    throw new ERR_BUFFER_OUT_OF_BOUNDS('length');\x0d\n  }\x0d\n\x0d\n  return Buffer.from(buffer.buffer\x2C buffer.byteOffset + offset\x2C length);\x0d\n}\x0d\n\x0d\n\x0d\nfunction fixBufferList(list) {\x0d\n  const newlist = new Array(list.length);\x0d\n\x0d\n  for (let i = 0\x2C l = list.length; i < l; i++) {\x0d\n    const buf = list[i];\x0d\n    if (typeof buf === 'string')\x0d\n      newlist[i] = Buffer.from(buf);\x0d\n    else if (!isArrayBufferView(buf))\x0d\n      return null;\x0d\n    else\x0d\n      newlist[i] = Buffer.from(buf.buffer\x2C buf.byteOffset\x2C buf.byteLength);\x0d\n  }\x0d\n\x0d\n  return newlist;\x0d\n}\x0d\n\x0d\n\x0d\nfunction enqueue(self\x2C toEnqueue) {\x0d\n  const state = self[kStateSymbol];\x0d\n\x0d\n  // If the send queue hasn't been initialized yet\x2C do it\x2C and install an\x0d\n  // event handler that flushes the send queue after binding is done.\x0d\n  if (state.queue === undefined) {\x0d\n    state.queue = [];\x0d\n    self.once(EventEmitter.errorMonitor\x2C onListenError);\x0d\n    self.once('listening'\x2C onListenSuccess);\x0d\n  }\x0d\n  ArrayPrototypePush(state.queue\x2C toEnqueue);\x0d\n}\x0d\n\x0d\n\x0d\nfunction onListenSuccess() {\x0d\n  this.removeListener(EventEmitter.errorMonitor\x2C onListenError);\x0d\n  FunctionPrototypeCall(clearQueue\x2C this);\x0d\n}\x0d\n\x0d\n\x0d\nfunction onListenError(err) {\x0d\n  this.removeListener('listening'\x2C onListenSuccess);\x0d\n  this[kStateSymbol].queue = undefined;\x0d\n}\x0d\n\x0d\n\x0d\nfunction clearQueue() {\x0d\n  const state = this[kStateSymbol];\x0d\n  const queue = state.queue;\x0d\n  state.queue = undefined;\x0d\n\x0d\n  // Flush the send queue.\x0d\n  for (const queueEntry of queue)\x0d\n    queueEntry();\x0d\n}\x0d\n\x0d\n// valid combinations\x0d\n// For connectionless sockets\x0d\n// send(buffer\x2C offset\x2C length\x2C port\x2C address\x2C callback)\x0d\n// send(buffer\x2C offset\x2C length\x2C port\x2C address)\x0d\n// send(buffer\x2C offset\x2C length\x2C port\x2C callback)\x0d\n// send(buffer\x2C offset\x2C length\x2C port)\x0d\n// send(bufferOrList\x2C port\x2C address\x2C callback)\x0d\n// send(bufferOrList\x2C port\x2C address)\x0d\n// send(bufferOrList\x2C port\x2C callback)\x0d\n// send(bufferOrList\x2C port)\x0d\n// For connected sockets\x0d\n// send(buffer\x2C offset\x2C length\x2C callback)\x0d\n// send(buffer\x2C offset\x2C length)\x0d\n// send(bufferOrList\x2C callback)\x0d\n// send(bufferOrList)\x0d\nSocket.prototype.send = function(buffer\x2C\x0d\n                                 offset\x2C\x0d\n                                 length\x2C\x0d\n                                 port\x2C\x0d\n                                 address\x2C\x0d\n                                 callback) {\x0d\n\x0d\n  let list;\x0d\n  const state = this[kStateSymbol];\x0d\n  const connected = state.connectState === CONNECT_STATE_CONNECTED;\x0d\n  if (!connected) {\x0d\n    if (address || (port && typeof port !== 'function')) {\x0d\n      buffer = sliceBuffer(buffer\x2C offset\x2C length);\x0d\n    } else {\x0d\n      callback = port;\x0d\n      port = offset;\x0d\n      address = length;\x0d\n    }\x0d\n  } else {\x0d\n    if (typeof length === 'number') {\x0d\n      buffer = sliceBuffer(buffer\x2C offset\x2C length);\x0d\n      if (typeof port === 'function') {\x0d\n        callback = port;\x0d\n        port = null;\x0d\n      }\x0d\n    } else {\x0d\n      callback = offset;\x0d\n    }\x0d\n\x0d\n    if (port || address)\x0d\n      throw new ERR_SOCKET_DGRAM_IS_CONNECTED();\x0d\n  }\x0d\n\x0d\n  if (!ArrayIsArray(buffer)) {\x0d\n    if (typeof buffer === 'string') {\x0d\n      list = [ Buffer.from(buffer) ];\x0d\n    } else if (!isArrayBufferView(buffer)) {\x0d\n      throw new ERR_INVALID_ARG_TYPE('buffer'\x2C\x0d\n                                     ['Buffer'\x2C\x0d\n                                      'TypedArray'\x2C\x0d\n                                      'DataView'\x2C\x0d\n                                      'string']\x2C\x0d\n                                     buffer);\x0d\n    } else {\x0d\n      list = [ buffer ];\x0d\n    }\x0d\n  } else if (!(list = fixBufferList(buffer))) {\x0d\n    throw new ERR_INVALID_ARG_TYPE('buffer list arguments'\x2C\x0d\n                                   ['Buffer'\x2C\x0d\n                                    'TypedArray'\x2C\x0d\n                                    'DataView'\x2C\x0d\n                                    'string']\x2C\x0d\n                                   buffer);\x0d\n  }\x0d\n\x0d\n  if (!connected)\x0d\n    port = validatePort(port\x2C 'Port'\x2C false);\x0d\n\x0d\n  // Normalize callback so it's either a function or undefined but not anything\x0d\n  // else.\x0d\n  if (typeof callback !== 'function')\x0d\n    callback = undefined;\x0d\n\x0d\n  if (typeof address === 'function') {\x0d\n    callback = address;\x0d\n    address = undefined;\x0d\n  } else if (address && typeof address !== 'string') {\x0d\n    throw new ERR_INVALID_ARG_TYPE('address'\x2C ['string'\x2C 'falsy']\x2C address);\x0d\n  }\x0d\n\x0d\n  healthCheck(this);\x0d\n\x0d\n  if (state.bindState === BIND_STATE_UNBOUND)\x0d\n    this.bind({ port: 0\x2C exclusive: true }\x2C null);\x0d\n\x0d\n  if (list.length === 0)\x0d\n    ArrayPrototypePush(list\x2C Buffer.alloc(0));\x0d\n\x0d\n  // If the socket hasn't been bound yet\x2C push the outbound packet onto the\x0d\n  // send queue and send after binding is complete.\x0d\n  if (state.bindState !== BIND_STATE_BOUND) {\x0d\n    enqueue(this\x2C FunctionPrototypeBind(this.send\x2C this\x2C\x0d\n                                        list\x2C port\x2C address\x2C callback));\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  const afterDns = (ex\x2C ip) => {\x0d\n    defaultTriggerAsyncIdScope(\x0d\n      this[async_id_symbol]\x2C\x0d\n      doSend\x2C\x0d\n      ex\x2C this\x2C ip\x2C list\x2C address\x2C port\x2C callback\x0d\n    );\x0d\n  };\x0d\n\x0d\n  if (!connected) {\x0d\n    state.handle.lookup(address\x2C afterDns);\x0d\n  } else {\x0d\n    afterDns(null\x2C null);\x0d\n  }\x0d\n};\x0d\n\x0d\nfunction doSend(ex\x2C self\x2C ip\x2C list\x2C address\x2C port\x2C callback) {\x0d\n  const state = self[kStateSymbol];\x0d\n\x0d\n  if (ex) {\x0d\n    if (typeof callback === 'function') {\x0d\n      process.nextTick(callback\x2C ex);\x0d\n      return;\x0d\n    }\x0d\n\x0d\n    process.nextTick(() => self.emit('error'\x2C ex));\x0d\n    return;\x0d\n  } else if (!state.handle) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  const req = new SendWrap();\x0d\n  req.list = list;  // Keep reference alive.\x0d\n  req.address = address;\x0d\n  req.port = port;\x0d\n  if (callback) {\x0d\n    req.callback = callback;\x0d\n    req.oncomplete = afterSend;\x0d\n  }\x0d\n\x0d\n  let err;\x0d\n  if (port)\x0d\n    err = state.handle.send(req\x2C list\x2C list.length\x2C port\x2C ip\x2C !!callback);\x0d\n  else\x0d\n    err = state.handle.send(req\x2C list\x2C list.length\x2C !!callback);\x0d\n\x0d\n  if (err >= 1) {\x0d\n    // Synchronous finish. The return code is msg_length + 1 so that we can\x0d\n    // distinguish between synchronous success and asynchronous success.\x0d\n    if (callback)\x0d\n      process.nextTick(callback\x2C null\x2C err - 1);\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  if (err && callback) {\x0d\n    // Don't emit as error\x2C dgram_legacy.js compatibility\x0d\n    const ex = exceptionWithHostPort(err\x2C 'send'\x2C address\x2C port);\x0d\n    process.nextTick(callback\x2C ex);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction afterSend(err\x2C sent) {\x0d\n  if (err) {\x0d\n    err = exceptionWithHostPort(err\x2C 'send'\x2C this.address\x2C this.port);\x0d\n  } else {\x0d\n    err = null;\x0d\n  }\x0d\n\x0d\n  this.callback(err\x2C sent);\x0d\n}\x0d\n\x0d\nSocket.prototype.close = function(callback) {\x0d\n  const state = this[kStateSymbol];\x0d\n  const queue = state.queue;\x0d\n\x0d\n  if (typeof callback === 'function')\x0d\n    this.on('close'\x2C callback);\x0d\n\x0d\n  if (queue !== undefined) {\x0d\n    ArrayPrototypePush(queue\x2C FunctionPrototypeBind(this.close\x2C this));\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  healthCheck(this);\x0d\n  stopReceiving(this);\x0d\n  state.handle.close();\x0d\n  state.handle = null;\x0d\n  defaultTriggerAsyncIdScope(this[async_id_symbol]\x2C\x0d\n                             process.nextTick\x2C\x0d\n                             socketCloseNT\x2C\x0d\n                             this);\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nfunction socketCloseNT(self) {\x0d\n  self.emit('close');\x0d\n}\x0d\n\x0d\n\x0d\nSocket.prototype.address = function() {\x0d\n  healthCheck(this);\x0d\n\x0d\n  const out = {};\x0d\n  const err = this[kStateSymbol].handle.getsockname(out);\x0d\n  if (err) {\x0d\n    throw errnoException(err\x2C 'getsockname');\x0d\n  }\x0d\n\x0d\n  return out;\x0d\n};\x0d\n\x0d\nSocket.prototype.remoteAddress = function() {\x0d\n  healthCheck(this);\x0d\n\x0d\n  const state = this[kStateSymbol];\x0d\n  if (state.connectState !== CONNECT_STATE_CONNECTED)\x0d\n    throw new ERR_SOCKET_DGRAM_NOT_CONNECTED();\x0d\n\x0d\n  const out = {};\x0d\n  const err = state.handle.getpeername(out);\x0d\n  if (err)\x0d\n    throw errnoException(err\x2C 'getpeername');\x0d\n\x0d\n  return out;\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.setBroadcast = function(arg) {\x0d\n  const err = this[kStateSymbol].handle.setBroadcast(arg ? 1 : 0);\x0d\n  if (err) {\x0d\n    throw errnoException(err\x2C 'setBroadcast');\x0d\n  }\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.setTTL = function(ttl) {\x0d\n  validateNumber(ttl\x2C 'ttl');\x0d\n\x0d\n  const err = this[kStateSymbol].handle.setTTL(ttl);\x0d\n  if (err) {\x0d\n    throw errnoException(err\x2C 'setTTL');\x0d\n  }\x0d\n\x0d\n  return ttl;\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.setMulticastTTL = function(ttl) {\x0d\n  validateNumber(ttl\x2C 'ttl');\x0d\n\x0d\n  const err = this[kStateSymbol].handle.setMulticastTTL(ttl);\x0d\n  if (err) {\x0d\n    throw errnoException(err\x2C 'setMulticastTTL');\x0d\n  }\x0d\n\x0d\n  return ttl;\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.setMulticastLoopback = function(arg) {\x0d\n  const err = this[kStateSymbol].handle.setMulticastLoopback(arg ? 1 : 0);\x0d\n  if (err) {\x0d\n    throw errnoException(err\x2C 'setMulticastLoopback');\x0d\n  }\x0d\n\x0d\n  return arg; // 0.4 compatibility\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.setMulticastInterface = function(interfaceAddress) {\x0d\n  healthCheck(this);\x0d\n  validateString(interfaceAddress\x2C 'interfaceAddress');\x0d\n\x0d\n  const err = this[kStateSymbol].handle.setMulticastInterface(interfaceAddress);\x0d\n  if (err) {\x0d\n    throw errnoException(err\x2C 'setMulticastInterface');\x0d\n  }\x0d\n};\x0d\n\x0d\nSocket.prototype.addMembership = function(multicastAddress\x2C\x0d\n                                          interfaceAddress) {\x0d\n  healthCheck(this);\x0d\n\x0d\n  if (!multicastAddress) {\x0d\n    throw new ERR_MISSING_ARGS('multicastAddress');\x0d\n  }\x0d\n\x0d\n  const { handle } = this[kStateSymbol];\x0d\n  const err = handle.addMembership(multicastAddress\x2C interfaceAddress);\x0d\n  if (err) {\x0d\n    throw errnoException(err\x2C 'addMembership');\x0d\n  }\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.dropMembership = function(multicastAddress\x2C\x0d\n                                           interfaceAddress) {\x0d\n  healthCheck(this);\x0d\n\x0d\n  if (!multicastAddress) {\x0d\n    throw new ERR_MISSING_ARGS('multicastAddress');\x0d\n  }\x0d\n\x0d\n  const { handle } = this[kStateSymbol];\x0d\n  const err = handle.dropMembership(multicastAddress\x2C interfaceAddress);\x0d\n  if (err) {\x0d\n    throw errnoException(err\x2C 'dropMembership');\x0d\n  }\x0d\n};\x0d\n\x0d\nSocket.prototype.addSourceSpecificMembership = function(sourceAddress\x2C\x0d\n                                                        groupAddress\x2C\x0d\n                                                        interfaceAddress) {\x0d\n  healthCheck(this);\x0d\n\x0d\n  validateString(sourceAddress\x2C 'sourceAddress');\x0d\n  validateString(groupAddress\x2C 'groupAddress');\x0d\n\x0d\n  const err =\x0d\n    this[kStateSymbol].handle.addSourceSpecificMembership(sourceAddress\x2C\x0d\n                                                          groupAddress\x2C\x0d\n                                                          interfaceAddress);\x0d\n  if (err) {\x0d\n    throw errnoException(err\x2C 'addSourceSpecificMembership');\x0d\n  }\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.dropSourceSpecificMembership = function(sourceAddress\x2C\x0d\n                                                         groupAddress\x2C\x0d\n                                                         interfaceAddress) {\x0d\n  healthCheck(this);\x0d\n\x0d\n  validateString(sourceAddress\x2C 'sourceAddress');\x0d\n  validateString(groupAddress\x2C 'groupAddress');\x0d\n\x0d\n  const err =\x0d\n    this[kStateSymbol].handle.dropSourceSpecificMembership(sourceAddress\x2C\x0d\n                                                           groupAddress\x2C\x0d\n                                                           interfaceAddress);\x0d\n  if (err) {\x0d\n    throw errnoException(err\x2C 'dropSourceSpecificMembership');\x0d\n  }\x0d\n};\x0d\n\x0d\n\x0d\nfunction healthCheck(socket) {\x0d\n  if (!socket[kStateSymbol].handle) {\x0d\n    // Error message from dgram_legacy.js.\x0d\n    throw new ERR_SOCKET_DGRAM_NOT_RUNNING();\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nfunction stopReceiving(socket) {\x0d\n  const state = socket[kStateSymbol];\x0d\n\x0d\n  if (!state.receiving)\x0d\n    return;\x0d\n\x0d\n  state.handle.recvStop();\x0d\n  state.receiving = false;\x0d\n}\x0d\n\x0d\n\x0d\nfunction onMessage(nread\x2C handle\x2C buf\x2C rinfo) {\x0d\n  const self = handle[owner_symbol];\x0d\n  if (nread < 0) {\x0d\n    return self.emit('error'\x2C errnoException(nread\x2C 'recvmsg'));\x0d\n  }\x0d\n  rinfo.size = buf.length; // compatibility\x0d\n  self.emit('message'\x2C buf\x2C rinfo);\x0d\n}\x0d\n\x0d\n\x0d\nSocket.prototype.ref = function() {\x0d\n  const handle = this[kStateSymbol].handle;\x0d\n\x0d\n  if (handle)\x0d\n    handle.ref();\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.unref = function() {\x0d\n  const handle = this[kStateSymbol].handle;\x0d\n\x0d\n  if (handle)\x0d\n    handle.unref();\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.setRecvBufferSize = function(size) {\x0d\n  bufferSize(this\x2C size\x2C RECV_BUFFER);\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.setSendBufferSize = function(size) {\x0d\n  bufferSize(this\x2C size\x2C SEND_BUFFER);\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.getRecvBufferSize = function() {\x0d\n  return bufferSize(this\x2C 0\x2C RECV_BUFFER);\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.getSendBufferSize = function() {\x0d\n  return bufferSize(this\x2C 0\x2C SEND_BUFFER);\x0d\n};\x0d\n\x0d\n\x0d\n// Deprecated private APIs.\x0d\nObjectDefineProperty(Socket.prototype\x2C '_handle'\x2C {\x0d\n  get: deprecate(function() {\x0d\n    return this[kStateSymbol].handle;\x0d\n  }\x2C 'Socket.prototype._handle is deprecated'\x2C 'DEP0112')\x2C\x0d\n  set: deprecate(function(val) {\x0d\n    this[kStateSymbol].handle = val;\x0d\n  }\x2C 'Socket.prototype._handle is deprecated'\x2C 'DEP0112')\x0d\n});\x0d\n\x0d\n\x0d\nObjectDefineProperty(Socket.prototype\x2C '_receiving'\x2C {\x0d\n  get: deprecate(function() {\x0d\n    return this[kStateSymbol].receiving;\x0d\n  }\x2C 'Socket.prototype._receiving is deprecated'\x2C 'DEP0112')\x2C\x0d\n  set: deprecate(function(val) {\x0d\n    this[kStateSymbol].receiving = val;\x0d\n  }\x2C 'Socket.prototype._receiving is deprecated'\x2C 'DEP0112')\x0d\n});\x0d\n\x0d\n\x0d\nObjectDefineProperty(Socket.prototype\x2C '_bindState'\x2C {\x0d\n  get: deprecate(function() {\x0d\n    return this[kStateSymbol].bindState;\x0d\n  }\x2C 'Socket.prototype._bindState is deprecated'\x2C 'DEP0112')\x2C\x0d\n  set: deprecate(function(val) {\x0d\n    this[kStateSymbol].bindState = val;\x0d\n  }\x2C 'Socket.prototype._bindState is deprecated'\x2C 'DEP0112')\x0d\n});\x0d\n\x0d\n\x0d\nObjectDefineProperty(Socket.prototype\x2C '_queue'\x2C {\x0d\n  get: deprecate(function() {\x0d\n    return this[kStateSymbol].queue;\x0d\n  }\x2C 'Socket.prototype._queue is deprecated'\x2C 'DEP0112')\x2C\x0d\n  set: deprecate(function(val) {\x0d\n    this[kStateSymbol].queue = val;\x0d\n  }\x2C 'Socket.prototype._queue is deprecated'\x2C 'DEP0112')\x0d\n});\x0d\n\x0d\n\x0d\nObjectDefineProperty(Socket.prototype\x2C '_reuseAddr'\x2C {\x0d\n  get: deprecate(function() {\x0d\n    return this[kStateSymbol].reuseAddr;\x0d\n  }\x2C 'Socket.prototype._reuseAddr is deprecated'\x2C 'DEP0112')\x2C\x0d\n  set: deprecate(function(val) {\x0d\n    this[kStateSymbol].reuseAddr = val;\x0d\n  }\x2C 'Socket.prototype._reuseAddr is deprecated'\x2C 'DEP0112')\x0d\n});\x0d\n\x0d\n\x0d\nSocket.prototype._healthCheck = deprecate(function() {\x0d\n  healthCheck(this);\x0d\n}\x2C 'Socket.prototype._healthCheck() is deprecated'\x2C 'DEP0112');\x0d\n\x0d\n\x0d\nSocket.prototype._stopReceiving = deprecate(function() {\x0d\n  stopReceiving(this);\x0d\n}\x2C 'Socket.prototype._stopReceiving() is deprecated'\x2C 'DEP0112');\x0d\n\x0d\n\x0d\n// Legacy alias on the C++ wrapper object. This is not public API\x2C so we may\x0d\n// want to runtime-deprecate it at some point. There's no hurry\x2C though.\x0d\nObjectDefineProperty(UDP.prototype\x2C 'owner'\x2C {\x0d\n  get() { return this[owner_symbol]; }\x2C\x0d\n  set(v) { return this[owner_symbol] = v; }\x0d\n});\x0d\n\x0d\n\x0d\nmodule.exports = {\x0d\n  _createSocketHandle: deprecate(\x0d\n    _createSocketHandle\x2C\x0d\n    'dgram._createSocketHandle() is deprecated'\x2C\x0d\n    'DEP0112'\x0d\n  )\x2C\x0d\n  createSocket\x2C\x0d\n  Socket\x0d\n};\x0d\n
code-source-info,0x2e2fa6b6cbe,104,0,28325,C0O0C4O28325,,
code-creation,Function,10,331726,0x2e2fa6b8bce,1501, node:dgram:1:1,0x2e2fa6b6c38,~
code-source-info,0x2e2fa6b8bce
code-creation,Eval,10,332483,0x2e2fa6bbfd6,5, node:internal/dgram:1:1,0x2e2fa6bbdd0,~
script-source,105,node:internal/dgram,'use strict';\x0d\n\x0d\nconst {\x0d\n  FunctionPrototypeBind\x2C\x0d\n  Symbol\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { codes } = require('internal/errors');\x0d\nconst { UDP } = internalBinding('udp_wrap');\x0d\nconst { guessHandleType } = internalBinding('util');\x0d\nconst {\x0d\n  isInt32\x2C\x0d\n  validateFunction\x2C\x0d\n} = require('internal/validators');\x0d\nconst { UV_EINVAL } = internalBinding('uv');\x0d\nconst {\x0d\n  ERR_SOCKET_BAD_TYPE\x2C\x0d\n} = codes;\x0d\nconst kStateSymbol = Symbol('state symbol');\x0d\nlet dns;  // Lazy load for startup performance.\x0d\n\x0d\n\x0d\nfunction lookup4(lookup\x2C address\x2C callback) {\x0d\n  return lookup(address || '127.0.0.1'\x2C 4\x2C callback);\x0d\n}\x0d\n\x0d\n\x0d\nfunction lookup6(lookup\x2C address\x2C callback) {\x0d\n  return lookup(address || '::1'\x2C 6\x2C callback);\x0d\n}\x0d\n\x0d\nfunction newHandle(type\x2C lookup) {\x0d\n  if (lookup === undefined) {\x0d\n    if (dns === undefined) {\x0d\n      dns = require('dns');\x0d\n    }\x0d\n\x0d\n    lookup = dns.lookup;\x0d\n  } else {\x0d\n    validateFunction(lookup\x2C 'lookup');\x0d\n  }\x0d\n\x0d\n  if (type === 'udp4') {\x0d\n    const handle = new UDP();\x0d\n\x0d\n    handle.lookup = FunctionPrototypeBind(lookup4\x2C handle\x2C lookup);\x0d\n    return handle;\x0d\n  }\x0d\n\x0d\n  if (type === 'udp6') {\x0d\n    const handle = new UDP();\x0d\n\x0d\n    handle.lookup = FunctionPrototypeBind(lookup6\x2C handle\x2C lookup);\x0d\n    handle.bind = handle.bind6;\x0d\n    handle.connect = handle.connect6;\x0d\n    handle.send = handle.send6;\x0d\n    return handle;\x0d\n  }\x0d\n\x0d\n  throw new ERR_SOCKET_BAD_TYPE();\x0d\n}\x0d\n\x0d\n\x0d\nfunction _createSocketHandle(address\x2C port\x2C addressType\x2C fd\x2C flags) {\x0d\n  const handle = newHandle(addressType);\x0d\n  let err;\x0d\n\x0d\n  if (isInt32(fd) && fd > 0) {\x0d\n    const type = guessHandleType(fd);\x0d\n    if (type !== 'UDP') {\x0d\n      err = UV_EINVAL;\x0d\n    } else {\x0d\n      err = handle.open(fd);\x0d\n    }\x0d\n  } else if (port || address) {\x0d\n    err = handle.bind(address\x2C port || 0\x2C flags);\x0d\n  }\x0d\n\x0d\n  if (err) {\x0d\n    handle.close();\x0d\n    return err;\x0d\n  }\x0d\n\x0d\n  return handle;\x0d\n}\x0d\n\x0d\n\x0d\nmodule.exports = {\x0d\n  kStateSymbol\x2C\x0d\n  _createSocketHandle\x2C\x0d\n  newHandle\x0d\n};\x0d\n
code-source-info,0x2e2fa6bbfd6,105,0,1941,C0O0C4O1941,,
code-creation,Function,10,332686,0x2e2fa6bc29e,196, node:internal/dgram:1:1,0x2e2fa6bbf50,~
code-source-info,0x2e2fa6bc29e,105,0,1941,C0O0C56O28C62O54C67O101C73O101C78O91C83O146C86O146C91O138C97O204C100O204C105O184C111O276C117O276C122O241C128O253C134O331C137O331C142O317C148O366C154O421C157O421C162O450C163O450C165O1863C172O1885C178O1902C184O1926C190O1878C195O1940,,
new,MemoryChunk,0x20b1dd40000,262144
code-creation,Function,11,333033,0x20b1dd43060,548,internalBinding node:internal/bootstrap/loaders:164:45,0x13fcdd0f7b0,^
code-source-info,0x20b1dd43060,9,5278,5523,,,
code-creation,Function,11,333086,0x20b1dd43300,216,isPathSeparator node:path:52:25,0x14570b4cf90,^
code-source-info,0x20b1dd43300,41,1794,1876,,,
code-creation,Function,11,333135,0x20b1dd43440,572,getOptionValue node:internal/options:39:24,0x2e2fa684450,^
code-source-info,0x20b1dd43440,96,940,1190,,,
code-creation,Function,11,333185,0x20b1dd436e0,664,nativeModuleRequire node:internal/bootstrap/loaders:332:29,0x13fcdd0fd30,^
code-source-info,0x20b1dd436e0,9,10647,11000,,,
code-creation,Function,11,333236,0x20b1dd439e0,1252,compileForInternalLoader node:internal/bootstrap/loaders:299:27,0x13fcdd0fc60,^
code-source-info,0x20b1dd439e0,9,9827,10410,,,
code-creation,LazyCompile,10,333453,0x2e2fa6bee46,152,deprecate node:internal/util:96:19,0x423ed457f8,~
script-source,16,node:internal/util,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayFrom\x2C\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  ArrayPrototypeSort\x2C\x0d\n  Error\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectGetOwnPropertyDescriptor\x2C\x0d\n  ObjectGetOwnPropertyDescriptors\x2C\x0d\n  ObjectGetPrototypeOf\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  Promise\x2C\x0d\n  ReflectApply\x2C\x0d\n  ReflectConstruct\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  RegExpPrototypeTest\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeSet\x2C\x0d\n  StringPrototypeReplace\x2C\x0d\n  StringPrototypeToLowerCase\x2C\x0d\n  StringPrototypeToUpperCase\x2C\x0d\n  Symbol\x2C\x0d\n  SymbolFor\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  hideStackFrames\x2C\x0d\n  codes: {\x0d\n    ERR_NO_CRYPTO\x2C\x0d\n    ERR_UNKNOWN_SIGNAL\x0d\n  }\x2C\x0d\n  uvErrmapGet\x2C\x0d\n  overrideStackTrace\x2C\x0d\n} = require('internal/errors');\x0d\nconst { signals } = internalBinding('constants').os;\x0d\nconst {\x0d\n  getHiddenValue\x2C\x0d\n  setHiddenValue\x2C\x0d\n  arrow_message_private_symbol: kArrowMessagePrivateSymbolIndex\x2C\x0d\n  decorated_private_symbol: kDecoratedPrivateSymbolIndex\x2C\x0d\n  sleep: _sleep\x2C\x0d\n  toUSVString: _toUSVString\x2C\x0d\n} = internalBinding('util');\x0d\nconst { isNativeError } = internalBinding('types');\x0d\n\x0d\nconst noCrypto = !process.versions.openssl;\x0d\n\x0d\nconst experimentalWarnings = new SafeSet();\x0d\n\x0d\nconst colorRegExp = /\\u001b\\[\\d\\d?m/g; // eslint-disable-line no-control-regex\x0d\n\x0d\nconst unpairedSurrogateRe =\x0d\n  /(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])/;\x0d\nfunction toUSVString(val) {\x0d\n  const str = `${val}`;\x0d\n  // As of V8 5.5\x2C `str.search()` (and `unpairedSurrogateRe[@@search]()`) are\x0d\n  // slower than `unpairedSurrogateRe.exec()`.\x0d\n  const match = RegExpPrototypeExec(unpairedSurrogateRe\x2C str);\x0d\n  if (!match)\x0d\n    return str;\x0d\n  return _toUSVString(str\x2C match.index);\x0d\n}\x0d\n\x0d\nlet uvBinding;\x0d\n\x0d\nfunction lazyUv() {\x0d\n  uvBinding ??= internalBinding('uv');\x0d\n  return uvBinding;\x0d\n}\x0d\n\x0d\nfunction removeColors(str) {\x0d\n  return StringPrototypeReplace(str\x2C colorRegExp\x2C '');\x0d\n}\x0d\n\x0d\nfunction isError(e) {\x0d\n  // An error could be an instance of Error while not being a native error\x0d\n  // or could be from a different realm and not be instance of Error but still\x0d\n  // be a native error.\x0d\n  return isNativeError(e) || e instanceof Error;\x0d\n}\x0d\n\x0d\n// Keep a list of deprecation codes that have been warned on so we only warn on\x0d\n// each one once.\x0d\nconst codesWarned = new SafeSet();\x0d\n\x0d\nlet validateString;\x0d\n\x0d\n// Mark that a method should not be used.\x0d\n// Returns a modified function which warns once by default.\x0d\n// If --no-deprecation is set\x2C then it is a no-op.\x0d\nfunction deprecate(fn\x2C msg\x2C code) {\x0d\n  if (process.noDeprecation === true) {\x0d\n    return fn;\x0d\n  }\x0d\n\x0d\n  // Lazy-load to avoid a circular dependency.\x0d\n  if (validateString === undefined)\x0d\n    ({ validateString } = require('internal/validators'));\x0d\n\x0d\n  if (code !== undefined)\x0d\n    validateString(code\x2C 'code');\x0d\n\x0d\n  let warned = false;\x0d\n  function deprecated(...args) {\x0d\n    if (!warned) {\x0d\n      warned = true;\x0d\n      if (code !== undefined) {\x0d\n        if (!codesWarned.has(code)) {\x0d\n          process.emitWarning(msg\x2C 'DeprecationWarning'\x2C code\x2C deprecated);\x0d\n          codesWarned.add(code);\x0d\n        }\x0d\n      } else {\x0d\n        process.emitWarning(msg\x2C 'DeprecationWarning'\x2C deprecated);\x0d\n      }\x0d\n    }\x0d\n    if (new.target) {\x0d\n      return ReflectConstruct(fn\x2C args\x2C new.target);\x0d\n    }\x0d\n    return ReflectApply(fn\x2C this\x2C args);\x0d\n  }\x0d\n\x0d\n  // The wrapper will keep the same prototype as fn to maintain prototype chain\x0d\n  ObjectSetPrototypeOf(deprecated\x2C fn);\x0d\n  if (fn.prototype) {\x0d\n    // Setting this (rather than using Object.setPrototype\x2C as above) ensures\x0d\n    // that calling the unwrapped constructor gives an instanceof the wrapped\x0d\n    // constructor.\x0d\n    deprecated.prototype = fn.prototype;\x0d\n  }\x0d\n\x0d\n  return deprecated;\x0d\n}\x0d\n\x0d\nfunction decorateErrorStack(err) {\x0d\n  if (!(isError(err) && err.stack) ||\x0d\n      getHiddenValue(err\x2C kDecoratedPrivateSymbolIndex) === true)\x0d\n    return;\x0d\n\x0d\n  const arrow = getHiddenValue(err\x2C kArrowMessagePrivateSymbolIndex);\x0d\n\x0d\n  if (arrow) {\x0d\n    err.stack = arrow + err.stack;\x0d\n    setHiddenValue(err\x2C kDecoratedPrivateSymbolIndex\x2C true);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction assertCrypto() {\x0d\n  if (noCrypto)\x0d\n    throw new ERR_NO_CRYPTO();\x0d\n}\x0d\n\x0d\n// Return undefined if there is no match.\x0d\n// Move the "slow cases" to a separate function to make sure this function gets\x0d\n// inlined properly. That prioritizes the common case.\x0d\nfunction normalizeEncoding(enc) {\x0d\n  if (enc == null || enc === 'utf8' || enc === 'utf-8') return 'utf8';\x0d\n  return slowCases(enc);\x0d\n}\x0d\n\x0d\nfunction slowCases(enc) {\x0d\n  switch (enc.length) {\x0d\n    case 4:\x0d\n      if (enc === 'UTF8') return 'utf8';\x0d\n      if (enc === 'ucs2' || enc === 'UCS2') return 'utf16le';\x0d\n      enc = `${enc}`.toLowerCase();\x0d\n      if (enc === 'utf8') return 'utf8';\x0d\n      if (enc === 'ucs2') return 'utf16le';\x0d\n      break;\x0d\n    case 3:\x0d\n      if (enc === 'hex' || enc === 'HEX' ||\x0d\n          `${enc}`.toLowerCase() === 'hex')\x0d\n        return 'hex';\x0d\n      break;\x0d\n    case 5:\x0d\n      if (enc === 'ascii') return 'ascii';\x0d\n      if (enc === 'ucs-2') return 'utf16le';\x0d\n      if (enc === 'UTF-8') return 'utf8';\x0d\n      if (enc === 'ASCII') return 'ascii';\x0d\n      if (enc === 'UCS-2') return 'utf16le';\x0d\n      enc = `${enc}`.toLowerCase();\x0d\n      if (enc === 'utf-8') return 'utf8';\x0d\n      if (enc === 'ascii') return 'ascii';\x0d\n      if (enc === 'ucs-2') return 'utf16le';\x0d\n      break;\x0d\n    case 6:\x0d\n      if (enc === 'base64') return 'base64';\x0d\n      if (enc === 'latin1' || enc === 'binary') return 'latin1';\x0d\n      if (enc === 'BASE64') return 'base64';\x0d\n      if (enc === 'LATIN1' || enc === 'BINARY') return 'latin1';\x0d\n      enc = `${enc}`.toLowerCase();\x0d\n      if (enc === 'base64') return 'base64';\x0d\n      if (enc === 'latin1' || enc === 'binary') return 'latin1';\x0d\n      break;\x0d\n    case 7:\x0d\n      if (enc === 'utf16le' || enc === 'UTF16LE' ||\x0d\n          `${enc}`.toLowerCase() === 'utf16le')\x0d\n        return 'utf16le';\x0d\n      break;\x0d\n    case 8:\x0d\n      if (enc === 'utf-16le' || enc === 'UTF-16LE' ||\x0d\n        `${enc}`.toLowerCase() === 'utf-16le')\x0d\n        return 'utf16le';\x0d\n      break;\x0d\n    case 9:\x0d\n      if (enc === 'base64url' || enc === 'BASE64URL' ||\x0d\n          `${enc}`.toLowerCase() === 'base64url')\x0d\n        return 'base64url';\x0d\n      break;\x0d\n    default:\x0d\n      if (enc === '') return 'utf8';\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction emitExperimentalWarning(feature) {\x0d\n  if (experimentalWarnings.has(feature)) return;\x0d\n  const msg = `${feature} is an experimental feature. This feature could ` +\x0d\n       'change at any time';\x0d\n  experimentalWarnings.add(feature);\x0d\n  process.emitWarning(msg\x2C 'ExperimentalWarning');\x0d\n}\x0d\n\x0d\nfunction filterDuplicateStrings(items\x2C low) {\x0d\n  const map = new SafeMap();\x0d\n  for (let i = 0; i < items.length; i++) {\x0d\n    const item = items[i];\x0d\n    const key = StringPrototypeToLowerCase(item);\x0d\n    if (low) {\x0d\n      map.set(key\x2C key);\x0d\n    } else {\x0d\n      map.set(key\x2C item);\x0d\n    }\x0d\n  }\x0d\n  return ArrayPrototypeSort(ArrayFrom(map.values()));\x0d\n}\x0d\n\x0d\nfunction cachedResult(fn) {\x0d\n  let result;\x0d\n  return () => {\x0d\n    if (result === undefined)\x0d\n      result = fn();\x0d\n    return ArrayPrototypeSlice(result);\x0d\n  };\x0d\n}\x0d\n\x0d\n// Useful for Wrapping an ES6 Class with a constructor Function that\x0d\n// does not require the new keyword. For instance:\x0d\n//   class A { constructor(x) {this.x = x;}}\x0d\n//   const B = createClassWrapper(A);\x0d\n//   B() instanceof A // true\x0d\n//   B() instanceof B // true\x0d\nfunction createClassWrapper(type) {\x0d\n  function fn(...args) {\x0d\n    return ReflectConstruct(type\x2C args\x2C new.target || type);\x0d\n  }\x0d\n  // Mask the wrapper function name and length values\x0d\n  ObjectDefineProperties(fn\x2C {\x0d\n    name: { value: type.name }\x2C\x0d\n    length: { value: type.length }\x0d\n  });\x0d\n  ObjectSetPrototypeOf(fn\x2C type);\x0d\n  fn.prototype = type.prototype;\x0d\n  return fn;\x0d\n}\x0d\n\x0d\nlet signalsToNamesMapping;\x0d\nfunction getSignalsToNamesMapping() {\x0d\n  if (signalsToNamesMapping !== undefined)\x0d\n    return signalsToNamesMapping;\x0d\n\x0d\n  signalsToNamesMapping = ObjectCreate(null);\x0d\n  for (const key in signals) {\x0d\n    signalsToNamesMapping[signals[key]] = key;\x0d\n  }\x0d\n\x0d\n  return signalsToNamesMapping;\x0d\n}\x0d\n\x0d\nfunction convertToValidSignal(signal) {\x0d\n  if (typeof signal === 'number' && getSignalsToNamesMapping()[signal])\x0d\n    return signal;\x0d\n\x0d\n  if (typeof signal === 'string') {\x0d\n    const signalName = signals[StringPrototypeToUpperCase(signal)];\x0d\n    if (signalName) return signalName;\x0d\n  }\x0d\n\x0d\n  throw new ERR_UNKNOWN_SIGNAL(signal);\x0d\n}\x0d\n\x0d\nfunction getConstructorOf(obj) {\x0d\n  while (obj) {\x0d\n    const descriptor = ObjectGetOwnPropertyDescriptor(obj\x2C 'constructor');\x0d\n    if (descriptor !== undefined &&\x0d\n        typeof descriptor.value === 'function' &&\x0d\n        descriptor.value.name !== '') {\x0d\n      return descriptor.value;\x0d\n    }\x0d\n\x0d\n    obj = ObjectGetPrototypeOf(obj);\x0d\n  }\x0d\n\x0d\n  return null;\x0d\n}\x0d\n\x0d\nfunction getSystemErrorName(err) {\x0d\n  const entry = uvErrmapGet(err);\x0d\n  return entry ? entry[0] : `Unknown system error ${err}`;\x0d\n}\x0d\n\x0d\nfunction getSystemErrorMap() {\x0d\n  return lazyUv().getErrorMap();\x0d\n}\x0d\n\x0d\nconst kCustomPromisifiedSymbol = SymbolFor('nodejs.util.promisify.custom');\x0d\nconst kCustomPromisifyArgsSymbol = Symbol('customPromisifyArgs');\x0d\n\x0d\nlet validateFunction;\x0d\n\x0d\nfunction promisify(original) {\x0d\n  // Lazy-load to avoid a circular dependency.\x0d\n  if (validateFunction === undefined)\x0d\n    ({ validateFunction } = require('internal/validators'));\x0d\n\x0d\n  validateFunction(original\x2C 'original');\x0d\n\x0d\n  if (original[kCustomPromisifiedSymbol]) {\x0d\n    const fn = original[kCustomPromisifiedSymbol];\x0d\n\x0d\n    validateFunction(fn\x2C 'util.promisify.custom');\x0d\n\x0d\n    return ObjectDefineProperty(fn\x2C kCustomPromisifiedSymbol\x2C {\x0d\n      value: fn\x2C enumerable: false\x2C writable: false\x2C configurable: true\x0d\n    });\x0d\n  }\x0d\n\x0d\n  // Names to create an object from in case the callback receives multiple\x0d\n  // arguments\x2C e.g. ['bytesRead'\x2C 'buffer'] for fs.read.\x0d\n  const argumentNames = original[kCustomPromisifyArgsSymbol];\x0d\n\x0d\n  function fn(...args) {\x0d\n    return new Promise((resolve\x2C reject) => {\x0d\n      ArrayPrototypePush(args\x2C (err\x2C ...values) => {\x0d\n        if (err) {\x0d\n          return reject(err);\x0d\n        }\x0d\n        if (argumentNames !== undefined && values.length > 1) {\x0d\n          const obj = {};\x0d\n          for (let i = 0; i < argumentNames.length; i++)\x0d\n            obj[argumentNames[i]] = values[i];\x0d\n          resolve(obj);\x0d\n        } else {\x0d\n          resolve(values[0]);\x0d\n        }\x0d\n      });\x0d\n      ReflectApply(original\x2C this\x2C args);\x0d\n    });\x0d\n  }\x0d\n\x0d\n  ObjectSetPrototypeOf(fn\x2C ObjectGetPrototypeOf(original));\x0d\n\x0d\n  ObjectDefineProperty(fn\x2C kCustomPromisifiedSymbol\x2C {\x0d\n    value: fn\x2C enumerable: false\x2C writable: false\x2C configurable: true\x0d\n  });\x0d\n  return ObjectDefineProperties(\x0d\n    fn\x2C\x0d\n    ObjectGetOwnPropertyDescriptors(original)\x0d\n  );\x0d\n}\x0d\n\x0d\npromisify.custom = kCustomPromisifiedSymbol;\x0d\n\x0d\n// The built-in Array#join is slower in v8 6.0\x0d\nfunction join(output\x2C separator) {\x0d\n  let str = '';\x0d\n  if (output.length !== 0) {\x0d\n    const lastIndex = output.length - 1;\x0d\n    for (let i = 0; i < lastIndex; i++) {\x0d\n      // It is faster not to use a template string here\x0d\n      str += output[i];\x0d\n      str += separator;\x0d\n    }\x0d\n    str += output[lastIndex];\x0d\n  }\x0d\n  return str;\x0d\n}\x0d\n\x0d\n// As of V8 6.6\x2C depending on the size of the array\x2C this is anywhere\x0d\n// between 1.5-10x faster than the two-arg version of Array#splice()\x0d\nfunction spliceOne(list\x2C index) {\x0d\n  for (; index + 1 < list.length; index++)\x0d\n    list[index] = list[index + 1];\x0d\n  list.pop();\x0d\n}\x0d\n\x0d\nconst kNodeModulesRE = /^(.*)[\\\\/]node_modules[\\\\/]/;\x0d\n\x0d\nlet getStructuredStack;\x0d\n\x0d\nfunction isInsideNodeModules() {\x0d\n  if (getStructuredStack === undefined) {\x0d\n    // Lazy-load to avoid a circular dependency.\x0d\n    const { runInNewContext } = require('vm');\x0d\n    // Use `runInNewContext()` to get something tamper-proof and\x0d\n    // side-effect-free. Since this is currently only used for a deprecated API\x2C\x0d\n    // the perf implications should be okay.\x0d\n    getStructuredStack = runInNewContext(`(function() {\x0d\n      try { Error.stackTraceLimit = Infinity; } catch {}\x0d\n      return function structuredStack() {\x0d\n        const e = new Error();\x0d\n        overrideStackTrace.set(e\x2C (err\x2C trace) => trace);\x0d\n        return e.stack;\x0d\n      };\x0d\n    })()`\x2C { overrideStackTrace }\x2C { filename: 'structured-stack' });\x0d\n  }\x0d\n\x0d\n  const stack = getStructuredStack();\x0d\n\x0d\n  // Iterate over all stack frames and look for the first one not coming\x0d\n  // from inside Node.js itself:\x0d\n  if (ArrayIsArray(stack)) {\x0d\n    for (const frame of stack) {\x0d\n      const filename = frame.getFileName();\x0d\n      // If a filename does not start with / or contain \\\x2C\x0d\n      // it's likely from Node.js core.\x0d\n      if (!RegExpPrototypeTest(/^\\/|\\\\/\x2C filename))\x0d\n        continue;\x0d\n      return RegExpPrototypeTest(kNodeModulesRE\x2C filename);\x0d\n    }\x0d\n  }\x0d\n  return false;\x0d\n}\x0d\n\x0d\nfunction once(callback) {\x0d\n  let called = false;\x0d\n  return function(...args) {\x0d\n    if (called) return;\x0d\n    called = true;\x0d\n    ReflectApply(callback\x2C this\x2C args);\x0d\n  };\x0d\n}\x0d\n\x0d\nlet validateUint32;\x0d\n\x0d\nfunction sleep(msec) {\x0d\n  // Lazy-load to avoid a circular dependency.\x0d\n  if (validateUint32 === undefined)\x0d\n    ({ validateUint32 } = require('internal/validators'));\x0d\n\x0d\n  validateUint32(msec\x2C 'msec');\x0d\n  _sleep(msec);\x0d\n}\x0d\n\x0d\nfunction createDeferredPromise() {\x0d\n  let resolve;\x0d\n  let reject;\x0d\n  const promise = new Promise((res\x2C rej) => {\x0d\n    resolve = res;\x0d\n    reject = rej;\x0d\n  });\x0d\n\x0d\n  return { promise\x2C resolve\x2C reject };\x0d\n}\x0d\n\x0d\nlet DOMException;\x0d\nconst lazyDOMException = hideStackFrames((message\x2C name) => {\x0d\n  if (DOMException === undefined)\x0d\n    DOMException = internalBinding('messaging').DOMException;\x0d\n  return new DOMException(message\x2C name);\x0d\n});\x0d\n\x0d\nfunction structuredClone(value) {\x0d\n  const {\x0d\n    DefaultSerializer\x2C\x0d\n    DefaultDeserializer\x2C\x0d\n  } = require('v8');\x0d\n  const ser = new DefaultSerializer();\x0d\n  ser._getDataCloneError = hideStackFrames((message) =>\x0d\n    lazyDOMException(message\x2C 'DataCloneError'));\x0d\n  ser.writeValue(value);\x0d\n  const serialized = ser.releaseBuffer();\x0d\n\x0d\n  const des = new DefaultDeserializer(serialized);\x0d\n  return des.readValue();\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  assertCrypto\x2C\x0d\n  cachedResult\x2C\x0d\n  convertToValidSignal\x2C\x0d\n  createClassWrapper\x2C\x0d\n  createDeferredPromise\x2C\x0d\n  decorateErrorStack\x2C\x0d\n  deprecate\x2C\x0d\n  emitExperimentalWarning\x2C\x0d\n  filterDuplicateStrings\x2C\x0d\n  getConstructorOf\x2C\x0d\n  getSystemErrorMap\x2C\x0d\n  getSystemErrorName\x2C\x0d\n  isError\x2C\x0d\n  isInsideNodeModules\x2C\x0d\n  join\x2C\x0d\n  lazyDOMException\x2C\x0d\n  normalizeEncoding\x2C\x0d\n  once\x2C\x0d\n  promisify\x2C\x0d\n  sleep\x2C\x0d\n  spliceOne\x2C\x0d\n  structuredClone\x2C\x0d\n  toUSVString\x2C\x0d\n  removeColors\x2C\x0d\n\x0d\n  // Symbol used to customize promisify conversion\x0d\n  customPromisifyArgs: kCustomPromisifyArgsSymbol\x2C\x0d\n\x0d\n  // Symbol used to provide a custom inspect function for an object as an\x0d\n  // alternative to using 'inspect'\x0d\n  customInspectSymbol: SymbolFor('nodejs.util.inspect.custom')\x2C\x0d\n\x0d\n  // Used by the buffer module to capture an internal reference to the\x0d\n  // default isEncoding implementation\x2C just in case userland overrides it.\x0d\n  kIsEncodingSymbol: Symbol('kIsEncodingSymbol')\x2C\x0d\n  kVmBreakFirstLineSymbol: Symbol('kVmBreakFirstLineSymbol')\x0d\n};\x0d\n
code-source-info,0x2e2fa6bee46,16,2503,3720,C0O2503C26O2524C31O2536C37O2550C42O2567C44O2577C45O2636C53O2675C61O2697C66O2678C83O2735C87O2764C100O2764C105O2812C106O2812C108O3407C121O3407C126O3448C129O3455C135O3652C141O3678C145O3673C149O3699C151O3717,,
new,MemoryChunk,0x39aa2840000,262144
code-creation,Eval,10,334842,0x39aa28424fe,5, node:internal/socket_list:1:1,0x39aa28423a8,~
script-source,106,node:internal/socket_list,'use strict';\x0d\n\x0d\nconst { ERR_CHILD_CLOSED_BEFORE_REPLY } = require('internal/errors').codes;\x0d\n\x0d\nconst EventEmitter = require('events');\x0d\n\x0d\n// This object keeps track of the sockets that are sent\x0d\nclass SocketListSend extends EventEmitter {\x0d\n  constructor(child\x2C key) {\x0d\n    super();\x0d\n    this.key = key;\x0d\n    this.child = child;\x0d\n    child.once('exit'\x2C () => this.emit('exit'\x2C this));\x0d\n  }\x0d\n\x0d\n  _request(msg\x2C cmd\x2C swallowErrors\x2C callback) {\x0d\n    const self = this;\x0d\n\x0d\n    if (!this.child.connected) return onclose();\x0d\n    this.child._send(msg\x2C undefined\x2C swallowErrors);\x0d\n\x0d\n    function onclose() {\x0d\n      self.child.removeListener('internalMessage'\x2C onreply);\x0d\n      callback(new ERR_CHILD_CLOSED_BEFORE_REPLY());\x0d\n    }\x0d\n\x0d\n    function onreply(msg) {\x0d\n      if (!(msg.cmd === cmd && msg.key === self.key)) return;\x0d\n      self.child.removeListener('disconnect'\x2C onclose);\x0d\n      self.child.removeListener('internalMessage'\x2C onreply);\x0d\n\x0d\n      callback(null\x2C msg);\x0d\n    }\x0d\n\x0d\n    this.child.once('disconnect'\x2C onclose);\x0d\n    this.child.on('internalMessage'\x2C onreply);\x0d\n  }\x0d\n\x0d\n  close(callback) {\x0d\n    this._request({\x0d\n      cmd: 'NODE_SOCKET_NOTIFY_CLOSE'\x2C\x0d\n      key: this.key\x0d\n    }\x2C 'NODE_SOCKET_ALL_CLOSED'\x2C true\x2C callback);\x0d\n  }\x0d\n\x0d\n  getConnections(callback) {\x0d\n    this._request({\x0d\n      cmd: 'NODE_SOCKET_GET_COUNT'\x2C\x0d\n      key: this.key\x0d\n    }\x2C 'NODE_SOCKET_COUNT'\x2C false\x2C (err\x2C msg) => {\x0d\n      if (err) return callback(err);\x0d\n      callback(null\x2C msg.count);\x0d\n    });\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\n// This object keeps track of the sockets that are received\x0d\nclass SocketListReceive extends EventEmitter {\x0d\n  constructor(child\x2C key) {\x0d\n    super();\x0d\n\x0d\n    this.connections = 0;\x0d\n    this.key = key;\x0d\n    this.child = child;\x0d\n\x0d\n    function onempty(self) {\x0d\n      if (!self.child.connected) return;\x0d\n\x0d\n      self.child._send({\x0d\n        cmd: 'NODE_SOCKET_ALL_CLOSED'\x2C\x0d\n        key: self.key\x0d\n      }\x2C undefined\x2C true);\x0d\n    }\x0d\n\x0d\n    this.child.on('internalMessage'\x2C (msg) => {\x0d\n      if (msg.key !== this.key) return;\x0d\n\x0d\n      if (msg.cmd === 'NODE_SOCKET_NOTIFY_CLOSE') {\x0d\n        // Already empty\x0d\n        if (this.connections === 0) return onempty(this);\x0d\n\x0d\n        // Wait for sockets to get closed\x0d\n        this.once('empty'\x2C onempty);\x0d\n      } else if (msg.cmd === 'NODE_SOCKET_GET_COUNT') {\x0d\n        if (!this.child.connected) return;\x0d\n        this.child._send({\x0d\n          cmd: 'NODE_SOCKET_COUNT'\x2C\x0d\n          key: this.key\x2C\x0d\n          count: this.connections\x0d\n        });\x0d\n      }\x0d\n    });\x0d\n  }\x0d\n\x0d\n  add(obj) {\x0d\n    this.connections++;\x0d\n\x0d\n    // Notify the previous owner of the socket about its state change\x0d\n    obj.socket.once('close'\x2C () => {\x0d\n      this.connections--;\x0d\n\x0d\n      if (this.connections === 0) this.emit('empty'\x2C this);\x0d\n    });\x0d\n  }\x0d\n}\x0d\n\x0d\nmodule.exports = { SocketListSend\x2C SocketListReceive };\x0d\n
code-source-info,0x39aa28424fe,106,0,2813,C0O0C4O2813,,
code-creation,Function,10,335074,0x39aa2842b3e,126, node:internal/socket_list:1:1,0x39aa2842478,~
code-source-info,0x39aa2842b3e,106,0,2813,C0O0C8O59C11O59C16O85C21O25C27O117C30O117C35O225C73O1583C101O2756C108O2775C114O2791C120O2771C125O2812,,
code-creation,LazyCompile,10,335641,0x39aa28434fe,14,customPromiseExecFunction node:child_process:230:35,0x2e2fa69a438,~
code-source-info,0x39aa28434fe,99,6792,7172,C0O6792C9O6807C13O7169,,
code-creation,LazyCompile,10,335922,0x39aa2845536,129,_forkChild node:child_process:169:20,0x2e2fa699ed8,~
code-source-info,0x39aa2845536,99,5047,5529,C0O5047C8O5111C19O5120C22O5134C29O5111C35O5145C40O5145C45O5160C50O5160C54O5188C72O5188C77O5188C79O5236C84O5244C97O5244C103O5379C108O5387C121O5387C128O5528,,
tick,0x7ffe67f8d784,339165,1,0x7ff723fa93d0,6,0x7ff7249760e0,0x39aa284555e,0x2e2fa698ea4,0x2e2fa6854de,0x3979d3bef45
code-creation,LazyCompile,10,344095,0x39aa2845f36,396,setupChannel node:internal/child_process:571:22,0x2e2fa6a03e0,~
code-source-info,0x39aa2845f
code-creation,LazyCompile,10,344308,0x39aa284870e,72,Control node:internal/child_process:529:14,0x2e2fa6a0c18,~
code-source-info,0x39aa284870e,100,14308,14402,C3O14325C11O14325C40O14339C48O14353C52O14369C59O14374C64O14392C71O14401,,
code-creation,LazyCompile,10,344405,0x39aa2848846,21,EventEmitter node:events:207:22,0x423ed6aeb0,~
code-source-info,0x39aa2848846,23,6453,6503,C0O6465C3O6478C8O6483C13O6483C20O6502,,
code-creation,LazyCompile,10,344538,0x39aa284898e,149,EventEmitter.init node:events:326:29,0x423ed6b2a8,~
code-source-info,0x39aa284898e,23,9985,10593,C0O10008C6O10045C13O10057C16O10057C21O10083C25O10053C30O10100C32O10115C37O10115C41O10113C45O10140C46O10158C50O10199C60O10192C64O10234C71O10242C80O10270C85O10291C93O10270C98O10345C100O10350C105O10362C108O10375C113O10362C117O10360C123O10535C125O10540C131O10565C138O10575C140O10574C143O10550C148O10592,,
code-creation,Eval,10,345056,0x39aa2849216,5, node:internal/child_process/serialization:1:1,0x39aa2848f30,~
script-source,107,node:internal/child_process/serialization,'use strict';\x0d\n\x0d\nconst {\x0d\n  JSONParse\x2C\x0d\n  JSONStringify\x2C\x0d\n  StringPrototypeSplit\x2C\x0d\n  Symbol\x2C\x0d\n  TypedArrayPrototypeSubarray\x2C\x0d\n} = primordials;\x0d\nconst { Buffer } = require('buffer');\x0d\nconst { StringDecoder } = require('string_decoder');\x0d\nconst v8 = require('v8');\x0d\nconst { isArrayBufferView } = require('internal/util/types');\x0d\nconst assert = require('internal/assert');\x0d\nconst { streamBaseState\x2C kLastWriteWasAsync } = internalBinding('stream_wrap');\x0d\n\x0d\nconst kMessageBuffer = Symbol('kMessageBuffer');\x0d\nconst kJSONBuffer = Symbol('kJSONBuffer');\x0d\nconst kStringDecoder = Symbol('kStringDecoder');\x0d\n\x0d\n// Extend V8's serializer APIs to give more JSON-like behaviour in\x0d\n// some cases; in particular\x2C for native objects this serializes them the same\x0d\n// way that JSON does rather than throwing an exception.\x0d\nconst kArrayBufferViewTag = 0;\x0d\nconst kNotArrayBufferViewTag = 1;\x0d\nclass ChildProcessSerializer extends v8.DefaultSerializer {\x0d\n  _writeHostObject(object) {\x0d\n    if (isArrayBufferView(object)) {\x0d\n      this.writeUint32(kArrayBufferViewTag);\x0d\n      return super._writeHostObject(object);\x0d\n    }\x0d\n    this.writeUint32(kNotArrayBufferViewTag);\x0d\n    this.writeValue({ ...object });\x0d\n  }\x0d\n}\x0d\n\x0d\nclass ChildProcessDeserializer extends v8.DefaultDeserializer {\x0d\n  _readHostObject() {\x0d\n    const tag = this.readUint32();\x0d\n    if (tag === kArrayBufferViewTag)\x0d\n      return super._readHostObject();\x0d\n\x0d\n    assert(tag === kNotArrayBufferViewTag);\x0d\n    return this.readValue();\x0d\n  }\x0d\n}\x0d\n\x0d\n// Messages are parsed in either of the following formats:\x0d\n// - Newline-delimited JSON\x2C or\x0d\n// - V8-serialized buffers\x2C prefixed with their length as a big endian uint32\x0d\n//   (aka 'advanced')\x0d\nconst advanced = {\x0d\n  initMessageChannel(channel) {\x0d\n    channel[kMessageBuffer] = Buffer.alloc(0);\x0d\n    channel.buffering = false;\x0d\n  }\x2C\x0d\n\x0d\n  *parseChannelMessages(channel\x2C readData) {\x0d\n    if (readData.length === 0) return;\x0d\n\x0d\n    let messageBuffer = Buffer.concat([channel[kMessageBuffer]\x2C readData]);\x0d\n    while (messageBuffer.length > 4) {\x0d\n      const size = messageBuffer.readUInt32BE();\x0d\n      if (messageBuffer.length < 4 + size) {\x0d\n        break;\x0d\n      }\x0d\n\x0d\n      const deserializer = new ChildProcessDeserializer(\x0d\n        TypedArrayPrototypeSubarray(messageBuffer\x2C 4\x2C 4 + size));\x0d\n      messageBuffer = TypedArrayPrototypeSubarray(messageBuffer\x2C 4 + size);\x0d\n\x0d\n      deserializer.readHeader();\x0d\n      yield deserializer.readValue();\x0d\n    }\x0d\n    channel[kMessageBuffer] = messageBuffer;\x0d\n    channel.buffering = messageBuffer.length > 0;\x0d\n  }\x2C\x0d\n\x0d\n  writeChannelMessage(channel\x2C req\x2C message\x2C handle) {\x0d\n    const ser = new ChildProcessSerializer();\x0d\n    ser.writeHeader();\x0d\n    ser.writeValue(message);\x0d\n    const serializedMessage = ser.releaseBuffer();\x0d\n    const sizeBuffer = Buffer.allocUnsafe(4);\x0d\n    sizeBuffer.writeUInt32BE(serializedMessage.length);\x0d\n\x0d\n    const buffer = Buffer.concat([\x0d\n      sizeBuffer\x2C\x0d\n      serializedMessage\x2C\x0d\n    ]);\x0d\n    const result = channel.writeBuffer(req\x2C buffer\x2C handle);\x0d\n    // Mirror what stream_base_commons.js does for Buffer retention.\x0d\n    if (streamBaseState[kLastWriteWasAsync])\x0d\n      req.buffer = buffer;\x0d\n    return result;\x0d\n  }\x2C\x0d\n};\x0d\n\x0d\nconst json = {\x0d\n  initMessageChannel(channel) {\x0d\n    channel[kJSONBuffer] = '';\x0d\n    channel[kStringDecoder] = undefined;\x0d\n  }\x2C\x0d\n\x0d\n  *parseChannelMessages(channel\x2C readData) {\x0d\n    if (readData.length === 0) return;\x0d\n\x0d\n    if (channel[kStringDecoder] === undefined)\x0d\n      channel[kStringDecoder] = new StringDecoder('utf8');\x0d\n    const chunks =\x0d\n      StringPrototypeSplit(channel[kStringDecoder].write(readData)\x2C '\\n');\x0d\n    const numCompleteChunks = chunks.length - 1;\x0d\n    // Last line does not have trailing linebreak\x0d\n    const incompleteChunk = chunks[numCompleteChunks];\x0d\n    if (numCompleteChunks === 0) {\x0d\n      channel[kJSONBuffer] += incompleteChunk;\x0d\n    } else {\x0d\n      chunks[0] = channel[kJSONBuffer] + chunks[0];\x0d\n      for (let i = 0; i < numCompleteChunks; i++)\x0d\n        yield JSONParse(chunks[i]);\x0d\n      channel[kJSONBuffer] = incompleteChunk;\x0d\n    }\x0d\n    channel.buffering = channel[kJSONBuffer].length !== 0;\x0d\n  }\x2C\x0d\n\x0d\n  writeChannelMessage(channel\x2C req\x2C message\x2C handle) {\x0d\n    const string = JSONStringify(message) + '\\n';\x0d\n    return channel.writeUtf8String(req\x2C string\x2C handle);\x0d\n  }\x2C\x0d\n};\x0d\n\x0d\nmodule.exports = { advanced\x2C json };\x0d\n
code-source-info,0x39aa2849216,107,0,4335,C0O0C4O4335,,
code-creation,Function,10,345450,0x39aa2849a7e,369, node:internal/child_process/serialization:1:1,0x39aa2849190,~
code-source-info,0x39aa2849a7e,107,0,4335,C0O0C56O28C62O42C68O60C74O85C79O96C85O163C88O163C93O152C99O209C102O209C107O191C113O248C116O248C121O294C124O294C129O272C135O342C138O342C142O342C144O419C147O419C152O379C158O396C164O477C167O477C171O477C173O524C176O524C180O524C182O571C185O571C189O571C191O834C192O834C194O869C196O869C202O913C237O873C243O1237C278O1195C280O1695C285O1700C293O1821C301O2538C312O3192C317O3197C325O3312C333O4122C344O4297C351O4316C357O4326C363O4312C368O4334,,
code-creation,LazyCompile,10,345778,0x39aa284a72e,23,initMessageChannel node:internal/child_process/serialization:100:21,0x39aa2849478,~
code-source-info,0x39aa284a72e,107,3215,3305,C0O3232C2O3240C7O3253C11O3264C13O3272C17O3288C22O3304,,
code-creation,LazyCompile,10,345912,0x39aa284ad86,19,_getMaxListeners node:events:403:26,0x423ed6b478,~
code-source-info,0x39aa284ad86,23,12251,12379,C0O12272C6O12306C9O12326C13O12346C14O12362C18O12376,,
code-creation,LazyCompile,10,345975,0x39aa284ae7e,5,get node:events:263:16,0x423ed6b098,~
code-source-info,0x39aa284ae7e,23,8022,8064,C0O8032C4O8059,,
code-creation,LazyCompile,10,346084,0x39aa284b1de,322,arrayClone node:events:883:20,0x423ed6bd40,~
code-source-info,0x39aa284b1de,23,26206,26671,C0O26348C42O26371C50O26382C62O26390C71O26395C72O26409C80O26420C92O26428C104O26436C113O26441C114O26455C122O26466C134O26474C146O26482C158O26490C167O26495C168O26509C176O26520C188O26528C200O26536C212O26544C224O26552C233O26557C234O26571C242O26582C254O26590C266O26598C278O26606C290O26614C302O26622C311O26627C312O26636C317O26643C321O26668,,
code-creation,LazyCompile,10,346208,0x39aa284b4ae,22, node:internal/child_process:706:36,0x39aa2845a50,~
code-source-info,0x39aa284b4ae,100,20095,20508,C0O20107C5O20115C15O20115C21O20507,,
code-creation,LazyCompile,10,346333,0x39aa284b74e,368,nextTick node:internal/process/task_queues:104:18,0x3d773fda9f0,~
script-source,32,node:internal/process/task_queues,'use strict';\x0d\n\x0d\nconst {\x0d\n  Array\x2C\x0d\n  FunctionPrototypeBind\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  // For easy access to the nextTick state in the C++ land\x2C\x0d\n  // and to avoid unnecessary calls into JS land.\x0d\n  tickInfo\x2C\x0d\n  // Used to run V8's micro task queue.\x0d\n  runMicrotasks\x2C\x0d\n  setTickCallback\x2C\x0d\n  enqueueMicrotask\x0d\n} = internalBinding('task_queue');\x0d\n\x0d\nconst {\x0d\n  setHasRejectionToWarn\x2C\x0d\n  hasRejectionToWarn\x2C\x0d\n  listenForRejections\x2C\x0d\n  processPromiseRejections\x0d\n} = require('internal/process/promises');\x0d\n\x0d\nconst {\x0d\n  getDefaultTriggerAsyncId\x2C\x0d\n  newAsyncId\x2C\x0d\n  initHooksExist\x2C\x0d\n  destroyHooksExist\x2C\x0d\n  emitInit\x2C\x0d\n  emitBefore\x2C\x0d\n  emitAfter\x2C\x0d\n  emitDestroy\x2C\x0d\n  symbols: { async_id_symbol\x2C trigger_async_id_symbol }\x0d\n} = require('internal/async_hooks');\x0d\nconst FixedQueue = require('internal/fixed_queue');\x0d\n\x0d\nconst {\x0d\n  validateCallback\x2C\x0d\n  validateFunction\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst { AsyncResource } = require('async_hooks');\x0d\n\x0d\n// *Must* match Environment::TickInfo::Fields in src/env.h.\x0d\nconst kHasTickScheduled = 0;\x0d\n\x0d\nfunction hasTickScheduled() {\x0d\n  return tickInfo[kHasTickScheduled] === 1;\x0d\n}\x0d\n\x0d\nfunction setHasTickScheduled(value) {\x0d\n  tickInfo[kHasTickScheduled] = value ? 1 : 0;\x0d\n}\x0d\n\x0d\nconst queue = new FixedQueue();\x0d\n\x0d\n// Should be in sync with RunNextTicksNative in node_task_queue.cc\x0d\nfunction runNextTicks() {\x0d\n  if (!hasTickScheduled() && !hasRejectionToWarn())\x0d\n    runMicrotasks();\x0d\n  if (!hasTickScheduled() && !hasRejectionToWarn())\x0d\n    return;\x0d\n\x0d\n  processTicksAndRejections();\x0d\n}\x0d\n\x0d\nfunction processTicksAndRejections() {\x0d\n  let tock;\x0d\n  do {\x0d\n    while ((tock = queue.shift()) !== null) {\x0d\n      const asyncId = tock[async_id_symbol];\x0d\n      emitBefore(asyncId\x2C tock[trigger_async_id_symbol]\x2C tock);\x0d\n\x0d\n      try {\x0d\n        const callback = tock.callback;\x0d\n        if (tock.args === undefined) {\x0d\n          callback();\x0d\n        } else {\x0d\n          const args = tock.args;\x0d\n          switch (args.length) {\x0d\n            case 1: callback(args[0]); break;\x0d\n            case 2: callback(args[0]\x2C args[1]); break;\x0d\n            case 3: callback(args[0]\x2C args[1]\x2C args[2]); break;\x0d\n            case 4: callback(args[0]\x2C args[1]\x2C args[2]\x2C args[3]); break;\x0d\n            default: callback(...args);\x0d\n          }\x0d\n        }\x0d\n      } finally {\x0d\n        if (destroyHooksExist())\x0d\n          emitDestroy(asyncId);\x0d\n      }\x0d\n\x0d\n      emitAfter(asyncId);\x0d\n    }\x0d\n    runMicrotasks();\x0d\n  } while (!queue.isEmpty() || processPromiseRejections());\x0d\n  setHasTickScheduled(false);\x0d\n  setHasRejectionToWarn(false);\x0d\n}\x0d\n\x0d\n// `nextTick()` will not enqueue any callback when the process is about to\x0d\n// exit since the callback would not have a chance to be executed.\x0d\nfunction nextTick(callback) {\x0d\n  validateCallback(callback);\x0d\n\x0d\n  if (process._exiting)\x0d\n    return;\x0d\n\x0d\n  let args;\x0d\n  switch (arguments.length) {\x0d\n    case 1: break;\x0d\n    case 2: args = [arguments[1]]; break;\x0d\n    case 3: args = [arguments[1]\x2C arguments[2]]; break;\x0d\n    case 4: args = [arguments[1]\x2C arguments[2]\x2C arguments[3]]; break;\x0d\n    default:\x0d\n      args = new Array(arguments.length - 1);\x0d\n      for (let i = 1; i < arguments.length; i++)\x0d\n        args[i - 1] = arguments[i];\x0d\n  }\x0d\n\x0d\n  if (queue.isEmpty())\x0d\n    setHasTickScheduled(true);\x0d\n  const asyncId = newAsyncId();\x0d\n  const triggerAsyncId = getDefaultTriggerAsyncId();\x0d\n  const tickObject = {\x0d\n    [async_id_symbol]: asyncId\x2C\x0d\n    [trigger_async_id_symbol]: triggerAsyncId\x2C\x0d\n    callback\x2C\x0d\n    args\x0d\n  };\x0d\n  if (initHooksExist())\x0d\n    emitInit(asyncId\x2C 'TickObject'\x2C triggerAsyncId\x2C tickObject);\x0d\n  queue.push(tickObject);\x0d\n}\x0d\n\x0d\nfunction runMicrotask() {\x0d\n  this.runInAsyncScope(() => {\x0d\n    const callback = this.callback;\x0d\n    try {\x0d\n      callback();\x0d\n    } finally {\x0d\n      this.emitDestroy();\x0d\n    }\x0d\n  });\x0d\n}\x0d\n\x0d\nconst defaultMicrotaskResourceOpts = { requireManualDestroy: true };\x0d\n\x0d\nfunction queueMicrotask(callback) {\x0d\n  validateFunction(callback\x2C 'callback');\x0d\n\x0d\n  const asyncResource = new AsyncResource(\x0d\n    'Microtask'\x2C\x0d\n    defaultMicrotaskResourceOpts\x0d\n  );\x0d\n  asyncResource.callback = callback;\x0d\n\x0d\n  enqueueMicrotask(FunctionPrototypeBind(runMicrotask\x2C asyncResource));\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  setupTaskQueue() {\x0d\n    // Sets the per-isolate promise rejection callback\x0d\n    listenForRejections();\x0d\n    // Sets the callback to be run in every tick.\x0d\n    setTickCallback(processTicksAndRejections);\x0d\n    return {\x0d\n      nextTick\x2C\x0d\n      runNextTicks\x0d\n    };\x0d\n  }\x2C\x0d\n  queueMicrotask\x0d\n};\x0d\n
code-source-info,0x39aa284b74e
code-creation,LazyCompile,10,346718,0x39aa284bfbe,21, node:internal/validators:222:42,0x13fcdd3cd50,~
code-source-info,0x39aa284bfbe,15,7036,7140,C0O7055C6O7096C13O7102C18O7096C20O7139,,
code-creation,LazyCompile,10,346772,0x39aa284c0be,15,isEmpty node:internal/fixed_queue:95:10,0x3d773fdfc20,~
script-source,34,node:internal/fixed_queue,'use strict';\x0d\n\x0d\nconst {\x0d\n  Array\x2C\x0d\n} = primordials;\x0d\n\x0d\n// Currently optimal queue size\x2C tested on V8 6.0 - 6.6. Must be power of two.\x0d\nconst kSize = 2048;\x0d\nconst kMask = kSize - 1;\x0d\n\x0d\n// The FixedQueue is implemented as a singly-linked list of fixed-size\x0d\n// circular buffers. It looks something like this:\x0d\n//\x0d\n//  head                                                       tail\x0d\n//    |                                                          |\x0d\n//    v                                                          v\x0d\n// +-----------+ <-----\\       +-----------+ <------\\         +-----------+\x0d\n// |  [null]   |        \\----- |   next    |         \\------- |   next    |\x0d\n// +-----------+               +-----------+                  +-----------+\x0d\n// |   item    | <-- bottom    |   item    | <-- bottom       |  [empty]  |\x0d\n// |   item    |               |   item    |                  |  [empty]  |\x0d\n// |   item    |               |   item    |                  |  [empty]  |\x0d\n// |   item    |               |   item    |                  |  [empty]  |\x0d\n// |   item    |               |   item    |       bottom --> |   item    |\x0d\n// |   item    |               |   item    |                  |   item    |\x0d\n// |    ...    |               |    ...    |                  |    ...    |\x0d\n// |   item    |               |   item    |                  |   item    |\x0d\n// |   item    |               |   item    |                  |   item    |\x0d\n// |  [empty]  | <-- top       |   item    |                  |   item    |\x0d\n// |  [empty]  |               |   item    |                  |   item    |\x0d\n// |  [empty]  |               |  [empty]  | <-- top  top --> |  [empty]  |\x0d\n// +-----------+               +-----------+                  +-----------+\x0d\n//\x0d\n// Or\x2C if there is only one circular buffer\x2C it looks something\x0d\n// like either of these:\x0d\n//\x0d\n//  head   tail                                 head   tail\x0d\n//    |     |                                     |     |\x0d\n//    v     v                                     v     v\x0d\n// +-----------+                               +-----------+\x0d\n// |  [null]   |                               |  [null]   |\x0d\n// +-----------+                               +-----------+\x0d\n// |  [empty]  |                               |   item    |\x0d\n// |  [empty]  |                               |   item    |\x0d\n// |   item    | <-- bottom            top --> |  [empty]  |\x0d\n// |   item    |                               |  [empty]  |\x0d\n// |  [empty]  | <-- top            bottom --> |   item    |\x0d\n// |  [empty]  |                               |   item    |\x0d\n// +-----------+                               +-----------+\x0d\n//\x0d\n// Adding a value means moving `top` forward by one\x2C removing means\x0d\n// moving `bottom` forward by one. After reaching the end\x2C the queue\x0d\n// wraps around.\x0d\n//\x0d\n// When `top === bottom` the current queue is empty and when\x0d\n// `top + 1 === bottom` it's full. This wastes a single space of storage\x0d\n// but allows much quicker checks.\x0d\n\x0d\nclass FixedCircularBuffer {\x0d\n  constructor() {\x0d\n    this.bottom = 0;\x0d\n    this.top = 0;\x0d\n    this.list = new Array(kSize);\x0d\n    this.next = null;\x0d\n  }\x0d\n\x0d\n  isEmpty() {\x0d\n    return this.top === this.bottom;\x0d\n  }\x0d\n\x0d\n  isFull() {\x0d\n    return ((this.top + 1) & kMask) === this.bottom;\x0d\n  }\x0d\n\x0d\n  push(data) {\x0d\n    this.list[this.top] = data;\x0d\n    this.top = (this.top + 1) & kMask;\x0d\n  }\x0d\n\x0d\n  shift() {\x0d\n    const nextItem = this.list[this.bottom];\x0d\n    if (nextItem === undefined)\x0d\n      return null;\x0d\n    this.list[this.bottom] = undefined;\x0d\n    this.bottom = (this.bottom + 1) & kMask;\x0d\n    return nextItem;\x0d\n  }\x0d\n}\x0d\n\x0d\nmodule.exports = class FixedQueue {\x0d\n  constructor() {\x0d\n    this.head = this.tail = new FixedCircularBuffer();\x0d\n  }\x0d\n\x0d\n  isEmpty() {\x0d\n    return this.head.isEmpty();\x0d\n  }\x0d\n\x0d\n  push(data) {\x0d\n    if (this.head.isFull()) {\x0d\n      // Head is full: Creates a new queue\x2C sets the old queue's `.next` to it\x2C\x0d\n      // and sets it as the new main queue.\x0d\n      this.head = this.head.next = new FixedCircularBuffer();\x0d\n    }\x0d\n    this.head.push(data);\x0d\n  }\x0d\n\x0d\n  shift() {\x0d\n    const tail = this.tail;\x0d\n    const next = tail.shift();\x0d\n    if (tail.isEmpty() && tail.next !== null) {\x0d\n      // If there is another queue\x2C it forms the new tail.\x0d\n      this.tail = tail.next;\x0d\n    }\x0d\n    return next;\x0d\n  }\x0d\n};\x0d\n
code-source-info,0x39aa284c0be,34,3731,3773,C0O3753C5O3758C10O3758C14O3768,,
code-creation,LazyCompile,10,347045,0x39aa284c576,13,isEmpty node:internal/fixed_queue:67:10,0x3d773fdf9b0,~
code-source-info,0x39aa284c576,34,3150,3197,C0O3172C5O3185C9O3176C12O3192,,
code-creation,LazyCompile,10,347093,0x39aa284c666,25,setHasTickScheduled node:internal/process/task_queues:52:29,0x3d773fda900,~
code-source-info,0x39aa284c666,32,1155,1215,C0O1168C7O1177C12O1198C19O1196C24O1214,,
code-creation,LazyCompile,10,347174,0x39aa284c75e,23,newAsyncId node:internal/async_hooks:417:20,0x13fcdd38320,~
script-source,13,node:internal/async_hooks,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  ErrorCaptureStackTrace\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  Symbol\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst promiseHooks = require('internal/promise_hooks');\x0d\n\x0d\nconst async_wrap = internalBinding('async_wrap');\x0d\nconst { setCallbackTrampoline } = async_wrap;\x0d\n/* async_hook_fields is a Uint32Array wrapping the uint32_t array of\x0d\n * Environment::AsyncHooks::fields_[]. Each index tracks the number of active\x0d\n * hooks for each type.\x0d\n *\x0d\n * async_id_fields is a Float64Array wrapping the double array of\x0d\n * Environment::AsyncHooks::async_id_fields_[]. Each index contains the ids for\x0d\n * the various asynchronous states of the application. These are:\x0d\n *  kExecutionAsyncId: The async_id assigned to the resource responsible for the\x0d\n *    current execution stack.\x0d\n *  kTriggerAsyncId: The async_id of the resource that caused (or 'triggered')\x0d\n *    the resource corresponding to the current execution stack.\x0d\n *  kAsyncIdCounter: Incremental counter tracking the next assigned async_id.\x0d\n *  kDefaultTriggerAsyncId: Written immediately before a resource's constructor\x0d\n *    that sets the value of the init()'s triggerAsyncId. The precedence order\x0d\n *    of retrieving the triggerAsyncId value is:\x0d\n *    1. the value passed directly to the constructor\x0d\n *    2. value set in kDefaultTriggerAsyncId\x0d\n *    3. executionAsyncId of the current resource.\x0d\n *\x0d\n * async_ids_stack is a Float64Array that contains part of the async ID\x0d\n * stack. Each pushAsyncContext() call adds two doubles to it\x2C and each\x0d\n * popAsyncContext() call removes two doubles from it.\x0d\n * It has a fixed size\x2C so if that is exceeded\x2C calls to the native\x0d\n * side are used instead in pushAsyncContext() and popAsyncContext().\x0d\n */\x0d\nconst {\x0d\n  async_hook_fields\x2C\x0d\n  async_id_fields\x2C\x0d\n  execution_async_resources\x0d\n} = async_wrap;\x0d\n// Store the pair executionAsyncId and triggerAsyncId in a AliasedFloat64Array\x0d\n// in Environment::AsyncHooks::async_ids_stack_ which tracks the resource\x0d\n// responsible for the current execution stack. This is unwound as each resource\x0d\n// exits. In the case of a fatal exception this stack is emptied after calling\x0d\n// each hook's after() callback.\x0d\nconst {\x0d\n  pushAsyncContext: pushAsyncContext_\x2C\x0d\n  popAsyncContext: popAsyncContext_\x2C\x0d\n  executionAsyncResource: executionAsyncResource_\x2C\x0d\n  clearAsyncIdStack\x2C\x0d\n} = async_wrap;\x0d\n// Properties in active_hooks are used to keep track of the set of hooks being\x0d\n// executed in case another hook is enabled/disabled. The new set of hooks is\x0d\n// then restored once the active set of hooks is finished executing.\x0d\nconst active_hooks = {\x0d\n  // Array of all AsyncHooks that will be iterated whenever an async event\x0d\n  // fires. Using var instead of (preferably const) in order to assign\x0d\n  // active_hooks.tmp_array if a hook is enabled/disabled during hook\x0d\n  // execution.\x0d\n  array: []\x2C\x0d\n  // Use a counter to track nested calls of async hook callbacks and make sure\x0d\n  // the active_hooks.array isn't altered mid execution.\x0d\n  call_depth: 0\x2C\x0d\n  // Use to temporarily store and updated active_hooks.array if the user\x0d\n  // enables or disables a hook while hooks are being processed. If a hook is\x0d\n  // enabled() or disabled() during hook execution then the current set of\x0d\n  // active hooks is duplicated and set equal to active_hooks.tmp_array. Any\x0d\n  // subsequent changes are on the duplicated array. When all hooks have\x0d\n  // completed executing active_hooks.tmp_array is assigned to\x0d\n  // active_hooks.array.\x0d\n  tmp_array: null\x2C\x0d\n  // Keep track of the field counts held in active_hooks.tmp_array. Because the\x0d\n  // async_hook_fields can't be reassigned\x2C store each uint32 in an array that\x0d\n  // is written back to async_hook_fields when active_hooks.array is restored.\x0d\n  tmp_fields: null\x0d\n};\x0d\n\x0d\nconst { registerDestroyHook } = async_wrap;\x0d\nconst { enqueueMicrotask } = internalBinding('task_queue');\x0d\nconst { resource_symbol\x2C owner_symbol } = internalBinding('symbols');\x0d\n\x0d\n// Each constant tracks how many callbacks there are for any given step of\x0d\n// async execution. These are tracked so if the user didn't include callbacks\x0d\n// for a given step\x2C that step can bail out early.\x0d\nconst {\x0d\n  kInit\x2C kBefore\x2C kAfter\x2C kDestroy\x2C kTotals\x2C kPromiseResolve\x2C\x0d\n  kCheck\x2C kExecutionAsyncId\x2C kAsyncIdCounter\x2C kTriggerAsyncId\x2C\x0d\n  kDefaultTriggerAsyncId\x2C kStackLength\x2C kUsesExecutionAsyncResource\x2C\x0d\n} = async_wrap.constants;\x0d\n\x0d\nconst { async_id_symbol\x2C\x0d\n        trigger_async_id_symbol } = internalBinding('symbols');\x0d\n\x0d\n// Lazy load of internal/util/inspect;\x0d\nlet inspect;\x0d\n\x0d\n// Used in AsyncHook and AsyncResource.\x0d\nconst init_symbol = Symbol('init');\x0d\nconst before_symbol = Symbol('before');\x0d\nconst after_symbol = Symbol('after');\x0d\nconst destroy_symbol = Symbol('destroy');\x0d\nconst promise_resolve_symbol = Symbol('promiseResolve');\x0d\nconst emitBeforeNative = emitHookFactory(before_symbol\x2C 'emitBeforeNative');\x0d\nconst emitAfterNative = emitHookFactory(after_symbol\x2C 'emitAfterNative');\x0d\nconst emitDestroyNative = emitHookFactory(destroy_symbol\x2C 'emitDestroyNative');\x0d\nconst emitPromiseResolveNative =\x0d\n    emitHookFactory(promise_resolve_symbol\x2C 'emitPromiseResolveNative');\x0d\n\x0d\nlet domain_cb;\x0d\nfunction useDomainTrampoline(fn) {\x0d\n  domain_cb = fn;\x0d\n}\x0d\n\x0d\nfunction callbackTrampoline(asyncId\x2C resource\x2C cb\x2C ...args) {\x0d\n  const index = async_hook_fields[kStackLength] - 1;\x0d\n  execution_async_resources[index] = resource;\x0d\n\x0d\n  if (asyncId !== 0 && hasHooks(kBefore))\x0d\n    emitBeforeNative(asyncId);\x0d\n\x0d\n  let result;\x0d\n  if (asyncId === 0 && typeof domain_cb === 'function') {\x0d\n    args.unshift(cb);\x0d\n    result = domain_cb.apply(this\x2C args);\x0d\n  } else {\x0d\n    result = cb.apply(this\x2C args);\x0d\n  }\x0d\n\x0d\n  if (asyncId !== 0 && hasHooks(kAfter))\x0d\n    emitAfterNative(asyncId);\x0d\n\x0d\n  execution_async_resources.pop();\x0d\n  return result;\x0d\n}\x0d\n\x0d\nconst topLevelResource = {};\x0d\n\x0d\nfunction executionAsyncResource() {\x0d\n  // Indicate to the native layer that this function is likely to be used\x2C\x0d\n  // in which case it will inform JS about the current async resource via\x0d\n  // the trampoline above.\x0d\n  async_hook_fields[kUsesExecutionAsyncResource] = 1;\x0d\n\x0d\n  const index = async_hook_fields[kStackLength] - 1;\x0d\n  if (index === -1) return topLevelResource;\x0d\n  const resource = execution_async_resources[index] ||\x0d\n    executionAsyncResource_(index);\x0d\n  return lookupPublicResource(resource);\x0d\n}\x0d\n\x0d\nfunction inspectExceptionValue(e) {\x0d\n  inspect ??= require('internal/util/inspect').inspect;\x0d\n  return { message: inspect(e) };\x0d\n}\x0d\n\x0d\n// Used to fatally abort the process if a callback throws.\x0d\nfunction fatalError(e) {\x0d\n  if (typeof e?.stack === 'string') {\x0d\n    process._rawDebug(e.stack);\x0d\n  } else {\x0d\n    const o = inspectExceptionValue(e);\x0d\n    ErrorCaptureStackTrace(o\x2C fatalError);\x0d\n    process._rawDebug(o.stack);\x0d\n  }\x0d\n\x0d\n  const { getOptionValue } = require('internal/options');\x0d\n  if (getOptionValue('--abort-on-uncaught-exception')) {\x0d\n    process.abort();\x0d\n  }\x0d\n  process.exit(1);\x0d\n}\x0d\n\x0d\nfunction lookupPublicResource(resource) {\x0d\n  if (typeof resource !== 'object' || resource === null) return resource;\x0d\n  // TODO(addaleax): Merge this with owner_symbol and use it across all\x0d\n  // AsyncWrap instances.\x0d\n  const publicResource = resource[resource_symbol];\x0d\n  if (publicResource !== undefined)\x0d\n    return publicResource;\x0d\n  return resource;\x0d\n}\x0d\n\x0d\n// Emit From Native //\x0d\n\x0d\n// Used by C++ to call all init() callbacks. Because some state can be setup\x0d\n// from C++ there's no need to perform all the same operations as in\x0d\n// emitInitScript.\x0d\nfunction emitInitNative(asyncId\x2C type\x2C triggerAsyncId\x2C resource) {\x0d\n  active_hooks.call_depth += 1;\x0d\n  resource = lookupPublicResource(resource);\x0d\n  // Use a single try/catch for all hooks to avoid setting up one per iteration.\x0d\n  try {\x0d\n    // Using var here instead of let because "for (var ...)" is faster than let.\x0d\n    // Refs: https://github.com/nodejs/node/pull/30380#issuecomment-552948364\x0d\n    for (var i = 0; i < active_hooks.array.length; i++) {\x0d\n      if (typeof active_hooks.array[i][init_symbol] === 'function') {\x0d\n        active_hooks.array[i][init_symbol](\x0d\n          asyncId\x2C type\x2C triggerAsyncId\x2C\x0d\n          resource\x0d\n        );\x0d\n      }\x0d\n    }\x0d\n  } catch (e) {\x0d\n    fatalError(e);\x0d\n  } finally {\x0d\n    active_hooks.call_depth -= 1;\x0d\n  }\x0d\n\x0d\n  // Hooks can only be restored if there have been no recursive hook calls.\x0d\n  // Also the active hooks do not need to be restored if enable()/disable()\x0d\n  // weren't called during hook execution\x2C in which case active_hooks.tmp_array\x0d\n  // will be null.\x0d\n  if (active_hooks.call_depth === 0 && active_hooks.tmp_array !== null) {\x0d\n    restoreActiveHooks();\x0d\n  }\x0d\n}\x0d\n\x0d\n// Called from native. The asyncId stack handling is taken care of there\x0d\n// before this is called.\x0d\nfunction emitHook(symbol\x2C asyncId) {\x0d\n  active_hooks.call_depth += 1;\x0d\n  // Use a single try/catch for all hook to avoid setting up one per\x0d\n  // iteration.\x0d\n  try {\x0d\n    // Using var here instead of let because "for (var ...)" is faster than let.\x0d\n    // Refs: https://github.com/nodejs/node/pull/30380#issuecomment-552948364\x0d\n    for (var i = 0; i < active_hooks.array.length; i++) {\x0d\n      if (typeof active_hooks.array[i][symbol] === 'function') {\x0d\n        active_hooks.array[i][symbol](asyncId);\x0d\n      }\x0d\n    }\x0d\n  } catch (e) {\x0d\n    fatalError(e);\x0d\n  } finally {\x0d\n    active_hooks.call_depth -= 1;\x0d\n  }\x0d\n\x0d\n  // Hooks can only be restored if there have been no recursive hook calls.\x0d\n  // Also the active hooks do not need to be restored if enable()/disable()\x0d\n  // weren't called during hook execution\x2C in which case\x0d\n  // active_hooks.tmp_array will be null.\x0d\n  if (active_hooks.call_depth === 0 && active_hooks.tmp_array !== null) {\x0d\n    restoreActiveHooks();\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction emitHookFactory(symbol\x2C name) {\x0d\n  const fn = emitHook.bind(undefined\x2C symbol);\x0d\n\x0d\n  // Set the name property of the function as it looks good in the stack trace.\x0d\n  ObjectDefineProperty(fn\x2C 'name'\x2C {\x0d\n    value: name\x0d\n  });\x0d\n  return fn;\x0d\n}\x0d\n\x0d\n// Manage Active Hooks //\x0d\n\x0d\nfunction getHookArrays() {\x0d\n  if (active_hooks.call_depth === 0)\x0d\n    return [active_hooks.array\x2C async_hook_fields];\x0d\n  // If this hook is being enabled while in the middle of processing the array\x0d\n  // of currently active hooks then duplicate the current set of active hooks\x0d\n  // and store this there. This shouldn't fire until the next time hooks are\x0d\n  // processed.\x0d\n  if (active_hooks.tmp_array === null)\x0d\n    storeActiveHooks();\x0d\n  return [active_hooks.tmp_array\x2C active_hooks.tmp_fields];\x0d\n}\x0d\n\x0d\n\x0d\nfunction storeActiveHooks() {\x0d\n  active_hooks.tmp_array = ArrayPrototypeSlice(active_hooks.array);\x0d\n  // Don't want to make the assumption that kInit to kDestroy are indexes 0 to\x0d\n  // 4. So do this the long way.\x0d\n  active_hooks.tmp_fields = [];\x0d\n  copyHooks(active_hooks.tmp_fields\x2C async_hook_fields);\x0d\n}\x0d\n\x0d\nfunction copyHooks(destination\x2C source) {\x0d\n  destination[kInit] = source[kInit];\x0d\n  destination[kBefore] = source[kBefore];\x0d\n  destination[kAfter] = source[kAfter];\x0d\n  destination[kDestroy] = source[kDestroy];\x0d\n  destination[kPromiseResolve] = source[kPromiseResolve];\x0d\n}\x0d\n\x0d\n\x0d\n// Then restore the correct hooks array in case any hooks were added/removed\x0d\n// during hook callback execution.\x0d\nfunction restoreActiveHooks() {\x0d\n  active_hooks.array = active_hooks.tmp_array;\x0d\n  copyHooks(async_hook_fields\x2C active_hooks.tmp_fields);\x0d\n\x0d\n  active_hooks.tmp_array = null;\x0d\n  active_hooks.tmp_fields = null;\x0d\n}\x0d\n\x0d\nfunction trackPromise(promise\x2C parent) {\x0d\n  if (promise[async_id_symbol]) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  // Get trigger id from parent async id before making the async id of the\x0d\n  // child so if a new one must be made it will be lower than the child.\x0d\n  const triggerAsyncId = parent ? getOrSetAsyncId(parent) :\x0d\n    getDefaultTriggerAsyncId();\x0d\n\x0d\n  promise[async_id_symbol] = newAsyncId();\x0d\n  promise[trigger_async_id_symbol] = triggerAsyncId;\x0d\n}\x0d\n\x0d\nfunction promiseInitHook(promise\x2C parent) {\x0d\n  trackPromise(promise\x2C parent);\x0d\n  const asyncId = promise[async_id_symbol];\x0d\n  const triggerAsyncId = promise[trigger_async_id_symbol];\x0d\n  emitInitScript(asyncId\x2C 'PROMISE'\x2C triggerAsyncId\x2C promise);\x0d\n}\x0d\n\x0d\nfunction promiseInitHookWithDestroyTracking(promise\x2C parent) {\x0d\n  promiseInitHook(promise\x2C parent);\x0d\n  destroyTracking(promise\x2C parent);\x0d\n}\x0d\n\x0d\nconst destroyedSymbol = Symbol('destroyed');\x0d\n\x0d\nfunction destroyTracking(promise\x2C parent) {\x0d\n  trackPromise(promise\x2C parent);\x0d\n  const asyncId = promise[async_id_symbol];\x0d\n  const destroyed = { destroyed: false };\x0d\n  promise[destroyedSymbol] = destroyed;\x0d\n  registerDestroyHook(promise\x2C asyncId\x2C destroyed);\x0d\n}\x0d\n\x0d\nfunction promiseBeforeHook(promise) {\x0d\n  trackPromise(promise);\x0d\n  const asyncId = promise[async_id_symbol];\x0d\n  const triggerId = promise[trigger_async_id_symbol];\x0d\n  emitBeforeScript(asyncId\x2C triggerId\x2C promise);\x0d\n}\x0d\n\x0d\nfunction promiseAfterHook(promise) {\x0d\n  trackPromise(promise);\x0d\n  const asyncId = promise[async_id_symbol];\x0d\n  if (hasHooks(kAfter)) {\x0d\n    emitAfterNative(asyncId);\x0d\n  }\x0d\n  if (asyncId === executionAsyncId()) {\x0d\n    // This condition might not be true if async_hooks was enabled during\x0d\n    // the promise callback execution.\x0d\n    // Popping it off the stack can be skipped in that case\x2C because it is\x0d\n    // known that it would correspond to exactly one call with\x0d\n    // PromiseHookType::kBefore that was not witnessed by the PromiseHook.\x0d\n    popAsyncContext(asyncId);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction promiseResolveHook(promise) {\x0d\n  trackPromise(promise);\x0d\n  const asyncId = promise[async_id_symbol];\x0d\n  emitPromiseResolveNative(asyncId);\x0d\n}\x0d\n\x0d\nlet wantPromiseHook = false;\x0d\nfunction enableHooks() {\x0d\n  async_hook_fields[kCheck] += 1;\x0d\n\x0d\n  setCallbackTrampoline(callbackTrampoline);\x0d\n}\x0d\n\x0d\nlet stopPromiseHook;\x0d\nfunction updatePromiseHookMode() {\x0d\n  wantPromiseHook = true;\x0d\n  let initHook;\x0d\n  if (initHooksExist()) {\x0d\n    initHook = destroyHooksExist() ? promiseInitHookWithDestroyTracking :\x0d\n      promiseInitHook;\x0d\n  } else if (destroyHooksExist()) {\x0d\n    initHook = destroyTracking;\x0d\n  }\x0d\n  if (stopPromiseHook) stopPromiseHook();\x0d\n  stopPromiseHook = promiseHooks.createHook({\x0d\n    init: initHook\x2C\x0d\n    before: promiseBeforeHook\x2C\x0d\n    after: promiseAfterHook\x2C\x0d\n    settled: promiseResolveHooksExist() ? promiseResolveHook : undefined\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction disableHooks() {\x0d\n  async_hook_fields[kCheck] -= 1;\x0d\n\x0d\n  wantPromiseHook = false;\x0d\n\x0d\n  setCallbackTrampoline();\x0d\n\x0d\n  // Delay the call to `disablePromiseHook()` because we might currently be\x0d\n  // between the `before` and `after` calls of a Promise.\x0d\n  enqueueMicrotask(disablePromiseHookIfNecessary);\x0d\n}\x0d\n\x0d\nfunction disablePromiseHookIfNecessary() {\x0d\n  if (!wantPromiseHook && stopPromiseHook) {\x0d\n    stopPromiseHook();\x0d\n  }\x0d\n}\x0d\n\x0d\n// Internal Embedder API //\x0d\n\x0d\n// Increment the internal id counter and return the value. Important that the\x0d\n// counter increment first. Since it's done the same way in\x0d\n// Environment::new_async_uid()\x0d\nfunction newAsyncId() {\x0d\n  return ++async_id_fields[kAsyncIdCounter];\x0d\n}\x0d\n\x0d\nfunction getOrSetAsyncId(object) {\x0d\n  if (ObjectPrototypeHasOwnProperty(object\x2C async_id_symbol)) {\x0d\n    return object[async_id_symbol];\x0d\n  }\x0d\n\x0d\n  return object[async_id_symbol] = newAsyncId();\x0d\n}\x0d\n\x0d\n\x0d\n// Return the triggerAsyncId meant for the constructor calling it. It's up to\x0d\n// the user to safeguard this call and make sure it's zero'd out when the\x0d\n// constructor is complete.\x0d\nfunction getDefaultTriggerAsyncId() {\x0d\n  const defaultTriggerAsyncId = async_id_fields[kDefaultTriggerAsyncId];\x0d\n  // If defaultTriggerAsyncId isn't set\x2C use the executionAsyncId\x0d\n  if (defaultTriggerAsyncId < 0)\x0d\n    return async_id_fields[kExecutionAsyncId];\x0d\n  return defaultTriggerAsyncId;\x0d\n}\x0d\n\x0d\n\x0d\nfunction clearDefaultTriggerAsyncId() {\x0d\n  async_id_fields[kDefaultTriggerAsyncId] = -1;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Sets a default top level trigger ID to be used\x0d\n *\x0d\n * @template {Array<unknown>} T\x0d\n * @template {unknown} R\x0d\n * @param {number} triggerAsyncId\x0d\n * @param { (...T: args) => R } block\x0d\n * @param  {T} args\x0d\n * @returns {R}\x0d\n */\x0d\nfunction defaultTriggerAsyncIdScope(triggerAsyncId\x2C block\x2C ...args) {\x0d\n  if (triggerAsyncId === undefined)\x0d\n    return block.apply(null\x2C args);\x0d\n  // CHECK(NumberIsSafeInteger(triggerAsyncId))\x0d\n  // CHECK(triggerAsyncId > 0)\x0d\n  const oldDefaultTriggerAsyncId = async_id_fields[kDefaultTriggerAsyncId];\x0d\n  async_id_fields[kDefaultTriggerAsyncId] = triggerAsyncId;\x0d\n\x0d\n  try {\x0d\n    return block.apply(null\x2C args);\x0d\n  } finally {\x0d\n    async_id_fields[kDefaultTriggerAsyncId] = oldDefaultTriggerAsyncId;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction hasHooks(key) {\x0d\n  return async_hook_fields[key] > 0;\x0d\n}\x0d\n\x0d\nfunction enabledHooksExist() {\x0d\n  return hasHooks(kCheck);\x0d\n}\x0d\n\x0d\nfunction initHooksExist() {\x0d\n  return hasHooks(kInit);\x0d\n}\x0d\n\x0d\nfunction afterHooksExist() {\x0d\n  return hasHooks(kAfter);\x0d\n}\x0d\n\x0d\nfunction destroyHooksExist() {\x0d\n  return hasHooks(kDestroy);\x0d\n}\x0d\n\x0d\nfunction promiseResolveHooksExist() {\x0d\n  return hasHooks(kPromiseResolve);\x0d\n}\x0d\n\x0d\n\x0d\nfunction emitInitScript(asyncId\x2C type\x2C triggerAsyncId\x2C resource) {\x0d\n  // Short circuit all checks for the common case. Which is that no hooks have\x0d\n  // been set. Do this to remove performance impact for embedders (and core).\x0d\n  if (!hasHooks(kInit))\x0d\n    return;\x0d\n\x0d\n  if (triggerAsyncId === null) {\x0d\n    triggerAsyncId = getDefaultTriggerAsyncId();\x0d\n  }\x0d\n\x0d\n  emitInitNative(asyncId\x2C type\x2C triggerAsyncId\x2C resource);\x0d\n}\x0d\n\x0d\n\x0d\nfunction emitBeforeScript(asyncId\x2C triggerAsyncId\x2C resource) {\x0d\n  pushAsyncContext(asyncId\x2C triggerAsyncId\x2C resource);\x0d\n\x0d\n  if (hasHooks(kBefore))\x0d\n    emitBeforeNative(asyncId);\x0d\n}\x0d\n\x0d\n\x0d\nfunction emitAfterScript(asyncId) {\x0d\n  if (hasHooks(kAfter))\x0d\n    emitAfterNative(asyncId);\x0d\n\x0d\n  popAsyncContext(asyncId);\x0d\n}\x0d\n\x0d\n\x0d\nfunction emitDestroyScript(asyncId) {\x0d\n  // Return early if there are no destroy callbacks\x2C or invalid asyncId.\x0d\n  if (!hasHooks(kDestroy) || asyncId <= 0)\x0d\n    return;\x0d\n  async_wrap.queueDestroyAsyncId(asyncId);\x0d\n}\x0d\n\x0d\n\x0d\nfunction hasAsyncIdStack() {\x0d\n  return hasHooks(kStackLength);\x0d\n}\x0d\n\x0d\n\x0d\n// This is the equivalent of the native push_async_ids() call.\x0d\nfunction pushAsyncContext(asyncId\x2C triggerAsyncId\x2C resource) {\x0d\n  const offset = async_hook_fields[kStackLength];\x0d\n  execution_async_resources[offset] = resource;\x0d\n  if (offset * 2 >= async_wrap.async_ids_stack.length)\x0d\n    return pushAsyncContext_(asyncId\x2C triggerAsyncId);\x0d\n  async_wrap.async_ids_stack[offset * 2] = async_id_fields[kExecutionAsyncId];\x0d\n  async_wrap.async_ids_stack[offset * 2 + 1] = async_id_fields[kTriggerAsyncId];\x0d\n  async_hook_fields[kStackLength]++;\x0d\n  async_id_fields[kExecutionAsyncId] = asyncId;\x0d\n  async_id_fields[kTriggerAsyncId] = triggerAsyncId;\x0d\n}\x0d\n\x0d\n\x0d\n// This is the equivalent of the native pop_async_ids() call.\x0d\nfunction popAsyncContext(asyncId) {\x0d\n  const stackLength = async_hook_fields[kStackLength];\x0d\n  if (stackLength === 0) return false;\x0d\n\x0d\n  if (enabledHooksExist() && async_id_fields[kExecutionAsyncId] !== asyncId) {\x0d\n    // Do the same thing as the native code (i.e. crash hard).\x0d\n    return popAsyncContext_(asyncId);\x0d\n  }\x0d\n\x0d\n  const offset = stackLength - 1;\x0d\n  async_id_fields[kExecutionAsyncId] = async_wrap.async_ids_stack[2 * offset];\x0d\n  async_id_fields[kTriggerAsyncId] = async_wrap.async_ids_stack[2 * offset + 1];\x0d\n  execution_async_resources.pop();\x0d\n  async_hook_fields[kStackLength] = offset;\x0d\n  return offset > 0;\x0d\n}\x0d\n\x0d\n\x0d\nfunction executionAsyncId() {\x0d\n  return async_id_fields[kExecutionAsyncId];\x0d\n}\x0d\n\x0d\nfunction triggerAsyncId() {\x0d\n  return async_id_fields[kTriggerAsyncId];\x0d\n}\x0d\n\x0d\n\x0d\nmodule.exports = {\x0d\n  executionAsyncId\x2C\x0d\n  triggerAsyncId\x2C\x0d\n  // Private API\x0d\n  getHookArrays\x2C\x0d\n  symbols: {\x0d\n    async_id_symbol\x2C trigger_async_id_symbol\x2C\x0d\n    init_symbol\x2C before_symbol\x2C after_symbol\x2C destroy_symbol\x2C\x0d\n    promise_resolve_symbol\x2C owner_symbol\x0d\n  }\x2C\x0d\n  constants: {\x0d\n    kInit\x2C kBefore\x2C kAfter\x2C kDestroy\x2C kTotals\x2C kPromiseResolve\x0d\n  }\x2C\x0d\n  enableHooks\x2C\x0d\n  disableHooks\x2C\x0d\n  updatePromiseHookMode\x2C\x0d\n  clearDefaultTriggerAsyncId\x2C\x0d\n  clearAsyncIdStack\x2C\x0d\n  hasAsyncIdStack\x2C\x0d\n  executionAsyncResource\x2C\x0d\n  // Internal Embedder API\x0d\n  newAsyncId\x2C\x0d\n  getOrSetAsyncId\x2C\x0d\n  getDefaultTriggerAsyncId\x2C\x0d\n  defaultTriggerAsyncIdScope\x2C\x0d\n  enabledHooksExist\x2C\x0d\n  initHooksExist\x2C\x0d\n  afterHooksExist\x2C\x0d\n  destroyHooksExist\x2C\x0d\n  emitInit: emitInitScript\x2C\x0d\n  emitBefore: emitBeforeScript\x2C\x0d\n  emitAfter: emitAfterScript\x2C\x0d\n  emitDestroy: emitDestroyScript\x2C\x0d\n  pushAsyncContext\x2C\x0d\n  popAsyncContext\x2C\x0d\n  registerDestroyHook\x2C\x0d\n  useDomainTrampoline\x2C\x0d\n  nativeHooks: {\x0d\n    init: emitInitNative\x2C\x0d\n    before: emitBeforeNative\x2C\x0d\n    after: emitAfterNative\x2C\x0d\n    destroy: emitDestroyNative\x2C\x0d\n    promise_resolve: emitPromiseResolveNative\x0d\n  }\x2C\x0d\n  asyncWrap: {\x0d\n    Providers: async_wrap.Providers\x2C\x0d\n  }\x0d\n};\x0d\n
code-source-info,0x39aa284c75e,13,14929,14982,C0O14937C7O14962C16O14977C22O14979,,
code-creation,LazyCompile,10,348762,0x39aa284dc3e,35,getDefaultTriggerAsyncId node:internal/async_hooks:433:34,0x13fcdd383c0,~
code-source-info,0x39aa284dc3e,13,15404,15667,C0O15442C7O15458C9O15457C13O15553C14O15579C19O15589C26O15612C28O15611C31O15631C32O15635C34O15664,,
code-creation,LazyCompile,10,348846,0x39aa284dd4e,13,initHooksExist node:internal/async_hooks:479:24,0x13fcdd385b0,~
code-source-info,0x39aa284dd4e,13,16671,16705,C0O16679C5O16695C8O16686C12O16702,,
code-creation,LazyCompile,10,348892,0x39aa284de36,16,hasHooks node:internal/async_hooks:471:18,0x13fcdd38510,~
code-source-info,0x39aa284de36,13,16531,16579,C0O16542C7O16566C12O16572C15O16576,,
code-creation,LazyCompile,10,348953,0x39aa284df46,59,push node:internal/fixed_queue:99:7,0x3d773fdfc70,~
code-source-info,0x39aa284df46,34,3783,4050,C0O3806C5O3811C10O3811C16O3973C23O3989C26O3985C32O3983C38O3966C42O4029C47O4034C52O4034C58O4049,,
code-creation,LazyCompile,10,349022,0x39aa284e08e,24,isFull node:internal/fixed_queue:71:9,0x3d773fdfa00,~
code-source-info,0x39aa284e08e,34,3209,3272,C0O3233C4O3237C10O3244C12O3242C16O3260C20O3251C23O3267,,
code-creation,LazyCompile,10,349078,0x39aa284e19e,37,push node:internal/fixed_queue:75:7,0x3d773fdfa68,~
code-source-info,0x39aa284e19e,34,3282,3368,C0O3301C5O3311C12O3316C16O3346C20O3350C26O3357C28O3355C31O3338C36O3367,,
code-creation,LazyCompile,10,349178,0x39aa284e2be,30,onNewListener node:child_process:175:51,0x39aa28453f0,~
code-source-info,0x39aa284e2be,99,5284,5373,C0O5298C2O5307C9O5329C14O5347C19O5355C24O5355C29O5372,,
code-creation,LazyCompile,10,349336,0x39aa284e60e,455,initializePolicy node:internal/bootstrap/pre_execution:358:26,0x2e2fa682478,~
code-source-info,0x39aa284e60e
code-creation,LazyCompile,10,349482,0x39aa284e9de,63,initializeClusterIPC node:internal/bootstrap/pre_execution:349:30,0x2e2fa682428,~
code-source-info,0x39aa284e9de,95,11150,11398,C0O11158C3O11170C10O11174C18O11189C23O11193C29O11232C35O11232C40O11265C45O11265C49O11356C52O11371C62O11397,,
code-creation,LazyCompile,10,349562,0x39aa284eb4e,27,initializeSourceMapsHandlers node:internal/bootstrap/pre_execution:453:38,0x2e2fa6825b8,~
code-source-info,0x39aa284eb4e,95,15053,15206,C0O15099C6O15099C11O15069C16O15151C21O15180C26O15205,,
code-creation,Eval,10,349889,0x39aa284f486,5, node:internal/source_map/source_map_cache:1:1,0x39aa284f120,~
script-source,108,node:internal/source_map/source_map_cache,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeMap\x2C\x0d\n  JSONParse\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectKeys\x2C\x0d\n  ObjectGetOwnPropertyDescriptor\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  RegExpPrototypeTest\x2C\x0d\n  SafeMap\x2C\x0d\n  StringPrototypeMatch\x2C\x0d\n  StringPrototypeSplit\x2C\x0d\n} = primordials;\x0d\n\x0d\nfunction ObjectGetValueSafe(obj\x2C key) {\x0d\n  const desc = ObjectGetOwnPropertyDescriptor(obj\x2C key);\x0d\n  return ObjectPrototypeHasOwnProperty(desc\x2C 'value') ? desc.value : undefined;\x0d\n}\x0d\n\x0d\n// See https://sourcemaps.info/spec.html for SourceMap V3 specification.\x0d\nconst { Buffer } = require('buffer');\x0d\nlet debug = require('internal/util/debuglog').debuglog('source_map'\x2C (fn) => {\x0d\n  debug = fn;\x0d\n});\x0d\nconst fs = require('fs');\x0d\nconst { getOptionValue } = require('internal/options');\x0d\nconst { IterableWeakMap } = require('internal/util/iterable_weak_map');\x0d\nconst {\x0d\n  normalizeReferrerURL\x2C\x0d\n} = require('internal/modules/cjs/helpers');\x0d\nconst { validateBoolean } = require('internal/validators');\x0d\n// Since the CJS module cache is mutable\x2C which leads to memory leaks when\x0d\n// modules are deleted\x2C we use a WeakMap so that the source map cache will\x0d\n// be purged automatically:\x0d\nconst cjsSourceMapCache = new IterableWeakMap();\x0d\n// The esm cache is not mutable\x2C so we can use a Map without memory concerns:\x0d\nconst esmSourceMapCache = new SafeMap();\x0d\nconst { fileURLToPath\x2C pathToFileURL\x2C URL } = require('internal/url');\x0d\nlet SourceMap;\x0d\n\x0d\nlet sourceMapsEnabled;\x0d\nfunction getSourceMapsEnabled() {\x0d\n  if (sourceMapsEnabled === undefined) {\x0d\n    setSourceMapsEnabled(getOptionValue('--enable-source-maps'));\x0d\n  }\x0d\n  return sourceMapsEnabled;\x0d\n}\x0d\n\x0d\nfunction setSourceMapsEnabled(val) {\x0d\n  validateBoolean(val\x2C 'val');\x0d\n\x0d\n  const {\x0d\n    setSourceMapsEnabled\x2C\x0d\n    setPrepareStackTraceCallback\x0d\n  } = internalBinding('errors');\x0d\n  setSourceMapsEnabled(val);\x0d\n  if (val) {\x0d\n    const {\x0d\n      prepareStackTrace\x0d\n    } = require('internal/source_map/prepare_stack_trace');\x0d\n    setPrepareStackTraceCallback(prepareStackTrace);\x0d\n  } else if (sourceMapsEnabled !== undefined) {\x0d\n    // Reset prepare stack trace callback only when disabling source maps.\x0d\n    const {\x0d\n      prepareStackTrace\x2C\x0d\n    } = require('internal/errors');\x0d\n    setPrepareStackTraceCallback(prepareStackTrace);\x0d\n  }\x0d\n\x0d\n  sourceMapsEnabled = val;\x0d\n}\x0d\n\x0d\nfunction maybeCacheSourceMap(filename\x2C content\x2C cjsModuleInstance) {\x0d\n  const sourceMapsEnabled = getSourceMapsEnabled();\x0d\n  if (!(process.env.NODE_V8_COVERAGE || sourceMapsEnabled)) return;\x0d\n  try {\x0d\n    filename = normalizeReferrerURL(filename);\x0d\n  } catch (err) {\x0d\n    // This is most likely an [eval]-wrapper\x2C which is currently not\x0d\n    // supported.\x0d\n    debug(err.stack);\x0d\n    return;\x0d\n  }\x0d\n  const match = StringPrototypeMatch(\x0d\n    content\x2C\x0d\n    /\\/[*/]#\\s+sourceMappingURL=(?<sourceMappingURL>[^\\s]+)/\x0d\n  );\x0d\n  if (match) {\x0d\n    const data = dataFromUrl(filename\x2C match.groups.sourceMappingURL);\x0d\n    const url = data ? null : match.groups.sourceMappingURL;\x0d\n    if (cjsModuleInstance) {\x0d\n      cjsSourceMapCache.set(cjsModuleInstance\x2C {\x0d\n        filename\x2C\x0d\n        lineLengths: lineLengths(content)\x2C\x0d\n        data\x2C\x0d\n        url\x0d\n      });\x0d\n    } else {\x0d\n      // If there is no cjsModuleInstance assume we are in a\x0d\n      // "modules/esm" context.\x0d\n      esmSourceMapCache.set(filename\x2C {\x0d\n        lineLengths: lineLengths(content)\x2C\x0d\n        data\x2C\x0d\n        url\x0d\n      });\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction dataFromUrl(sourceURL\x2C sourceMappingURL) {\x0d\n  try {\x0d\n    const url = new URL(sourceMappingURL);\x0d\n    switch (url.protocol) {\x0d\n      case 'data:':\x0d\n        return sourceMapFromDataUrl(sourceURL\x2C url.pathname);\x0d\n      default:\x0d\n        debug(`unknown protocol ${url.protocol}`);\x0d\n        return null;\x0d\n    }\x0d\n  } catch (err) {\x0d\n    debug(err.stack);\x0d\n    // If no scheme is present\x2C we assume we are dealing with a file path.\x0d\n    const mapURL = new URL(sourceMappingURL\x2C sourceURL).href;\x0d\n    return sourceMapFromFile(mapURL);\x0d\n  }\x0d\n}\x0d\n\x0d\n// Cache the length of each line in the file that a source map was extracted\x0d\n// from. This allows translation from byte offset V8 coverage reports\x2C\x0d\n// to line/column offset Source Map V3.\x0d\nfunction lineLengths(content) {\x0d\n  // We purposefully keep \\r as part of the line-length calculation\x2C in\x0d\n  // cases where there is a \\r\\n separator\x2C so that this can be taken into\x0d\n  // account in coverage calculations.\x0d\n  return ArrayPrototypeMap(StringPrototypeSplit(content\x2C /\\n|\\u2028|\\u2029/)\x2C (line) => {\x0d\n    return line.length;\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction sourceMapFromFile(mapURL) {\x0d\n  try {\x0d\n    const content = fs.readFileSync(fileURLToPath(mapURL)\x2C 'utf8');\x0d\n    const data = JSONParse(content);\x0d\n    return sourcesToAbsolute(mapURL\x2C data);\x0d\n  } catch (err) {\x0d\n    debug(err.stack);\x0d\n    return null;\x0d\n  }\x0d\n}\x0d\n\x0d\n// data:[<mediatype>][;base64]\x2C<data> see:\x0d\n// https://tools.ietf.org/html/rfc2397#section-2\x0d\nfunction sourceMapFromDataUrl(sourceURL\x2C url) {\x0d\n  const { 0: format\x2C 1: data } = StringPrototypeSplit(url\x2C '\x2C');\x0d\n  const splitFormat = StringPrototypeSplit(format\x2C ';');\x0d\n  const contentType = splitFormat[0];\x0d\n  const base64 = splitFormat[splitFormat.length - 1] === 'base64';\x0d\n  if (contentType === 'application/json') {\x0d\n    const decodedData = base64 ?\x0d\n      Buffer.from(data\x2C 'base64').toString('utf8') : data;\x0d\n    try {\x0d\n      const parsedData = JSONParse(decodedData);\x0d\n      return sourcesToAbsolute(sourceURL\x2C parsedData);\x0d\n    } catch (err) {\x0d\n      debug(err.stack);\x0d\n      return null;\x0d\n    }\x0d\n  } else {\x0d\n    debug(`unknown content-type ${contentType}`);\x0d\n    return null;\x0d\n  }\x0d\n}\x0d\n\x0d\n// If the sources are not absolute URLs after prepending of the "sourceRoot"\x2C\x0d\n// the sources are resolved relative to the SourceMap (like resolving script\x0d\n// src in a html document).\x0d\nfunction sourcesToAbsolute(baseURL\x2C data) {\x0d\n  data.sources = data.sources.map((source) => {\x0d\n    source = (data.sourceRoot || '') + source;\x0d\n    return new URL(source\x2C baseURL).href;\x0d\n  });\x0d\n  // The sources array is now resolved to absolute URLs\x2C sourceRoot should\x0d\n  // be updated to noop.\x0d\n  data.sourceRoot = '';\x0d\n  return data;\x0d\n}\x0d\n\x0d\n// WARNING: The `sourceMapCacheToObject` and `appendCJSCache` run during\x0d\n// shutdown. In particular\x2C they also run when Workers are terminated\x2C making\x0d\n// it important that they do not call out to any user-provided code\x2C including\x0d\n// built-in prototypes that might have been tampered with.\x0d\n\x0d\n// Get serialized representation of source-map cache\x2C this is used\x0d\n// to persist a cache of source-maps to disk when NODE_V8_COVERAGE is enabled.\x0d\nfunction sourceMapCacheToObject() {\x0d\n  const obj = ObjectCreate(null);\x0d\n\x0d\n  for (const { 0: k\x2C 1: v } of esmSourceMapCache) {\x0d\n    obj[k] = v;\x0d\n  }\x0d\n\x0d\n  appendCJSCache(obj);\x0d\n\x0d\n  if (ObjectKeys(obj).length === 0) {\x0d\n    return undefined;\x0d\n  }\x0d\n  return obj;\x0d\n}\x0d\n\x0d\nfunction appendCJSCache(obj) {\x0d\n  for (const value of cjsSourceMapCache) {\x0d\n    obj[ObjectGetValueSafe(value\x2C 'filename')] = {\x0d\n      lineLengths: ObjectGetValueSafe(value\x2C 'lineLengths')\x2C\x0d\n      data: ObjectGetValueSafe(value\x2C 'data')\x2C\x0d\n      url: ObjectGetValueSafe(value\x2C 'url')\x0d\n    };\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction findSourceMap(sourceURL) {\x0d\n  if (!RegExpPrototypeTest(/^\\w+:\\/\\//\x2C sourceURL)) {\x0d\n    sourceURL = pathToFileURL(sourceURL).href;\x0d\n  }\x0d\n  if (!SourceMap) {\x0d\n    SourceMap = require('internal/source_map/source_map').SourceMap;\x0d\n  }\x0d\n  let sourceMap = esmSourceMapCache.get(sourceURL);\x0d\n  if (sourceMap === undefined) {\x0d\n    for (const value of cjsSourceMapCache) {\x0d\n      const filename = ObjectGetValueSafe(value\x2C 'filename');\x0d\n      if (sourceURL === filename) {\x0d\n        sourceMap = {\x0d\n          data: ObjectGetValueSafe(value\x2C 'data')\x0d\n        };\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n  if (sourceMap && sourceMap.data) {\x0d\n    return new SourceMap(sourceMap.data);\x0d\n  }\x0d\n  return undefined;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  findSourceMap\x2C\x0d\n  getSourceMapsEnabled\x2C\x0d\n  setSourceMapsEnabled\x2C\x0d\n  maybeCacheSourceMap\x2C\x0d\n  sourceMapCacheToObject\x2C\x0d\n};\x0d\n
code-source-info,0x39aa284f486,108,0,7905,C0O0C4O7905,,
code-creation,Function,10,350376,0x39aa284fafe,435, node:internal/source_map/source_map_cache:1:1,0x39aa284f400,~
code-source-info,0x39aa284fafe,108,0,7905,C0O0C152O28C158O50C164O64C170O81C176O96C182O131C188O165C194O189C199O201C205O226C211O547C217O547C222O536C228O579C234O579C239O612C252O613C258O579C260O678C266O678C270O678C272O721C278O721C283O702C289O779C295O779C300O759C305O862C311O862C316O835C322O932C328O932C333O912C339O1172C341O1172C346O1172C348O1301C350O1301C355O1301C357O1363C363O1363C368O1325C374O1340C380O1355C386O1393C387O1393C389O1411C390O1411C392O7762C399O7784C405O7802C411O7827C417O7852C423O7876C429O7777C434O7904,,
code-creation,Eval,10,350730,0x39aa2850b3e,5, node:internal/util/iterable_weak_map:1:1,0x39aa28508f0,~
script-source,109,node:internal/util/iterable_weak_map,'use strict';\x0d\n\x0d\nconst {\x0d\n  ObjectFreeze\x2C\x0d\n  SafeFinalizationRegistry\x2C\x0d\n  SafeSet\x2C\x0d\n  SafeWeakMap\x2C\x0d\n  SafeWeakRef\x2C\x0d\n  SymbolIterator\x2C\x0d\n} = primordials;\x0d\n\x0d\n// This class is modified from the example code in the WeakRefs specification:\x0d\n// https://github.com/tc39/proposal-weakrefs\x0d\n// Licensed under ECMA's MIT-style license\x2C see:\x0d\n// https://github.com/tc39/ecma262/blob/HEAD/LICENSE.md\x0d\nclass IterableWeakMap {\x0d\n  #weakMap = new SafeWeakMap();\x0d\n  #refSet = new SafeSet();\x0d\n  #finalizationGroup = new SafeFinalizationRegistry(cleanup);\x0d\n\x0d\n  set(key\x2C value) {\x0d\n    const entry = this.#weakMap.get(key);\x0d\n    if (entry) {\x0d\n      // If there's already an entry for the object represented by "key"\x2C\x0d\n      // the value can be updated without creating a new WeakRef:\x0d\n      this.#weakMap.set(key\x2C { value\x2C ref: entry.ref });\x0d\n    } else {\x0d\n      const ref = new SafeWeakRef(key);\x0d\n      this.#weakMap.set(key\x2C { value\x2C ref });\x0d\n      this.#refSet.add(ref);\x0d\n      this.#finalizationGroup.register(key\x2C {\x0d\n        set: this.#refSet\x2C\x0d\n        ref\x0d\n      }\x2C ref);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  get(key) {\x0d\n    return this.#weakMap.get(key)?.value;\x0d\n  }\x0d\n\x0d\n  has(key) {\x0d\n    return this.#weakMap.has(key);\x0d\n  }\x0d\n\x0d\n  delete(key) {\x0d\n    const entry = this.#weakMap.get(key);\x0d\n    if (!entry) {\x0d\n      return false;\x0d\n    }\x0d\n    this.#weakMap.delete(key);\x0d\n    this.#refSet.delete(entry.ref);\x0d\n    this.#finalizationGroup.unregister(entry.ref);\x0d\n    return true;\x0d\n  }\x0d\n\x0d\n  [SymbolIterator]() {\x0d\n    const iterator = this.#refSet[SymbolIterator]();\x0d\n\x0d\n    const next = () => {\x0d\n      const result = iterator.next();\x0d\n      if (result.done) return result;\x0d\n      const key = result.value.deref();\x0d\n      if (key == null) return next();\x0d\n      const { value } = this.#weakMap.get(key);\x0d\n      return { done: false\x2C value };\x0d\n    };\x0d\n\x0d\n    return {\x0d\n      [SymbolIterator]() { return this; }\x2C\x0d\n      next\x2C\x0d\n    };\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction cleanup({ set\x2C ref }) {\x0d\n  set.delete(ref);\x0d\n}\x0d\n\x0d\nObjectFreeze(IterableWeakMap.prototype);\x0d\n\x0d\nmodule.exports = {\x0d\n  IterableWeakMap\x2C\x0d\n};\x0d\n
code-source-info,0x39aa2850b3e,109,0,2042,C0O0C4O2042,,
code-creation,Function,10,350897,0x39aa285129e,196, node:internal/util/iterable_weak_map:1:1,0x39aa2850ab8,~
code-source-info,0x39aa285129e,109,0,2042,C0O0C26O28C31O45C37O74C43O86C49O102C55O118C134O1448C168O1983C173O1954C177O1998C184O2020C190O2013C195O2041,,
code-creation,Function,10,350931,0x39aa285141e,75,<instance_members_initializer> node:internal/util/iterable_weak_map:17:3,0x39aa2850dc8,~
code-source-info,0x39aa285141e,109,415,534,C3O426C10O426C27O458C34O458C48O497C62O497C74O534,,
code-creation,Eval,10,351388,0x39aa2852056,5, node:internal/modules/cjs/helpers:1:1,0x39aa2851da0,~
script-source,110,node:internal/modules/cjs/helpers,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypeSome\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeSet\x2C\x0d\n  StringPrototypeCharCodeAt\x2C\x0d\n  StringPrototypeIncludes\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n} = primordials;\x0d\nconst {\x0d\n  ERR_MANIFEST_DEPENDENCY_MISSING\x2C\x0d\n  ERR_UNKNOWN_BUILTIN_MODULE\x0d\n} = require('internal/errors').codes;\x0d\nconst { NativeModule } = require('internal/bootstrap/loaders');\x0d\n\x0d\nconst { validateString } = require('internal/validators');\x0d\nconst path = require('path');\x0d\nconst { pathToFileURL\x2C fileURLToPath\x2C URL } = require('internal/url');\x0d\n\x0d\nconst { getOptionValue } = require('internal/options');\x0d\nconst userConditions = getOptionValue('--conditions');\x0d\n\x0d\nlet debug = require('internal/util/debuglog').debuglog('module'\x2C (fn) => {\x0d\n  debug = fn;\x0d\n});\x0d\n\x0d\nconst noAddons = getOptionValue('--no-addons');\x0d\nconst addonConditions = noAddons ? [] : ['node-addons'];\x0d\n\x0d\n// TODO: Use this set when resolving pkg#exports conditions in loader.js.\x0d\nconst cjsConditions = new SafeSet([\x0d\n  'require'\x2C\x0d\n  'node'\x2C\x0d\n  ...addonConditions\x2C\x0d\n  ...userConditions\x2C\x0d\n]);\x0d\n\x0d\nfunction loadNativeModule(filename\x2C request) {\x0d\n  const mod = NativeModule.map.get(filename);\x0d\n  if (mod?.canBeRequiredByUsers) {\x0d\n    debug('load native module %s'\x2C request);\x0d\n    // compileForPublicLoader() throws if mod.canBeRequiredByUsers is false:\x0d\n    mod.compileForPublicLoader();\x0d\n    return mod;\x0d\n  }\x0d\n}\x0d\n\x0d\n// Invoke with makeRequireFunction(module) where |module| is the Module object\x0d\n// to use as the context for the require() function.\x0d\n// Use redirects to set up a mapping from a policy and restrict dependencies\x0d\nconst urlToFileCache = new SafeMap();\x0d\nfunction makeRequireFunction(mod\x2C redirects) {\x0d\n  const Module = mod.constructor;\x0d\n\x0d\n  let require;\x0d\n  if (redirects) {\x0d\n    const id = mod.filename || mod.id;\x0d\n    const conditions = cjsConditions;\x0d\n    const { resolve\x2C reaction } = redirects;\x0d\n    require = function require(specifier) {\x0d\n      let missing = true;\x0d\n      const destination = resolve(specifier\x2C conditions);\x0d\n      if (destination === true) {\x0d\n        missing = false;\x0d\n      } else if (destination) {\x0d\n        const href = destination.href;\x0d\n        if (destination.protocol === 'node:') {\x0d\n          const specifier = destination.pathname;\x0d\n          const mod = loadNativeModule(specifier\x2C href);\x0d\n          if (mod && mod.canBeRequiredByUsers) {\x0d\n            return mod.exports;\x0d\n          }\x0d\n          throw new ERR_UNKNOWN_BUILTIN_MODULE(specifier);\x0d\n        } else if (destination.protocol === 'file:') {\x0d\n          let filepath;\x0d\n          if (urlToFileCache.has(href)) {\x0d\n            filepath = urlToFileCache.get(href);\x0d\n          } else {\x0d\n            filepath = fileURLToPath(destination);\x0d\n            urlToFileCache.set(href\x2C filepath);\x0d\n          }\x0d\n          return mod.require(filepath);\x0d\n        }\x0d\n      }\x0d\n      if (missing) {\x0d\n        reaction(new ERR_MANIFEST_DEPENDENCY_MISSING(\x0d\n          id\x2C\x0d\n          specifier\x2C\x0d\n          ArrayPrototypeJoin([...conditions]\x2C '\x2C ')\x0d\n        ));\x0d\n      }\x0d\n      return mod.require(specifier);\x0d\n    };\x0d\n  } else {\x0d\n    require = function require(path) {\x0d\n      return mod.require(path);\x0d\n    };\x0d\n  }\x0d\n\x0d\n  function resolve(request\x2C options) {\x0d\n    validateString(request\x2C 'request');\x0d\n    return Module._resolveFilename(request\x2C mod\x2C false\x2C options);\x0d\n  }\x0d\n\x0d\n  require.resolve = resolve;\x0d\n\x0d\n  function paths(request) {\x0d\n    validateString(request\x2C 'request');\x0d\n    return Module._resolveLookupPaths(request\x2C mod);\x0d\n  }\x0d\n\x0d\n  resolve.paths = paths;\x0d\n\x0d\n  require.main = process.mainModule;\x0d\n\x0d\n  // Enable support to add extra extension types.\x0d\n  require.extensions = Module._extensions;\x0d\n\x0d\n  require.cache = Module._cache;\x0d\n\x0d\n  return require;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\x0d\n * because the buffer-to-string conversion in `fs.readFileSync()`\x0d\n * translates it to FEFF\x2C the UTF-16 BOM.\x0d\n */\x0d\nfunction stripBOM(content) {\x0d\n  if (StringPrototypeCharCodeAt(content) === 0xFEFF) {\x0d\n    content = StringPrototypeSlice(content\x2C 1);\x0d\n  }\x0d\n  return content;\x0d\n}\x0d\n\x0d\nfunction addBuiltinLibsToObject(object\x2C dummyModuleName) {\x0d\n  // Make built-in modules available directly (loaded lazily).\x0d\n  const Module = require('internal/modules/cjs/loader').Module;\x0d\n  const { builtinModules } = Module;\x0d\n\x0d\n  // To require built-in modules in user-land and ignore modules whose\x0d\n  // `canBeRequiredByUsers` is false. So we create a dummy module object and not\x0d\n  // use `require()` directly.\x0d\n  const dummyModule = new Module(dummyModuleName);\x0d\n\x0d\n  ArrayPrototypeForEach(builtinModules\x2C (name) => {\x0d\n    // Neither add underscored modules\x2C nor ones that contain slashes (e.g.\x2C\x0d\n    // 'fs/promises') or ones that are already defined.\x0d\n    if (StringPrototypeStartsWith(name\x2C '_') ||\x0d\n        StringPrototypeIncludes(name\x2C '/') ||\x0d\n        ObjectPrototypeHasOwnProperty(object\x2C name)) {\x0d\n      return;\x0d\n    }\x0d\n    // Goals of this mechanism are:\x0d\n    // - Lazy loading of built-in modules\x0d\n    // - Having all built-in modules available as non-enumerable properties\x0d\n    // - Allowing the user to re-assign these variables as if there were no\x0d\n    //   pre-existing globals with the same name.\x0d\n\x0d\n    const setReal = (val) => {\x0d\n      // Deleting the property before re-assigning it disables the\x0d\n      // getter/setter mechanism.\x0d\n      delete object[name];\x0d\n      object[name] = val;\x0d\n    };\x0d\n\x0d\n    ObjectDefineProperty(object\x2C name\x2C {\x0d\n      get: () => {\x0d\n        const lib = dummyModule.require(name);\x0d\n\x0d\n        // Disable the current getter/setter and set up a new\x0d\n        // non-enumerable property.\x0d\n        delete object[name];\x0d\n        ObjectDefineProperty(object\x2C name\x2C {\x0d\n          get: () => lib\x2C\x0d\n          set: setReal\x2C\x0d\n          configurable: true\x2C\x0d\n          enumerable: false\x0d\n        });\x0d\n\x0d\n        return lib;\x0d\n      }\x2C\x0d\n      set: setReal\x2C\x0d\n      configurable: true\x2C\x0d\n      enumerable: false\x0d\n    });\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction normalizeReferrerURL(referrer) {\x0d\n  if (typeof referrer === 'string' && path.isAbsolute(referrer)) {\x0d\n    return pathToFileURL(referrer).href;\x0d\n  }\x0d\n  return new URL(referrer).href;\x0d\n}\x0d\n\x0d\n// For error messages only - used to check if ESM syntax is in use.\x0d\nfunction hasEsmSyntax(code) {\x0d\n  debug('Checking for ESM syntax');\x0d\n  const parser = require('internal/deps/acorn/acorn/dist/acorn').Parser;\x0d\n  let root;\x0d\n  try {\x0d\n    root = parser.parse(code\x2C { sourceType: 'module'\x2C ecmaVersion: 'latest' });\x0d\n  } catch {\x0d\n    return false;\x0d\n  }\x0d\n\x0d\n  return ArrayPrototypeSome(root.body\x2C (stmt) =>\x0d\n    stmt.type === 'ExportDefaultDeclaration' ||\x0d\n    stmt.type === 'ExportNamedDeclaration' ||\x0d\n    stmt.type === 'ImportDeclaration' ||\x0d\n    stmt.type === 'ExportAllDeclaration');\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  addBuiltinLibsToObject\x2C\x0d\n  cjsConditions\x2C\x0d\n  hasEsmSyntax\x2C\x0d\n  loadNativeModule\x2C\x0d\n  makeRequireFunction\x2C\x0d\n  normalizeReferrerURL\x2C\x0d\n  stripBOM\x2C\x0d\n};\x0d\n
code-source-info,0x39aa2852056,110,0,6975,C0O0C4O6975,,
code-creation,Function,10,351845,0x39aa28525d6,536, node:internal/modules/cjs/helpers:1:1,0x39aa2851fd0,~
code-source-info,0x39aa28525d6,110,0,6975,C0O0C104O28C110O54C116O77C122O100C128O125C134O159C139O171C144O183C150O213C156O241C162O266C168O391C174O391C179O417C184O323C190O359C196O451C202O451C207O434C213O520C219O520C224O501C230O566C236O566C240O566C242O630C248O630C253O592C259O607C265O622C271O685C277O685C282O666C287O738C290O738C295O785C301O785C306O818C319O819C325O785C327O888C330O888C335O944C346O1077C353O1122C354O1122C410O1145C465O1077C470O1077C472O1721C474O1721C479O1721C481O6806C488O6828C494O6855C500O6873C506O6890C512O6911C518O6935C524O6960C530O6821C535O6974,,
code-creation,LazyCompile,10,352201,0x39aa2853216,27,SafeSet node:internal/per_context/primordials:364:16,0x13fcdd0a1a0,~
script-source,6,node:internal/per_context/primordials,'use strict';\x0d\n\x0d\n/* eslint-disable node-core/prefer-primordials */\x0d\n\x0d\n// This file subclasses and stores the JS builtins that come from the VM\x0d\n// so that Node.js's builtin modules do not need to later look these up from\x0d\n// the global proxy\x2C which can be mutated by users.\x0d\n\x0d\n// Use of primordials have sometimes a dramatic impact on performance\x2C please\x0d\n// benchmark all changes made in performance-sensitive areas of the codebase.\x0d\n// See: https://github.com/nodejs/node/pull/38248\x0d\n\x0d\nconst {\x0d\n  defineProperty: ReflectDefineProperty\x2C\x0d\n  getOwnPropertyDescriptor: ReflectGetOwnPropertyDescriptor\x2C\x0d\n  ownKeys: ReflectOwnKeys\x2C\x0d\n} = Reflect;\x0d\n\x0d\n// `uncurryThis` is equivalent to `func => Function.prototype.call.bind(func)`.\x0d\n// It is using `bind.bind(call)` to avoid using `Function.prototype.bind`\x0d\n// and `Function.prototype.call` after it may have been mutated by users.\x0d\nconst { apply\x2C bind\x2C call } = Function.prototype;\x0d\nconst uncurryThis = bind.bind(call);\x0d\nprimordials.uncurryThis = uncurryThis;\x0d\n\x0d\n// `applyBind` is equivalent to `func => Function.prototype.apply.bind(func)`.\x0d\n// It is using `bind.bind(apply)` to avoid using `Function.prototype.bind`\x0d\n// and `Function.prototype.apply` after it may have been mutated by users.\x0d\nconst applyBind = bind.bind(apply);\x0d\nprimordials.applyBind = applyBind;\x0d\n\x0d\n// Methods that accept a variable number of arguments\x2C and thus it's useful to\x0d\n// also create `${prefix}${key}Apply`\x2C which uses `Function.prototype.apply`\x2C\x0d\n// instead of `Function.prototype.call`\x2C and thus doesn't require iterator\x0d\n// destructuring.\x0d\nconst varargsMethods = [\x0d\n  // 'ArrayPrototypeConcat' is omitted\x2C because it performs the spread\x0d\n  // on its own for arrays and array-likes with a truthy\x0d\n  // @@isConcatSpreadable symbol property.\x0d\n  'ArrayOf'\x2C\x0d\n  'ArrayPrototypePush'\x2C\x0d\n  'ArrayPrototypeUnshift'\x2C\x0d\n  // 'FunctionPrototypeCall' is omitted\x2C since there's 'ReflectApply'\x0d\n  // and 'FunctionPrototypeApply'.\x0d\n  'MathHypot'\x2C\x0d\n  'MathMax'\x2C\x0d\n  'MathMin'\x2C\x0d\n  'StringPrototypeConcat'\x2C\x0d\n  'TypedArrayOf'\x2C\x0d\n];\x0d\n\x0d\nfunction getNewKey(key) {\x0d\n  return typeof key === 'symbol' ?\x0d\n    `Symbol${key.description[7].toUpperCase()}${key.description.slice(8)}` :\x0d\n    `${key[0].toUpperCase()}${key.slice(1)}`;\x0d\n}\x0d\n\x0d\nfunction copyAccessor(dest\x2C prefix\x2C key\x2C { enumerable\x2C get\x2C set }) {\x0d\n  ReflectDefineProperty(dest\x2C `${prefix}Get${key}`\x2C {\x0d\n    value: uncurryThis(get)\x2C\x0d\n    enumerable\x0d\n  });\x0d\n  if (set !== undefined) {\x0d\n    ReflectDefineProperty(dest\x2C `${prefix}Set${key}`\x2C {\x0d\n      value: uncurryThis(set)\x2C\x0d\n      enumerable\x0d\n    });\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction copyPropsRenamed(src\x2C dest\x2C prefix) {\x0d\n  for (const key of ReflectOwnKeys(src)) {\x0d\n    const newKey = getNewKey(key);\x0d\n    const desc = ReflectGetOwnPropertyDescriptor(src\x2C key);\x0d\n    if ('get' in desc) {\x0d\n      copyAccessor(dest\x2C prefix\x2C newKey\x2C desc);\x0d\n    } else {\x0d\n      const name = `${prefix}${newKey}`;\x0d\n      ReflectDefineProperty(dest\x2C name\x2C desc);\x0d\n      if (varargsMethods.includes(name)) {\x0d\n        ReflectDefineProperty(dest\x2C `${name}Apply`\x2C {\x0d\n          // `src` is bound as the `this` so that the static `this` points\x0d\n          // to the object it was defined on\x2C\x0d\n          // e.g.: `ArrayOfApply` gets a `this` of `Array`:\x0d\n          value: applyBind(desc.value\x2C src)\x2C\x0d\n        });\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction copyPropsRenamedBound(src\x2C dest\x2C prefix) {\x0d\n  for (const key of ReflectOwnKeys(src)) {\x0d\n    const newKey = getNewKey(key);\x0d\n    const desc = ReflectGetOwnPropertyDescriptor(src\x2C key);\x0d\n    if ('get' in desc) {\x0d\n      copyAccessor(dest\x2C prefix\x2C newKey\x2C desc);\x0d\n    } else {\x0d\n      const { value } = desc;\x0d\n      if (typeof value === 'function') {\x0d\n        desc.value = value.bind(src);\x0d\n      }\x0d\n\x0d\n      const name = `${prefix}${newKey}`;\x0d\n      ReflectDefineProperty(dest\x2C name\x2C desc);\x0d\n      if (varargsMethods.includes(name)) {\x0d\n        ReflectDefineProperty(dest\x2C `${name}Apply`\x2C {\x0d\n          value: applyBind(value\x2C src)\x2C\x0d\n        });\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction copyPrototype(src\x2C dest\x2C prefix) {\x0d\n  for (const key of ReflectOwnKeys(src)) {\x0d\n    const newKey = getNewKey(key);\x0d\n    const desc = ReflectGetOwnPropertyDescriptor(src\x2C key);\x0d\n    if ('get' in desc) {\x0d\n      copyAccessor(dest\x2C prefix\x2C newKey\x2C desc);\x0d\n    } else {\x0d\n      const { value } = desc;\x0d\n      if (typeof value === 'function') {\x0d\n        desc.value = uncurryThis(value);\x0d\n      }\x0d\n\x0d\n      const name = `${prefix}${newKey}`;\x0d\n      ReflectDefineProperty(dest\x2C name\x2C desc);\x0d\n      if (varargsMethods.includes(name)) {\x0d\n        ReflectDefineProperty(dest\x2C `${name}Apply`\x2C {\x0d\n          value: applyBind(value)\x2C\x0d\n        });\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\n// Create copies of configurable value properties of the global object\x0d\n[\x0d\n  'Proxy'\x2C\x0d\n  'globalThis'\x2C\x0d\n].forEach((name) => {\x0d\n  // eslint-disable-next-line no-restricted-globals\x0d\n  primordials[name] = globalThis[name];\x0d\n});\x0d\n\x0d\n// Create copies of URI handling functions\x0d\n[\x0d\n  decodeURI\x2C\x0d\n  decodeURIComponent\x2C\x0d\n  encodeURI\x2C\x0d\n  encodeURIComponent\x2C\x0d\n].forEach((fn) => {\x0d\n  primordials[fn.name] = fn;\x0d\n});\x0d\n\x0d\n// Create copies of the namespace objects\x0d\n[\x0d\n  'JSON'\x2C\x0d\n  'Math'\x2C\x0d\n  'Proxy'\x2C\x0d\n  'Reflect'\x2C\x0d\n].forEach((name) => {\x0d\n  // eslint-disable-next-line no-restricted-globals\x0d\n  copyPropsRenamed(global[name]\x2C primordials\x2C name);\x0d\n});\x0d\n\x0d\n// Create copies of intrinsic objects\x0d\n[\x0d\n  'AggregateError'\x2C\x0d\n  'Array'\x2C\x0d\n  'ArrayBuffer'\x2C\x0d\n  'BigInt'\x2C\x0d\n  'BigInt64Array'\x2C\x0d\n  'BigUint64Array'\x2C\x0d\n  'Boolean'\x2C\x0d\n  'DataView'\x2C\x0d\n  'Date'\x2C\x0d\n  'Error'\x2C\x0d\n  'EvalError'\x2C\x0d\n  'FinalizationRegistry'\x2C\x0d\n  'Float32Array'\x2C\x0d\n  'Float64Array'\x2C\x0d\n  'Function'\x2C\x0d\n  'Int16Array'\x2C\x0d\n  'Int32Array'\x2C\x0d\n  'Int8Array'\x2C\x0d\n  'Map'\x2C\x0d\n  'Number'\x2C\x0d\n  'Object'\x2C\x0d\n  'RangeError'\x2C\x0d\n  'ReferenceError'\x2C\x0d\n  'RegExp'\x2C\x0d\n  'Set'\x2C\x0d\n  'String'\x2C\x0d\n  'Symbol'\x2C\x0d\n  'SyntaxError'\x2C\x0d\n  'TypeError'\x2C\x0d\n  'URIError'\x2C\x0d\n  'Uint16Array'\x2C\x0d\n  'Uint32Array'\x2C\x0d\n  'Uint8Array'\x2C\x0d\n  'Uint8ClampedArray'\x2C\x0d\n  'WeakMap'\x2C\x0d\n  'WeakRef'\x2C\x0d\n  'WeakSet'\x2C\x0d\n].forEach((name) => {\x0d\n  // eslint-disable-next-line no-restricted-globals\x0d\n  const original = global[name];\x0d\n  primordials[name] = original;\x0d\n  copyPropsRenamed(original\x2C primordials\x2C name);\x0d\n  copyPrototype(original.prototype\x2C primordials\x2C `${name}Prototype`);\x0d\n});\x0d\n\x0d\n// Create copies of intrinsic objects that require a valid `this` to call\x0d\n// static methods.\x0d\n// Refs: https://www.ecma-international.org/ecma-262/#sec-promise.all\x0d\n[\x0d\n  'Promise'\x2C\x0d\n].forEach((name) => {\x0d\n  // eslint-disable-next-line no-restricted-globals\x0d\n  const original = global[name];\x0d\n  primordials[name] = original;\x0d\n  copyPropsRenamedBound(original\x2C primordials\x2C name);\x0d\n  copyPrototype(original.prototype\x2C primordials\x2C `${name}Prototype`);\x0d\n});\x0d\n\x0d\n// Create copies of abstract intrinsic objects that are not directly exposed\x0d\n// on the global object.\x0d\n// Refs: https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object\x0d\n[\x0d\n  { name: 'TypedArray'\x2C original: Reflect.getPrototypeOf(Uint8Array) }\x2C\x0d\n  { name: 'ArrayIterator'\x2C original: {\x0d\n    prototype: Reflect.getPrototypeOf(Array.prototype[Symbol.iterator]())\x2C\x0d\n  } }\x2C\x0d\n  { name: 'StringIterator'\x2C original: {\x0d\n    prototype: Reflect.getPrototypeOf(String.prototype[Symbol.iterator]())\x2C\x0d\n  } }\x2C\x0d\n].forEach(({ name\x2C original }) => {\x0d\n  primordials[name] = original;\x0d\n  // The static %TypedArray% methods require a valid `this`\x2C but can't be bound\x2C\x0d\n  // as they need a subclass constructor as the receiver:\x0d\n  copyPrototype(original\x2C primordials\x2C name);\x0d\n  copyPrototype(original.prototype\x2C primordials\x2C `${name}Prototype`);\x0d\n});\x0d\n\x0d\n/* eslint-enable node-core/prefer-primordials */\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  FinalizationRegistry\x2C\x0d\n  FunctionPrototypeCall\x2C\x0d\n  Map\x2C\x0d\n  ObjectFreeze\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  Promise\x2C\x0d\n  PromisePrototypeThen\x2C\x0d\n  Set\x2C\x0d\n  SymbolIterator\x2C\x0d\n  WeakMap\x2C\x0d\n  WeakRef\x2C\x0d\n  WeakSet\x2C\x0d\n} = primordials;\x0d\n\x0d\n// Because these functions are used by `makeSafe`\x2C which is exposed\x0d\n// on the `primordials` object\x2C it's important to use const references\x0d\n// to the primordials that they use:\x0d\nconst createSafeIterator = (factory\x2C next) => {\x0d\n  class SafeIterator {\x0d\n    constructor(iterable) {\x0d\n      this._iterator = factory(iterable);\x0d\n    }\x0d\n    next() {\x0d\n      return next(this._iterator);\x0d\n    }\x0d\n    [SymbolIterator]() {\x0d\n      return this;\x0d\n    }\x0d\n  }\x0d\n  ObjectSetPrototypeOf(SafeIterator.prototype\x2C null);\x0d\n  ObjectFreeze(SafeIterator.prototype);\x0d\n  ObjectFreeze(SafeIterator);\x0d\n  return SafeIterator;\x0d\n};\x0d\n\x0d\nprimordials.SafeArrayIterator = createSafeIterator(\x0d\n  primordials.ArrayPrototypeSymbolIterator\x2C\x0d\n  primordials.ArrayIteratorPrototypeNext\x0d\n);\x0d\nprimordials.SafeStringIterator = createSafeIterator(\x0d\n  primordials.StringPrototypeSymbolIterator\x2C\x0d\n  primordials.StringIteratorPrototypeNext\x0d\n);\x0d\n\x0d\nconst copyProps = (src\x2C dest) => {\x0d\n  ArrayPrototypeForEach(ReflectOwnKeys(src)\x2C (key) => {\x0d\n    if (!ReflectGetOwnPropertyDescriptor(dest\x2C key)) {\x0d\n      ReflectDefineProperty(\x0d\n        dest\x2C\x0d\n        key\x2C\x0d\n        ReflectGetOwnPropertyDescriptor(src\x2C key));\x0d\n    }\x0d\n  });\x0d\n};\x0d\n\x0d\n/**\x0d\n * @type {typeof primordials.makeSafe}\x0d\n */\x0d\nconst makeSafe = (unsafe\x2C safe) => {\x0d\n  if (SymbolIterator in unsafe.prototype) {\x0d\n    const dummy = new unsafe();\x0d\n    let next; // We can reuse the same `next` method.\x0d\n\x0d\n    ArrayPrototypeForEach(ReflectOwnKeys(unsafe.prototype)\x2C (key) => {\x0d\n      if (!ReflectGetOwnPropertyDescriptor(safe.prototype\x2C key)) {\x0d\n        const desc = ReflectGetOwnPropertyDescriptor(unsafe.prototype\x2C key);\x0d\n        if (\x0d\n          typeof desc.value === 'function' &&\x0d\n          desc.value.length === 0 &&\x0d\n          SymbolIterator in (FunctionPrototypeCall(desc.value\x2C dummy) ?? {})\x0d\n        ) {\x0d\n          const createIterator = uncurryThis(desc.value);\x0d\n          next ??= uncurryThis(createIterator(dummy).next);\x0d\n          const SafeIterator = createSafeIterator(createIterator\x2C next);\x0d\n          desc.value = function() {\x0d\n            return new SafeIterator(this);\x0d\n          };\x0d\n        }\x0d\n        ReflectDefineProperty(safe.prototype\x2C key\x2C desc);\x0d\n      }\x0d\n    });\x0d\n  } else {\x0d\n    copyProps(unsafe.prototype\x2C safe.prototype);\x0d\n  }\x0d\n  copyProps(unsafe\x2C safe);\x0d\n\x0d\n  ObjectSetPrototypeOf(safe.prototype\x2C null);\x0d\n  ObjectFreeze(safe.prototype);\x0d\n  ObjectFreeze(safe);\x0d\n  return safe;\x0d\n};\x0d\nprimordials.makeSafe = makeSafe;\x0d\n\x0d\n// Subclass the constructors because we need to use their prototype\x0d\n// methods later.\x0d\n// Defining the `constructor` is necessary here to avoid the default\x0d\n// constructor which uses the user-mutable `%ArrayIteratorPrototype%.next`.\x0d\nprimordials.SafeMap = makeSafe(\x0d\n  Map\x2C\x0d\n  class SafeMap extends Map {\x0d\n    constructor(i) { super(i); } // eslint-disable-line no-useless-constructor\x0d\n  }\x0d\n);\x0d\nprimordials.SafeWeakMap = makeSafe(\x0d\n  WeakMap\x2C\x0d\n  class SafeWeakMap extends WeakMap {\x0d\n    constructor(i) { super(i); } // eslint-disable-line no-useless-constructor\x0d\n  }\x0d\n);\x0d\n\x0d\nprimordials.SafeSet = makeSafe(\x0d\n  Set\x2C\x0d\n  class SafeSet extends Set {\x0d\n    constructor(i) { super(i); } // eslint-disable-line no-useless-constructor\x0d\n  }\x0d\n);\x0d\nprimordials.SafeWeakSet = makeSafe(\x0d\n  WeakSet\x2C\x0d\n  class SafeWeakSet extends WeakSet {\x0d\n    constructor(i) { super(i); } // eslint-disable-line no-useless-constructor\x0d\n  }\x0d\n);\x0d\n\x0d\nprimordials.SafeFinalizationRegistry = makeSafe(\x0d\n  FinalizationRegistry\x2C\x0d\n  class SafeFinalizationRegistry extends FinalizationRegistry {\x0d\n    // eslint-disable-next-line no-useless-constructor\x0d\n    constructor(cleanupCallback) { super(cleanupCallback); }\x0d\n  }\x0d\n);\x0d\nprimordials.SafeWeakRef = makeSafe(\x0d\n  WeakRef\x2C\x0d\n  class SafeWeakRef extends WeakRef {\x0d\n    // eslint-disable-next-line no-useless-constructor\x0d\n    constructor(target) { super(target); }\x0d\n  }\x0d\n);\x0d\n\x0d\nconst SafePromise = makeSafe(\x0d\n  Promise\x2C\x0d\n  class SafePromise extends Promise {\x0d\n    // eslint-disable-next-line no-useless-constructor\x0d\n    constructor(executor) { super(executor); }\x0d\n  }\x0d\n);\x0d\n\x0d\nprimordials.PromisePrototypeCatch = (thisPromise\x2C onRejected) =>\x0d\n  PromisePrototypeThen(thisPromise\x2C undefined\x2C onRejected);\x0d\n\x0d\n/**\x0d\n * Attaches a callback that is invoked when the Promise is settled (fulfilled or\x0d\n * rejected). The resolved value cannot be modified from the callback.\x0d\n * Prefer using async functions when possible.\x0d\n * @param {Promise<any>} thisPromise\x0d\n * @param {() => void) | undefined | null} onFinally The callback to execute\x0d\n *        when the Promise is settled (fulfilled or rejected).\x0d\n * @returns {Promise} A Promise for the completion of the callback.\x0d\n */\x0d\nprimordials.SafePromisePrototypeFinally = (thisPromise\x2C onFinally) =>\x0d\n  // Wrapping on a new Promise is necessary to not expose the SafePromise\x0d\n  // prototype to user-land.\x0d\n  new Promise((a\x2C b) =>\x0d\n    new SafePromise((a\x2C b) => PromisePrototypeThen(thisPromise\x2C a\x2C b))\x0d\n      .finally(onFinally)\x0d\n      .then(a\x2C b)\x0d\n  );\x0d\n\x0d\nprimordials.AsyncIteratorPrototype =\x0d\n  primordials.ReflectGetPrototypeOf(\x0d\n    primordials.ReflectGetPrototypeOf(\x0d\n      async function* () {}).prototype);\x0d\n\x0d\nObjectSetPrototypeOf(primordials\x2C null);\x0d\nObjectFreeze(primordials);\x0d\n
code-source-info,0x39aa2853216,6,10890,10907,C3O10896C7O10902C11O10896C26O10906,,
code-creation,LazyCompile,10,353052,0x39aa2854056,27,SafeMap node:internal/per_context/primordials:351:16,0x13fcdd0a018,~
code-source-info,0x39aa2854056,6,10550,10567,C3O10556C7O10562C11O10556C26O10566,,
code-creation,LazyCompile,10,353159,0x39aa28541ee,16,IterableWeakMap node:internal/util/iterable_weak_map:16:1,0x39aa2850bc0,~
code-source-info,0x39aa28541ee,109,388,388,C0O388C15O388,,
code-creation,LazyCompile,10,353212,0x39aa2854576,27,SafeWeakMap node:internal/per_context/primordials:357:16,0x13fcdd0a0d8,~
code-source-info,0x39aa2854576,6,10727,10744,C3O10733C7O10739C11O10733C26O10743,,
code-creation,LazyCompile,10,353266,0x39aa285467e,27,SafeFinalizationRegistry node:internal/per_context/primordials:378:16,0x13fcdd0a328,~
code-source-info,0x39aa285467e,6,11354,11399,C3O11374C7O11380C11O11374C26O11398,,
code-creation,LazyCompile,10,353462,0x39aa2854e1e,492,initializeDeprecations node:internal/bootstrap/pre_execution:243:32,0x2e2fa682348,~
code-source-info,0x39aa2854e1e
code-creation,LazyCompile,10,353632,0x39aa2855376,53,initializeWASI node:internal/bootstrap/pre_execution:407:24,0x2e2fa6824c8,~
code-source-info,0x39aa2855376,95,13299,13510,C0O13332C6O13332C11O13315C16O13399C21O13403C29O13403C35O13419C37O13451C43O13451C47O13444C52O13509,,
code-creation,LazyCompile,10,353718,0x39aa2855576,66,initializeCJSLoader node:internal/bootstrap/pre_execution:414:29,0x2e2fa682518,~
code-source-info,0x39aa2855576,95,13542,13865,C0O13568C6O13568C11O13611C16O13616C20O13636C26O13675C31O13682C36O13682C40O13781C51O13803C56O13839C60O13796C65O13864,,
code-creation,Eval,10,354935,0x39aa28574de,5, node:internal/modules/cjs/loader:1:1,0x39aa2856bf8,~
script-source,111,node:internal/modules/cjs/loader,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypeConcat\x2C\x0d\n  ArrayPrototypeFilter\x2C\x0d\n  ArrayPrototypeIncludes\x2C\x0d\n  ArrayPrototypeIndexOf\x2C\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  ArrayPrototypeSplice\x2C\x0d\n  ArrayPrototypeUnshift\x2C\x0d\n  ArrayPrototypeUnshiftApply\x2C\x0d\n  Boolean\x2C\x0d\n  Error\x2C\x0d\n  JSONParse\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectFreeze\x2C\x0d\n  ObjectGetOwnPropertyDescriptor\x2C\x0d\n  ObjectGetPrototypeOf\x2C\x0d\n  ObjectKeys\x2C\x0d\n  ObjectPrototype\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  Proxy\x2C\x0d\n  ReflectApply\x2C\x0d\n  ReflectSet\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  RegExpPrototypeTest\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeWeakMap\x2C\x0d\n  String\x2C\x0d\n  StringPrototypeCharAt\x2C\x0d\n  StringPrototypeCharCodeAt\x2C\x0d\n  StringPrototypeEndsWith\x2C\x0d\n  StringPrototypeLastIndexOf\x2C\x0d\n  StringPrototypeIndexOf\x2C\x0d\n  StringPrototypeMatch\x2C\x0d\n  StringPrototypeRepeat\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeSplit\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n} = primordials;\x0d\n\x0d\n// Map used to store CJS parsing data.\x0d\nconst cjsParseCache = new SafeWeakMap();\x0d\n\x0d\n// Set first due to cycle with ESM loader functions.\x0d\nmodule.exports = {\x0d\n  wrapSafe\x2C Module\x2C toRealPath\x2C readPackageScope\x2C cjsParseCache\x2C\x0d\n  get hasLoadedAnyUserCJSModule() { return hasLoadedAnyUserCJSModule; }\x0d\n};\x0d\n\x0d\nconst { NativeModule } = require('internal/bootstrap/loaders');\x0d\nconst {\x0d\n  maybeCacheSourceMap\x2C\x0d\n} = require('internal/source_map/source_map_cache');\x0d\nconst { pathToFileURL\x2C fileURLToPath\x2C isURLInstance } = require('internal/url');\x0d\nconst { deprecate } = require('internal/util');\x0d\nconst vm = require('vm');\x0d\nconst assert = require('internal/assert');\x0d\nconst fs = require('fs');\x0d\nconst internalFS = require('internal/fs/utils');\x0d\nconst path = require('path');\x0d\nconst { sep } = path;\x0d\nconst { internalModuleStat } = internalBinding('fs');\x0d\nconst packageJsonReader = require('internal/modules/package_json_reader');\x0d\nconst { safeGetenv } = internalBinding('credentials');\x0d\nconst {\x0d\n  cjsConditions\x2C\x0d\n  hasEsmSyntax\x2C\x0d\n  loadNativeModule\x2C\x0d\n  makeRequireFunction\x2C\x0d\n  normalizeReferrerURL\x2C\x0d\n  stripBOM\x2C\x0d\n} = require('internal/modules/cjs/helpers');\x0d\nconst { getOptionValue } = require('internal/options');\x0d\nconst preserveSymlinks = getOptionValue('--preserve-symlinks');\x0d\nconst preserveSymlinksMain = getOptionValue('--preserve-symlinks-main');\x0d\n// Do not eagerly grab .manifest\x2C it may be in TDZ\x0d\nconst policy = getOptionValue('--experimental-policy') ?\x0d\n  require('internal/process/policy') :\x0d\n  null;\x0d\n\x0d\n// Whether any user-provided CJS modules had been loaded (executed).\x0d\n// Used for internal assertions.\x0d\nlet hasLoadedAnyUserCJSModule = false;\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_INVALID_MODULE_SPECIFIER\x2C\x0d\n    ERR_REQUIRE_ESM\x2C\x0d\n    ERR_UNKNOWN_BUILTIN_MODULE\x2C\x0d\n  }\x2C\x0d\n  setArrowMessage\x2C\x0d\n} = require('internal/errors');\x0d\nconst { validateString } = require('internal/validators');\x0d\nconst pendingDeprecation = getOptionValue('--pending-deprecation');\x0d\n\x0d\nconst {\x0d\n  CHAR_FORWARD_SLASH\x2C\x0d\n  CHAR_BACKWARD_SLASH\x2C\x0d\n  CHAR_COLON\x0d\n} = require('internal/constants');\x0d\n\x0d\nconst {\x0d\n  isProxy\x0d\n} = require('internal/util/types');\x0d\n\x0d\nconst asyncESM = require('internal/process/esm_loader');\x0d\nconst { enrichCJSError } = require('internal/modules/esm/translators');\x0d\nconst { kEvaluated } = internalBinding('module_wrap');\x0d\nconst {\x0d\n  encodedSepRegEx\x2C\x0d\n  packageExportsResolve\x2C\x0d\n  packageImportsResolve\x0d\n} = require('internal/modules/esm/resolve');\x0d\n\x0d\nconst isWindows = process.platform === 'win32';\x0d\n\x0d\nconst relativeResolveCache = ObjectCreate(null);\x0d\n\x0d\nlet requireDepth = 0;\x0d\nlet statCache = null;\x0d\nlet isPreloading = false;\x0d\n\x0d\nfunction stat(filename) {\x0d\n  filename = path.toNamespacedPath(filename);\x0d\n  if (statCache !== null) {\x0d\n    const result = statCache.get(filename);\x0d\n    if (result !== undefined) return result;\x0d\n  }\x0d\n  const result = internalModuleStat(filename);\x0d\n  if (statCache !== null && result >= 0) {\x0d\n    // Only set cache when `internalModuleStat(filename)` succeeds.\x0d\n    statCache.set(filename\x2C result);\x0d\n  }\x0d\n  return result;\x0d\n}\x0d\n\x0d\nfunction updateChildren(parent\x2C child\x2C scan) {\x0d\n  const children = parent?.children;\x0d\n  if (children && !(scan && ArrayPrototypeIncludes(children\x2C child)))\x0d\n    ArrayPrototypePush(children\x2C child);\x0d\n}\x0d\n\x0d\nconst moduleParentCache = new SafeWeakMap();\x0d\nfunction Module(id = ''\x2C parent) {\x0d\n  this.id = id;\x0d\n  this.path = path.dirname(id);\x0d\n  this.exports = {};\x0d\n  moduleParentCache.set(this\x2C parent);\x0d\n  updateChildren(parent\x2C this\x2C false);\x0d\n  this.filename = null;\x0d\n  this.loaded = false;\x0d\n  this.children = [];\x0d\n}\x0d\n\x0d\nconst builtinModules = [];\x0d\nfor (const { 0: id\x2C 1: mod } of NativeModule.map) {\x0d\n  if (mod.canBeRequiredByUsers) {\x0d\n    ArrayPrototypePush(builtinModules\x2C id);\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectFreeze(builtinModules);\x0d\nModule.builtinModules = builtinModules;\x0d\n\x0d\nModule._cache = ObjectCreate(null);\x0d\nModule._pathCache = ObjectCreate(null);\x0d\nModule._extensions = ObjectCreate(null);\x0d\nlet modulePaths = [];\x0d\nModule.globalPaths = [];\x0d\n\x0d\nlet patched = false;\x0d\n\x0d\n// eslint-disable-next-line func-style\x0d\nlet wrap = function(script) {\x0d\n  return Module.wrapper[0] + script + Module.wrapper[1];\x0d\n};\x0d\n\x0d\nconst wrapper = [\x0d\n  '(function (exports\x2C require\x2C module\x2C __filename\x2C __dirname) { '\x2C\x0d\n  '\\n});'\x2C\x0d\n];\x0d\n\x0d\nlet wrapperProxy = new Proxy(wrapper\x2C {\x0d\n  set(target\x2C property\x2C value\x2C receiver) {\x0d\n    patched = true;\x0d\n    return ReflectSet(target\x2C property\x2C value\x2C receiver);\x0d\n  }\x2C\x0d\n\x0d\n  defineProperty(target\x2C property\x2C descriptor) {\x0d\n    patched = true;\x0d\n    return ObjectDefineProperty(target\x2C property\x2C descriptor);\x0d\n  }\x0d\n});\x0d\n\x0d\nObjectDefineProperty(Module\x2C 'wrap'\x2C {\x0d\n  get() {\x0d\n    return wrap;\x0d\n  }\x2C\x0d\n\x0d\n  set(value) {\x0d\n    patched = true;\x0d\n    wrap = value;\x0d\n  }\x0d\n});\x0d\n\x0d\nObjectDefineProperty(Module\x2C 'wrapper'\x2C {\x0d\n  get() {\x0d\n    return wrapperProxy;\x0d\n  }\x2C\x0d\n\x0d\n  set(value) {\x0d\n    patched = true;\x0d\n    wrapperProxy = value;\x0d\n  }\x0d\n});\x0d\n\x0d\nconst isPreloadingDesc = { get() { return isPreloading; } };\x0d\nObjectDefineProperty(Module.prototype\x2C 'isPreloading'\x2C isPreloadingDesc);\x0d\nObjectDefineProperty(NativeModule.prototype\x2C 'isPreloading'\x2C isPreloadingDesc);\x0d\n\x0d\nfunction getModuleParent() {\x0d\n  return moduleParentCache.get(this);\x0d\n}\x0d\n\x0d\nfunction setModuleParent(value) {\x0d\n  moduleParentCache.set(this\x2C value);\x0d\n}\x0d\n\x0d\nObjectDefineProperty(Module.prototype\x2C 'parent'\x2C {\x0d\n  get: pendingDeprecation ? deprecate(\x0d\n    getModuleParent\x2C\x0d\n    'module.parent is deprecated due to accuracy issues. Please use ' +\x0d\n      'require.main to find program entry point instead.'\x2C\x0d\n    'DEP0144'\x0d\n  ) : getModuleParent\x2C\x0d\n  set: pendingDeprecation ? deprecate(\x0d\n    setModuleParent\x2C\x0d\n    'module.parent is deprecated due to accuracy issues. Please use ' +\x0d\n      'require.main to find program entry point instead.'\x2C\x0d\n    'DEP0144'\x0d\n  ) : setModuleParent\x2C\x0d\n});\x0d\n\x0d\nlet debug = require('internal/util/debuglog').debuglog('module'\x2C (fn) => {\x0d\n  debug = fn;\x0d\n});\x0d\nModule._debug = deprecate(debug\x2C 'Module._debug is deprecated.'\x2C 'DEP0077');\x0d\n\x0d\n// Given a module name\x2C and a list of paths to test\x2C returns the first\x0d\n// matching file in the following precedence.\x0d\n//\x0d\n// require("a.<ext>")\x0d\n//   -> a.<ext>\x0d\n//\x0d\n// require("a")\x0d\n//   -> a\x0d\n//   -> a.<ext>\x0d\n//   -> a/index.<ext>\x0d\n\x0d\nconst packageJsonCache = new SafeMap();\x0d\n\x0d\nfunction readPackage(requestPath) {\x0d\n  const jsonPath = path.resolve(requestPath\x2C 'package.json');\x0d\n\x0d\n  const existing = packageJsonCache.get(jsonPath);\x0d\n  if (existing !== undefined) return existing;\x0d\n\x0d\n  const result = packageJsonReader.read(jsonPath);\x0d\n  const json = result.containsKeys === false ? '{}' : result.string;\x0d\n  if (json === undefined) {\x0d\n    packageJsonCache.set(jsonPath\x2C false);\x0d\n    return false;\x0d\n  }\x0d\n\x0d\n  try {\x0d\n    const parsed = JSONParse(json);\x0d\n    const filtered = {\x0d\n      name: parsed.name\x2C\x0d\n      main: parsed.main\x2C\x0d\n      exports: parsed.exports\x2C\x0d\n      imports: parsed.imports\x2C\x0d\n      type: parsed.type\x0d\n    };\x0d\n    packageJsonCache.set(jsonPath\x2C filtered);\x0d\n    return filtered;\x0d\n  } catch (e) {\x0d\n    e.path = jsonPath;\x0d\n    e.message = 'Error parsing ' + jsonPath + ': ' + e.message;\x0d\n    throw e;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction readPackageScope(checkPath) {\x0d\n  const rootSeparatorIndex = StringPrototypeIndexOf(checkPath\x2C sep);\x0d\n  let separatorIndex;\x0d\n  do {\x0d\n    separatorIndex = StringPrototypeLastIndexOf(checkPath\x2C sep);\x0d\n    checkPath = StringPrototypeSlice(checkPath\x2C 0\x2C separatorIndex);\x0d\n    if (StringPrototypeEndsWith(checkPath\x2C sep + 'node_modules'))\x0d\n      return false;\x0d\n    const pjson = readPackage(checkPath + sep);\x0d\n    if (pjson) return {\x0d\n      data: pjson\x2C\x0d\n      path: checkPath\x2C\x0d\n    };\x0d\n  } while (separatorIndex > rootSeparatorIndex);\x0d\n  return false;\x0d\n}\x0d\n\x0d\nfunction tryPackage(requestPath\x2C exts\x2C isMain\x2C originalPath) {\x0d\n  const pkg = readPackage(requestPath)?.main;\x0d\n\x0d\n  if (!pkg) {\x0d\n    return tryExtensions(path.resolve(requestPath\x2C 'index')\x2C exts\x2C isMain);\x0d\n  }\x0d\n\x0d\n  const filename = path.resolve(requestPath\x2C pkg);\x0d\n  let actual = tryFile(filename\x2C isMain) ||\x0d\n    tryExtensions(filename\x2C exts\x2C isMain) ||\x0d\n    tryExtensions(path.resolve(filename\x2C 'index')\x2C exts\x2C isMain);\x0d\n  if (actual === false) {\x0d\n    actual = tryExtensions(path.resolve(requestPath\x2C 'index')\x2C exts\x2C isMain);\x0d\n    if (!actual) {\x0d\n      // eslint-disable-next-line no-restricted-syntax\x0d\n      const err = new Error(\x0d\n        `Cannot find module '${filename}'. ` +\x0d\n        'Please verify that the package.json has a valid "main" entry'\x0d\n      );\x0d\n      err.code = 'MODULE_NOT_FOUND';\x0d\n      err.path = path.resolve(requestPath\x2C 'package.json');\x0d\n      err.requestPath = originalPath;\x0d\n      // TODO(BridgeAR): Add the requireStack as well.\x0d\n      throw err;\x0d\n    } else {\x0d\n      const jsonPath = path.resolve(requestPath\x2C 'package.json');\x0d\n      process.emitWarning(\x0d\n        `Invalid 'main' field in '${jsonPath}' of '${pkg}'. ` +\x0d\n          'Please either fix that or report it to the module author'\x2C\x0d\n        'DeprecationWarning'\x2C\x0d\n        'DEP0128'\x0d\n      );\x0d\n    }\x0d\n  }\x0d\n  return actual;\x0d\n}\x0d\n\x0d\n// In order to minimize unnecessary lstat() calls\x2C\x0d\n// this cache is a list of known-real paths.\x0d\n// Set to an empty Map to reset.\x0d\nconst realpathCache = new SafeMap();\x0d\n\x0d\n// Check if the file exists and is not a directory\x0d\n// if using --preserve-symlinks and isMain is false\x2C\x0d\n// keep symlinks intact\x2C otherwise resolve to the\x0d\n// absolute realpath.\x0d\nfunction tryFile(requestPath\x2C isMain) {\x0d\n  const rc = stat(requestPath);\x0d\n  if (rc !== 0) return;\x0d\n  if (preserveSymlinks && !isMain) {\x0d\n    return path.resolve(requestPath);\x0d\n  }\x0d\n  return toRealPath(requestPath);\x0d\n}\x0d\n\x0d\nfunction toRealPath(requestPath) {\x0d\n  return fs.realpathSync(requestPath\x2C {\x0d\n    [internalFS.realpathCacheKey]: realpathCache\x0d\n  });\x0d\n}\x0d\n\x0d\n// Given a path\x2C check if the file exists with any of the set extensions\x0d\nfunction tryExtensions(p\x2C exts\x2C isMain) {\x0d\n  for (let i = 0; i < exts.length; i++) {\x0d\n    const filename = tryFile(p + exts[i]\x2C isMain);\x0d\n\x0d\n    if (filename) {\x0d\n      return filename;\x0d\n    }\x0d\n  }\x0d\n  return false;\x0d\n}\x0d\n\x0d\n// Find the longest (possibly multi-dot) extension registered in\x0d\n// Module._extensions\x0d\nfunction findLongestRegisteredExtension(filename) {\x0d\n  const name = path.basename(filename);\x0d\n  let currentExtension;\x0d\n  let index;\x0d\n  let startIndex = 0;\x0d\n  while ((index = StringPrototypeIndexOf(name\x2C '.'\x2C startIndex)) !== -1) {\x0d\n    startIndex = index + 1;\x0d\n    if (index === 0) continue; // Skip dotfiles like .gitignore\x0d\n    currentExtension = StringPrototypeSlice(name\x2C index);\x0d\n    if (Module._extensions[currentExtension]) return currentExtension;\x0d\n  }\x0d\n  return '.js';\x0d\n}\x0d\n\x0d\nfunction trySelfParentPath(parent) {\x0d\n  if (!parent) return false;\x0d\n\x0d\n  if (parent.filename) {\x0d\n    return parent.filename;\x0d\n  } else if (parent.id === '<repl>' || parent.id === 'internal/preload') {\x0d\n    try {\x0d\n      return process.cwd() + path.sep;\x0d\n    } catch {\x0d\n      return false;\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction trySelf(parentPath\x2C request) {\x0d\n  if (!parentPath) return false;\x0d\n\x0d\n  const { data: pkg\x2C path: pkgPath } = readPackageScope(parentPath) || {};\x0d\n  if (!pkg || pkg.exports === undefined) return false;\x0d\n  if (typeof pkg.name !== 'string') return false;\x0d\n\x0d\n  let expansion;\x0d\n  if (request === pkg.name) {\x0d\n    expansion = '.';\x0d\n  } else if (StringPrototypeStartsWith(request\x2C `${pkg.name}/`)) {\x0d\n    expansion = '.' + StringPrototypeSlice(request\x2C pkg.name.length);\x0d\n  } else {\x0d\n    return false;\x0d\n  }\x0d\n\x0d\n  try {\x0d\n    return finalizeEsmResolution(packageExportsResolve(\x0d\n      pathToFileURL(pkgPath + '/package.json')\x2C expansion\x2C pkg\x2C\x0d\n      pathToFileURL(parentPath)\x2C cjsConditions)\x2C request\x2C parentPath\x2C pkgPath);\x0d\n  } catch (e) {\x0d\n    if (e.code === 'ERR_MODULE_NOT_FOUND')\x0d\n      throw createEsmNotFoundErr(request\x2C pkgPath + '/package.json');\x0d\n    throw e;\x0d\n  }\x0d\n}\x0d\n\x0d\n// This only applies to requests of a specific form:\x0d\n// 1. name/.*\x0d\n// 2. @scope/name/.*\x0d\nconst EXPORTS_PATTERN = /^((?:@[^/\\\\%]+\\/)?[^./\\\\%][^/\\\\%]*)(\\/.*)?$/;\x0d\nfunction resolveExports(nmPath\x2C request) {\x0d\n  // The implementation's behavior is meant to mirror resolution in ESM.\x0d\n  const { 1: name\x2C 2: expansion = '' } =\x0d\n    StringPrototypeMatch(request\x2C EXPORTS_PATTERN) || [];\x0d\n  if (!name)\x0d\n    return;\x0d\n  const pkgPath = path.resolve(nmPath\x2C name);\x0d\n  const pkg = readPackage(pkgPath);\x0d\n  if (pkg?.exports != null) {\x0d\n    try {\x0d\n      return finalizeEsmResolution(packageExportsResolve(\x0d\n        pathToFileURL(pkgPath + '/package.json')\x2C '.' + expansion\x2C pkg\x2C null\x2C\x0d\n        cjsConditions)\x2C request\x2C null\x2C pkgPath);\x0d\n    } catch (e) {\x0d\n      if (e.code === 'ERR_MODULE_NOT_FOUND')\x0d\n        throw createEsmNotFoundErr(request\x2C pkgPath + '/package.json');\x0d\n      throw e;\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nconst trailingSlashRegex = /(?:^|\\/)\\.?\\.$/;\x0d\nModule._findPath = function(request\x2C paths\x2C isMain) {\x0d\n  const absoluteRequest = path.isAbsolute(request);\x0d\n  if (absoluteRequest) {\x0d\n    paths = [''];\x0d\n  } else if (!paths || paths.length === 0) {\x0d\n    return false;\x0d\n  }\x0d\n\x0d\n  const cacheKey = request + '\\x00' + ArrayPrototypeJoin(paths\x2C '\\x00');\x0d\n  const entry = Module._pathCache[cacheKey];\x0d\n  if (entry)\x0d\n    return entry;\x0d\n\x0d\n  let exts;\x0d\n  let trailingSlash = request.length > 0 &&\x0d\n    StringPrototypeCharCodeAt(request\x2C request.length - 1) ===\x0d\n    CHAR_FORWARD_SLASH;\x0d\n  if (!trailingSlash) {\x0d\n    trailingSlash = RegExpPrototypeTest(trailingSlashRegex\x2C request);\x0d\n  }\x0d\n\x0d\n  // For each path\x0d\n  for (let i = 0; i < paths.length; i++) {\x0d\n    // Don't search further if path doesn't exist\x0d\n    const curPath = paths[i];\x0d\n    if (curPath && stat(curPath) < 1) continue;\x0d\n\x0d\n    if (!absoluteRequest) {\x0d\n      const exportsResolved = resolveExports(curPath\x2C request);\x0d\n      if (exportsResolved)\x0d\n        return exportsResolved;\x0d\n    }\x0d\n\x0d\n    const basePath = path.resolve(curPath\x2C request);\x0d\n    let filename;\x0d\n\x0d\n    const rc = stat(basePath);\x0d\n    if (!trailingSlash) {\x0d\n      if (rc === 0) {  // File.\x0d\n        if (!isMain) {\x0d\n          if (preserveSymlinks) {\x0d\n            filename = path.resolve(basePath);\x0d\n          } else {\x0d\n            filename = toRealPath(basePath);\x0d\n          }\x0d\n        } else if (preserveSymlinksMain) {\x0d\n          // For the main module\x2C we use the preserveSymlinksMain flag instead\x0d\n          // mainly for backward compatibility\x2C as the preserveSymlinks flag\x0d\n          // historically has not applied to the main module.  Most likely this\x0d\n          // was intended to keep .bin/ binaries working\x2C as following those\x0d\n          // symlinks is usually required for the imports in the corresponding\x0d\n          // files to resolve; that said\x2C in some use cases following symlinks\x0d\n          // causes bigger problems which is why the preserveSymlinksMain option\x0d\n          // is needed.\x0d\n          filename = path.resolve(basePath);\x0d\n        } else {\x0d\n          filename = toRealPath(basePath);\x0d\n        }\x0d\n      }\x0d\n\x0d\n      if (!filename) {\x0d\n        // Try it with each of the extensions\x0d\n        if (exts === undefined)\x0d\n          exts = ObjectKeys(Module._extensions);\x0d\n        filename = tryExtensions(basePath\x2C exts\x2C isMain);\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (!filename && rc === 1) {  // Directory.\x0d\n      // try it with each of the extensions at "index"\x0d\n      if (exts === undefined)\x0d\n        exts = ObjectKeys(Module._extensions);\x0d\n      filename = tryPackage(basePath\x2C exts\x2C isMain\x2C request);\x0d\n    }\x0d\n\x0d\n    if (filename) {\x0d\n      Module._pathCache[cacheKey] = filename;\x0d\n      return filename;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return false;\x0d\n};\x0d\n\x0d\n// 'node_modules' character codes reversed\x0d\nconst nmChars = [ 115\x2C 101\x2C 108\x2C 117\x2C 100\x2C 111\x2C 109\x2C 95\x2C 101\x2C 100\x2C 111\x2C 110 ];\x0d\nconst nmLen = nmChars.length;\x0d\nif (isWindows) {\x0d\n  // 'from' is the __dirname of the module.\x0d\n  Module._nodeModulePaths = function(from) {\x0d\n    // Guarantee that 'from' is absolute.\x0d\n    from = path.resolve(from);\x0d\n\x0d\n    // note: this approach *only* works when the path is guaranteed\x0d\n    // to be absolute.  Doing a fully-edge-case-correct path.split\x0d\n    // that works on both Windows and Posix is non-trivial.\x0d\n\x0d\n    // return root node_modules when path is 'D:\\\\'.\x0d\n    // path.resolve will make sure from.length >=3 in Windows.\x0d\n    if (StringPrototypeCharCodeAt(from\x2C from.length - 1) ===\x0d\n          CHAR_BACKWARD_SLASH &&\x0d\n        StringPrototypeCharCodeAt(from\x2C from.length - 2) === CHAR_COLON)\x0d\n      return [from + 'node_modules'];\x0d\n\x0d\n    const paths = [];\x0d\n    for (let i = from.length - 1\x2C p = 0\x2C last = from.length; i >= 0; --i) {\x0d\n      const code = StringPrototypeCharCodeAt(from\x2C i);\x0d\n      // The path segment separator check ('\\' and '/') was used to get\x0d\n      // node_modules path for every path segment.\x0d\n      // Use colon as an extra condition since we can get node_modules\x0d\n      // path for drive root like 'C:\\node_modules' and don't need to\x0d\n      // parse drive name.\x0d\n      if (code === CHAR_BACKWARD_SLASH ||\x0d\n          code === CHAR_FORWARD_SLASH ||\x0d\n          code === CHAR_COLON) {\x0d\n        if (p !== nmLen)\x0d\n          ArrayPrototypePush(\x0d\n            paths\x2C\x0d\n            StringPrototypeSlice(from\x2C 0\x2C last) + '\\\\node_modules'\x0d\n          );\x0d\n        last = i;\x0d\n        p = 0;\x0d\n      } else if (p !== -1) {\x0d\n        if (nmChars[p] === code) {\x0d\n          ++p;\x0d\n        } else {\x0d\n          p = -1;\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n\x0d\n    return paths;\x0d\n  };\x0d\n} else { // posix\x0d\n  // 'from' is the __dirname of the module.\x0d\n  Module._nodeModulePaths = function(from) {\x0d\n    // Guarantee that 'from' is absolute.\x0d\n    from = path.resolve(from);\x0d\n    // Return early not only to avoid unnecessary work\x2C but to *avoid* returning\x0d\n    // an array of two items for a root: [ '//node_modules'\x2C '/node_modules' ]\x0d\n    if (from === '/')\x0d\n      return ['/node_modules'];\x0d\n\x0d\n    // note: this approach *only* works when the path is guaranteed\x0d\n    // to be absolute.  Doing a fully-edge-case-correct path.split\x0d\n    // that works on both Windows and Posix is non-trivial.\x0d\n    const paths = [];\x0d\n    for (let i = from.length - 1\x2C p = 0\x2C last = from.length; i >= 0; --i) {\x0d\n      const code = StringPrototypeCharCodeAt(from\x2C i);\x0d\n      if (code === CHAR_FORWARD_SLASH) {\x0d\n        if (p !== nmLen)\x0d\n          ArrayPrototypePush(\x0d\n            paths\x2C\x0d\n            StringPrototypeSlice(from\x2C 0\x2C last) + '/node_modules'\x0d\n          );\x0d\n        last = i;\x0d\n        p = 0;\x0d\n      } else if (p !== -1) {\x0d\n        if (nmChars[p] === code) {\x0d\n          ++p;\x0d\n        } else {\x0d\n          p = -1;\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n\x0d\n    // Append /node_modules to handle root paths.\x0d\n    ArrayPrototypePush(paths\x2C '/node_modules');\x0d\n\x0d\n    return paths;\x0d\n  };\x0d\n}\x0d\n\x0d\nModule._resolveLookupPaths = function(request\x2C parent) {\x0d\n  if (NativeModule.canBeRequiredByUsers(request)) {\x0d\n    debug('looking for %j in []'\x2C request);\x0d\n    return null;\x0d\n  }\x0d\n\x0d\n  // Check for node modules paths.\x0d\n  if (StringPrototypeCharAt(request\x2C 0) !== '.' ||\x0d\n      (request.length > 1 &&\x0d\n      StringPrototypeCharAt(request\x2C 1) !== '.' &&\x0d\n      StringPrototypeCharAt(request\x2C 1) !== '/' &&\x0d\n      (!isWindows || StringPrototypeCharAt(request\x2C 1) !== '\\\\'))) {\x0d\n\x0d\n    let paths = modulePaths;\x0d\n    if (parent?.paths?.length) {\x0d\n      paths = ArrayPrototypeConcat(parent.paths\x2C paths);\x0d\n    }\x0d\n\x0d\n    debug('looking for %j in %j'\x2C request\x2C paths);\x0d\n    return paths.length > 0 ? paths : null;\x0d\n  }\x0d\n\x0d\n  // In REPL\x2C parent.filename is null.\x0d\n  if (!parent || !parent.id || !parent.filename) {\x0d\n    // Make require('./path/to/foo') work - normally the path is taken\x0d\n    // from realpath(__filename) but in REPL there is no filename\x0d\n    const mainPaths = ['.'];\x0d\n\x0d\n    debug('looking for %j in %j'\x2C request\x2C mainPaths);\x0d\n    return mainPaths;\x0d\n  }\x0d\n\x0d\n  debug('RELATIVE: requested: %s from parent.id %s'\x2C request\x2C parent.id);\x0d\n\x0d\n  const parentDir = [path.dirname(parent.filename)];\x0d\n  debug('looking for %j'\x2C parentDir);\x0d\n  return parentDir;\x0d\n};\x0d\n\x0d\nfunction emitCircularRequireWarning(prop) {\x0d\n  process.emitWarning(\x0d\n    `Accessing non-existent property '${String(prop)}' of module exports ` +\x0d\n    'inside circular dependency'\x0d\n  );\x0d\n}\x0d\n\x0d\n// A Proxy that can be used as the prototype of a module.exports object and\x0d\n// warns when non-existent properties are accessed.\x0d\nconst CircularRequirePrototypeWarningProxy = new Proxy({}\x2C {\x0d\n  get(target\x2C prop) {\x0d\n    // Allow __esModule access in any case because it is used in the output\x0d\n    // of transpiled code to determine whether something comes from an\x0d\n    // ES module\x2C and is not used as a regular key of `module.exports`.\x0d\n    if (prop in target || prop === '__esModule') return target[prop];\x0d\n    emitCircularRequireWarning(prop);\x0d\n    return undefined;\x0d\n  }\x2C\x0d\n\x0d\n  getOwnPropertyDescriptor(target\x2C prop) {\x0d\n    if (ObjectPrototypeHasOwnProperty(target\x2C prop) || prop === '__esModule')\x0d\n      return ObjectGetOwnPropertyDescriptor(target\x2C prop);\x0d\n    emitCircularRequireWarning(prop);\x0d\n    return undefined;\x0d\n  }\x0d\n});\x0d\n\x0d\nfunction getExportsForCircularRequire(module) {\x0d\n  if (module.exports &&\x0d\n      !isProxy(module.exports) &&\x0d\n      ObjectGetPrototypeOf(module.exports) === ObjectPrototype &&\x0d\n      // Exclude transpiled ES6 modules / TypeScript code because those may\x0d\n      // employ unusual patterns for accessing 'module.exports'. That should\x0d\n      // be okay because ES6 modules have a different approach to circular\x0d\n      // dependencies anyway.\x0d\n      !module.exports.__esModule) {\x0d\n    // This is later unset once the module is done loading.\x0d\n    ObjectSetPrototypeOf(\x0d\n      module.exports\x2C CircularRequirePrototypeWarningProxy);\x0d\n  }\x0d\n\x0d\n  return module.exports;\x0d\n}\x0d\n\x0d\n// Check the cache for the requested file.\x0d\n// 1. If a module already exists in the cache: return its exports object.\x0d\n// 2. If the module is native: call\x0d\n//    `NativeModule.prototype.compileForPublicLoader()` and return the exports.\x0d\n// 3. Otherwise\x2C create a new module for the file and save it to the cache.\x0d\n//    Then have it load  the file contents before returning its exports\x0d\n//    object.\x0d\nModule._load = function(request\x2C parent\x2C isMain) {\x0d\n  let relResolveCacheIdentifier;\x0d\n  if (parent) {\x0d\n    debug('Module._load REQUEST %s parent: %s'\x2C request\x2C parent.id);\x0d\n    // Fast path for (lazy loaded) modules in the same directory. The indirect\x0d\n    // caching is required to allow cache invalidation without changing the old\x0d\n    // cache key names.\x0d\n    relResolveCacheIdentifier = `${parent.path}\\x00${request}`;\x0d\n    const filename = relativeResolveCache[relResolveCacheIdentifier];\x0d\n    if (filename !== undefined) {\x0d\n      const cachedModule = Module._cache[filename];\x0d\n      if (cachedModule !== undefined) {\x0d\n        updateChildren(parent\x2C cachedModule\x2C true);\x0d\n        if (!cachedModule.loaded)\x0d\n          return getExportsForCircularRequire(cachedModule);\x0d\n        return cachedModule.exports;\x0d\n      }\x0d\n      delete relativeResolveCache[relResolveCacheIdentifier];\x0d\n    }\x0d\n  }\x0d\n\x0d\n  const filename = Module._resolveFilename(request\x2C parent\x2C isMain);\x0d\n  if (StringPrototypeStartsWith(filename\x2C 'node:')) {\x0d\n    // Slice 'node:' prefix\x0d\n    const id = StringPrototypeSlice(filename\x2C 5);\x0d\n\x0d\n    const module = loadNativeModule(id\x2C request);\x0d\n    if (!module?.canBeRequiredByUsers) {\x0d\n      throw new ERR_UNKNOWN_BUILTIN_MODULE(filename);\x0d\n    }\x0d\n\x0d\n    return module.exports;\x0d\n  }\x0d\n\x0d\n  const cachedModule = Module._cache[filename];\x0d\n  if (cachedModule !== undefined) {\x0d\n    updateChildren(parent\x2C cachedModule\x2C true);\x0d\n    if (!cachedModule.loaded) {\x0d\n      const parseCachedModule = cjsParseCache.get(cachedModule);\x0d\n      if (!parseCachedModule || parseCachedModule.loaded)\x0d\n        return getExportsForCircularRequire(cachedModule);\x0d\n      parseCachedModule.loaded = true;\x0d\n    } else {\x0d\n      return cachedModule.exports;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  const mod = loadNativeModule(filename\x2C request);\x0d\n  if (mod?.canBeRequiredByUsers) return mod.exports;\x0d\n\x0d\n  // Don't call updateChildren()\x2C Module constructor already does.\x0d\n  const module = cachedModule || new Module(filename\x2C parent);\x0d\n\x0d\n  if (isMain) {\x0d\n    process.mainModule = module;\x0d\n    module.id = '.';\x0d\n  }\x0d\n\x0d\n  Module._cache[filename] = module;\x0d\n  if (parent !== undefined) {\x0d\n    relativeResolveCache[relResolveCacheIdentifier] = filename;\x0d\n  }\x0d\n\x0d\n  let threw = true;\x0d\n  try {\x0d\n    module.load(filename);\x0d\n    threw = false;\x0d\n  } finally {\x0d\n    if (threw) {\x0d\n      delete Module._cache[filename];\x0d\n      if (parent !== undefined) {\x0d\n        delete relativeResolveCache[relResolveCacheIdentifier];\x0d\n        const children = parent?.children;\x0d\n        if (ArrayIsArray(children)) {\x0d\n          const index = ArrayPrototypeIndexOf(children\x2C module);\x0d\n          if (index !== -1) {\x0d\n            ArrayPrototypeSplice(children\x2C index\x2C 1);\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n    } else if (module.exports &&\x0d\n               !isProxy(module.exports) &&\x0d\n               ObjectGetPrototypeOf(module.exports) ===\x0d\n                 CircularRequirePrototypeWarningProxy) {\x0d\n      ObjectSetPrototypeOf(module.exports\x2C ObjectPrototype);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return module.exports;\x0d\n};\x0d\n\x0d\nModule._resolveFilename = function(request\x2C parent\x2C isMain\x2C options) {\x0d\n  if (StringPrototypeStartsWith(request\x2C 'node:') ||\x0d\n      NativeModule.canBeRequiredByUsers(request)) {\x0d\n    return request;\x0d\n  }\x0d\n\x0d\n  let paths;\x0d\n\x0d\n  if (typeof options === 'object' && options !== null) {\x0d\n    if (ArrayIsArray(options.paths)) {\x0d\n      const isRelative = StringPrototypeStartsWith(request\x2C './') ||\x0d\n          StringPrototypeStartsWith(request\x2C '../') ||\x0d\n          ((isWindows && StringPrototypeStartsWith(request\x2C '.\\\\')) ||\x0d\n          StringPrototypeStartsWith(request\x2C '..\\\\'));\x0d\n\x0d\n      if (isRelative) {\x0d\n        paths = options.paths;\x0d\n      } else {\x0d\n        const fakeParent = new Module(''\x2C null);\x0d\n\x0d\n        paths = [];\x0d\n\x0d\n        for (let i = 0; i < options.paths.length; i++) {\x0d\n          const path = options.paths[i];\x0d\n          fakeParent.paths = Module._nodeModulePaths(path);\x0d\n          const lookupPaths = Module._resolveLookupPaths(request\x2C fakeParent);\x0d\n\x0d\n          for (let j = 0; j < lookupPaths.length; j++) {\x0d\n            if (!ArrayPrototypeIncludes(paths\x2C lookupPaths[j]))\x0d\n              ArrayPrototypePush(paths\x2C lookupPaths[j]);\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n    } else if (options.paths === undefined) {\x0d\n      paths = Module._resolveLookupPaths(request\x2C parent);\x0d\n    } else {\x0d\n      throw new ERR_INVALID_ARG_VALUE('options.paths'\x2C options.paths);\x0d\n    }\x0d\n  } else {\x0d\n    paths = Module._resolveLookupPaths(request\x2C parent);\x0d\n  }\x0d\n\x0d\n  if (parent?.filename) {\x0d\n    if (request[0] === '#') {\x0d\n      const pkg = readPackageScope(parent.filename) || {};\x0d\n      if (pkg.data?.imports != null) {\x0d\n        try {\x0d\n          return finalizeEsmResolution(\x0d\n            packageImportsResolve(request\x2C pathToFileURL(parent.filename)\x2C\x0d\n                                  cjsConditions)\x2C request\x2C parent.filename\x2C\x0d\n            pkg.path);\x0d\n        } catch (e) {\x0d\n          if (e.code === 'ERR_MODULE_NOT_FOUND')\x0d\n            throw createEsmNotFoundErr(request);\x0d\n          throw e;\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // Try module self resolution first\x0d\n  const parentPath = trySelfParentPath(parent);\x0d\n  const selfResolved = trySelf(parentPath\x2C request);\x0d\n  if (selfResolved) {\x0d\n    const cacheKey = request + '\\x00' +\x0d\n         (paths.length === 1 ? paths[0] : ArrayPrototypeJoin(paths\x2C '\\x00'));\x0d\n    Module._pathCache[cacheKey] = selfResolved;\x0d\n    return selfResolved;\x0d\n  }\x0d\n\x0d\n  // Look up the filename first\x2C since that's the cache key.\x0d\n  const filename = Module._findPath(request\x2C paths\x2C isMain\x2C false);\x0d\n  if (filename) return filename;\x0d\n  const requireStack = [];\x0d\n  for (let cursor = parent;\x0d\n    cursor;\x0d\n    cursor = moduleParentCache.get(cursor)) {\x0d\n    ArrayPrototypePush(requireStack\x2C cursor.filename || cursor.id);\x0d\n  }\x0d\n  let message = `Cannot find module '${request}'`;\x0d\n  if (requireStack.length > 0) {\x0d\n    message = message + '\\nRequire stack:\\n- ' +\x0d\n              ArrayPrototypeJoin(requireStack\x2C '\\n- ');\x0d\n  }\x0d\n  // eslint-disable-next-line no-restricted-syntax\x0d\n  const err = new Error(message);\x0d\n  err.code = 'MODULE_NOT_FOUND';\x0d\n  err.requireStack = requireStack;\x0d\n  throw err;\x0d\n};\x0d\n\x0d\nfunction finalizeEsmResolution(match\x2C request\x2C parentPath\x2C pkgPath) {\x0d\n  const { resolved\x2C exact } = match;\x0d\n  if (RegExpPrototypeTest(encodedSepRegEx\x2C resolved))\x0d\n    throw new ERR_INVALID_MODULE_SPECIFIER(\x0d\n      resolved\x2C 'must not include encoded "/" or "\\\\" characters'\x2C parentPath);\x0d\n  const filename = fileURLToPath(resolved);\x0d\n  let actual = tryFile(filename);\x0d\n  if (!exact && !actual) {\x0d\n    const exts = ObjectKeys(Module._extensions);\x0d\n    actual = tryExtensions(filename\x2C exts\x2C false) ||\x0d\n      tryPackage(filename\x2C exts\x2C false\x2C request);\x0d\n  }\x0d\n  if (actual)\x0d\n    return actual;\x0d\n  const err = createEsmNotFoundErr(filename\x2C\x0d\n                                   path.resolve(pkgPath\x2C 'package.json'));\x0d\n  throw err;\x0d\n}\x0d\n\x0d\nfunction createEsmNotFoundErr(request\x2C path) {\x0d\n  // eslint-disable-next-line no-restricted-syntax\x0d\n  const err = new Error(`Cannot find module '${request}'`);\x0d\n  err.code = 'MODULE_NOT_FOUND';\x0d\n  if (path)\x0d\n    err.path = path;\x0d\n  // TODO(BridgeAR): Add the requireStack as well.\x0d\n  return err;\x0d\n}\x0d\n\x0d\n// Given a file name\x2C pass it to the proper extension handler.\x0d\nModule.prototype.load = function(filename) {\x0d\n  debug('load %j for module %j'\x2C filename\x2C this.id);\x0d\n\x0d\n  assert(!this.loaded);\x0d\n  this.filename = filename;\x0d\n  this.paths = Module._nodeModulePaths(path.dirname(filename));\x0d\n\x0d\n  const extension = findLongestRegisteredExtension(filename);\x0d\n  // allow .mjs to be overridden\x0d\n  if (StringPrototypeEndsWith(filename\x2C '.mjs') && !Module._extensions['.mjs'])\x0d\n    throw new ERR_REQUIRE_ESM(filename\x2C true);\x0d\n\x0d\n  Module._extensions[extension](this\x2C filename);\x0d\n  this.loaded = true;\x0d\n\x0d\n  const esmLoader = asyncESM.esmLoader;\x0d\n  // Create module entry at load time to snapshot exports correctly\x0d\n  const exports = this.exports;\x0d\n  // Preemptively cache\x0d\n  if ((module?.module === undefined ||\x0d\n       module.module.getStatus() < kEvaluated) &&\x0d\n      !esmLoader.cjsCache.has(this))\x0d\n    esmLoader.cjsCache.set(this\x2C exports);\x0d\n};\x0d\n\x0d\n\x0d\n// Loads a module at the given file path. Returns that module's\x0d\n// `exports` property.\x0d\nModule.prototype.require = function(id) {\x0d\n  validateString(id\x2C 'id');\x0d\n  if (id === '') {\x0d\n    throw new ERR_INVALID_ARG_VALUE('id'\x2C id\x2C\x0d\n                                    'must be a non-empty string');\x0d\n  }\x0d\n  requireDepth++;\x0d\n  try {\x0d\n    return Module._load(id\x2C this\x2C /* isMain */ false);\x0d\n  } finally {\x0d\n    requireDepth--;\x0d\n  }\x0d\n};\x0d\n\x0d\n\x0d\n// Resolved path to process.argv[1] will be lazily placed here\x0d\n// (needed for setting breakpoint when called with --inspect-brk)\x0d\nlet resolvedArgv;\x0d\nlet hasPausedEntry = false;\x0d\n\x0d\nfunction wrapSafe(filename\x2C content\x2C cjsModuleInstance) {\x0d\n  if (patched) {\x0d\n    const wrapper = Module.wrap(content);\x0d\n    return vm.runInThisContext(wrapper\x2C {\x0d\n      filename\x2C\x0d\n      lineOffset: 0\x2C\x0d\n      displayErrors: true\x2C\x0d\n      importModuleDynamically: async (specifier\x2C _\x2C importAssertions) => {\x0d\n        const loader = asyncESM.esmLoader;\x0d\n        return loader.import(specifier\x2C normalizeReferrerURL(filename)\x2C\x0d\n                             importAssertions);\x0d\n      }\x2C\x0d\n    });\x0d\n  }\x0d\n  try {\x0d\n    return vm.compileFunction(content\x2C [\x0d\n      'exports'\x2C\x0d\n      'require'\x2C\x0d\n      'module'\x2C\x0d\n      '__filename'\x2C\x0d\n      '__dirname'\x2C\x0d\n    ]\x2C {\x0d\n      filename\x2C\x0d\n      importModuleDynamically(specifier\x2C _\x2C importAssertions) {\x0d\n        const loader = asyncESM.esmLoader;\x0d\n        return loader.import(specifier\x2C normalizeReferrerURL(filename)\x2C\x0d\n                             importAssertions);\x0d\n      }\x2C\x0d\n    });\x0d\n  } catch (err) {\x0d\n    if (process.mainModule === cjsModuleInstance)\x0d\n      enrichCJSError(err\x2C content);\x0d\n    throw err;\x0d\n  }\x0d\n}\x0d\n\x0d\n// Run the file contents in the correct scope or sandbox. Expose\x0d\n// the correct helper variables (require\x2C module\x2C exports) to\x0d\n// the file.\x0d\n// Returns exception\x2C if any.\x0d\nModule.prototype._compile = function(content\x2C filename) {\x0d\n  let moduleURL;\x0d\n  let redirects;\x0d\n  if (policy?.manifest) {\x0d\n    moduleURL = pathToFileURL(filename);\x0d\n    redirects = policy.manifest.getDependencyMapper(moduleURL);\x0d\n    policy.manifest.assertIntegrity(moduleURL\x2C content);\x0d\n  }\x0d\n\x0d\n  maybeCacheSourceMap(filename\x2C content\x2C this);\x0d\n  const compiledWrapper = wrapSafe(filename\x2C content\x2C this);\x0d\n\x0d\n  let inspectorWrapper = null;\x0d\n  if (getOptionValue('--inspect-brk') && process._eval == null) {\x0d\n    if (!resolvedArgv) {\x0d\n      // We enter the repl if we're not given a filename argument.\x0d\n      if (process.argv[1]) {\x0d\n        try {\x0d\n          resolvedArgv = Module._resolveFilename(process.argv[1]\x2C null\x2C false);\x0d\n        } catch {\x0d\n          // We only expect this codepath to be reached in the case of a\x0d\n          // preloaded module (it will fail earlier with the main entry)\x0d\n          assert(ArrayIsArray(getOptionValue('--require')));\x0d\n        }\x0d\n      } else {\x0d\n        resolvedArgv = 'repl';\x0d\n      }\x0d\n    }\x0d\n\x0d\n    // Set breakpoint on module start\x0d\n    if (resolvedArgv && !hasPausedEntry && filename === resolvedArgv) {\x0d\n      hasPausedEntry = true;\x0d\n      inspectorWrapper = internalBinding('inspector').callAndPauseOnStart;\x0d\n    }\x0d\n  }\x0d\n  const dirname = path.dirname(filename);\x0d\n  const require = makeRequireFunction(this\x2C redirects);\x0d\n  let result;\x0d\n  const exports = this.exports;\x0d\n  const thisValue = exports;\x0d\n  const module = this;\x0d\n  if (requireDepth === 0) statCache = new SafeMap();\x0d\n  if (inspectorWrapper) {\x0d\n    result = inspectorWrapper(compiledWrapper\x2C thisValue\x2C exports\x2C\x0d\n                              require\x2C module\x2C filename\x2C dirname);\x0d\n  } else {\x0d\n    result = ReflectApply(compiledWrapper\x2C thisValue\x2C\x0d\n                          [exports\x2C require\x2C module\x2C filename\x2C dirname]);\x0d\n  }\x0d\n  hasLoadedAnyUserCJSModule = true;\x0d\n  if (requireDepth === 0) statCache = null;\x0d\n  return result;\x0d\n};\x0d\n\x0d\n// Native extension for .js\x0d\nModule._extensions['.js'] = function(module\x2C filename) {\x0d\n  // If already analyzed the source\x2C then it will be cached.\x0d\n  const cached = cjsParseCache.get(module);\x0d\n  let content;\x0d\n  if (cached?.source) {\x0d\n    content = cached.source;\x0d\n    cached.source = undefined;\x0d\n  } else {\x0d\n    content = fs.readFileSync(filename\x2C 'utf8');\x0d\n  }\x0d\n  if (StringPrototypeEndsWith(filename\x2C '.js')) {\x0d\n    const pkg = readPackageScope(filename);\x0d\n    // Function require shouldn't be used in ES modules.\x0d\n    if (pkg?.data?.type === 'module') {\x0d\n      const parent = moduleParentCache.get(module);\x0d\n      const parentPath = parent?.filename;\x0d\n      const packageJsonPath = path.resolve(pkg.path\x2C 'package.json');\x0d\n      const usesEsm = hasEsmSyntax(content);\x0d\n      const err = new ERR_REQUIRE_ESM(filename\x2C usesEsm\x2C parentPath\x2C\x0d\n                                      packageJsonPath);\x0d\n      // Attempt to reconstruct the parent require frame.\x0d\n      if (Module._cache[parentPath]) {\x0d\n        let parentSource;\x0d\n        try {\x0d\n          parentSource = fs.readFileSync(parentPath\x2C 'utf8');\x0d\n        } catch {\x0d\n          // Continue regardless of error.\x0d\n        }\x0d\n        if (parentSource) {\x0d\n          const errLine = StringPrototypeSplit(\x0d\n            StringPrototypeSlice(err.stack\x2C StringPrototypeIndexOf(\x0d\n              err.stack\x2C '    at '))\x2C '\\n'\x2C 1)[0];\x0d\n          const { 1: line\x2C 2: col } =\x0d\n              RegExpPrototypeExec(/(\\d+):(\\d+)\\)/\x2C errLine) || [];\x0d\n          if (line && col) {\x0d\n            const srcLine = StringPrototypeSplit(parentSource\x2C '\\n')[line - 1];\x0d\n            const frame = `${parentPath}:${line}\\n${srcLine}\\n${\x0d\n              StringPrototypeRepeat(' '\x2C col - 1)}^\\n`;\x0d\n            setArrowMessage(err\x2C frame);\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n      throw err;\x0d\n    }\x0d\n  }\x0d\n  module._compile(content\x2C filename);\x0d\n};\x0d\n\x0d\n\x0d\n// Native extension for .json\x0d\nModule._extensions['.json'] = function(module\x2C filename) {\x0d\n  const content = fs.readFileSync(filename\x2C 'utf8');\x0d\n\x0d\n  if (policy?.manifest) {\x0d\n    const moduleURL = pathToFileURL(filename);\x0d\n    policy.manifest.assertIntegrity(moduleURL\x2C content);\x0d\n  }\x0d\n\x0d\n  try {\x0d\n    module.exports = JSONParse(stripBOM(content));\x0d\n  } catch (err) {\x0d\n    err.message = filename + ': ' + err.message;\x0d\n    throw err;\x0d\n  }\x0d\n};\x0d\n\x0d\n\x0d\n// Native extension for .node\x0d\nModule._extensions['.node'] = function(module\x2C filename) {\x0d\n  if (policy?.manifest) {\x0d\n    const content = fs.readFileSync(filename);\x0d\n    const moduleURL = pathToFileURL(filename);\x0d\n    policy.manifest.assertIntegrity(moduleURL\x2C content);\x0d\n  }\x0d\n  // Be aware this doesn't use `content`\x0d\n  return process.dlopen(module\x2C path.toNamespacedPath(filename));\x0d\n};\x0d\n\x0d\nfunction createRequireFromPath(filename) {\x0d\n  // Allow a directory to be passed as the filename\x0d\n  const trailingSlash =\x0d\n    StringPrototypeEndsWith(filename\x2C '/') ||\x0d\n    (isWindows && StringPrototypeEndsWith(filename\x2C '\\\\'));\x0d\n\x0d\n  const proxyPath = trailingSlash ?\x0d\n    path.join(filename\x2C 'noop.js') :\x0d\n    filename;\x0d\n\x0d\n  const m = new Module(proxyPath);\x0d\n  m.filename = proxyPath;\x0d\n\x0d\n  m.paths = Module._nodeModulePaths(m.path);\x0d\n  return makeRequireFunction(m\x2C null);\x0d\n}\x0d\n\x0d\nconst createRequireError = 'must be a file URL object\x2C file URL string\x2C or ' +\x0d\n  'absolute path string';\x0d\n\x0d\nfunction createRequire(filename) {\x0d\n  let filepath;\x0d\n\x0d\n  if (isURLInstance(filename) ||\x0d\n      (typeof filename === 'string' && !path.isAbsolute(filename))) {\x0d\n    try {\x0d\n      filepath = fileURLToPath(filename);\x0d\n    } catch {\x0d\n      throw new ERR_INVALID_ARG_VALUE('filename'\x2C filename\x2C\x0d\n                                      createRequireError);\x0d\n    }\x0d\n  } else if (typeof filename !== 'string') {\x0d\n    throw new ERR_INVALID_ARG_VALUE('filename'\x2C filename\x2C createRequireError);\x0d\n  } else {\x0d\n    filepath = filename;\x0d\n  }\x0d\n  return createRequireFromPath(filepath);\x0d\n}\x0d\n\x0d\nModule.createRequire = createRequire;\x0d\n\x0d\nModule._initPaths = function() {\x0d\n  const homeDir = isWindows ? process.env.USERPROFILE : safeGetenv('HOME');\x0d\n  const nodePath = isWindows ? process.env.NODE_PATH : safeGetenv('NODE_PATH');\x0d\n\x0d\n  // process.execPath is $PREFIX/bin/node except on Windows where it is\x0d\n  // $PREFIX\\node.exe where $PREFIX is the root of the Node.js installation.\x0d\n  const prefixDir = isWindows ?\x0d\n    path.resolve(process.execPath\x2C '..') :\x0d\n    path.resolve(process.execPath\x2C '..'\x2C '..');\x0d\n\x0d\n  const paths = [path.resolve(prefixDir\x2C 'lib'\x2C 'node')];\x0d\n\x0d\n  if (homeDir) {\x0d\n    ArrayPrototypeUnshift(paths\x2C path.resolve(homeDir\x2C '.node_libraries'));\x0d\n    ArrayPrototypeUnshift(paths\x2C path.resolve(homeDir\x2C '.node_modules'));\x0d\n  }\x0d\n\x0d\n  if (nodePath) {\x0d\n    ArrayPrototypeUnshiftApply(paths\x2C ArrayPrototypeFilter(\x0d\n      StringPrototypeSplit(nodePath\x2C path.delimiter)\x2C\x0d\n      Boolean\x0d\n    ));\x0d\n  }\x0d\n\x0d\n  modulePaths = paths;\x0d\n\x0d\n  // Clone as a shallow copy\x2C for introspection.\x0d\n  Module.globalPaths = ArrayPrototypeSlice(modulePaths);\x0d\n};\x0d\n\x0d\nModule._preloadModules = function(requests) {\x0d\n  if (!ArrayIsArray(requests))\x0d\n    return;\x0d\n\x0d\n  isPreloading = true;\x0d\n\x0d\n  // Preloaded modules have a dummy parent module which is deemed to exist\x0d\n  // in the current working directory. This seeds the search path for\x0d\n  // preloaded modules.\x0d\n  const parent = new Module('internal/preload'\x2C null);\x0d\n  try {\x0d\n    parent.paths = Module._nodeModulePaths(process.cwd());\x0d\n  } catch (e) {\x0d\n    if (e.code !== 'ENOENT') {\x0d\n      isPreloading = false;\x0d\n      throw e;\x0d\n    }\x0d\n  }\x0d\n  for (let n = 0; n < requests.length; n++)\x0d\n    parent.require(requests[n]);\x0d\n  isPreloading = false;\x0d\n};\x0d\n\x0d\nModule.syncBuiltinESMExports = function syncBuiltinESMExports() {\x0d\n  for (const mod of NativeModule.map.values()) {\x0d\n    if (mod.canBeRequiredByUsers) {\x0d\n      mod.syncExports();\x0d\n    }\x0d\n  }\x0d\n};\x0d\n\x0d\n// Backwards compatibility\x0d\nModule.Module = Module;\x0d\n
code-source-info,0x39aa28574de,111,0,41663,C0O0C4O41663,,
tick,0x7ffe67f1fab3,357545,1,0x7ff72402d620,3,0x7ff7249760e0,0x20b1dd43c1b,0x20b1dd43965,0x39aa285557c,0x2e2fa685502,0x3979d3bef45
code-creation,Function,10,357585,0x39aa285927e,2547, node:internal/modules/cjs/loader:1:1,0x39aa2857458,~
code-source-info,0x39aa285927e
code-creation,Eval,10,358441,0x39aa285d22e,5, node:internal/modules/package_json_reader:1:1,0x39aa285d088,~
script-source,112,node:internal/modules/package_json_reader,'use strict';\x0d\n\x0d\nconst { SafeMap } = primordials;\x0d\nconst { internalModuleReadJSON } = internalBinding('fs');\x0d\nconst { pathToFileURL } = require('url');\x0d\nconst { toNamespacedPath } = require('path');\x0d\n\x0d\nconst cache = new SafeMap();\x0d\n\x0d\nlet manifest;\x0d\n\x0d\n/**\x0d\n *\x0d\n * @param {string} jsonPath\x0d\n */\x0d\nfunction read(jsonPath) {\x0d\n  if (cache.has(jsonPath)) {\x0d\n    return cache.get(jsonPath);\x0d\n  }\x0d\n\x0d\n  const { 0: string\x2C 1: containsKeys } = internalModuleReadJSON(\x0d\n    toNamespacedPath(jsonPath)\x0d\n  );\x0d\n  const result = { string\x2C containsKeys };\x0d\n  const { getOptionValue } = require('internal/options');\x0d\n  if (string !== undefined) {\x0d\n    if (manifest === undefined) {\x0d\n      manifest = getOptionValue('--experimental-policy') ?\x0d\n        require('internal/process/policy').manifest :\x0d\n        null;\x0d\n    }\x0d\n    if (manifest !== null) {\x0d\n      const jsonURL = pathToFileURL(jsonPath);\x0d\n      manifest.assertIntegrity(jsonURL\x2C string);\x0d\n    }\x0d\n  }\x0d\n  cache.set(jsonPath\x2C result);\x0d\n  return result;\x0d\n}\x0d\n\x0d\nmodule.exports = { read };\x0d\n
code-source-info,0x39aa285d22e,112,0,1024,C0O0C4O1024,,
code-creation,Function,10,358588,0x39aa285d37e,113, node:internal/modules/package_json_reader:1:1,0x39aa285d1a8,~
code-source-info,0x39aa285d37e,112,0,1024,C0O0C29O25C34O86C37O86C42O59C48O136C54O136C59O118C65O182C71O182C76O161C82O216C84O216C89O216C91O238C92O238C94O996C101O1015C107O1011C112O1023,,
code-creation,Eval,10,358906,0x39aa285dc16,5, node:internal/process/esm_loader:1:1,0x39aa285da20,~
script-source,113,node:internal/process/esm_loader,'use strict';\x0d\n\x0d\nconst {\x0d\n  ObjectCreate\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING\x2C\x0d\n} = require('internal/errors').codes;\x0d\nconst { ESMLoader } = require('internal/modules/esm/loader');\x0d\nconst {\x0d\n  hasUncaughtExceptionCaptureCallback\x2C\x0d\n} = require('internal/process/execution');\x0d\nconst { pathToFileURL } = require('internal/url');\x0d\nconst {\x0d\n  getModuleFromWrap\x2C\x0d\n} = require('internal/vm/module');\x0d\n\x0d\nexports.initializeImportMetaObject = function(wrap\x2C meta) {\x0d\n  const { callbackMap } = internalBinding('module_wrap');\x0d\n  if (callbackMap.has(wrap)) {\x0d\n    const { initializeImportMeta } = callbackMap.get(wrap);\x0d\n    if (initializeImportMeta !== undefined) {\x0d\n      initializeImportMeta(meta\x2C getModuleFromWrap(wrap) || wrap);\x0d\n    }\x0d\n  }\x0d\n};\x0d\n\x0d\nexports.importModuleDynamicallyCallback =\x0d\nasync function importModuleDynamicallyCallback(wrap\x2C specifier\x2C assertions) {\x0d\n  const { callbackMap } = internalBinding('module_wrap');\x0d\n  if (callbackMap.has(wrap)) {\x0d\n    const { importModuleDynamically } = callbackMap.get(wrap);\x0d\n    if (importModuleDynamically !== undefined) {\x0d\n      return importModuleDynamically(\x0d\n        specifier\x2C getModuleFromWrap(wrap) || wrap\x2C assertions);\x0d\n    }\x0d\n  }\x0d\n  throw new ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING();\x0d\n};\x0d\n\x0d\nconst esmLoader = new ESMLoader();\x0d\n\x0d\nexports.esmLoader = esmLoader;\x0d\n\x0d\n/**\x0d\n * Causes side-effects: user-defined loader hooks are added to esmLoader.\x0d\n * @returns {void}\x0d\n */\x0d\nasync function initializeLoader() {\x0d\n  const { getOptionValue } = require('internal/options');\x0d\n  // customLoaders CURRENTLY can be only 1 (a string)\x0d\n  // Once chaining is implemented\x2C it will be string[]\x0d\n  const customLoaders = getOptionValue('--experimental-loader');\x0d\n\x0d\n  if (!customLoaders.length) return;\x0d\n\x0d\n  const { emitExperimentalWarning } = require('internal/util');\x0d\n  emitExperimentalWarning('--experimental-loader');\x0d\n\x0d\n  let cwd;\x0d\n  try {\x0d\n    cwd = process.cwd() + '/';\x0d\n  } catch {\x0d\n    cwd = 'file:///';\x0d\n  }\x0d\n\x0d\n  // A separate loader instance is necessary to avoid cross-contamination\x0d\n  // between internal Node.js and userland. For example\x2C a module with internal\x0d\n  // state (such as a counter) should be independent.\x0d\n  const internalEsmLoader = new ESMLoader();\x0d\n\x0d\n  // Importation must be handled by internal loader to avoid poluting userland\x0d\n  const exports = await internalEsmLoader.import(\x0d\n    customLoaders\x2C\x0d\n    pathToFileURL(cwd).href\x2C\x0d\n    ObjectCreate(null)\x2C\x0d\n  );\x0d\n\x0d\n  // Hooks must then be added to external/public loader\x0d\n  // (so they're triggered in userland)\x0d\n  await esmLoader.addCustomLoaders(exports);\x0d\n}\x0d\n\x0d\nexports.loadESM = async function loadESM(callback) {\x0d\n  try {\x0d\n    await initializeLoader();\x0d\n    await callback(esmLoader);\x0d\n  } catch (err) {\x0d\n    if (hasUncaughtExceptionCaptureCallback()) {\x0d\n      process._fatalException(err);\x0d\n      return;\x0d\n    }\x0d\n    internalBinding('errors').triggerUncaughtException(\x0d\n      err\x2C\x0d\n      true /* fromPromise */\x0d\n    );\x0d\n  }\x0d\n};\x0d\n
code-source-info,0x39aa285dc16,113,0,2982,C0O0C4O2982,,
code-creation,Function,10,359166,0x39aa285deb6,182, node:internal/process/esm_loader:1:1,0x39aa285db90,~
code-source-info,0x39aa285deb6,113,0,2982,C0O0C44O28C50O119C56O119C61O145C66O74C72O176C78O176C83O162C89O270C95O270C100O228C106O336C112O336C117O318C123O397C129O397C134O373C140O431C144O466C148O777C152O817C156O1300C159O1300C164O1300C166O1320C168O1338C172O2612C176O2628C181O2981,,
code-creation,Eval,10,359871,0x39aa285f126,5, node:internal/modules/esm/loader:1:1,0x39aa285ecb8,~
script-source,114,node:internal/modules/esm/loader,'use strict';\x0d\n\x0d\n// This is needed to avoid cycles in esm/resolve <-> cjs/loader\x0d\nrequire('internal/modules/cjs/loader');\x0d\n\x0d\nconst {\x0d\n  Array\x2C\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  FunctionPrototypeBind\x2C\x0d\n  FunctionPrototypeCall\x2C\x0d\n  ObjectAssign\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  PromiseAll\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  SafeArrayIterator\x2C\x0d\n  SafeWeakMap\x2C\x0d\n  globalThis\x2C\x0d\n} = primordials;\x0d\nconst { MessageChannel } = require('internal/worker/io');\x0d\n\x0d\nconst {\x0d\n  ERR_INVALID_ARG_TYPE\x2C\x0d\n  ERR_INVALID_ARG_VALUE\x2C\x0d\n  ERR_INVALID_MODULE_SPECIFIER\x2C\x0d\n  ERR_INVALID_RETURN_PROPERTY_VALUE\x2C\x0d\n  ERR_INVALID_RETURN_VALUE\x2C\x0d\n  ERR_UNKNOWN_MODULE_FORMAT\x0d\n} = require('internal/errors').codes;\x0d\nconst { pathToFileURL\x2C isURLInstance\x2C URL } = require('internal/url');\x0d\nconst {\x0d\n  isAnyArrayBuffer\x2C\x0d\n  isArrayBufferView\x2C\x0d\n} = require('internal/util/types');\x0d\nconst ModuleMap = require('internal/modules/esm/module_map');\x0d\nconst ModuleJob = require('internal/modules/esm/module_job');\x0d\n\x0d\nconst {\x0d\n  defaultResolve\x2C\x0d\n  DEFAULT_CONDITIONS\x2C\x0d\n} = require('internal/modules/esm/resolve');\x0d\nconst {\x0d\n  initializeImportMeta\x0d\n} = require('internal/modules/esm/initialize_import_meta');\x0d\nconst { defaultLoad } = require('internal/modules/esm/load');\x0d\nconst { translators } = require(\x0d\n  'internal/modules/esm/translators');\x0d\nconst { getOptionValue } = require('internal/options');\x0d\n\x0d\n/**\x0d\n * An ESMLoader instance is used as the main entry point for loading ES modules.\x0d\n * Currently\x2C this is a singleton -- there is only one used for loading\x0d\n * the main module and everything in its dependency graph.\x0d\n */\x0d\nclass ESMLoader {\x0d\n  /**\x0d\n   * Prior to ESM loading. These are called once before any modules are started.\x0d\n   * @private\x0d\n   * @property {Function[]} globalPreloaders First-in-first-out list of\x0d\n   * preload hooks.\x0d\n   */\x0d\n  #globalPreloaders = [];\x0d\n\x0d\n  /**\x0d\n   * Phase 2 of 2 in ESM loading.\x0d\n   * @private\x0d\n   * @property {Function[]} loaders First-in-first-out list of loader hooks.\x0d\n   */\x0d\n  #loaders = [\x0d\n    defaultLoad\x2C\x0d\n  ];\x0d\n\x0d\n  /**\x0d\n   * Phase 1 of 2 in ESM loading.\x0d\n   * @private\x0d\n   * @property {Function[]} resolvers First-in-first-out list of resolver hooks\x0d\n   */\x0d\n  #resolvers = [\x0d\n    defaultResolve\x2C\x0d\n  ];\x0d\n\x0d\n  #importMetaInitializer = initializeImportMeta;\x0d\n\x0d\n  /**\x0d\n   * Map of already-loaded CJS modules to use\x0d\n   */\x0d\n  cjsCache = new SafeWeakMap();\x0d\n\x0d\n  /**\x0d\n   * The index for assigning unique URLs to anonymous module evaluation\x0d\n   */\x0d\n  evalIndex = 0;\x0d\n\x0d\n  /**\x0d\n   * Registry of loaded modules\x2C akin to `require.cache`\x0d\n   */\x0d\n  moduleMap = new ModuleMap();\x0d\n\x0d\n  /**\x0d\n   * Methods which translate input code or other information into ES modules\x0d\n   */\x0d\n  translators = translators;\x0d\n\x0d\n  static pluckHooks({\x0d\n    globalPreload\x2C\x0d\n    resolve\x2C\x0d\n    load\x2C\x0d\n    // obsolete hooks:\x0d\n    dynamicInstantiate\x2C\x0d\n    getFormat\x2C\x0d\n    getGlobalPreloadCode\x2C\x0d\n    getSource\x2C\x0d\n    transformSource\x2C\x0d\n  }) {\x0d\n    const obsoleteHooks = [];\x0d\n    const acceptedHooks = ObjectCreate(null);\x0d\n\x0d\n    if (getGlobalPreloadCode) {\x0d\n      globalPreload ??= getGlobalPreloadCode;\x0d\n\x0d\n      process.emitWarning(\x0d\n        'Loader hook "getGlobalPreloadCode" has been renamed to "globalPreload"'\x0d\n      );\x0d\n    }\x0d\n    if (dynamicInstantiate) ArrayPrototypePush(\x0d\n      obsoleteHooks\x2C\x0d\n      'dynamicInstantiate'\x0d\n    );\x0d\n    if (getFormat) ArrayPrototypePush(\x0d\n      obsoleteHooks\x2C\x0d\n      'getFormat'\x2C\x0d\n    );\x0d\n    if (getSource) ArrayPrototypePush(\x0d\n      obsoleteHooks\x2C\x0d\n      'getSource'\x2C\x0d\n    );\x0d\n    if (transformSource) ArrayPrototypePush(\x0d\n      obsoleteHooks\x2C\x0d\n      'transformSource'\x2C\x0d\n    );\x0d\n\x0d\n    if (obsoleteHooks.length) process.emitWarning(\x0d\n      `Obsolete loader hook(s) supplied and will be ignored: ${\x0d\n        ArrayPrototypeJoin(obsoleteHooks\x2C '\x2C ')\x0d\n      }`\x2C\x0d\n      'DeprecationWarning'\x2C\x0d\n    );\x0d\n\x0d\n    // Use .bind() to avoid giving access to the Loader instance when called.\x0d\n    if (globalPreload) {\x0d\n      acceptedHooks.globalPreloader =\x0d\n        FunctionPrototypeBind(globalPreload\x2C null);\x0d\n    }\x0d\n    if (resolve) {\x0d\n      acceptedHooks.resolver = FunctionPrototypeBind(resolve\x2C null);\x0d\n    }\x0d\n    if (load) {\x0d\n      acceptedHooks.loader = FunctionPrototypeBind(load\x2C null);\x0d\n    }\x0d\n\x0d\n    return acceptedHooks;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * Collect custom/user-defined hook(s). After all hooks have been collected\x2C\x0d\n   * calls global preload hook(s).\x0d\n   * @param {object | object[]} customLoaders A list of exports from\x0d\n   * user-defined loaders (as returned by ESMLoader.import()).\x0d\n   */\x0d\n  async addCustomLoaders(\x0d\n    customLoaders = []\x2C\x0d\n  ) {\x0d\n    if (!ArrayIsArray(customLoaders)) customLoaders = [customLoaders];\x0d\n\x0d\n    for (let i = 0; i < customLoaders.length; i++) {\x0d\n      const exports = customLoaders[i];\x0d\n      const {\x0d\n        globalPreloader\x2C\x0d\n        resolver\x2C\x0d\n        loader\x2C\x0d\n      } = ESMLoader.pluckHooks(exports);\x0d\n\x0d\n      if (globalPreloader) ArrayPrototypePush(\x0d\n        this.#globalPreloaders\x2C\x0d\n        FunctionPrototypeBind(globalPreloader\x2C null)\x2C // [1]\x0d\n      );\x0d\n      if (resolver) ArrayPrototypePush(\x0d\n        this.#resolvers\x2C\x0d\n        FunctionPrototypeBind(resolver\x2C null)\x2C // [1]\x0d\n      );\x0d\n      if (loader) ArrayPrototypePush(\x0d\n        this.#loaders\x2C\x0d\n        FunctionPrototypeBind(loader\x2C null)\x2C // [1]\x0d\n      );\x0d\n    }\x0d\n\x0d\n    // [1] ensure hook function is not bound to ESMLoader instance\x0d\n\x0d\n    this.preload();\x0d\n  }\x0d\n\x0d\n  async eval(\x0d\n    source\x2C\x0d\n    url = pathToFileURL(`${process.cwd()}/[eval${++this.evalIndex}]`).href\x0d\n  ) {\x0d\n    const evalInstance = (url) => {\x0d\n      const { ModuleWrap\x2C callbackMap } = internalBinding('module_wrap');\x0d\n      const module = new ModuleWrap(url\x2C undefined\x2C source\x2C 0\x2C 0);\x0d\n      callbackMap.set(module\x2C {\x0d\n        importModuleDynamically: (specifier\x2C { url }\x2C importAssertions) => {\x0d\n          return this.import(specifier\x2C url\x2C importAssertions);\x0d\n        }\x0d\n      });\x0d\n\x0d\n      return module;\x0d\n    };\x0d\n    const job = new ModuleJob(\x0d\n      this\x2C url\x2C undefined\x2C evalInstance\x2C false\x2C false);\x0d\n    this.moduleMap.set(url\x2C undefined\x2C job);\x0d\n    const { module } = await job.run();\x0d\n\x0d\n    return {\x0d\n      namespace: module.getNamespace()\x2C\x0d\n    };\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * Get a (possibly still pending) module job from the cache\x2C\x0d\n   * or create one and return its Promise.\x0d\n   * @param {string} specifier The string after `from` in an `import` statement\x2C\x0d\n   *                           or the first parameter of an `import()`\x0d\n   *                           expression\x0d\n   * @param {string | undefined} parentURL The URL of the module importing this\x0d\n   *                                     one\x2C unless this is the Node.js entry\x0d\n   *                                     point.\x0d\n   * @param {Record<string\x2C string>} importAssertions Validations for the\x0d\n   *                                                  module import.\x0d\n   * @returns {Promise<ModuleJob>} The (possibly pending) module job\x0d\n   */\x0d\n  async getModuleJob(specifier\x2C parentURL\x2C importAssertions) {\x0d\n    let importAssertionsForResolve;\x0d\n    if (this.#loaders.length !== 1) {\x0d\n      // We can skip cloning if there are no user provided loaders because\x0d\n      // the Node.js default resolve hook does not use import assertions.\x0d\n      importAssertionsForResolve =\x0d\n        ObjectAssign(ObjectCreate(null)\x2C importAssertions);\x0d\n    }\x0d\n    const { format\x2C url } =\x0d\n      await this.resolve(specifier\x2C parentURL\x2C importAssertionsForResolve);\x0d\n\x0d\n    let job = this.moduleMap.get(url\x2C importAssertions.type);\x0d\n\x0d\n    // CommonJS will set functions for lazy job evaluation.\x0d\n    if (typeof job === 'function') {\x0d\n      this.moduleMap.set(url\x2C undefined\x2C job = job());\x0d\n    }\x0d\n\x0d\n    if (job === undefined) {\x0d\n      job = this.#createModuleJob(url\x2C importAssertions\x2C parentURL\x2C format);\x0d\n    }\x0d\n\x0d\n    return job;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * Create and cache an object representing a loaded module.\x0d\n   * @param {string} url The absolute URL that was resolved for this module\x0d\n   * @param {Record<string\x2C string>} importAssertions Validations for the\x0d\n   *                                                  module import.\x0d\n   * @param {string} [parentURL] The absolute URL of the module importing this\x0d\n   *                             one\x2C unless this is the Node.js entry point\x0d\n   * @param {string} [format] The format hint possibly returned by the\x0d\n   *                          `resolve` hook\x0d\n   * @returns {Promise<ModuleJob>} The (possibly pending) module job\x0d\n   */\x0d\n  #createModuleJob(url\x2C importAssertions\x2C parentURL\x2C format) {\x0d\n    const moduleProvider = async (url\x2C isMain) => {\x0d\n      const { format: finalFormat\x2C source } = await this.load(\x0d\n        url\x2C { format\x2C importAssertions });\x0d\n\x0d\n      const translator = translators.get(finalFormat);\x0d\n\x0d\n      if (!translator) {\x0d\n        throw new ERR_UNKNOWN_MODULE_FORMAT(finalFormat);\x0d\n      }\x0d\n\x0d\n      return FunctionPrototypeCall(translator\x2C this\x2C url\x2C source\x2C isMain);\x0d\n    };\x0d\n\x0d\n    const inspectBrk = (\x0d\n      parentURL === undefined &&\x0d\n      getOptionValue('--inspect-brk')\x0d\n    );\x0d\n\x0d\n    const job = new ModuleJob(\x0d\n      this\x2C\x0d\n      url\x2C\x0d\n      importAssertions\x2C\x0d\n      moduleProvider\x2C\x0d\n      parentURL === undefined\x2C\x0d\n      inspectBrk\x0d\n    );\x0d\n\x0d\n    this.moduleMap.set(url\x2C importAssertions.type\x2C job);\x0d\n\x0d\n    return job;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * This method is usually called indirectly as part of the loading processes.\x0d\n   * Internally\x2C it is used directly to add loaders. Use directly with caution.\x0d\n   *\x0d\n   * This method must NOT be renamed: it functions as a dynamic import on a\x0d\n   * loader module.\x0d\n   *\x0d\n   * @param {string | string[]} specifiers Path(s) to the module.\x0d\n   * @param {string} parentURL Path of the parent importing the module.\x0d\n   * @param {Record<string\x2C string>} importAssertions Validations for the\x0d\n   *                                                  module import.\x0d\n   * @returns {Promise<object | object[]>} A list of module export(s).\x0d\n   */\x0d\n  async import(specifiers\x2C parentURL\x2C importAssertions) {\x0d\n    const wasArr = ArrayIsArray(specifiers);\x0d\n    if (!wasArr) specifiers = [specifiers];\x0d\n\x0d\n    const count = specifiers.length;\x0d\n    const jobs = new Array(count);\x0d\n\x0d\n    for (let i = 0; i < count; i++) {\x0d\n      jobs[i] = this.getModuleJob(specifiers[i]\x2C parentURL\x2C importAssertions)\x0d\n        .then((job) => job.run())\x0d\n        .then(({ module }) => module.getNamespace());\x0d\n    }\x0d\n\x0d\n    const namespaces = await PromiseAll(new SafeArrayIterator(jobs));\x0d\n\x0d\n    return wasArr ?\x0d\n      namespaces :\x0d\n      namespaces[0];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * Provide source that is understood by one of Node's translators.\x0d\n   *\x0d\n   * The internals of this WILL change when chaining is implemented\x2C\x0d\n   * depending on the resolution/consensus from #36954\x0d\n   * @param {string} url The URL/path of the module to be loaded\x0d\n   * @param {object} context Metadata about the module\x0d\n   * @returns {object}\x0d\n   */\x0d\n  async load(url\x2C context = {}) {\x0d\n    const defaultLoader = this.#loaders[0];\x0d\n\x0d\n    const loader = this.#loaders.length === 1 ?\x0d\n      defaultLoader :\x0d\n      this.#loaders[1];\x0d\n    const loaded = await loader(url\x2C context\x2C defaultLoader);\x0d\n\x0d\n    if (typeof loaded !== 'object') {\x0d\n      throw new ERR_INVALID_RETURN_VALUE(\x0d\n        'object'\x2C\x0d\n        'loader load'\x2C\x0d\n        loaded\x2C\x0d\n      );\x0d\n    }\x0d\n\x0d\n    const {\x0d\n      format\x2C\x0d\n      source\x2C\x0d\n    } = loaded;\x0d\n\x0d\n    if (format == null) {\x0d\n      const dataUrl = RegExpPrototypeExec(\x0d\n        /^data:([^/]+\\/[^;\x2C]+)(?:[^\x2C]*?)(;base64)?\x2C/\x2C\x0d\n        url\x2C\x0d\n      );\x0d\n\x0d\n      throw new ERR_INVALID_MODULE_SPECIFIER(\x0d\n        url\x2C\x0d\n        dataUrl ? `has an unsupported MIME type "${dataUrl[1]}"` : ''\x0d\n      );\x0d\n    }\x0d\n\x0d\n    if (typeof format !== 'string') {\x0d\n      throw new ERR_INVALID_RETURN_PROPERTY_VALUE(\x0d\n        'string'\x2C\x0d\n        'loader resolve'\x2C\x0d\n        'format'\x2C\x0d\n        format\x2C\x0d\n      );\x0d\n    }\x0d\n\x0d\n    if (\x0d\n      source != null &&\x0d\n      typeof source !== 'string' &&\x0d\n      !isAnyArrayBuffer(source) &&\x0d\n      !isArrayBufferView(source)\x0d\n    ) throw ERR_INVALID_RETURN_PROPERTY_VALUE(\x0d\n      'string\x2C an ArrayBuffer\x2C or a TypedArray'\x2C\x0d\n      'loader load'\x2C\x0d\n      'source'\x2C\x0d\n      source\x0d\n    );\x0d\n\x0d\n    return {\x0d\n      format\x2C\x0d\n      source\x2C\x0d\n    };\x0d\n  }\x0d\n\x0d\n  preload() {\x0d\n    const count = this.#globalPreloaders.length;\x0d\n    if (!count) return;\x0d\n\x0d\n    for (let i = 0; i < count; i++) {\x0d\n      const channel = new MessageChannel();\x0d\n      const {\x0d\n        port1: insidePreload\x2C\x0d\n        port2: insideLoader\x2C\x0d\n      } = channel;\x0d\n\x0d\n      insidePreload.unref();\x0d\n      insideLoader.unref();\x0d\n\x0d\n      const preload = this.#globalPreloaders[i]({\x0d\n        port: insideLoader\x0d\n      });\x0d\n\x0d\n      if (preload == null) return;\x0d\n\x0d\n      if (typeof preload !== 'string') {\x0d\n        throw new ERR_INVALID_RETURN_VALUE(\x0d\n          'string'\x2C\x0d\n          'loader globalPreloadCode'\x2C\x0d\n          preload\x2C\x0d\n        );\x0d\n      }\x0d\n      const { compileFunction } = require('vm');\x0d\n      const preloadInit = compileFunction(\x0d\n        preload\x2C\x0d\n        ['getBuiltin'\x2C 'port'\x2C 'setImportMetaCallback']\x2C\x0d\n        {\x0d\n          filename: '<preload>'\x2C\x0d\n        }\x0d\n      );\x0d\n      const { NativeModule } = require('internal/bootstrap/loaders');\x0d\n      // We only allow replacing the importMetaInitializer during preload\x2C\x0d\n      // after preload is finished\x2C we disable the ability to replace it\x0d\n      //\x0d\n      // This exposes accidentally setting the initializer too late by\x0d\n      // throwing an error.\x0d\n      let finished = false;\x0d\n      let replacedImportMetaInitializer = false;\x0d\n      let next = this.#importMetaInitializer;\x0d\n      try {\x0d\n        // Calls the compiled preload source text gotten from the hook\x0d\n        // Since the parameters are named we use positional parameters\x0d\n        // see compileFunction above to cross reference the names\x0d\n        FunctionPrototypeCall(\x0d\n          preloadInit\x2C\x0d\n          globalThis\x2C\x0d\n          // Param getBuiltin\x0d\n          (builtinName) => {\x0d\n            if (NativeModule.canBeRequiredByUsers(builtinName)) {\x0d\n              return require(builtinName);\x0d\n            }\x0d\n            throw new ERR_INVALID_ARG_VALUE('builtinName'\x2C builtinName);\x0d\n          }\x2C\x0d\n          // Param port\x0d\n          insidePreload\x2C\x0d\n          // Param setImportMetaCallback\x0d\n          (fn) => {\x0d\n            if (finished || typeof fn !== 'function') {\x0d\n              throw new ERR_INVALID_ARG_TYPE('fn'\x2C fn);\x0d\n            }\x0d\n            replacedImportMetaInitializer = true;\x0d\n            const parent = next;\x0d\n            next = (meta\x2C context) => {\x0d\n              return fn(meta\x2C context\x2C parent);\x0d\n            };\x0d\n          });\x0d\n      } finally {\x0d\n        finished = true;\x0d\n        if (replacedImportMetaInitializer) {\x0d\n          this.#importMetaInitializer = next;\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  importMetaInitialize(meta\x2C context) {\x0d\n    this.#importMetaInitializer(meta\x2C context);\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * Resolve the location of the module.\x0d\n   *\x0d\n   * The internals of this WILL change when chaining is implemented\x2C\x0d\n   * depending on the resolution/consensus from #36954.\x0d\n   * @param {string} originalSpecifier The specified URL path of the module to\x0d\n   *                                   be resolved.\x0d\n   * @param {string} [parentURL] The URL path of the module's parent.\x0d\n   * @param {ImportAssertions} [importAssertions] Assertions from the import\x0d\n   *                                              statement or expression.\x0d\n   * @returns {{ url: string }}\x0d\n   */\x0d\n  async resolve(originalSpecifier\x2C parentURL\x2C\x0d\n                importAssertions = ObjectCreate(null)) {\x0d\n    const isMain = parentURL === undefined;\x0d\n\x0d\n    if (\x0d\n      !isMain &&\x0d\n      typeof parentURL !== 'string' &&\x0d\n      !isURLInstance(parentURL)\x0d\n    ) throw new ERR_INVALID_ARG_TYPE(\x0d\n      'parentURL'\x2C\x0d\n      ['string'\x2C 'URL']\x2C\x0d\n      parentURL\x2C\x0d\n    );\x0d\n\x0d\n    const conditions = DEFAULT_CONDITIONS;\x0d\n\x0d\n    const defaultResolver = this.#resolvers[0];\x0d\n\x0d\n    const resolver = this.#resolvers.length === 1 ?\x0d\n      defaultResolver :\x0d\n      this.#resolvers[1];\x0d\n    const resolution = await resolver(\x0d\n      originalSpecifier\x2C\x0d\n      {\x0d\n        conditions\x2C\x0d\n        importAssertions\x2C\x0d\n        parentURL\x2C\x0d\n      }\x2C\x0d\n      defaultResolver\x2C\x0d\n    );\x0d\n\x0d\n    if (typeof resolution !== 'object') {\x0d\n      throw new ERR_INVALID_RETURN_VALUE(\x0d\n        'object'\x2C\x0d\n        'loader resolve'\x2C\x0d\n        resolution\x2C\x0d\n      );\x0d\n    }\x0d\n\x0d\n    const { format\x2C url } = resolution;\x0d\n\x0d\n    if (\x0d\n      format != null &&\x0d\n      typeof format !== 'string'\x0d\n    ) {\x0d\n      throw new ERR_INVALID_RETURN_PROPERTY_VALUE(\x0d\n        'string'\x2C\x0d\n        'loader resolve'\x2C\x0d\n        'format'\x2C\x0d\n        format\x2C\x0d\n      );\x0d\n    }\x0d\n\x0d\n    if (typeof url !== 'string') { // non-strings can be coerced to a url string\x0d\n      throw new ERR_INVALID_RETURN_PROPERTY_VALUE(\x0d\n        'string'\x2C\x0d\n        'loader resolve'\x2C\x0d\n        'url'\x2C\x0d\n        url\x2C\x0d\n      );\x0d\n    }\x0d\n\x0d\n    new URL(url); // Intentionally trigger error if `url` is invalid\x0d\n\x0d\n    return {\x0d\n      format\x2C\x0d\n      url\x2C\x0d\n    };\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectSetPrototypeOf(ESMLoader.prototype\x2C null);\x0d\n\x0d\nexports.ESMLoader = ESMLoader;\x0d\n
code-source-info,0x39aa285f126,114,0,17034,C0O0C4O17034,,
code-creation,Function,10,361312,0x39aa285f96e,624, node:internal/modules/esm/loader:1:1,0x39aa285f0a0,~
code-source-info,0x39aa285f96e,114,0,17034,C0O0C116O82C122O82C126O136C132O146C138O163C144O186C150O209C156O235C162O261C168O278C174O295C179O320C185O335C191O359C197O381C203O397C209O455C215O455C220O436C226O682C232O682C237O708C242O500C248O525C254O551C260O584C266O622C272O651C278O763C284O763C289O725C295O740C301O755C307O845C313O845C318O800C324O821C330O896C336O896C340O896C342O959C348O959C352O959C354O1061C360O1061C365O1017C371O1036C377O1140C383O1140C388O1114C394O1221C400O1221C405O1205C411O1284C417O1284C422O1268C428O1361C434O1361C439O1342C604O16981C611O16950C616O17002C618O17020C623O17033,,
code-creation,Function,10,361404,0x39aa285fde6,154,<instance_members_initializer> node:internal/modules/esm/loader:64:3,0x39aa285f4c8,~
code-source-info,0x39aa285fde6,114,1844,2727,C3O1864C17O2026C28O2033C45O2215C56O2222C73O2274C88O2373C95O2373C109O2496C119O2588C126O2588C140O2716C153O2727,,
code-creation,Eval,10,361746,0x39aa286160e,5, node:internal/modules/esm/module_map:1:1,0x39aa2861420,~
script-source,115,node:internal/modules/esm/module_map,'use strict';\x0d\n\x0d\nconst ModuleJob = require('internal/modules/esm/module_job');\x0d\nconst { kImplicitAssertType } = require('internal/modules/esm/assert');\x0d\nconst {\x0d\n  ObjectCreate\x2C\x0d\n  SafeMap\x2C\x0d\n} = primordials;\x0d\nlet debug = require('internal/util/debuglog').debuglog('esm'\x2C (fn) => {\x0d\n  debug = fn;\x0d\n});\x0d\nconst { ERR_INVALID_ARG_TYPE } = require('internal/errors').codes;\x0d\nconst { validateString } = require('internal/validators');\x0d\n\x0d\n// Tracks the state of the loader-level module cache\x0d\nclass ModuleMap extends SafeMap {\x0d\n  constructor(i) { super(i); } // eslint-disable-line no-useless-constructor\x0d\n  get(url\x2C type = kImplicitAssertType) {\x0d\n    validateString(url\x2C 'url');\x0d\n    validateString(type\x2C 'type');\x0d\n    return super.get(url)?.[type];\x0d\n  }\x0d\n  set(url\x2C type = kImplicitAssertType\x2C job) {\x0d\n    validateString(url\x2C 'url');\x0d\n    validateString(type\x2C 'type');\x0d\n    if (job instanceof ModuleJob !== true &&\x0d\n        typeof job !== 'function') {\x0d\n      throw new ERR_INVALID_ARG_TYPE('job'\x2C 'ModuleJob'\x2C job);\x0d\n    }\x0d\n    debug(`Storing ${url} (${\x0d\n      type === kImplicitAssertType ? 'implicit type' : type\x0d\n    }) in ModuleMap`);\x0d\n    const cachedJobsForUrl = super.get(url) ?? ObjectCreate(null);\x0d\n    cachedJobsForUrl[type] = job;\x0d\n    return super.set(url\x2C cachedJobsForUrl);\x0d\n  }\x0d\n  has(url\x2C type = kImplicitAssertType) {\x0d\n    validateString(url\x2C 'url');\x0d\n    validateString(type\x2C 'type');\x0d\n    return super.get(url)?.[type] !== undefined;\x0d\n  }\x0d\n}\x0d\nmodule.exports = ModuleMap;\x0d\n
code-source-info,0x39aa286160e,115,0,1487,C0O0C4O1487,,
code-creation,Function,10,361908,0x39aa2861a46,175, node:internal/modules/esm/module_map:1:1,0x39aa2861588,~
code-source-info,0x39aa2861a46,115,0,1487,C0O0C23O35C26O35C30O35C32O112C35O112C40O88C46O164C52O181C57O221C60O221C65O254C78O255C84O221C86O335C89O335C94O361C99O310C105O397C108O397C113O378C123O510C167O1458C169O1473C174O1486,,
code-creation,Eval,10,362407,0x39aa28624ee,5, node:internal/modules/esm/module_job:1:1,0x39aa28621f8,~
script-source,116,node:internal/modules/esm/module_job,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypeMap\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeSome\x2C\x0d\n  FunctionPrototype\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  PromiseAll\x2C\x0d\n  PromiseResolve\x2C\x0d\n  PromisePrototypeCatch\x2C\x0d\n  ReflectApply\x2C\x0d\n  RegExpPrototypeTest\x2C\x0d\n  SafeArrayIterator\x2C\x0d\n  SafeSet\x2C\x0d\n  StringPrototypeIncludes\x2C\x0d\n  StringPrototypeMatch\x2C\x0d\n  StringPrototypeReplace\x2C\x0d\n  StringPrototypeSplit\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { ModuleWrap } = internalBinding('module_wrap');\x0d\n\x0d\nconst { decorateErrorStack } = require('internal/util');\x0d\nconst {\x0d\n  getSourceMapsEnabled\x2C\x0d\n} = require('internal/source_map/source_map_cache');\x0d\nconst assert = require('internal/assert');\x0d\nconst resolvedPromise = PromiseResolve();\x0d\n\x0d\nconst noop = FunctionPrototype;\x0d\n\x0d\nlet hasPausedEntry = false;\x0d\n\x0d\nconst CJSGlobalLike = [\x0d\n  'require'\x2C\x0d\n  'module'\x2C\x0d\n  'exports'\x2C\x0d\n  '__filename'\x2C\x0d\n  '__dirname'\x2C\x0d\n];\x0d\nconst isCommonJSGlobalLikeNotDefinedError = (errorMessage) =>\x0d\n  ArrayPrototypeSome(\x0d\n    CJSGlobalLike\x2C\x0d\n    (globalLike) => errorMessage === `${globalLike} is not defined`\x0d\n  );\x0d\n\x0d\n/* A ModuleJob tracks the loading of a single Module\x2C and the ModuleJobs of\x0d\n * its dependencies\x2C over time. */\x0d\nclass ModuleJob {\x0d\n  // `loader` is the Loader instance used for loading dependencies.\x0d\n  // `moduleProvider` is a function\x0d\n  constructor(loader\x2C url\x2C importAssertions = ObjectCreate(null)\x2C\x0d\n              moduleProvider\x2C isMain\x2C inspectBrk) {\x0d\n    this.loader = loader;\x0d\n    this.importAssertions = importAssertions;\x0d\n    this.isMain = isMain;\x0d\n    this.inspectBrk = inspectBrk;\x0d\n\x0d\n    this.module = undefined;\x0d\n    // Expose the promise to the ModuleWrap directly for linking below.\x0d\n    // `this.module` is also filled in below.\x0d\n    this.modulePromise = ReflectApply(moduleProvider\x2C loader\x2C [url\x2C isMain]);\x0d\n\x0d\n    // Wait for the ModuleWrap instance being linked with all dependencies.\x0d\n    const link = async () => {\x0d\n      this.module = await this.modulePromise;\x0d\n      assert(this.module instanceof ModuleWrap);\x0d\n\x0d\n      // Explicitly keeping track of dependency jobs is needed in order\x0d\n      // to flatten out the dependency graph below in `_instantiate()`\x2C\x0d\n      // so that circular dependencies can't cause a deadlock by two of\x0d\n      // these `link` callbacks depending on each other.\x0d\n      const dependencyJobs = [];\x0d\n      const promises = this.module.link(async (specifier\x2C assertions) => {\x0d\n        const jobPromise = this.loader.getModuleJob(specifier\x2C url\x2C assertions);\x0d\n        ArrayPrototypePush(dependencyJobs\x2C jobPromise);\x0d\n        const job = await jobPromise;\x0d\n        return job.modulePromise;\x0d\n      });\x0d\n\x0d\n      if (promises !== undefined)\x0d\n        await PromiseAll(new SafeArrayIterator(promises));\x0d\n\x0d\n      return PromiseAll(new SafeArrayIterator(dependencyJobs));\x0d\n    };\x0d\n    // Promise for the list of all dependencyJobs.\x0d\n    this.linked = link();\x0d\n    // This promise is awaited later anyway\x2C so silence\x0d\n    // 'unhandled rejection' warnings.\x0d\n    PromisePrototypeCatch(this.linked\x2C noop);\x0d\n\x0d\n    // instantiated == deep dependency jobs wrappers are instantiated\x2C\x0d\n    // and module wrapper is instantiated.\x0d\n    this.instantiated = undefined;\x0d\n  }\x0d\n\x0d\n  instantiate() {\x0d\n    if (this.instantiated === undefined) {\x0d\n      this.instantiated = this._instantiate();\x0d\n    }\x0d\n    return this.instantiated;\x0d\n  }\x0d\n\x0d\n  async _instantiate() {\x0d\n    const jobsInGraph = new SafeSet();\x0d\n    const addJobsToDependencyGraph = async (moduleJob) => {\x0d\n      if (jobsInGraph.has(moduleJob)) {\x0d\n        return;\x0d\n      }\x0d\n      jobsInGraph.add(moduleJob);\x0d\n      const dependencyJobs = await moduleJob.linked;\x0d\n      return PromiseAll(new SafeArrayIterator(\x0d\n        ArrayPrototypeMap(dependencyJobs\x2C addJobsToDependencyGraph)));\x0d\n    };\x0d\n    await addJobsToDependencyGraph(this);\x0d\n\x0d\n    try {\x0d\n      if (!hasPausedEntry && this.inspectBrk) {\x0d\n        hasPausedEntry = true;\x0d\n        const initWrapper = internalBinding('inspector').callAndPauseOnStart;\x0d\n        initWrapper(this.module.instantiate\x2C this.module);\x0d\n      } else {\x0d\n        this.module.instantiate();\x0d\n      }\x0d\n    } catch (e) {\x0d\n      decorateErrorStack(e);\x0d\n      // TODO(@bcoe): Add source map support to exception that occurs as result\x0d\n      // of missing named export. This is currently not possible because\x0d\n      // stack trace originates in module_job\x2C not the file itself. A hidden\x0d\n      // symbol with filename could be set in node_errors.cc to facilitate this.\x0d\n      if (!getSourceMapsEnabled() &&\x0d\n          StringPrototypeIncludes(e.message\x2C\x0d\n                                  ' does not provide an export named')) {\x0d\n        const splitStack = StringPrototypeSplit(e.stack\x2C '\\n');\x0d\n        const parentFileUrl = StringPrototypeReplace(\x0d\n          splitStack[0]\x2C\x0d\n          /:\\d+$/\x2C\x0d\n          ''\x0d\n        );\x0d\n        const { 1: childSpecifier\x2C 2: name } = StringPrototypeMatch(\x0d\n          e.message\x2C\x0d\n          /module '(.*)' does not provide an export named '(.+)'/);\x0d\n        const { url: childFileURL } = await this.loader.resolve(\x0d\n          childSpecifier\x2C parentFileUrl\x2C\x0d\n        );\x0d\n        let format;\x0d\n        try {\x0d\n          // This might throw for non-CommonJS modules because we aren't passing\x0d\n          // in the import assertions and some formats require them; but we only\x0d\n          // care about CommonJS for the purposes of this error message.\x0d\n          ({ format } =\x0d\n            await this.loader.load(childFileURL));\x0d\n        } catch {\x0d\n          // Continue regardless of error.\x0d\n        }\x0d\n\x0d\n        if (format === 'commonjs') {\x0d\n          const importStatement = splitStack[1];\x0d\n          // TODO(@ctavan): The original error stack only provides the single\x0d\n          // line which causes the error. For multi-line import statements we\x0d\n          // cannot generate an equivalent object destructuring assignment by\x0d\n          // just parsing the error stack.\x0d\n          const oneLineNamedImports = StringPrototypeMatch(importStatement\x2C /{.*}/);\x0d\n          const destructuringAssignment = oneLineNamedImports &&\x0d\n            StringPrototypeReplace(oneLineNamedImports\x2C /\\s+as\\s+/g\x2C ': ');\x0d\n          e.message = `Named export '${name}' not found. The requested module` +\x0d\n            ` '${childSpecifier}' is a CommonJS module\x2C which may not support` +\x0d\n            ' all module.exports as named exports.\\nCommonJS modules can ' +\x0d\n            'always be imported via the default export\x2C for example using:' +\x0d\n            `\\n\\nimport pkg from '${childSpecifier}';\\n${\x0d\n              destructuringAssignment ?\x0d\n                `const ${destructuringAssignment} = pkg;\\n` : ''}`;\x0d\n          const newStack = StringPrototypeSplit(e.stack\x2C '\\n');\x0d\n          newStack[3] = `SyntaxError: ${e.message}`;\x0d\n          e.stack = ArrayPrototypeJoin(newStack\x2C '\\n');\x0d\n        }\x0d\n      }\x0d\n      throw e;\x0d\n    }\x0d\n\x0d\n    for (const dependencyJob of jobsInGraph) {\x0d\n      // Calling `this.module.instantiate()` instantiates not only the\x0d\n      // ModuleWrap in this module\x2C but all modules in the graph.\x0d\n      dependencyJob.instantiated = resolvedPromise;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  async run() {\x0d\n    await this.instantiate();\x0d\n    const timeout = -1;\x0d\n    const breakOnSigint = false;\x0d\n    try {\x0d\n      await this.module.evaluate(timeout\x2C breakOnSigint);\x0d\n    } catch (e) {\x0d\n      if (e?.name === 'ReferenceError' &&\x0d\n          isCommonJSGlobalLikeNotDefinedError(e.message)) {\x0d\n        e.message += ' in ES module scope';\x0d\n\x0d\n        if (StringPrototypeStartsWith(e.message\x2C 'require ')) {\x0d\n          e.message += '\x2C you can use import instead';\x0d\n        }\x0d\n\x0d\n        const packageConfig =\x0d\n          StringPrototypeStartsWith(this.module.url\x2C 'file://') &&\x0d\n            RegExpPrototypeTest(/\\.js(\\?[^#]*)?(#.*)?$/\x2C this.module.url) &&\x0d\n            require('internal/modules/esm/resolve')\x0d\n              .getPackageScopeConfig(this.module.url);\x0d\n        if (packageConfig.type === 'module') {\x0d\n          e.message +=\x0d\n            '\\nThis file is being treated as an ES module because it has a ' +\x0d\n            `'.js' file extension and '${packageConfig.pjsonPath}' contains ` +\x0d\n            '"type": "module". To treat it as a CommonJS script\x2C rename it ' +\x0d\n            'to use the \\'.cjs\\' file extension.';\x0d\n        }\x0d\n      }\x0d\n      throw e;\x0d\n    }\x0d\n    return { module: this.module };\x0d\n  }\x0d\n}\x0d\nObjectSetPrototypeOf(ModuleJob.prototype\x2C null);\x0d\nmodule.exports = ModuleJob;\x0d\n
code-source-info,0x39aa28624ee,116,0,8407,C0O0C4O8407,,
code-creation,Function,10,363033,0x39aa28629e6,343, node:internal/modules/esm/module_job:1:1,0x39aa2862468,~
code-source-info,0x39aa28629e6,116,0,8407,C0O0C88O28C94O51C100O73C106O96C112O119C117O141C123O158C128O183C134O198C139O217C145O243C151O260C157O284C163O306C169O318C175O346C181O371C187O398C193O423C199O494C205O494C210O479C216O560C222O560C227O537C233O625C239O625C244O598C250O690C256O690C260O690C262O743C265O743C267O777C269O777C271O820C272O820C274O852C278O852C280O977C284O977C323O8359C330O8328C335O8378C337O8393C342O8406,,
code-creation,Eval,10,363484,0x39aa2864636,5, node:internal/modules/esm/assert:1:1,0x39aa2864440,~
script-source,117,node:internal/modules/esm/assert,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeFilter\x2C\x0d\n  ArrayPrototypeIncludes\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectValues\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n} = primordials;\x0d\nconst { validateString } = require('internal/validators');\x0d\n\x0d\nconst {\x0d\n  ERR_IMPORT_ASSERTION_TYPE_FAILED\x2C\x0d\n  ERR_IMPORT_ASSERTION_TYPE_MISSING\x2C\x0d\n  ERR_IMPORT_ASSERTION_TYPE_UNSUPPORTED\x2C\x0d\n} = require('internal/errors').codes;\x0d\n\x0d\n// The HTML spec has an implied default type of `'javascript'`.\x0d\nconst kImplicitAssertType = 'javascript';\x0d\n\x0d\n/**\x0d\n * Define a map of module formats to import assertion types (the value of\x0d\n * `type` in `assert { type: 'json' }`).\x0d\n * @type {Map<string\x2C string>}\x0d\n */\x0d\nconst formatTypeMap = {\x0d\n  '__proto__': null\x2C\x0d\n  'builtin': kImplicitAssertType\x2C\x0d\n  'commonjs': kImplicitAssertType\x2C\x0d\n  'json': 'json'\x2C\x0d\n  'module': kImplicitAssertType\x2C\x0d\n  'wasm': kImplicitAssertType\x2C // It's unclear whether the HTML spec will require an assertion type or not for Wasm; see https://github.com/WebAssembly/esm-integration/issues/42\x0d\n};\x0d\n\x0d\n/**\x0d\n * The HTML spec disallows the default type to be explicitly specified\x0d\n * (for now); so `import './file.js'` is okay but\x0d\n * `import './file.js' assert { type: 'javascript' }` throws.\x0d\n * @type {Array<string\x2C string>}\x0d\n */\x0d\nconst supportedAssertionTypes = ArrayPrototypeFilter(\x0d\n  ObjectValues(formatTypeMap)\x2C\x0d\n  (type) => type !== kImplicitAssertType);\x0d\n\x0d\n\x0d\n/**\x0d\n * Test a module's import assertions.\x0d\n * @param {string} url The URL of the imported module\x2C for error reporting.\x0d\n * @param {string} format One of Node's supported translators\x0d\n * @param {Record<string\x2C string>} importAssertions Validations for the\x0d\n *                                                  module import.\x0d\n * @returns {true}\x0d\n * @throws {TypeError} If the format and assertion type are incompatible.\x0d\n */\x0d\nfunction validateAssertions(url\x2C format\x2C\x0d\n                            importAssertions = ObjectCreate(null)) {\x0d\n  const validType = formatTypeMap[format];\x0d\n\x0d\n  switch (validType) {\x0d\n    case undefined:\x0d\n      // Ignore assertions for module formats we don't recognize\x2C to allow new\x0d\n      // formats in the future.\x0d\n      return true;\x0d\n\x0d\n    case kImplicitAssertType:\x0d\n      // This format doesn't allow an import assertion type\x2C so the property\x0d\n      // must not be set on the import assertions object.\x0d\n      if (!ObjectPrototypeHasOwnProperty(importAssertions\x2C 'type')) {\x0d\n        return true;\x0d\n      }\x0d\n      return handleInvalidType(url\x2C importAssertions.type);\x0d\n\x0d\n    case importAssertions.type:\x0d\n      // The asserted type is the valid type for this format.\x0d\n      return true;\x0d\n\x0d\n    default:\x0d\n      // There is an expected type for this format\x2C but the value of\x0d\n      // `importAssertions.type` might not have been it.\x0d\n      if (!ObjectPrototypeHasOwnProperty(importAssertions\x2C 'type')) {\x0d\n        // `type` wasn't specified at all.\x0d\n        throw new ERR_IMPORT_ASSERTION_TYPE_MISSING(url\x2C validType);\x0d\n      }\x0d\n      handleInvalidType(url\x2C importAssertions.type);\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Throw the correct error depending on what's wrong with the type assertion.\x0d\n * @param {string} url The resolved URL for the module to be imported\x0d\n * @param {string} type The value of the import assertion `type` property\x0d\n */\x0d\nfunction handleInvalidType(url\x2C type) {\x0d\n  // `type` might have not been a string.\x0d\n  validateString(type\x2C 'type');\x0d\n\x0d\n  // `type` might not have been one of the types we understand.\x0d\n  if (!ArrayPrototypeIncludes(supportedAssertionTypes\x2C type)) {\x0d\n    throw new ERR_IMPORT_ASSERTION_TYPE_UNSUPPORTED(type);\x0d\n  }\x0d\n\x0d\n  // `type` was the wrong value for this format.\x0d\n  throw new ERR_IMPORT_ASSERTION_TYPE_FAILED(url\x2C type);\x0d\n}\x0d\n\x0d\n\x0d\nmodule.exports = {\x0d\n  kImplicitAssertType\x2C\x0d\n  validateAssertions\x2C\x0d\n};\x0d\n
code-source-info,0x39aa2864636,117,0,3734,C0O0C4O3734,,
code-creation,Function,10,363786,0x39aa286490e,201, node:internal/modules/esm/assert:1:1,0x39aa28645b0,~
code-source-info,0x39aa286490e,117,0,3734,C0O0C46O28C51O53C57O80C63O97C68O114C74O191C77O191C82O172C88O356C91O356C96O382C101O237C107O274C113O312C119O486C121O486C123O684C130O722C136O758C142O811C148O843C154O684C156O1280C159O1305C169O1280C174O1280C176O3663C183O3685C189O3709C195O3678C200O3733,,
code-creation,LazyCompile,10,363958,0x39aa2864f1e,9, node:internal/modules/esm/assert:43:3,0x39aa2864708,~
code-source-info,0x39aa2864f1e,117,1337,1375,C0O1352C2O1356C4O1352C8O1375,,
code-creation,Eval,10,365145,0x39aa286693e,5, node:internal/modules/esm/resolve:1:1,0x39aa2866218,~
script-source,118,node:internal/modules/esm/resolve,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypeShift\x2C\x0d\n  JSONParse\x2C\x0d\n  JSONStringify\x2C\x0d\n  ObjectFreeze\x2C\x0d\n  ObjectGetOwnPropertyNames\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  RegExp\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  RegExpPrototypeSymbolReplace\x2C\x0d\n  RegExpPrototypeTest\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeSet\x2C\x0d\n  String\x2C\x0d\n  StringPrototypeEndsWith\x2C\x0d\n  StringPrototypeIncludes\x2C\x0d\n  StringPrototypeIndexOf\x2C\x0d\n  StringPrototypeLastIndexOf\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeSplit\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n} = primordials;\x0d\nconst internalFS = require('internal/fs/utils');\x0d\nconst { NativeModule } = require('internal/bootstrap/loaders');\x0d\nconst {\x0d\n  realpathSync\x2C\x0d\n  statSync\x2C\x0d\n  Stats\x2C\x0d\n} = require('fs');\x0d\nconst { getOptionValue } = require('internal/options');\x0d\n// Do not eagerly grab .manifest\x2C it may be in TDZ\x0d\nconst policy = getOptionValue('--experimental-policy') ?\x0d\n  require('internal/process/policy') :\x0d\n  null;\x0d\nconst { sep\x2C relative\x2C resolve } = require('path');\x0d\nconst preserveSymlinks = getOptionValue('--preserve-symlinks');\x0d\nconst preserveSymlinksMain = getOptionValue('--preserve-symlinks-main');\x0d\nconst typeFlag = getOptionValue('--input-type');\x0d\nconst pendingDeprecation = getOptionValue('--pending-deprecation');\x0d\nconst { URL\x2C pathToFileURL\x2C fileURLToPath } = require('internal/url');\x0d\nconst {\x0d\n  ERR_INPUT_TYPE_NOT_ALLOWED\x2C\x0d\n  ERR_INVALID_ARG_VALUE\x2C\x0d\n  ERR_INVALID_MODULE_SPECIFIER\x2C\x0d\n  ERR_INVALID_PACKAGE_CONFIG\x2C\x0d\n  ERR_INVALID_PACKAGE_TARGET\x2C\x0d\n  ERR_MANIFEST_DEPENDENCY_MISSING\x2C\x0d\n  ERR_MODULE_NOT_FOUND\x2C\x0d\n  ERR_PACKAGE_IMPORT_NOT_DEFINED\x2C\x0d\n  ERR_PACKAGE_PATH_NOT_EXPORTED\x2C\x0d\n  ERR_UNSUPPORTED_DIR_IMPORT\x2C\x0d\n  ERR_UNSUPPORTED_ESM_URL_SCHEME\x2C\x0d\n} = require('internal/errors').codes;\x0d\nconst { Module: CJSModule } = require('internal/modules/cjs/loader');\x0d\n\x0d\nconst packageJsonReader = require('internal/modules/package_json_reader');\x0d\nconst userConditions = getOptionValue('--conditions');\x0d\nconst noAddons = getOptionValue('--no-addons');\x0d\nconst addonConditions = noAddons ? [] : ['node-addons'];\x0d\n\x0d\nconst DEFAULT_CONDITIONS = ObjectFreeze([\x0d\n  'node'\x2C\x0d\n  'import'\x2C\x0d\n  ...addonConditions\x2C\x0d\n  ...userConditions\x2C\x0d\n]);\x0d\n\x0d\nconst DEFAULT_CONDITIONS_SET = new SafeSet(DEFAULT_CONDITIONS);\x0d\n\x0d\n/**\x0d\n * @typedef {string | string[] | Record<string\x2C unknown>} Exports\x0d\n * @typedef {'module' | 'commonjs'} PackageType\x0d\n * @typedef {{\x0d\n *   exports?: ExportConfig;\x0d\n *   name?: string;\x0d\n *   main?: string;\x0d\n *   type?: PackageType;\x0d\n * }} PackageConfig\x0d\n */\x0d\n\x0d\nconst emittedPackageWarnings = new SafeSet();\x0d\n\x0d\n/**\x0d\n * @param {string} match\x0d\n * @param {URL} pjsonUrl\x0d\n * @param {boolean} isExports\x0d\n * @param {string | URL | undefined} base\x0d\n * @returns {void}\x0d\n */\x0d\nfunction emitFolderMapDeprecation(match\x2C pjsonUrl\x2C isExports\x2C base) {\x0d\n  const pjsonPath = fileURLToPath(pjsonUrl);\x0d\n\x0d\n  if (emittedPackageWarnings.has(pjsonPath + '|' + match))\x0d\n    return;\x0d\n  emittedPackageWarnings.add(pjsonPath + '|' + match);\x0d\n  process.emitWarning(\x0d\n    `Use of deprecated folder mapping "${match}" in the ${isExports ?\x0d\n      '"exports"' : '"imports"'} field module resolution of the package at ${\x0d\n      pjsonPath}${base ? ` imported from ${fileURLToPath(base)}` : ''}.\\n` +\x0d\n      `Update this package.json to use a subpath pattern like "${match}*".`\x2C\x0d\n    'DeprecationWarning'\x2C\x0d\n    'DEP0148'\x0d\n  );\x0d\n}\x0d\n\x0d\nfunction emitTrailingSlashPatternDeprecation(match\x2C pjsonUrl\x2C isExports\x2C base) {\x0d\n  if (!pendingDeprecation) return;\x0d\n  const pjsonPath = fileURLToPath(pjsonUrl);\x0d\n  if (emittedPackageWarnings.has(pjsonPath + '|' + match))\x0d\n    return;\x0d\n  emittedPackageWarnings.add(pjsonPath + '|' + match);\x0d\n  process.emitWarning(\x0d\n    `Use of deprecated trailing slash pattern mapping "${match}" in the ${\x0d\n      isExports ? '"exports"' : '"imports"'} field module resolution of the ` +\x0d\n      `package at ${pjsonPath}${base ? ` imported from ${fileURLToPath(base)}` :\x0d\n        ''}. Mapping specifiers ending in "/" is no longer supported.`\x2C\x0d\n    'DeprecationWarning'\x2C\x0d\n    'DEP0155'\x0d\n  );\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {URL} url\x0d\n * @param {URL} packageJSONUrl\x0d\n * @param {string | URL | undefined} base\x0d\n * @param {string} main\x0d\n * @returns {void}\x0d\n */\x0d\nfunction emitLegacyIndexDeprecation(url\x2C packageJSONUrl\x2C base\x2C main) {\x0d\n  const format = defaultGetFormatWithoutErrors(url);\x0d\n  if (format !== 'module')\x0d\n    return;\x0d\n  const path = fileURLToPath(url);\x0d\n  const pkgPath = fileURLToPath(new URL('.'\x2C packageJSONUrl));\x0d\n  const basePath = fileURLToPath(base);\x0d\n  if (main)\x0d\n    process.emitWarning(\x0d\n      `Package ${pkgPath} has a "main" field set to ${JSONStringify(main)}\x2C ` +\x0d\n      `excluding the full filename and extension to the resolved file at "${\x0d\n        StringPrototypeSlice(path\x2C pkgPath.length)}"\x2C imported from ${\x0d\n        basePath}.\\n Automatic extension resolution of the "main" field is ` +\x0d\n      'deprecated for ES modules.'\x2C\x0d\n      'DeprecationWarning'\x2C\x0d\n      'DEP0151'\x0d\n    );\x0d\n  else\x0d\n    process.emitWarning(\x0d\n      `No "main" or "exports" field defined in the package.json for ${pkgPath\x0d\n      } resolving the main entry point "${\x0d\n        StringPrototypeSlice(path\x2C pkgPath.length)}"\x2C imported from ${basePath\x0d\n      }.\\nDefault "index" lookups for the main are deprecated for ES modules.`\x2C\x0d\n      'DeprecationWarning'\x2C\x0d\n      'DEP0151'\x0d\n    );\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string[]} [conditions]\x0d\n * @returns {Set<string>}\x0d\n */\x0d\nfunction getConditionsSet(conditions) {\x0d\n  if (conditions !== undefined && conditions !== DEFAULT_CONDITIONS) {\x0d\n    if (!ArrayIsArray(conditions)) {\x0d\n      throw new ERR_INVALID_ARG_VALUE('conditions'\x2C conditions\x2C\x0d\n                                      'expected an array');\x0d\n    }\x0d\n    return new SafeSet(conditions);\x0d\n  }\x0d\n  return DEFAULT_CONDITIONS_SET;\x0d\n}\x0d\n\x0d\nconst realpathCache = new SafeMap();\x0d\nconst packageJSONCache = new SafeMap();  /* string -> PackageConfig */\x0d\n\x0d\n/**\x0d\n * @param {string | URL} path\x0d\n * @returns {import('fs').Stats}\x0d\n */\x0d\nconst tryStatSync =\x0d\n  (path) => statSync(path\x2C { throwIfNoEntry: false }) ?? new Stats();\x0d\n\x0d\n/**\x0d\n * @param {string} path\x0d\n * @param {string} specifier\x0d\n * @param {string | URL | undefined} base\x0d\n * @returns {PackageConfig}\x0d\n */\x0d\nfunction getPackageConfig(path\x2C specifier\x2C base) {\x0d\n  const existing = packageJSONCache.get(path);\x0d\n  if (existing !== undefined) {\x0d\n    return existing;\x0d\n  }\x0d\n  const source = packageJsonReader.read(path).string;\x0d\n  if (source === undefined) {\x0d\n    const packageConfig = {\x0d\n      pjsonPath: path\x2C\x0d\n      exists: false\x2C\x0d\n      main: undefined\x2C\x0d\n      name: undefined\x2C\x0d\n      type: 'none'\x2C\x0d\n      exports: undefined\x2C\x0d\n      imports: undefined\x2C\x0d\n    };\x0d\n    packageJSONCache.set(path\x2C packageConfig);\x0d\n    return packageConfig;\x0d\n  }\x0d\n\x0d\n  let packageJSON;\x0d\n  try {\x0d\n    packageJSON = JSONParse(source);\x0d\n  } catch (error) {\x0d\n    throw new ERR_INVALID_PACKAGE_CONFIG(\x0d\n      path\x2C\x0d\n      (base ? `"${specifier}" from ` : '') + fileURLToPath(base || specifier)\x2C\x0d\n      error.message\x0d\n    );\x0d\n  }\x0d\n\x0d\n  let { imports\x2C main\x2C name\x2C type } = packageJSON;\x0d\n  const { exports } = packageJSON;\x0d\n  if (typeof imports !== 'object' || imports === null) imports = undefined;\x0d\n  if (typeof main !== 'string') main = undefined;\x0d\n  if (typeof name !== 'string') name = undefined;\x0d\n  // Ignore unknown types for forwards compatibility\x0d\n  if (type !== 'module' && type !== 'commonjs') type = 'none';\x0d\n\x0d\n  const packageConfig = {\x0d\n    pjsonPath: path\x2C\x0d\n    exists: true\x2C\x0d\n    main\x2C\x0d\n    name\x2C\x0d\n    type\x2C\x0d\n    exports\x2C\x0d\n    imports\x2C\x0d\n  };\x0d\n  packageJSONCache.set(path\x2C packageConfig);\x0d\n  return packageConfig;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {URL | string} resolved\x0d\n * @returns {PackageConfig}\x0d\n */\x0d\nfunction getPackageScopeConfig(resolved) {\x0d\n  let packageJSONUrl = new URL('./package.json'\x2C resolved);\x0d\n  while (true) {\x0d\n    const packageJSONPath = packageJSONUrl.pathname;\x0d\n    if (StringPrototypeEndsWith(packageJSONPath\x2C 'node_modules/package.json'))\x0d\n      break;\x0d\n    const packageConfig = getPackageConfig(fileURLToPath(packageJSONUrl)\x2C\x0d\n                                           resolved);\x0d\n    if (packageConfig.exists) return packageConfig;\x0d\n\x0d\n    const lastPackageJSONUrl = packageJSONUrl;\x0d\n    packageJSONUrl = new URL('../package.json'\x2C packageJSONUrl);\x0d\n\x0d\n    // Terminates at root where ../package.json equals ../../package.json\x0d\n    // (can't just check "/package.json" for Windows support).\x0d\n    if (packageJSONUrl.pathname === lastPackageJSONUrl.pathname) break;\x0d\n  }\x0d\n  const packageJSONPath = fileURLToPath(packageJSONUrl);\x0d\n  const packageConfig = {\x0d\n    pjsonPath: packageJSONPath\x2C\x0d\n    exists: false\x2C\x0d\n    main: undefined\x2C\x0d\n    name: undefined\x2C\x0d\n    type: 'none'\x2C\x0d\n    exports: undefined\x2C\x0d\n    imports: undefined\x2C\x0d\n  };\x0d\n  packageJSONCache.set(packageJSONPath\x2C packageConfig);\x0d\n  return packageConfig;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string | URL} url\x0d\n * @returns {boolean}\x0d\n */\x0d\nfunction fileExists(url) {\x0d\n  return statSync(url\x2C { throwIfNoEntry: false })?.isFile() ?? false;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Legacy CommonJS main resolution:\x0d\n * 1. let M = pkg_url + (json main field)\x0d\n * 2. TRY(M\x2C M.js\x2C M.json\x2C M.node)\x0d\n * 3. TRY(M/index.js\x2C M/index.json\x2C M/index.node)\x0d\n * 4. TRY(pkg_url/index.js\x2C pkg_url/index.json\x2C pkg_url/index.node)\x0d\n * 5. NOT_FOUND\x0d\n * @param {URL} packageJSONUrl\x0d\n * @param {PackageConfig} packageConfig\x0d\n * @param {string | URL | undefined} base\x0d\n * @returns {URL}\x0d\n */\x0d\nfunction legacyMainResolve(packageJSONUrl\x2C packageConfig\x2C base) {\x0d\n  let guess;\x0d\n  if (packageConfig.main !== undefined) {\x0d\n    // Note: fs check redundances will be handled by Descriptor cache here.\x0d\n    if (fileExists(guess = new URL(`./${packageConfig.main}`\x2C\x0d\n                                   packageJSONUrl))) {\x0d\n      return guess;\x0d\n    } else if (fileExists(guess = new URL(`./${packageConfig.main}.js`\x2C\x0d\n                                          packageJSONUrl)));\x0d\n    else if (fileExists(guess = new URL(`./${packageConfig.main}.json`\x2C\x0d\n                                        packageJSONUrl)));\x0d\n    else if (fileExists(guess = new URL(`./${packageConfig.main}.node`\x2C\x0d\n                                        packageJSONUrl)));\x0d\n    else if (fileExists(guess = new URL(`./${packageConfig.main}/index.js`\x2C\x0d\n                                        packageJSONUrl)));\x0d\n    else if (fileExists(guess = new URL(`./${packageConfig.main}/index.json`\x2C\x0d\n                                        packageJSONUrl)));\x0d\n    else if (fileExists(guess = new URL(`./${packageConfig.main}/index.node`\x2C\x0d\n                                        packageJSONUrl)));\x0d\n    else guess = undefined;\x0d\n    if (guess) {\x0d\n      emitLegacyIndexDeprecation(guess\x2C packageJSONUrl\x2C base\x2C\x0d\n                                 packageConfig.main);\x0d\n      return guess;\x0d\n    }\x0d\n    // Fallthrough.\x0d\n  }\x0d\n  if (fileExists(guess = new URL('./index.js'\x2C packageJSONUrl)));\x0d\n  // So fs.\x0d\n  else if (fileExists(guess = new URL('./index.json'\x2C packageJSONUrl)));\x0d\n  else if (fileExists(guess = new URL('./index.node'\x2C packageJSONUrl)));\x0d\n  else guess = undefined;\x0d\n  if (guess) {\x0d\n    emitLegacyIndexDeprecation(guess\x2C packageJSONUrl\x2C base\x2C packageConfig.main);\x0d\n    return guess;\x0d\n  }\x0d\n  // Not found.\x0d\n  throw new ERR_MODULE_NOT_FOUND(\x0d\n    fileURLToPath(new URL('.'\x2C packageJSONUrl))\x2C fileURLToPath(base));\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {URL} search\x0d\n * @returns {URL | undefined}\x0d\n */\x0d\nfunction resolveExtensionsWithTryExactName(search) {\x0d\n  if (fileExists(search)) return search;\x0d\n  return resolveExtensions(search);\x0d\n}\x0d\n\x0d\nconst extensions = ['.js'\x2C '.json'\x2C '.node'\x2C '.mjs'];\x0d\n\x0d\n/**\x0d\n * @param {URL} search\x0d\n * @returns {URL | undefined}\x0d\n */\x0d\nfunction resolveExtensions(search) {\x0d\n  for (let i = 0; i < extensions.length; i++) {\x0d\n    const extension = extensions[i];\x0d\n    const guess = new URL(`${search.pathname}${extension}`\x2C search);\x0d\n    if (fileExists(guess)) return guess;\x0d\n  }\x0d\n  return undefined;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {URL} search\x0d\n * @returns {URL | undefined}\x0d\n */\x0d\nfunction resolveDirectoryEntry(search) {\x0d\n  const dirPath = fileURLToPath(search);\x0d\n  const pkgJsonPath = resolve(dirPath\x2C 'package.json');\x0d\n  if (fileExists(pkgJsonPath)) {\x0d\n    const pkgJson = packageJsonReader.read(pkgJsonPath);\x0d\n    if (pkgJson.containsKeys) {\x0d\n      const { main } = JSONParse(pkgJson.string);\x0d\n      if (main != null) {\x0d\n        const mainUrl = pathToFileURL(resolve(dirPath\x2C main));\x0d\n        return resolveExtensionsWithTryExactName(mainUrl);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n  return resolveExtensions(new URL('index'\x2C search));\x0d\n}\x0d\n\x0d\nconst encodedSepRegEx = /%2F|%5C/i;\x0d\n/**\x0d\n * @param {URL} resolved\x0d\n * @param {string | URL | undefined} base\x0d\n * @param {boolean} preserveSymlinks\x0d\n * @returns {URL | undefined}\x0d\n */\x0d\nfunction finalizeResolution(resolved\x2C base\x2C preserveSymlinks) {\x0d\n  if (RegExpPrototypeTest(encodedSepRegEx\x2C resolved.pathname))\x0d\n    throw new ERR_INVALID_MODULE_SPECIFIER(\x0d\n      resolved.pathname\x2C 'must not include encoded "/" or "\\\\" characters'\x2C\x0d\n      fileURLToPath(base));\x0d\n\x0d\n  const path = fileURLToPath(resolved);\x0d\n  if (getOptionValue('--experimental-specifier-resolution') === 'node') {\x0d\n    let file = resolveExtensionsWithTryExactName(resolved);\x0d\n    if (file !== undefined) return file;\x0d\n    if (!StringPrototypeEndsWith(path\x2C '/')) {\x0d\n      file = resolveDirectoryEntry(new URL(`${resolved}/`));\x0d\n      if (file !== undefined) return file;\x0d\n    } else {\x0d\n      return resolveDirectoryEntry(resolved) || resolved;\x0d\n    }\x0d\n    throw new ERR_MODULE_NOT_FOUND(\x0d\n      resolved.pathname\x2C fileURLToPath(base)\x2C 'module');\x0d\n  }\x0d\n\x0d\n  const stats = tryStatSync(StringPrototypeEndsWith(path\x2C '/') ?\x0d\n    StringPrototypeSlice(path\x2C -1) : path);\x0d\n  if (stats.isDirectory()) {\x0d\n    const err = new ERR_UNSUPPORTED_DIR_IMPORT(path\x2C fileURLToPath(base));\x0d\n    err.url = String(resolved);\x0d\n    throw err;\x0d\n  } else if (!stats.isFile()) {\x0d\n    throw new ERR_MODULE_NOT_FOUND(\x0d\n      path || resolved.pathname\x2C base && fileURLToPath(base)\x2C 'module');\x0d\n  }\x0d\n\x0d\n  if (!preserveSymlinks) {\x0d\n    const real = realpathSync(path\x2C {\x0d\n      [internalFS.realpathCacheKey]: realpathCache\x0d\n    });\x0d\n    const { search\x2C hash } = resolved;\x0d\n    resolved =\x0d\n        pathToFileURL(real + (StringPrototypeEndsWith(path\x2C sep) ? '/' : ''));\x0d\n    resolved.search = search;\x0d\n    resolved.hash = hash;\x0d\n  }\x0d\n\x0d\n  return resolved;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} specifier\x0d\n * @param {URL} packageJSONUrl\x0d\n * @param {string | URL | undefined} base\x0d\n */\x0d\nfunction throwImportNotDefined(specifier\x2C packageJSONUrl\x2C base) {\x0d\n  throw new ERR_PACKAGE_IMPORT_NOT_DEFINED(\x0d\n    specifier\x2C packageJSONUrl && fileURLToPath(new URL('.'\x2C packageJSONUrl))\x2C\x0d\n    fileURLToPath(base));\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} subpath\x0d\n * @param {URL} packageJSONUrl\x0d\n * @param {string | URL | undefined} base\x0d\n */\x0d\nfunction throwExportsNotFound(subpath\x2C packageJSONUrl\x2C base) {\x0d\n  throw new ERR_PACKAGE_PATH_NOT_EXPORTED(\x0d\n    fileURLToPath(new URL('.'\x2C packageJSONUrl))\x2C subpath\x2C\x0d\n    base && fileURLToPath(base));\x0d\n}\x0d\n\x0d\n/**\x0d\n *\x0d\n * @param {string | URL} subpath\x0d\n * @param {URL} packageJSONUrl\x0d\n * @param {boolean} internal\x0d\n * @param {string | URL | undefined} base\x0d\n */\x0d\nfunction throwInvalidSubpath(subpath\x2C packageJSONUrl\x2C internal\x2C base) {\x0d\n  const reason = `request is not a valid subpath for the "${internal ?\x0d\n    'imports' : 'exports'}" resolution of ${fileURLToPath(packageJSONUrl)}`;\x0d\n  throw new ERR_INVALID_MODULE_SPECIFIER(subpath\x2C reason\x2C\x0d\n                                         base && fileURLToPath(base));\x0d\n}\x0d\n\x0d\nfunction throwInvalidPackageTarget(\x0d\n  subpath\x2C target\x2C packageJSONUrl\x2C internal\x2C base) {\x0d\n  if (typeof target === 'object' && target !== null) {\x0d\n    target = JSONStringify(target\x2C null\x2C '');\x0d\n  } else {\x0d\n    target = `${target}`;\x0d\n  }\x0d\n  throw new ERR_INVALID_PACKAGE_TARGET(\x0d\n    fileURLToPath(new URL('.'\x2C packageJSONUrl))\x2C subpath\x2C target\x2C\x0d\n    internal\x2C base && fileURLToPath(base));\x0d\n}\x0d\n\x0d\nconst invalidSegmentRegEx = /(^|\\\\|\\/)((\\.|%2e)(\\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\\\|\\/|$)/i;\x0d\nconst invalidPackageNameRegEx = /^\\.|%|\\\\/;\x0d\nconst patternRegEx = /\\*/g;\x0d\n\x0d\nfunction resolvePackageTargetString(\x0d\n  target\x2C subpath\x2C match\x2C packageJSONUrl\x2C base\x2C pattern\x2C internal\x2C conditions) {\x0d\n\x0d\n  if (subpath !== '' && !pattern && target[target.length - 1] !== '/')\x0d\n    throwInvalidPackageTarget(match\x2C target\x2C packageJSONUrl\x2C internal\x2C base);\x0d\n\x0d\n  if (!StringPrototypeStartsWith(target\x2C './')) {\x0d\n    if (internal && !StringPrototypeStartsWith(target\x2C '../') &&\x0d\n        !StringPrototypeStartsWith(target\x2C '/')) {\x0d\n      let isURL = false;\x0d\n      try {\x0d\n        new URL(target);\x0d\n        isURL = true;\x0d\n      } catch {\x0d\n        // Continue regardless of error.\x0d\n      }\x0d\n      if (!isURL) {\x0d\n        const exportTarget = pattern ?\x0d\n          RegExpPrototypeSymbolReplace(patternRegEx\x2C target\x2C () => subpath) :\x0d\n          target + subpath;\x0d\n        return packageResolve(\x0d\n          exportTarget\x2C packageJSONUrl\x2C conditions);\x0d\n      }\x0d\n    }\x0d\n    throwInvalidPackageTarget(match\x2C target\x2C packageJSONUrl\x2C internal\x2C base);\x0d\n  }\x0d\n\x0d\n  if (RegExpPrototypeTest(invalidSegmentRegEx\x2C StringPrototypeSlice(target\x2C 2)))\x0d\n    throwInvalidPackageTarget(match\x2C target\x2C packageJSONUrl\x2C internal\x2C base);\x0d\n\x0d\n  const resolved = new URL(target\x2C packageJSONUrl);\x0d\n  const resolvedPath = resolved.pathname;\x0d\n  const packagePath = new URL('.'\x2C packageJSONUrl).pathname;\x0d\n\x0d\n  if (!StringPrototypeStartsWith(resolvedPath\x2C packagePath))\x0d\n    throwInvalidPackageTarget(match\x2C target\x2C packageJSONUrl\x2C internal\x2C base);\x0d\n\x0d\n  if (subpath === '') return resolved;\x0d\n\x0d\n  if (RegExpPrototypeTest(invalidSegmentRegEx\x2C subpath))\x0d\n    throwInvalidSubpath(match + subpath\x2C packageJSONUrl\x2C internal\x2C base);\x0d\n\x0d\n  if (pattern) {\x0d\n    return new URL(\x0d\n      RegExpPrototypeSymbolReplace(\x0d\n        patternRegEx\x2C\x0d\n        resolved.href\x2C\x0d\n        () => subpath\x0d\n      )\x0d\n    );\x0d\n  }\x0d\n\x0d\n  return new URL(subpath\x2C resolved);\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} key\x0d\n * @returns {boolean}\x0d\n */\x0d\nfunction isArrayIndex(key) {\x0d\n  const keyNum = +key;\x0d\n  if (`${keyNum}` !== key) return false;\x0d\n  return keyNum >= 0 && keyNum < 0xFFFF_FFFF;\x0d\n}\x0d\n\x0d\nfunction resolvePackageTarget(packageJSONUrl\x2C target\x2C subpath\x2C packageSubpath\x2C\x0d\n                              base\x2C pattern\x2C internal\x2C conditions) {\x0d\n  if (typeof target === 'string') {\x0d\n    return resolvePackageTargetString(\x0d\n      target\x2C subpath\x2C packageSubpath\x2C packageJSONUrl\x2C base\x2C pattern\x2C internal\x2C\x0d\n      conditions);\x0d\n  } else if (ArrayIsArray(target)) {\x0d\n    if (target.length === 0)\x0d\n      return null;\x0d\n\x0d\n    let lastException;\x0d\n    for (let i = 0; i < target.length; i++) {\x0d\n      const targetItem = target[i];\x0d\n      let resolveResult;\x0d\n      try {\x0d\n        resolveResult = resolvePackageTarget(\x0d\n          packageJSONUrl\x2C targetItem\x2C subpath\x2C packageSubpath\x2C base\x2C pattern\x2C\x0d\n          internal\x2C conditions);\x0d\n      } catch (e) {\x0d\n        lastException = e;\x0d\n        if (e.code === 'ERR_INVALID_PACKAGE_TARGET')\x0d\n          continue;\x0d\n        throw e;\x0d\n      }\x0d\n      if (resolveResult === undefined)\x0d\n        continue;\x0d\n      if (resolveResult === null) {\x0d\n        lastException = null;\x0d\n        continue;\x0d\n      }\x0d\n      return resolveResult;\x0d\n    }\x0d\n    if (lastException === undefined || lastException === null)\x0d\n      return lastException;\x0d\n    throw lastException;\x0d\n  } else if (typeof target === 'object' && target !== null) {\x0d\n    const keys = ObjectGetOwnPropertyNames(target);\x0d\n    for (let i = 0; i < keys.length; i++) {\x0d\n      const key = keys[i];\x0d\n      if (isArrayIndex(key)) {\x0d\n        throw new ERR_INVALID_PACKAGE_CONFIG(\x0d\n          fileURLToPath(packageJSONUrl)\x2C base\x2C\x0d\n          '"exports" cannot contain numeric property keys.');\x0d\n      }\x0d\n    }\x0d\n    for (let i = 0; i < keys.length; i++) {\x0d\n      const key = keys[i];\x0d\n      if (key === 'default' || conditions.has(key)) {\x0d\n        const conditionalTarget = target[key];\x0d\n        const resolveResult = resolvePackageTarget(\x0d\n          packageJSONUrl\x2C conditionalTarget\x2C subpath\x2C packageSubpath\x2C base\x2C\x0d\n          pattern\x2C internal\x2C conditions);\x0d\n        if (resolveResult === undefined)\x0d\n          continue;\x0d\n        return resolveResult;\x0d\n      }\x0d\n    }\x0d\n    return undefined;\x0d\n  } else if (target === null) {\x0d\n    return null;\x0d\n  }\x0d\n  throwInvalidPackageTarget(packageSubpath\x2C target\x2C packageJSONUrl\x2C internal\x2C\x0d\n                            base);\x0d\n}\x0d\n\x0d\n/**\x0d\n *\x0d\n * @param {Exports} exports\x0d\n * @param {URL} packageJSONUrl\x0d\n * @param {string | URL | undefined} base\x0d\n * @returns {boolean}\x0d\n */\x0d\nfunction isConditionalExportsMainSugar(exports\x2C packageJSONUrl\x2C base) {\x0d\n  if (typeof exports === 'string' || ArrayIsArray(exports)) return true;\x0d\n  if (typeof exports !== 'object' || exports === null) return false;\x0d\n\x0d\n  const keys = ObjectGetOwnPropertyNames(exports);\x0d\n  let isConditionalSugar = false;\x0d\n  let i = 0;\x0d\n  for (let j = 0; j < keys.length; j++) {\x0d\n    const key = keys[j];\x0d\n    const curIsConditionalSugar = key === '' || key[0] !== '.';\x0d\n    if (i++ === 0) {\x0d\n      isConditionalSugar = curIsConditionalSugar;\x0d\n    } else if (isConditionalSugar !== curIsConditionalSugar) {\x0d\n      throw new ERR_INVALID_PACKAGE_CONFIG(\x0d\n        fileURLToPath(packageJSONUrl)\x2C base\x2C\x0d\n        '"exports" cannot contain some keys starting with \\'.\\' and some not.' +\x0d\n        ' The exports object must either be an object of package subpath keys' +\x0d\n        ' or an object of main entry condition name keys only.');\x0d\n    }\x0d\n  }\x0d\n  return isConditionalSugar;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {URL} packageJSONUrl\x0d\n * @param {string} packageSubpath\x0d\n * @param {PackageConfig} packageConfig\x0d\n * @param {string | URL | undefined} base\x0d\n * @param {Set<string>} conditions\x0d\n * @returns {URL}\x0d\n */\x0d\nfunction packageExportsResolve(\x0d\n  packageJSONUrl\x2C packageSubpath\x2C packageConfig\x2C base\x2C conditions) {\x0d\n  let exports = packageConfig.exports;\x0d\n  if (isConditionalExportsMainSugar(exports\x2C packageJSONUrl\x2C base))\x0d\n    exports = { '.': exports };\x0d\n\x0d\n  if (ObjectPrototypeHasOwnProperty(exports\x2C packageSubpath) &&\x0d\n      !StringPrototypeIncludes(packageSubpath\x2C '*') &&\x0d\n      !StringPrototypeEndsWith(packageSubpath\x2C '/')) {\x0d\n    const target = exports[packageSubpath];\x0d\n    const resolved = resolvePackageTarget(\x0d\n      packageJSONUrl\x2C target\x2C ''\x2C packageSubpath\x2C base\x2C false\x2C false\x2C conditions\x0d\n    );\x0d\n\x0d\n    if (resolved == null) {\x0d\n      throwExportsNotFound(packageSubpath\x2C packageJSONUrl\x2C base);\x0d\n    }\x0d\n\x0d\n    return { resolved\x2C exact: true };\x0d\n  }\x0d\n\x0d\n  let bestMatch = '';\x0d\n  let bestMatchSubpath;\x0d\n  const keys = ObjectGetOwnPropertyNames(exports);\x0d\n  for (let i = 0; i < keys.length; i++) {\x0d\n    const key = keys[i];\x0d\n    const patternIndex = StringPrototypeIndexOf(key\x2C '*');\x0d\n    if (patternIndex !== -1 &&\x0d\n        StringPrototypeStartsWith(packageSubpath\x2C\x0d\n                                  StringPrototypeSlice(key\x2C 0\x2C patternIndex))) {\x0d\n      if (StringPrototypeEndsWith(packageSubpath\x2C '/'))\x0d\n        emitTrailingSlashPatternDeprecation(packageSubpath\x2C packageJSONUrl\x2C\x0d\n                                            true\x2C base);\x0d\n      const patternTrailer = StringPrototypeSlice(key\x2C patternIndex + 1);\x0d\n      if (packageSubpath.length >= key.length &&\x0d\n          StringPrototypeEndsWith(packageSubpath\x2C patternTrailer) &&\x0d\n          patternKeyCompare(bestMatch\x2C key) === 1 &&\x0d\n          StringPrototypeLastIndexOf(key\x2C '*') === patternIndex) {\x0d\n        bestMatch = key;\x0d\n        bestMatchSubpath = StringPrototypeSlice(\x0d\n          packageSubpath\x2C patternIndex\x2C\x0d\n          packageSubpath.length - patternTrailer.length);\x0d\n      }\x0d\n    } else if (key[key.length - 1] === '/' &&\x0d\n      StringPrototypeStartsWith(packageSubpath\x2C key) &&\x0d\n      patternKeyCompare(bestMatch\x2C key) === 1) {\x0d\n      bestMatch = key;\x0d\n      bestMatchSubpath = StringPrototypeSlice(packageSubpath\x2C key.length);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (bestMatch) {\x0d\n    const target = exports[bestMatch];\x0d\n    const pattern = StringPrototypeIncludes(bestMatch\x2C '*');\x0d\n    const resolved = resolvePackageTarget(\x0d\n      packageJSONUrl\x2C\x0d\n      target\x2C\x0d\n      bestMatchSubpath\x2C\x0d\n      bestMatch\x2C\x0d\n      base\x2C\x0d\n      pattern\x2C\x0d\n      false\x2C\x0d\n      conditions);\x0d\n\x0d\n    if (resolved == null) {\x0d\n      throwExportsNotFound(packageSubpath\x2C packageJSONUrl\x2C base);\x0d\n    }\x0d\n\x0d\n    if (!pattern) {\x0d\n      emitFolderMapDeprecation(bestMatch\x2C packageJSONUrl\x2C true\x2C base);\x0d\n    }\x0d\n\x0d\n    return { resolved\x2C exact: pattern };\x0d\n  }\x0d\n\x0d\n  throwExportsNotFound(packageSubpath\x2C packageJSONUrl\x2C base);\x0d\n}\x0d\n\x0d\nfunction patternKeyCompare(a\x2C b) {\x0d\n  const aPatternIndex = StringPrototypeIndexOf(a\x2C '*');\x0d\n  const bPatternIndex = StringPrototypeIndexOf(b\x2C '*');\x0d\n  const baseLenA = aPatternIndex === -1 ? a.length : aPatternIndex + 1;\x0d\n  const baseLenB = bPatternIndex === -1 ? b.length : bPatternIndex + 1;\x0d\n  if (baseLenA > baseLenB) return -1;\x0d\n  if (baseLenB > baseLenA) return 1;\x0d\n  if (aPatternIndex === -1) return 1;\x0d\n  if (bPatternIndex === -1) return -1;\x0d\n  if (a.length > b.length) return -1;\x0d\n  if (b.length > a.length) return 1;\x0d\n  return 0;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} name\x0d\n * @param {string | URL | undefined} base\x0d\n * @param {Set<string>} conditions\x0d\n * @returns {URL}\x0d\n */\x0d\nfunction packageImportsResolve(name\x2C base\x2C conditions) {\x0d\n  if (name === '#' || StringPrototypeStartsWith(name\x2C '#/')) {\x0d\n    const reason = 'is not a valid internal imports specifier name';\x0d\n    throw new ERR_INVALID_MODULE_SPECIFIER(name\x2C reason\x2C fileURLToPath(base));\x0d\n  }\x0d\n  let packageJSONUrl;\x0d\n  const packageConfig = getPackageScopeConfig(base);\x0d\n  if (packageConfig.exists) {\x0d\n    packageJSONUrl = pathToFileURL(packageConfig.pjsonPath);\x0d\n    const imports = packageConfig.imports;\x0d\n    if (imports) {\x0d\n      if (ObjectPrototypeHasOwnProperty(imports\x2C name) &&\x0d\n          !StringPrototypeIncludes(name\x2C '*') &&\x0d\n          !StringPrototypeEndsWith(name\x2C '/')) {\x0d\n        const resolved = resolvePackageTarget(\x0d\n          packageJSONUrl\x2C imports[name]\x2C ''\x2C name\x2C base\x2C false\x2C true\x2C conditions\x0d\n        );\x0d\n        if (resolved != null) {\x0d\n          return { resolved\x2C exact: true };\x0d\n        }\x0d\n      } else {\x0d\n        let bestMatch = '';\x0d\n        let bestMatchSubpath;\x0d\n        const keys = ObjectGetOwnPropertyNames(imports);\x0d\n        for (let i = 0; i < keys.length; i++) {\x0d\n          const key = keys[i];\x0d\n          const patternIndex = StringPrototypeIndexOf(key\x2C '*');\x0d\n          if (patternIndex !== -1 &&\x0d\n              StringPrototypeStartsWith(name\x2C\x0d\n                                        StringPrototypeSlice(key\x2C 0\x2C\x0d\n                                                             patternIndex))) {\x0d\n            const patternTrailer = StringPrototypeSlice(key\x2C patternIndex + 1);\x0d\n            if (name.length >= key.length &&\x0d\n                StringPrototypeEndsWith(name\x2C patternTrailer) &&\x0d\n                patternKeyCompare(bestMatch\x2C key) === 1 &&\x0d\n                StringPrototypeLastIndexOf(key\x2C '*') === patternIndex) {\x0d\n              bestMatch = key;\x0d\n              bestMatchSubpath = StringPrototypeSlice(\x0d\n                name\x2C patternIndex\x2C name.length - patternTrailer.length);\x0d\n            }\x0d\n          } else if (key[key.length - 1] === '/' &&\x0d\n            StringPrototypeStartsWith(name\x2C key) &&\x0d\n            patternKeyCompare(bestMatch\x2C key) === 1) {\x0d\n            bestMatch = key;\x0d\n            bestMatchSubpath = StringPrototypeSlice(name\x2C key.length);\x0d\n          }\x0d\n        }\x0d\n\x0d\n        if (bestMatch) {\x0d\n          const target = imports[bestMatch];\x0d\n          const pattern = StringPrototypeIncludes(bestMatch\x2C '*');\x0d\n          const resolved = resolvePackageTarget(\x0d\n            packageJSONUrl\x2C target\x2C\x0d\n            bestMatchSubpath\x2C bestMatch\x2C\x0d\n            base\x2C pattern\x2C true\x2C\x0d\n            conditions);\x0d\n          if (resolved !== null) {\x0d\n            if (!pattern)\x0d\n              emitFolderMapDeprecation(bestMatch\x2C packageJSONUrl\x2C false\x2C base);\x0d\n            return { resolved\x2C exact: pattern };\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n  throwImportNotDefined(name\x2C packageJSONUrl\x2C base);\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {URL} url\x0d\n * @returns {PackageType}\x0d\n */\x0d\nfunction getPackageType(url) {\x0d\n  const packageConfig = getPackageScopeConfig(url);\x0d\n  return packageConfig.type;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} specifier\x0d\n * @param {string | URL | undefined} base\x0d\n * @returns {{ packageName: string\x2C packageSubpath: string\x2C isScoped: boolean }}\x0d\n */\x0d\nfunction parsePackageName(specifier\x2C base) {\x0d\n  let separatorIndex = StringPrototypeIndexOf(specifier\x2C '/');\x0d\n  let validPackageName = true;\x0d\n  let isScoped = false;\x0d\n  if (specifier[0] === '@') {\x0d\n    isScoped = true;\x0d\n    if (separatorIndex === -1 || specifier.length === 0) {\x0d\n      validPackageName = false;\x0d\n    } else {\x0d\n      separatorIndex = StringPrototypeIndexOf(\x0d\n        specifier\x2C '/'\x2C separatorIndex + 1);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  const packageName = separatorIndex === -1 ?\x0d\n    specifier : StringPrototypeSlice(specifier\x2C 0\x2C separatorIndex);\x0d\n\x0d\n  // Package name cannot have leading . and cannot have percent-encoding or\x0d\n  // \\\\ separators.\x0d\n  if (RegExpPrototypeExec(invalidPackageNameRegEx\x2C packageName) !== null)\x0d\n    validPackageName = false;\x0d\n\x0d\n  if (!validPackageName) {\x0d\n    throw new ERR_INVALID_MODULE_SPECIFIER(\x0d\n      specifier\x2C 'is not a valid package name'\x2C fileURLToPath(base));\x0d\n  }\x0d\n\x0d\n  const packageSubpath = '.' + (separatorIndex === -1 ? '' :\x0d\n    StringPrototypeSlice(specifier\x2C separatorIndex));\x0d\n\x0d\n  return { packageName\x2C packageSubpath\x2C isScoped };\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} specifier\x0d\n * @param {string | URL | undefined} base\x0d\n * @param {Set<string>} conditions\x0d\n * @returns {URL}\x0d\n */\x0d\nfunction packageResolve(specifier\x2C base\x2C conditions) {\x0d\n  if (NativeModule.canBeRequiredByUsers(specifier))\x0d\n    return new URL('node:' + specifier);\x0d\n\x0d\n  const { packageName\x2C packageSubpath\x2C isScoped } =\x0d\n    parsePackageName(specifier\x2C base);\x0d\n\x0d\n  // ResolveSelf\x0d\n  const packageConfig = getPackageScopeConfig(base);\x0d\n  if (packageConfig.exists) {\x0d\n    const packageJSONUrl = pathToFileURL(packageConfig.pjsonPath);\x0d\n    if (packageConfig.name === packageName &&\x0d\n        packageConfig.exports !== undefined && packageConfig.exports !== null) {\x0d\n      return packageExportsResolve(\x0d\n        packageJSONUrl\x2C packageSubpath\x2C packageConfig\x2C base\x2C conditions\x0d\n      ).resolved;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  let packageJSONUrl =\x0d\n    new URL('./node_modules/' + packageName + '/package.json'\x2C base);\x0d\n  let packageJSONPath = fileURLToPath(packageJSONUrl);\x0d\n  let lastPath;\x0d\n  do {\x0d\n    const stat = tryStatSync(StringPrototypeSlice(packageJSONPath\x2C 0\x2C\x0d\n                                                  packageJSONPath.length - 13));\x0d\n    if (!stat.isDirectory()) {\x0d\n      lastPath = packageJSONPath;\x0d\n      packageJSONUrl = new URL((isScoped ?\x0d\n        '../../../../node_modules/' : '../../../node_modules/') +\x0d\n        packageName + '/package.json'\x2C packageJSONUrl);\x0d\n      packageJSONPath = fileURLToPath(packageJSONUrl);\x0d\n      continue;\x0d\n    }\x0d\n\x0d\n    // Package match.\x0d\n    const packageConfig = getPackageConfig(packageJSONPath\x2C specifier\x2C base);\x0d\n    if (packageConfig.exports !== undefined && packageConfig.exports !== null) {\x0d\n      return packageExportsResolve(\x0d\n        packageJSONUrl\x2C packageSubpath\x2C packageConfig\x2C base\x2C conditions\x0d\n      ).resolved;\x0d\n    }\x0d\n\x0d\n    if (packageSubpath === '.') {\x0d\n      return legacyMainResolve(\x0d\n        packageJSONUrl\x2C\x0d\n        packageConfig\x2C\x0d\n        base\x0d\n      );\x0d\n    }\x0d\n\x0d\n    return new URL(packageSubpath\x2C packageJSONUrl);\x0d\n    // Cross-platform root check.\x0d\n  } while (packageJSONPath.length !== lastPath.length);\x0d\n\x0d\n  // eslint can't handle the above code.\x0d\n  // eslint-disable-next-line no-unreachable\x0d\n  throw new ERR_MODULE_NOT_FOUND(packageName\x2C fileURLToPath(base));\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} specifier\x0d\n * @returns {boolean}\x0d\n */\x0d\nfunction isBareSpecifier(specifier) {\x0d\n  return specifier[0] && specifier[0] !== '/' && specifier[0] !== '.';\x0d\n}\x0d\n\x0d\nfunction isRelativeSpecifier(specifier) {\x0d\n  if (specifier[0] === '.') {\x0d\n    if (specifier.length === 1 || specifier[1] === '/') return true;\x0d\n    if (specifier[1] === '.') {\x0d\n      if (specifier.length === 2 || specifier[2] === '/') return true;\x0d\n    }\x0d\n  }\x0d\n  return false;\x0d\n}\x0d\n\x0d\nfunction shouldBeTreatedAsRelativeOrAbsolutePath(specifier) {\x0d\n  if (specifier === '') return false;\x0d\n  if (specifier[0] === '/') return true;\x0d\n  return isRelativeSpecifier(specifier);\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} specifier\x0d\n * @param {string | URL | undefined} base\x0d\n * @param {Set<string>} conditions\x0d\n * @param {boolean} preserveSymlinks\x0d\n * @returns {URL}\x0d\n */\x0d\nfunction moduleResolve(specifier\x2C base\x2C conditions\x2C preserveSymlinks) {\x0d\n  // Order swapped from spec for minor perf gain.\x0d\n  // Ok since relative URLs cannot parse as URLs.\x0d\n  let resolved;\x0d\n  if (shouldBeTreatedAsRelativeOrAbsolutePath(specifier)) {\x0d\n    resolved = new URL(specifier\x2C base);\x0d\n  } else if (specifier[0] === '#') {\x0d\n    ({ resolved } = packageImportsResolve(specifier\x2C base\x2C conditions));\x0d\n  } else {\x0d\n    try {\x0d\n      resolved = new URL(specifier);\x0d\n    } catch {\x0d\n      resolved = packageResolve(specifier\x2C base\x2C conditions);\x0d\n    }\x0d\n  }\x0d\n  if (resolved.protocol !== 'file:')\x0d\n    return resolved;\x0d\n  return finalizeResolution(resolved\x2C base\x2C preserveSymlinks);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Try to resolve an import as a CommonJS module\x0d\n * @param {string} specifier\x0d\n * @param {string} parentURL\x0d\n * @returns {boolean|string}\x0d\n */\x0d\nfunction resolveAsCommonJS(specifier\x2C parentURL) {\x0d\n  try {\x0d\n    const parent = fileURLToPath(parentURL);\x0d\n    const tmpModule = new CJSModule(parent\x2C null);\x0d\n    tmpModule.paths = CJSModule._nodeModulePaths(parent);\x0d\n\x0d\n    let found = CJSModule._resolveFilename(specifier\x2C tmpModule\x2C false);\x0d\n\x0d\n    // If it is a relative specifier return the relative path\x0d\n    // to the parent\x0d\n    if (isRelativeSpecifier(specifier)) {\x0d\n      found = relative(parent\x2C found);\x0d\n      // Add '.separator if the path does not start with '..separator'\x0d\n      // This should be a safe assumption because when loading\x0d\n      // esm modules there should be always a file specified so\x0d\n      // there should not be a specifier like '..' or '.'\x0d\n      if (!StringPrototypeStartsWith(found\x2C `..${sep}`)) {\x0d\n        found = `.${sep}${found}`;\x0d\n      }\x0d\n    } else if (isBareSpecifier(specifier)) {\x0d\n      // If it is a bare specifier return the relative path within the\x0d\n      // module\x0d\n      const pkg = StringPrototypeSplit(specifier\x2C '/')[0];\x0d\n      const index = StringPrototypeIndexOf(found\x2C pkg);\x0d\n      if (index !== -1) {\x0d\n        found = StringPrototypeSlice(found\x2C index);\x0d\n      }\x0d\n    }\x0d\n    // Normalize the path separator to give a valid suggestion\x0d\n    // on Windows\x0d\n    if (process.platform === 'win32') {\x0d\n      found = RegExpPrototypeSymbolReplace(new RegExp(`\\\\${sep}`\x2C 'g')\x2C\x0d\n                                           found\x2C '/');\x0d\n    }\x0d\n    return found;\x0d\n  } catch {\x0d\n    return false;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction throwIfUnsupportedURLProtocol(url) {\x0d\n  if (url.protocol !== 'file:' && url.protocol !== 'data:' &&\x0d\n      url.protocol !== 'node:') {\x0d\n    throw new ERR_UNSUPPORTED_ESM_URL_SCHEME(url);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction defaultResolve(specifier\x2C context = {}\x2C defaultResolveUnused) {\x0d\n  let { parentURL\x2C conditions } = context;\x0d\n  if (parentURL && policy?.manifest) {\x0d\n    const redirects = policy.manifest.getDependencyMapper(parentURL);\x0d\n    if (redirects) {\x0d\n      const { resolve\x2C reaction } = redirects;\x0d\n      const destination = resolve(specifier\x2C new SafeSet(conditions));\x0d\n      let missing = true;\x0d\n      if (destination === true) {\x0d\n        missing = false;\x0d\n      } else if (destination) {\x0d\n        const href = destination.href;\x0d\n        return { url: href };\x0d\n      }\x0d\n      if (missing) {\x0d\n        reaction(new ERR_MANIFEST_DEPENDENCY_MISSING(\x0d\n          parentURL\x2C\x0d\n          specifier\x2C\x0d\n          ArrayPrototypeJoin([...conditions]\x2C '\x2C '))\x0d\n        );\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  const isMain = parentURL === undefined;\x0d\n  if (isMain) {\x0d\n    parentURL = pathToFileURL(`${process.cwd()}/`).href;\x0d\n\x0d\n    // This is the initial entry point to the program\x2C and --input-type has\x0d\n    // been passed as an option; but --input-type can only be used with\x0d\n    // --eval\x2C --print or STDIN string input. It is not allowed with file\x0d\n    // input\x2C to avoid user confusion over how expansive the effect of the\x0d\n    // flag should be (i.e. entry point only\x2C package scope surrounding the\x0d\n    // entry point\x2C etc.).\x0d\n    if (typeFlag)\x0d\n      throw new ERR_INPUT_TYPE_NOT_ALLOWED();\x0d\n  }\x0d\n\x0d\n  conditions = getConditionsSet(conditions);\x0d\n  let url;\x0d\n  try {\x0d\n    url = moduleResolve(specifier\x2C parentURL\x2C conditions\x2C\x0d\n                        isMain ? preserveSymlinksMain : preserveSymlinks);\x0d\n  } catch (error) {\x0d\n    // Try to give the user a hint of what would have been the\x0d\n    // resolved CommonJS module\x0d\n    if (error.code === 'ERR_MODULE_NOT_FOUND' ||\x0d\n        error.code === 'ERR_UNSUPPORTED_DIR_IMPORT') {\x0d\n      if (StringPrototypeStartsWith(specifier\x2C 'file://')) {\x0d\n        specifier = fileURLToPath(specifier);\x0d\n      }\x0d\n      const found = resolveAsCommonJS(specifier\x2C parentURL);\x0d\n      if (found) {\x0d\n        // Modify the stack and message string to include the hint\x0d\n        const lines = StringPrototypeSplit(error.stack\x2C '\\n');\x0d\n        const hint = `Did you mean to import ${found}?`;\x0d\n        error.stack =\x0d\n          ArrayPrototypeShift(lines) + '\\n' +\x0d\n          hint + '\\n' +\x0d\n          ArrayPrototypeJoin(lines\x2C '\\n');\x0d\n        error.message += `\\n${hint}`;\x0d\n      }\x0d\n    }\x0d\n    throw error;\x0d\n  }\x0d\n\x0d\n  throwIfUnsupportedURLProtocol(url);\x0d\n\x0d\n  return {\x0d\n    url: `${url}`\x2C\x0d\n    format: defaultGetFormatWithoutErrors(url)\x2C\x0d\n  };\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  DEFAULT_CONDITIONS\x2C\x0d\n  defaultResolve\x2C\x0d\n  encodedSepRegEx\x2C\x0d\n  getPackageScopeConfig\x2C\x0d\n  getPackageType\x2C\x0d\n  packageExportsResolve\x2C\x0d\n  packageImportsResolve\x0d\n};\x0d\n\x0d\n// cycle\x0d\nconst {\x0d\n  defaultGetFormatWithoutErrors\x2C\x0d\n} = require('internal/modules/esm/get_format');\x0d\n
code-source-info,0x39aa286693e,118,0,37756,C0O0C4O37756,,
code-creation,Function,10,368351,0x39aa2867946,1110, node:internal/modules/esm/resolve:1:1,0x39aa28668b8,~
code-source-info,0x39aa
code-creation,Eval,10,369110,0x39aa286ad56,5, node:internal/modules/esm/get_format:1:1,0x39aa286ab10,~
script-source,119,node:internal/modules/esm/get_format,'use strict';\x0d\nconst {\x0d\n  ObjectAssign\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n} = primordials;\x0d\nconst { extname } = require('path');\x0d\nconst { getOptionValue } = require('internal/options');\x0d\n\x0d\nconst experimentalJsonModules = getOptionValue('--experimental-json-modules');\x0d\nconst experimentalSpecifierResolution =\x0d\n  getOptionValue('--experimental-specifier-resolution');\x0d\nconst experimentalWasmModules = getOptionValue('--experimental-wasm-modules');\x0d\nconst { getPackageType } = require('internal/modules/esm/resolve');\x0d\nconst { URL\x2C fileURLToPath } = require('internal/url');\x0d\nconst { ERR_UNKNOWN_FILE_EXTENSION } = require('internal/errors').codes;\x0d\n\x0d\nconst extensionFormatMap = {\x0d\n  '__proto__': null\x2C\x0d\n  '.cjs': 'commonjs'\x2C\x0d\n  '.js': 'module'\x2C\x0d\n  '.mjs': 'module'\x0d\n};\x0d\n\x0d\nconst legacyExtensionFormatMap = {\x0d\n  '__proto__': null\x2C\x0d\n  '.cjs': 'commonjs'\x2C\x0d\n  '.js': 'commonjs'\x2C\x0d\n  '.json': 'commonjs'\x2C\x0d\n  '.mjs': 'module'\x2C\x0d\n  '.node': 'commonjs'\x0d\n};\x0d\n\x0d\nlet experimentalSpecifierResolutionWarned = false;\x0d\n\x0d\nif (experimentalWasmModules)\x0d\n  extensionFormatMap['.wasm'] = legacyExtensionFormatMap['.wasm'] = 'wasm';\x0d\n\x0d\nif (experimentalJsonModules)\x0d\n  extensionFormatMap['.json'] = legacyExtensionFormatMap['.json'] = 'json';\x0d\n\x0d\nconst protocolHandlers = ObjectAssign(ObjectCreate(null)\x2C {\x0d\n  'data:'(parsed) {\x0d\n    const { 1: mime } = RegExpPrototypeExec(\x0d\n      /^([^/]+\\/[^;\x2C]+)(?:[^\x2C]*?)(;base64)?\x2C/\x2C\x0d\n      parsed.pathname\x2C\x0d\n    ) || [\x2C null]; // eslint-disable-line no-sparse-arrays\x0d\n    const format = ({\x0d\n      '__proto__': null\x2C\x0d\n      'text/javascript': 'module'\x2C\x0d\n      'application/json': experimentalJsonModules ? 'json' : null\x2C\x0d\n      'application/wasm': experimentalWasmModules ? 'wasm' : null\x0d\n    })[mime] || null;\x0d\n\x0d\n    return format;\x0d\n  }\x2C\x0d\n  'file:': getFileProtocolModuleFormat\x2C\x0d\n  'node:'() { return 'builtin'; }\x2C\x0d\n});\x0d\n\x0d\nfunction getLegacyExtensionFormat(ext) {\x0d\n  if (\x0d\n    experimentalSpecifierResolution === 'node' &&\x0d\n    !experimentalSpecifierResolutionWarned\x0d\n  ) {\x0d\n    process.emitWarning(\x0d\n      'The Node.js specifier resolution in ESM is experimental.'\x2C\x0d\n      'ExperimentalWarning');\x0d\n    experimentalSpecifierResolutionWarned = true;\x0d\n  }\x0d\n  return legacyExtensionFormatMap[ext];\x0d\n}\x0d\n\x0d\nfunction getFileProtocolModuleFormat(url\x2C ignoreErrors) {\x0d\n  const ext = extname(url.pathname);\x0d\n  if (ext === '.js') {\x0d\n    return getPackageType(url) === 'module' ? 'module' : 'commonjs';\x0d\n  }\x0d\n\x0d\n  const format = extensionFormatMap[ext];\x0d\n  if (format) return format;\x0d\n  if (experimentalSpecifierResolution !== 'node') {\x0d\n    // Explicit undefined return indicates load hook should rerun format check\x0d\n    if (ignoreErrors)\x0d\n      return undefined;\x0d\n    throw new ERR_UNKNOWN_FILE_EXTENSION(ext\x2C fileURLToPath(url));\x0d\n  }\x0d\n  return getLegacyExtensionFormat(ext) ?? null;\x0d\n}\x0d\n\x0d\nfunction defaultGetFormatWithoutErrors(url\x2C context) {\x0d\n  const parsed = new URL(url);\x0d\n  if (!ObjectPrototypeHasOwnProperty(protocolHandlers\x2C parsed.protocol))\x0d\n    return null;\x0d\n  return protocolHandlers[parsed.protocol](parsed\x2C true);\x0d\n}\x0d\n\x0d\nfunction defaultGetFormat(url\x2C context) {\x0d\n  const parsed = new URL(url);\x0d\n  return ObjectPrototypeHasOwnProperty(protocolHandlers\x2C parsed.protocol) ?\x0d\n    protocolHandlers[parsed.protocol](parsed\x2C false) :\x0d\n    null;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  defaultGetFormat\x2C\x0d\n  defaultGetFormatWithoutErrors\x2C\x0d\n  extensionFormatMap\x2C\x0d\n  legacyExtensionFormatMap\x2C\x0d\n};\x0d\n
code-source-info,0x39aa286ad56,119,0,3433,C0O0C4O3433,,
code-creation,Function,10,369400,0x39aa286b24e,340, node:internal/modules/esm/get_format:1:1,0x39aa286acd0,~
code-source-info,0x39aa286b24e,119,0,3433,C0O0C72O26C77O43C82O60C88O94C94O154C97O154C102O142C108O199C111O199C116O180C121O263C124O263C128O263C130O354C133O354C137O354C139O442C142O442C146O442C148O517C151O517C156O498C162O590C165O590C170O567C176O572C182O655C185O655C190O681C195O624C201O719C205O719C207O846C211O846C213O1034C214O1034C216O1044C220O1076C229O1140C235O1104C239O1153C243O1185C252O1249C258O1213C262O1287C264O1300C274O1325C284O1804C288O1836C296O1287C301O1287C303O3302C310O3324C316O3345C322O3379C328O3402C334O3317C339O3432,,
code-creation,Eval,10,369698,0x39aa286bc56,5, node:internal/modules/esm/initialize_import_meta:1:1,0x39aa286bac0,~
script-source,120,node:internal/modules/esm/initialize_import_meta,'use strict';\x0d\n\x0d\nconst { getOptionValue } = require('internal/options');\x0d\nconst experimentalImportMetaResolve =\x0d\ngetOptionValue('--experimental-import-meta-resolve');\x0d\nconst { PromisePrototypeThen\x2C PromiseReject } = primordials;\x0d\nconst asyncESM = require('internal/process/esm_loader');\x0d\n\x0d\nfunction createImportMetaResolve(defaultParentUrl) {\x0d\n  return async function resolve(specifier\x2C parentUrl = defaultParentUrl) {\x0d\n    return PromisePrototypeThen(\x0d\n      asyncESM.esmLoader.resolve(specifier\x2C parentUrl)\x2C\x0d\n      ({ url }) => url\x2C\x0d\n      (error) => (\x0d\n        error.code === 'ERR_UNSUPPORTED_DIR_IMPORT' ?\x0d\n          error.url : PromiseReject(error))\x0d\n    );\x0d\n  };\x0d\n}\x0d\n\x0d\nfunction initializeImportMeta(meta\x2C context) {\x0d\n  const url = context.url;\x0d\n\x0d\n  // Alphabetical\x0d\n  if (experimentalImportMetaResolve)\x0d\n    meta.resolve = createImportMetaResolve(url);\x0d\n  meta.url = url;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  initializeImportMeta\x0d\n};\x0d\n
code-source-info,0x39aa286bc56,120,0,932,C0O0C4O932,,
code-creation,Function,10,369814,0x39aa286be1e,90, node:internal/modules/esm/initialize_import_meta:1:1,0x39aa286bbd0,~
code-source-info,0x39aa286be1e,120,0,932,C0O0C28O44C31O44C36O25C41O113C44O113C48O113C50O176C56O198C62O247C65O247C69O247C71O884C78O906C84O899C89O931,,
code-creation,Eval,10,369998,0x39aa286c2de,5, node:internal/modules/esm/load:1:1,0x39aa286c168,~
script-source,121,node:internal/modules/esm/load,'use strict';\x0d\n\x0d\nconst { defaultGetFormat } = require('internal/modules/esm/get_format');\x0d\nconst { defaultGetSource } = require('internal/modules/esm/get_source');\x0d\nconst { validateAssertions } = require('internal/modules/esm/assert');\x0d\n\x0d\n/**\x0d\n * Node.js default load hook.\x0d\n * @param {string} url\x0d\n * @param {object} context\x0d\n * @returns {object}\x0d\n */\x0d\nasync function defaultLoad(url\x2C context) {\x0d\n  let {\x0d\n    format\x2C\x0d\n    source\x2C\x0d\n  } = context;\x0d\n  const { importAssertions } = context;\x0d\n\x0d\n  if (format == null) {\x0d\n    format = defaultGetFormat(url);\x0d\n  }\x0d\n\x0d\n  validateAssertions(url\x2C format\x2C importAssertions);\x0d\n\x0d\n  if (\x0d\n    format === 'builtin' ||\x0d\n    format === 'commonjs'\x0d\n  ) {\x0d\n    source = null;\x0d\n  } else if (source == null) {\x0d\n    source = await defaultGetSource(url\x2C { format });\x0d\n  }\x0d\n\x0d\n  return {\x0d\n    format\x2C\x0d\n    source\x2C\x0d\n  };\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  defaultLoad\x2C\x0d\n};\x0d\n
code-source-info,0x39aa286c2de,121,0,891,C0O0C4O891,,
code-creation,Function,10,370116,0x39aa286c426,80, node:internal/modules/esm/load:1:1,0x39aa286c258,~
code-source-info,0x39aa286c426,121,0,891,C0O0C19O46C22O46C27O25C33O120C36O120C41O99C47O196C50O196C55O173C61O851C68O873C74O866C79O890,,
code-creation,Eval,10,370322,0x39aa286c9e6,5, node:internal/modules/esm/get_source:1:1,0x39aa286c810,~
script-source,122,node:internal/modules/esm/get_source,'use strict';\x0d\n\x0d\nconst {\x0d\n  RegExpPrototypeExec\x2C\x0d\n  decodeURIComponent\x2C\x0d\n} = primordials;\x0d\nconst { getOptionValue } = require('internal/options');\x0d\n// Do not eagerly grab .manifest\x2C it may be in TDZ\x0d\nconst policy = getOptionValue('--experimental-policy') ?\x0d\n  require('internal/process/policy') :\x0d\n  null;\x0d\n\x0d\nconst { Buffer } = require('buffer');\x0d\n\x0d\nconst fs = require('internal/fs/promises').exports;\x0d\nconst { URL } = require('internal/url');\x0d\nconst {\x0d\n  ERR_INVALID_URL\x2C\x0d\n  ERR_INVALID_URL_SCHEME\x2C\x0d\n} = require('internal/errors').codes;\x0d\nconst readFileAsync = fs.readFile;\x0d\n\x0d\nconst DATA_URL_PATTERN = /^[^/]+\\/[^\x2C;]+(?:[^\x2C]*?)(;base64)?\x2C([\\s\\S]*)$/;\x0d\n\x0d\nasync function defaultGetSource(url\x2C { format } = {}\x2C defaultGetSource) {\x0d\n  const parsed = new URL(url);\x0d\n  let source;\x0d\n  if (parsed.protocol === 'file:') {\x0d\n    source = await readFileAsync(parsed);\x0d\n  } else if (parsed.protocol === 'data:') {\x0d\n    const match = RegExpPrototypeExec(DATA_URL_PATTERN\x2C parsed.pathname);\x0d\n    if (!match) {\x0d\n      throw new ERR_INVALID_URL(url);\x0d\n    }\x0d\n    const { 1: base64\x2C 2: body } = match;\x0d\n    source = Buffer.from(decodeURIComponent(body)\x2C base64 ? 'base64' : 'utf8');\x0d\n  } else {\x0d\n    throw new ERR_INVALID_URL_SCHEME(['file'\x2C 'data']);\x0d\n  }\x0d\n  if (policy?.manifest) {\x0d\n    policy.manifest.assertIntegrity(parsed\x2C source);\x0d\n  }\x0d\n  return source;\x0d\n}\x0d\nexports.defaultGetSource = defaultGetSource;\x0d\n
code-source-info,0x39aa286c9e6,122,0,1394,C0O0C4O1394,,
code-creation,Function,10,370467,0x39aa286cb56,169, node:internal/modules/esm/get_source:1:1,0x39aa286c960,~
code-source-info,0x39aa286cb56,122,0,1394,C0O0C37O28C43O52C49O118C52O118C57O99C62O215C65O215C74O260C81O215C83O328C86O328C91O317C97O361C100O361C105O392C110O419C113O419C118O411C124O505C127O505C132O531C137O456C143O476C149O565C153O562C155O603C159O603C161O1348C163O1373C168O1393,,
tick,0x7ffe67f1609e,371209,1,0x7ff72402d620,2,0x7ff7249760e0,0x20b1dd43c1b,0x20b1dd43965,0x39aa286cbba,0x20b1dd43ce3,0x20b1dd43965,0x39aa286c44a,0x20b1dd43ce3,0x20b1dd43965,0x39aa285fafe,0x20b1dd43ce3,0x20b1dd43965,0x39aa285df04,0x20b1dd43ce3,0x20b1dd43965,0x39aa2859729,0x20b1dd43ce3,0x20b1dd43965,0x39aa285557c,0x2e2fa685502,0x3979d3bef45
code-creation,Eval,10,371654,0x39aa286de9e,5, node:internal/fs/promises:1:1,0x39aa286d700,~
script-source,123,node:internal/fs/promises,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypePush\x2C\x0d\n  Error\x2C\x0d\n  MathMax\x2C\x0d\n  MathMin\x2C\x0d\n  NumberIsSafeInteger\x2C\x0d\n  Promise\x2C\x0d\n  PromisePrototypeThen\x2C\x0d\n  PromiseResolve\x2C\x0d\n  SafeArrayIterator\x2C\x0d\n  SafePromisePrototypeFinally\x2C\x0d\n  Symbol\x2C\x0d\n  Uint8Array\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  F_OK\x2C\x0d\n  O_SYMLINK\x2C\x0d\n  O_WRONLY\x2C\x0d\n  S_IFMT\x2C\x0d\n  S_IFREG\x0d\n} = internalBinding('constants').fs;\x0d\nconst binding = internalBinding('fs');\x0d\nconst { Buffer } = require('buffer');\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_FS_FILE_TOO_LARGE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_METHOD_NOT_IMPLEMENTED\x2C\x0d\n  }\x2C\x0d\n  AbortError\x2C\x0d\n} = require('internal/errors');\x0d\nconst { isArrayBufferView } = require('internal/util/types');\x0d\nconst { rimrafPromises } = require('internal/fs/rimraf');\x0d\nconst {\x0d\n  constants: {\x0d\n    kIoMaxLength\x2C\x0d\n    kMaxUserId\x2C\x0d\n    kReadFileBufferLength\x2C\x0d\n    kReadFileUnknownBufferLength\x2C\x0d\n    kWriteFileMaxChunkSize\x2C\x0d\n  }\x2C\x0d\n  copyObject\x2C\x0d\n  emitRecursiveRmdirWarning\x2C\x0d\n  getDirents\x2C\x0d\n  getOptions\x2C\x0d\n  getStatsFromBinding\x2C\x0d\n  getValidatedPath\x2C\x0d\n  getValidMode\x2C\x0d\n  nullCheck\x2C\x0d\n  preprocessSymlinkDestination\x2C\x0d\n  stringToFlags\x2C\x0d\n  stringToSymlinkType\x2C\x0d\n  toUnixTimestamp\x2C\x0d\n  validateBufferArray\x2C\x0d\n  validateCpOptions\x2C\x0d\n  validateOffsetLengthRead\x2C\x0d\n  validateOffsetLengthWrite\x2C\x0d\n  validateRmOptions\x2C\x0d\n  validateRmdirOptions\x2C\x0d\n  validateStringAfterArrayBufferView\x2C\x0d\n  warnOnNonPortableTemplate\x2C\x0d\n} = require('internal/fs/utils');\x0d\nconst { opendir } = require('internal/fs/dir');\x0d\nconst {\x0d\n  parseFileMode\x2C\x0d\n  validateAbortSignal\x2C\x0d\n  validateBoolean\x2C\x0d\n  validateBuffer\x2C\x0d\n  validateEncoding\x2C\x0d\n  validateInteger\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\nconst pathModule = require('path');\x0d\nconst { lazyDOMException\x2C promisify } = require('internal/util');\x0d\nconst { EventEmitterMixin } = require('internal/event_target');\x0d\nconst { watch } = require('internal/fs/watchers');\x0d\nconst { isIterable } = require('internal/streams/utils');\x0d\nconst assert = require('internal/assert');\x0d\n\x0d\nconst kHandle = Symbol('kHandle');\x0d\nconst kFd = Symbol('kFd');\x0d\nconst kRefs = Symbol('kRefs');\x0d\nconst kClosePromise = Symbol('kClosePromise');\x0d\nconst kCloseResolve = Symbol('kCloseResolve');\x0d\nconst kCloseReject = Symbol('kCloseReject');\x0d\nconst kRef = Symbol('kRef');\x0d\nconst kUnref = Symbol('kUnref');\x0d\n\x0d\nconst { kUsePromises } = binding;\x0d\nconst {\x0d\n  JSTransferable\x2C kDeserialize\x2C kTransfer\x2C kTransferList\x0d\n} = require('internal/worker/js_transferable');\x0d\n\x0d\nconst getDirectoryEntriesPromise = promisify(getDirents);\x0d\nconst validateRmOptionsPromise = promisify(validateRmOptions);\x0d\n\x0d\nlet cpPromises;\x0d\nfunction lazyLoadCpPromises() {\x0d\n  return cpPromises ??= require('internal/fs/cp/cp').cpFn;\x0d\n}\x0d\n\x0d\n// Lazy loaded to avoid circular dependency.\x0d\nlet fsStreams;\x0d\nfunction lazyFsStreams() {\x0d\n  return fsStreams ??= require('internal/fs/streams');\x0d\n}\x0d\n\x0d\nclass FileHandle extends EventEmitterMixin(JSTransferable) {\x0d\n  /**\x0d\n   * @param {InternalFSBinding.FileHandle | undefined} filehandle\x0d\n   */\x0d\n  constructor(filehandle) {\x0d\n    super();\x0d\n    this[kHandle] = filehandle;\x0d\n    this[kFd] = filehandle ? filehandle.fd : -1;\x0d\n\x0d\n    this[kRefs] = 1;\x0d\n    this[kClosePromise] = null;\x0d\n  }\x0d\n\x0d\n  getAsyncId() {\x0d\n    return this[kHandle].getAsyncId();\x0d\n  }\x0d\n\x0d\n  get fd() {\x0d\n    return this[kFd];\x0d\n  }\x0d\n\x0d\n  appendFile(data\x2C options) {\x0d\n    return fsCall(writeFile\x2C this\x2C data\x2C options);\x0d\n  }\x0d\n\x0d\n  chmod(mode) {\x0d\n    return fsCall(fchmod\x2C this\x2C mode);\x0d\n  }\x0d\n\x0d\n  chown(uid\x2C gid) {\x0d\n    return fsCall(fchown\x2C this\x2C uid\x2C gid);\x0d\n  }\x0d\n\x0d\n  datasync() {\x0d\n    return fsCall(fdatasync\x2C this);\x0d\n  }\x0d\n\x0d\n  sync() {\x0d\n    return fsCall(fsync\x2C this);\x0d\n  }\x0d\n\x0d\n  read(buffer\x2C offset\x2C length\x2C position) {\x0d\n    return fsCall(read\x2C this\x2C buffer\x2C offset\x2C length\x2C position);\x0d\n  }\x0d\n\x0d\n  readv(buffers\x2C position) {\x0d\n    return fsCall(readv\x2C this\x2C buffers\x2C position);\x0d\n  }\x0d\n\x0d\n  readFile(options) {\x0d\n    return fsCall(readFile\x2C this\x2C options);\x0d\n  }\x0d\n\x0d\n  stat(options) {\x0d\n    return fsCall(fstat\x2C this\x2C options);\x0d\n  }\x0d\n\x0d\n  truncate(len = 0) {\x0d\n    return fsCall(ftruncate\x2C this\x2C len);\x0d\n  }\x0d\n\x0d\n  utimes(atime\x2C mtime) {\x0d\n    return fsCall(futimes\x2C this\x2C atime\x2C mtime);\x0d\n  }\x0d\n\x0d\n  write(buffer\x2C offset\x2C length\x2C position) {\x0d\n    return fsCall(write\x2C this\x2C buffer\x2C offset\x2C length\x2C position);\x0d\n  }\x0d\n\x0d\n  writev(buffers\x2C position) {\x0d\n    return fsCall(writev\x2C this\x2C buffers\x2C position);\x0d\n  }\x0d\n\x0d\n  writeFile(data\x2C options) {\x0d\n    return fsCall(writeFile\x2C this\x2C data\x2C options);\x0d\n  }\x0d\n\x0d\n  close = () => {\x0d\n    if (this[kFd] === -1) {\x0d\n      return PromiseResolve();\x0d\n    }\x0d\n\x0d\n    if (this[kClosePromise]) {\x0d\n      return this[kClosePromise];\x0d\n    }\x0d\n\x0d\n    this[kRefs]--;\x0d\n    if (this[kRefs] === 0) {\x0d\n      this[kFd] = -1;\x0d\n      this[kClosePromise] = SafePromisePrototypeFinally(\x0d\n        this[kHandle].close()\x2C\x0d\n        () => { this[kClosePromise] = undefined; }\x0d\n      );\x0d\n    } else {\x0d\n      this[kClosePromise] = SafePromisePrototypeFinally(\x0d\n        new Promise((resolve\x2C reject) => {\x0d\n          this[kCloseResolve] = resolve;\x0d\n          this[kCloseReject] = reject;\x0d\n        })\x2C () => {\x0d\n          this[kClosePromise] = undefined;\x0d\n          this[kCloseReject] = undefined;\x0d\n          this[kCloseResolve] = undefined;\x0d\n        }\x0d\n      );\x0d\n    }\x0d\n\x0d\n    this.emit('close');\x0d\n    return this[kClosePromise];\x0d\n  };\x0d\n\x0d\n  /**\x0d\n   * @typedef {import('./streams').ReadStream\x0d\n   * } ReadStream\x0d\n   * @param {{\x0d\n   *   encoding?: string;\x0d\n   *   autoClose?: boolean;\x0d\n   *   emitClose?: boolean;\x0d\n   *   start: number;\x0d\n   *   end?: number;\x0d\n   *   highWaterMark?: number;\x0d\n   *   }} [options]\x0d\n   * @returns {ReadStream}\x0d\n   */\x0d\n  createReadStream(options = undefined) {\x0d\n    const { ReadStream } = lazyFsStreams();\x0d\n    return new ReadStream(undefined\x2C { ...options\x2C fd: this });\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @typedef {import('./streams').WriteStream\x0d\n   * } WriteStream\x0d\n   * @param {{\x0d\n   *   encoding?: string;\x0d\n   *   autoClose?: boolean;\x0d\n   *   emitClose?: boolean;\x0d\n   *   start: number;\x0d\n   *   }} [options]\x0d\n   * @returns {WriteStream}\x0d\n   */\x0d\n  createWriteStream(options = undefined) {\x0d\n    const { WriteStream } = lazyFsStreams();\x0d\n    return new WriteStream(undefined\x2C { ...options\x2C fd: this });\x0d\n  }\x0d\n\x0d\n  [kTransfer]() {\x0d\n    if (this[kClosePromise] || this[kRefs] > 1) {\x0d\n      throw lazyDOMException('Cannot transfer FileHandle while in use'\x2C\x0d\n                             'DataCloneError');\x0d\n    }\x0d\n\x0d\n    const handle = this[kHandle];\x0d\n    this[kFd] = -1;\x0d\n    this[kHandle] = null;\x0d\n    this[kRefs] = 0;\x0d\n\x0d\n    return {\x0d\n      data: { handle }\x2C\x0d\n      deserializeInfo: 'internal/fs/promises:FileHandle'\x0d\n    };\x0d\n  }\x0d\n\x0d\n  [kTransferList]() {\x0d\n    return [ this[kHandle] ];\x0d\n  }\x0d\n\x0d\n  [kDeserialize]({ handle }) {\x0d\n    this[kHandle] = handle;\x0d\n    this[kFd] = handle.fd;\x0d\n  }\x0d\n\x0d\n  [kRef]() {\x0d\n    this[kRefs]++;\x0d\n  }\x0d\n\x0d\n  [kUnref]() {\x0d\n    this[kRefs]--;\x0d\n    if (this[kRefs] === 0) {\x0d\n      this[kFd] = -1;\x0d\n      PromisePrototypeThen(\x0d\n        this[kHandle].close()\x2C\x0d\n        this[kCloseResolve]\x2C\x0d\n        this[kCloseReject]\x0d\n      );\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nasync function fsCall(fn\x2C handle\x2C ...args) {\x0d\n  assert(handle[kRefs] !== undefined\x2C\x0d\n         'handle must be an instance of FileHandle');\x0d\n\x0d\n  if (handle.fd === -1) {\x0d\n    // eslint-disable-next-line no-restricted-syntax\x0d\n    const err = new Error('file closed');\x0d\n    err.code = 'EBADF';\x0d\n    err.syscall = fn.name;\x0d\n    throw err;\x0d\n  }\x0d\n\x0d\n  try {\x0d\n    handle[kRef]();\x0d\n    return await fn(handle\x2C ...new SafeArrayIterator(args));\x0d\n  } finally {\x0d\n    handle[kUnref]();\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction checkAborted(signal) {\x0d\n  if (signal?.aborted)\x0d\n    throw new AbortError();\x0d\n}\x0d\n\x0d\nasync function writeFileHandle(filehandle\x2C data\x2C signal\x2C encoding) {\x0d\n  checkAborted(signal);\x0d\n  if (isCustomIterable(data)) {\x0d\n    for await (const buf of data) {\x0d\n      checkAborted(signal);\x0d\n      const toWrite =\x0d\n        isArrayBufferView(buf) ? buf : Buffer.from(buf\x2C encoding || 'utf8');\x0d\n      let remaining = toWrite.byteLength;\x0d\n      while (remaining > 0) {\x0d\n        const writeSize = MathMin(kWriteFileMaxChunkSize\x2C remaining);\x0d\n        const { bytesWritten } = await write(\x0d\n          filehandle\x2C toWrite\x2C toWrite.byteLength - remaining\x2C writeSize);\x0d\n        remaining -= bytesWritten;\x0d\n        checkAborted(signal);\x0d\n      }\x0d\n    }\x0d\n    return;\x0d\n  }\x0d\n  data = new Uint8Array(data.buffer\x2C data.byteOffset\x2C data.byteLength);\x0d\n  let remaining = data.byteLength;\x0d\n  if (remaining === 0) return;\x0d\n  do {\x0d\n    checkAborted(signal);\x0d\n    const { bytesWritten } =\x0d\n      await write(filehandle\x2C data\x2C 0\x2C\x0d\n                  MathMin(kWriteFileMaxChunkSize\x2C data.byteLength));\x0d\n    remaining -= bytesWritten;\x0d\n    data = new Uint8Array(\x0d\n      data.buffer\x2C\x0d\n      data.byteOffset + bytesWritten\x2C\x0d\n      data.byteLength - bytesWritten\x0d\n    );\x0d\n  } while (remaining > 0);\x0d\n}\x0d\n\x0d\nasync function readFileHandle(filehandle\x2C options) {\x0d\n  const signal = options?.signal;\x0d\n\x0d\n  checkAborted(signal);\x0d\n\x0d\n  const statFields = await binding.fstat(filehandle.fd\x2C false\x2C kUsePromises);\x0d\n\x0d\n  checkAborted(signal);\x0d\n\x0d\n  let size;\x0d\n  if ((statFields[1/* mode */] & S_IFMT) === S_IFREG) {\x0d\n    size = statFields[8/* size */];\x0d\n  } else {\x0d\n    size = 0;\x0d\n  }\x0d\n\x0d\n  if (size > kIoMaxLength)\x0d\n    throw new ERR_FS_FILE_TOO_LARGE(size);\x0d\n\x0d\n  let endOfFile = false;\x0d\n  let totalRead = 0;\x0d\n  const noSize = size === 0;\x0d\n  const buffers = [];\x0d\n  const fullBuffer = noSize ? undefined : Buffer.allocUnsafeSlow(size);\x0d\n  do {\x0d\n    checkAborted(signal);\x0d\n    let buffer;\x0d\n    let offset;\x0d\n    let length;\x0d\n    if (noSize) {\x0d\n      buffer = Buffer.allocUnsafeSlow(kReadFileUnknownBufferLength);\x0d\n      offset = 0;\x0d\n      length = kReadFileUnknownBufferLength;\x0d\n    } else {\x0d\n      buffer = fullBuffer;\x0d\n      offset = totalRead;\x0d\n      length = MathMin(size - totalRead\x2C kReadFileBufferLength);\x0d\n    }\x0d\n\x0d\n    const bytesRead = (await binding.read(filehandle.fd\x2C buffer\x2C offset\x2C\x0d\n                                          length\x2C -1\x2C kUsePromises)) || 0;\x0d\n    totalRead += bytesRead;\x0d\n    endOfFile = bytesRead === 0 || totalRead === size;\x0d\n    if (noSize && bytesRead > 0) {\x0d\n      const isBufferFull = bytesRead === kReadFileUnknownBufferLength;\x0d\n      const chunkBuffer = isBufferFull ? buffer : buffer.slice(0\x2C bytesRead);\x0d\n      ArrayPrototypePush(buffers\x2C chunkBuffer);\x0d\n    }\x0d\n  } while (!endOfFile);\x0d\n\x0d\n  let result;\x0d\n  if (size > 0) {\x0d\n    result = totalRead === size ? fullBuffer : fullBuffer.slice(0\x2C totalRead);\x0d\n  } else {\x0d\n    result = buffers.length === 1 ? buffers[0] : Buffer.concat(buffers\x2C\x0d\n                                                               totalRead);\x0d\n  }\x0d\n\x0d\n  return options.encoding ? result.toString(options.encoding) : result;\x0d\n}\x0d\n\x0d\n// All of the functions are defined as async in order to ensure that errors\x0d\n// thrown cause promise rejections rather than being thrown synchronously.\x0d\nasync function access(path\x2C mode = F_OK) {\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  mode = getValidMode(mode\x2C 'access');\x0d\n  return binding.access(pathModule.toNamespacedPath(path)\x2C mode\x2C\x0d\n                        kUsePromises);\x0d\n}\x0d\n\x0d\nasync function cp(src\x2C dest\x2C options) {\x0d\n  options = validateCpOptions(options);\x0d\n  src = pathModule.toNamespacedPath(getValidatedPath(src\x2C 'src'));\x0d\n  dest = pathModule.toNamespacedPath(getValidatedPath(dest\x2C 'dest'));\x0d\n  return lazyLoadCpPromises()(src\x2C dest\x2C options);\x0d\n}\x0d\n\x0d\nasync function copyFile(src\x2C dest\x2C mode) {\x0d\n  src = getValidatedPath(src\x2C 'src');\x0d\n  dest = getValidatedPath(dest\x2C 'dest');\x0d\n  mode = getValidMode(mode\x2C 'copyFile');\x0d\n  return binding.copyFile(pathModule.toNamespacedPath(src)\x2C\x0d\n                          pathModule.toNamespacedPath(dest)\x2C\x0d\n                          mode\x2C\x0d\n                          kUsePromises);\x0d\n}\x0d\n\x0d\n// Note that unlike fs.open() which uses numeric file descriptors\x2C\x0d\n// fsPromises.open() uses the fs.FileHandle class.\x0d\nasync function open(path\x2C flags\x2C mode) {\x0d\n  path = getValidatedPath(path);\x0d\n  const flagsNumber = stringToFlags(flags);\x0d\n  mode = parseFileMode(mode\x2C 'mode'\x2C 0o666);\x0d\n  return new FileHandle(\x0d\n    await binding.openFileHandle(pathModule.toNamespacedPath(path)\x2C\x0d\n                                 flagsNumber\x2C mode\x2C kUsePromises));\x0d\n}\x0d\n\x0d\nasync function read(handle\x2C bufferOrOptions\x2C offset\x2C length\x2C position) {\x0d\n  let buffer = bufferOrOptions;\x0d\n  if (!isArrayBufferView(buffer)) {\x0d\n    if (bufferOrOptions === undefined) {\x0d\n      bufferOrOptions = {};\x0d\n    }\x0d\n    if (bufferOrOptions.buffer) {\x0d\n      buffer = bufferOrOptions.buffer;\x0d\n      validateBuffer(buffer);\x0d\n    } else {\x0d\n      buffer = Buffer.alloc(16384);\x0d\n    }\x0d\n    offset = bufferOrOptions.offset || 0;\x0d\n    length = bufferOrOptions.length ?? buffer.byteLength;\x0d\n    position = bufferOrOptions.position ?? null;\x0d\n  }\x0d\n\x0d\n  if (offset == null) {\x0d\n    offset = 0;\x0d\n  } else {\x0d\n    validateInteger(offset\x2C 'offset'\x2C 0);\x0d\n  }\x0d\n\x0d\n  length |= 0;\x0d\n\x0d\n  if (length === 0)\x0d\n    return { bytesRead: length\x2C buffer };\x0d\n\x0d\n  if (buffer.byteLength === 0) {\x0d\n    throw new ERR_INVALID_ARG_VALUE('buffer'\x2C buffer\x2C\x0d\n                                    'is empty and cannot be written');\x0d\n  }\x0d\n\x0d\n  validateOffsetLengthRead(offset\x2C length\x2C buffer.byteLength);\x0d\n\x0d\n  if (!NumberIsSafeInteger(position))\x0d\n    position = -1;\x0d\n\x0d\n  const bytesRead = (await binding.read(handle.fd\x2C buffer\x2C offset\x2C length\x2C\x0d\n                                        position\x2C kUsePromises)) || 0;\x0d\n\x0d\n  return { bytesRead\x2C buffer };\x0d\n}\x0d\n\x0d\nasync function readv(handle\x2C buffers\x2C position) {\x0d\n  validateBufferArray(buffers);\x0d\n\x0d\n  if (typeof position !== 'number')\x0d\n    position = null;\x0d\n\x0d\n  const bytesRead = (await binding.readBuffers(handle.fd\x2C buffers\x2C position\x2C\x0d\n                                               kUsePromises)) || 0;\x0d\n  return { bytesRead\x2C buffers };\x0d\n}\x0d\n\x0d\nasync function write(handle\x2C buffer\x2C offset\x2C length\x2C position) {\x0d\n  if (buffer?.byteLength === 0)\x0d\n    return { bytesWritten: 0\x2C buffer };\x0d\n\x0d\n  if (isArrayBufferView(buffer)) {\x0d\n    if (offset == null) {\x0d\n      offset = 0;\x0d\n    } else {\x0d\n      validateInteger(offset\x2C 'offset'\x2C 0);\x0d\n    }\x0d\n    if (typeof length !== 'number')\x0d\n      length = buffer.byteLength - offset;\x0d\n    if (typeof position !== 'number')\x0d\n      position = null;\x0d\n    validateOffsetLengthWrite(offset\x2C length\x2C buffer.byteLength);\x0d\n    const bytesWritten =\x0d\n      (await binding.writeBuffer(handle.fd\x2C buffer\x2C offset\x2C\x0d\n                                 length\x2C position\x2C kUsePromises)) || 0;\x0d\n    return { bytesWritten\x2C buffer };\x0d\n  }\x0d\n\x0d\n  validateStringAfterArrayBufferView(buffer\x2C 'buffer');\x0d\n  validateEncoding(buffer\x2C length);\x0d\n  const bytesWritten = (await binding.writeString(handle.fd\x2C buffer\x2C offset\x2C\x0d\n                                                  length\x2C kUsePromises)) || 0;\x0d\n  return { bytesWritten\x2C buffer };\x0d\n}\x0d\n\x0d\nasync function writev(handle\x2C buffers\x2C position) {\x0d\n  validateBufferArray(buffers);\x0d\n\x0d\n  if (typeof position !== 'number')\x0d\n    position = null;\x0d\n\x0d\n  const bytesWritten = (await binding.writeBuffers(handle.fd\x2C buffers\x2C position\x2C\x0d\n                                                   kUsePromises)) || 0;\x0d\n  return { bytesWritten\x2C buffers };\x0d\n}\x0d\n\x0d\nasync function rename(oldPath\x2C newPath) {\x0d\n  oldPath = getValidatedPath(oldPath\x2C 'oldPath');\x0d\n  newPath = getValidatedPath(newPath\x2C 'newPath');\x0d\n  return binding.rename(pathModule.toNamespacedPath(oldPath)\x2C\x0d\n                        pathModule.toNamespacedPath(newPath)\x2C\x0d\n                        kUsePromises);\x0d\n}\x0d\n\x0d\nasync function truncate(path\x2C len = 0) {\x0d\n  const fd = await open(path\x2C 'r+');\x0d\n  return SafePromisePrototypeFinally(ftruncate(fd\x2C len)\x2C fd.close);\x0d\n}\x0d\n\x0d\nasync function ftruncate(handle\x2C len = 0) {\x0d\n  validateInteger(len\x2C 'len');\x0d\n  len = MathMax(0\x2C len);\x0d\n  return binding.ftruncate(handle.fd\x2C len\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function rm(path\x2C options) {\x0d\n  path = pathModule.toNamespacedPath(getValidatedPath(path));\x0d\n  options = await validateRmOptionsPromise(path\x2C options\x2C false);\x0d\n  return rimrafPromises(path\x2C options);\x0d\n}\x0d\n\x0d\nasync function rmdir(path\x2C options) {\x0d\n  path = pathModule.toNamespacedPath(getValidatedPath(path));\x0d\n  options = validateRmdirOptions(options);\x0d\n\x0d\n  if (options.recursive) {\x0d\n    emitRecursiveRmdirWarning();\x0d\n    const stats = await stat(path);\x0d\n    if (stats.isDirectory()) {\x0d\n      return rimrafPromises(path\x2C options);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return binding.rmdir(path\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function fdatasync(handle) {\x0d\n  return binding.fdatasync(handle.fd\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function fsync(handle) {\x0d\n  return binding.fsync(handle.fd\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function mkdir(path\x2C options) {\x0d\n  if (typeof options === 'number' || typeof options === 'string') {\x0d\n    options = { mode: options };\x0d\n  }\x0d\n  const {\x0d\n    recursive = false\x2C\x0d\n    mode = 0o777\x0d\n  } = options || {};\x0d\n  path = getValidatedPath(path);\x0d\n  validateBoolean(recursive\x2C 'options.recursive');\x0d\n\x0d\n  return binding.mkdir(pathModule.toNamespacedPath(path)\x2C\x0d\n                       parseFileMode(mode\x2C 'mode'\x2C 0o777)\x2C recursive\x2C\x0d\n                       kUsePromises);\x0d\n}\x0d\n\x0d\nasync function readdir(path\x2C options) {\x0d\n  options = getOptions(options\x2C {});\x0d\n  path = getValidatedPath(path);\x0d\n  const result = await binding.readdir(pathModule.toNamespacedPath(path)\x2C\x0d\n                                       options.encoding\x2C\x0d\n                                       !!options.withFileTypes\x2C\x0d\n                                       kUsePromises);\x0d\n  return options.withFileTypes ?\x0d\n    getDirectoryEntriesPromise(path\x2C result) :\x0d\n    result;\x0d\n}\x0d\n\x0d\nasync function readlink(path\x2C options) {\x0d\n  options = getOptions(options\x2C {});\x0d\n  path = getValidatedPath(path\x2C 'oldPath');\x0d\n  return binding.readlink(pathModule.toNamespacedPath(path)\x2C\x0d\n                          options.encoding\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function symlink(target\x2C path\x2C type_) {\x0d\n  const type = (typeof type_ === 'string' ? type_ : null);\x0d\n  target = getValidatedPath(target\x2C 'target');\x0d\n  path = getValidatedPath(path);\x0d\n  return binding.symlink(preprocessSymlinkDestination(target\x2C type\x2C path)\x2C\x0d\n                         pathModule.toNamespacedPath(path)\x2C\x0d\n                         stringToSymlinkType(type)\x2C\x0d\n                         kUsePromises);\x0d\n}\x0d\n\x0d\nasync function fstat(handle\x2C options = { bigint: false }) {\x0d\n  const result = await binding.fstat(handle.fd\x2C options.bigint\x2C kUsePromises);\x0d\n  return getStatsFromBinding(result);\x0d\n}\x0d\n\x0d\nasync function lstat(path\x2C options = { bigint: false }) {\x0d\n  path = getValidatedPath(path);\x0d\n  const result = await binding.lstat(pathModule.toNamespacedPath(path)\x2C\x0d\n                                     options.bigint\x2C kUsePromises);\x0d\n  return getStatsFromBinding(result);\x0d\n}\x0d\n\x0d\nasync function stat(path\x2C options = { bigint: false }) {\x0d\n  path = getValidatedPath(path);\x0d\n  const result = await binding.stat(pathModule.toNamespacedPath(path)\x2C\x0d\n                                    options.bigint\x2C kUsePromises);\x0d\n  return getStatsFromBinding(result);\x0d\n}\x0d\n\x0d\nasync function link(existingPath\x2C newPath) {\x0d\n  existingPath = getValidatedPath(existingPath\x2C 'existingPath');\x0d\n  newPath = getValidatedPath(newPath\x2C 'newPath');\x0d\n  return binding.link(pathModule.toNamespacedPath(existingPath)\x2C\x0d\n                      pathModule.toNamespacedPath(newPath)\x2C\x0d\n                      kUsePromises);\x0d\n}\x0d\n\x0d\nasync function unlink(path) {\x0d\n  path = getValidatedPath(path);\x0d\n  return binding.unlink(pathModule.toNamespacedPath(path)\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function fchmod(handle\x2C mode) {\x0d\n  mode = parseFileMode(mode\x2C 'mode');\x0d\n  return binding.fchmod(handle.fd\x2C mode\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function chmod(path\x2C mode) {\x0d\n  path = getValidatedPath(path);\x0d\n  mode = parseFileMode(mode\x2C 'mode');\x0d\n  return binding.chmod(pathModule.toNamespacedPath(path)\x2C mode\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function lchmod(path\x2C mode) {\x0d\n  if (O_SYMLINK === undefined)\x0d\n    throw new ERR_METHOD_NOT_IMPLEMENTED('lchmod()');\x0d\n\x0d\n  const fd = await open(path\x2C O_WRONLY | O_SYMLINK);\x0d\n  return SafePromisePrototypeFinally(fchmod(fd\x2C mode)\x2C fd.close);\x0d\n}\x0d\n\x0d\nasync function lchown(path\x2C uid\x2C gid) {\x0d\n  path = getValidatedPath(path);\x0d\n  validateInteger(uid\x2C 'uid'\x2C -1\x2C kMaxUserId);\x0d\n  validateInteger(gid\x2C 'gid'\x2C -1\x2C kMaxUserId);\x0d\n  return binding.lchown(pathModule.toNamespacedPath(path)\x2C\x0d\n                        uid\x2C gid\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function fchown(handle\x2C uid\x2C gid) {\x0d\n  validateInteger(uid\x2C 'uid'\x2C -1\x2C kMaxUserId);\x0d\n  validateInteger(gid\x2C 'gid'\x2C -1\x2C kMaxUserId);\x0d\n  return binding.fchown(handle.fd\x2C uid\x2C gid\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function chown(path\x2C uid\x2C gid) {\x0d\n  path = getValidatedPath(path);\x0d\n  validateInteger(uid\x2C 'uid'\x2C -1\x2C kMaxUserId);\x0d\n  validateInteger(gid\x2C 'gid'\x2C -1\x2C kMaxUserId);\x0d\n  return binding.chown(pathModule.toNamespacedPath(path)\x2C\x0d\n                       uid\x2C gid\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function utimes(path\x2C atime\x2C mtime) {\x0d\n  path = getValidatedPath(path);\x0d\n  return binding.utimes(pathModule.toNamespacedPath(path)\x2C\x0d\n                        toUnixTimestamp(atime)\x2C\x0d\n                        toUnixTimestamp(mtime)\x2C\x0d\n                        kUsePromises);\x0d\n}\x0d\n\x0d\nasync function futimes(handle\x2C atime\x2C mtime) {\x0d\n  atime = toUnixTimestamp(atime\x2C 'atime');\x0d\n  mtime = toUnixTimestamp(mtime\x2C 'mtime');\x0d\n  return binding.futimes(handle.fd\x2C atime\x2C mtime\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function lutimes(path\x2C atime\x2C mtime) {\x0d\n  path = getValidatedPath(path);\x0d\n  return binding.lutimes(pathModule.toNamespacedPath(path)\x2C\x0d\n                         toUnixTimestamp(atime)\x2C\x0d\n                         toUnixTimestamp(mtime)\x2C\x0d\n                         kUsePromises);\x0d\n}\x0d\n\x0d\nasync function realpath(path\x2C options) {\x0d\n  options = getOptions(options\x2C {});\x0d\n  path = getValidatedPath(path);\x0d\n  return binding.realpath(path\x2C options.encoding\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function mkdtemp(prefix\x2C options) {\x0d\n  options = getOptions(options\x2C {});\x0d\n\x0d\n  validateString(prefix\x2C 'prefix');\x0d\n  nullCheck(prefix);\x0d\n  warnOnNonPortableTemplate(prefix);\x0d\n  return binding.mkdtemp(`${prefix}XXXXXX`\x2C options.encoding\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function writeFile(path\x2C data\x2C options) {\x0d\n  options = getOptions(options\x2C { encoding: 'utf8'\x2C mode: 0o666\x2C flag: 'w' });\x0d\n  const flag = options.flag || 'w';\x0d\n\x0d\n  if (!isArrayBufferView(data) && !isCustomIterable(data)) {\x0d\n    validateStringAfterArrayBufferView(data\x2C 'data');\x0d\n    data = Buffer.from(data\x2C options.encoding || 'utf8');\x0d\n  }\x0d\n\x0d\n  validateAbortSignal(options.signal);\x0d\n  if (path instanceof FileHandle)\x0d\n    return writeFileHandle(path\x2C data\x2C options.signal\x2C options.encoding);\x0d\n\x0d\n  checkAborted(options.signal);\x0d\n\x0d\n  const fd = await open(path\x2C flag\x2C options.mode);\x0d\n  return SafePromisePrototypeFinally(\x0d\n    writeFileHandle(fd\x2C data\x2C options.signal\x2C options.encoding)\x2C fd.close);\x0d\n}\x0d\n\x0d\nfunction isCustomIterable(obj) {\x0d\n  return isIterable(obj) && !isArrayBufferView(obj) && typeof obj !== 'string';\x0d\n}\x0d\n\x0d\nasync function appendFile(path\x2C data\x2C options) {\x0d\n  options = getOptions(options\x2C { encoding: 'utf8'\x2C mode: 0o666\x2C flag: 'a' });\x0d\n  options = copyObject(options);\x0d\n  options.flag = options.flag || 'a';\x0d\n  return writeFile(path\x2C data\x2C options);\x0d\n}\x0d\n\x0d\nasync function readFile(path\x2C options) {\x0d\n  options = getOptions(options\x2C { flag: 'r' });\x0d\n  const flag = options.flag || 'r';\x0d\n\x0d\n  if (path instanceof FileHandle)\x0d\n    return readFileHandle(path\x2C options);\x0d\n\x0d\n  checkAborted(options.signal);\x0d\n\x0d\n  const fd = await open(path\x2C flag\x2C 0o666);\x0d\n  return SafePromisePrototypeFinally(readFileHandle(fd\x2C options)\x2C fd.close);\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  exports: {\x0d\n    access\x2C\x0d\n    copyFile\x2C\x0d\n    cp\x2C\x0d\n    open\x2C\x0d\n    opendir: promisify(opendir)\x2C\x0d\n    rename\x2C\x0d\n    truncate\x2C\x0d\n    rm\x2C\x0d\n    rmdir\x2C\x0d\n    mkdir\x2C\x0d\n    readdir\x2C\x0d\n    readlink\x2C\x0d\n    symlink\x2C\x0d\n    lstat\x2C\x0d\n    stat\x2C\x0d\n    link\x2C\x0d\n    unlink\x2C\x0d\n    chmod\x2C\x0d\n    lchmod\x2C\x0d\n    lchown\x2C\x0d\n    chown\x2C\x0d\n    utimes\x2C\x0d\n    lutimes\x2C\x0d\n    realpath\x2C\x0d\n    mkdtemp\x2C\x0d\n    writeFile\x2C\x0d\n    appendFile\x2C\x0d\n    readFile\x2C\x0d\n    watch\x2C\x0d\n  }\x2C\x0d\n\x0d\n  FileHandle\x2C\x0d\n  kRef\x2C\x0d\n  kUnref\x2C\x0d\n};\x0d\n
code-source-info,0x39aa286de9e,123,0,23741,C0O0C4O23741,,
code-creation,Function,10,373096,0x39aa28705d6,1659, node:internal/fs/promises:1:1,0x39aa286de18,~
code-source-info,0x39aa28705d
code-creation,Function,10,373303,0x39aa2870f86,27,<instance_members_initializer> node:internal/fs/promises:189:3,0x39aa286f478,~
code-source-info,0x39aa2870f86,123,4390,5219,C0O4390C12O4398C26O5219,,
code-creation,Eval,10,373803,0x39aa2873a26,5, node:internal/fs/rimraf:1:1,0x39aa28736c0,~
script-source,124,node:internal/fs/rimraf,// This file is a modified version of the rimraf module on npm. It has been\x0d\n// modified in the following ways:\x0d\n// - Use of the assert module has been replaced with core's error system.\x0d\n// - All code related to the glob dependency has been removed.\x0d\n// - Bring your own custom fs module is not currently supported.\x0d\n// - Some basic code cleanup.\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  Promise\x2C\x0d\n  SafeSet\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { Buffer } = require('buffer');\x0d\nconst fs = require('fs');\x0d\nconst {\x0d\n  chmod\x2C\x0d\n  chmodSync\x2C\x0d\n  lstat\x2C\x0d\n  lstatSync\x2C\x0d\n  readdir\x2C\x0d\n  readdirSync\x2C\x0d\n  rmdir\x2C\x0d\n  rmdirSync\x2C\x0d\n  stat\x2C\x0d\n  statSync\x2C\x0d\n  unlink\x2C\x0d\n  unlinkSync\x0d\n} = fs;\x0d\nconst { sep } = require('path');\x0d\nconst { setTimeout } = require('timers');\x0d\nconst { sleep } = require('internal/util');\x0d\nconst notEmptyErrorCodes = new SafeSet(['ENOTEMPTY'\x2C 'EEXIST'\x2C 'EPERM']);\x0d\nconst retryErrorCodes = new SafeSet(\x0d\n  ['EBUSY'\x2C 'EMFILE'\x2C 'ENFILE'\x2C 'ENOTEMPTY'\x2C 'EPERM']);\x0d\nconst isWindows = process.platform === 'win32';\x0d\nconst epermHandler = isWindows ? fixWinEPERM : _rmdir;\x0d\nconst epermHandlerSync = isWindows ? fixWinEPERMSync : _rmdirSync;\x0d\nconst readdirEncoding = 'buffer';\x0d\nconst separator = Buffer.from(sep);\x0d\n\x0d\n\x0d\nfunction rimraf(path\x2C options\x2C callback) {\x0d\n  let retries = 0;\x0d\n\x0d\n  _rimraf(path\x2C options\x2C function CB(err) {\x0d\n    if (err) {\x0d\n      if (retryErrorCodes.has(err.code) && retries < options.maxRetries) {\x0d\n        retries++;\x0d\n        const delay = retries * options.retryDelay;\x0d\n        return setTimeout(_rimraf\x2C delay\x2C path\x2C options\x2C CB);\x0d\n      }\x0d\n\x0d\n      // The file is already gone.\x0d\n      if (err.code === 'ENOENT')\x0d\n        err = null;\x0d\n    }\x0d\n\x0d\n    callback(err);\x0d\n  });\x0d\n}\x0d\n\x0d\n\x0d\nfunction _rimraf(path\x2C options\x2C callback) {\x0d\n  // SunOS lets the root user unlink directories. Use lstat here to make sure\x0d\n  // it's not a directory.\x0d\n  lstat(path\x2C (err\x2C stats) => {\x0d\n    if (err) {\x0d\n      if (err.code === 'ENOENT')\x0d\n        return callback(null);\x0d\n\x0d\n      // Windows can EPERM on stat.\x0d\n      if (isWindows && err.code === 'EPERM')\x0d\n        return fixWinEPERM(path\x2C options\x2C err\x2C callback);\x0d\n    } else if (stats.isDirectory()) {\x0d\n      return _rmdir(path\x2C options\x2C err\x2C callback);\x0d\n    }\x0d\n\x0d\n    unlink(path\x2C (err) => {\x0d\n      if (err) {\x0d\n        if (err.code === 'ENOENT')\x0d\n          return callback(null);\x0d\n        if (err.code === 'EISDIR')\x0d\n          return _rmdir(path\x2C options\x2C err\x2C callback);\x0d\n        if (err.code === 'EPERM') {\x0d\n          return epermHandler(path\x2C options\x2C err\x2C callback);\x0d\n        }\x0d\n      }\x0d\n\x0d\n      return callback(err);\x0d\n    });\x0d\n  });\x0d\n}\x0d\n\x0d\n\x0d\nfunction fixWinEPERM(path\x2C options\x2C originalErr\x2C callback) {\x0d\n  chmod(path\x2C 0o666\x2C (err) => {\x0d\n    if (err)\x0d\n      return callback(err.code === 'ENOENT' ? null : originalErr);\x0d\n\x0d\n    stat(path\x2C (err\x2C stats) => {\x0d\n      if (err)\x0d\n        return callback(err.code === 'ENOENT' ? null : originalErr);\x0d\n\x0d\n      if (stats.isDirectory())\x0d\n        _rmdir(path\x2C options\x2C originalErr\x2C callback);\x0d\n      else\x0d\n        unlink(path\x2C callback);\x0d\n    });\x0d\n  });\x0d\n}\x0d\n\x0d\n\x0d\nfunction _rmdir(path\x2C options\x2C originalErr\x2C callback) {\x0d\n  rmdir(path\x2C (err) => {\x0d\n    if (err) {\x0d\n      if (notEmptyErrorCodes.has(err.code))\x0d\n        return _rmchildren(path\x2C options\x2C callback);\x0d\n      if (err.code === 'ENOTDIR')\x0d\n        return callback(originalErr);\x0d\n    }\x0d\n\x0d\n    callback(err);\x0d\n  });\x0d\n}\x0d\n\x0d\n\x0d\nfunction _rmchildren(path\x2C options\x2C callback) {\x0d\n  const pathBuf = Buffer.from(path);\x0d\n\x0d\n  readdir(pathBuf\x2C readdirEncoding\x2C (err\x2C files) => {\x0d\n    if (err)\x0d\n      return callback(err);\x0d\n\x0d\n    let numFiles = files.length;\x0d\n\x0d\n    if (numFiles === 0)\x0d\n      return rmdir(path\x2C callback);\x0d\n\x0d\n    let done = false;\x0d\n\x0d\n    ArrayPrototypeForEach(files\x2C (child) => {\x0d\n      const childPath = Buffer.concat([pathBuf\x2C separator\x2C child]);\x0d\n\x0d\n      rimraf(childPath\x2C options\x2C (err) => {\x0d\n        if (done)\x0d\n          return;\x0d\n\x0d\n        if (err) {\x0d\n          done = true;\x0d\n          return callback(err);\x0d\n        }\x0d\n\x0d\n        numFiles--;\x0d\n        if (numFiles === 0)\x0d\n          rmdir(path\x2C callback);\x0d\n      });\x0d\n    });\x0d\n  });\x0d\n}\x0d\n\x0d\n\x0d\nfunction rimrafPromises(path\x2C options) {\x0d\n  return new Promise((resolve\x2C reject) => {\x0d\n    rimraf(path\x2C options\x2C (err) => {\x0d\n      if (err)\x0d\n        return reject(err);\x0d\n\x0d\n      resolve();\x0d\n    });\x0d\n  });\x0d\n}\x0d\n\x0d\n\x0d\nfunction rimrafSync(path\x2C options) {\x0d\n  let stats;\x0d\n\x0d\n  try {\x0d\n    stats = lstatSync(path);\x0d\n  } catch (err) {\x0d\n    if (err.code === 'ENOENT')\x0d\n      return;\x0d\n\x0d\n    // Windows can EPERM on stat.\x0d\n    if (isWindows && err.code === 'EPERM')\x0d\n      fixWinEPERMSync(path\x2C options\x2C err);\x0d\n  }\x0d\n\x0d\n  try {\x0d\n    // SunOS lets the root user unlink directories.\x0d\n    if (stats?.isDirectory())\x0d\n      _rmdirSync(path\x2C options\x2C null);\x0d\n    else\x0d\n      _unlinkSync(path\x2C options);\x0d\n  } catch (err) {\x0d\n    if (err.code === 'ENOENT')\x0d\n      return;\x0d\n    if (err.code === 'EPERM')\x0d\n      return epermHandlerSync(path\x2C options\x2C err);\x0d\n    if (err.code !== 'EISDIR')\x0d\n      throw err;\x0d\n\x0d\n    _rmdirSync(path\x2C options\x2C err);\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nfunction _unlinkSync(path\x2C options) {\x0d\n  const tries = options.maxRetries + 1;\x0d\n\x0d\n  for (let i = 1; i <= tries; i++) {\x0d\n    try {\x0d\n      return unlinkSync(path);\x0d\n    } catch (err) {\x0d\n      // Only sleep if this is not the last try\x2C and the delay is greater\x0d\n      // than zero\x2C and an error was encountered that warrants a retry.\x0d\n      if (retryErrorCodes.has(err.code) &&\x0d\n          i < tries &&\x0d\n          options.retryDelay > 0) {\x0d\n        sleep(i * options.retryDelay);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nfunction _rmdirSync(path\x2C options\x2C originalErr) {\x0d\n  try {\x0d\n    rmdirSync(path);\x0d\n  } catch (err) {\x0d\n    if (err.code === 'ENOENT')\x0d\n      return;\x0d\n    if (err.code === 'ENOTDIR')\x0d\n      throw originalErr;\x0d\n\x0d\n    if (notEmptyErrorCodes.has(err.code)) {\x0d\n      // Removing failed. Try removing all children and then retrying the\x0d\n      // original removal. Windows has a habit of not closing handles promptly\x0d\n      // when files are deleted\x2C resulting in spurious ENOTEMPTY failures. Work\x0d\n      // around that issue by retrying on Windows.\x0d\n      const pathBuf = Buffer.from(path);\x0d\n\x0d\n      ArrayPrototypeForEach(readdirSync(pathBuf\x2C readdirEncoding)\x2C (child) => {\x0d\n        const childPath = Buffer.concat([pathBuf\x2C separator\x2C child]);\x0d\n\x0d\n        rimrafSync(childPath\x2C options);\x0d\n      });\x0d\n\x0d\n      const tries = options.maxRetries + 1;\x0d\n\x0d\n      for (let i = 1; i <= tries; i++) {\x0d\n        try {\x0d\n          return fs.rmdirSync(path);\x0d\n        } catch (err) {\x0d\n          // Only sleep if this is not the last try\x2C and the delay is greater\x0d\n          // than zero\x2C and an error was encountered that warrants a retry.\x0d\n          if (retryErrorCodes.has(err.code) &&\x0d\n              i < tries &&\x0d\n              options.retryDelay > 0) {\x0d\n            sleep(i * options.retryDelay);\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nfunction fixWinEPERMSync(path\x2C options\x2C originalErr) {\x0d\n  try {\x0d\n    chmodSync(path\x2C 0o666);\x0d\n  } catch (err) {\x0d\n    if (err.code === 'ENOENT')\x0d\n      return;\x0d\n\x0d\n    throw originalErr;\x0d\n  }\x0d\n\x0d\n  let stats;\x0d\n\x0d\n  try {\x0d\n    stats = statSync(path\x2C { throwIfNoEntry: false });\x0d\n  } catch {\x0d\n    throw originalErr;\x0d\n  }\x0d\n\x0d\n  if (stats === undefined) return;\x0d\n\x0d\n  if (stats.isDirectory())\x0d\n    _rmdirSync(path\x2C options\x2C originalErr);\x0d\n  else\x0d\n    _unlinkSync(path\x2C options);\x0d\n}\x0d\n\x0d\n\x0d\nmodule.exports = { rimraf\x2C rimrafPromises\x2C rimrafSync };\x0d\n
code-source-info,0x39aa2873a26,124,0,7392,C0O0C4O7392,,
code-creation,Function,10,374287,0x39aa2874026,409, node:internal/fs/rimraf:1:1,0x39aa28739a0,~
code-source-info,0x39aa2874026,124,0,7392,C0O0C139O377C145O403C151O415C156O464C159O464C164O453C170O495C173O495C177O495C179O671C182O522C188O532C194O546C200O556C206O570C212O582C218O598C224O608C230O622C236O631C242O644C248O655C254O692C257O692C262O684C267O733C270O733C275O718C281O771C284O771C289O761C295O825C302O825C307O825C309O897C316O897C321O897C323O994C330O1003C333O986C335O1038C345O1038C347O1098C357O1098C359O1165C361O1165C363O1194C366O1201C371O1201C376O1194C378O7334C385O7353C391O7361C397O7377C403O7349C408O7391,,
code-creation,LazyCompile,10,374601,0x39aa2874ebe,188,from node:buffer:296:28,0x423ed76c40,~
script-source,24,node:buffer,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  Array\x2C\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  Error\x2C\x0d\n  MathFloor\x2C\x0d\n  MathMin\x2C\x0d\n  MathTrunc\x2C\x0d\n  NumberIsNaN\x2C\x0d\n  NumberMAX_SAFE_INTEGER\x2C\x0d\n  NumberMIN_SAFE_INTEGER\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  StringPrototypeCharCodeAt\x2C\x0d\n  StringPrototypeReplace\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeToLowerCase\x2C\x0d\n  StringPrototypeTrim\x2C\x0d\n  SymbolSpecies\x2C\x0d\n  SymbolToPrimitive\x2C\x0d\n  TypedArrayPrototypeGetByteLength\x2C\x0d\n  TypedArrayPrototypeFill\x2C\x0d\n  TypedArrayPrototypeSet\x2C\x0d\n  Uint8Array\x2C\x0d\n  Uint8ArrayPrototype\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  byteLengthUtf8\x2C\x0d\n  compare: _compare\x2C\x0d\n  compareOffset\x2C\x0d\n  createFromString\x2C\x0d\n  fill: bindingFill\x2C\x0d\n  indexOfBuffer\x2C\x0d\n  indexOfNumber\x2C\x0d\n  indexOfString\x2C\x0d\n  swap16: _swap16\x2C\x0d\n  swap32: _swap32\x2C\x0d\n  swap64: _swap64\x2C\x0d\n  kMaxLength\x2C\x0d\n  kStringMaxLength\x0d\n} = internalBinding('buffer');\x0d\nconst {\x0d\n  getOwnNonIndexProperties\x2C\x0d\n  propertyFilter: {\x0d\n    ALL_PROPERTIES\x2C\x0d\n    ONLY_ENUMERABLE\x0d\n  }\x2C\x0d\n} = internalBinding('util');\x0d\nconst {\x0d\n  customInspectSymbol\x2C\x0d\n  isInsideNodeModules\x2C\x0d\n  lazyDOMException\x2C\x0d\n  normalizeEncoding\x2C\x0d\n  kIsEncodingSymbol\x0d\n} = require('internal/util');\x0d\nconst {\x0d\n  isAnyArrayBuffer\x2C\x0d\n  isArrayBufferView\x2C\x0d\n  isUint8Array\x0d\n} = require('internal/util/types');\x0d\nconst {\x0d\n  inspect: utilInspect\x0d\n} = require('internal/util/inspect');\x0d\nconst { encodings } = internalBinding('string_decoder');\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_BUFFER_OUT_OF_BOUNDS\x2C\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_INVALID_BUFFER_SIZE\x2C\x0d\n    ERR_OUT_OF_RANGE\x2C\x0d\n    ERR_MISSING_ARGS\x2C\x0d\n    ERR_UNKNOWN_ENCODING\x0d\n  }\x2C\x0d\n  hideStackFrames\x0d\n} = require('internal/errors');\x0d\nconst {\x0d\n  validateArray\x2C\x0d\n  validateBuffer\x2C\x0d\n  validateNumber\x2C\x0d\n  validateInteger\x2C\x0d\n  validateString\x0d\n} = require('internal/validators');\x0d\n// Provide validateInteger() but with kMaxLength as the default maximum value.\x0d\nconst validateOffset = (value\x2C name\x2C min = 0\x2C max = kMaxLength) =>\x0d\n  validateInteger(value\x2C name\x2C min\x2C max);\x0d\n\x0d\nconst {\x0d\n  FastBuffer\x2C\x0d\n  markAsUntransferable\x2C\x0d\n  addBufferPrototypeMethods\x2C\x0d\n  createUnsafeBuffer\x0d\n} = require('internal/buffer');\x0d\n\x0d\nconst {\x0d\n  Blob\x2C\x0d\n  resolveObjectURL\x2C\x0d\n} = require('internal/blob');\x0d\n\x0d\nFastBuffer.prototype.constructor = Buffer;\x0d\nBuffer.prototype = FastBuffer.prototype;\x0d\naddBufferPrototypeMethods(Buffer.prototype);\x0d\n\x0d\nconst constants = ObjectDefineProperties({}\x2C {\x0d\n  MAX_LENGTH: {\x0d\n    value: kMaxLength\x2C\x0d\n    writable: false\x2C\x0d\n    enumerable: true\x0d\n  }\x2C\x0d\n  MAX_STRING_LENGTH: {\x0d\n    value: kStringMaxLength\x2C\x0d\n    writable: false\x2C\x0d\n    enumerable: true\x0d\n  }\x0d\n});\x0d\n\x0d\nBuffer.poolSize = 8 * 1024;\x0d\nlet poolSize\x2C poolOffset\x2C allocPool;\x0d\n\x0d\nconst encodingsMap = ObjectCreate(null);\x0d\nfor (let i = 0; i < encodings.length; ++i)\x0d\n  encodingsMap[encodings[i]] = i;\x0d\n\x0d\nfunction createPool() {\x0d\n  poolSize = Buffer.poolSize;\x0d\n  allocPool = createUnsafeBuffer(poolSize).buffer;\x0d\n  markAsUntransferable(allocPool);\x0d\n  poolOffset = 0;\x0d\n}\x0d\ncreatePool();\x0d\n\x0d\nfunction alignPool() {\x0d\n  // Ensure aligned slices\x0d\n  if (poolOffset & 0x7) {\x0d\n    poolOffset |= 0x7;\x0d\n    poolOffset++;\x0d\n  }\x0d\n}\x0d\n\x0d\nlet bufferWarningAlreadyEmitted = false;\x0d\nlet nodeModulesCheckCounter = 0;\x0d\nconst bufferWarning = 'Buffer() is deprecated due to security and usability ' +\x0d\n                      'issues. Please use the Buffer.alloc()\x2C ' +\x0d\n                      'Buffer.allocUnsafe()\x2C or Buffer.from() methods instead.';\x0d\n\x0d\nfunction showFlaggedDeprecation() {\x0d\n  if (bufferWarningAlreadyEmitted ||\x0d\n      ++nodeModulesCheckCounter > 10000 ||\x0d\n      (!require('internal/options').getOptionValue('--pending-deprecation') &&\x0d\n       isInsideNodeModules())) {\x0d\n    // We don't emit a warning\x2C because we either:\x0d\n    // - Already did so\x2C or\x0d\n    // - Already checked too many times whether a call is coming\x0d\n    //   from node_modules and want to stop slowing down things\x2C or\x0d\n    // - We aren't running with `--pending-deprecation` enabled\x2C\x0d\n    //   and the code is inside `node_modules`.\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  process.emitWarning(bufferWarning\x2C 'DeprecationWarning'\x2C 'DEP0005');\x0d\n  bufferWarningAlreadyEmitted = true;\x0d\n}\x0d\n\x0d\nfunction toInteger(n\x2C defaultVal) {\x0d\n  n = +n;\x0d\n  if (!NumberIsNaN(n) &&\x0d\n      n >= NumberMIN_SAFE_INTEGER &&\x0d\n      n <= NumberMAX_SAFE_INTEGER) {\x0d\n    return ((n % 1) === 0 ? n : MathFloor(n));\x0d\n  }\x0d\n  return defaultVal;\x0d\n}\x0d\n\x0d\nfunction _copy(source\x2C target\x2C targetStart\x2C sourceStart\x2C sourceEnd) {\x0d\n  if (!isUint8Array(source))\x0d\n    throw new ERR_INVALID_ARG_TYPE('source'\x2C ['Buffer'\x2C 'Uint8Array']\x2C source);\x0d\n  if (!isUint8Array(target))\x0d\n    throw new ERR_INVALID_ARG_TYPE('target'\x2C ['Buffer'\x2C 'Uint8Array']\x2C target);\x0d\n\x0d\n  if (targetStart === undefined) {\x0d\n    targetStart = 0;\x0d\n  } else {\x0d\n    targetStart = toInteger(targetStart\x2C 0);\x0d\n    if (targetStart < 0)\x0d\n      throw new ERR_OUT_OF_RANGE('targetStart'\x2C '>= 0'\x2C targetStart);\x0d\n  }\x0d\n\x0d\n  if (sourceStart === undefined) {\x0d\n    sourceStart = 0;\x0d\n  } else {\x0d\n    sourceStart = toInteger(sourceStart\x2C 0);\x0d\n    if (sourceStart < 0)\x0d\n      throw new ERR_OUT_OF_RANGE('sourceStart'\x2C '>= 0'\x2C sourceStart);\x0d\n  }\x0d\n\x0d\n  if (sourceEnd === undefined) {\x0d\n    sourceEnd = source.length;\x0d\n  } else {\x0d\n    sourceEnd = toInteger(sourceEnd\x2C 0);\x0d\n    if (sourceEnd < 0)\x0d\n      throw new ERR_OUT_OF_RANGE('sourceEnd'\x2C '>= 0'\x2C sourceEnd);\x0d\n  }\x0d\n\x0d\n  if (targetStart >= target.length || sourceStart >= sourceEnd)\x0d\n    return 0;\x0d\n\x0d\n  if (sourceStart > source.length) {\x0d\n    throw new ERR_OUT_OF_RANGE('sourceStart'\x2C\x0d\n                               `<= ${source.length}`\x2C\x0d\n                               sourceStart);\x0d\n  }\x0d\n\x0d\n  return _copyActual(source\x2C target\x2C targetStart\x2C sourceStart\x2C sourceEnd);\x0d\n}\x0d\n\x0d\nfunction _copyActual(source\x2C target\x2C targetStart\x2C sourceStart\x2C sourceEnd) {\x0d\n  if (sourceEnd - sourceStart > target.length - targetStart)\x0d\n    sourceEnd = sourceStart + target.length - targetStart;\x0d\n\x0d\n  let nb = sourceEnd - sourceStart;\x0d\n  const sourceLen = source.length - sourceStart;\x0d\n  if (nb > sourceLen)\x0d\n    nb = sourceLen;\x0d\n\x0d\n  if (sourceStart !== 0 || sourceEnd < source.length)\x0d\n    source = new Uint8Array(source.buffer\x2C source.byteOffset + sourceStart\x2C nb);\x0d\n\x0d\n  TypedArrayPrototypeSet(target\x2C source\x2C targetStart);\x0d\n\x0d\n  return nb;\x0d\n}\x0d\n\x0d\n/**\x0d\n * The Buffer() constructor is deprecated in documentation and should not be\x0d\n * used moving forward. Rather\x2C developers should use one of the three new\x0d\n * factory APIs: Buffer.from()\x2C Buffer.allocUnsafe() or Buffer.alloc() based on\x0d\n * their specific needs. There is no runtime deprecation because of the extent\x0d\n * to which the Buffer constructor is used in the ecosystem currently -- a\x0d\n * runtime deprecation would introduce too much breakage at this time. It's not\x0d\n * likely that the Buffer constructors would ever actually be removed.\x0d\n * Deprecation Code: DEP0005\x0d\n */\x0d\nfunction Buffer(arg\x2C encodingOrOffset\x2C length) {\x0d\n  showFlaggedDeprecation();\x0d\n  // Common case.\x0d\n  if (typeof arg === 'number') {\x0d\n    if (typeof encodingOrOffset === 'string') {\x0d\n      throw new ERR_INVALID_ARG_TYPE('string'\x2C 'string'\x2C arg);\x0d\n    }\x0d\n    return Buffer.alloc(arg);\x0d\n  }\x0d\n  return Buffer.from(arg\x2C encodingOrOffset\x2C length);\x0d\n}\x0d\n\x0d\nObjectDefineProperty(Buffer\x2C SymbolSpecies\x2C {\x0d\n  enumerable: false\x2C\x0d\n  configurable: true\x2C\x0d\n  get() { return FastBuffer; }\x0d\n});\x0d\n\x0d\n/**\x0d\n * Functionally equivalent to Buffer(arg\x2C encoding) but throws a TypeError\x0d\n * if value is a number.\x0d\n * Buffer.from(str[\x2C encoding])\x0d\n * Buffer.from(array)\x0d\n * Buffer.from(buffer)\x0d\n * Buffer.from(arrayBuffer[\x2C byteOffset[\x2C length]])\x0d\n */\x0d\nBuffer.from = function from(value\x2C encodingOrOffset\x2C length) {\x0d\n  if (typeof value === 'string')\x0d\n    return fromString(value\x2C encodingOrOffset);\x0d\n\x0d\n  if (typeof value === 'object' && value !== null) {\x0d\n    if (isAnyArrayBuffer(value))\x0d\n      return fromArrayBuffer(value\x2C encodingOrOffset\x2C length);\x0d\n\x0d\n    const valueOf = value.valueOf && value.valueOf();\x0d\n    if (valueOf != null &&\x0d\n        valueOf !== value &&\x0d\n        (typeof valueOf === 'string' || typeof valueOf === 'object')) {\x0d\n      return from(valueOf\x2C encodingOrOffset\x2C length);\x0d\n    }\x0d\n\x0d\n    const b = fromObject(value);\x0d\n    if (b)\x0d\n      return b;\x0d\n\x0d\n    if (typeof value[SymbolToPrimitive] === 'function') {\x0d\n      const primitive = value[SymbolToPrimitive]('string');\x0d\n      if (typeof primitive === 'string') {\x0d\n        return fromString(primitive\x2C encodingOrOffset);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  throw new ERR_INVALID_ARG_TYPE(\x0d\n    'first argument'\x2C\x0d\n    ['string'\x2C 'Buffer'\x2C 'ArrayBuffer'\x2C 'Array'\x2C 'Array-like Object']\x2C\x0d\n    value\x0d\n  );\x0d\n};\x0d\n\x0d\n// Identical to the built-in %TypedArray%.of()\x2C but avoids using the deprecated\x0d\n// Buffer() constructor. Must use arrow function syntax to avoid automatically\x0d\n// adding a `prototype` property and making the function a constructor.\x0d\n//\x0d\n// Refs: https://tc39.github.io/ecma262/#sec-%typedarray%.of\x0d\n// Refs: https://esdiscuss.org/topic/isconstructor#content-11\x0d\nconst of = (...items) => {\x0d\n  const newObj = createUnsafeBuffer(items.length);\x0d\n  for (let k = 0; k < items.length; k++)\x0d\n    newObj[k] = items[k];\x0d\n  return newObj;\x0d\n};\x0d\nBuffer.of = of;\x0d\n\x0d\nObjectSetPrototypeOf(Buffer\x2C Uint8Array);\x0d\n\x0d\n// The 'assertSize' method will remove itself from the callstack when an error\x0d\n// occurs. This is done simply to keep the internal details of the\x0d\n// implementation from bleeding out to users.\x0d\nconst assertSize = hideStackFrames((size) => {\x0d\n  validateNumber(size\x2C 'size');\x0d\n  if (!(size >= 0 && size <= kMaxLength)) {\x0d\n    throw new ERR_INVALID_ARG_VALUE.RangeError('size'\x2C size);\x0d\n  }\x0d\n});\x0d\n\x0d\n/**\x0d\n * Creates a new filled Buffer instance.\x0d\n * alloc(size[\x2C fill[\x2C encoding]])\x0d\n */\x0d\nBuffer.alloc = function alloc(size\x2C fill\x2C encoding) {\x0d\n  assertSize(size);\x0d\n  if (fill !== undefined && fill !== 0 && size > 0) {\x0d\n    const buf = createUnsafeBuffer(size);\x0d\n    return _fill(buf\x2C fill\x2C 0\x2C buf.length\x2C encoding);\x0d\n  }\x0d\n  return new FastBuffer(size);\x0d\n};\x0d\n\x0d\n/**\x0d\n * Equivalent to Buffer(num)\x2C by default creates a non-zero-filled Buffer\x0d\n * instance. If `--zero-fill-buffers` is set\x2C will zero-fill the buffer.\x0d\n */\x0d\nBuffer.allocUnsafe = function allocUnsafe(size) {\x0d\n  assertSize(size);\x0d\n  return allocate(size);\x0d\n};\x0d\n\x0d\n/**\x0d\n * Equivalent to SlowBuffer(num)\x2C by default creates a non-zero-filled\x0d\n * Buffer instance that is not allocated off the pre-initialized pool.\x0d\n * If `--zero-fill-buffers` is set\x2C will zero-fill the buffer.\x0d\n */\x0d\nBuffer.allocUnsafeSlow = function allocUnsafeSlow(size) {\x0d\n  assertSize(size);\x0d\n  return createUnsafeBuffer(size);\x0d\n};\x0d\n\x0d\n// If --zero-fill-buffers command line argument is set\x2C a zero-filled\x0d\n// buffer is returned.\x0d\nfunction SlowBuffer(length) {\x0d\n  assertSize(length);\x0d\n  return createUnsafeBuffer(length);\x0d\n}\x0d\n\x0d\nObjectSetPrototypeOf(SlowBuffer.prototype\x2C Uint8ArrayPrototype);\x0d\nObjectSetPrototypeOf(SlowBuffer\x2C Uint8Array);\x0d\n\x0d\nfunction allocate(size) {\x0d\n  if (size <= 0) {\x0d\n    return new FastBuffer();\x0d\n  }\x0d\n  if (size < (Buffer.poolSize >>> 1)) {\x0d\n    if (size > (poolSize - poolOffset))\x0d\n      createPool();\x0d\n    const b = new FastBuffer(allocPool\x2C poolOffset\x2C size);\x0d\n    poolOffset += size;\x0d\n    alignPool();\x0d\n    return b;\x0d\n  }\x0d\n  return createUnsafeBuffer(size);\x0d\n}\x0d\n\x0d\nfunction fromStringFast(string\x2C ops) {\x0d\n  const length = ops.byteLength(string);\x0d\n\x0d\n  if (length >= (Buffer.poolSize >>> 1))\x0d\n    return createFromString(string\x2C ops.encodingVal);\x0d\n\x0d\n  if (length > (poolSize - poolOffset))\x0d\n    createPool();\x0d\n  let b = new FastBuffer(allocPool\x2C poolOffset\x2C length);\x0d\n  const actual = ops.write(b\x2C string\x2C 0\x2C length);\x0d\n  if (actual !== length) {\x0d\n    // byteLength() may overestimate. That's a rare case\x2C though.\x0d\n    b = new FastBuffer(allocPool\x2C poolOffset\x2C actual);\x0d\n  }\x0d\n  poolOffset += actual;\x0d\n  alignPool();\x0d\n  return b;\x0d\n}\x0d\n\x0d\nfunction fromString(string\x2C encoding) {\x0d\n  let ops;\x0d\n  if (typeof encoding !== 'string' || encoding.length === 0) {\x0d\n    if (string.length === 0)\x0d\n      return new FastBuffer();\x0d\n    ops = encodingOps.utf8;\x0d\n    encoding = undefined;\x0d\n  } else {\x0d\n    ops = getEncodingOps(encoding);\x0d\n    if (ops === undefined)\x0d\n      throw new ERR_UNKNOWN_ENCODING(encoding);\x0d\n    if (string.length === 0)\x0d\n      return new FastBuffer();\x0d\n  }\x0d\n  return fromStringFast(string\x2C ops);\x0d\n}\x0d\n\x0d\nfunction fromArrayBuffer(obj\x2C byteOffset\x2C length) {\x0d\n  // Convert byteOffset to integer\x0d\n  if (byteOffset === undefined) {\x0d\n    byteOffset = 0;\x0d\n  } else {\x0d\n    byteOffset = +byteOffset;\x0d\n    if (NumberIsNaN(byteOffset))\x0d\n      byteOffset = 0;\x0d\n  }\x0d\n\x0d\n  const maxLength = obj.byteLength - byteOffset;\x0d\n\x0d\n  if (maxLength < 0)\x0d\n    throw new ERR_BUFFER_OUT_OF_BOUNDS('offset');\x0d\n\x0d\n  if (length === undefined) {\x0d\n    length = maxLength;\x0d\n  } else {\x0d\n    // Convert length to non-negative integer.\x0d\n    length = +length;\x0d\n    if (length > 0) {\x0d\n      if (length > maxLength)\x0d\n        throw new ERR_BUFFER_OUT_OF_BOUNDS('length');\x0d\n    } else {\x0d\n      length = 0;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return new FastBuffer(obj\x2C byteOffset\x2C length);\x0d\n}\x0d\n\x0d\nfunction fromArrayLike(obj) {\x0d\n  if (obj.length <= 0)\x0d\n    return new FastBuffer();\x0d\n  if (obj.length < (Buffer.poolSize >>> 1)) {\x0d\n    if (obj.length > (poolSize - poolOffset))\x0d\n      createPool();\x0d\n    const b = new FastBuffer(allocPool\x2C poolOffset\x2C obj.length);\x0d\n    TypedArrayPrototypeSet(b\x2C obj\x2C 0);\x0d\n    poolOffset += obj.length;\x0d\n    alignPool();\x0d\n    return b;\x0d\n  }\x0d\n  return new FastBuffer(obj);\x0d\n}\x0d\n\x0d\nfunction fromObject(obj) {\x0d\n  if (obj.length !== undefined || isAnyArrayBuffer(obj.buffer)) {\x0d\n    if (typeof obj.length !== 'number') {\x0d\n      return new FastBuffer();\x0d\n    }\x0d\n    return fromArrayLike(obj);\x0d\n  }\x0d\n\x0d\n  if (obj.type === 'Buffer' && ArrayIsArray(obj.data)) {\x0d\n    return fromArrayLike(obj.data);\x0d\n  }\x0d\n}\x0d\n\x0d\n// Static methods\x0d\n\x0d\nBuffer.isBuffer = function isBuffer(b) {\x0d\n  return b instanceof Buffer;\x0d\n};\x0d\n\x0d\nBuffer.compare = function compare(buf1\x2C buf2) {\x0d\n  if (!isUint8Array(buf1)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE('buf1'\x2C ['Buffer'\x2C 'Uint8Array']\x2C buf1);\x0d\n  }\x0d\n\x0d\n  if (!isUint8Array(buf2)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE('buf2'\x2C ['Buffer'\x2C 'Uint8Array']\x2C buf2);\x0d\n  }\x0d\n\x0d\n  if (buf1 === buf2) {\x0d\n    return 0;\x0d\n  }\x0d\n\x0d\n  return _compare(buf1\x2C buf2);\x0d\n};\x0d\n\x0d\nBuffer.isEncoding = function isEncoding(encoding) {\x0d\n  return typeof encoding === 'string' && encoding.length !== 0 &&\x0d\n         normalizeEncoding(encoding) !== undefined;\x0d\n};\x0d\nBuffer[kIsEncodingSymbol] = Buffer.isEncoding;\x0d\n\x0d\nBuffer.concat = function concat(list\x2C length) {\x0d\n  validateArray(list\x2C 'list');\x0d\n\x0d\n  if (list.length === 0)\x0d\n    return new FastBuffer();\x0d\n\x0d\n  if (length === undefined) {\x0d\n    length = 0;\x0d\n    for (let i = 0; i < list.length; i++) {\x0d\n      if (list[i].length) {\x0d\n        length += list[i].length;\x0d\n      }\x0d\n    }\x0d\n  } else {\x0d\n    validateOffset(length\x2C 'length');\x0d\n  }\x0d\n\x0d\n  const buffer = Buffer.allocUnsafe(length);\x0d\n  let pos = 0;\x0d\n  for (let i = 0; i < list.length; i++) {\x0d\n    const buf = list[i];\x0d\n    if (!isUint8Array(buf)) {\x0d\n      // TODO(BridgeAR): This should not be of type ERR_INVALID_ARG_TYPE.\x0d\n      // Instead\x2C find the proper error code for this.\x0d\n      throw new ERR_INVALID_ARG_TYPE(\x0d\n        `list[${i}]`\x2C ['Buffer'\x2C 'Uint8Array']\x2C list[i]);\x0d\n    }\x0d\n    pos += _copyActual(buf\x2C buffer\x2C pos\x2C 0\x2C buf.length);\x0d\n  }\x0d\n\x0d\n  // Note: `length` is always equal to `buffer.length` at this point\x0d\n  if (pos < length) {\x0d\n    // Zero-fill the remaining bytes if the specified `length` was more than\x0d\n    // the actual total length\x2C i.e. if we have some remaining allocated bytes\x0d\n    // there were not initialized.\x0d\n    TypedArrayPrototypeFill(buffer\x2C 0\x2C pos\x2C length);\x0d\n  }\x0d\n\x0d\n  return buffer;\x0d\n};\x0d\n\x0d\nfunction base64ByteLength(str\x2C bytes) {\x0d\n  // Handle padding\x0d\n  if (StringPrototypeCharCodeAt(str\x2C bytes - 1) === 0x3D)\x0d\n    bytes--;\x0d\n  if (bytes > 1 && StringPrototypeCharCodeAt(str\x2C bytes - 1) === 0x3D)\x0d\n    bytes--;\x0d\n\x0d\n  // Base64 ratio: 3/4\x0d\n  return (bytes * 3) >>> 2;\x0d\n}\x0d\n\x0d\nconst encodingOps = {\x0d\n  utf8: {\x0d\n    encoding: 'utf8'\x2C\x0d\n    encodingVal: encodingsMap.utf8\x2C\x0d\n    byteLength: byteLengthUtf8\x2C\x0d\n    write: (buf\x2C string\x2C offset\x2C len) => buf.utf8Write(string\x2C offset\x2C len)\x2C\x0d\n    slice: (buf\x2C start\x2C end) => buf.utf8Slice(start\x2C end)\x2C\x0d\n    indexOf: (buf\x2C val\x2C byteOffset\x2C dir) =>\x0d\n      indexOfString(buf\x2C val\x2C byteOffset\x2C encodingsMap.utf8\x2C dir)\x0d\n  }\x2C\x0d\n  ucs2: {\x0d\n    encoding: 'ucs2'\x2C\x0d\n    encodingVal: encodingsMap.utf16le\x2C\x0d\n    byteLength: (string) => string.length * 2\x2C\x0d\n    write: (buf\x2C string\x2C offset\x2C len) => buf.ucs2Write(string\x2C offset\x2C len)\x2C\x0d\n    slice: (buf\x2C start\x2C end) => buf.ucs2Slice(start\x2C end)\x2C\x0d\n    indexOf: (buf\x2C val\x2C byteOffset\x2C dir) =>\x0d\n      indexOfString(buf\x2C val\x2C byteOffset\x2C encodingsMap.utf16le\x2C dir)\x0d\n  }\x2C\x0d\n  utf16le: {\x0d\n    encoding: 'utf16le'\x2C\x0d\n    encodingVal: encodingsMap.utf16le\x2C\x0d\n    byteLength: (string) => string.length * 2\x2C\x0d\n    write: (buf\x2C string\x2C offset\x2C len) => buf.ucs2Write(string\x2C offset\x2C len)\x2C\x0d\n    slice: (buf\x2C start\x2C end) => buf.ucs2Slice(start\x2C end)\x2C\x0d\n    indexOf: (buf\x2C val\x2C byteOffset\x2C dir) =>\x0d\n      indexOfString(buf\x2C val\x2C byteOffset\x2C encodingsMap.utf16le\x2C dir)\x0d\n  }\x2C\x0d\n  latin1: {\x0d\n    encoding: 'latin1'\x2C\x0d\n    encodingVal: encodingsMap.latin1\x2C\x0d\n    byteLength: (string) => string.length\x2C\x0d\n    write: (buf\x2C string\x2C offset\x2C len) => buf.latin1Write(string\x2C offset\x2C len)\x2C\x0d\n    slice: (buf\x2C start\x2C end) => buf.latin1Slice(start\x2C end)\x2C\x0d\n    indexOf: (buf\x2C val\x2C byteOffset\x2C dir) =>\x0d\n      indexOfString(buf\x2C val\x2C byteOffset\x2C encodingsMap.latin1\x2C dir)\x0d\n  }\x2C\x0d\n  ascii: {\x0d\n    encoding: 'ascii'\x2C\x0d\n    encodingVal: encodingsMap.ascii\x2C\x0d\n    byteLength: (string) => string.length\x2C\x0d\n    write: (buf\x2C string\x2C offset\x2C len) => buf.asciiWrite(string\x2C offset\x2C len)\x2C\x0d\n    slice: (buf\x2C start\x2C end) => buf.asciiSlice(start\x2C end)\x2C\x0d\n    indexOf: (buf\x2C val\x2C byteOffset\x2C dir) =>\x0d\n      indexOfBuffer(buf\x2C\x0d\n                    fromStringFast(val\x2C encodingOps.ascii)\x2C\x0d\n                    byteOffset\x2C\x0d\n                    encodingsMap.ascii\x2C\x0d\n                    dir)\x0d\n  }\x2C\x0d\n  base64: {\x0d\n    encoding: 'base64'\x2C\x0d\n    encodingVal: encodingsMap.base64\x2C\x0d\n    byteLength: (string) => base64ByteLength(string\x2C string.length)\x2C\x0d\n    write: (buf\x2C string\x2C offset\x2C len) => buf.base64Write(string\x2C offset\x2C len)\x2C\x0d\n    slice: (buf\x2C start\x2C end) => buf.base64Slice(start\x2C end)\x2C\x0d\n    indexOf: (buf\x2C val\x2C byteOffset\x2C dir) =>\x0d\n      indexOfBuffer(buf\x2C\x0d\n                    fromStringFast(val\x2C encodingOps.base64)\x2C\x0d\n                    byteOffset\x2C\x0d\n                    encodingsMap.base64\x2C\x0d\n                    dir)\x0d\n  }\x2C\x0d\n  base64url: {\x0d\n    encoding: 'base64url'\x2C\x0d\n    encodingVal: encodingsMap.base64url\x2C\x0d\n    byteLength: (string) => base64ByteLength(string\x2C string.length)\x2C\x0d\n    write: (buf\x2C string\x2C offset\x2C len) =>\x0d\n      buf.base64urlWrite(string\x2C offset\x2C len)\x2C\x0d\n    slice: (buf\x2C start\x2C end) => buf.base64urlSlice(start\x2C end)\x2C\x0d\n    indexOf: (buf\x2C val\x2C byteOffset\x2C dir) =>\x0d\n      indexOfBuffer(buf\x2C\x0d\n                    fromStringFast(val\x2C encodingOps.base64url)\x2C\x0d\n                    byteOffset\x2C\x0d\n                    encodingsMap.base64url\x2C\x0d\n                    dir)\x0d\n  }\x2C\x0d\n  hex: {\x0d\n    encoding: 'hex'\x2C\x0d\n    encodingVal: encodingsMap.hex\x2C\x0d\n    byteLength: (string) => string.length >>> 1\x2C\x0d\n    write: (buf\x2C string\x2C offset\x2C len) => buf.hexWrite(string\x2C offset\x2C len)\x2C\x0d\n    slice: (buf\x2C start\x2C end) => buf.hexSlice(start\x2C end)\x2C\x0d\n    indexOf: (buf\x2C val\x2C byteOffset\x2C dir) =>\x0d\n      indexOfBuffer(buf\x2C\x0d\n                    fromStringFast(val\x2C encodingOps.hex)\x2C\x0d\n                    byteOffset\x2C\x0d\n                    encodingsMap.hex\x2C\x0d\n                    dir)\x0d\n  }\x0d\n};\x0d\nfunction getEncodingOps(encoding) {\x0d\n  encoding += '';\x0d\n  switch (encoding.length) {\x0d\n    case 4:\x0d\n      if (encoding === 'utf8') return encodingOps.utf8;\x0d\n      if (encoding === 'ucs2') return encodingOps.ucs2;\x0d\n      encoding = StringPrototypeToLowerCase(encoding);\x0d\n      if (encoding === 'utf8') return encodingOps.utf8;\x0d\n      if (encoding === 'ucs2') return encodingOps.ucs2;\x0d\n      break;\x0d\n    case 5:\x0d\n      if (encoding === 'utf-8') return encodingOps.utf8;\x0d\n      if (encoding === 'ascii') return encodingOps.ascii;\x0d\n      if (encoding === 'ucs-2') return encodingOps.ucs2;\x0d\n      encoding = StringPrototypeToLowerCase(encoding);\x0d\n      if (encoding === 'utf-8') return encodingOps.utf8;\x0d\n      if (encoding === 'ascii') return encodingOps.ascii;\x0d\n      if (encoding === 'ucs-2') return encodingOps.ucs2;\x0d\n      break;\x0d\n    case 7:\x0d\n      if (encoding === 'utf16le' ||\x0d\n          StringPrototypeToLowerCase(encoding) === 'utf16le')\x0d\n        return encodingOps.utf16le;\x0d\n      break;\x0d\n    case 8:\x0d\n      if (encoding === 'utf-16le' ||\x0d\n          StringPrototypeToLowerCase(encoding) === 'utf-16le')\x0d\n        return encodingOps.utf16le;\x0d\n      break;\x0d\n    case 6:\x0d\n      if (encoding === 'latin1' || encoding === 'binary')\x0d\n        return encodingOps.latin1;\x0d\n      if (encoding === 'base64') return encodingOps.base64;\x0d\n      encoding = StringPrototypeToLowerCase(encoding);\x0d\n      if (encoding === 'latin1' || encoding === 'binary')\x0d\n        return encodingOps.latin1;\x0d\n      if (encoding === 'base64') return encodingOps.base64;\x0d\n      break;\x0d\n    case 3:\x0d\n      if (encoding === 'hex' || StringPrototypeToLowerCase(encoding) === 'hex')\x0d\n        return encodingOps.hex;\x0d\n      break;\x0d\n    case 9:\x0d\n      if (encoding === 'base64url' ||\x0d\n          StringPrototypeToLowerCase(encoding) === 'base64url')\x0d\n        return encodingOps.base64url;\x0d\n      break;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction byteLength(string\x2C encoding) {\x0d\n  if (typeof string !== 'string') {\x0d\n    if (isArrayBufferView(string) || isAnyArrayBuffer(string)) {\x0d\n      return string.byteLength;\x0d\n    }\x0d\n\x0d\n    throw new ERR_INVALID_ARG_TYPE(\x0d\n      'string'\x2C ['string'\x2C 'Buffer'\x2C 'ArrayBuffer']\x2C string\x0d\n    );\x0d\n  }\x0d\n\x0d\n  const len = string.length;\x0d\n  const mustMatch = (arguments.length > 2 && arguments[2] === true);\x0d\n  if (!mustMatch && len === 0)\x0d\n    return 0;\x0d\n\x0d\n  if (!encoding)\x0d\n    return (mustMatch ? -1 : byteLengthUtf8(string));\x0d\n\x0d\n  const ops = getEncodingOps(encoding);\x0d\n  if (ops === undefined)\x0d\n    return (mustMatch ? -1 : byteLengthUtf8(string));\x0d\n  return ops.byteLength(string);\x0d\n}\x0d\n\x0d\nBuffer.byteLength = byteLength;\x0d\n\x0d\n// For backwards compatibility.\x0d\nObjectDefineProperty(Buffer.prototype\x2C 'parent'\x2C {\x0d\n  enumerable: true\x2C\x0d\n  get() {\x0d\n    if (!(this instanceof Buffer))\x0d\n      return undefined;\x0d\n    return this.buffer;\x0d\n  }\x0d\n});\x0d\nObjectDefineProperty(Buffer.prototype\x2C 'offset'\x2C {\x0d\n  enumerable: true\x2C\x0d\n  get() {\x0d\n    if (!(this instanceof Buffer))\x0d\n      return undefined;\x0d\n    return this.byteOffset;\x0d\n  }\x0d\n});\x0d\n\x0d\nBuffer.prototype.copy =\x0d\n  function copy(target\x2C targetStart\x2C sourceStart\x2C sourceEnd) {\x0d\n    return _copy(this\x2C target\x2C targetStart\x2C sourceStart\x2C sourceEnd);\x0d\n  };\x0d\n\x0d\n// No need to verify that "buf.length <= MAX_UINT32" since it's a read-only\x0d\n// property of a typed array.\x0d\n// This behaves neither like String nor Uint8Array in that we set start/end\x0d\n// to their upper/lower bounds if the value passed is out of range.\x0d\nBuffer.prototype.toString = function toString(encoding\x2C start\x2C end) {\x0d\n  if (arguments.length === 0) {\x0d\n    return this.utf8Slice(0\x2C this.length);\x0d\n  }\x0d\n\x0d\n  const len = this.length;\x0d\n\x0d\n  if (start <= 0)\x0d\n    start = 0;\x0d\n  else if (start >= len)\x0d\n    return '';\x0d\n  else\x0d\n    start |= 0;\x0d\n\x0d\n  if (end === undefined || end > len)\x0d\n    end = len;\x0d\n  else\x0d\n    end |= 0;\x0d\n\x0d\n  if (end <= start)\x0d\n    return '';\x0d\n\x0d\n  if (encoding === undefined)\x0d\n    return this.utf8Slice(start\x2C end);\x0d\n\x0d\n  const ops = getEncodingOps(encoding);\x0d\n  if (ops === undefined)\x0d\n    throw new ERR_UNKNOWN_ENCODING(encoding);\x0d\n\x0d\n  return ops.slice(this\x2C start\x2C end);\x0d\n};\x0d\n\x0d\nBuffer.prototype.equals = function equals(otherBuffer) {\x0d\n  if (!isUint8Array(otherBuffer)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(\x0d\n      'otherBuffer'\x2C ['Buffer'\x2C 'Uint8Array']\x2C otherBuffer);\x0d\n  }\x0d\n\x0d\n  if (this === otherBuffer)\x0d\n    return true;\x0d\n\x0d\n  if (this.byteLength !== otherBuffer.byteLength)\x0d\n    return false;\x0d\n\x0d\n  return this.byteLength === 0 || _compare(this\x2C otherBuffer) === 0;\x0d\n};\x0d\n\x0d\nlet INSPECT_MAX_BYTES = 50;\x0d\n// Override how buffers are presented by util.inspect().\x0d\nBuffer.prototype[customInspectSymbol] = function inspect(recurseTimes\x2C ctx) {\x0d\n  const max = INSPECT_MAX_BYTES;\x0d\n  const actualMax = MathMin(max\x2C this.length);\x0d\n  const remaining = this.length - max;\x0d\n  let str = StringPrototypeTrim(StringPrototypeReplace(\x0d\n    this.hexSlice(0\x2C actualMax)\x2C /(.{2})/g\x2C '$1 '));\x0d\n  if (remaining > 0)\x0d\n    str += ` ... ${remaining} more byte${remaining > 1 ? 's' : ''}`;\x0d\n  // Inspect special properties as well\x2C if possible.\x0d\n  if (ctx) {\x0d\n    let extras = false;\x0d\n    const filter = ctx.showHidden ? ALL_PROPERTIES : ONLY_ENUMERABLE;\x0d\n    const obj = ObjectCreate(null);\x0d\n    ArrayPrototypeForEach(getOwnNonIndexProperties(this\x2C filter)\x2C\x0d\n                          (key) => {\x0d\n                            extras = true;\x0d\n                            obj[key] = this[key];\x0d\n                          });\x0d\n    if (extras) {\x0d\n      if (this.length !== 0)\x0d\n        str += '\x2C ';\x0d\n      // '[Object: null prototype] {'.length === 26\x0d\n      // This is guarded with a test.\x0d\n      str += StringPrototypeSlice(utilInspect(obj\x2C {\x0d\n        ...ctx\x2C\x0d\n        breakLength: Infinity\x2C\x0d\n        compact: true\x0d\n      })\x2C 27\x2C -2);\x0d\n    }\x0d\n  }\x0d\n  return `<${this.constructor.name} ${str}>`;\x0d\n};\x0d\nBuffer.prototype.inspect = Buffer.prototype[customInspectSymbol];\x0d\n\x0d\nBuffer.prototype.compare = function compare(target\x2C\x0d\n                                            targetStart\x2C\x0d\n                                            targetEnd\x2C\x0d\n                                            sourceStart\x2C\x0d\n                                            sourceEnd) {\x0d\n  if (!isUint8Array(target)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE('target'\x2C ['Buffer'\x2C 'Uint8Array']\x2C target);\x0d\n  }\x0d\n  if (arguments.length === 1)\x0d\n    return _compare(this\x2C target);\x0d\n\x0d\n  if (targetStart === undefined)\x0d\n    targetStart = 0;\x0d\n  else\x0d\n    validateOffset(targetStart\x2C 'targetStart');\x0d\n\x0d\n  if (targetEnd === undefined)\x0d\n    targetEnd = target.length;\x0d\n  else\x0d\n    validateOffset(targetEnd\x2C 'targetEnd'\x2C 0\x2C target.length);\x0d\n\x0d\n  if (sourceStart === undefined)\x0d\n    sourceStart = 0;\x0d\n  else\x0d\n    validateOffset(sourceStart\x2C 'sourceStart');\x0d\n\x0d\n  if (sourceEnd === undefined)\x0d\n    sourceEnd = this.length;\x0d\n  else\x0d\n    validateOffset(sourceEnd\x2C 'sourceEnd'\x2C 0\x2C this.length);\x0d\n\x0d\n  if (sourceStart >= sourceEnd)\x0d\n    return (targetStart >= targetEnd ? 0 : -1);\x0d\n  if (targetStart >= targetEnd)\x0d\n    return 1;\x0d\n\x0d\n  return compareOffset(this\x2C target\x2C targetStart\x2C sourceStart\x2C targetEnd\x2C\x0d\n                       sourceEnd);\x0d\n};\x0d\n\x0d\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`\x2C\x0d\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\x0d\n//\x0d\n// Arguments:\x0d\n// - buffer - a Buffer to search\x0d\n// - val - a string\x2C Buffer\x2C or number\x0d\n// - byteOffset - an index into `buffer`; will be clamped to an int32\x0d\n// - encoding - an optional encoding\x2C relevant if val is a string\x0d\n// - dir - true for indexOf\x2C false for lastIndexOf\x0d\nfunction bidirectionalIndexOf(buffer\x2C val\x2C byteOffset\x2C encoding\x2C dir) {\x0d\n  validateBuffer(buffer);\x0d\n\x0d\n  if (typeof byteOffset === 'string') {\x0d\n    encoding = byteOffset;\x0d\n    byteOffset = undefined;\x0d\n  } else if (byteOffset > 0x7fffffff) {\x0d\n    byteOffset = 0x7fffffff;\x0d\n  } else if (byteOffset < -0x80000000) {\x0d\n    byteOffset = -0x80000000;\x0d\n  }\x0d\n  // Coerce to Number. Values like null and [] become 0.\x0d\n  byteOffset = +byteOffset;\x0d\n  // If the offset is undefined\x2C "foo"\x2C {}\x2C coerces to NaN\x2C search whole buffer.\x0d\n  if (NumberIsNaN(byteOffset)) {\x0d\n    byteOffset = dir ? 0 : (buffer.length || buffer.byteLength);\x0d\n  }\x0d\n  dir = !!dir;  // Cast to bool.\x0d\n\x0d\n  if (typeof val === 'number')\x0d\n    return indexOfNumber(buffer\x2C val >>> 0\x2C byteOffset\x2C dir);\x0d\n\x0d\n  let ops;\x0d\n  if (encoding === undefined)\x0d\n    ops = encodingOps.utf8;\x0d\n  else\x0d\n    ops = getEncodingOps(encoding);\x0d\n\x0d\n  if (typeof val === 'string') {\x0d\n    if (ops === undefined)\x0d\n      throw new ERR_UNKNOWN_ENCODING(encoding);\x0d\n    return ops.indexOf(buffer\x2C val\x2C byteOffset\x2C dir);\x0d\n  }\x0d\n\x0d\n  if (isUint8Array(val)) {\x0d\n    const encodingVal =\x0d\n      (ops === undefined ? encodingsMap.utf8 : ops.encodingVal);\x0d\n    return indexOfBuffer(buffer\x2C val\x2C byteOffset\x2C encodingVal\x2C dir);\x0d\n  }\x0d\n\x0d\n  throw new ERR_INVALID_ARG_TYPE(\x0d\n    'value'\x2C ['number'\x2C 'string'\x2C 'Buffer'\x2C 'Uint8Array']\x2C val\x0d\n  );\x0d\n}\x0d\n\x0d\nBuffer.prototype.indexOf = function indexOf(val\x2C byteOffset\x2C encoding) {\x0d\n  return bidirectionalIndexOf(this\x2C val\x2C byteOffset\x2C encoding\x2C true);\x0d\n};\x0d\n\x0d\nBuffer.prototype.lastIndexOf = function lastIndexOf(val\x2C byteOffset\x2C encoding) {\x0d\n  return bidirectionalIndexOf(this\x2C val\x2C byteOffset\x2C encoding\x2C false);\x0d\n};\x0d\n\x0d\nBuffer.prototype.includes = function includes(val\x2C byteOffset\x2C encoding) {\x0d\n  return this.indexOf(val\x2C byteOffset\x2C encoding) !== -1;\x0d\n};\x0d\n\x0d\n// Usage:\x0d\n//    buffer.fill(number[\x2C offset[\x2C end]])\x0d\n//    buffer.fill(buffer[\x2C offset[\x2C end]])\x0d\n//    buffer.fill(string[\x2C offset[\x2C end]][\x2C encoding])\x0d\nBuffer.prototype.fill = function fill(value\x2C offset\x2C end\x2C encoding) {\x0d\n  return _fill(this\x2C value\x2C offset\x2C end\x2C encoding);\x0d\n};\x0d\n\x0d\nfunction _fill(buf\x2C value\x2C offset\x2C end\x2C encoding) {\x0d\n  if (typeof value === 'string') {\x0d\n    if (offset === undefined || typeof offset === 'string') {\x0d\n      encoding = offset;\x0d\n      offset = 0;\x0d\n      end = buf.length;\x0d\n    } else if (typeof end === 'string') {\x0d\n      encoding = end;\x0d\n      end = buf.length;\x0d\n    }\x0d\n\x0d\n    const normalizedEncoding = normalizeEncoding(encoding);\x0d\n    if (normalizedEncoding === undefined) {\x0d\n      validateString(encoding\x2C 'encoding');\x0d\n      throw new ERR_UNKNOWN_ENCODING(encoding);\x0d\n    }\x0d\n\x0d\n    if (value.length === 0) {\x0d\n      // If value === '' default to zero.\x0d\n      value = 0;\x0d\n    } else if (value.length === 1) {\x0d\n      // Fast path: If `value` fits into a single byte\x2C use that numeric value.\x0d\n      if (normalizedEncoding === 'utf8') {\x0d\n        const code = StringPrototypeCharCodeAt(value\x2C 0);\x0d\n        if (code < 128) {\x0d\n          value = code;\x0d\n        }\x0d\n      } else if (normalizedEncoding === 'latin1') {\x0d\n        value = StringPrototypeCharCodeAt(value\x2C 0);\x0d\n      }\x0d\n    }\x0d\n  } else {\x0d\n    encoding = undefined;\x0d\n  }\x0d\n\x0d\n  if (offset === undefined) {\x0d\n    offset = 0;\x0d\n    end = buf.length;\x0d\n  } else {\x0d\n    validateOffset(offset\x2C 'offset');\x0d\n    // Invalid ranges are not set to a default\x2C so can range check early.\x0d\n    if (end === undefined) {\x0d\n      end = buf.length;\x0d\n    } else {\x0d\n      validateOffset(end\x2C 'end'\x2C 0\x2C buf.length);\x0d\n    }\x0d\n    if (offset >= end)\x0d\n      return buf;\x0d\n  }\x0d\n\x0d\n\x0d\n  if (typeof value === 'number') {\x0d\n    // OOB check\x0d\n    const byteLen = TypedArrayPrototypeGetByteLength(buf);\x0d\n    const fillLength = end - offset;\x0d\n    if (offset > end || fillLength + offset > byteLen)\x0d\n      throw new ERR_BUFFER_OUT_OF_BOUNDS();\x0d\n\x0d\n    TypedArrayPrototypeFill(buf\x2C value\x2C offset\x2C end);\x0d\n  } else {\x0d\n    const res = bindingFill(buf\x2C value\x2C offset\x2C end\x2C encoding);\x0d\n    if (res < 0) {\x0d\n      if (res === -1)\x0d\n        throw new ERR_INVALID_ARG_VALUE('value'\x2C value);\x0d\n      throw new ERR_BUFFER_OUT_OF_BOUNDS();\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return buf;\x0d\n}\x0d\n\x0d\nBuffer.prototype.write = function write(string\x2C offset\x2C length\x2C encoding) {\x0d\n  // Buffer#write(string);\x0d\n  if (offset === undefined) {\x0d\n    return this.utf8Write(string\x2C 0\x2C this.length);\x0d\n  }\x0d\n  // Buffer#write(string\x2C encoding)\x0d\n  if (length === undefined && typeof offset === 'string') {\x0d\n    encoding = offset;\x0d\n    length = this.length;\x0d\n    offset = 0;\x0d\n\x0d\n  // Buffer#write(string\x2C offset[\x2C length][\x2C encoding])\x0d\n  } else {\x0d\n    validateOffset(offset\x2C 'offset'\x2C 0\x2C this.length);\x0d\n\x0d\n    const remaining = this.length - offset;\x0d\n\x0d\n    if (length === undefined) {\x0d\n      length = remaining;\x0d\n    } else if (typeof length === 'string') {\x0d\n      encoding = length;\x0d\n      length = remaining;\x0d\n    } else {\x0d\n      validateOffset(length\x2C 'length'\x2C 0\x2C this.length);\x0d\n      if (length > remaining)\x0d\n        length = remaining;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (!encoding)\x0d\n    return this.utf8Write(string\x2C offset\x2C length);\x0d\n\x0d\n  const ops = getEncodingOps(encoding);\x0d\n  if (ops === undefined)\x0d\n    throw new ERR_UNKNOWN_ENCODING(encoding);\x0d\n  return ops.write(this\x2C string\x2C offset\x2C length);\x0d\n};\x0d\n\x0d\nBuffer.prototype.toJSON = function toJSON() {\x0d\n  if (this.length > 0) {\x0d\n    const data = new Array(this.length);\x0d\n    for (let i = 0; i < this.length; ++i)\x0d\n      data[i] = this[i];\x0d\n    return { type: 'Buffer'\x2C data };\x0d\n  }\x0d\n  return { type: 'Buffer'\x2C data: [] };\x0d\n};\x0d\n\x0d\nfunction adjustOffset(offset\x2C length) {\x0d\n  // Use Math.trunc() to convert offset to an integer value that can be larger\x0d\n  // than an Int32. Hence\x2C don't use offset | 0 or similar techniques.\x0d\n  offset = MathTrunc(offset);\x0d\n  if (offset === 0) {\x0d\n    return 0;\x0d\n  }\x0d\n  if (offset < 0) {\x0d\n    offset += length;\x0d\n    return offset > 0 ? offset : 0;\x0d\n  }\x0d\n  if (offset < length) {\x0d\n    return offset;\x0d\n  }\x0d\n  return NumberIsNaN(offset) ? 0 : length;\x0d\n}\x0d\n\x0d\nBuffer.prototype.slice = function slice(start\x2C end) {\x0d\n  const srcLength = this.length;\x0d\n  start = adjustOffset(start\x2C srcLength);\x0d\n  end = end !== undefined ? adjustOffset(end\x2C srcLength) : srcLength;\x0d\n  const newLength = end > start ? end - start : 0;\x0d\n  return new FastBuffer(this.buffer\x2C this.byteOffset + start\x2C newLength);\x0d\n};\x0d\n\x0d\nfunction swap(b\x2C n\x2C m) {\x0d\n  const i = b[n];\x0d\n  b[n] = b[m];\x0d\n  b[m] = i;\x0d\n}\x0d\n\x0d\nBuffer.prototype.swap16 = function swap16() {\x0d\n  // For Buffer.length < 128\x2C it's generally faster to\x0d\n  // do the swap in javascript. For larger buffers\x2C\x0d\n  // dropping down to the native code is faster.\x0d\n  const len = this.length;\x0d\n  if (len % 2 !== 0)\x0d\n    throw new ERR_INVALID_BUFFER_SIZE('16-bits');\x0d\n  if (len < 128) {\x0d\n    for (let i = 0; i < len; i += 2)\x0d\n      swap(this\x2C i\x2C i + 1);\x0d\n    return this;\x0d\n  }\x0d\n  return _swap16(this);\x0d\n};\x0d\n\x0d\nBuffer.prototype.swap32 = function swap32() {\x0d\n  // For Buffer.length < 192\x2C it's generally faster to\x0d\n  // do the swap in javascript. For larger buffers\x2C\x0d\n  // dropping down to the native code is faster.\x0d\n  const len = this.length;\x0d\n  if (len % 4 !== 0)\x0d\n    throw new ERR_INVALID_BUFFER_SIZE('32-bits');\x0d\n  if (len < 192) {\x0d\n    for (let i = 0; i < len; i += 4) {\x0d\n      swap(this\x2C i\x2C i + 3);\x0d\n      swap(this\x2C i + 1\x2C i + 2);\x0d\n    }\x0d\n    return this;\x0d\n  }\x0d\n  return _swap32(this);\x0d\n};\x0d\n\x0d\nBuffer.prototype.swap64 = function swap64() {\x0d\n  // For Buffer.length < 192\x2C it's generally faster to\x0d\n  // do the swap in javascript. For larger buffers\x2C\x0d\n  // dropping down to the native code is faster.\x0d\n  const len = this.length;\x0d\n  if (len % 8 !== 0)\x0d\n    throw new ERR_INVALID_BUFFER_SIZE('64-bits');\x0d\n  if (len < 192) {\x0d\n    for (let i = 0; i < len; i += 8) {\x0d\n      swap(this\x2C i\x2C i + 7);\x0d\n      swap(this\x2C i + 1\x2C i + 6);\x0d\n      swap(this\x2C i + 2\x2C i + 5);\x0d\n      swap(this\x2C i + 3\x2C i + 4);\x0d\n    }\x0d\n    return this;\x0d\n  }\x0d\n  return _swap64(this);\x0d\n};\x0d\n\x0d\nBuffer.prototype.toLocaleString = Buffer.prototype.toString;\x0d\n\x0d\nlet transcode;\x0d\nif (internalBinding('config').hasIntl) {\x0d\n  const {\x0d\n    icuErrName\x2C\x0d\n    transcode: _transcode\x0d\n  } = internalBinding('icu');\x0d\n\x0d\n  // Transcodes the Buffer from one encoding to another\x2C returning a new\x0d\n  // Buffer instance.\x0d\n  transcode = function transcode(source\x2C fromEncoding\x2C toEncoding) {\x0d\n    if (!isUint8Array(source)) {\x0d\n      throw new ERR_INVALID_ARG_TYPE('source'\x2C\x0d\n                                     ['Buffer'\x2C 'Uint8Array']\x2C source);\x0d\n    }\x0d\n    if (source.length === 0) return Buffer.alloc(0);\x0d\n\x0d\n    fromEncoding = normalizeEncoding(fromEncoding) || fromEncoding;\x0d\n    toEncoding = normalizeEncoding(toEncoding) || toEncoding;\x0d\n    const result = _transcode(source\x2C fromEncoding\x2C toEncoding);\x0d\n    if (typeof result !== 'number')\x0d\n      return result;\x0d\n\x0d\n    const code = icuErrName(result);\x0d\n    // eslint-disable-next-line no-restricted-syntax\x0d\n    const err = new Error(`Unable to transcode Buffer [${code}]`);\x0d\n    err.code = code;\x0d\n    err.errno = result;\x0d\n    throw err;\x0d\n  };\x0d\n}\x0d\n\x0d\nfunction btoa(input) {\x0d\n  // The implementation here has not been performance optimized in any way and\x0d\n  // should not be.\x0d\n  // Refs: https://github.com/nodejs/node/pull/38433#issuecomment-828426932\x0d\n  if (arguments.length === 0) {\x0d\n    throw new ERR_MISSING_ARGS('input');\x0d\n  }\x0d\n  input = `${input}`;\x0d\n  for (let n = 0; n < input.length; n++) {\x0d\n    if (input[n].charCodeAt(0) > 0xff)\x0d\n      throw lazyDOMException('Invalid character'\x2C 'InvalidCharacterError');\x0d\n  }\x0d\n  const buf = Buffer.from(input\x2C 'latin1');\x0d\n  return buf.toString('base64');\x0d\n}\x0d\n\x0d\nconst kBase64Digits =\x0d\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\x0d\n\x0d\nfunction atob(input) {\x0d\n  // The implementation here has not been performance optimized in any way and\x0d\n  // should not be.\x0d\n  // Refs: https://github.com/nodejs/node/pull/38433#issuecomment-828426932\x0d\n  if (arguments.length === 0) {\x0d\n    throw new ERR_MISSING_ARGS('input');\x0d\n  }\x0d\n  input = `${input}`;\x0d\n  for (let n = 0; n < input.length; n++) {\x0d\n    if (!kBase64Digits.includes(input[n]))\x0d\n      throw lazyDOMException('Invalid character'\x2C 'InvalidCharacterError');\x0d\n  }\x0d\n  return Buffer.from(input\x2C 'base64').toString('latin1');\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  Blob\x2C\x0d\n  resolveObjectURL\x2C\x0d\n  Buffer\x2C\x0d\n  SlowBuffer\x2C\x0d\n  transcode\x2C\x0d\n  // Legacy\x0d\n  kMaxLength\x2C\x0d\n  kStringMaxLength\x2C\x0d\n  btoa\x2C\x0d\n  atob\x2C\x0d\n};\x0d\n\x0d\nObjectDefineProperties(module.exports\x2C {\x0d\n  constants: {\x0d\n    configurable: false\x2C\x0d\n    enumerable: true\x2C\x0d\n    value: constants\x0d\n  }\x2C\x0d\n  INSPECT_MAX_BYTES: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: true\x2C\x0d\n    get() { return INSPECT_MAX_BYTES; }\x2C\x0d\n    set(val) { INSPECT_MAX_BYTES = val; }\x0d\n  }\x0d\n});\x0d\n
code-source-info,0x39aa2874ebe,24,8723,9706,C3O8762C9O8798C12O8805C17O8841C18O8847C28O8903C33O8907C39O8939C51O8946C56O8995C57O9025C63O9042C68O9042C73O9058C78O9098C95O9191C104O9198C109O9238C110O9263C113O9263C118O9287C120O9301C122O9310C123O9318C125O9335C127O9334C134O9397C136O9403C138O9402C145O9421C151O9440C155O9486C158O9493C163O9533C164O9560C182O9566C187O9560,,
code-creation,LazyCompile,10,376935,0x39aa28778ce,110,fromString node:buffer:432:20,0x423ed77028,~
code-source-info,0x39aa28778ce,24,12910,13359,C0O12938C2O12946C8O12991C14O12998C19O13023C25O13030C30O13044C35O13051C40O13068C41O13074C46O13092C51O13103C56O13142C59O13148C64O13179C66O13209C73O13215C78O13209C79O13267C85O13274C90O13288C95O13295C100O13312C101O13321C104O13328C109O13356,,
code-creation,LazyCompile,10,377047,0x39aa2877a86,177,fromStringFast node:buffer:413:24,0x423ed76f88,~
code-source-info,0x39aa2877a86,24,12347,12887,C0O12385C5O12385C11O12410C14O12432C18O12441C21O12421C26O12454C31O12490C36O12461C41O12503C42O12509C44O12523C49O12534C51O12532C54O12520C59O12552C62O12552C65O12577C72O12592C77O12603C85O12577C91O12646C110O12646C116O12678C118O12689C123O12775C130O12794C135O12805C143O12779C149O12834C156O12848C162O12845C168O12859C171O12859C174O12875C176O12884,,
code-creation,LazyCompile,10,377135,0x39aa2877c76,36,FastBuffer node:internal/buffer:958:14,0x3d773fcbb00,~
code-source-info,0x39aa2877c76,25,27321,27412,C3O27365C7O27399C20O27365C35O27411,,
code-creation,LazyCompile,10,377245,0x39aa2877d76,23,write node:buffer:593:12,0x423ed77398,~
code-source-info,0x39aa2877d76,24,17139,17203,C0O17173C17O17173C22O17203,,
code-creation,LazyCompile,10,377402,0x39aa2877e66,42,alignPool node:buffer:159:19,0x423ed769c0,~
code-source-info,0x39aa2877e66,24,4178,4288,C0O4214C4O4229C9O4243C19O4254C25O4267C34O4277C41O4287,,
code-creation,LazyCompile,10,377646,0x39aa2878226,251,promisify node:internal/util:324:19,0x423ed45f48,~
code-source-info,0x39aa2878226,16,9168,10721,C0O9168C17O9232C25O9273C33O9297C38O9276C55O9335C68O9335C73O9380C80O9393C82O9392C87O9438C94O9447C96O9446C100O9481C110O9481C115O9535C126O9567C136O9609C143O9542C148O9676C149O9844C156O9853C158O9852C161O9844C163O10429C174O10454C180O10454C185O10429C190O10492C201O10517C211O10557C218O10492C223O10626C234O10671C240O10671C245O10633C250O10718,,
code-creation,LazyCompile,10,378006,0x39aa28787b6,65,EventEmitterMixin node:internal/event_target:966:27,0x14570b5e3a8,~
script-source,44,node:internal/event_target,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayFrom\x2C\x0d\n  Boolean\x2C\x0d\n  Error\x2C\x0d\n  FunctionPrototypeBind\x2C\x0d\n  FunctionPrototypeCall\x2C\x0d\n  NumberIsInteger\x2C\x0d\n  ObjectAssign\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectGetOwnPropertyDescriptor\x2C\x0d\n  ObjectGetOwnPropertyDescriptors\x2C\x0d\n  ReflectApply\x2C\x0d\n  SafeArrayIterator\x2C\x0d\n  SafeFinalizationRegistry\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeWeakMap\x2C\x0d\n  SafeWeakRef\x2C\x0d\n  SafeWeakSet\x2C\x0d\n  String\x2C\x0d\n  Symbol\x2C\x0d\n  SymbolFor\x2C\x0d\n  SymbolToStringTag\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_EVENT_RECURSION\x2C\x0d\n    ERR_MISSING_ARGS\x2C\x0d\n    ERR_INVALID_THIS\x2C\x0d\n  }\x0d\n} = require('internal/errors');\x0d\nconst { validateObject\x2C validateString } = require('internal/validators');\x0d\n\x0d\nconst { customInspectSymbol } = require('internal/util');\x0d\nconst { inspect } = require('util');\x0d\n\x0d\nconst kIsEventTarget = SymbolFor('nodejs.event_target');\x0d\nconst kIsNodeEventTarget = Symbol('kIsNodeEventTarget');\x0d\n\x0d\nconst EventEmitter = require('events');\x0d\nconst {\x0d\n  kMaxEventTargetListeners\x2C\x0d\n  kMaxEventTargetListenersWarned\x2C\x0d\n} = EventEmitter;\x0d\n\x0d\nconst kEvents = Symbol('kEvents');\x0d\nconst kIsBeingDispatched = Symbol('kIsBeingDispatched');\x0d\nconst kStop = Symbol('kStop');\x0d\nconst kTarget = Symbol('kTarget');\x0d\nconst kHandlers = Symbol('khandlers');\x0d\nconst kWeakHandler = Symbol('kWeak');\x0d\n\x0d\nconst kHybridDispatch = SymbolFor('nodejs.internal.kHybridDispatch');\x0d\nconst kCreateEvent = Symbol('kCreateEvent');\x0d\nconst kNewListener = Symbol('kNewListener');\x0d\nconst kRemoveListener = Symbol('kRemoveListener');\x0d\nconst kIsNodeStyleListener = Symbol('kIsNodeStyleListener');\x0d\nconst kTrustEvent = Symbol('kTrustEvent');\x0d\n\x0d\nconst { now } = require('internal/perf/utils');\x0d\n\x0d\n// TODO(joyeecheung): V8 snapshot does not support instance member\x0d\n// initializers for now:\x0d\n// https://bugs.chromium.org/p/v8/issues/detail?id=10704\x0d\nconst kType = Symbol('type');\x0d\nconst kDefaultPrevented = Symbol('defaultPrevented');\x0d\nconst kCancelable = Symbol('cancelable');\x0d\nconst kTimestamp = Symbol('timestamp');\x0d\nconst kBubbles = Symbol('bubbles');\x0d\nconst kComposed = Symbol('composed');\x0d\nconst kPropagationStopped = Symbol('propagationStopped');\x0d\n\x0d\nconst isTrustedSet = new SafeWeakSet();\x0d\nconst isTrusted = ObjectGetOwnPropertyDescriptor({\x0d\n  get isTrusted() {\x0d\n    return isTrustedSet.has(this);\x0d\n  }\x0d\n}\x2C 'isTrusted').get;\x0d\n\x0d\nfunction isEvent(value) {\x0d\n  return typeof value?.[kType] === 'string';\x0d\n}\x0d\n\x0d\nclass Event {\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @param {{\x0d\n   *   bubbles?: boolean\x2C\x0d\n   *   cancelable?: boolean\x2C\x0d\n   *   composed?: boolean\x2C\x0d\n   * }} [options]\x0d\n   */\x0d\n  constructor(type\x2C options = null) {\x0d\n    if (arguments.length === 0)\x0d\n      throw new ERR_MISSING_ARGS('type');\x0d\n    validateObject(options\x2C 'options'\x2C {\x0d\n      allowArray: true\x2C allowFunction: true\x2C nullable: true\x2C\x0d\n    });\x0d\n    const { cancelable\x2C bubbles\x2C composed } = { ...options };\x0d\n    this[kCancelable] = !!cancelable;\x0d\n    this[kBubbles] = !!bubbles;\x0d\n    this[kComposed] = !!composed;\x0d\n    this[kType] = `${type}`;\x0d\n    this[kDefaultPrevented] = false;\x0d\n    this[kTimestamp] = now();\x0d\n    this[kPropagationStopped] = false;\x0d\n    if (options?.[kTrustEvent]) {\x0d\n      isTrustedSet.add(this);\x0d\n    }\x0d\n\x0d\n    // isTrusted is special (LegacyUnforgeable)\x0d\n    ObjectDefineProperty(this\x2C 'isTrusted'\x2C {\x0d\n      get: isTrusted\x2C\x0d\n      enumerable: true\x2C\x0d\n      configurable: false\x0d\n    });\x0d\n    this[kTarget] = null;\x0d\n    this[kIsBeingDispatched] = false;\x0d\n  }\x0d\n\x0d\n  [customInspectSymbol](depth\x2C options) {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    const name = this.constructor.name;\x0d\n    if (depth < 0)\x0d\n      return name;\x0d\n\x0d\n    const opts = ObjectAssign({}\x2C options\x2C {\x0d\n      depth: NumberIsInteger(options.depth) ? options.depth - 1 : options.depth\x0d\n    });\x0d\n\x0d\n    return `${name} ${inspect({\x0d\n      type: this[kType]\x2C\x0d\n      defaultPrevented: this[kDefaultPrevented]\x2C\x0d\n      cancelable: this[kCancelable]\x2C\x0d\n      timeStamp: this[kTimestamp]\x2C\x0d\n    }\x2C opts)}`;\x0d\n  }\x0d\n\x0d\n  stopImmediatePropagation() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    this[kStop] = true;\x0d\n  }\x0d\n\x0d\n  preventDefault() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    this[kDefaultPrevented] = true;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {EventTarget}\x0d\n   */\x0d\n  get target() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kTarget];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {EventTarget}\x0d\n   */\x0d\n  get currentTarget() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kTarget];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {EventTarget}\x0d\n   */\x0d\n  get srcElement() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kTarget];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {string}\x0d\n   */\x0d\n  get type() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kType];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {boolean}\x0d\n   */\x0d\n  get cancelable() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kCancelable];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {boolean}\x0d\n   */\x0d\n  get defaultPrevented() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kCancelable] && this[kDefaultPrevented];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {number}\x0d\n   */\x0d\n  get timeStamp() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kTimestamp];\x0d\n  }\x0d\n\x0d\n\x0d\n  // The following are non-op and unused properties/methods from Web API Event.\x0d\n  // These are not supported in Node.js and are provided purely for\x0d\n  // API completeness.\x0d\n  /**\x0d\n   * @returns {EventTarget[]}\x0d\n   */\x0d\n  composedPath() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kIsBeingDispatched] ? [this[kTarget]] : [];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {boolean}\x0d\n   */\x0d\n  get returnValue() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return !this.defaultPrevented;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {boolean}\x0d\n   */\x0d\n  get bubbles() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kBubbles];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {boolean}\x0d\n   */\x0d\n  get composed() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kComposed];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {number}\x0d\n   */\x0d\n  get eventPhase() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kIsBeingDispatched] ? Event.AT_TARGET : Event.NONE;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {boolean}\x0d\n   */\x0d\n  get cancelBubble() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kPropagationStopped];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {boolean}\x0d\n   */\x0d\n  set cancelBubble(value) {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    if (value) {\x0d\n      this.stopPropagation();\x0d\n    }\x0d\n  }\x0d\n\x0d\n  stopPropagation() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    this[kPropagationStopped] = true;\x0d\n  }\x0d\n\x0d\n  static NONE = 0;\x0d\n  static CAPTURING_PHASE = 1;\x0d\n  static AT_TARGET = 2;\x0d\n  static BUBBLING_PHASE = 3;\x0d\n}\x0d\n\x0d\nconst kEnumerableProperty = ObjectCreate(null);\x0d\nkEnumerableProperty.enumerable = true;\x0d\n\x0d\nObjectDefineProperties(\x0d\n  Event.prototype\x2C {\x0d\n    [SymbolToStringTag]: {\x0d\n      writable: false\x2C\x0d\n      enumerable: false\x2C\x0d\n      configurable: true\x2C\x0d\n      value: 'Event'\x2C\x0d\n    }\x2C\x0d\n    stopImmediatePropagation: kEnumerableProperty\x2C\x0d\n    preventDefault: kEnumerableProperty\x2C\x0d\n    target: kEnumerableProperty\x2C\x0d\n    currentTarget: kEnumerableProperty\x2C\x0d\n    srcElement: kEnumerableProperty\x2C\x0d\n    type: kEnumerableProperty\x2C\x0d\n    cancelable: kEnumerableProperty\x2C\x0d\n    defaultPrevented: kEnumerableProperty\x2C\x0d\n    timeStamp: kEnumerableProperty\x2C\x0d\n    composedPath: kEnumerableProperty\x2C\x0d\n    returnValue: kEnumerableProperty\x2C\x0d\n    bubbles: kEnumerableProperty\x2C\x0d\n    composed: kEnumerableProperty\x2C\x0d\n    eventPhase: kEnumerableProperty\x2C\x0d\n    cancelBubble: kEnumerableProperty\x2C\x0d\n    stopPropagation: kEnumerableProperty\x2C\x0d\n  });\x0d\n\x0d\nclass NodeCustomEvent extends Event {\x0d\n  constructor(type\x2C options) {\x0d\n    super(type\x2C options);\x0d\n    if (options?.detail) {\x0d\n      this.detail = options.detail;\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\n// Weak listener cleanup\x0d\n// This has to be lazy for snapshots to work\x0d\nlet weakListenersState = null;\x0d\n// The resource needs to retain the callback so that it doesn't\x0d\n// get garbage collected now that it's weak.\x0d\nlet objectToWeakListenerMap = null;\x0d\nfunction weakListeners() {\x0d\n  weakListenersState ??= new SafeFinalizationRegistry(\x0d\n    (listener) => listener.remove()\x0d\n  );\x0d\n  objectToWeakListenerMap ??= new SafeWeakMap();\x0d\n  return { registry: weakListenersState\x2C map: objectToWeakListenerMap };\x0d\n}\x0d\n\x0d\n// The listeners for an EventTarget are maintained as a linked list.\x0d\n// Unfortunately\x2C the way EventTarget is defined\x2C listeners are accounted\x0d\n// using the tuple [handler\x2Ccapture]\x2C and even if we don't actually make\x0d\n// use of capture or bubbling\x2C in order to be spec compliant we have to\x0d\n// take on the additional complexity of supporting it. Fortunately\x2C using\x0d\n// the linked list makes dispatching faster\x2C even if adding/removing is\x0d\n// slower.\x0d\nclass Listener {\x0d\n  constructor(previous\x2C listener\x2C once\x2C capture\x2C passive\x2C\x0d\n              isNodeStyleListener\x2C weak) {\x0d\n    this.next = undefined;\x0d\n    if (previous !== undefined)\x0d\n      previous.next = this;\x0d\n    this.previous = previous;\x0d\n    this.listener = listener;\x0d\n    // TODO(benjamingr) these 4 can be 'flags' to save 3 slots\x0d\n    this.once = once;\x0d\n    this.capture = capture;\x0d\n    this.passive = passive;\x0d\n    this.isNodeStyleListener = isNodeStyleListener;\x0d\n    this.removed = false;\x0d\n    this.weak = Boolean(weak); // Don't retain the object\x0d\n\x0d\n    if (this.weak) {\x0d\n      this.callback = new SafeWeakRef(listener);\x0d\n      weakListeners().registry.register(listener\x2C this\x2C this);\x0d\n      // Make the retainer retain the listener in a WeakMap\x0d\n      weakListeners().map.set(weak\x2C listener);\x0d\n      this.listener = this.callback;\x0d\n    } else if (typeof listener === 'function') {\x0d\n      this.callback = listener;\x0d\n      this.listener = listener;\x0d\n    } else {\x0d\n      this.callback = FunctionPrototypeBind(listener.handleEvent\x2C listener);\x0d\n      this.listener = listener;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  same(listener\x2C capture) {\x0d\n    const myListener = this.weak ? this.listener.deref() : this.listener;\x0d\n    return myListener === listener && this.capture === capture;\x0d\n  }\x0d\n\x0d\n  remove() {\x0d\n    if (this.previous !== undefined)\x0d\n      this.previous.next = this.next;\x0d\n    if (this.next !== undefined)\x0d\n      this.next.previous = this.previous;\x0d\n    this.removed = true;\x0d\n    if (this.weak)\x0d\n      weakListeners().registry.unregister(this);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction initEventTarget(self) {\x0d\n  self[kEvents] = new SafeMap();\x0d\n  self[kMaxEventTargetListeners] = EventEmitter.defaultMaxListeners;\x0d\n  self[kMaxEventTargetListenersWarned] = false;\x0d\n}\x0d\n\x0d\nclass EventTarget {\x0d\n  // Used in checking whether an object is an EventTarget. This is a well-known\x0d\n  // symbol as EventTarget may be used cross-realm.\x0d\n  // Ref: https://github.com/nodejs/node/pull/33661\x0d\n  static [kIsEventTarget] = true;\x0d\n\x0d\n  constructor() {\x0d\n    initEventTarget(this);\x0d\n  }\x0d\n\x0d\n  [kNewListener](size\x2C type\x2C listener\x2C once\x2C capture\x2C passive\x2C weak) {\x0d\n    if (this[kMaxEventTargetListeners] > 0 &&\x0d\n        size > this[kMaxEventTargetListeners] &&\x0d\n        !this[kMaxEventTargetListenersWarned]) {\x0d\n      this[kMaxEventTargetListenersWarned] = true;\x0d\n      // No error code for this since it is a Warning\x0d\n      // eslint-disable-next-line no-restricted-syntax\x0d\n      const w = new Error('Possible EventTarget memory leak detected. ' +\x0d\n                          `${size} ${type} listeners ` +\x0d\n                          `added to ${inspect(this\x2C { depth: -1 })}. Use ` +\x0d\n                          'events.setMaxListeners() to increase limit');\x0d\n      w.name = 'MaxListenersExceededWarning';\x0d\n      w.target = this;\x0d\n      w.type = type;\x0d\n      w.count = size;\x0d\n      process.emitWarning(w);\x0d\n    }\x0d\n  }\x0d\n  [kRemoveListener](size\x2C type\x2C listener\x2C capture) {}\x0d\n\x0d\n  /**\x0d\n   * @callback EventTargetCallback\x0d\n   * @param {Event} event\x0d\n   */\x0d\n\x0d\n  /**\x0d\n   * @typedef {{ handleEvent: EventTargetCallback }} EventListener\x0d\n   */\x0d\n\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @param {EventTargetCallback|EventListener} listener\x0d\n   * @param {{\x0d\n   *   capture?: boolean\x2C\x0d\n   *   once?: boolean\x2C\x0d\n   *   passive?: boolean\x2C\x0d\n   *   signal?: AbortSignal\x0d\n   * }} [options]\x0d\n   */\x0d\n  addEventListener(type\x2C listener\x2C options = {}) {\x0d\n    if (!isEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('EventTarget');\x0d\n    if (arguments.length < 2)\x0d\n      throw new ERR_MISSING_ARGS('type'\x2C 'listener');\x0d\n\x0d\n    // We validateOptions before the shouldAddListeners check because the spec\x0d\n    // requires us to hit getters.\x0d\n    const {\x0d\n      once\x2C\x0d\n      capture\x2C\x0d\n      passive\x2C\x0d\n      signal\x2C\x0d\n      isNodeStyleListener\x2C\x0d\n      weak\x2C\x0d\n    } = validateEventListenerOptions(options);\x0d\n\x0d\n    if (!shouldAddListener(listener)) {\x0d\n      // The DOM silently allows passing undefined as a second argument\x0d\n      // No error code for this since it is a Warning\x0d\n      // eslint-disable-next-line no-restricted-syntax\x0d\n      const w = new Error(`addEventListener called with ${listener}` +\x0d\n                          ' which has no effect.');\x0d\n      w.name = 'AddEventListenerArgumentTypeWarning';\x0d\n      w.target = this;\x0d\n      w.type = type;\x0d\n      process.emitWarning(w);\x0d\n      return;\x0d\n    }\x0d\n    type = String(type);\x0d\n\x0d\n    if (signal) {\x0d\n      if (signal.aborted) {\x0d\n        return;\x0d\n      }\x0d\n      // TODO(benjamingr) make this weak somehow? ideally the signal would\x0d\n      // not prevent the event target from GC.\x0d\n      signal.addEventListener('abort'\x2C () => {\x0d\n        this.removeEventListener(type\x2C listener\x2C options);\x0d\n      }\x2C { once: true\x2C [kWeakHandler]: this });\x0d\n    }\x0d\n\x0d\n    let root = this[kEvents].get(type);\x0d\n\x0d\n    if (root === undefined) {\x0d\n      root = { size: 1\x2C next: undefined };\x0d\n      // This is the first handler in our linked list.\x0d\n      new Listener(root\x2C listener\x2C once\x2C capture\x2C passive\x2C\x0d\n                   isNodeStyleListener\x2C weak);\x0d\n      this[kNewListener](\x0d\n        root.size\x2C\x0d\n        type\x2C\x0d\n        listener\x2C\x0d\n        once\x2C\x0d\n        capture\x2C\x0d\n        passive\x2C\x0d\n        weak);\x0d\n      this[kEvents].set(type\x2C root);\x0d\n      return;\x0d\n    }\x0d\n\x0d\n    let handler = root.next;\x0d\n    let previous = root;\x0d\n\x0d\n    // We have to walk the linked list to see if we have a match\x0d\n    while (handler !== undefined && !handler.same(listener\x2C capture)) {\x0d\n      previous = handler;\x0d\n      handler = handler.next;\x0d\n    }\x0d\n\x0d\n    if (handler !== undefined) { // Duplicate! Ignore\x0d\n      return;\x0d\n    }\x0d\n\x0d\n    new Listener(previous\x2C listener\x2C once\x2C capture\x2C passive\x2C\x0d\n                 isNodeStyleListener\x2C weak);\x0d\n    root.size++;\x0d\n    this[kNewListener](root.size\x2C type\x2C listener\x2C once\x2C capture\x2C passive\x2C weak);\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @param {EventTargetCallback|EventListener} listener\x0d\n   * @param {{\x0d\n   *   capture?: boolean\x2C\x0d\n   * }} [options]\x0d\n   */\x0d\n  removeEventListener(type\x2C listener\x2C options = {}) {\x0d\n    if (!isEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('EventTarget');\x0d\n    if (!shouldAddListener(listener))\x0d\n      return;\x0d\n\x0d\n    type = String(type);\x0d\n    const capture = options?.capture === true;\x0d\n\x0d\n    const root = this[kEvents].get(type);\x0d\n    if (root === undefined || root.next === undefined)\x0d\n      return;\x0d\n\x0d\n    let handler = root.next;\x0d\n    while (handler !== undefined) {\x0d\n      if (handler.same(listener\x2C capture)) {\x0d\n        handler.remove();\x0d\n        root.size--;\x0d\n        if (root.size === 0)\x0d\n          this[kEvents].delete(type);\x0d\n        this[kRemoveListener](root.size\x2C type\x2C listener\x2C capture);\x0d\n        break;\x0d\n      }\x0d\n      handler = handler.next;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {Event} event\x0d\n   */\x0d\n  dispatchEvent(event) {\x0d\n    if (!isEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('EventTarget');\x0d\n\x0d\n    if (!(event instanceof Event))\x0d\n      throw new ERR_INVALID_ARG_TYPE('event'\x2C 'Event'\x2C event);\x0d\n\x0d\n    if (event[kIsBeingDispatched])\x0d\n      throw new ERR_EVENT_RECURSION(event.type);\x0d\n\x0d\n    this[kHybridDispatch](event\x2C event.type\x2C event);\x0d\n\x0d\n    return event.defaultPrevented !== true;\x0d\n  }\x0d\n\x0d\n  [kHybridDispatch](nodeValue\x2C type\x2C event) {\x0d\n    const createEvent = () => {\x0d\n      if (event === undefined) {\x0d\n        event = this[kCreateEvent](nodeValue\x2C type);\x0d\n        event[kTarget] = this;\x0d\n        event[kIsBeingDispatched] = true;\x0d\n      }\x0d\n      return event;\x0d\n    };\x0d\n    if (event !== undefined) {\x0d\n      event[kTarget] = this;\x0d\n      event[kIsBeingDispatched] = true;\x0d\n    }\x0d\n\x0d\n    const root = this[kEvents].get(type);\x0d\n    if (root === undefined || root.next === undefined) {\x0d\n      if (event !== undefined)\x0d\n        event[kIsBeingDispatched] = false;\x0d\n      return true;\x0d\n    }\x0d\n\x0d\n    let handler = root.next;\x0d\n    let next;\x0d\n\x0d\n    while (handler !== undefined &&\x0d\n           (handler.passive || event?.[kStop] !== true)) {\x0d\n      // Cache the next item in case this iteration removes the current one\x0d\n      next = handler.next;\x0d\n\x0d\n      if (handler.removed) {\x0d\n        // Deal with the case an event is removed while event handlers are\x0d\n        // Being processed (removeEventListener called from a listener)\x0d\n        handler = next;\x0d\n        continue;\x0d\n      }\x0d\n      if (handler.once) {\x0d\n        handler.remove();\x0d\n        root.size--;\x0d\n        const { listener\x2C capture } = handler;\x0d\n        this[kRemoveListener](root.size\x2C type\x2C listener\x2C capture);\x0d\n      }\x0d\n\x0d\n      try {\x0d\n        let arg;\x0d\n        if (handler.isNodeStyleListener) {\x0d\n          arg = nodeValue;\x0d\n        } else {\x0d\n          arg = createEvent();\x0d\n        }\x0d\n        const callback = handler.weak ?\x0d\n          handler.callback.deref() : handler.callback;\x0d\n        let result;\x0d\n        if (callback) {\x0d\n          result = FunctionPrototypeCall(callback\x2C this\x2C arg);\x0d\n          if (!handler.isNodeStyleListener) {\x0d\n            arg[kIsBeingDispatched] = false;\x0d\n          }\x0d\n        }\x0d\n        if (result !== undefined && result !== null)\x0d\n          addCatch(result);\x0d\n      } catch (err) {\x0d\n        emitUncaughtException(err);\x0d\n      }\x0d\n\x0d\n      handler = next;\x0d\n    }\x0d\n\x0d\n    if (event !== undefined)\x0d\n      event[kIsBeingDispatched] = false;\x0d\n  }\x0d\n\x0d\n  [kCreateEvent](nodeValue\x2C type) {\x0d\n    return new NodeCustomEvent(type\x2C { detail: nodeValue });\x0d\n  }\x0d\n  [customInspectSymbol](depth\x2C options) {\x0d\n    if (!isEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('EventTarget');\x0d\n    const name = this.constructor.name;\x0d\n    if (depth < 0)\x0d\n      return name;\x0d\n\x0d\n    const opts = ObjectAssign({}\x2C options\x2C {\x0d\n      depth: NumberIsInteger(options.depth) ? options.depth - 1 : options.depth\x0d\n    });\x0d\n\x0d\n    return `${name} ${inspect({}\x2C opts)}`;\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectDefineProperties(EventTarget.prototype\x2C {\x0d\n  addEventListener: kEnumerableProperty\x2C\x0d\n  removeEventListener: kEnumerableProperty\x2C\x0d\n  dispatchEvent: kEnumerableProperty\x2C\x0d\n  [SymbolToStringTag]: {\x0d\n    writable: false\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: true\x2C\x0d\n    value: 'EventTarget'\x2C\x0d\n  }\x0d\n});\x0d\n\x0d\nfunction initNodeEventTarget(self) {\x0d\n  initEventTarget(self);\x0d\n}\x0d\n\x0d\nclass NodeEventTarget extends EventTarget {\x0d\n  static [kIsNodeEventTarget] = true;\x0d\n  static defaultMaxListeners = 10;\x0d\n\x0d\n  constructor() {\x0d\n    super();\x0d\n    initNodeEventTarget(this);\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {number} n\x0d\n   */\x0d\n  setMaxListeners(n) {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    EventEmitter.setMaxListeners(n\x2C this);\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @returns {number}\x0d\n   */\x0d\n  getMaxListeners() {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    return this[kMaxEventTargetListeners];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @returns {string[]}\x0d\n   */\x0d\n  eventNames() {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    return ArrayFrom(this[kEvents].keys());\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} [type]\x0d\n   * @returns {number}\x0d\n   */\x0d\n  listenerCount(type) {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    const root = this[kEvents].get(String(type));\x0d\n    return root !== undefined ? root.size : 0;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @param {EventTargetCallback|EventListener} listener\x0d\n   * @param {{\x0d\n   *   capture?: boolean\x2C\x0d\n   * }} [options]\x0d\n   * @returns {NodeEventTarget}\x0d\n   */\x0d\n  off(type\x2C listener\x2C options) {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    this.removeEventListener(type\x2C listener\x2C options);\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @param {EventTargetCallback|EventListener} listener\x0d\n   * @param {{\x0d\n   *   capture?: boolean\x2C\x0d\n   * }} [options]\x0d\n   * @returns {NodeEventTarget}\x0d\n   */\x0d\n  removeListener(type\x2C listener\x2C options) {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    this.removeEventListener(type\x2C listener\x2C options);\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @param {EventTargetCallback|EventListener} listener\x0d\n   * @returns {NodeEventTarget}\x0d\n   */\x0d\n  on(type\x2C listener) {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    this.addEventListener(type\x2C listener\x2C { [kIsNodeStyleListener]: true });\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @param {EventTargetCallback|EventListener} listener\x0d\n   * @returns {NodeEventTarget}\x0d\n   */\x0d\n  addListener(type\x2C listener) {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    this.addEventListener(type\x2C listener\x2C { [kIsNodeStyleListener]: true });\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @param {any} arg\x0d\n   * @returns {boolean}\x0d\n   */\x0d\n  emit(type\x2C arg) {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    validateString(type\x2C 'type');\x0d\n    const hadListeners = this.listenerCount(type) > 0;\x0d\n    this[kHybridDispatch](arg\x2C type);\x0d\n    return hadListeners;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @param {EventTargetCallback|EventListener} listener\x0d\n   * @returns {NodeEventTarget}\x0d\n   */\x0d\n  once(type\x2C listener) {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    this.addEventListener(type\x2C listener\x2C\x0d\n                          { once: true\x2C [kIsNodeStyleListener]: true });\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @returns {NodeEventTarget}\x0d\n   */\x0d\n  removeAllListeners(type) {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    if (type !== undefined) {\x0d\n      this[kEvents].delete(String(type));\x0d\n    } else {\x0d\n      this[kEvents].clear();\x0d\n    }\x0d\n\x0d\n    return this;\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectDefineProperties(NodeEventTarget.prototype\x2C {\x0d\n  setMaxListeners: kEnumerableProperty\x2C\x0d\n  getMaxListeners: kEnumerableProperty\x2C\x0d\n  eventNames: kEnumerableProperty\x2C\x0d\n  listenerCount: kEnumerableProperty\x2C\x0d\n  off: kEnumerableProperty\x2C\x0d\n  removeListener: kEnumerableProperty\x2C\x0d\n  on: kEnumerableProperty\x2C\x0d\n  addListener: kEnumerableProperty\x2C\x0d\n  once: kEnumerableProperty\x2C\x0d\n  emit: kEnumerableProperty\x2C\x0d\n  removeAllListeners: kEnumerableProperty\x2C\x0d\n});\x0d\n\x0d\n// EventTarget API\x0d\n\x0d\nfunction shouldAddListener(listener) {\x0d\n  if (typeof listener === 'function' ||\x0d\n      typeof listener?.handleEvent === 'function') {\x0d\n    return true;\x0d\n  }\x0d\n\x0d\n  if (listener == null)\x0d\n    return false;\x0d\n\x0d\n  throw new ERR_INVALID_ARG_TYPE('listener'\x2C 'EventListener'\x2C listener);\x0d\n}\x0d\n\x0d\nfunction validateEventListenerOptions(options) {\x0d\n  if (typeof options === 'boolean')\x0d\n    return { capture: options };\x0d\n\x0d\n  if (options === null)\x0d\n    return {};\x0d\n  validateObject(options\x2C 'options'\x2C {\x0d\n    allowArray: true\x2C allowFunction: true\x2C\x0d\n  });\x0d\n  return {\x0d\n    once: Boolean(options.once)\x2C\x0d\n    capture: Boolean(options.capture)\x2C\x0d\n    passive: Boolean(options.passive)\x2C\x0d\n    signal: options.signal\x2C\x0d\n    weak: options[kWeakHandler]\x2C\x0d\n    isNodeStyleListener: Boolean(options[kIsNodeStyleListener])\x0d\n  };\x0d\n}\x0d\n\x0d\n// Test whether the argument is an event object. This is far from a fool-proof\x0d\n// test\x2C for example this input will result in a false positive:\x0d\n// > isEventTarget({ constructor: EventTarget })\x0d\n// It stands in its current implementation as a compromise.\x0d\n// Ref: https://github.com/nodejs/node/pull/33661\x0d\nfunction isEventTarget(obj) {\x0d\n  return obj?.constructor?.[kIsEventTarget];\x0d\n}\x0d\n\x0d\nfunction isNodeEventTarget(obj) {\x0d\n  return obj?.constructor?.[kIsNodeEventTarget];\x0d\n}\x0d\n\x0d\nfunction addCatch(promise) {\x0d\n  const then = promise.then;\x0d\n  if (typeof then === 'function') {\x0d\n    FunctionPrototypeCall(then\x2C promise\x2C undefined\x2C function(err) {\x0d\n      // The callback is called with nextTick to avoid a follow-up\x0d\n      // rejection from this promise.\x0d\n      emitUncaughtException(err);\x0d\n    });\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction emitUncaughtException(err) {\x0d\n  process.nextTick(() => { throw err; });\x0d\n}\x0d\n\x0d\nfunction makeEventHandler(handler) {\x0d\n  // Event handlers are dispatched in the order they were first set\x0d\n  // See https://github.com/nodejs/node/pull/35949#issuecomment-722496598\x0d\n  function eventHandler(...args) {\x0d\n    if (typeof eventHandler.handler !== 'function') {\x0d\n      return;\x0d\n    }\x0d\n    return ReflectApply(eventHandler.handler\x2C this\x2C args);\x0d\n  }\x0d\n  eventHandler.handler = handler;\x0d\n  return eventHandler;\x0d\n}\x0d\n\x0d\nfunction defineEventHandler(emitter\x2C name) {\x0d\n  // 8.1.5.1 Event handlers - basically `on[eventName]` attributes\x0d\n  ObjectDefineProperty(emitter\x2C `on${name}`\x2C {\x0d\n    get() {\x0d\n      return this[kHandlers]?.get(name)?.handler;\x0d\n    }\x2C\x0d\n    set(value) {\x0d\n      if (!this[kHandlers]) {\x0d\n        this[kHandlers] = new SafeMap();\x0d\n      }\x0d\n      let wrappedHandler = this[kHandlers]?.get(name);\x0d\n      if (wrappedHandler) {\x0d\n        if (typeof wrappedHandler.handler === 'function') {\x0d\n          this[kEvents].get(name).size--;\x0d\n          const size = this[kEvents].get(name).size;\x0d\n          this[kRemoveListener](size\x2C name\x2C wrappedHandler.handler\x2C false);\x0d\n        }\x0d\n        wrappedHandler.handler = value;\x0d\n        if (typeof wrappedHandler.handler === 'function') {\x0d\n          this[kEvents].get(name).size++;\x0d\n          const size = this[kEvents].get(name).size;\x0d\n          this[kNewListener](size\x2C name\x2C value\x2C false\x2C false\x2C false\x2C false);\x0d\n        }\x0d\n      } else {\x0d\n        wrappedHandler = makeEventHandler(value);\x0d\n        this.addEventListener(name\x2C wrappedHandler);\x0d\n      }\x0d\n      this[kHandlers].set(name\x2C wrappedHandler);\x0d\n    }\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: true\x0d\n  });\x0d\n}\x0d\n\x0d\nconst EventEmitterMixin = (Superclass) => {\x0d\n  class MixedEventEmitter extends Superclass {\x0d\n    constructor(...args) {\x0d\n      args = new SafeArrayIterator(args);\x0d\n      super(...args);\x0d\n      FunctionPrototypeCall(EventEmitter\x2C this);\x0d\n    }\x0d\n  }\x0d\n  const protoProps = ObjectGetOwnPropertyDescriptors(EventEmitter.prototype);\x0d\n  delete protoProps.constructor;\x0d\n  ObjectDefineProperties(MixedEventEmitter.prototype\x2C protoProps);\x0d\n  return MixedEventEmitter;\x0d\n};\x0d\n\x0d\nmodule.exports = {\x0d\n  Event\x2C\x0d\n  EventEmitterMixin\x2C\x0d\n  EventTarget\x2C\x0d\n  NodeEventTarget\x2C\x0d\n  defineEventHandler\x2C\x0d\n  initEventTarget\x2C\x0d\n  initNodeEventTarget\x2C\x0d\n  kCreateEvent\x2C\x0d\n  kNewListener\x2C\x0d\n  kTrustEvent\x2C\x0d\n  kRemoveListener\x2C\x0d\n  kEvents\x2C\x0d\n  kWeakHandler\x2C\x0d\n  isEventTarget\x2C\x0d\n};\x0d\n
code-source-info,0x39aa28787b6,44,26757,27191,C0O26810C23O27001C30O27033C33O27046C38O27001C43O27061C47O27095C52O27136C57O27095C62O27163C64O27188,,
code-creation,Eval,10,381088,0x39aa287b4de,5, node:internal/modules/esm/translators:1:1,0x39aa287b078,~
script-source,125,node:internal/modules/esm/translators,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  ArrayPrototypeMap\x2C\x0d\n  Boolean\x2C\x0d\n  JSONParse\x2C\x0d\n  ObjectGetPrototypeOf\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  ObjectKeys\x2C\x0d\n  SafeArrayIterator\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeSet\x2C\x0d\n  StringPrototypeReplace\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n  SyntaxErrorPrototype\x2C\x0d\n  globalThis: { WebAssembly }\x2C\x0d\n} = primordials;\x0d\n\x0d\nlet _TYPES = null;\x0d\nfunction lazyTypes() {\x0d\n  if (_TYPES !== null) return _TYPES;\x0d\n  return _TYPES = require('internal/util/types');\x0d\n}\x0d\n\x0d\nconst { readFileSync } = require('fs');\x0d\nconst { extname\x2C isAbsolute } = require('path');\x0d\nconst {\x0d\n  hasEsmSyntax\x2C\x0d\n  loadNativeModule\x2C\x0d\n  stripBOM\x2C\x0d\n} = require('internal/modules/cjs/helpers');\x0d\nconst {\x0d\n  Module: CJSModule\x2C\x0d\n  cjsParseCache\x0d\n} = require('internal/modules/cjs/loader');\x0d\nconst internalURLModule = require('internal/url');\x0d\nconst createDynamicModule = require(\x0d\n  'internal/modules/esm/create_dynamic_module');\x0d\nconst { fileURLToPath\x2C URL } = require('url');\x0d\nlet debug = require('internal/util/debuglog').debuglog('esm'\x2C (fn) => {\x0d\n  debug = fn;\x0d\n});\x0d\nconst { emitExperimentalWarning } = require('internal/util');\x0d\nconst {\x0d\n  ERR_UNKNOWN_BUILTIN_MODULE\x2C\x0d\n  ERR_INVALID_RETURN_PROPERTY_VALUE\x0d\n} = require('internal/errors').codes;\x0d\nconst { maybeCacheSourceMap } = require('internal/source_map/source_map_cache');\x0d\nconst moduleWrap = internalBinding('module_wrap');\x0d\nconst { ModuleWrap } = moduleWrap;\x0d\nconst asyncESM = require('internal/process/esm_loader');\x0d\nconst { emitWarningSync } = require('internal/process/warning');\x0d\nconst { TextDecoder } = require('internal/encoding');\x0d\n\x0d\nlet cjsParse;\x0d\nasync function initCJSParse() {\x0d\n  if (typeof WebAssembly === 'undefined') {\x0d\n    cjsParse = require('internal/deps/cjs-module-lexer/lexer').parse;\x0d\n  } else {\x0d\n    const { parse\x2C init } =\x0d\n        require('internal/deps/cjs-module-lexer/dist/lexer');\x0d\n    await init();\x0d\n    cjsParse = parse;\x0d\n  }\x0d\n}\x0d\n\x0d\nconst translators = new SafeMap();\x0d\nexports.translators = translators;\x0d\nexports.enrichCJSError = enrichCJSError;\x0d\n\x0d\nlet DECODER = null;\x0d\nfunction assertBufferSource(body\x2C allowString\x2C hookName) {\x0d\n  if (allowString && typeof body === 'string') {\x0d\n    return;\x0d\n  }\x0d\n  const { isArrayBufferView\x2C isAnyArrayBuffer } = lazyTypes();\x0d\n  if (isArrayBufferView(body) || isAnyArrayBuffer(body)) {\x0d\n    return;\x0d\n  }\x0d\n  throw new ERR_INVALID_RETURN_PROPERTY_VALUE(\x0d\n    `${allowString ? 'string\x2C ' : ''}array buffer\x2C or typed array`\x2C\x0d\n    hookName\x2C\x0d\n    'source'\x2C\x0d\n    body\x0d\n  );\x0d\n}\x0d\n\x0d\nfunction stringify(body) {\x0d\n  if (typeof body === 'string') return body;\x0d\n  assertBufferSource(body\x2C false\x2C 'transformSource');\x0d\n  DECODER = DECODER === null ? new TextDecoder() : DECODER;\x0d\n  return DECODER.decode(body);\x0d\n}\x0d\n\x0d\nfunction errPath(url) {\x0d\n  const parsed = new URL(url);\x0d\n  if (parsed.protocol === 'file:') {\x0d\n    return fileURLToPath(parsed);\x0d\n  }\x0d\n  return url;\x0d\n}\x0d\n\x0d\nasync function importModuleDynamically(specifier\x2C { url }\x2C assertions) {\x0d\n  return asyncESM.esmLoader.import(specifier\x2C url\x2C assertions);\x0d\n}\x0d\n\x0d\n// Strategy for loading a standard JavaScript module.\x0d\ntranslators.set('module'\x2C async function moduleStrategy(url\x2C source\x2C isMain) {\x0d\n  assertBufferSource(source\x2C true\x2C 'load');\x0d\n  source = stringify(source);\x0d\n  maybeCacheSourceMap(url\x2C source);\x0d\n  debug(`Translating StandardModule ${url}`);\x0d\n  const module = new ModuleWrap(url\x2C undefined\x2C source\x2C 0\x2C 0);\x0d\n  moduleWrap.callbackMap.set(module\x2C {\x0d\n    initializeImportMeta: (meta\x2C wrap) => this.importMetaInitialize(meta\x2C {\x0d\n      url: wrap.url\x0d\n    })\x2C\x0d\n    importModuleDynamically\x2C\x0d\n  });\x0d\n  return module;\x0d\n});\x0d\n\x0d\n/**\x0d\n * @param {Error | any} err\x0d\n * @param {string} [content] Content of the file\x2C if known.\x0d\n * @param {string} [filename] Useful only if `content` is unknown.\x0d\n */\x0d\nfunction enrichCJSError(err\x2C content\x2C filename) {\x0d\n  if (err != null && ObjectGetPrototypeOf(err) === SyntaxErrorPrototype &&\x0d\n      hasEsmSyntax(content || readFileSync(filename\x2C 'utf-8'))) {\x0d\n    // Emit the warning synchronously because we are in the middle of handling\x0d\n    // a SyntaxError that will throw and likely terminate the process before an\x0d\n    // asynchronous warning would be emitted.\x0d\n    emitWarningSync(\x0d\n      'To load an ES module\x2C set "type": "module" in the package.json or use ' +\x0d\n      'the .mjs extension.'\x0d\n    );\x0d\n  }\x0d\n}\x0d\n\x0d\n// Strategy for loading a node-style CommonJS module\x0d\nconst isWindows = process.platform === 'win32';\x0d\nconst winSepRegEx = /\\//g;\x0d\ntranslators.set('commonjs'\x2C async function commonjsStrategy(url\x2C source\x2C\x0d\n                                                            isMain) {\x0d\n  debug(`Translating CJSModule ${url}`);\x0d\n\x0d\n  let filename = internalURLModule.fileURLToPath(new URL(url));\x0d\n  if (isWindows)\x0d\n    filename = StringPrototypeReplace(filename\x2C winSepRegEx\x2C '\\\\');\x0d\n\x0d\n  if (!cjsParse) await initCJSParse();\x0d\n  const { module\x2C exportNames } = cjsPreparseModuleExports(filename);\x0d\n  const namesWithDefault = exportNames.has('default') ?\x0d\n    [...exportNames] : ['default'\x2C ...exportNames];\x0d\n\x0d\n  return new ModuleWrap(url\x2C undefined\x2C namesWithDefault\x2C function() {\x0d\n    debug(`Loading CJSModule ${url}`);\x0d\n\x0d\n    let exports;\x0d\n    if (asyncESM.esmLoader.cjsCache.has(module)) {\x0d\n      exports = asyncESM.esmLoader.cjsCache.get(module);\x0d\n      asyncESM.esmLoader.cjsCache.delete(module);\x0d\n    } else {\x0d\n      try {\x0d\n        exports = CJSModule._load(filename\x2C undefined\x2C isMain);\x0d\n      } catch (err) {\x0d\n        enrichCJSError(err\x2C undefined\x2C filename);\x0d\n        throw err;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    for (const exportName of exportNames) {\x0d\n      if (!ObjectPrototypeHasOwnProperty(exports\x2C exportName) ||\x0d\n          exportName === 'default')\x0d\n        continue;\x0d\n      // We might trigger a getter -> dont fail.\x0d\n      let value;\x0d\n      try {\x0d\n        value = exports[exportName];\x0d\n      } catch {\x0d\n        // Continue regardless of error.\x0d\n      }\x0d\n      this.setExport(exportName\x2C value);\x0d\n    }\x0d\n    this.setExport('default'\x2C exports);\x0d\n  });\x0d\n});\x0d\n\x0d\nfunction cjsPreparseModuleExports(filename) {\x0d\n  let module = CJSModule._cache[filename];\x0d\n  if (module) {\x0d\n    const cached = cjsParseCache.get(module);\x0d\n    if (cached)\x0d\n      return { module\x2C exportNames: cached.exportNames };\x0d\n  }\x0d\n  const loaded = Boolean(module);\x0d\n  if (!loaded) {\x0d\n    module = new CJSModule(filename);\x0d\n    module.filename = filename;\x0d\n    module.paths = CJSModule._nodeModulePaths(module.path);\x0d\n    CJSModule._cache[filename] = module;\x0d\n  }\x0d\n\x0d\n  let source;\x0d\n  try {\x0d\n    source = readFileSync(filename\x2C 'utf8');\x0d\n  } catch {\x0d\n    // Continue regardless of error.\x0d\n  }\x0d\n\x0d\n  let exports\x2C reexports;\x0d\n  try {\x0d\n    ({ exports\x2C reexports } = cjsParse(source || ''));\x0d\n  } catch {\x0d\n    exports = [];\x0d\n    reexports = [];\x0d\n  }\x0d\n\x0d\n  const exportNames = new SafeSet(new SafeArrayIterator(exports));\x0d\n\x0d\n  // Set first for cycles.\x0d\n  cjsParseCache.set(module\x2C { source\x2C exportNames\x2C loaded });\x0d\n\x0d\n  if (reexports.length) {\x0d\n    module.filename = filename;\x0d\n    module.paths = CJSModule._nodeModulePaths(module.path);\x0d\n  }\x0d\n  ArrayPrototypeForEach(reexports\x2C (reexport) => {\x0d\n    let resolved;\x0d\n    try {\x0d\n      resolved = CJSModule._resolveFilename(reexport\x2C module);\x0d\n    } catch {\x0d\n      return;\x0d\n    }\x0d\n    const ext = extname(resolved);\x0d\n    if ((ext === '.js' || ext === '.cjs' || !CJSModule._extensions[ext]) &&\x0d\n        isAbsolute(resolved)) {\x0d\n      const { exportNames: reexportNames } = cjsPreparseModuleExports(resolved);\x0d\n      for (const name of reexportNames)\x0d\n        exportNames.add(name);\x0d\n    }\x0d\n  });\x0d\n\x0d\n  return { module\x2C exportNames };\x0d\n}\x0d\n\x0d\n// Strategy for loading a node builtin CommonJS module that isn't\x0d\n// through normal resolution\x0d\ntranslators.set('builtin'\x2C async function builtinStrategy(url) {\x0d\n  debug(`Translating BuiltinModule ${url}`);\x0d\n  // Slice 'node:' scheme\x0d\n  const id = StringPrototypeSlice(url\x2C 5);\x0d\n  const module = loadNativeModule(id\x2C url);\x0d\n  if (!StringPrototypeStartsWith(url\x2C 'node:') || !module) {\x0d\n    throw new ERR_UNKNOWN_BUILTIN_MODULE(url);\x0d\n  }\x0d\n  debug(`Loading BuiltinModule ${url}`);\x0d\n  return module.getESMFacade();\x0d\n});\x0d\n\x0d\n// Strategy for loading a JSON file\x0d\ntranslators.set('json'\x2C async function jsonStrategy(url\x2C source) {\x0d\n  emitExperimentalWarning('Importing JSON modules');\x0d\n  assertBufferSource(source\x2C true\x2C 'load');\x0d\n  debug(`Loading JSONModule ${url}`);\x0d\n  const pathname = StringPrototypeStartsWith(url\x2C 'file:') ?\x0d\n    fileURLToPath(url) : null;\x0d\n  let modulePath;\x0d\n  let module;\x0d\n  if (pathname) {\x0d\n    modulePath = isWindows ?\x0d\n      StringPrototypeReplace(pathname\x2C winSepRegEx\x2C '\\\\') : pathname;\x0d\n    module = CJSModule._cache[modulePath];\x0d\n    if (module && module.loaded) {\x0d\n      const exports = module.exports;\x0d\n      return new ModuleWrap(url\x2C undefined\x2C ['default']\x2C function() {\x0d\n        this.setExport('default'\x2C exports);\x0d\n      });\x0d\n    }\x0d\n  }\x0d\n  source = stringify(source);\x0d\n  if (pathname) {\x0d\n    // A require call could have been called on the same file during loading and\x0d\n    // that resolves synchronously. To make sure we always return the identical\x0d\n    // export\x2C we have to check again if the module already exists or not.\x0d\n    module = CJSModule._cache[modulePath];\x0d\n    if (module && module.loaded) {\x0d\n      const exports = module.exports;\x0d\n      return new ModuleWrap(url\x2C undefined\x2C ['default']\x2C function() {\x0d\n        this.setExport('default'\x2C exports);\x0d\n      });\x0d\n    }\x0d\n  }\x0d\n  try {\x0d\n    const exports = JSONParse(stripBOM(source));\x0d\n    module = {\x0d\n      exports\x2C\x0d\n      loaded: true\x0d\n    };\x0d\n  } catch (err) {\x0d\n    // TODO (BridgeAR): We could add a NodeCore error that wraps the JSON\x0d\n    // parse error instead of just manipulating the original error message.\x0d\n    // That would allow to add further properties and maybe additional\x0d\n    // debugging information.\x0d\n    err.message = errPath(url) + ': ' + err.message;\x0d\n    throw err;\x0d\n  }\x0d\n  if (pathname) {\x0d\n    CJSModule._cache[modulePath] = module;\x0d\n  }\x0d\n  return new ModuleWrap(url\x2C undefined\x2C ['default']\x2C function() {\x0d\n    debug(`Parsing JSONModule ${url}`);\x0d\n    this.setExport('default'\x2C module.exports);\x0d\n  });\x0d\n});\x0d\n\x0d\n// Strategy for loading a wasm module\x0d\ntranslators.set('wasm'\x2C async function(url\x2C source) {\x0d\n  emitExperimentalWarning('Importing WebAssembly modules');\x0d\n\x0d\n  assertBufferSource(source\x2C false\x2C 'load');\x0d\n\x0d\n  debug(`Translating WASMModule ${url}`);\x0d\n\x0d\n  let compiled;\x0d\n  try {\x0d\n    compiled = await WebAssembly.compile(source);\x0d\n  } catch (err) {\x0d\n    err.message = errPath(url) + ': ' + err.message;\x0d\n    throw err;\x0d\n  }\x0d\n\x0d\n  const imports =\x0d\n      ArrayPrototypeMap(WebAssembly.Module.imports(compiled)\x2C\x0d\n                        ({ module }) => module);\x0d\n  const exports =\x0d\n    ArrayPrototypeMap(WebAssembly.Module.exports(compiled)\x2C\x0d\n                      ({ name }) => name);\x0d\n\x0d\n  return createDynamicModule(imports\x2C exports\x2C url\x2C (reflect) => {\x0d\n    const { exports } = new WebAssembly.Instance(compiled\x2C reflect.imports);\x0d\n    for (const expt of ObjectKeys(exports))\x0d\n      reflect.exports[expt].set(exports[expt]);\x0d\n  }).module;\x0d\n});\x0d\n
code-source-info,0x39aa287b4de,125,0,11025,C0O0C4O11025,,
code-creation,Function,10,381897,0x39aa287bc7e,715, node:internal/modules/esm/translators:1:1,0x39aa287b458,~
code-source-info,0x39aa287bc7e
code-creation,Eval,10,382327,0x39aa287d176,5, node:internal/modules/esm/create_dynamic_module:1:1,0x39aa287cfa0,~
script-source,126,node:internal/modules/esm/create_dynamic_module,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypeMap\x2C\x0d\n  JSONStringify\x2C\x0d\n  ObjectCreate\x2C\x0d\n  SafeSet\x2C\x0d\n} = primordials;\x0d\n\x0d\nlet debug = require('internal/util/debuglog').debuglog('esm'\x2C (fn) => {\x0d\n  debug = fn;\x0d\n});\x0d\n\x0d\nfunction createImport(impt\x2C index) {\x0d\n  const imptPath = JSONStringify(impt);\x0d\n  return `import * as $import_${index} from ${imptPath};\x0d\nimport.meta.imports[${imptPath}] = $import_${index};`;\x0d\n}\x0d\n\x0d\nfunction createExport(expt) {\x0d\n  const name = `${expt}`;\x0d\n  return `let $${name};\x0d\nexport { $${name} as ${name} };\x0d\nimport.meta.exports.${name} = {\x0d\n  get: () => $${name}\x2C\x0d\n  set: (v) => $${name} = v\x2C\x0d\n};`;\x0d\n}\x0d\n\x0d\nconst createDynamicModule = (imports\x2C exports\x2C url = ''\x2C evaluate) => {\x0d\n  debug('creating ESM facade for %s with exports: %j'\x2C url\x2C exports);\x0d\n  const source = `\x0d\n${ArrayPrototypeJoin(ArrayPrototypeMap(imports\x2C createImport)\x2C '\\n')}\x0d\n${ArrayPrototypeJoin(ArrayPrototypeMap(exports\x2C createExport)\x2C '\\n')}\x0d\nimport.meta.done();\x0d\n`;\x0d\n  const { ModuleWrap\x2C callbackMap } = internalBinding('module_wrap');\x0d\n  const m = new ModuleWrap(`${url}`\x2C undefined\x2C source\x2C 0\x2C 0);\x0d\n\x0d\n  const readyfns = new SafeSet();\x0d\n  const reflect = {\x0d\n    exports: ObjectCreate(null)\x2C\x0d\n    onReady: (cb) => { readyfns.add(cb); }\x2C\x0d\n  };\x0d\n\x0d\n  if (imports.length)\x0d\n    reflect.imports = ObjectCreate(null);\x0d\n\x0d\n  callbackMap.set(m\x2C {\x0d\n    initializeImportMeta: (meta\x2C wrap) => {\x0d\n      meta.exports = reflect.exports;\x0d\n      if (reflect.imports)\x0d\n        meta.imports = reflect.imports;\x0d\n      meta.done = () => {\x0d\n        evaluate(reflect);\x0d\n        reflect.onReady = (cb) => cb(reflect);\x0d\n        for (const fn of readyfns) {\x0d\n          readyfns.delete(fn);\x0d\n          fn(reflect);\x0d\n        }\x0d\n      };\x0d\n    }\x2C\x0d\n  });\x0d\n\x0d\n  return {\x0d\n    module: m\x2C\x0d\n    reflect\x2C\x0d\n  };\x0d\n};\x0d\n\x0d\nmodule.exports = createDynamicModule;\x0d\n
code-source-info,0x39aa287d176,126,0,1828,C0O0C4O1828,,
code-creation,Function,10,382513,0x39aa287d39e,111, node:internal/modules/esm/create_dynamic_module:1:1,0x39aa287d0f0,~
code-source-info,0x39aa287d39e,126,0,1828,C0O0C39O28C45O51C51O73C57O91C63O108C69O150C72O150C77O183C90O184C96O150C98O672C103O1789C105O1804C110O1827,,
new,MemoryChunk,0x5b6ec80000,262144
code-creation,Eval,10,383257,0x39aa287e2d6,5, node:internal/vm/module:1:1,0x39aa287dd90,~
script-source,127,node:internal/vm/module,'use strict';\x0d\n\x0d\nconst assert = require('internal/assert');\x0d\nconst {\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  ArrayPrototypeIndexOf\x2C\x0d\n  ArrayPrototypeSome\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectGetPrototypeOf\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  PromiseAll\x2C\x0d\n  ReflectApply\x2C\x0d\n  SafeWeakMap\x2C\x0d\n  Symbol\x2C\x0d\n  SymbolToStringTag\x2C\x0d\n  TypeError\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { isContext } = internalBinding('contextify');\x0d\nconst {\x0d\n  isModuleNamespaceObject\x2C\x0d\n  isArrayBufferView\x2C\x0d\n} = require('internal/util/types');\x0d\nconst {\x0d\n  getConstructorOf\x2C\x0d\n  customInspectSymbol\x2C\x0d\n  emitExperimentalWarning\x2C\x0d\n} = require('internal/util');\x0d\nconst {\x0d\n  ERR_INVALID_ARG_TYPE\x2C\x0d\n  ERR_INVALID_ARG_VALUE\x2C\x0d\n  ERR_VM_MODULE_ALREADY_LINKED\x2C\x0d\n  ERR_VM_MODULE_DIFFERENT_CONTEXT\x2C\x0d\n  ERR_VM_MODULE_CANNOT_CREATE_CACHED_DATA\x2C\x0d\n  ERR_VM_MODULE_LINKING_ERRORED\x2C\x0d\n  ERR_VM_MODULE_NOT_MODULE\x2C\x0d\n  ERR_VM_MODULE_STATUS\x2C\x0d\n} = require('internal/errors').codes;\x0d\nconst {\x0d\n  validateBoolean\x2C\x0d\n  validateFunction\x2C\x0d\n  validateInt32\x2C\x0d\n  validateObject\x2C\x0d\n  validateUint32\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst binding = internalBinding('module_wrap');\x0d\nconst {\x0d\n  ModuleWrap\x2C\x0d\n  kUninstantiated\x2C\x0d\n  kInstantiating\x2C\x0d\n  kInstantiated\x2C\x0d\n  kEvaluating\x2C\x0d\n  kEvaluated\x2C\x0d\n  kErrored\x2C\x0d\n} = binding;\x0d\n\x0d\nconst STATUS_MAP = {\x0d\n  [kUninstantiated]: 'unlinked'\x2C\x0d\n  [kInstantiating]: 'linking'\x2C\x0d\n  [kInstantiated]: 'linked'\x2C\x0d\n  [kEvaluating]: 'evaluating'\x2C\x0d\n  [kEvaluated]: 'evaluated'\x2C\x0d\n  [kErrored]: 'errored'\x2C\x0d\n};\x0d\n\x0d\nlet globalModuleId = 0;\x0d\nconst defaultModuleName = 'vm:module';\x0d\nconst wrapToModuleMap = new SafeWeakMap();\x0d\n\x0d\nconst kWrap = Symbol('kWrap');\x0d\nconst kContext = Symbol('kContext');\x0d\nconst kPerContextModuleId = Symbol('kPerContextModuleId');\x0d\nconst kLink = Symbol('kLink');\x0d\n\x0d\nclass Module {\x0d\n  constructor(options) {\x0d\n    emitExperimentalWarning('VM Modules');\x0d\n\x0d\n    if (new.target === Module) {\x0d\n      // eslint-disable-next-line no-restricted-syntax\x0d\n      throw new TypeError('Module is not a constructor');\x0d\n    }\x0d\n\x0d\n    const {\x0d\n      context\x2C\x0d\n      sourceText\x2C\x0d\n      syntheticExportNames\x2C\x0d\n      syntheticEvaluationSteps\x2C\x0d\n    } = options;\x0d\n\x0d\n    if (context !== undefined) {\x0d\n      validateObject(context\x2C 'context');\x0d\n      if (!isContext(context)) {\x0d\n        throw new ERR_INVALID_ARG_TYPE('options.context'\x2C 'vm.Context'\x2C\x0d\n                                       context);\x0d\n      }\x0d\n    }\x0d\n\x0d\n    let { identifier } = options;\x0d\n    if (identifier !== undefined) {\x0d\n      validateString(identifier\x2C 'options.identifier');\x0d\n    } else if (context === undefined) {\x0d\n      identifier = `${defaultModuleName}(${globalModuleId++})`;\x0d\n    } else if (context[kPerContextModuleId] !== undefined) {\x0d\n      const curId = context[kPerContextModuleId];\x0d\n      identifier = `${defaultModuleName}(${curId})`;\x0d\n      context[kPerContextModuleId] += 1;\x0d\n    } else {\x0d\n      identifier = `${defaultModuleName}(0)`;\x0d\n      ObjectDefineProperty(context\x2C kPerContextModuleId\x2C {\x0d\n        value: 1\x2C\x0d\n        writable: true\x2C\x0d\n        enumerable: false\x2C\x0d\n        configurable: true\x2C\x0d\n      });\x0d\n    }\x0d\n\x0d\n    if (sourceText !== undefined) {\x0d\n      this[kWrap] = new ModuleWrap(identifier\x2C context\x2C sourceText\x2C\x0d\n                                   options.lineOffset\x2C options.columnOffset\x2C\x0d\n                                   options.cachedData);\x0d\n\x0d\n      binding.callbackMap.set(this[kWrap]\x2C {\x0d\n        initializeImportMeta: options.initializeImportMeta\x2C\x0d\n        importModuleDynamically: options.importModuleDynamically ?\x0d\n          importModuleDynamicallyWrap(options.importModuleDynamically) :\x0d\n          undefined\x2C\x0d\n      });\x0d\n    } else {\x0d\n      assert(syntheticEvaluationSteps);\x0d\n      this[kWrap] = new ModuleWrap(identifier\x2C context\x2C\x0d\n                                   syntheticExportNames\x2C\x0d\n                                   syntheticEvaluationSteps);\x0d\n    }\x0d\n\x0d\n    wrapToModuleMap.set(this[kWrap]\x2C this);\x0d\n\x0d\n    this[kContext] = context;\x0d\n  }\x0d\n\x0d\n  get identifier() {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    return this[kWrap].url;\x0d\n  }\x0d\n\x0d\n  get context() {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    return this[kContext];\x0d\n  }\x0d\n\x0d\n  get namespace() {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    if (this[kWrap].getStatus() < kInstantiated) {\x0d\n      throw new ERR_VM_MODULE_STATUS('must not be unlinked or linking');\x0d\n    }\x0d\n    return this[kWrap].getNamespace();\x0d\n  }\x0d\n\x0d\n  get status() {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    return STATUS_MAP[this[kWrap].getStatus()];\x0d\n  }\x0d\n\x0d\n  get error() {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    if (this[kWrap].getStatus() !== kErrored) {\x0d\n      throw new ERR_VM_MODULE_STATUS('must be errored');\x0d\n    }\x0d\n    return this[kWrap].getError();\x0d\n  }\x0d\n\x0d\n  async link(linker) {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    validateFunction(linker\x2C 'linker');\x0d\n    if (this.status === 'linked') {\x0d\n      throw new ERR_VM_MODULE_ALREADY_LINKED();\x0d\n    }\x0d\n    if (this.status !== 'unlinked') {\x0d\n      throw new ERR_VM_MODULE_STATUS('must be unlinked');\x0d\n    }\x0d\n    await this[kLink](linker);\x0d\n    this[kWrap].instantiate();\x0d\n  }\x0d\n\x0d\n  async evaluate(options = {}) {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n\x0d\n    validateObject(options\x2C 'options');\x0d\n\x0d\n    let timeout = options.timeout;\x0d\n    if (timeout === undefined) {\x0d\n      timeout = -1;\x0d\n    } else {\x0d\n      validateUint32(timeout\x2C 'options.timeout'\x2C true);\x0d\n    }\x0d\n    const { breakOnSigint = false } = options;\x0d\n    validateBoolean(breakOnSigint\x2C 'options.breakOnSigint');\x0d\n    const status = this[kWrap].getStatus();\x0d\n    if (status !== kInstantiated &&\x0d\n        status !== kEvaluated &&\x0d\n        status !== kErrored) {\x0d\n      throw new ERR_VM_MODULE_STATUS(\x0d\n        'must be one of linked\x2C evaluated\x2C or errored'\x0d\n      );\x0d\n    }\x0d\n    await this[kWrap].evaluate(timeout\x2C breakOnSigint);\x0d\n  }\x0d\n\x0d\n  [customInspectSymbol](depth\x2C options) {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    if (typeof depth === 'number' && depth < 0)\x0d\n      return this;\x0d\n\x0d\n    const constructor = getConstructorOf(this) || Module;\x0d\n    const o = ObjectCreate({ constructor });\x0d\n    o.status = this.status;\x0d\n    o.identifier = this.identifier;\x0d\n    o.context = this.context;\x0d\n\x0d\n    ObjectSetPrototypeOf(o\x2C ObjectGetPrototypeOf(this));\x0d\n    ObjectDefineProperty(o\x2C SymbolToStringTag\x2C {\x0d\n      value: constructor.name\x2C\x0d\n      configurable: true\x0d\n    });\x0d\n\x0d\n    // Lazy to avoid circular dependency\x0d\n    const { inspect } = require('internal/util/inspect');\x0d\n    return inspect(o\x2C { ...options\x2C customInspect: false });\x0d\n  }\x0d\n}\x0d\n\x0d\nconst kDependencySpecifiers = Symbol('kDependencySpecifiers');\x0d\nconst kNoError = Symbol('kNoError');\x0d\n\x0d\nclass SourceTextModule extends Module {\x0d\n  #error = kNoError;\x0d\n  #statusOverride;\x0d\n\x0d\n  constructor(sourceText\x2C options = {}) {\x0d\n    validateString(sourceText\x2C 'sourceText');\x0d\n    validateObject(options\x2C 'options');\x0d\n\x0d\n    const {\x0d\n      lineOffset = 0\x2C\x0d\n      columnOffset = 0\x2C\x0d\n      initializeImportMeta\x2C\x0d\n      importModuleDynamically\x2C\x0d\n      context\x2C\x0d\n      identifier\x2C\x0d\n      cachedData\x2C\x0d\n    } = options;\x0d\n\x0d\n    validateInt32(lineOffset\x2C 'options.lineOffset');\x0d\n    validateInt32(columnOffset\x2C 'options.columnOffset');\x0d\n\x0d\n    if (initializeImportMeta !== undefined &&\x0d\n        typeof initializeImportMeta !== 'function') {\x0d\n      throw new ERR_INVALID_ARG_TYPE(\x0d\n        'options.initializeImportMeta'\x2C 'function'\x2C initializeImportMeta);\x0d\n    }\x0d\n\x0d\n    if (importModuleDynamically !== undefined &&\x0d\n        typeof importModuleDynamically !== 'function') {\x0d\n      throw new ERR_INVALID_ARG_TYPE(\x0d\n        'options.importModuleDynamically'\x2C 'function'\x2C\x0d\n        importModuleDynamically);\x0d\n    }\x0d\n\x0d\n    if (cachedData !== undefined && !isArrayBufferView(cachedData)) {\x0d\n      throw new ERR_INVALID_ARG_TYPE(\x0d\n        'options.cachedData'\x2C\x0d\n        ['Buffer'\x2C 'TypedArray'\x2C 'DataView']\x2C\x0d\n        cachedData\x0d\n      );\x0d\n    }\x0d\n\x0d\n    super({\x0d\n      sourceText\x2C\x0d\n      context\x2C\x0d\n      identifier\x2C\x0d\n      lineOffset\x2C\x0d\n      columnOffset\x2C\x0d\n      cachedData\x2C\x0d\n      initializeImportMeta\x2C\x0d\n      importModuleDynamically\x2C\x0d\n    });\x0d\n\x0d\n    this[kLink] = async (linker) => {\x0d\n      this.#statusOverride = 'linking';\x0d\n\x0d\n      const promises = this[kWrap].link(async (identifier\x2C assert) => {\x0d\n        const module = await linker(identifier\x2C this\x2C { assert });\x0d\n        if (module[kWrap] === undefined) {\x0d\n          throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n        }\x0d\n        if (module.context !== this.context) {\x0d\n          throw new ERR_VM_MODULE_DIFFERENT_CONTEXT();\x0d\n        }\x0d\n        if (module.status === 'errored') {\x0d\n          // TODO(devsnek): replace with ERR_VM_MODULE_LINK_FAILURE\x0d\n          // and error cause proposal.\x0d\n          throw new ERR_VM_MODULE_LINKING_ERRORED();\x0d\n        }\x0d\n        if (module.status === 'unlinked') {\x0d\n          await module[kLink](linker);\x0d\n        }\x0d\n        return module[kWrap];\x0d\n      });\x0d\n\x0d\n      try {\x0d\n        if (promises !== undefined) {\x0d\n          await PromiseAll(promises);\x0d\n        }\x0d\n      } catch (e) {\x0d\n        this.#error = e;\x0d\n        throw e;\x0d\n      } finally {\x0d\n        this.#statusOverride = undefined;\x0d\n      }\x0d\n    };\x0d\n\x0d\n    this[kDependencySpecifiers] = undefined;\x0d\n  }\x0d\n\x0d\n  get dependencySpecifiers() {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    if (this[kDependencySpecifiers] === undefined) {\x0d\n      this[kDependencySpecifiers] = this[kWrap].getStaticDependencySpecifiers();\x0d\n    }\x0d\n    return this[kDependencySpecifiers];\x0d\n  }\x0d\n\x0d\n  get status() {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    if (this.#error !== kNoError) {\x0d\n      return 'errored';\x0d\n    }\x0d\n    if (this.#statusOverride) {\x0d\n      return this.#statusOverride;\x0d\n    }\x0d\n    return super.status;\x0d\n  }\x0d\n\x0d\n  get error() {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    if (this.#error !== kNoError) {\x0d\n      return this.#error;\x0d\n    }\x0d\n    return super.error;\x0d\n  }\x0d\n\x0d\n  createCachedData() {\x0d\n    const { status } = this;\x0d\n    if (status === 'evaluating' ||\x0d\n        status === 'evaluated' ||\x0d\n        status === 'errored') {\x0d\n      throw new ERR_VM_MODULE_CANNOT_CREATE_CACHED_DATA();\x0d\n    }\x0d\n    return this[kWrap].createCachedData();\x0d\n  }\x0d\n}\x0d\n\x0d\nclass SyntheticModule extends Module {\x0d\n  constructor(exportNames\x2C evaluateCallback\x2C options = {}) {\x0d\n    if (!ArrayIsArray(exportNames) ||\x0d\n      ArrayPrototypeSome(exportNames\x2C (e) => typeof e !== 'string')) {\x0d\n      throw new ERR_INVALID_ARG_TYPE('exportNames'\x2C\x0d\n                                     'Array of unique strings'\x2C\x0d\n                                     exportNames);\x0d\n    } else {\x0d\n      ArrayPrototypeForEach(exportNames\x2C (name\x2C i) => {\x0d\n        if (ArrayPrototypeIndexOf(exportNames\x2C name\x2C i + 1) !== -1) {\x0d\n          throw new ERR_INVALID_ARG_VALUE(`exportNames.${name}`\x2C\x0d\n                                          name\x2C\x0d\n                                          'is duplicated');\x0d\n        }\x0d\n      });\x0d\n    }\x0d\n    validateFunction(evaluateCallback\x2C 'evaluateCallback');\x0d\n\x0d\n    validateObject(options\x2C 'options');\x0d\n\x0d\n    const { context\x2C identifier } = options;\x0d\n\x0d\n    super({\x0d\n      syntheticExportNames: exportNames\x2C\x0d\n      syntheticEvaluationSteps: evaluateCallback\x2C\x0d\n      context\x2C\x0d\n      identifier\x2C\x0d\n    });\x0d\n\x0d\n    this[kLink] = () => this[kWrap].link(() => {\x0d\n      assert.fail('link callback should not be called');\x0d\n    });\x0d\n  }\x0d\n\x0d\n  setExport(name\x2C value) {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    validateString(name\x2C 'name');\x0d\n    if (this[kWrap].getStatus() < kInstantiated) {\x0d\n      throw new ERR_VM_MODULE_STATUS('must be linked');\x0d\n    }\x0d\n    this[kWrap].setExport(name\x2C value);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction importModuleDynamicallyWrap(importModuleDynamically) {\x0d\n  const importModuleDynamicallyWrapper = async (...args) => {\x0d\n    const m = await ReflectApply(importModuleDynamically\x2C this\x2C args);\x0d\n    if (isModuleNamespaceObject(m)) {\x0d\n      return m;\x0d\n    }\x0d\n    if (!m || m[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    if (m.status === 'errored') {\x0d\n      throw m.error;\x0d\n    }\x0d\n    return m.namespace;\x0d\n  };\x0d\n  return importModuleDynamicallyWrapper;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  Module\x2C\x0d\n  SourceTextModule\x2C\x0d\n  SyntheticModule\x2C\x0d\n  importModuleDynamicallyWrap\x2C\x0d\n  getModuleFromWrap: (wrap) => wrapToModuleMap.get(wrap)\x2C\x0d\n};\x0d\n
code-source-info,0x39aa287e2d6,127,0,12768,C0O0C4O12768,,
code-creation,Function,10,384289,0x39aa287f536,872, node:internal/vm/module:1:1,0x39aa287e250,~
code-source-info,0x39aa287f
code-creation,Function,10,384454,0x39aa287fa76,30,<instance_members_initializer> node:internal/vm/module:256:3,0x39aa287e8c0,~
code-source-info,0x39aa287fa76,127,7051,7088,C3O7060C29O7088,,
code-creation,LazyCompile,10,384795,0x5b6ec824d6,30,ESMLoader node:internal/modules/esm/loader:57:1,0x39aa285f1a8,~
code-source-info,0x5b6ec824d6,114,1618,1618,C9O1618C29O1618,,
code-creation,LazyCompile,10,384896,0x5b6ec837fe,27,ModuleMap node:internal/modules/esm/module_map:17:14,0x39aa2861690,~
code-source-info,0x5b6ec837fe,115,534,551,C3O540C7O546C11O540C26O550,,
code-creation,LazyCompile,10,384980,0x5b6ec83aa6,13,desc.value node:internal/per_context/primordials:325:32,0x13fcdd09f70,~
code-source-info,0x5b6ec83aa6,6,9820,9881,C0O9838C7O9845C12O9868,,
code-creation,LazyCompile,10,385044,0x5b6ec83bae,13,SafeIterator node:internal/per_context/primordials:270:16,0x13fcdd099c0,~
code-source-info,0x5b6ec83bae,6,8054,8116,C0O8074C3O8091C7O8089C12O8115,,
code-creation,LazyCompile,10,385120,0x5b6ec83ce6,13,next node:internal/per_context/primordials:273:9,0x13fcdd09a88,~
code-source-info,0x5b6ec83ce6,6,8126,8173,C0O8138C3O8155C8O8145C12O8166,,
code-creation,LazyCompile,10,385413,0x5b6ec8435e,28,getEmbedderOptions node:internal/options:32:28,0x2e2fa684400,~
code-source-info,0x5b6ec8435e,96,791,913,C0O799C6O828C11O846C17O844C23O887C27O910,,
code-creation,LazyCompile,10,385648,0x5b6ec84606,315,Module._initPaths node:internal/modules/cjs/loader:1231:29,0x39aa2858760,~
code-source-info,0x5b6ec
code-creation,Function,11,385916,0x20b1dd43f40,3076,normalizeString node:path:66:25,0x14570b4d458,^
code-source-info,0x20b1dd43f40,41,2226,4212,,,
code-creation,Function,11,385977,0x20b1dd44bc0,1344,deprecate node:internal/util:96:19,0x423ed457f8,^
code-source-info,0x20b1dd44bc0,16,2503,3720,,,
code-creation,Function,11,386016,0x20b1dd45160,432,getCLIOptionsFromBinding node:internal/options:18:34,0x2e2fa684360,^
code-source-info,0x20b1dd45160,96,514,620,,,
code-creation,Function,11,386065,0x20b1dd45380,104,next node:internal/per_context/primordials:273:9,0x13fcdd09a88,^
code-source-info,0x20b1dd45380,6,8126,8173,,,
code-creation,Function,11,386100,0x20b1dd45460,252,SafeMap node:internal/per_context/primordials:351:16,0x13fcdd0a018,^
code-source-info,0x20b1dd45460,6,10550,10567,,,
code-creation,Eval,10,386378,0x5b6ec87a4e,5, node:internal/modules/run_main:1:1,0x5b6ec87828,~
script-source,128,node:internal/modules/run_main,'use strict';\x0d\n\x0d\nconst {\x0d\n  ObjectCreate\x2C\x0d\n  StringPrototypeEndsWith\x2C\x0d\n} = primordials;\x0d\nconst CJSLoader = require('internal/modules/cjs/loader');\x0d\nconst { Module\x2C toRealPath\x2C readPackageScope } = CJSLoader;\x0d\nconst { getOptionValue } = require('internal/options');\x0d\nconst path = require('path');\x0d\nconst {\x0d\n  handleProcessExit\x2C\x0d\n} = require('internal/modules/esm/handle_process_exit');\x0d\n\x0d\nfunction resolveMainPath(main) {\x0d\n  // Note extension resolution for the main entry point can be deprecated in a\x0d\n  // future major.\x0d\n  // Module._findPath is monkey-patchable here.\x0d\n  let mainPath = Module._findPath(path.resolve(main)\x2C null\x2C true);\x0d\n  if (!mainPath)\x0d\n    return;\x0d\n\x0d\n  const preserveSymlinksMain = getOptionValue('--preserve-symlinks-main');\x0d\n  if (!preserveSymlinksMain)\x0d\n    mainPath = toRealPath(mainPath);\x0d\n\x0d\n  return mainPath;\x0d\n}\x0d\n\x0d\nfunction shouldUseESMLoader(mainPath) {\x0d\n  const userLoader = getOptionValue('--experimental-loader');\x0d\n  if (userLoader)\x0d\n    return true;\x0d\n  const esModuleSpecifierResolution =\x0d\n    getOptionValue('--experimental-specifier-resolution');\x0d\n  if (esModuleSpecifierResolution === 'node')\x0d\n    return true;\x0d\n  // Determine the module format of the main\x0d\n  if (mainPath && StringPrototypeEndsWith(mainPath\x2C '.mjs'))\x0d\n    return true;\x0d\n  if (!mainPath || StringPrototypeEndsWith(mainPath\x2C '.cjs'))\x0d\n    return false;\x0d\n  const pkg = readPackageScope(mainPath);\x0d\n  return pkg && pkg.data.type === 'module';\x0d\n}\x0d\n\x0d\nfunction runMainESM(mainPath) {\x0d\n  const { loadESM } = require('internal/process/esm_loader');\x0d\n  const { pathToFileURL } = require('internal/url');\x0d\n\x0d\n  handleMainPromise(loadESM((esmLoader) => {\x0d\n    const main = path.isAbsolute(mainPath) ?\x0d\n      pathToFileURL(mainPath).href : mainPath;\x0d\n    return esmLoader.import(main\x2C undefined\x2C ObjectCreate(null));\x0d\n  }));\x0d\n}\x0d\n\x0d\nasync function handleMainPromise(promise) {\x0d\n  process.on('exit'\x2C handleProcessExit);\x0d\n  try {\x0d\n    return await promise;\x0d\n  } finally {\x0d\n    process.off('exit'\x2C handleProcessExit);\x0d\n  }\x0d\n}\x0d\n\x0d\n// For backwards compatibility\x2C we have to run a bunch of\x0d\n// monkey-patchable code that belongs to the CJS loader (exposed by\x0d\n// `require('module')`) even when the entry point is ESM.\x0d\nfunction executeUserEntryPoint(main = process.argv[1]) {\x0d\n  const resolvedMain = resolveMainPath(main);\x0d\n  const useESMLoader = shouldUseESMLoader(resolvedMain);\x0d\n  if (useESMLoader) {\x0d\n    runMainESM(resolvedMain || main);\x0d\n  } else {\x0d\n    // Module._load is the monkey-patchable CJS module loader.\x0d\n    Module._load(main\x2C null\x2C true);\x0d\n  }\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  executeUserEntryPoint\x2C\x0d\n  handleMainPromise\x2C\x0d\n};\x0d\n
code-source-info,0x5b6ec87a4e,128,0,2621,C0O0C4O2621,,
code-creation,Function,10,386604,0x5b6ec87d36,178, node:internal/modules/run_main:1:1,0x5b6ec879c8,~
code-source-info,0x5b6ec87d36,128,0,2621,C0O0C66O28C72O45C78O107C84O107C89O156C95O164C101O176C107O236C113O236C118O217C124O279C130O279C134O279C136O332C142O332C147O308C153O2549C160O2571C166O2597C172O2564C177O2620,,
code-creation,LazyCompile,10,386817,0x5b6ec88326,163,initializeESMLoader node:internal/bootstrap/pre_execution:424:29,0x2e2fa682568,~
code-source-info,0x5b6ec88326,95,13897,15012,C0O13981C6O13981C13O14030C16O14026C21O14024C25O14050C30O14054C34O14074C40O14103C41O14110C42O14215C48O14215C53O14129C58O14170C63O14262C69O14262C74O14466C79O14424C83O14537C88O14498C92O14707C100O14711C106O14830C112O14830C117O14778C122O14786C127O14804C132O14877C138O14877C143O14897C145O14907C149O14922C151O14942C155O14967C157O14986C162O15011,,
code-creation,LazyCompile,10,386948,0x5b6ec8853e,5,get hasLoadedAnyUserCJSModule node:internal/modules/cjs/loader:74:32,0x39aa2857c50,~
code-source-info,0x5b6ec8853e,111,2379,2419,C0O2384C4O2417,,
code-creation,LazyCompile,10,387034,0x5b6ec88626,53,loadPreloadModules node:internal/bootstrap/pre_execution:467:28,0x2e2fa682658,~
code-source-info,0x5b6ec88626,95,15504,15835,C0O15593C8O15593C13O15625C15O15662C21O15669C26O15750C32O15750C37O15750C42O15715C47O15795C52O15834,,
tick,0x7ff724f40d8b,387134,0,0x0,3,0x7ff7245a4800,0x2e2fa685528,0x3979d3bef45
code-creation,LazyCompile,10,387187,0x5b6ec88816,50,initializeFrozenIntrinsics node:internal/bootstrap/pre_execution:459:36,0x2e2fa682608,~
code-source-info,0x5b6ec88816,95,15245,15473,C0O15253C8O15257C14O15303C17O15311C28O15311C34O15425C40O15425C45O15462C49O15472,,
code-creation,LazyCompile,10,387288,0x5b6ec8893e,80,executeUserEntryPoint node:internal/modules/run_main:70:31,0x5b6ec87bc0,~
code-source-info,0x5b6ec8893e,128,2231,2545,C7O2247C14O2251C22O2282C25O2282C30O2329C33O2329C38O2366C40O2391C45O2402C50O2391C56O2506C61O2513C73O2513C79O2544,,
code-creation,LazyCompile,10,387375,0x5b6ec88d6e,68,resolveMainPath node:internal/modules/run_main:15:25,0x5b6ec87a80,~
code-source-info,0x5b6ec88d6e,128,412,839,C0O588C5O595C12O605C15O610C20O610C30O595C36O641C38O661C39O668C40O703C48O703C53O750C55O782C60O793C65O820C67O836,,
code-creation,LazyCompile,10,387578,0x5b6ec88f6e,436,Module._findPath node:internal/modules/cjs/loader:494:28,0x39aa2857f70,~
code-source-info,0x5b6ec88f6e
code-creation,LazyCompile,10,387771,0x5b6ec8931e,109,isAbsolute node:path:402:13,0x14570b4d5d0,~
code-source-info,0x5b6ec8931e,41,13104,13523,C0O13118C8O13118C13O13170C18O13183C19O13191C24O13205C25O13218C26O13239C33O13239C39O13280C42O13287C50O13355C58O13369C66O13405C72O13405C80O13444C82O13440C92O13481C98O13481C104O13465C108O13518,,
code-creation,LazyCompile,10,387975,0x5b6ec895d6,85,stat node:internal/modules/cjs/loader:151:14,0x39aa2857510,~
code-source-info,0x5b6ec895d6,111,4777,5186,C0O4793C5O4809C10O4809C17O4840C23O4886C28O4896C33O4896C39O4916C41O4942C43O4956C44O4980C49O4980C54O5013C61O5046C66O5128C71O5138C76O5138C82O5169C84O5183,,
code-creation,LazyCompile,10,388097,0x5b6ec897e6,232,toNamespacedPath node:path:618:19,0x14570b4d6f8,~
code-source-info,0x5b6ec897e6,41,20086,21201,C0O20152C6O20189C12O20196C17O20210C19O20222C20O20251C25O20257C30O20257C36O20296C43O20303C48O20316C50O20328C51O20336C58O20340C66O20387C68O20383C73O20445C81O20449C89O20496C91O20492C96O20541C104O20541C110O20594C112O20607C114O20603C121O20638C123O20634C128O20738C133O20760C139O20760C148O20800C151O20833C156O20865C161O20865C167O20845C175O20919C181O20919C189O20966C191O20962C198O20987C204O20987C212O21034C214O21030C219O21137C224O21154C228O21169C229O21184C231O21196,,
code-creation,LazyCompile,10,388449,0x5b6ec89a46,42,toRealPath node:internal/modules/cjs/loader:393:20,0x39aa28577e0,~
code-source-info,0x5b6ec89a46,111,11684,11800,C0O11703C5O11713C10O11726C17O11747C20O11758C28O11777C35O11713C41O11797,,
code-creation,LazyCompile,10,388860,0x5b6ec89e5e,1036,realpathSync node:fs:2412:22,0x3096a119320,~
script-source,80,node:fs,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n// Maintainers\x2C keep in mind that ES1-style octal literals (`0666`) are not\x0d\n// allowed in strict mode. Use ES6-style octal literals instead (`0o666`).\x0d\n\x0d\n'use strict';\x0d\n\x0d\n// When using FSReqCallback\x2C make sure to create the object only *after* all\x0d\n// parameter validation has happened\x2C so that the objects are not kept in memory\x0d\n// in case they are created but never used due to an exception.\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypePush\x2C\x0d\n  BigIntPrototypeToString\x2C\x0d\n  MathMax\x2C\x0d\n  Number\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  Promise\x2C\x0d\n  ReflectApply\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  SafeMap\x2C\x0d\n  String\x2C\x0d\n  StringPrototypeCharCodeAt\x2C\x0d\n  StringPrototypeIndexOf\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { fs: constants } = internalBinding('constants');\x0d\nconst {\x0d\n  S_IFIFO\x2C\x0d\n  S_IFLNK\x2C\x0d\n  S_IFMT\x2C\x0d\n  S_IFREG\x2C\x0d\n  S_IFSOCK\x2C\x0d\n  F_OK\x2C\x0d\n  R_OK\x2C\x0d\n  W_OK\x2C\x0d\n  X_OK\x2C\x0d\n  O_WRONLY\x2C\x0d\n  O_SYMLINK\x0d\n} = constants;\x0d\n\x0d\nconst pathModule = require('path');\x0d\nconst { isArrayBufferView } = require('internal/util/types');\x0d\n\x0d\n// We need to get the statValues from the binding at the callsite since\x0d\n// it's re-initialized after deserialization.\x0d\n\x0d\nconst binding = internalBinding('fs');\x0d\nconst { Buffer } = require('buffer');\x0d\nconst {\x0d\n  aggregateTwoErrors\x2C\x0d\n  codes: {\x0d\n    ERR_FS_FILE_TOO_LARGE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_FEATURE_UNAVAILABLE_ON_PLATFORM\x2C\x0d\n  }\x2C\x0d\n  AbortError\x2C\x0d\n  uvErrmapGet\x2C\x0d\n  uvException\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst { FSReqCallback } = binding;\x0d\nconst { toPathIfFileURL } = require('internal/url');\x0d\nconst internalUtil = require('internal/util');\x0d\nconst {\x0d\n  constants: {\x0d\n    kIoMaxLength\x2C\x0d\n    kMaxUserId\x2C\x0d\n  }\x2C\x0d\n  copyObject\x2C\x0d\n  Dirent\x2C\x0d\n  emitRecursiveRmdirWarning\x2C\x0d\n  getDirents\x2C\x0d\n  getOptions\x2C\x0d\n  getValidatedFd\x2C\x0d\n  getValidatedPath\x2C\x0d\n  getValidMode\x2C\x0d\n  handleErrorFromBinding\x2C\x0d\n  nullCheck\x2C\x0d\n  preprocessSymlinkDestination\x2C\x0d\n  Stats\x2C\x0d\n  getStatsFromBinding\x2C\x0d\n  realpathCacheKey\x2C\x0d\n  stringToFlags\x2C\x0d\n  stringToSymlinkType\x2C\x0d\n  toUnixTimestamp\x2C\x0d\n  validateBufferArray\x2C\x0d\n  validateCpOptions\x2C\x0d\n  validateOffsetLengthRead\x2C\x0d\n  validateOffsetLengthWrite\x2C\x0d\n  validatePath\x2C\x0d\n  validatePosition\x2C\x0d\n  validateRmOptions\x2C\x0d\n  validateRmOptionsSync\x2C\x0d\n  validateRmdirOptions\x2C\x0d\n  validateStringAfterArrayBufferView\x2C\x0d\n  warnOnNonPortableTemplate\x0d\n} = require('internal/fs/utils');\x0d\nconst {\x0d\n  Dir\x2C\x0d\n  opendir\x2C\x0d\n  opendirSync\x0d\n} = require('internal/fs/dir');\x0d\nconst {\x0d\n  CHAR_FORWARD_SLASH\x2C\x0d\n  CHAR_BACKWARD_SLASH\x2C\x0d\n} = require('internal/constants');\x0d\nconst {\x0d\n  isUint32\x2C\x0d\n  parseFileMode\x2C\x0d\n  validateBoolean\x2C\x0d\n  validateBuffer\x2C\x0d\n  validateCallback\x2C\x0d\n  validateEncoding\x2C\x0d\n  validateFunction\x2C\x0d\n  validateInteger\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst watchers = require('internal/fs/watchers');\x0d\nconst ReadFileContext = require('internal/fs/read_file_context');\x0d\n\x0d\nlet truncateWarn = true;\x0d\nlet fs;\x0d\n\x0d\n// Lazy loaded\x0d\nlet cpFn;\x0d\nlet cpSyncFn;\x0d\nlet promises = null;\x0d\nlet ReadStream;\x0d\nlet WriteStream;\x0d\nlet rimraf;\x0d\nlet rimrafSync;\x0d\n\x0d\n// These have to be separate because of how graceful-fs happens to do it's\x0d\n// monkeypatching.\x0d\nlet FileReadStream;\x0d\nlet FileWriteStream;\x0d\n\x0d\nconst isWindows = process.platform === 'win32';\x0d\nconst isOSX = process.platform === 'darwin';\x0d\n\x0d\n\x0d\nfunction showTruncateDeprecation() {\x0d\n  if (truncateWarn) {\x0d\n    process.emitWarning(\x0d\n      'Using fs.truncate with a file descriptor is deprecated. Please use ' +\x0d\n      'fs.ftruncate with a file descriptor instead.'\x2C\x0d\n      'DeprecationWarning'\x2C 'DEP0081');\x0d\n    truncateWarn = false;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction maybeCallback(cb) {\x0d\n  validateCallback(cb);\x0d\n\x0d\n  return cb;\x0d\n}\x0d\n\x0d\n// Ensure that callbacks run in the global context. Only use this function\x0d\n// for callbacks that are passed to the binding layer\x2C callbacks that are\x0d\n// invoked from JS already run in the proper scope.\x0d\nfunction makeCallback(cb) {\x0d\n  validateCallback(cb);\x0d\n\x0d\n  return (...args) => ReflectApply(cb\x2C this\x2C args);\x0d\n}\x0d\n\x0d\n// Special case of `makeCallback()` that is specific to async `*stat()` calls as\x0d\n// an optimization\x2C since the data passed back to the callback needs to be\x0d\n// transformed anyway.\x0d\nfunction makeStatsCallback(cb) {\x0d\n  validateCallback(cb);\x0d\n\x0d\n  return (err\x2C stats) => {\x0d\n    if (err) return cb(err);\x0d\n    cb(err\x2C getStatsFromBinding(stats));\x0d\n  };\x0d\n}\x0d\n\x0d\nconst isFd = isUint32;\x0d\n\x0d\nfunction isFileType(stats\x2C fileType) {\x0d\n  // Use stats array directly to avoid creating an fs.Stats instance just for\x0d\n  // our internal use.\x0d\n  let mode = stats[1];\x0d\n  if (typeof mode === 'bigint')\x0d\n    mode = Number(mode);\x0d\n  return (mode & S_IFMT) === fileType;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Tests a user's permissions for the file or directory\x0d\n * specified by `path`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} [mode]\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction access(path\x2C mode\x2C callback) {\x0d\n  if (typeof mode === 'function') {\x0d\n    callback = mode;\x0d\n    mode = F_OK;\x0d\n  }\x0d\n\x0d\n  path = getValidatedPath(path);\x0d\n  mode = getValidMode(mode\x2C 'access');\x0d\n  callback = makeCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.access(pathModule.toNamespacedPath(path)\x2C mode\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously tests a user's permissions for the file or\x0d\n * directory specified by `path`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} [mode]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction accessSync(path\x2C mode) {\x0d\n  path = getValidatedPath(path);\x0d\n  mode = getValidMode(mode\x2C 'access');\x0d\n\x0d\n  const ctx = { path };\x0d\n  binding.access(pathModule.toNamespacedPath(path)\x2C mode\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Tests whether or not the given path exists.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {(exists?: boolean) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction exists(path\x2C callback) {\x0d\n  maybeCallback(callback);\x0d\n\x0d\n  function suppressedCallback(err) {\x0d\n    callback(err ? false : true);\x0d\n  }\x0d\n\x0d\n  try {\x0d\n    fs.access(path\x2C F_OK\x2C suppressedCallback);\x0d\n  } catch {\x0d\n    return callback(false);\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectDefineProperty(exists\x2C internalUtil.promisify.custom\x2C {\x0d\n  value: (path) => {\x0d\n    return new Promise((resolve) => fs.exists(path\x2C resolve));\x0d\n  }\x0d\n});\x0d\n\x0d\n// fs.existsSync never throws\x2C it only returns true or false.\x0d\n// Since fs.existsSync never throws\x2C users have established\x0d\n// the expectation that passing invalid arguments to it\x2C even like\x0d\n// fs.existsSync()\x2C would only get a false in return\x2C so we cannot signal\x0d\n// validation errors to users properly out of compatibility concerns.\x0d\n// TODO(joyeecheung): deprecate the never-throw-on-invalid-arguments behavior\x0d\n/**\x0d\n * Synchronously tests whether or not the given path exists.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @returns {boolean}\x0d\n */\x0d\nfunction existsSync(path) {\x0d\n  try {\x0d\n    path = getValidatedPath(path);\x0d\n  } catch {\x0d\n    return false;\x0d\n  }\x0d\n  const ctx = { path };\x0d\n  const nPath = pathModule.toNamespacedPath(path);\x0d\n  binding.access(nPath\x2C F_OK\x2C undefined\x2C ctx);\x0d\n\x0d\n  // In case of an invalid symlink\x2C `binding.access()` on win32\x0d\n  // will **not** return an error and is therefore not enough.\x0d\n  // Double check with `binding.stat()`.\x0d\n  if (isWindows && ctx.errno === undefined) {\x0d\n    binding.stat(nPath\x2C false\x2C undefined\x2C ctx);\x0d\n  }\x0d\n\x0d\n  return ctx.errno === undefined;\x0d\n}\x0d\n\x0d\nfunction readFileAfterOpen(err\x2C fd) {\x0d\n  const context = this.context;\x0d\n\x0d\n  if (err) {\x0d\n    context.callback(err);\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  context.fd = fd;\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = readFileAfterStat;\x0d\n  req.context = context;\x0d\n  binding.fstat(fd\x2C false\x2C req);\x0d\n}\x0d\n\x0d\nfunction readFileAfterStat(err\x2C stats) {\x0d\n  const context = this.context;\x0d\n\x0d\n  if (err)\x0d\n    return context.close(err);\x0d\n\x0d\n  const size = context.size = isFileType(stats\x2C S_IFREG) ? stats[8] : 0;\x0d\n\x0d\n  if (size > kIoMaxLength) {\x0d\n    err = new ERR_FS_FILE_TOO_LARGE(size);\x0d\n    return context.close(err);\x0d\n  }\x0d\n\x0d\n  try {\x0d\n    if (size === 0) {\x0d\n      context.buffers = [];\x0d\n    } else {\x0d\n      context.buffer = Buffer.allocUnsafeSlow(size);\x0d\n    }\x0d\n  } catch (err) {\x0d\n    return context.close(err);\x0d\n  }\x0d\n  context.read();\x0d\n}\x0d\n\x0d\nfunction checkAborted(signal\x2C callback) {\x0d\n  if (signal?.aborted) {\x0d\n    callback(new AbortError());\x0d\n    return true;\x0d\n  }\x0d\n  return false;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously reads the entire contents of a file.\x0d\n * @param {string | Buffer | URL | number} path\x0d\n * @param {{\x0d\n *   encoding?: string | null;\x0d\n *   flag?: string;\x0d\n *   signal?: AbortSignal;\x0d\n *   } | string} [options]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   data?: string | Buffer\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction readFile(path\x2C options\x2C callback) {\x0d\n  callback = maybeCallback(callback || options);\x0d\n  options = getOptions(options\x2C { flag: 'r' });\x0d\n  const context = new ReadFileContext(callback\x2C options.encoding);\x0d\n  context.isUserFd = isFd(path); // File descriptor ownership\x0d\n\x0d\n  if (options.signal) {\x0d\n    context.signal = options.signal;\x0d\n  }\x0d\n  if (context.isUserFd) {\x0d\n    process.nextTick(function tick(context) {\x0d\n      ReflectApply(readFileAfterOpen\x2C { context }\x2C [null\x2C path]);\x0d\n    }\x2C context);\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  if (checkAborted(options.signal\x2C callback))\x0d\n    return;\x0d\n\x0d\n  const flagsNumber = stringToFlags(options.flag\x2C 'options.flag');\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.context = context;\x0d\n  req.oncomplete = readFileAfterOpen;\x0d\n  binding.open(pathModule.toNamespacedPath(path)\x2C\x0d\n               flagsNumber\x2C\x0d\n               0o666\x2C\x0d\n               req);\x0d\n}\x0d\n\x0d\nfunction tryStatSync(fd\x2C isUserFd) {\x0d\n  const ctx = {};\x0d\n  const stats = binding.fstat(fd\x2C false\x2C undefined\x2C ctx);\x0d\n  if (ctx.errno !== undefined && !isUserFd) {\x0d\n    fs.closeSync(fd);\x0d\n    throw uvException(ctx);\x0d\n  }\x0d\n  return stats;\x0d\n}\x0d\n\x0d\nfunction tryCreateBuffer(size\x2C fd\x2C isUserFd) {\x0d\n  let threw = true;\x0d\n  let buffer;\x0d\n  try {\x0d\n    if (size > kIoMaxLength) {\x0d\n      throw new ERR_FS_FILE_TOO_LARGE(size);\x0d\n    }\x0d\n    buffer = Buffer.allocUnsafe(size);\x0d\n    threw = false;\x0d\n  } finally {\x0d\n    if (threw && !isUserFd) fs.closeSync(fd);\x0d\n  }\x0d\n  return buffer;\x0d\n}\x0d\n\x0d\nfunction tryReadSync(fd\x2C isUserFd\x2C buffer\x2C pos\x2C len) {\x0d\n  let threw = true;\x0d\n  let bytesRead;\x0d\n  try {\x0d\n    bytesRead = fs.readSync(fd\x2C buffer\x2C pos\x2C len);\x0d\n    threw = false;\x0d\n  } finally {\x0d\n    if (threw && !isUserFd) fs.closeSync(fd);\x0d\n  }\x0d\n  return bytesRead;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously reads the entire contents of a file.\x0d\n * @param {string | Buffer | URL | number} path\x0d\n * @param {{\x0d\n *   encoding?: string | null;\x0d\n *   flag?: string;\x0d\n *   }} [options]\x0d\n * @returns {string | Buffer}\x0d\n */\x0d\nfunction readFileSync(path\x2C options) {\x0d\n  options = getOptions(options\x2C { flag: 'r' });\x0d\n  const isUserFd = isFd(path); // File descriptor ownership\x0d\n  const fd = isUserFd ? path : fs.openSync(path\x2C options.flag\x2C 0o666);\x0d\n\x0d\n  const stats = tryStatSync(fd\x2C isUserFd);\x0d\n  const size = isFileType(stats\x2C S_IFREG) ? stats[8] : 0;\x0d\n  let pos = 0;\x0d\n  let buffer; // Single buffer with file data\x0d\n  let buffers; // List for when size is unknown\x0d\n\x0d\n  if (size === 0) {\x0d\n    buffers = [];\x0d\n  } else {\x0d\n    buffer = tryCreateBuffer(size\x2C fd\x2C isUserFd);\x0d\n  }\x0d\n\x0d\n  let bytesRead;\x0d\n\x0d\n  if (size !== 0) {\x0d\n    do {\x0d\n      bytesRead = tryReadSync(fd\x2C isUserFd\x2C buffer\x2C pos\x2C size - pos);\x0d\n      pos += bytesRead;\x0d\n    } while (bytesRead !== 0 && pos < size);\x0d\n  } else {\x0d\n    do {\x0d\n      // The kernel lies about many files.\x0d\n      // Go ahead and try to read some bytes.\x0d\n      buffer = Buffer.allocUnsafe(8192);\x0d\n      bytesRead = tryReadSync(fd\x2C isUserFd\x2C buffer\x2C 0\x2C 8192);\x0d\n      if (bytesRead !== 0) {\x0d\n        ArrayPrototypePush(buffers\x2C buffer.slice(0\x2C bytesRead));\x0d\n      }\x0d\n      pos += bytesRead;\x0d\n    } while (bytesRead !== 0);\x0d\n  }\x0d\n\x0d\n  if (!isUserFd)\x0d\n    fs.closeSync(fd);\x0d\n\x0d\n  if (size === 0) {\x0d\n    // Data was collected into the buffers list.\x0d\n    buffer = Buffer.concat(buffers\x2C pos);\x0d\n  } else if (pos < size) {\x0d\n    buffer = buffer.slice(0\x2C pos);\x0d\n  }\x0d\n\x0d\n  if (options.encoding) buffer = buffer.toString(options.encoding);\x0d\n  return buffer;\x0d\n}\x0d\n\x0d\nfunction defaultCloseCallback(err) {\x0d\n  if (err != null) throw err;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Closes the file descriptor.\x0d\n * @param {number} fd\x0d\n * @param {(err?: Error) => any} [callback]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction close(fd\x2C callback = defaultCloseCallback) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  if (callback !== defaultCloseCallback)\x0d\n    callback = makeCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.close(fd\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously closes the file descriptor.\x0d\n * @param {number} fd\x0d\n * @returns {void}\x0d\n */\x0d\nfunction closeSync(fd) {\x0d\n  fd = getValidatedFd(fd);\x0d\n\x0d\n  const ctx = {};\x0d\n  binding.close(fd\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously opens a file.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | number} [flags]\x0d\n * @param {string | number} [mode]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   fd?: number\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction open(path\x2C flags\x2C mode\x2C callback) {\x0d\n  path = getValidatedPath(path);\x0d\n  if (arguments.length < 3) {\x0d\n    callback = flags;\x0d\n    flags = 'r';\x0d\n    mode = 0o666;\x0d\n  } else if (typeof mode === 'function') {\x0d\n    callback = mode;\x0d\n    mode = 0o666;\x0d\n  } else {\x0d\n    mode = parseFileMode(mode\x2C 'mode'\x2C 0o666);\x0d\n  }\x0d\n  const flagsNumber = stringToFlags(flags);\x0d\n  callback = makeCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n\x0d\n  binding.open(pathModule.toNamespacedPath(path)\x2C\x0d\n               flagsNumber\x2C\x0d\n               mode\x2C\x0d\n               req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously opens a file.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | number} [flags]\x0d\n * @param {string | number} [mode]\x0d\n * @returns {number}\x0d\n */\x0d\nfunction openSync(path\x2C flags\x2C mode) {\x0d\n  path = getValidatedPath(path);\x0d\n  const flagsNumber = stringToFlags(flags);\x0d\n  mode = parseFileMode(mode\x2C 'mode'\x2C 0o666);\x0d\n\x0d\n  const ctx = { path };\x0d\n  const result = binding.open(pathModule.toNamespacedPath(path)\x2C\x0d\n                              flagsNumber\x2C mode\x2C\x0d\n                              undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Reads file from the specified `fd` (file descriptor).\x0d\n * @param {number} fd\x0d\n * @param {Buffer | TypedArray | DataView} buffer\x0d\n * @param {number} offset\x0d\n * @param {number} length\x0d\n * @param {number | bigint} position\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   bytesRead?: number\x2C\x0d\n *   buffer?: Buffer\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction read(fd\x2C buffer\x2C offset\x2C length\x2C position\x2C callback) {\x0d\n  fd = getValidatedFd(fd);\x0d\n\x0d\n  if (arguments.length <= 3) {\x0d\n    // Assume fs.read(fd\x2C options\x2C callback)\x0d\n    let options = {};\x0d\n    if (arguments.length < 3) {\x0d\n      // This is fs.read(fd\x2C callback)\x0d\n      // buffer will be the callback\x0d\n      callback = buffer;\x0d\n    } else {\x0d\n      // This is fs.read(fd\x2C {}\x2C callback)\x0d\n      // buffer will be the options object\x0d\n      // offset is the callback\x0d\n      options = buffer;\x0d\n      callback = offset;\x0d\n    }\x0d\n\x0d\n    ({\x0d\n      buffer = Buffer.alloc(16384)\x2C\x0d\n      offset = 0\x2C\x0d\n      length = buffer.byteLength\x2C\x0d\n      position\x0d\n    } = options);\x0d\n  }\x0d\n\x0d\n  validateBuffer(buffer);\x0d\n  callback = maybeCallback(callback);\x0d\n\x0d\n  if (offset == null) {\x0d\n    offset = 0;\x0d\n  } else {\x0d\n    validateInteger(offset\x2C 'offset'\x2C 0);\x0d\n  }\x0d\n\x0d\n  length |= 0;\x0d\n\x0d\n  if (length === 0) {\x0d\n    return process.nextTick(function tick() {\x0d\n      callback(null\x2C 0\x2C buffer);\x0d\n    });\x0d\n  }\x0d\n\x0d\n  if (buffer.byteLength === 0) {\x0d\n    throw new ERR_INVALID_ARG_VALUE('buffer'\x2C buffer\x2C\x0d\n                                    'is empty and cannot be written');\x0d\n  }\x0d\n\x0d\n  validateOffsetLengthRead(offset\x2C length\x2C buffer.byteLength);\x0d\n\x0d\n  if (position == null)\x0d\n    position = -1;\x0d\n\x0d\n  validatePosition(position\x2C 'position');\x0d\n\x0d\n  function wrapper(err\x2C bytesRead) {\x0d\n    // Retain a reference to buffer so that it can't be GC'ed too soon.\x0d\n    callback(err\x2C bytesRead || 0\x2C buffer);\x0d\n  }\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = wrapper;\x0d\n\x0d\n  binding.read(fd\x2C buffer\x2C offset\x2C length\x2C position\x2C req);\x0d\n}\x0d\n\x0d\nObjectDefineProperty(read\x2C internalUtil.customPromisifyArgs\x2C\x0d\n                     { value: ['bytesRead'\x2C 'buffer']\x2C enumerable: false });\x0d\n\x0d\n/**\x0d\n * Synchronously reads the file from the\x0d\n * specified `fd` (file descriptor).\x0d\n * @param {number} fd\x0d\n * @param {Buffer | TypedArray | DataView} buffer\x0d\n * @param {{\x0d\n *   offset?: number;\x0d\n *   length?: number;\x0d\n *   position?: number | bigint;\x0d\n *   }} [offset]\x0d\n * @returns {number}\x0d\n */\x0d\nfunction readSync(fd\x2C buffer\x2C offset\x2C length\x2C position) {\x0d\n  fd = getValidatedFd(fd);\x0d\n\x0d\n  validateBuffer(buffer);\x0d\n\x0d\n  if (arguments.length <= 3) {\x0d\n    // Assume fs.read(fd\x2C buffer\x2C options)\x0d\n    const options = offset || {};\x0d\n\x0d\n    ({ offset = 0\x2C length = buffer.byteLength\x2C position } = options);\x0d\n  }\x0d\n\x0d\n  if (offset == null) {\x0d\n    offset = 0;\x0d\n  } else {\x0d\n    validateInteger(offset\x2C 'offset'\x2C 0);\x0d\n  }\x0d\n\x0d\n  length |= 0;\x0d\n\x0d\n  if (length === 0) {\x0d\n    return 0;\x0d\n  }\x0d\n\x0d\n  if (buffer.byteLength === 0) {\x0d\n    throw new ERR_INVALID_ARG_VALUE('buffer'\x2C buffer\x2C\x0d\n                                    'is empty and cannot be written');\x0d\n  }\x0d\n\x0d\n  validateOffsetLengthRead(offset\x2C length\x2C buffer.byteLength);\x0d\n\x0d\n  if (position == null)\x0d\n    position = -1;\x0d\n\x0d\n  validatePosition(position\x2C 'position');\x0d\n\x0d\n  const ctx = {};\x0d\n  const result = binding.read(fd\x2C buffer\x2C offset\x2C length\x2C position\x2C\x0d\n                              undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Reads file from the specified `fd` (file descriptor)\x0d\n * and writes to an array of `ArrayBufferView`s.\x0d\n * @param {number} fd\x0d\n * @param {ArrayBufferView[]} buffers\x0d\n * @param {number} [position]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   bytesRead?: number\x2C\x0d\n *   buffers?: ArrayBufferView[];\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction readv(fd\x2C buffers\x2C position\x2C callback) {\x0d\n  function wrapper(err\x2C read) {\x0d\n    callback(err\x2C read || 0\x2C buffers);\x0d\n  }\x0d\n\x0d\n  fd = getValidatedFd(fd);\x0d\n  validateBufferArray(buffers);\x0d\n  callback = maybeCallback(callback || position);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = wrapper;\x0d\n\x0d\n  if (typeof position !== 'number')\x0d\n    position = null;\x0d\n\x0d\n  return binding.readBuffers(fd\x2C buffers\x2C position\x2C req);\x0d\n}\x0d\n\x0d\nObjectDefineProperty(readv\x2C internalUtil.customPromisifyArgs\x2C\x0d\n                     { value: ['bytesRead'\x2C 'buffers']\x2C enumerable: false });\x0d\n\x0d\n/**\x0d\n * Synchronously reads file from the\x0d\n * specified `fd` (file descriptor) and writes to an array\x0d\n * of `ArrayBufferView`s.\x0d\n * @param {number} fd\x0d\n * @param {ArrayBufferView[]} buffers\x0d\n * @param {number} [position]\x0d\n * @returns {number}\x0d\n */\x0d\nfunction readvSync(fd\x2C buffers\x2C position) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  validateBufferArray(buffers);\x0d\n\x0d\n  const ctx = {};\x0d\n\x0d\n  if (typeof position !== 'number')\x0d\n    position = null;\x0d\n\x0d\n  const result = binding.readBuffers(fd\x2C buffers\x2C position\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Writes `buffer` to the specified `fd` (file descriptor).\x0d\n * @param {number} fd\x0d\n * @param {Buffer | TypedArray | DataView | string | object} buffer\x0d\n * @param {number} [offset]\x0d\n * @param {number} [length]\x0d\n * @param {number} [position]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   bytesWritten?: number;\x0d\n *   buffer?: Buffer | TypedArray | DataView\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction write(fd\x2C buffer\x2C offset\x2C length\x2C position\x2C callback) {\x0d\n  function wrapper(err\x2C written) {\x0d\n    // Retain a reference to buffer so that it can't be GC'ed too soon.\x0d\n    callback(err\x2C written || 0\x2C buffer);\x0d\n  }\x0d\n\x0d\n  fd = getValidatedFd(fd);\x0d\n\x0d\n  if (isArrayBufferView(buffer)) {\x0d\n    callback = maybeCallback(callback || position || length || offset);\x0d\n    if (offset == null || typeof offset === 'function') {\x0d\n      offset = 0;\x0d\n    } else {\x0d\n      validateInteger(offset\x2C 'offset'\x2C 0);\x0d\n    }\x0d\n    if (typeof length !== 'number')\x0d\n      length = buffer.byteLength - offset;\x0d\n    if (typeof position !== 'number')\x0d\n      position = null;\x0d\n    validateOffsetLengthWrite(offset\x2C length\x2C buffer.byteLength);\x0d\n\x0d\n    const req = new FSReqCallback();\x0d\n    req.oncomplete = wrapper;\x0d\n    return binding.writeBuffer(fd\x2C buffer\x2C offset\x2C length\x2C position\x2C req);\x0d\n  }\x0d\n\x0d\n  validateStringAfterArrayBufferView(buffer\x2C 'buffer');\x0d\n\x0d\n  if (typeof position !== 'function') {\x0d\n    if (typeof offset === 'function') {\x0d\n      position = offset;\x0d\n      offset = null;\x0d\n    } else {\x0d\n      position = length;\x0d\n    }\x0d\n    length = 'utf8';\x0d\n  }\x0d\n\x0d\n  const str = String(buffer);\x0d\n  validateEncoding(str\x2C length);\x0d\n  callback = maybeCallback(position);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = wrapper;\x0d\n  return binding.writeString(fd\x2C str\x2C offset\x2C length\x2C req);\x0d\n}\x0d\n\x0d\nObjectDefineProperty(write\x2C internalUtil.customPromisifyArgs\x2C\x0d\n                     { value: ['bytesWritten'\x2C 'buffer']\x2C enumerable: false });\x0d\n\x0d\n/**\x0d\n * Synchronously writes `buffer` to the\x0d\n * specified `fd` (file descriptor).\x0d\n * @param {number} fd\x0d\n * @param {Buffer | TypedArray | DataView | string | object} buffer\x0d\n * @param {number} [offset]\x0d\n * @param {number} [length]\x0d\n * @param {number} [position]\x0d\n * @returns {number}\x0d\n */\x0d\nfunction writeSync(fd\x2C buffer\x2C offset\x2C length\x2C position) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  const ctx = {};\x0d\n  let result;\x0d\n  if (isArrayBufferView(buffer)) {\x0d\n    if (position === undefined)\x0d\n      position = null;\x0d\n    if (offset == null) {\x0d\n      offset = 0;\x0d\n    } else {\x0d\n      validateInteger(offset\x2C 'offset'\x2C 0);\x0d\n    }\x0d\n    if (typeof length !== 'number')\x0d\n      length = buffer.byteLength - offset;\x0d\n    validateOffsetLengthWrite(offset\x2C length\x2C buffer.byteLength);\x0d\n    result = binding.writeBuffer(fd\x2C buffer\x2C offset\x2C length\x2C position\x2C\x0d\n                                 undefined\x2C ctx);\x0d\n  } else {\x0d\n    validateStringAfterArrayBufferView(buffer\x2C 'buffer');\x0d\n    validateEncoding(buffer\x2C length);\x0d\n\x0d\n    if (offset === undefined)\x0d\n      offset = null;\x0d\n    result = binding.writeString(fd\x2C buffer\x2C offset\x2C length\x2C\x0d\n                                 undefined\x2C ctx);\x0d\n  }\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Writes an array of `ArrayBufferView`s to the\x0d\n * specified `fd` (file descriptor).\x0d\n * @param {number} fd\x0d\n * @param {ArrayBufferView[]} buffers\x0d\n * @param {number} [position]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   bytesWritten?: number\x2C\x0d\n *   buffers?: ArrayBufferView[]\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction writev(fd\x2C buffers\x2C position\x2C callback) {\x0d\n  function wrapper(err\x2C written) {\x0d\n    callback(err\x2C written || 0\x2C buffers);\x0d\n  }\x0d\n\x0d\n  fd = getValidatedFd(fd);\x0d\n  validateBufferArray(buffers);\x0d\n  callback = maybeCallback(callback || position);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = wrapper;\x0d\n\x0d\n  if (typeof position !== 'number')\x0d\n    position = null;\x0d\n\x0d\n  return binding.writeBuffers(fd\x2C buffers\x2C position\x2C req);\x0d\n}\x0d\n\x0d\nObjectDefineProperty(writev\x2C internalUtil.customPromisifyArgs\x2C {\x0d\n  value: ['bytesWritten'\x2C 'buffer']\x2C\x0d\n  enumerable: false\x0d\n});\x0d\n\x0d\n/**\x0d\n * Synchronously writes an array of `ArrayBufferView`s\x0d\n * to the specified `fd` (file descriptor).\x0d\n * @param {number} fd\x0d\n * @param {ArrayBufferView[]} buffers\x0d\n * @param {number} [position]\x0d\n * @returns {number}\x0d\n */\x0d\nfunction writevSync(fd\x2C buffers\x2C position) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  validateBufferArray(buffers);\x0d\n\x0d\n  const ctx = {};\x0d\n\x0d\n  if (typeof position !== 'number')\x0d\n    position = null;\x0d\n\x0d\n  const result = binding.writeBuffers(fd\x2C buffers\x2C position\x2C undefined\x2C ctx);\x0d\n\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously renames file at `oldPath` to\x0d\n * the pathname provided as `newPath`.\x0d\n * @param {string | Buffer | URL} oldPath\x0d\n * @param {string | Buffer | URL} newPath\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction rename(oldPath\x2C newPath\x2C callback) {\x0d\n  callback = makeCallback(callback);\x0d\n  oldPath = getValidatedPath(oldPath\x2C 'oldPath');\x0d\n  newPath = getValidatedPath(newPath\x2C 'newPath');\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.rename(pathModule.toNamespacedPath(oldPath)\x2C\x0d\n                 pathModule.toNamespacedPath(newPath)\x2C\x0d\n                 req);\x0d\n}\x0d\n\x0d\n\x0d\n/**\x0d\n * Synchronously renames file at `oldPath` to\x0d\n * the pathname provided as `newPath`.\x0d\n * @param {string | Buffer | URL} oldPath\x0d\n * @param {string | Buffer | URL} newPath\x0d\n * @returns {void}\x0d\n */\x0d\nfunction renameSync(oldPath\x2C newPath) {\x0d\n  oldPath = getValidatedPath(oldPath\x2C 'oldPath');\x0d\n  newPath = getValidatedPath(newPath\x2C 'newPath');\x0d\n  const ctx = { path: oldPath\x2C dest: newPath };\x0d\n  binding.rename(pathModule.toNamespacedPath(oldPath)\x2C\x0d\n                 pathModule.toNamespacedPath(newPath)\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Truncates the file.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} [len]\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction truncate(path\x2C len\x2C callback) {\x0d\n  if (typeof path === 'number') {\x0d\n    showTruncateDeprecation();\x0d\n    return fs.ftruncate(path\x2C len\x2C callback);\x0d\n  }\x0d\n  if (typeof len === 'function') {\x0d\n    callback = len;\x0d\n    len = 0;\x0d\n  } else if (len === undefined) {\x0d\n    len = 0;\x0d\n  }\x0d\n\x0d\n  validateInteger(len\x2C 'len');\x0d\n  len = MathMax(0\x2C len);\x0d\n  callback = maybeCallback(callback);\x0d\n  fs.open(path\x2C 'r+'\x2C (er\x2C fd) => {\x0d\n    if (er) return callback(er);\x0d\n    const req = new FSReqCallback();\x0d\n    req.oncomplete = function oncomplete(er) {\x0d\n      fs.close(fd\x2C (er2) => {\x0d\n        callback(aggregateTwoErrors(er2\x2C er));\x0d\n      });\x0d\n    };\x0d\n    binding.ftruncate(fd\x2C len\x2C req);\x0d\n  });\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously truncates the file.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} [len]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction truncateSync(path\x2C len) {\x0d\n  if (typeof path === 'number') {\x0d\n    // legacy\x0d\n    showTruncateDeprecation();\x0d\n    return fs.ftruncateSync(path\x2C len);\x0d\n  }\x0d\n  if (len === undefined) {\x0d\n    len = 0;\x0d\n  }\x0d\n  // Allow error to be thrown\x2C but still close fd.\x0d\n  const fd = fs.openSync(path\x2C 'r+');\x0d\n  let ret;\x0d\n\x0d\n  try {\x0d\n    ret = fs.ftruncateSync(fd\x2C len);\x0d\n  } finally {\x0d\n    fs.closeSync(fd);\x0d\n  }\x0d\n  return ret;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Truncates the file descriptor.\x0d\n * @param {number} fd\x0d\n * @param {number} [len]\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction ftruncate(fd\x2C len = 0\x2C callback) {\x0d\n  if (typeof len === 'function') {\x0d\n    callback = len;\x0d\n    len = 0;\x0d\n  }\x0d\n  fd = getValidatedFd(fd);\x0d\n  validateInteger(len\x2C 'len');\x0d\n  len = MathMax(0\x2C len);\x0d\n  callback = makeCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.ftruncate(fd\x2C len\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously truncates the file descriptor.\x0d\n * @param {number} fd\x0d\n * @param {number} [len]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction ftruncateSync(fd\x2C len = 0) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  validateInteger(len\x2C 'len');\x0d\n  len = MathMax(0\x2C len);\x0d\n  const ctx = {};\x0d\n  binding.ftruncate(fd\x2C len\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\nfunction lazyLoadCp() {\x0d\n  if (cpFn === undefined) {\x0d\n    ({ cpFn } = require('internal/fs/cp/cp'));\x0d\n    cpFn = require('util').callbackify(cpFn);\x0d\n    ({ cpSyncFn } = require('internal/fs/cp/cp-sync'));\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction lazyLoadRimraf() {\x0d\n  if (rimraf === undefined)\x0d\n    ({ rimraf\x2C rimrafSync } = require('internal/fs/rimraf'));\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously removes a directory.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{\x0d\n *   maxRetries?: number;\x0d\n *   recursive?: boolean;\x0d\n *   retryDelay?: number;\x0d\n *   }} [options]\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction rmdir(path\x2C options\x2C callback) {\x0d\n  if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n    options = undefined;\x0d\n  }\x0d\n\x0d\n  callback = makeCallback(callback);\x0d\n  path = pathModule.toNamespacedPath(getValidatedPath(path));\x0d\n\x0d\n  if (options?.recursive) {\x0d\n    emitRecursiveRmdirWarning();\x0d\n    validateRmOptions(\x0d\n      path\x2C\x0d\n      { ...options\x2C force: false }\x2C\x0d\n      true\x2C\x0d\n      (err\x2C options) => {\x0d\n        if (err === false) {\x0d\n          const req = new FSReqCallback();\x0d\n          req.oncomplete = callback;\x0d\n          return binding.rmdir(path\x2C req);\x0d\n        }\x0d\n        if (err) {\x0d\n          return callback(err);\x0d\n        }\x0d\n\x0d\n        lazyLoadRimraf();\x0d\n        rimraf(path\x2C options\x2C callback);\x0d\n      });\x0d\n  } else {\x0d\n    validateRmdirOptions(options);\x0d\n    const req = new FSReqCallback();\x0d\n    req.oncomplete = callback;\x0d\n    return binding.rmdir(path\x2C req);\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously removes a directory.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{\x0d\n *   maxRetries?: number;\x0d\n *   recursive?: boolean;\x0d\n *   retryDelay?: number;\x0d\n *   }} [options]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction rmdirSync(path\x2C options) {\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  if (options?.recursive) {\x0d\n    emitRecursiveRmdirWarning();\x0d\n    options = validateRmOptionsSync(path\x2C { ...options\x2C force: false }\x2C true);\x0d\n    if (options !== false) {\x0d\n      lazyLoadRimraf();\x0d\n      return rimrafSync(pathModule.toNamespacedPath(path)\x2C options);\x0d\n    }\x0d\n  } else {\x0d\n    validateRmdirOptions(options);\x0d\n  }\x0d\n\x0d\n  const ctx = { path };\x0d\n  binding.rmdir(pathModule.toNamespacedPath(path)\x2C undefined\x2C ctx);\x0d\n  return handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously removes files and\x0d\n * directories (modeled on the standard POSIX `rm` utility).\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{\x0d\n *   force?: boolean;\x0d\n *   maxRetries?: number;\x0d\n *   recursive?: boolean;\x0d\n *   retryDelay?: number;\x0d\n *   }} [options]\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction rm(path\x2C options\x2C callback) {\x0d\n  if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n    options = undefined;\x0d\n  }\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  validateRmOptions(path\x2C options\x2C false\x2C (err\x2C options) => {\x0d\n    if (err) {\x0d\n      return callback(err);\x0d\n    }\x0d\n    lazyLoadRimraf();\x0d\n    return rimraf(pathModule.toNamespacedPath(path)\x2C options\x2C callback);\x0d\n  });\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously removes files and\x0d\n * directories (modeled on the standard POSIX `rm` utility).\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{\x0d\n *   force?: boolean;\x0d\n *   maxRetries?: number;\x0d\n *   recursive?: boolean;\x0d\n *   retryDelay?: number;\x0d\n *   }} [options]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction rmSync(path\x2C options) {\x0d\n  path = getValidatedPath(path);\x0d\n  options = validateRmOptionsSync(path\x2C options\x2C false);\x0d\n\x0d\n  lazyLoadRimraf();\x0d\n  return rimrafSync(pathModule.toNamespacedPath(path)\x2C options);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Forces all currently queued I/O operations associated\x0d\n * with the file to the operating system's synchronized\x0d\n * I/O completion state.\x0d\n * @param {number} fd\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction fdatasync(fd\x2C callback) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = makeCallback(callback);\x0d\n  binding.fdatasync(fd\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously forces all currently queued I/O operations\x0d\n * associated with the file to the operating\x0d\n * system's synchronized I/O completion state.\x0d\n * @param {number} fd\x0d\n * @returns {void}\x0d\n */\x0d\nfunction fdatasyncSync(fd) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  const ctx = {};\x0d\n  binding.fdatasync(fd\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Requests for all data for the open file descriptor\x0d\n * to be flushed to the storage device.\x0d\n * @param {number} fd\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction fsync(fd\x2C callback) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = makeCallback(callback);\x0d\n  binding.fsync(fd\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously requests for all data for the open\x0d\n * file descriptor to be flushed to the storage device.\x0d\n * @param {number} fd\x0d\n * @returns {void}\x0d\n */\x0d\nfunction fsyncSync(fd) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  const ctx = {};\x0d\n  binding.fsync(fd\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously creates a directory.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{\x0d\n *   recursive?: boolean;\x0d\n *   mode?: string | number;\x0d\n *   } | number} [options]\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction mkdir(path\x2C options\x2C callback) {\x0d\n  let mode = 0o777;\x0d\n  let recursive = false;\x0d\n  if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n  } else if (typeof options === 'number' || typeof options === 'string') {\x0d\n    mode = options;\x0d\n  } else if (options) {\x0d\n    if (options.recursive !== undefined)\x0d\n      recursive = options.recursive;\x0d\n    if (options.mode !== undefined)\x0d\n      mode = options.mode;\x0d\n  }\x0d\n  callback = makeCallback(callback);\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  validateBoolean(recursive\x2C 'options.recursive');\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.mkdir(pathModule.toNamespacedPath(path)\x2C\x0d\n                parseFileMode(mode\x2C 'mode')\x2C recursive\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously creates a directory.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{\x0d\n *   recursive?: boolean;\x0d\n *   mode?: string | number;\x0d\n *   } | number} [options]\x0d\n * @returns {string | void}\x0d\n */\x0d\nfunction mkdirSync(path\x2C options) {\x0d\n  let mode = 0o777;\x0d\n  let recursive = false;\x0d\n  if (typeof options === 'number' || typeof options === 'string') {\x0d\n    mode = options;\x0d\n  } else if (options) {\x0d\n    if (options.recursive !== undefined)\x0d\n      recursive = options.recursive;\x0d\n    if (options.mode !== undefined)\x0d\n      mode = options.mode;\x0d\n  }\x0d\n  path = getValidatedPath(path);\x0d\n  validateBoolean(recursive\x2C 'options.recursive');\x0d\n\x0d\n  const ctx = { path };\x0d\n  const result = binding.mkdir(pathModule.toNamespacedPath(path)\x2C\x0d\n                               parseFileMode(mode\x2C 'mode')\x2C recursive\x2C\x0d\n                               undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  if (recursive) {\x0d\n    return result;\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Reads the contents of a directory.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | {\x0d\n *   encoding?: string;\x0d\n *   withFileTypes?: boolean;\x0d\n *   }} [options]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   files?: string[] | Buffer[] | Direct[];\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction readdir(path\x2C options\x2C callback) {\x0d\n  callback = makeCallback(typeof options === 'function' ? options : callback);\x0d\n  options = getOptions(options\x2C {});\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  if (!options.withFileTypes) {\x0d\n    req.oncomplete = callback;\x0d\n  } else {\x0d\n    req.oncomplete = (err\x2C result) => {\x0d\n      if (err) {\x0d\n        callback(err);\x0d\n        return;\x0d\n      }\x0d\n      getDirents(path\x2C result\x2C callback);\x0d\n    };\x0d\n  }\x0d\n  binding.readdir(pathModule.toNamespacedPath(path)\x2C options.encoding\x2C\x0d\n                  !!options.withFileTypes\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously reads the contents of a directory.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | {\x0d\n *   encoding?: string;\x0d\n *   withFileTypes?: boolean;\x0d\n *   }} [options]\x0d\n * @returns {string | Buffer[] | Dirent[]}\x0d\n */\x0d\nfunction readdirSync(path\x2C options) {\x0d\n  options = getOptions(options\x2C {});\x0d\n  path = getValidatedPath(path);\x0d\n  const ctx = { path };\x0d\n  const result = binding.readdir(pathModule.toNamespacedPath(path)\x2C\x0d\n                                 options.encoding\x2C !!options.withFileTypes\x2C\x0d\n                                 undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return options.withFileTypes ? getDirents(path\x2C result) : result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Invokes the callback with the `fs.Stats`\x0d\n * for the file descriptor.\x0d\n * @param {number} fd\x0d\n * @param {{ bigint?: boolean; }} [options]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   stats?: Stats\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction fstat(fd\x2C options = { bigint: false }\x2C callback) {\x0d\n  if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n    options = {};\x0d\n  }\x0d\n  fd = getValidatedFd(fd);\x0d\n  callback = makeStatsCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback(options.bigint);\x0d\n  req.oncomplete = callback;\x0d\n  binding.fstat(fd\x2C options.bigint\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Retrieves the `fs.Stats` for the symbolic link\x0d\n * referred to by the `path`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{ bigint?: boolean; }} [options]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   stats?: Stats\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction lstat(path\x2C options = { bigint: false }\x2C callback) {\x0d\n  if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n    options = {};\x0d\n  }\x0d\n  callback = makeStatsCallback(callback);\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  const req = new FSReqCallback(options.bigint);\x0d\n  req.oncomplete = callback;\x0d\n  binding.lstat(pathModule.toNamespacedPath(path)\x2C options.bigint\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously gets the stats of a file.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{ bigint?: boolean; }} [options]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   stats?: Stats\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction stat(path\x2C options = { bigint: false }\x2C callback) {\x0d\n  if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n    options = {};\x0d\n  }\x0d\n  callback = makeStatsCallback(callback);\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  const req = new FSReqCallback(options.bigint);\x0d\n  req.oncomplete = callback;\x0d\n  binding.stat(pathModule.toNamespacedPath(path)\x2C options.bigint\x2C req);\x0d\n}\x0d\n\x0d\nfunction hasNoEntryError(ctx) {\x0d\n  if (ctx.errno) {\x0d\n    const uvErr = uvErrmapGet(ctx.errno);\x0d\n    return uvErr?.[0] === 'ENOENT';\x0d\n  }\x0d\n\x0d\n  if (ctx.error) {\x0d\n    return ctx.error.code === 'ENOENT';\x0d\n  }\x0d\n\x0d\n  return false;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously retrieves the `fs.Stats` for\x0d\n * the file descriptor.\x0d\n * @param {number} fd\x0d\n * @param {{\x0d\n *   bigint?: boolean;\x0d\n *   throwIfNoEntry?: boolean;\x0d\n *   }} [options]\x0d\n * @returns {Stats}\x0d\n */\x0d\nfunction fstatSync(fd\x2C options = { bigint: false\x2C throwIfNoEntry: true }) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  const ctx = { fd };\x0d\n  const stats = binding.fstat(fd\x2C options.bigint\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return getStatsFromBinding(stats);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously retrieves the `fs.Stats` for\x0d\n * the symbolic link referred to by the `path`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{\x0d\n *   bigint?: boolean;\x0d\n *   throwIfNoEntry?: boolean;\x0d\n *   }} [options]\x0d\n * @returns {Stats}\x0d\n */\x0d\nfunction lstatSync(path\x2C options = { bigint: false\x2C throwIfNoEntry: true }) {\x0d\n  path = getValidatedPath(path);\x0d\n  const ctx = { path };\x0d\n  const stats = binding.lstat(pathModule.toNamespacedPath(path)\x2C\x0d\n                              options.bigint\x2C undefined\x2C ctx);\x0d\n  if (options.throwIfNoEntry === false && hasNoEntryError(ctx)) {\x0d\n    return undefined;\x0d\n  }\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return getStatsFromBinding(stats);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously retrieves the `fs.Stats`\x0d\n * for the `path`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{\x0d\n *   bigint?: boolean;\x0d\n *   throwIfNoEntry?: boolean;\x0d\n *   }} [options]\x0d\n * @returns {Stats}\x0d\n */\x0d\nfunction statSync(path\x2C options = { bigint: false\x2C throwIfNoEntry: true }) {\x0d\n  path = getValidatedPath(path);\x0d\n  const ctx = { path };\x0d\n  const stats = binding.stat(pathModule.toNamespacedPath(path)\x2C\x0d\n                             options.bigint\x2C undefined\x2C ctx);\x0d\n  if (options.throwIfNoEntry === false && hasNoEntryError(ctx)) {\x0d\n    return undefined;\x0d\n  }\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return getStatsFromBinding(stats);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Reads the contents of a symbolic link\x0d\n * referred to by `path`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{ encoding?: string; } | string} [options]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   linkString?: string | Buffer\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction readlink(path\x2C options\x2C callback) {\x0d\n  callback = makeCallback(typeof options === 'function' ? options : callback);\x0d\n  options = getOptions(options\x2C {});\x0d\n  path = getValidatedPath(path\x2C 'oldPath');\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.readlink(pathModule.toNamespacedPath(path)\x2C options.encoding\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously reads the contents of a symbolic link\x0d\n * referred to by `path`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{ encoding?: string; } | string} [options]\x0d\n * @returns {string | Buffer}\x0d\n */\x0d\nfunction readlinkSync(path\x2C options) {\x0d\n  options = getOptions(options\x2C {});\x0d\n  path = getValidatedPath(path\x2C 'oldPath');\x0d\n  const ctx = { path };\x0d\n  const result = binding.readlink(pathModule.toNamespacedPath(path)\x2C\x0d\n                                  options.encoding\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Creates the link called `path` pointing to `target`.\x0d\n * @param {string | Buffer | URL} target\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string} [type_]\x0d\n * @param {(err?: Error) => any} callback_\x0d\n * @returns {void}\x0d\n */\x0d\nfunction symlink(target\x2C path\x2C type_\x2C callback_) {\x0d\n  const type = (typeof type_ === 'string' ? type_ : null);\x0d\n  const callback = makeCallback(arguments[arguments.length - 1]);\x0d\n\x0d\n  target = getValidatedPath(target\x2C 'target');\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  if (isWindows && type === null) {\x0d\n    let absoluteTarget;\x0d\n    try {\x0d\n      // Symlinks targets can be relative to the newly created path.\x0d\n      // Calculate absolute file name of the symlink target\x2C and check\x0d\n      // if it is a directory. Ignore resolve error to keep symlink\x0d\n      // errors consistent between platforms if invalid path is\x0d\n      // provided.\x0d\n      absoluteTarget = pathModule.resolve(path\x2C '..'\x2C target);\x0d\n    } catch {\x0d\n      // Continue regardless of error.\x0d\n    }\x0d\n    if (absoluteTarget !== undefined) {\x0d\n      stat(absoluteTarget\x2C (err\x2C stat) => {\x0d\n        const resolvedType = !err && stat.isDirectory() ? 'dir' : 'file';\x0d\n        const resolvedFlags = stringToSymlinkType(resolvedType);\x0d\n        const destination = preprocessSymlinkDestination(target\x2C\x0d\n                                                         resolvedType\x2C\x0d\n                                                         path);\x0d\n\x0d\n        const req = new FSReqCallback();\x0d\n        req.oncomplete = callback;\x0d\n        binding.symlink(destination\x2C\x0d\n                        pathModule.toNamespacedPath(path)\x2C resolvedFlags\x2C req);\x0d\n      });\x0d\n      return;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  const destination = preprocessSymlinkDestination(target\x2C type\x2C path);\x0d\n\x0d\n  const flags = stringToSymlinkType(type);\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.symlink(destination\x2C pathModule.toNamespacedPath(path)\x2C flags\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously creates the link called `path`\x0d\n * pointing to `target`.\x0d\n * @param {string | Buffer | URL} target\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string} [type]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction symlinkSync(target\x2C path\x2C type) {\x0d\n  type = (typeof type === 'string' ? type : null);\x0d\n  if (isWindows && type === null) {\x0d\n    const absoluteTarget = pathModule.resolve(`${path}`\x2C '..'\x2C `${target}`);\x0d\n    if (statSync(absoluteTarget\x2C { throwIfNoEntry: false })?.isDirectory()) {\x0d\n      type = 'dir';\x0d\n    }\x0d\n  }\x0d\n  target = getValidatedPath(target\x2C 'target');\x0d\n  path = getValidatedPath(path);\x0d\n  const flags = stringToSymlinkType(type);\x0d\n\x0d\n  const ctx = { path: target\x2C dest: path };\x0d\n  binding.symlink(preprocessSymlinkDestination(target\x2C type\x2C path)\x2C\x0d\n                  pathModule.toNamespacedPath(path)\x2C flags\x2C undefined\x2C ctx);\x0d\n\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Creates a new link from the `existingPath`\x0d\n * to the `newPath`.\x0d\n * @param {string | Buffer | URL} existingPath\x0d\n * @param {string | Buffer | URL} newPath\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction link(existingPath\x2C newPath\x2C callback) {\x0d\n  callback = makeCallback(callback);\x0d\n\x0d\n  existingPath = getValidatedPath(existingPath\x2C 'existingPath');\x0d\n  newPath = getValidatedPath(newPath\x2C 'newPath');\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n\x0d\n  binding.link(pathModule.toNamespacedPath(existingPath)\x2C\x0d\n               pathModule.toNamespacedPath(newPath)\x2C\x0d\n               req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously creates a new link from the `existingPath`\x0d\n * to the `newPath`.\x0d\n * @param {string | Buffer | URL} existingPath\x0d\n * @param {string | Buffer | URL} newPath\x0d\n * @returns {void}\x0d\n */\x0d\nfunction linkSync(existingPath\x2C newPath) {\x0d\n  existingPath = getValidatedPath(existingPath\x2C 'existingPath');\x0d\n  newPath = getValidatedPath(newPath\x2C 'newPath');\x0d\n\x0d\n  const ctx = { path: existingPath\x2C dest: newPath };\x0d\n  const result = binding.link(pathModule.toNamespacedPath(existingPath)\x2C\x0d\n                              pathModule.toNamespacedPath(newPath)\x2C\x0d\n                              undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously removes a file or symbolic link.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction unlink(path\x2C callback) {\x0d\n  callback = makeCallback(callback);\x0d\n  path = getValidatedPath(path);\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.unlink(pathModule.toNamespacedPath(path)\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously removes a file or symbolic link.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @returns {void}\x0d\n */\x0d\nfunction unlinkSync(path) {\x0d\n  path = getValidatedPath(path);\x0d\n  const ctx = { path };\x0d\n  binding.unlink(pathModule.toNamespacedPath(path)\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Sets the permissions on the file.\x0d\n * @param {number} fd\x0d\n * @param {string | number} mode\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction fchmod(fd\x2C mode\x2C callback) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  mode = parseFileMode(mode\x2C 'mode');\x0d\n  callback = makeCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.fchmod(fd\x2C mode\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously sets the permissions on the file.\x0d\n * @param {number} fd\x0d\n * @param {string | number} mode\x0d\n * @returns {void}\x0d\n */\x0d\nfunction fchmodSync(fd\x2C mode) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  mode = parseFileMode(mode\x2C 'mode');\x0d\n  const ctx = {};\x0d\n  binding.fchmod(fd\x2C mode\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Changes the permissions on a symbolic link.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} mode\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction lchmod(path\x2C mode\x2C callback) {\x0d\n  callback = maybeCallback(callback);\x0d\n  mode = parseFileMode(mode\x2C 'mode');\x0d\n  fs.open(path\x2C O_WRONLY | O_SYMLINK\x2C (err\x2C fd) => {\x0d\n    if (err) {\x0d\n      callback(err);\x0d\n      return;\x0d\n    }\x0d\n    // Prefer to return the chmod error\x2C if one occurs\x2C\x0d\n    // but still try to close\x2C and report closing errors if they occur.\x0d\n    fs.fchmod(fd\x2C mode\x2C (err) => {\x0d\n      fs.close(fd\x2C (err2) => {\x0d\n        callback(aggregateTwoErrors(err2\x2C err));\x0d\n      });\x0d\n    });\x0d\n  });\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously changes the permissions on a symbolic link.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} mode\x0d\n * @returns {void}\x0d\n */\x0d\nfunction lchmodSync(path\x2C mode) {\x0d\n  const fd = fs.openSync(path\x2C O_WRONLY | O_SYMLINK);\x0d\n\x0d\n  // Prefer to return the chmod error\x2C if one occurs\x2C\x0d\n  // but still try to close\x2C and report closing errors if they occur.\x0d\n  let ret;\x0d\n  try {\x0d\n    ret = fs.fchmodSync(fd\x2C mode);\x0d\n  } finally {\x0d\n    fs.closeSync(fd);\x0d\n  }\x0d\n  return ret;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously changes the permissions of a file.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | number} mode\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction chmod(path\x2C mode\x2C callback) {\x0d\n  path = getValidatedPath(path);\x0d\n  mode = parseFileMode(mode\x2C 'mode');\x0d\n  callback = makeCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.chmod(pathModule.toNamespacedPath(path)\x2C mode\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously changes the permissions of a file.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | number} mode\x0d\n * @returns {void}\x0d\n */\x0d\nfunction chmodSync(path\x2C mode) {\x0d\n  path = getValidatedPath(path);\x0d\n  mode = parseFileMode(mode\x2C 'mode');\x0d\n\x0d\n  const ctx = { path };\x0d\n  binding.chmod(pathModule.toNamespacedPath(path)\x2C mode\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Sets the owner of the symbolic link.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} uid\x0d\n * @param {number} gid\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction lchown(path\x2C uid\x2C gid\x2C callback) {\x0d\n  callback = makeCallback(callback);\x0d\n  path = getValidatedPath(path);\x0d\n  validateInteger(uid\x2C 'uid'\x2C -1\x2C kMaxUserId);\x0d\n  validateInteger(gid\x2C 'gid'\x2C -1\x2C kMaxUserId);\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.lchown(pathModule.toNamespacedPath(path)\x2C uid\x2C gid\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously sets the owner of the symbolic link.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} uid\x0d\n * @param {number} gid\x0d\n * @returns {void}\x0d\n */\x0d\nfunction lchownSync(path\x2C uid\x2C gid) {\x0d\n  path = getValidatedPath(path);\x0d\n  validateInteger(uid\x2C 'uid'\x2C -1\x2C kMaxUserId);\x0d\n  validateInteger(gid\x2C 'gid'\x2C -1\x2C kMaxUserId);\x0d\n  const ctx = { path };\x0d\n  binding.lchown(pathModule.toNamespacedPath(path)\x2C uid\x2C gid\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Sets the owner of the file.\x0d\n * @param {number} fd\x0d\n * @param {number} uid\x0d\n * @param {number} gid\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction fchown(fd\x2C uid\x2C gid\x2C callback) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  validateInteger(uid\x2C 'uid'\x2C -1\x2C kMaxUserId);\x0d\n  validateInteger(gid\x2C 'gid'\x2C -1\x2C kMaxUserId);\x0d\n  callback = makeCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.fchown(fd\x2C uid\x2C gid\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously sets the owner of the file.\x0d\n * @param {number} fd\x0d\n * @param {number} uid\x0d\n * @param {number} gid\x0d\n * @returns {void}\x0d\n */\x0d\nfunction fchownSync(fd\x2C uid\x2C gid) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  validateInteger(uid\x2C 'uid'\x2C -1\x2C kMaxUserId);\x0d\n  validateInteger(gid\x2C 'gid'\x2C -1\x2C kMaxUserId);\x0d\n\x0d\n  const ctx = {};\x0d\n  binding.fchown(fd\x2C uid\x2C gid\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously changes the owner and group\x0d\n * of a file.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} uid\x0d\n * @param {number} gid\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction chown(path\x2C uid\x2C gid\x2C callback) {\x0d\n  callback = makeCallback(callback);\x0d\n  path = getValidatedPath(path);\x0d\n  validateInteger(uid\x2C 'uid'\x2C -1\x2C kMaxUserId);\x0d\n  validateInteger(gid\x2C 'gid'\x2C -1\x2C kMaxUserId);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.chown(pathModule.toNamespacedPath(path)\x2C uid\x2C gid\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously changes the owner and group\x0d\n * of a file.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} uid\x0d\n * @param {number} gid\x0d\n * @returns {void}\x0d\n */\x0d\nfunction chownSync(path\x2C uid\x2C gid) {\x0d\n  path = getValidatedPath(path);\x0d\n  validateInteger(uid\x2C 'uid'\x2C -1\x2C kMaxUserId);\x0d\n  validateInteger(gid\x2C 'gid'\x2C -1\x2C kMaxUserId);\x0d\n  const ctx = { path };\x0d\n  binding.chown(pathModule.toNamespacedPath(path)\x2C uid\x2C gid\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Changes the file system timestamps of the object\x0d\n * referenced by `path`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number | string | Date} atime\x0d\n * @param {number | string | Date} mtime\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction utimes(path\x2C atime\x2C mtime\x2C callback) {\x0d\n  callback = makeCallback(callback);\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.utimes(pathModule.toNamespacedPath(path)\x2C\x0d\n                 toUnixTimestamp(atime)\x2C\x0d\n                 toUnixTimestamp(mtime)\x2C\x0d\n                 req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously changes the file system timestamps\x0d\n * of the object referenced by `path`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number | string | Date} atime\x0d\n * @param {number | string | Date} mtime\x0d\n * @returns {void}\x0d\n */\x0d\nfunction utimesSync(path\x2C atime\x2C mtime) {\x0d\n  path = getValidatedPath(path);\x0d\n  const ctx = { path };\x0d\n  binding.utimes(pathModule.toNamespacedPath(path)\x2C\x0d\n                 toUnixTimestamp(atime)\x2C toUnixTimestamp(mtime)\x2C\x0d\n                 undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Changes the file system timestamps of the object\x0d\n * referenced by the supplied `fd` (file descriptor).\x0d\n * @param {number} fd\x0d\n * @param {number | string | Date} atime\x0d\n * @param {number | string | Date} mtime\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction futimes(fd\x2C atime\x2C mtime\x2C callback) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  atime = toUnixTimestamp(atime\x2C 'atime');\x0d\n  mtime = toUnixTimestamp(mtime\x2C 'mtime');\x0d\n  callback = makeCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.futimes(fd\x2C atime\x2C mtime\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously changes the file system timestamps\x0d\n * of the object referenced by the\x0d\n * supplied `fd` (file descriptor).\x0d\n * @param {number} fd\x0d\n * @param {number | string | Date} atime\x0d\n * @param {number | string | Date} mtime\x0d\n * @returns {void}\x0d\n */\x0d\nfunction futimesSync(fd\x2C atime\x2C mtime) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  atime = toUnixTimestamp(atime\x2C 'atime');\x0d\n  mtime = toUnixTimestamp(mtime\x2C 'mtime');\x0d\n  const ctx = {};\x0d\n  binding.futimes(fd\x2C atime\x2C mtime\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Changes the access and modification times of\x0d\n * a file in the same way as `fs.utimes()`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number | string | Date} atime\x0d\n * @param {number | string | Date} mtime\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction lutimes(path\x2C atime\x2C mtime\x2C callback) {\x0d\n  callback = makeCallback(callback);\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.lutimes(pathModule.toNamespacedPath(path)\x2C\x0d\n                  toUnixTimestamp(atime)\x2C\x0d\n                  toUnixTimestamp(mtime)\x2C\x0d\n                  req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously changes the access and modification\x0d\n * times of a file in the same way as `fs.utimesSync()`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number | string | Date} atime\x0d\n * @param {number | string | Date} mtime\x0d\n * @returns {void}\x0d\n */\x0d\nfunction lutimesSync(path\x2C atime\x2C mtime) {\x0d\n  path = getValidatedPath(path);\x0d\n  const ctx = { path };\x0d\n  binding.lutimes(pathModule.toNamespacedPath(path)\x2C\x0d\n                  toUnixTimestamp(atime)\x2C\x0d\n                  toUnixTimestamp(mtime)\x2C\x0d\n                  undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\nfunction writeAll(fd\x2C isUserFd\x2C buffer\x2C offset\x2C length\x2C signal\x2C callback) {\x0d\n  if (signal?.aborted) {\x0d\n    const abortError = new AbortError();\x0d\n    if (isUserFd) {\x0d\n      callback(abortError);\x0d\n    } else {\x0d\n      fs.close(fd\x2C (err) => {\x0d\n        callback(aggregateTwoErrors(err\x2C abortError));\x0d\n      });\x0d\n    }\x0d\n    return;\x0d\n  }\x0d\n  // write(fd\x2C buffer\x2C offset\x2C length\x2C position\x2C callback)\x0d\n  fs.write(fd\x2C buffer\x2C offset\x2C length\x2C null\x2C (writeErr\x2C written) => {\x0d\n    if (writeErr) {\x0d\n      if (isUserFd) {\x0d\n        callback(writeErr);\x0d\n      } else {\x0d\n        fs.close(fd\x2C (err) => {\x0d\n          callback(aggregateTwoErrors(err\x2C writeErr));\x0d\n        });\x0d\n      }\x0d\n    } else if (written === length) {\x0d\n      if (isUserFd) {\x0d\n        callback(null);\x0d\n      } else {\x0d\n        fs.close(fd\x2C callback);\x0d\n      }\x0d\n    } else {\x0d\n      offset += written;\x0d\n      length -= written;\x0d\n      writeAll(fd\x2C isUserFd\x2C buffer\x2C offset\x2C length\x2C signal\x2C callback);\x0d\n    }\x0d\n  });\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously writes data to the file.\x0d\n * @param {string | Buffer | URL | number} path\x0d\n * @param {string | Buffer | TypedArray | DataView | object} data\x0d\n * @param {{\x0d\n *   encoding?: string | null;\x0d\n *   mode?: number;\x0d\n *   flag?: string;\x0d\n *   signal?: AbortSignal;\x0d\n *   } | string} [options]\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction writeFile(path\x2C data\x2C options\x2C callback) {\x0d\n  callback = maybeCallback(callback || options);\x0d\n  options = getOptions(options\x2C { encoding: 'utf8'\x2C mode: 0o666\x2C flag: 'w' });\x0d\n  const flag = options.flag || 'w';\x0d\n\x0d\n  if (!isArrayBufferView(data)) {\x0d\n    validateStringAfterArrayBufferView(data\x2C 'data');\x0d\n    data = Buffer.from(String(data)\x2C options.encoding || 'utf8');\x0d\n  }\x0d\n\x0d\n  if (isFd(path)) {\x0d\n    const isUserFd = true;\x0d\n    const signal = options.signal;\x0d\n    writeAll(path\x2C isUserFd\x2C data\x2C 0\x2C data.byteLength\x2C signal\x2C callback);\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  if (checkAborted(options.signal\x2C callback))\x0d\n    return;\x0d\n\x0d\n  fs.open(path\x2C flag\x2C options.mode\x2C (openErr\x2C fd) => {\x0d\n    if (openErr) {\x0d\n      callback(openErr);\x0d\n    } else {\x0d\n      const isUserFd = false;\x0d\n      const signal = options.signal;\x0d\n      writeAll(fd\x2C isUserFd\x2C data\x2C 0\x2C data.byteLength\x2C signal\x2C callback);\x0d\n    }\x0d\n  });\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously writes data to the file.\x0d\n * @param {string | Buffer | URL | number} path\x0d\n * @param {string | Buffer | TypedArray | DataView | object} data\x0d\n * @param {{\x0d\n *   encoding?: string | null;\x0d\n *   mode?: number;\x0d\n *   flag?: string;\x0d\n *   } | string} [options]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction writeFileSync(path\x2C data\x2C options) {\x0d\n  options = getOptions(options\x2C { encoding: 'utf8'\x2C mode: 0o666\x2C flag: 'w' });\x0d\n\x0d\n  if (!isArrayBufferView(data)) {\x0d\n    validateStringAfterArrayBufferView(data\x2C 'data');\x0d\n    data = Buffer.from(String(data)\x2C options.encoding || 'utf8');\x0d\n  }\x0d\n\x0d\n  const flag = options.flag || 'w';\x0d\n\x0d\n  const isUserFd = isFd(path); // File descriptor ownership\x0d\n  const fd = isUserFd ? path : fs.openSync(path\x2C flag\x2C options.mode);\x0d\n\x0d\n  let offset = 0;\x0d\n  let length = data.byteLength;\x0d\n  try {\x0d\n    while (length > 0) {\x0d\n      const written = fs.writeSync(fd\x2C data\x2C offset\x2C length);\x0d\n      offset += written;\x0d\n      length -= written;\x0d\n    }\x0d\n  } finally {\x0d\n    if (!isUserFd) fs.closeSync(fd);\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously appends data to a file.\x0d\n * @param {string | Buffer | URL | number} path\x0d\n * @param {string | Buffer} data\x0d\n * @param {{\x0d\n *   encoding?: string | null;\x0d\n *   mode?: number;\x0d\n *   flag?: string;\x0d\n *   } | string} [options]\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction appendFile(path\x2C data\x2C options\x2C callback) {\x0d\n  callback = maybeCallback(callback || options);\x0d\n  options = getOptions(options\x2C { encoding: 'utf8'\x2C mode: 0o666\x2C flag: 'a' });\x0d\n\x0d\n  // Don't make changes directly on options object\x0d\n  options = copyObject(options);\x0d\n\x0d\n  // Force append behavior when using a supplied file descriptor\x0d\n  if (!options.flag || isFd(path))\x0d\n    options.flag = 'a';\x0d\n\x0d\n  fs.writeFile(path\x2C data\x2C options\x2C callback);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously appends data to a file.\x0d\n * @param {string | Buffer | URL | number} path\x0d\n * @param {string | Buffer} data\x0d\n * @param {{\x0d\n *   encoding?: string | null;\x0d\n *   mode?: number;\x0d\n *   flag?: string;\x0d\n *   } | string} [options]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction appendFileSync(path\x2C data\x2C options) {\x0d\n  options = getOptions(options\x2C { encoding: 'utf8'\x2C mode: 0o666\x2C flag: 'a' });\x0d\n\x0d\n  // Don't make changes directly on options object\x0d\n  options = copyObject(options);\x0d\n\x0d\n  // Force append behavior when using a supplied file descriptor\x0d\n  if (!options.flag || isFd(path))\x0d\n    options.flag = 'a';\x0d\n\x0d\n  fs.writeFileSync(path\x2C data\x2C options);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Watches for the changes on `filename`.\x0d\n * @param {string | Buffer | URL} filename\x0d\n * @param {string | {\x0d\n *   persistent?: boolean;\x0d\n *   recursive?: boolean;\x0d\n *   encoding?: string;\x0d\n *   signal?: AbortSignal;\x0d\n *   }} [options]\x0d\n * @param {(\x0d\n *   eventType?: string\x2C\x0d\n *   filename?: string | Buffer\x0d\n *   ) => any} [listener]\x0d\n * @returns {watchers.FSWatcher}\x0d\n */\x0d\nfunction watch(filename\x2C options\x2C listener) {\x0d\n  if (typeof options === 'function') {\x0d\n    listener = options;\x0d\n  }\x0d\n  options = getOptions(options\x2C {});\x0d\n\x0d\n  // Don't make changes directly on options object\x0d\n  options = copyObject(options);\x0d\n\x0d\n  if (options.persistent === undefined) options.persistent = true;\x0d\n  if (options.recursive === undefined) options.recursive = false;\x0d\n  if (options.recursive && !(isOSX || isWindows))\x0d\n    throw new ERR_FEATURE_UNAVAILABLE_ON_PLATFORM('watch recursively');\x0d\n  const watcher = new watchers.FSWatcher();\x0d\n  watcher[watchers.kFSWatchStart](filename\x2C\x0d\n                                  options.persistent\x2C\x0d\n                                  options.recursive\x2C\x0d\n                                  options.encoding);\x0d\n\x0d\n  if (listener) {\x0d\n    watcher.addListener('change'\x2C listener);\x0d\n  }\x0d\n  if (options.signal) {\x0d\n    if (options.signal.aborted) {\x0d\n      process.nextTick(() => watcher.close());\x0d\n    } else {\x0d\n      const listener = () => watcher.close();\x0d\n      options.signal.addEventListener('abort'\x2C listener);\x0d\n      watcher.once('close'\x2C () => {\x0d\n        options.signal.removeEventListener('abort'\x2C listener);\x0d\n      });\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return watcher;\x0d\n}\x0d\n\x0d\n\x0d\nconst statWatchers = new SafeMap();\x0d\n\x0d\n/**\x0d\n * Watches for changes on `filename`.\x0d\n * @param {string | Buffer | URL} filename\x0d\n * @param {{\x0d\n *   bigint?: boolean;\x0d\n *   persistent?: boolean;\x0d\n *   interval?: number;\x0d\n *   }} [options]\x0d\n * @param {(\x0d\n *   current?: Stats\x2C\x0d\n *   previous?: Stats\x0d\n *   ) => any} listener\x0d\n * @returns {watchers.StatWatcher}\x0d\n */\x0d\nfunction watchFile(filename\x2C options\x2C listener) {\x0d\n  filename = getValidatedPath(filename);\x0d\n  filename = pathModule.resolve(filename);\x0d\n  let stat;\x0d\n\x0d\n  if (options === null || typeof options !== 'object') {\x0d\n    listener = options;\x0d\n    options = null;\x0d\n  }\x0d\n\x0d\n  options = {\x0d\n    // Poll interval in milliseconds. 5007 is what libev used to use. It's\x0d\n    // a little on the slow side but let's stick with it for now to keep\x0d\n    // behavioral changes to a minimum.\x0d\n    interval: 5007\x2C\x0d\n    persistent: true\x2C\x0d\n    ...options\x0d\n  };\x0d\n\x0d\n  validateFunction(listener\x2C 'listener');\x0d\n\x0d\n  stat = statWatchers.get(filename);\x0d\n\x0d\n  if (stat === undefined) {\x0d\n    stat = new watchers.StatWatcher(options.bigint);\x0d\n    stat[watchers.kFSStatWatcherStart](filename\x2C\x0d\n                                       options.persistent\x2C options.interval);\x0d\n    statWatchers.set(filename\x2C stat);\x0d\n  } else {\x0d\n    stat[watchers.kFSStatWatcherAddOrCleanRef]('add');\x0d\n  }\x0d\n\x0d\n  stat.addListener('change'\x2C listener);\x0d\n  return stat;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Stops watching for changes on `filename`.\x0d\n * @param {string | Buffer | URL} filename\x0d\n * @param {() => any} [listener]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction unwatchFile(filename\x2C listener) {\x0d\n  filename = getValidatedPath(filename);\x0d\n  filename = pathModule.resolve(filename);\x0d\n  const stat = statWatchers.get(filename);\x0d\n\x0d\n  if (stat === undefined) return;\x0d\n\x0d\n  if (typeof listener === 'function') {\x0d\n    const beforeListenerCount = stat.listenerCount('change');\x0d\n    stat.removeListener('change'\x2C listener);\x0d\n    if (stat.listenerCount('change') < beforeListenerCount)\x0d\n      stat[watchers.kFSStatWatcherAddOrCleanRef]('clean');\x0d\n  } else {\x0d\n    stat.removeAllListeners('change');\x0d\n    stat[watchers.kFSStatWatcherAddOrCleanRef]('cleanAll');\x0d\n  }\x0d\n\x0d\n  if (stat.listenerCount('change') === 0) {\x0d\n    stat.stop();\x0d\n    statWatchers.delete(filename);\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nlet splitRoot;\x0d\nif (isWindows) {\x0d\n  // Regex to find the device root on Windows (e.g. 'c:\\\\')\x2C including trailing\x0d\n  // slash.\x0d\n  const splitRootRe = /^(?:[a-zA-Z]:|[\\\\/]{2}[^\\\\/]+[\\\\/][^\\\\/]+)?[\\\\/]*/;\x0d\n  splitRoot = function splitRoot(str) {\x0d\n    return RegExpPrototypeExec(splitRootRe\x2C str)[0];\x0d\n  };\x0d\n} else {\x0d\n  splitRoot = function splitRoot(str) {\x0d\n    for (let i = 0; i < str.length; ++i) {\x0d\n      if (StringPrototypeCharCodeAt(str\x2C i) !== CHAR_FORWARD_SLASH)\x0d\n        return StringPrototypeSlice(str\x2C 0\x2C i);\x0d\n    }\x0d\n    return str;\x0d\n  };\x0d\n}\x0d\n\x0d\nfunction encodeRealpathResult(result\x2C options) {\x0d\n  if (!options || !options.encoding || options.encoding === 'utf8')\x0d\n    return result;\x0d\n  const asBuffer = Buffer.from(result);\x0d\n  if (options.encoding === 'buffer') {\x0d\n    return asBuffer;\x0d\n  }\x0d\n  return asBuffer.toString(options.encoding);\x0d\n}\x0d\n\x0d\n// Finds the next portion of a (partial) path\x2C up to the next path delimiter\x0d\nlet nextPart;\x0d\nif (isWindows) {\x0d\n  nextPart = function nextPart(p\x2C i) {\x0d\n    for (; i < p.length; ++i) {\x0d\n      const ch = StringPrototypeCharCodeAt(p\x2C i);\x0d\n\x0d\n      // Check for a separator character\x0d\n      if (ch === CHAR_BACKWARD_SLASH || ch === CHAR_FORWARD_SLASH)\x0d\n        return i;\x0d\n    }\x0d\n    return -1;\x0d\n  };\x0d\n} else {\x0d\n  nextPart = function nextPart(p\x2C i) {\x0d\n    return StringPrototypeIndexOf(p\x2C '/'\x2C i);\x0d\n  };\x0d\n}\x0d\n\x0d\nconst emptyObj = ObjectCreate(null);\x0d\n\x0d\n/**\x0d\n * Returns the resolved pathname.\x0d\n * @param {string | Buffer | URL} p\x0d\n * @param {string | { encoding?: string | null; }} [options]\x0d\n * @returns {string | Buffer}\x0d\n */\x0d\nfunction realpathSync(p\x2C options) {\x0d\n  options = getOptions(options\x2C emptyObj);\x0d\n  p = toPathIfFileURL(p);\x0d\n  if (typeof p !== 'string') {\x0d\n    p += '';\x0d\n  }\x0d\n  validatePath(p);\x0d\n  p = pathModule.resolve(p);\x0d\n\x0d\n  const cache = options[realpathCacheKey];\x0d\n  const maybeCachedResult = cache?.get(p);\x0d\n  if (maybeCachedResult) {\x0d\n    return maybeCachedResult;\x0d\n  }\x0d\n\x0d\n  const seenLinks = ObjectCreate(null);\x0d\n  const knownHard = ObjectCreate(null);\x0d\n  const original = p;\x0d\n\x0d\n  // Current character position in p\x0d\n  let pos;\x0d\n  // The partial path so far\x2C including a trailing slash if any\x0d\n  let current;\x0d\n  // The partial path without a trailing slash (except when pointing at a root)\x0d\n  let base;\x0d\n  // The partial path scanned in the previous round\x2C with slash\x0d\n  let previous;\x0d\n\x0d\n  // Skip over roots\x0d\n  current = base = splitRoot(p);\x0d\n  pos = current.length;\x0d\n\x0d\n  // On windows\x2C check that the root exists. On unix there is no need.\x0d\n  if (isWindows) {\x0d\n    const ctx = { path: base };\x0d\n    binding.lstat(pathModule.toNamespacedPath(base)\x2C false\x2C undefined\x2C ctx);\x0d\n    handleErrorFromBinding(ctx);\x0d\n    knownHard[base] = true;\x0d\n  }\x0d\n\x0d\n  // Walk down the path\x2C swapping out linked path parts for their real\x0d\n  // values\x0d\n  // NB: p.length changes.\x0d\n  while (pos < p.length) {\x0d\n    // find the next part\x0d\n    const result = nextPart(p\x2C pos);\x0d\n    previous = current;\x0d\n    if (result === -1) {\x0d\n      const last = StringPrototypeSlice(p\x2C pos);\x0d\n      current += last;\x0d\n      base = previous + last;\x0d\n      pos = p.length;\x0d\n    } else {\x0d\n      current += StringPrototypeSlice(p\x2C pos\x2C result + 1);\x0d\n      base = previous + StringPrototypeSlice(p\x2C pos\x2C result);\x0d\n      pos = result + 1;\x0d\n    }\x0d\n\x0d\n    // Continue if not a symlink\x2C break if a pipe/socket\x0d\n    if (knownHard[base] || cache?.get(base) === base) {\x0d\n      if (isFileType(binding.statValues\x2C S_IFIFO) ||\x0d\n          isFileType(binding.statValues\x2C S_IFSOCK)) {\x0d\n        break;\x0d\n      }\x0d\n      continue;\x0d\n    }\x0d\n\x0d\n    let resolvedLink;\x0d\n    const maybeCachedResolved = cache?.get(base);\x0d\n    if (maybeCachedResolved) {\x0d\n      resolvedLink = maybeCachedResolved;\x0d\n    } else {\x0d\n      // Use stats array directly to avoid creating an fs.Stats instance just\x0d\n      // for our internal use.\x0d\n\x0d\n      const baseLong = pathModule.toNamespacedPath(base);\x0d\n      const ctx = { path: base };\x0d\n      const stats = binding.lstat(baseLong\x2C true\x2C undefined\x2C ctx);\x0d\n      handleErrorFromBinding(ctx);\x0d\n\x0d\n      if (!isFileType(stats\x2C S_IFLNK)) {\x0d\n        knownHard[base] = true;\x0d\n        cache?.set(base\x2C base);\x0d\n        continue;\x0d\n      }\x0d\n\x0d\n      // Read the link if it wasn't read before\x0d\n      // dev/ino always return 0 on windows\x2C so skip the check.\x0d\n      let linkTarget = null;\x0d\n      let id;\x0d\n      if (!isWindows) {\x0d\n        const dev = BigIntPrototypeToString(stats[0]\x2C 32);\x0d\n        const ino = BigIntPrototypeToString(stats[7]\x2C 32);\x0d\n        id = `${dev}:${ino}`;\x0d\n        if (seenLinks[id]) {\x0d\n          linkTarget = seenLinks[id];\x0d\n        }\x0d\n      }\x0d\n      if (linkTarget === null) {\x0d\n        const ctx = { path: base };\x0d\n        binding.stat(baseLong\x2C false\x2C undefined\x2C ctx);\x0d\n        handleErrorFromBinding(ctx);\x0d\n        linkTarget = binding.readlink(baseLong\x2C undefined\x2C undefined\x2C ctx);\x0d\n        handleErrorFromBinding(ctx);\x0d\n      }\x0d\n      resolvedLink = pathModule.resolve(previous\x2C linkTarget);\x0d\n\x0d\n      if (cache) cache.set(base\x2C resolvedLink);\x0d\n      if (!isWindows) seenLinks[id] = linkTarget;\x0d\n    }\x0d\n\x0d\n    // Resolve the link\x2C then start over\x0d\n    p = pathModule.resolve(resolvedLink\x2C StringPrototypeSlice(p\x2C pos));\x0d\n\x0d\n    // Skip over roots\x0d\n    current = base = splitRoot(p);\x0d\n    pos = current.length;\x0d\n\x0d\n    // On windows\x2C check that the root exists. On unix there is no need.\x0d\n    if (isWindows && !knownHard[base]) {\x0d\n      const ctx = { path: base };\x0d\n      binding.lstat(pathModule.toNamespacedPath(base)\x2C false\x2C undefined\x2C ctx);\x0d\n      handleErrorFromBinding(ctx);\x0d\n      knownHard[base] = true;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  cache?.set(original\x2C p);\x0d\n  return encodeRealpathResult(p\x2C options);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Returns the resolved pathname.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | { encoding?: string; }} [options]\x0d\n * @returns {string | Buffer}\x0d\n */\x0d\nrealpathSync.native = (path\x2C options) => {\x0d\n  options = getOptions(options\x2C {});\x0d\n  path = getValidatedPath(path);\x0d\n  const ctx = { path };\x0d\n  const result = binding.realpath(path\x2C options.encoding\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return result;\x0d\n};\x0d\n\x0d\n/**\x0d\n * Asynchronously computes the canonical pathname by\x0d\n * resolving `.`\x2C `..` and symbolic links.\x0d\n * @param {string | Buffer | URL} p\x0d\n * @param {string | { encoding?: string; }} [options]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   resolvedPath?: string | Buffer\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction realpath(p\x2C options\x2C callback) {\x0d\n  callback = typeof options === 'function' ? options : maybeCallback(callback);\x0d\n  options = getOptions(options\x2C {});\x0d\n  p = toPathIfFileURL(p);\x0d\n\x0d\n  if (typeof p !== 'string') {\x0d\n    p += '';\x0d\n  }\x0d\n  validatePath(p);\x0d\n  p = pathModule.resolve(p);\x0d\n\x0d\n  const seenLinks = ObjectCreate(null);\x0d\n  const knownHard = ObjectCreate(null);\x0d\n\x0d\n  // Current character position in p\x0d\n  let pos;\x0d\n  // The partial path so far\x2C including a trailing slash if any\x0d\n  let current;\x0d\n  // The partial path without a trailing slash (except when pointing at a root)\x0d\n  let base;\x0d\n  // The partial path scanned in the previous round\x2C with slash\x0d\n  let previous;\x0d\n\x0d\n  current = base = splitRoot(p);\x0d\n  pos = current.length;\x0d\n\x0d\n  // On windows\x2C check that the root exists. On unix there is no need.\x0d\n  if (isWindows && !knownHard[base]) {\x0d\n    fs.lstat(base\x2C (err\x2C stats) => {\x0d\n      if (err) return callback(err);\x0d\n      knownHard[base] = true;\x0d\n      LOOP();\x0d\n    });\x0d\n  } else {\x0d\n    process.nextTick(LOOP);\x0d\n  }\x0d\n\x0d\n  // Walk down the path\x2C swapping out linked path parts for their real\x0d\n  // values\x0d\n  function LOOP() {\x0d\n    // Stop if scanned past end of path\x0d\n    if (pos >= p.length) {\x0d\n      return callback(null\x2C encodeRealpathResult(p\x2C options));\x0d\n    }\x0d\n\x0d\n    // find the next part\x0d\n    const result = nextPart(p\x2C pos);\x0d\n    previous = current;\x0d\n    if (result === -1) {\x0d\n      const last = StringPrototypeSlice(p\x2C pos);\x0d\n      current += last;\x0d\n      base = previous + last;\x0d\n      pos = p.length;\x0d\n    } else {\x0d\n      current += StringPrototypeSlice(p\x2C pos\x2C result + 1);\x0d\n      base = previous + StringPrototypeSlice(p\x2C pos\x2C result);\x0d\n      pos = result + 1;\x0d\n    }\x0d\n\x0d\n    // Continue if not a symlink\x2C break if a pipe/socket\x0d\n    if (knownHard[base]) {\x0d\n      if (isFileType(binding.statValues\x2C S_IFIFO) ||\x0d\n          isFileType(binding.statValues\x2C S_IFSOCK)) {\x0d\n        return callback(null\x2C encodeRealpathResult(p\x2C options));\x0d\n      }\x0d\n      return process.nextTick(LOOP);\x0d\n    }\x0d\n\x0d\n    return fs.lstat(base\x2C { bigint: true }\x2C gotStat);\x0d\n  }\x0d\n\x0d\n  function gotStat(err\x2C stats) {\x0d\n    if (err) return callback(err);\x0d\n\x0d\n    // If not a symlink\x2C skip to the next path part\x0d\n    if (!stats.isSymbolicLink()) {\x0d\n      knownHard[base] = true;\x0d\n      return process.nextTick(LOOP);\x0d\n    }\x0d\n\x0d\n    // Stat & read the link if not read before.\x0d\n    // Call `gotTarget()` as soon as the link target is known.\x0d\n    // `dev`/`ino` always return 0 on windows\x2C so skip the check.\x0d\n    let id;\x0d\n    if (!isWindows) {\x0d\n      const dev = BigIntPrototypeToString(stats.dev\x2C 32);\x0d\n      const ino = BigIntPrototypeToString(stats.ino\x2C 32);\x0d\n      id = `${dev}:${ino}`;\x0d\n      if (seenLinks[id]) {\x0d\n        return gotTarget(null\x2C seenLinks[id]);\x0d\n      }\x0d\n    }\x0d\n    fs.stat(base\x2C (err) => {\x0d\n      if (err) return callback(err);\x0d\n\x0d\n      fs.readlink(base\x2C (err\x2C target) => {\x0d\n        if (!isWindows) seenLinks[id] = target;\x0d\n        gotTarget(err\x2C target);\x0d\n      });\x0d\n    });\x0d\n  }\x0d\n\x0d\n  function gotTarget(err\x2C target) {\x0d\n    if (err) return callback(err);\x0d\n\x0d\n    gotResolvedLink(pathModule.resolve(previous\x2C target));\x0d\n  }\x0d\n\x0d\n  function gotResolvedLink(resolvedLink) {\x0d\n    // Resolve the link\x2C then start over\x0d\n    p = pathModule.resolve(resolvedLink\x2C StringPrototypeSlice(p\x2C pos));\x0d\n    current = base = splitRoot(p);\x0d\n    pos = current.length;\x0d\n\x0d\n    // On windows\x2C check that the root exists. On unix there is no need.\x0d\n    if (isWindows && !knownHard[base]) {\x0d\n      fs.lstat(base\x2C (err) => {\x0d\n        if (err) return callback(err);\x0d\n        knownHard[base] = true;\x0d\n        LOOP();\x0d\n      });\x0d\n    } else {\x0d\n      process.nextTick(LOOP);\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously computes the canonical pathname by\x0d\n * resolving `.`\x2C `..` and symbolic links.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | { encoding?: string; }} [options]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   resolvedPath?: string | Buffer\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nrealpath.native = (path\x2C options\x2C callback) => {\x0d\n  callback = makeCallback(callback || options);\x0d\n  options = getOptions(options\x2C {});\x0d\n  path = getValidatedPath(path);\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  return binding.realpath(path\x2C options.encoding\x2C req);\x0d\n};\x0d\n\x0d\n/**\x0d\n * Creates a unique temporary directory.\x0d\n * @param {string} prefix\x0d\n * @param {string | { encoding?: string; }} [options]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   directory?: string\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction mkdtemp(prefix\x2C options\x2C callback) {\x0d\n  callback = makeCallback(typeof options === 'function' ? options : callback);\x0d\n  options = getOptions(options\x2C {});\x0d\n\x0d\n  validateString(prefix\x2C 'prefix');\x0d\n  nullCheck(prefix\x2C 'prefix');\x0d\n  warnOnNonPortableTemplate(prefix);\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.mkdtemp(`${prefix}XXXXXX`\x2C options.encoding\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously creates a unique temporary directory.\x0d\n * @param {string} prefix\x0d\n * @param {string | { encoding?: string; }} [options]\x0d\n * @returns {string}\x0d\n */\x0d\nfunction mkdtempSync(prefix\x2C options) {\x0d\n  options = getOptions(options\x2C {});\x0d\n\x0d\n  validateString(prefix\x2C 'prefix');\x0d\n  nullCheck(prefix\x2C 'prefix');\x0d\n  warnOnNonPortableTemplate(prefix);\x0d\n  const path = `${prefix}XXXXXX`;\x0d\n  const ctx = { path };\x0d\n  const result = binding.mkdtemp(path\x2C options.encoding\x2C\x0d\n                                 undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously copies `src` to `dest`. By\x0d\n * default\x2C `dest` is overwritten if it already exists.\x0d\n * @param {string | Buffer | URL} src\x0d\n * @param {string | Buffer | URL} dest\x0d\n * @param {number} [mode]\x0d\n * @param {() => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction copyFile(src\x2C dest\x2C mode\x2C callback) {\x0d\n  if (typeof mode === 'function') {\x0d\n    callback = mode;\x0d\n    mode = 0;\x0d\n  }\x0d\n\x0d\n  src = getValidatedPath(src\x2C 'src');\x0d\n  dest = getValidatedPath(dest\x2C 'dest');\x0d\n\x0d\n  src = pathModule._makeLong(src);\x0d\n  dest = pathModule._makeLong(dest);\x0d\n  mode = getValidMode(mode\x2C 'copyFile');\x0d\n  callback = makeCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.copyFile(src\x2C dest\x2C mode\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously copies `src` to `dest`. By\x0d\n * default\x2C `dest` is overwritten if it already exists.\x0d\n * @param {string | Buffer | URL} src\x0d\n * @param {string | Buffer | URL} dest\x0d\n * @param {number} [mode]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction copyFileSync(src\x2C dest\x2C mode) {\x0d\n  src = getValidatedPath(src\x2C 'src');\x0d\n  dest = getValidatedPath(dest\x2C 'dest');\x0d\n\x0d\n  const ctx = { path: src\x2C dest };  // non-prefixed\x0d\n\x0d\n  src = pathModule._makeLong(src);\x0d\n  dest = pathModule._makeLong(dest);\x0d\n  mode = getValidMode(mode\x2C 'copyFile');\x0d\n  binding.copyFile(src\x2C dest\x2C mode\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously copies `src` to `dest`. `src` can be a file\x2C directory\x2C or\x0d\n * symlink. The contents of directories will be copied recursively.\x0d\n * @param {string | URL} src\x0d\n * @param {string | URL} dest\x0d\n * @param {object} [options]\x0d\n * @param {() => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction cp(src\x2C dest\x2C options\x2C callback) {\x0d\n  if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n    options = undefined;\x0d\n  }\x0d\n  callback = makeCallback(callback);\x0d\n  options = validateCpOptions(options);\x0d\n  src = pathModule.toNamespacedPath(getValidatedPath(src\x2C 'src'));\x0d\n  dest = pathModule.toNamespacedPath(getValidatedPath(dest\x2C 'dest'));\x0d\n  lazyLoadCp();\x0d\n  cpFn(src\x2C dest\x2C options\x2C callback);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously copies `src` to `dest`. `src` can be a file\x2C directory\x2C or\x0d\n * symlink. The contents of directories will be copied recursively.\x0d\n * @param {string | URL} src\x0d\n * @param {string | URL} dest\x0d\n * @param {object} [options]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction cpSync(src\x2C dest\x2C options) {\x0d\n  options = validateCpOptions(options);\x0d\n  src = pathModule.toNamespacedPath(getValidatedPath(src\x2C 'src'));\x0d\n  dest = pathModule.toNamespacedPath(getValidatedPath(dest\x2C 'dest'));\x0d\n  lazyLoadCp();\x0d\n  cpSyncFn(src\x2C dest\x2C options);\x0d\n}\x0d\n\x0d\nfunction lazyLoadStreams() {\x0d\n  if (!ReadStream) {\x0d\n    ({ ReadStream\x2C WriteStream } = require('internal/fs/streams'));\x0d\n    FileReadStream = ReadStream;\x0d\n    FileWriteStream = WriteStream;\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Creates a readable stream with a default `highWaterMark`\x0d\n * of 64 kb.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | {\x0d\n *   flags?: string;\x0d\n *   encoding?: string;\x0d\n *   fd?: number | FileHandle;\x0d\n *   mode?: number;\x0d\n *   autoClose?: boolean;\x0d\n *   emitClose?: boolean;\x0d\n *   start: number;\x0d\n *   end?: number;\x0d\n *   highWaterMark?: number;\x0d\n *   fs?: Object | null;\x0d\n *   }} [options]\x0d\n * @returns {ReadStream}\x0d\n */\x0d\nfunction createReadStream(path\x2C options) {\x0d\n  lazyLoadStreams();\x0d\n  return new ReadStream(path\x2C options);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Creates a write stream.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | {\x0d\n *   flags?: string;\x0d\n *   encoding?: string;\x0d\n *   fd?: number | FileHandle;\x0d\n *   mode?: number;\x0d\n *   autoClose?: boolean;\x0d\n *   emitClose?: boolean;\x0d\n *   start: number;\x0d\n *   fs?: Object | null;\x0d\n *   }} [options]\x0d\n * @returns {WriteStream}\x0d\n */\x0d\nfunction createWriteStream(path\x2C options) {\x0d\n  lazyLoadStreams();\x0d\n  return new WriteStream(path\x2C options);\x0d\n}\x0d\n\x0d\nmodule.exports = fs = {\x0d\n  appendFile\x2C\x0d\n  appendFileSync\x2C\x0d\n  access\x2C\x0d\n  accessSync\x2C\x0d\n  chown\x2C\x0d\n  chownSync\x2C\x0d\n  chmod\x2C\x0d\n  chmodSync\x2C\x0d\n  close\x2C\x0d\n  closeSync\x2C\x0d\n  copyFile\x2C\x0d\n  copyFileSync\x2C\x0d\n  cp\x2C\x0d\n  cpSync\x2C\x0d\n  createReadStream\x2C\x0d\n  createWriteStream\x2C\x0d\n  exists\x2C\x0d\n  existsSync\x2C\x0d\n  fchown\x2C\x0d\n  fchownSync\x2C\x0d\n  fchmod\x2C\x0d\n  fchmodSync\x2C\x0d\n  fdatasync\x2C\x0d\n  fdatasyncSync\x2C\x0d\n  fstat\x2C\x0d\n  fstatSync\x2C\x0d\n  fsync\x2C\x0d\n  fsyncSync\x2C\x0d\n  ftruncate\x2C\x0d\n  ftruncateSync\x2C\x0d\n  futimes\x2C\x0d\n  futimesSync\x2C\x0d\n  lchown\x2C\x0d\n  lchownSync\x2C\x0d\n  lchmod: constants.O_SYMLINK !== undefined ? lchmod : undefined\x2C\x0d\n  lchmodSync: constants.O_SYMLINK !== undefined ? lchmodSync : undefined\x2C\x0d\n  link\x2C\x0d\n  linkSync\x2C\x0d\n  lstat\x2C\x0d\n  lstatSync\x2C\x0d\n  lutimes\x2C\x0d\n  lutimesSync\x2C\x0d\n  mkdir\x2C\x0d\n  mkdirSync\x2C\x0d\n  mkdtemp\x2C\x0d\n  mkdtempSync\x2C\x0d\n  open\x2C\x0d\n  openSync\x2C\x0d\n  opendir\x2C\x0d\n  opendirSync\x2C\x0d\n  readdir\x2C\x0d\n  readdirSync\x2C\x0d\n  read\x2C\x0d\n  readSync\x2C\x0d\n  readv\x2C\x0d\n  readvSync\x2C\x0d\n  readFile\x2C\x0d\n  readFileSync\x2C\x0d\n  readlink\x2C\x0d\n  readlinkSync\x2C\x0d\n  realpath\x2C\x0d\n  realpathSync\x2C\x0d\n  rename\x2C\x0d\n  renameSync\x2C\x0d\n  rm\x2C\x0d\n  rmSync\x2C\x0d\n  rmdir\x2C\x0d\n  rmdirSync\x2C\x0d\n  stat\x2C\x0d\n  statSync\x2C\x0d\n  symlink\x2C\x0d\n  symlinkSync\x2C\x0d\n  truncate\x2C\x0d\n  truncateSync\x2C\x0d\n  unwatchFile\x2C\x0d\n  unlink\x2C\x0d\n  unlinkSync\x2C\x0d\n  utimes\x2C\x0d\n  utimesSync\x2C\x0d\n  watch\x2C\x0d\n  watchFile\x2C\x0d\n  writeFile\x2C\x0d\n  writeFileSync\x2C\x0d\n  write\x2C\x0d\n  writeSync\x2C\x0d\n  writev\x2C\x0d\n  writevSync\x2C\x0d\n  Dir\x2C\x0d\n  Dirent\x2C\x0d\n  Stats\x2C\x0d\n\x0d\n  get ReadStream() {\x0d\n    lazyLoadStreams();\x0d\n    return ReadStream;\x0d\n  }\x2C\x0d\n\x0d\n  set ReadStream(val) {\x0d\n    ReadStream = val;\x0d\n  }\x2C\x0d\n\x0d\n  get WriteStream() {\x0d\n    lazyLoadStreams();\x0d\n    return WriteStream;\x0d\n  }\x2C\x0d\n\x0d\n  set WriteStream(val) {\x0d\n    WriteStream = val;\x0d\n  }\x2C\x0d\n\x0d\n  // Legacy names... these have to be separate because of how graceful-fs\x0d\n  // (and possibly other) modules monkey patch the values.\x0d\n  get FileReadStream() {\x0d\n    lazyLoadStreams();\x0d\n    return FileReadStream;\x0d\n  }\x2C\x0d\n\x0d\n  set FileReadStream(val) {\x0d\n    FileReadStream = val;\x0d\n  }\x2C\x0d\n\x0d\n  get FileWriteStream() {\x0d\n    lazyLoadStreams();\x0d\n    return FileWriteStream;\x0d\n  }\x2C\x0d\n\x0d\n  set FileWriteStream(val) {\x0d\n    FileWriteStream = val;\x0d\n  }\x2C\x0d\n\x0d\n  // For tests\x0d\n  _toUnixTimestamp: toUnixTimestamp\x0d\n};\x0d\n\x0d\nObjectDefineProperties(fs\x2C {\x0d\n  F_OK: { enumerable: true\x2C value: F_OK || 0 }\x2C\x0d\n  R_OK: { enumerable: true\x2C value: R_OK || 0 }\x2C\x0d\n  W_OK: { enumerable: true\x2C value: W_OK || 0 }\x2C\x0d\n  X_OK: { enumerable: true\x2C value: X_OK || 0 }\x2C\x0d\n  constants: {\x0d\n    configurable: false\x2C\x0d\n    enumerable: true\x2C\x0d\n    value: constants\x0d\n  }\x2C\x0d\n  promises: {\x0d\n    configurable: true\x2C\x0d\n    enumerable: true\x2C\x0d\n    get() {\x0d\n      if (promises === null)\x0d\n        promises = require('internal/fs/promises').exports;\x0d\n      return promises;\x0d\n    }\x0d\n  }\x0d\n});\x0d\n
code-source-info,0x5b6ec89e5e
code-creation,LazyCompile,10,394409,0x5b6ec90526,123,getOptions node:internal/fs/utils:314:20,0x3096a121a88,~
script-source,81,node:internal/fs/utils,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayIsArray\x2C\x0d\n  BigInt\x2C\x0d\n  Date\x2C\x0d\n  DateNow\x2C\x0d\n  DatePrototypeGetTime\x2C\x0d\n  ErrorCaptureStackTrace\x2C\x0d\n  FunctionPrototypeCall\x2C\x0d\n  Number\x2C\x0d\n  NumberIsFinite\x2C\x0d\n  NumberIsInteger\x2C\x0d\n  MathMin\x2C\x0d\n  ObjectIs\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  ReflectApply\x2C\x0d\n  ReflectOwnKeys\x2C\x0d\n  StringPrototypeEndsWith\x2C\x0d\n  StringPrototypeIncludes\x2C\x0d\n  StringPrototypeReplace\x2C\x0d\n  Symbol\x2C\x0d\n  TypedArrayPrototypeIncludes\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { Buffer } = require('buffer');\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_FS_EISDIR\x2C\x0d\n    ERR_FS_INVALID_SYMLINK_TYPE\x2C\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_OUT_OF_RANGE\x0d\n  }\x2C\x0d\n  hideStackFrames\x2C\x0d\n  uvException\x0d\n} = require('internal/errors');\x0d\nconst {\x0d\n  isArrayBufferView\x2C\x0d\n  isUint8Array\x2C\x0d\n  isDate\x2C\x0d\n  isBigUint64Array\x0d\n} = require('internal/util/types');\x0d\nconst { once } = require('internal/util');\x0d\nconst { toPathIfFileURL } = require('internal/url');\x0d\nconst {\x0d\n  validateAbortSignal\x2C\x0d\n  validateBoolean\x2C\x0d\n  validateFunction\x2C\x0d\n  validateInt32\x2C\x0d\n  validateInteger\x2C\x0d\n  validateObject\x2C\x0d\n  validateUint32\x2C\x0d\n} = require('internal/validators');\x0d\nconst pathModule = require('path');\x0d\nconst kType = Symbol('type');\x0d\nconst kStats = Symbol('stats');\x0d\nconst assert = require('internal/assert');\x0d\n\x0d\nconst {\x0d\n  fs: {\x0d\n    F_OK = 0\x2C\x0d\n    W_OK = 0\x2C\x0d\n    R_OK = 0\x2C\x0d\n    X_OK = 0\x2C\x0d\n    COPYFILE_EXCL\x2C\x0d\n    COPYFILE_FICLONE\x2C\x0d\n    COPYFILE_FICLONE_FORCE\x2C\x0d\n    O_APPEND\x2C\x0d\n    O_CREAT\x2C\x0d\n    O_EXCL\x2C\x0d\n    O_RDONLY\x2C\x0d\n    O_RDWR\x2C\x0d\n    O_SYNC\x2C\x0d\n    O_TRUNC\x2C\x0d\n    O_WRONLY\x2C\x0d\n    S_IFBLK\x2C\x0d\n    S_IFCHR\x2C\x0d\n    S_IFDIR\x2C\x0d\n    S_IFIFO\x2C\x0d\n    S_IFLNK\x2C\x0d\n    S_IFMT\x2C\x0d\n    S_IFREG\x2C\x0d\n    S_IFSOCK\x2C\x0d\n    UV_FS_SYMLINK_DIR\x2C\x0d\n    UV_FS_SYMLINK_JUNCTION\x2C\x0d\n    UV_DIRENT_UNKNOWN\x2C\x0d\n    UV_DIRENT_FILE\x2C\x0d\n    UV_DIRENT_DIR\x2C\x0d\n    UV_DIRENT_LINK\x2C\x0d\n    UV_DIRENT_FIFO\x2C\x0d\n    UV_DIRENT_SOCKET\x2C\x0d\n    UV_DIRENT_CHAR\x2C\x0d\n    UV_DIRENT_BLOCK\x0d\n  }\x2C\x0d\n  os: {\x0d\n    errno: {\x0d\n      EISDIR\x0d\n    }\x0d\n  }\x0d\n} = internalBinding('constants');\x0d\n\x0d\n// The access modes can be any of F_OK\x2C R_OK\x2C W_OK or X_OK. Some might not be\x0d\n// available on specific systems. They can be used in combination as well\x0d\n// (F_OK | R_OK | W_OK | X_OK).\x0d\nconst kMinimumAccessMode = MathMin(F_OK\x2C W_OK\x2C R_OK\x2C X_OK);\x0d\nconst kMaximumAccessMode = F_OK | W_OK | R_OK | X_OK;\x0d\n\x0d\nconst kDefaultCopyMode = 0;\x0d\n// The copy modes can be any of COPYFILE_EXCL\x2C COPYFILE_FICLONE or\x0d\n// COPYFILE_FICLONE_FORCE. They can be used in combination as well\x0d\n// (COPYFILE_EXCL | COPYFILE_FICLONE | COPYFILE_FICLONE_FORCE).\x0d\nconst kMinimumCopyMode = MathMin(\x0d\n  kDefaultCopyMode\x2C\x0d\n  COPYFILE_EXCL\x2C\x0d\n  COPYFILE_FICLONE\x2C\x0d\n  COPYFILE_FICLONE_FORCE\x0d\n);\x0d\nconst kMaximumCopyMode = COPYFILE_EXCL |\x0d\n                         COPYFILE_FICLONE |\x0d\n                         COPYFILE_FICLONE_FORCE;\x0d\n\x0d\n// Most platforms don't allow reads or writes >= 2 GB.\x0d\n// See https://github.com/libuv/libuv/pull/1501.\x0d\nconst kIoMaxLength = 2 ** 31 - 1;\x0d\n\x0d\n// Use 64kb in case the file type is not a regular file and thus do not know the\x0d\n// actual file size. Increasing the value further results in more frequent over\x0d\n// allocation for small files and consumes CPU time and memory that should be\x0d\n// used else wise.\x0d\n// Use up to 512kb per read otherwise to partition reading big files to prevent\x0d\n// blocking other threads in case the available threads are all in use.\x0d\nconst kReadFileUnknownBufferLength = 64 * 1024;\x0d\nconst kReadFileBufferLength = 512 * 1024;\x0d\n\x0d\nconst kWriteFileMaxChunkSize = 512 * 1024;\x0d\n\x0d\nconst kMaxUserId = 2 ** 32 - 1;\x0d\n\x0d\nconst isWindows = process.platform === 'win32';\x0d\n\x0d\nlet fs;\x0d\nfunction lazyLoadFs() {\x0d\n  if (!fs) {\x0d\n    fs = require('fs');\x0d\n  }\x0d\n  return fs;\x0d\n}\x0d\n\x0d\nfunction assertEncoding(encoding) {\x0d\n  if (encoding && !Buffer.isEncoding(encoding)) {\x0d\n    const reason = 'is invalid encoding';\x0d\n    throw new ERR_INVALID_ARG_VALUE(encoding\x2C 'encoding'\x2C reason);\x0d\n  }\x0d\n}\x0d\n\x0d\nclass Dirent {\x0d\n  constructor(name\x2C type) {\x0d\n    this.name = name;\x0d\n    this[kType] = type;\x0d\n  }\x0d\n\x0d\n  isDirectory() {\x0d\n    return this[kType] === UV_DIRENT_DIR;\x0d\n  }\x0d\n\x0d\n  isFile() {\x0d\n    return this[kType] === UV_DIRENT_FILE;\x0d\n  }\x0d\n\x0d\n  isBlockDevice() {\x0d\n    return this[kType] === UV_DIRENT_BLOCK;\x0d\n  }\x0d\n\x0d\n  isCharacterDevice() {\x0d\n    return this[kType] === UV_DIRENT_CHAR;\x0d\n  }\x0d\n\x0d\n  isSymbolicLink() {\x0d\n    return this[kType] === UV_DIRENT_LINK;\x0d\n  }\x0d\n\x0d\n  isFIFO() {\x0d\n    return this[kType] === UV_DIRENT_FIFO;\x0d\n  }\x0d\n\x0d\n  isSocket() {\x0d\n    return this[kType] === UV_DIRENT_SOCKET;\x0d\n  }\x0d\n}\x0d\n\x0d\nclass DirentFromStats extends Dirent {\x0d\n  constructor(name\x2C stats) {\x0d\n    super(name\x2C null);\x0d\n    this[kStats] = stats;\x0d\n  }\x0d\n}\x0d\n\x0d\nfor (const name of ReflectOwnKeys(Dirent.prototype)) {\x0d\n  if (name === 'constructor') {\x0d\n    continue;\x0d\n  }\x0d\n  DirentFromStats.prototype[name] = function() {\x0d\n    return this[kStats][name]();\x0d\n  };\x0d\n}\x0d\n\x0d\nfunction copyObject(source) {\x0d\n  const target = {};\x0d\n  for (const key in source)\x0d\n    target[key] = source[key];\x0d\n  return target;\x0d\n}\x0d\n\x0d\nconst bufferSep = Buffer.from(pathModule.sep);\x0d\n\x0d\nfunction join(path\x2C name) {\x0d\n  if ((typeof path === 'string' || isUint8Array(path)) &&\x0d\n      name === undefined) {\x0d\n    return path;\x0d\n  }\x0d\n\x0d\n  if (typeof path === 'string' && isUint8Array(name)) {\x0d\n    const pathBuffer = Buffer.from(pathModule.join(path\x2C pathModule.sep));\x0d\n    return Buffer.concat([pathBuffer\x2C name]);\x0d\n  }\x0d\n\x0d\n  if (typeof path === 'string' && typeof name === 'string') {\x0d\n    return pathModule.join(path\x2C name);\x0d\n  }\x0d\n\x0d\n  if (isUint8Array(path) && isUint8Array(name)) {\x0d\n    return Buffer.concat([path\x2C bufferSep\x2C name]);\x0d\n  }\x0d\n\x0d\n  throw new ERR_INVALID_ARG_TYPE(\x0d\n    'path'\x2C ['string'\x2C 'Buffer']\x2C path);\x0d\n}\x0d\n\x0d\nfunction getDirents(path\x2C { 0: names\x2C 1: types }\x2C callback) {\x0d\n  let i;\x0d\n  if (typeof callback === 'function') {\x0d\n    const len = names.length;\x0d\n    let toFinish = 0;\x0d\n    callback = once(callback);\x0d\n    for (i = 0; i < len; i++) {\x0d\n      const type = types[i];\x0d\n      if (type === UV_DIRENT_UNKNOWN) {\x0d\n        const name = names[i];\x0d\n        const idx = i;\x0d\n        toFinish++;\x0d\n        let filepath;\x0d\n        try {\x0d\n          filepath = join(path\x2C name);\x0d\n        } catch (err) {\x0d\n          callback(err);\x0d\n          return;\x0d\n        }\x0d\n        lazyLoadFs().lstat(filepath\x2C (err\x2C stats) => {\x0d\n          if (err) {\x0d\n            callback(err);\x0d\n            return;\x0d\n          }\x0d\n          names[idx] = new DirentFromStats(name\x2C stats);\x0d\n          if (--toFinish === 0) {\x0d\n            callback(null\x2C names);\x0d\n          }\x0d\n        });\x0d\n      } else {\x0d\n        names[i] = new Dirent(names[i]\x2C types[i]);\x0d\n      }\x0d\n    }\x0d\n    if (toFinish === 0) {\x0d\n      callback(null\x2C names);\x0d\n    }\x0d\n  } else {\x0d\n    const len = names.length;\x0d\n    for (i = 0; i < len; i++) {\x0d\n      names[i] = getDirent(path\x2C names[i]\x2C types[i]);\x0d\n    }\x0d\n    return names;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction getDirent(path\x2C name\x2C type\x2C callback) {\x0d\n  if (typeof callback === 'function') {\x0d\n    if (type === UV_DIRENT_UNKNOWN) {\x0d\n      let filepath;\x0d\n      try {\x0d\n        filepath = join(path\x2C name);\x0d\n      } catch (err) {\x0d\n        callback(err);\x0d\n        return;\x0d\n      }\x0d\n      lazyLoadFs().lstat(filepath\x2C (err\x2C stats) => {\x0d\n        if (err) {\x0d\n          callback(err);\x0d\n          return;\x0d\n        }\x0d\n        callback(null\x2C new DirentFromStats(name\x2C stats));\x0d\n      });\x0d\n    } else {\x0d\n      callback(null\x2C new Dirent(name\x2C type));\x0d\n    }\x0d\n  } else if (type === UV_DIRENT_UNKNOWN) {\x0d\n    const stats = lazyLoadFs().lstatSync(join(path\x2C name));\x0d\n    return new DirentFromStats(name\x2C stats);\x0d\n  } else {\x0d\n    return new Dirent(name\x2C type);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction getOptions(options\x2C defaultOptions) {\x0d\n  if (options === null || options === undefined ||\x0d\n      typeof options === 'function') {\x0d\n    return defaultOptions;\x0d\n  }\x0d\n\x0d\n  if (typeof options === 'string') {\x0d\n    defaultOptions = { ...defaultOptions };\x0d\n    defaultOptions.encoding = options;\x0d\n    options = defaultOptions;\x0d\n  } else if (typeof options !== 'object') {\x0d\n    throw new ERR_INVALID_ARG_TYPE('options'\x2C ['string'\x2C 'Object']\x2C options);\x0d\n  }\x0d\n\x0d\n  if (options.encoding !== 'buffer')\x0d\n    assertEncoding(options.encoding);\x0d\n\x0d\n  if (options.signal !== undefined) {\x0d\n    validateAbortSignal(options.signal\x2C 'options.signal');\x0d\n  }\x0d\n  return options;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {InternalFSBinding.FSSyncContext} ctx\x0d\n */\x0d\nfunction handleErrorFromBinding(ctx) {\x0d\n  if (ctx.errno !== undefined) {  // libuv error numbers\x0d\n    const err = uvException(ctx);\x0d\n    ErrorCaptureStackTrace(err\x2C handleErrorFromBinding);\x0d\n    throw err;\x0d\n  }\x0d\n  if (ctx.error !== undefined) {  // Errors created in C++ land.\x0d\n    // TODO(joyeecheung): currently\x2C ctx.error are encoding errors\x0d\n    // usually caused by memory problems. We need to figure out proper error\x0d\n    // code(s) for this.\x0d\n    ErrorCaptureStackTrace(ctx.error\x2C handleErrorFromBinding);\x0d\n    throw ctx.error;\x0d\n  }\x0d\n}\x0d\n\x0d\n// Check if the path contains null types if it is a string nor Uint8Array\x2C\x0d\n// otherwise return silently.\x0d\nconst nullCheck = hideStackFrames((path\x2C propName\x2C throwError = true) => {\x0d\n  const pathIsString = typeof path === 'string';\x0d\n  const pathIsUint8Array = isUint8Array(path);\x0d\n\x0d\n  // We can only perform meaningful checks on strings and Uint8Arrays.\x0d\n  if ((!pathIsString && !pathIsUint8Array) ||\x0d\n      (pathIsString && !StringPrototypeIncludes(path\x2C '\\u0000')) ||\x0d\n      (pathIsUint8Array && !TypedArrayPrototypeIncludes(path\x2C 0))) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  const err = new ERR_INVALID_ARG_VALUE(\x0d\n    propName\x2C\x0d\n    path\x2C\x0d\n    'must be a string or Uint8Array without null bytes'\x0d\n  );\x0d\n  if (throwError) {\x0d\n    throw err;\x0d\n  }\x0d\n  return err;\x0d\n});\x0d\n\x0d\nfunction preprocessSymlinkDestination(path\x2C type\x2C linkPath) {\x0d\n  if (!isWindows) {\x0d\n    // No preprocessing is needed on Unix.\x0d\n    return path;\x0d\n  }\x0d\n  path = '' + path;\x0d\n  if (type === 'junction') {\x0d\n    // Junctions paths need to be absolute and \\\\?\\-prefixed.\x0d\n    // A relative target is relative to the link's parent directory.\x0d\n    path = pathModule.resolve(linkPath\x2C '..'\x2C path);\x0d\n    return pathModule.toNamespacedPath(path);\x0d\n  }\x0d\n  if (pathModule.isAbsolute(path)) {\x0d\n    // If the path is absolute\x2C use the \\\\?\\-prefix to enable long filenames\x0d\n    return pathModule.toNamespacedPath(path);\x0d\n  }\x0d\n  // Windows symlinks don't tolerate forward slashes.\x0d\n  return StringPrototypeReplace(path\x2C /\\//g\x2C '\\\\');\x0d\n}\x0d\n\x0d\n// Constructor for file stats.\x0d\nfunction StatsBase(dev\x2C mode\x2C nlink\x2C uid\x2C gid\x2C rdev\x2C blksize\x2C\x0d\n                   ino\x2C size\x2C blocks) {\x0d\n  this.dev = dev;\x0d\n  this.mode = mode;\x0d\n  this.nlink = nlink;\x0d\n  this.uid = uid;\x0d\n  this.gid = gid;\x0d\n  this.rdev = rdev;\x0d\n  this.blksize = blksize;\x0d\n  this.ino = ino;\x0d\n  this.size = size;\x0d\n  this.blocks = blocks;\x0d\n}\x0d\n\x0d\nStatsBase.prototype.isDirectory = function() {\x0d\n  return this._checkModeProperty(S_IFDIR);\x0d\n};\x0d\n\x0d\nStatsBase.prototype.isFile = function() {\x0d\n  return this._checkModeProperty(S_IFREG);\x0d\n};\x0d\n\x0d\nStatsBase.prototype.isBlockDevice = function() {\x0d\n  return this._checkModeProperty(S_IFBLK);\x0d\n};\x0d\n\x0d\nStatsBase.prototype.isCharacterDevice = function() {\x0d\n  return this._checkModeProperty(S_IFCHR);\x0d\n};\x0d\n\x0d\nStatsBase.prototype.isSymbolicLink = function() {\x0d\n  return this._checkModeProperty(S_IFLNK);\x0d\n};\x0d\n\x0d\nStatsBase.prototype.isFIFO = function() {\x0d\n  return this._checkModeProperty(S_IFIFO);\x0d\n};\x0d\n\x0d\nStatsBase.prototype.isSocket = function() {\x0d\n  return this._checkModeProperty(S_IFSOCK);\x0d\n};\x0d\n\x0d\nconst kNsPerMsBigInt = 10n ** 6n;\x0d\nconst kNsPerSecBigInt = 10n ** 9n;\x0d\nconst kMsPerSec = 10 ** 3;\x0d\nconst kNsPerMs = 10 ** 6;\x0d\nfunction msFromTimeSpec(sec\x2C nsec) {\x0d\n  return sec * kMsPerSec + nsec / kNsPerMs;\x0d\n}\x0d\n\x0d\nfunction nsFromTimeSpecBigInt(sec\x2C nsec) {\x0d\n  return sec * kNsPerSecBigInt + nsec;\x0d\n}\x0d\n\x0d\n// The Date constructor performs Math.floor() to the timestamp.\x0d\n// https://www.ecma-international.org/ecma-262/#sec-timeclip\x0d\n// Since there may be a precision loss when the timestamp is\x0d\n// converted to a floating point number\x2C we manually round\x0d\n// the timestamp here before passing it to Date().\x0d\n// Refs: https://github.com/nodejs/node/pull/12607\x0d\nfunction dateFromMs(ms) {\x0d\n  return new Date(Number(ms) + 0.5);\x0d\n}\x0d\n\x0d\nfunction BigIntStats(dev\x2C mode\x2C nlink\x2C uid\x2C gid\x2C rdev\x2C blksize\x2C\x0d\n                     ino\x2C size\x2C blocks\x2C\x0d\n                     atimeNs\x2C mtimeNs\x2C ctimeNs\x2C birthtimeNs) {\x0d\n  ReflectApply(StatsBase\x2C this\x2C [dev\x2C mode\x2C nlink\x2C uid\x2C gid\x2C rdev\x2C blksize\x2C\x0d\n                                 ino\x2C size\x2C blocks]);\x0d\n\x0d\n  this.atimeMs = atimeNs / kNsPerMsBigInt;\x0d\n  this.mtimeMs = mtimeNs / kNsPerMsBigInt;\x0d\n  this.ctimeMs = ctimeNs / kNsPerMsBigInt;\x0d\n  this.birthtimeMs = birthtimeNs / kNsPerMsBigInt;\x0d\n  this.atimeNs = atimeNs;\x0d\n  this.mtimeNs = mtimeNs;\x0d\n  this.ctimeNs = ctimeNs;\x0d\n  this.birthtimeNs = birthtimeNs;\x0d\n  this.atime = dateFromMs(this.atimeMs);\x0d\n  this.mtime = dateFromMs(this.mtimeMs);\x0d\n  this.ctime = dateFromMs(this.ctimeMs);\x0d\n  this.birthtime = dateFromMs(this.birthtimeMs);\x0d\n}\x0d\n\x0d\nObjectSetPrototypeOf(BigIntStats.prototype\x2C StatsBase.prototype);\x0d\nObjectSetPrototypeOf(BigIntStats\x2C StatsBase);\x0d\n\x0d\nBigIntStats.prototype._checkModeProperty = function(property) {\x0d\n  if (isWindows && (property === S_IFIFO || property === S_IFBLK ||\x0d\n    property === S_IFSOCK)) {\x0d\n    return false;  // Some types are not available on Windows\x0d\n  }\x0d\n  return (this.mode & BigInt(S_IFMT)) === BigInt(property);\x0d\n};\x0d\n\x0d\nfunction Stats(dev\x2C mode\x2C nlink\x2C uid\x2C gid\x2C rdev\x2C blksize\x2C\x0d\n               ino\x2C size\x2C blocks\x2C\x0d\n               atimeMs\x2C mtimeMs\x2C ctimeMs\x2C birthtimeMs) {\x0d\n  FunctionPrototypeCall(StatsBase\x2C this\x2C dev\x2C mode\x2C nlink\x2C uid\x2C gid\x2C rdev\x2C\x0d\n                        blksize\x2C ino\x2C size\x2C blocks);\x0d\n  this.atimeMs = atimeMs;\x0d\n  this.mtimeMs = mtimeMs;\x0d\n  this.ctimeMs = ctimeMs;\x0d\n  this.birthtimeMs = birthtimeMs;\x0d\n  this.atime = dateFromMs(atimeMs);\x0d\n  this.mtime = dateFromMs(mtimeMs);\x0d\n  this.ctime = dateFromMs(ctimeMs);\x0d\n  this.birthtime = dateFromMs(birthtimeMs);\x0d\n}\x0d\n\x0d\nObjectSetPrototypeOf(Stats.prototype\x2C StatsBase.prototype);\x0d\nObjectSetPrototypeOf(Stats\x2C StatsBase);\x0d\n\x0d\n// HACK: Workaround for https://github.com/standard-things/esm/issues/821.\x0d\n// TODO(ronag): Remove this as soon as `esm` publishes a fixed version.\x0d\nStats.prototype.isFile = StatsBase.prototype.isFile;\x0d\n\x0d\nStats.prototype._checkModeProperty = function(property) {\x0d\n  if (isWindows && (property === S_IFIFO || property === S_IFBLK ||\x0d\n    property === S_IFSOCK)) {\x0d\n    return false;  // Some types are not available on Windows\x0d\n  }\x0d\n  return (this.mode & S_IFMT) === property;\x0d\n};\x0d\n\x0d\n/**\x0d\n * @param {Float64Array | BigUint64Array} stats\x0d\n * @param {number} offset\x0d\n * @returns {BigIntStats | Stats}\x0d\n */\x0d\nfunction getStatsFromBinding(stats\x2C offset = 0) {\x0d\n  if (isBigUint64Array(stats)) {\x0d\n    return new BigIntStats(\x0d\n      stats[0 + offset]\x2C stats[1 + offset]\x2C stats[2 + offset]\x2C\x0d\n      stats[3 + offset]\x2C stats[4 + offset]\x2C stats[5 + offset]\x2C\x0d\n      stats[6 + offset]\x2C stats[7 + offset]\x2C stats[8 + offset]\x2C\x0d\n      stats[9 + offset]\x2C\x0d\n      nsFromTimeSpecBigInt(stats[10 + offset]\x2C stats[11 + offset])\x2C\x0d\n      nsFromTimeSpecBigInt(stats[12 + offset]\x2C stats[13 + offset])\x2C\x0d\n      nsFromTimeSpecBigInt(stats[14 + offset]\x2C stats[15 + offset])\x2C\x0d\n      nsFromTimeSpecBigInt(stats[16 + offset]\x2C stats[17 + offset])\x0d\n    );\x0d\n  }\x0d\n  return new Stats(\x0d\n    stats[0 + offset]\x2C stats[1 + offset]\x2C stats[2 + offset]\x2C\x0d\n    stats[3 + offset]\x2C stats[4 + offset]\x2C stats[5 + offset]\x2C\x0d\n    stats[6 + offset]\x2C stats[7 + offset]\x2C stats[8 + offset]\x2C\x0d\n    stats[9 + offset]\x2C\x0d\n    msFromTimeSpec(stats[10 + offset]\x2C stats[11 + offset])\x2C\x0d\n    msFromTimeSpec(stats[12 + offset]\x2C stats[13 + offset])\x2C\x0d\n    msFromTimeSpec(stats[14 + offset]\x2C stats[15 + offset])\x2C\x0d\n    msFromTimeSpec(stats[16 + offset]\x2C stats[17 + offset])\x0d\n  );\x0d\n}\x0d\n\x0d\nfunction stringToFlags(flags\x2C name = 'flags') {\x0d\n  if (typeof flags === 'number') {\x0d\n    validateInt32(flags\x2C name);\x0d\n    return flags;\x0d\n  }\x0d\n\x0d\n  if (flags == null) {\x0d\n    return O_RDONLY;\x0d\n  }\x0d\n\x0d\n  switch (flags) {\x0d\n    case 'r' : return O_RDONLY;\x0d\n    case 'rs' : // Fall through.\x0d\n    case 'sr' : return O_RDONLY | O_SYNC;\x0d\n    case 'r+' : return O_RDWR;\x0d\n    case 'rs+' : // Fall through.\x0d\n    case 'sr+' : return O_RDWR | O_SYNC;\x0d\n\x0d\n    case 'w' : return O_TRUNC | O_CREAT | O_WRONLY;\x0d\n    case 'wx' : // Fall through.\x0d\n    case 'xw' : return O_TRUNC | O_CREAT | O_WRONLY | O_EXCL;\x0d\n\x0d\n    case 'w+' : return O_TRUNC | O_CREAT | O_RDWR;\x0d\n    case 'wx+': // Fall through.\x0d\n    case 'xw+': return O_TRUNC | O_CREAT | O_RDWR | O_EXCL;\x0d\n\x0d\n    case 'a' : return O_APPEND | O_CREAT | O_WRONLY;\x0d\n    case 'ax' : // Fall through.\x0d\n    case 'xa' : return O_APPEND | O_CREAT | O_WRONLY | O_EXCL;\x0d\n    case 'as' : // Fall through.\x0d\n    case 'sa' : return O_APPEND | O_CREAT | O_WRONLY | O_SYNC;\x0d\n\x0d\n    case 'a+' : return O_APPEND | O_CREAT | O_RDWR;\x0d\n    case 'ax+': // Fall through.\x0d\n    case 'xa+': return O_APPEND | O_CREAT | O_RDWR | O_EXCL;\x0d\n    case 'as+': // Fall through.\x0d\n    case 'sa+': return O_APPEND | O_CREAT | O_RDWR | O_SYNC;\x0d\n  }\x0d\n\x0d\n  throw new ERR_INVALID_ARG_VALUE('flags'\x2C flags);\x0d\n}\x0d\n\x0d\nconst stringToSymlinkType = hideStackFrames((type) => {\x0d\n  let flags = 0;\x0d\n  if (typeof type === 'string') {\x0d\n    switch (type) {\x0d\n      case 'dir':\x0d\n        flags |= UV_FS_SYMLINK_DIR;\x0d\n        break;\x0d\n      case 'junction':\x0d\n        flags |= UV_FS_SYMLINK_JUNCTION;\x0d\n        break;\x0d\n      case 'file':\x0d\n        break;\x0d\n      default:\x0d\n        throw new ERR_FS_INVALID_SYMLINK_TYPE(type);\x0d\n    }\x0d\n  }\x0d\n  return flags;\x0d\n});\x0d\n\x0d\n// converts Date or number to a fractional UNIX timestamp\x0d\nfunction toUnixTimestamp(time\x2C name = 'time') {\x0d\n  // eslint-disable-next-line eqeqeq\x0d\n  if (typeof time === 'string' && +time == time) {\x0d\n    return +time;\x0d\n  }\x0d\n  if (NumberIsFinite(time)) {\x0d\n    if (time < 0) {\x0d\n      return DateNow() / 1000;\x0d\n    }\x0d\n    return time;\x0d\n  }\x0d\n  if (isDate(time)) {\x0d\n    // Convert to 123.456 UNIX timestamp\x0d\n    return DatePrototypeGetTime(time) / 1000;\x0d\n  }\x0d\n  throw new ERR_INVALID_ARG_TYPE(name\x2C ['Date'\x2C 'Time in seconds']\x2C time);\x0d\n}\x0d\n\x0d\nconst validateOffsetLengthRead = hideStackFrames(\x0d\n  (offset\x2C length\x2C bufferLength) => {\x0d\n    if (offset < 0) {\x0d\n      throw new ERR_OUT_OF_RANGE('offset'\x2C '>= 0'\x2C offset);\x0d\n    }\x0d\n    if (length < 0) {\x0d\n      throw new ERR_OUT_OF_RANGE('length'\x2C '>= 0'\x2C length);\x0d\n    }\x0d\n    if (offset + length > bufferLength) {\x0d\n      throw new ERR_OUT_OF_RANGE('length'\x2C\x0d\n                                 `<= ${bufferLength - offset}`\x2C length);\x0d\n    }\x0d\n  }\x0d\n);\x0d\n\x0d\nconst validateOffsetLengthWrite = hideStackFrames(\x0d\n  (offset\x2C length\x2C byteLength) => {\x0d\n    if (offset > byteLength) {\x0d\n      throw new ERR_OUT_OF_RANGE('offset'\x2C `<= ${byteLength}`\x2C offset);\x0d\n    }\x0d\n\x0d\n    if (length > byteLength - offset) {\x0d\n      throw new ERR_OUT_OF_RANGE('length'\x2C `<= ${byteLength - offset}`\x2C length);\x0d\n    }\x0d\n\x0d\n    if (length < 0) {\x0d\n      throw new ERR_OUT_OF_RANGE('length'\x2C '>= 0'\x2C length);\x0d\n    }\x0d\n\x0d\n    validateInt32(length\x2C 'length'\x2C 0);\x0d\n  }\x0d\n);\x0d\n\x0d\nconst validatePath = hideStackFrames((path\x2C propName = 'path') => {\x0d\n  if (typeof path !== 'string' && !isUint8Array(path)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(propName\x2C ['string'\x2C 'Buffer'\x2C 'URL']\x2C path);\x0d\n  }\x0d\n\x0d\n  const err = nullCheck(path\x2C propName\x2C false);\x0d\n\x0d\n  if (err !== undefined) {\x0d\n    throw err;\x0d\n  }\x0d\n});\x0d\n\x0d\nconst getValidatedPath = hideStackFrames((fileURLOrPath\x2C propName = 'path') => {\x0d\n  const path = toPathIfFileURL(fileURLOrPath);\x0d\n  validatePath(path\x2C propName);\x0d\n  return path;\x0d\n});\x0d\n\x0d\nconst getValidatedFd = hideStackFrames((fd\x2C propName = 'fd') => {\x0d\n  if (ObjectIs(fd\x2C -0)) {\x0d\n    return 0;\x0d\n  }\x0d\n\x0d\n  validateInt32(fd\x2C propName\x2C 0);\x0d\n\x0d\n  return fd;\x0d\n});\x0d\n\x0d\nconst validateBufferArray = hideStackFrames((buffers\x2C propName = 'buffers') => {\x0d\n  if (!ArrayIsArray(buffers))\x0d\n    throw new ERR_INVALID_ARG_TYPE(propName\x2C 'ArrayBufferView[]'\x2C buffers);\x0d\n\x0d\n  for (let i = 0; i < buffers.length; i++) {\x0d\n    if (!isArrayBufferView(buffers[i]))\x0d\n      throw new ERR_INVALID_ARG_TYPE(propName\x2C 'ArrayBufferView[]'\x2C buffers);\x0d\n  }\x0d\n\x0d\n  return buffers;\x0d\n});\x0d\n\x0d\nlet nonPortableTemplateWarn = true;\x0d\n\x0d\nfunction warnOnNonPortableTemplate(template) {\x0d\n  // Template strings passed to the mkdtemp() family of functions should not\x0d\n  // end with 'X' because they are handled inconsistently across platforms.\x0d\n  if (nonPortableTemplateWarn && StringPrototypeEndsWith(template\x2C 'X')) {\x0d\n    process.emitWarning('mkdtemp() templates ending with X are not portable. ' +\x0d\n                        'For details see: https://nodejs.org/api/fs.html');\x0d\n    nonPortableTemplateWarn = false;\x0d\n  }\x0d\n}\x0d\n\x0d\nconst defaultCpOptions = {\x0d\n  dereference: false\x2C\x0d\n  errorOnExist: false\x2C\x0d\n  filter: undefined\x2C\x0d\n  force: true\x2C\x0d\n  preserveTimestamps: false\x2C\x0d\n  recursive: false\x2C\x0d\n};\x0d\n\x0d\nconst defaultRmOptions = {\x0d\n  recursive: false\x2C\x0d\n  force: false\x2C\x0d\n  retryDelay: 100\x2C\x0d\n  maxRetries: 0\x0d\n};\x0d\n\x0d\nconst defaultRmdirOptions = {\x0d\n  retryDelay: 100\x2C\x0d\n  maxRetries: 0\x2C\x0d\n  recursive: false\x2C\x0d\n};\x0d\n\x0d\nconst validateCpOptions = hideStackFrames((options) => {\x0d\n  if (options === undefined)\x0d\n    return { ...defaultCpOptions };\x0d\n  validateObject(options\x2C 'options');\x0d\n  options = { ...defaultCpOptions\x2C ...options };\x0d\n  validateBoolean(options.dereference\x2C 'options.dereference');\x0d\n  validateBoolean(options.errorOnExist\x2C 'options.errorOnExist');\x0d\n  validateBoolean(options.force\x2C 'options.force');\x0d\n  validateBoolean(options.preserveTimestamps\x2C 'options.preserveTimestamps');\x0d\n  validateBoolean(options.recursive\x2C 'options.recursive');\x0d\n  if (options.filter !== undefined) {\x0d\n    validateFunction(options.filter\x2C 'options.filter');\x0d\n  }\x0d\n  return options;\x0d\n});\x0d\n\x0d\nconst validateRmOptions = hideStackFrames((path\x2C options\x2C expectDir\x2C cb) => {\x0d\n  options = validateRmdirOptions(options\x2C defaultRmOptions);\x0d\n  validateBoolean(options.force\x2C 'options.force');\x0d\n\x0d\n  lazyLoadFs().stat(path\x2C (err\x2C stats) => {\x0d\n    if (err) {\x0d\n      if (options.force && err.code === 'ENOENT') {\x0d\n        return cb(null\x2C options);\x0d\n      }\x0d\n      return cb(err\x2C options);\x0d\n    }\x0d\n\x0d\n    if (expectDir && !stats.isDirectory()) {\x0d\n      return cb(false);\x0d\n    }\x0d\n\x0d\n    if (stats.isDirectory() && !options.recursive) {\x0d\n      return cb(new ERR_FS_EISDIR({\x0d\n        code: 'EISDIR'\x2C\x0d\n        message: 'is a directory'\x2C\x0d\n        path\x2C\x0d\n        syscall: 'rm'\x2C\x0d\n        errno: EISDIR\x0d\n      }));\x0d\n    }\x0d\n    return cb(null\x2C options);\x0d\n  });\x0d\n});\x0d\n\x0d\nconst validateRmOptionsSync = hideStackFrames((path\x2C options\x2C expectDir) => {\x0d\n  options = validateRmdirOptions(options\x2C defaultRmOptions);\x0d\n  validateBoolean(options.force\x2C 'options.force');\x0d\n\x0d\n  if (!options.force || expectDir || !options.recursive) {\x0d\n    const isDirectory = lazyLoadFs()\x0d\n      .statSync(path\x2C { throwIfNoEntry: !options.force })?.isDirectory();\x0d\n\x0d\n    if (expectDir && !isDirectory) {\x0d\n      return false;\x0d\n    }\x0d\n\x0d\n    if (isDirectory && !options.recursive) {\x0d\n      throw new ERR_FS_EISDIR({\x0d\n        code: 'EISDIR'\x2C\x0d\n        message: 'is a directory'\x2C\x0d\n        path\x2C\x0d\n        syscall: 'rm'\x2C\x0d\n        errno: EISDIR\x0d\n      });\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return options;\x0d\n});\x0d\n\x0d\nlet recursiveRmdirWarned = process.noDeprecation;\x0d\nfunction emitRecursiveRmdirWarning() {\x0d\n  if (!recursiveRmdirWarned) {\x0d\n    process.emitWarning(\x0d\n      'In future versions of Node.js\x2C fs.rmdir(path\x2C { recursive: true }) ' +\x0d\n      'will be removed. Use fs.rm(path\x2C { recursive: true }) instead'\x2C\x0d\n      'DeprecationWarning'\x2C\x0d\n      'DEP0147'\x0d\n    );\x0d\n    recursiveRmdirWarned = true;\x0d\n  }\x0d\n}\x0d\n\x0d\nconst validateRmdirOptions = hideStackFrames(\x0d\n  (options\x2C defaults = defaultRmdirOptions) => {\x0d\n    if (options === undefined)\x0d\n      return defaults;\x0d\n    validateObject(options\x2C 'options');\x0d\n\x0d\n    options = { ...defaults\x2C ...options };\x0d\n\x0d\n    validateBoolean(options.recursive\x2C 'options.recursive');\x0d\n    validateInt32(options.retryDelay\x2C 'options.retryDelay'\x2C 0);\x0d\n    validateUint32(options.maxRetries\x2C 'options.maxRetries');\x0d\n\x0d\n    return options;\x0d\n  });\x0d\n\x0d\nconst getValidMode = hideStackFrames((mode\x2C type) => {\x0d\n  let min = kMinimumAccessMode;\x0d\n  let max = kMaximumAccessMode;\x0d\n  let def = F_OK;\x0d\n  if (type === 'copyFile') {\x0d\n    min = kMinimumCopyMode;\x0d\n    max = kMaximumCopyMode;\x0d\n    def = mode || kDefaultCopyMode;\x0d\n  } else {\x0d\n    assert(type === 'access');\x0d\n  }\x0d\n  if (mode == null) {\x0d\n    return def;\x0d\n  }\x0d\n  if (NumberIsInteger(mode) && mode >= min && mode <= max) {\x0d\n    return mode;\x0d\n  }\x0d\n  if (typeof mode !== 'number') {\x0d\n    throw new ERR_INVALID_ARG_TYPE('mode'\x2C 'integer'\x2C mode);\x0d\n  }\x0d\n  throw new ERR_OUT_OF_RANGE(\x0d\n    'mode'\x2C `an integer >= ${min} && <= ${max}`\x2C mode);\x0d\n});\x0d\n\x0d\nconst validateStringAfterArrayBufferView = hideStackFrames((buffer\x2C name) => {\x0d\n  if (typeof buffer === 'string') {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  if (\x0d\n    typeof buffer === 'object' &&\x0d\n    buffer !== null &&\x0d\n    typeof buffer.toString === 'function' &&\x0d\n    ObjectPrototypeHasOwnProperty(buffer\x2C 'toString')\x0d\n  ) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  throw new ERR_INVALID_ARG_TYPE(\x0d\n    name\x2C\x0d\n    ['string'\x2C 'Buffer'\x2C 'TypedArray'\x2C 'DataView']\x2C\x0d\n    buffer\x0d\n  );\x0d\n});\x0d\n\x0d\nconst validatePosition = hideStackFrames((position\x2C name) => {\x0d\n  if (typeof position === 'number') {\x0d\n    validateInteger(position\x2C 'position');\x0d\n  } else if (typeof position === 'bigint') {\x0d\n    if (!(position >= -(2n ** 63n) && position <= 2n ** 63n - 1n)) {\x0d\n      throw new ERR_OUT_OF_RANGE('position'\x2C\x0d\n                                 `>= ${-(2n ** 63n)} && <= ${2n ** 63n - 1n}`\x2C\x0d\n                                 position);\x0d\n    }\x0d\n  } else {\x0d\n    throw new ERR_INVALID_ARG_TYPE('position'\x2C\x0d\n                                   ['integer'\x2C 'bigint']\x2C\x0d\n                                   position);\x0d\n  }\x0d\n});\x0d\n\x0d\nmodule.exports = {\x0d\n  constants: {\x0d\n    kIoMaxLength\x2C\x0d\n    kMaxUserId\x2C\x0d\n    kReadFileBufferLength\x2C\x0d\n    kReadFileUnknownBufferLength\x2C\x0d\n    kWriteFileMaxChunkSize\x2C\x0d\n  }\x2C\x0d\n  assertEncoding\x2C\x0d\n  BigIntStats\x2C  // for testing\x0d\n  copyObject\x2C\x0d\n  Dirent\x2C\x0d\n  emitRecursiveRmdirWarning\x2C\x0d\n  getDirent\x2C\x0d\n  getDirents\x2C\x0d\n  getOptions\x2C\x0d\n  getValidatedFd\x2C\x0d\n  getValidatedPath\x2C\x0d\n  getValidMode\x2C\x0d\n  handleErrorFromBinding\x2C\x0d\n  nullCheck\x2C\x0d\n  preprocessSymlinkDestination\x2C\x0d\n  realpathCacheKey: Symbol('realpathCacheKey')\x2C\x0d\n  getStatsFromBinding\x2C\x0d\n  stringToFlags\x2C\x0d\n  stringToSymlinkType\x2C\x0d\n  Stats\x2C\x0d\n  toUnixTimestamp\x2C\x0d\n  validateBufferArray\x2C\x0d\n  validateCpOptions\x2C\x0d\n  validateOffsetLengthRead\x2C\x0d\n  validateOffsetLengthWrite\x2C\x0d\n  validatePath\x2C\x0d\n  validatePosition\x2C\x0d\n  validateRmOptions\x2C\x0d\n  validateRmOptionsSync\x2C\x0d\n  validateRmdirOptions\x2C\x0d\n  validateStringAfterArrayBufferView\x2C\x0d\n  warnOnNonPortableTemplate\x0d\n};\x0d\n
code-source-info,0x5b6ec90526,81,7531,8175,C0O7562C14O7656C16O7678C17O7689C23O7729C29O7774C31O7798C35O7814C42O7850C48O7890C66O7896C71O7890C72O7986C79O7995C84O8014C87O8037C92O8014C96O8065C102O8094C107O8122C115O8094C120O8157C122O8172,,
code-creation,LazyCompile,10,396982,0x5b6ec9247e,48,assertEncoding node:internal/fs/utils:151:24,0x3096a121490,~
code-source-info,0x5b6ec9247e,81,3677,3859,C0O3693C6O3710C9O3717C14O3717C21O3761C24O3789C40O3795C45O3789C47O3858,,
code-creation,LazyCompile,10,397203,0x5b6ec92596,20,toPathIfFileURL node:internal/url:1496:25,0x3d773ff9088,~
script-source,39,node:internal/url,'use strict';\x0d\n\x0d\nconst {\x0d\n  Array\x2C\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypeMap\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeReduce\x2C\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  FunctionPrototypeBind\x2C\x0d\n  Int8Array\x2C\x0d\n  Number\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectGetOwnPropertySymbols\x2C\x0d\n  ObjectGetPrototypeOf\x2C\x0d\n  ObjectKeys\x2C\x0d\n  ReflectApply\x2C\x0d\n  ReflectGetOwnPropertyDescriptor\x2C\x0d\n  ReflectOwnKeys\x2C\x0d\n  String\x2C\x0d\n  StringPrototypeCharCodeAt\x2C\x0d\n  StringPrototypeIncludes\x2C\x0d\n  StringPrototypeReplace\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeSplit\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n  Symbol\x2C\x0d\n  SymbolIterator\x2C\x0d\n  SymbolToStringTag\x2C\x0d\n  decodeURIComponent\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { inspect } = require('internal/util/inspect');\x0d\nconst {\x0d\n  encodeStr\x2C\x0d\n  hexTable\x2C\x0d\n  isHexTable\x0d\n} = require('internal/querystring');\x0d\n\x0d\nconst {\x0d\n  getConstructorOf\x2C\x0d\n  removeColors\x2C\x0d\n  toUSVString\x2C\x0d\n} = require('internal/util');\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_ARG_NOT_ITERABLE\x2C\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_INVALID_FILE_URL_HOST\x2C\x0d\n    ERR_INVALID_FILE_URL_PATH\x2C\x0d\n    ERR_INVALID_THIS\x2C\x0d\n    ERR_INVALID_TUPLE\x2C\x0d\n    ERR_INVALID_URL\x2C\x0d\n    ERR_INVALID_URL_SCHEME\x2C\x0d\n    ERR_MISSING_ARGS\x2C\x0d\n    ERR_NO_CRYPTO\x2C\x0d\n  }\x2C\x0d\n} = require('internal/errors');\x0d\nconst {\x0d\n  CHAR_AMPERSAND\x2C\x0d\n  CHAR_BACKWARD_SLASH\x2C\x0d\n  CHAR_EQUAL\x2C\x0d\n  CHAR_FORWARD_SLASH\x2C\x0d\n  CHAR_LOWERCASE_A\x2C\x0d\n  CHAR_LOWERCASE_Z\x2C\x0d\n  CHAR_PERCENT\x2C\x0d\n  CHAR_PLUS\x0d\n} = require('internal/constants');\x0d\nconst path = require('path');\x0d\n\x0d\nconst {\x0d\n  validateCallback\x2C\x0d\n  validateObject\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst querystring = require('querystring');\x0d\n\x0d\nconst { platform } = process;\x0d\nconst isWindows = platform === 'win32';\x0d\n\x0d\nconst {\x0d\n  domainToASCII: _domainToASCII\x2C\x0d\n  domainToUnicode: _domainToUnicode\x2C\x0d\n  encodeAuth\x2C\x0d\n  parse\x2C\x0d\n  setURLConstructor\x2C\x0d\n  URL_FLAGS_CANNOT_BE_BASE\x2C\x0d\n  URL_FLAGS_HAS_FRAGMENT\x2C\x0d\n  URL_FLAGS_HAS_HOST\x2C\x0d\n  URL_FLAGS_HAS_PASSWORD\x2C\x0d\n  URL_FLAGS_HAS_PATH\x2C\x0d\n  URL_FLAGS_HAS_QUERY\x2C\x0d\n  URL_FLAGS_HAS_USERNAME\x2C\x0d\n  URL_FLAGS_IS_DEFAULT_SCHEME_PORT\x2C\x0d\n  URL_FLAGS_SPECIAL\x2C\x0d\n  kFragment\x2C\x0d\n  kHost\x2C\x0d\n  kHostname\x2C\x0d\n  kPathStart\x2C\x0d\n  kPort\x2C\x0d\n  kQuery\x2C\x0d\n  kSchemeStart\x0d\n} = internalBinding('url');\x0d\n\x0d\nconst {\x0d\n  storeDataObject\x2C\x0d\n  revokeDataObject\x2C\x0d\n} = internalBinding('blob');\x0d\n\x0d\nconst context = Symbol('context');\x0d\nconst cannotBeBase = Symbol('cannot-be-base');\x0d\nconst cannotHaveUsernamePasswordPort =\x0d\n    Symbol('cannot-have-username-password-port');\x0d\nconst special = Symbol('special');\x0d\nconst searchParams = Symbol('query');\x0d\nconst kFormat = Symbol('format');\x0d\n\x0d\nlet blob;\x0d\nlet cryptoRandom;\x0d\n\x0d\nfunction lazyBlob() {\x0d\n  blob ??= require('internal/blob');\x0d\n  return blob;\x0d\n}\x0d\n\x0d\nfunction lazyCryptoRandom() {\x0d\n  try {\x0d\n    cryptoRandom ??= require('internal/crypto/random');\x0d\n  } catch {\x0d\n    // If Node.js built without crypto support\x2C we'll fall\x0d\n    // through here and handle it later.\x0d\n  }\x0d\n  return cryptoRandom;\x0d\n}\x0d\n\x0d\n// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object\x0d\nconst IteratorPrototype = ObjectGetPrototypeOf(\x0d\n  ObjectGetPrototypeOf([][SymbolIterator]())\x0d\n);\x0d\n\x0d\n// Refs: https://html.spec.whatwg.org/multipage/browsers.html#concept-origin-opaque\x0d\nconst kOpaqueOrigin = 'null';\x0d\n\x0d\n// Refs: https://html.spec.whatwg.org/multipage/browsers.html#ascii-serialisation-of-an-origin\x0d\nfunction serializeTupleOrigin(scheme\x2C host\x2C port) {\x0d\n  return `${scheme}//${host}${port === null ? '' : `:${port}`}`;\x0d\n}\x0d\n\x0d\n// This class provides the internal state of a URL object. An instance of this\x0d\n// class is stored in every URL object and is accessed internally by setters\x0d\n// and getters. It roughly corresponds to the concept of a URL record in the\x0d\n// URL Standard\x2C with a few differences. It is also the object transported to\x0d\n// the C++ binding.\x0d\n// Refs: https://url.spec.whatwg.org/#concept-url\x0d\nclass URLContext {\x0d\n  constructor() {\x0d\n    this.flags = 0;\x0d\n    this.scheme = ':';\x0d\n    this.username = '';\x0d\n    this.password = '';\x0d\n    this.host = null;\x0d\n    this.port = null;\x0d\n    this.path = [];\x0d\n    this.query = null;\x0d\n    this.fragment = null;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction isURLSearchParams(self) {\x0d\n  return self && self[searchParams] && !self[searchParams][searchParams];\x0d\n}\x0d\n\x0d\nclass URLSearchParams {\x0d\n  // URL Standard says the default value is ''\x2C but as undefined and '' have\x0d\n  // the same result\x2C undefined is used to prevent unnecessary parsing.\x0d\n  // Default parameter is necessary to keep URLSearchParams.length === 0 in\x0d\n  // accordance with Web IDL spec.\x0d\n  constructor(init = undefined) {\x0d\n    if (init === null || init === undefined) {\x0d\n      this[searchParams] = [];\x0d\n    } else if (typeof init === 'object' || typeof init === 'function') {\x0d\n      const method = init[SymbolIterator];\x0d\n      if (method === this[SymbolIterator]) {\x0d\n        // While the spec does not have this branch\x2C we can use it as a\x0d\n        // shortcut to avoid having to go through the costly generic iterator.\x0d\n        const childParams = init[searchParams];\x0d\n        this[searchParams] = childParams.slice();\x0d\n      } else if (method !== null && method !== undefined) {\x0d\n        if (typeof method !== 'function') {\x0d\n          throw new ERR_ARG_NOT_ITERABLE('Query pairs');\x0d\n        }\x0d\n\x0d\n        // Sequence<sequence<USVString>>\x0d\n        // Note: per spec we have to first exhaust the lists then process them\x0d\n        const pairs = [];\x0d\n        for (const pair of init) {\x0d\n          if ((typeof pair !== 'object' && typeof pair !== 'function') ||\x0d\n              pair === null ||\x0d\n              typeof pair[SymbolIterator] !== 'function') {\x0d\n            throw new ERR_INVALID_TUPLE('Each query pair'\x2C '[name\x2C value]');\x0d\n          }\x0d\n          const convertedPair = [];\x0d\n          for (const element of pair)\x0d\n            ArrayPrototypePush(convertedPair\x2C toUSVString(element));\x0d\n          ArrayPrototypePush(pairs\x2C convertedPair);\x0d\n        }\x0d\n\x0d\n        this[searchParams] = [];\x0d\n        for (const pair of pairs) {\x0d\n          if (pair.length !== 2) {\x0d\n            throw new ERR_INVALID_TUPLE('Each query pair'\x2C '[name\x2C value]');\x0d\n          }\x0d\n          ArrayPrototypePush(this[searchParams]\x2C pair[0]\x2C pair[1]);\x0d\n        }\x0d\n      } else {\x0d\n        // Record<USVString\x2C USVString>\x0d\n        // Need to use reflection APIs for full spec compliance.\x0d\n        this[searchParams] = [];\x0d\n        const keys = ReflectOwnKeys(init);\x0d\n        for (let i = 0; i < keys.length; i++) {\x0d\n          const key = keys[i];\x0d\n          const desc = ReflectGetOwnPropertyDescriptor(init\x2C key);\x0d\n          if (desc !== undefined && desc.enumerable) {\x0d\n            const typedKey = toUSVString(key);\x0d\n            const typedValue = toUSVString(init[key]);\x0d\n            this[searchParams].push(typedKey\x2C typedValue);\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n    } else {\x0d\n      // USVString\x0d\n      init = toUSVString(init);\x0d\n      if (init[0] === '?') init = init.slice(1);\x0d\n      initSearchParams(this\x2C init);\x0d\n    }\x0d\n\x0d\n    // "associated url object"\x0d\n    this[context] = null;\x0d\n  }\x0d\n\x0d\n  [inspect.custom](recurseTimes\x2C ctx) {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    if (typeof recurseTimes === 'number' && recurseTimes < 0)\x0d\n      return ctx.stylize('[Object]'\x2C 'special');\x0d\n\x0d\n    const separator = '\x2C ';\x0d\n    const innerOpts = { ...ctx };\x0d\n    if (recurseTimes !== null) {\x0d\n      innerOpts.depth = recurseTimes - 1;\x0d\n    }\x0d\n    const innerInspect = (v) => inspect(v\x2C innerOpts);\x0d\n\x0d\n    const list = this[searchParams];\x0d\n    const output = [];\x0d\n    for (let i = 0; i < list.length; i += 2)\x0d\n      ArrayPrototypePush(\x0d\n        output\x2C\x0d\n        `${innerInspect(list[i])} => ${innerInspect(list[i + 1])}`);\x0d\n\x0d\n    const length = ArrayPrototypeReduce(\x0d\n      output\x2C\x0d\n      (prev\x2C cur) => prev + removeColors(cur).length + separator.length\x2C\x0d\n      -separator.length\x0d\n    );\x0d\n    if (length > ctx.breakLength) {\x0d\n      return `${this.constructor.name} {\\n` +\x0d\n      `  ${ArrayPrototypeJoin(output\x2C '\x2C\\n  ')} }`;\x0d\n    } else if (output.length) {\x0d\n      return `${this.constructor.name} { ` +\x0d\n      `${ArrayPrototypeJoin(output\x2C separator)} }`;\x0d\n    }\x0d\n    return `${this.constructor.name} {}`;\x0d\n  }\x0d\n\x0d\n  append(name\x2C value) {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    if (arguments.length < 2) {\x0d\n      throw new ERR_MISSING_ARGS('name'\x2C 'value');\x0d\n    }\x0d\n\x0d\n    name = toUSVString(name);\x0d\n    value = toUSVString(value);\x0d\n    ArrayPrototypePush(this[searchParams]\x2C name\x2C value);\x0d\n    update(this[context]\x2C this);\x0d\n  }\x0d\n\x0d\n  delete(name) {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    if (arguments.length < 1) {\x0d\n      throw new ERR_MISSING_ARGS('name');\x0d\n    }\x0d\n\x0d\n    const list = this[searchParams];\x0d\n    name = toUSVString(name);\x0d\n    for (let i = 0; i < list.length;) {\x0d\n      const cur = list[i];\x0d\n      if (cur === name) {\x0d\n        list.splice(i\x2C 2);\x0d\n      } else {\x0d\n        i += 2;\x0d\n      }\x0d\n    }\x0d\n    update(this[context]\x2C this);\x0d\n  }\x0d\n\x0d\n  get(name) {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    if (arguments.length < 1) {\x0d\n      throw new ERR_MISSING_ARGS('name');\x0d\n    }\x0d\n\x0d\n    const list = this[searchParams];\x0d\n    name = toUSVString(name);\x0d\n    for (let i = 0; i < list.length; i += 2) {\x0d\n      if (list[i] === name) {\x0d\n        return list[i + 1];\x0d\n      }\x0d\n    }\x0d\n    return null;\x0d\n  }\x0d\n\x0d\n  getAll(name) {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    if (arguments.length < 1) {\x0d\n      throw new ERR_MISSING_ARGS('name');\x0d\n    }\x0d\n\x0d\n    const list = this[searchParams];\x0d\n    const values = [];\x0d\n    name = toUSVString(name);\x0d\n    for (let i = 0; i < list.length; i += 2) {\x0d\n      if (list[i] === name) {\x0d\n        values.push(list[i + 1]);\x0d\n      }\x0d\n    }\x0d\n    return values;\x0d\n  }\x0d\n\x0d\n  has(name) {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    if (arguments.length < 1) {\x0d\n      throw new ERR_MISSING_ARGS('name');\x0d\n    }\x0d\n\x0d\n    const list = this[searchParams];\x0d\n    name = toUSVString(name);\x0d\n    for (let i = 0; i < list.length; i += 2) {\x0d\n      if (list[i] === name) {\x0d\n        return true;\x0d\n      }\x0d\n    }\x0d\n    return false;\x0d\n  }\x0d\n\x0d\n  set(name\x2C value) {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    if (arguments.length < 2) {\x0d\n      throw new ERR_MISSING_ARGS('name'\x2C 'value');\x0d\n    }\x0d\n\x0d\n    const list = this[searchParams];\x0d\n    name = toUSVString(name);\x0d\n    value = toUSVString(value);\x0d\n\x0d\n    // If there are any name-value pairs whose name is `name`\x2C in `list`\x2C set\x0d\n    // the value of the first such name-value pair to `value` and remove the\x0d\n    // others.\x0d\n    let found = false;\x0d\n    for (let i = 0; i < list.length;) {\x0d\n      const cur = list[i];\x0d\n      if (cur === name) {\x0d\n        if (!found) {\x0d\n          list[i + 1] = value;\x0d\n          found = true;\x0d\n          i += 2;\x0d\n        } else {\x0d\n          list.splice(i\x2C 2);\x0d\n        }\x0d\n      } else {\x0d\n        i += 2;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    // Otherwise\x2C append a new name-value pair whose name is `name` and value\x0d\n    // is `value`\x2C to `list`.\x0d\n    if (!found) {\x0d\n      ArrayPrototypePush(list\x2C name\x2C value);\x0d\n    }\x0d\n\x0d\n    update(this[context]\x2C this);\x0d\n  }\x0d\n\x0d\n  sort() {\x0d\n    const a = this[searchParams];\x0d\n    const len = a.length;\x0d\n\x0d\n    if (len <= 2) {\x0d\n      // Nothing needs to be done.\x0d\n    } else if (len < 100) {\x0d\n      // 100 is found through testing.\x0d\n      // Simple stable in-place insertion sort\x0d\n      // Derived from v8/src/js/array.js\x0d\n      for (let i = 2; i < len; i += 2) {\x0d\n        const curKey = a[i];\x0d\n        const curVal = a[i + 1];\x0d\n        let j;\x0d\n        for (j = i - 2; j >= 0; j -= 2) {\x0d\n          if (a[j] > curKey) {\x0d\n            a[j + 2] = a[j];\x0d\n            a[j + 3] = a[j + 1];\x0d\n          } else {\x0d\n            break;\x0d\n          }\x0d\n        }\x0d\n        a[j + 2] = curKey;\x0d\n        a[j + 3] = curVal;\x0d\n      }\x0d\n    } else {\x0d\n      // Bottom-up iterative stable merge sort\x0d\n      const lBuffer = new Array(len);\x0d\n      const rBuffer = new Array(len);\x0d\n      for (let step = 2; step < len; step *= 2) {\x0d\n        for (let start = 0; start < len - 2; start += 2 * step) {\x0d\n          const mid = start + step;\x0d\n          let end = mid + step;\x0d\n          end = end < len ? end : len;\x0d\n          if (mid > end)\x0d\n            continue;\x0d\n          merge(a\x2C start\x2C mid\x2C end\x2C lBuffer\x2C rBuffer);\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n\x0d\n    update(this[context]\x2C this);\x0d\n  }\x0d\n\x0d\n  // https://heycam.github.io/webidl/#es-iterators\x0d\n  // Define entries here rather than [Symbol.iterator] as the function name\x0d\n  // must be set to `entries`.\x0d\n  entries() {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    return createSearchParamsIterator(this\x2C 'key+value');\x0d\n  }\x0d\n\x0d\n  forEach(callback\x2C thisArg = undefined) {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    validateCallback(callback);\x0d\n\x0d\n    let list = this[searchParams];\x0d\n\x0d\n    let i = 0;\x0d\n    while (i < list.length) {\x0d\n      const key = list[i];\x0d\n      const value = list[i + 1];\x0d\n      callback.call(thisArg\x2C value\x2C key\x2C this);\x0d\n      // In case the URL object's `search` is updated\x0d\n      list = this[searchParams];\x0d\n      i += 2;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // https://heycam.github.io/webidl/#es-iterable\x0d\n  keys() {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    return createSearchParamsIterator(this\x2C 'key');\x0d\n  }\x0d\n\x0d\n  values() {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    return createSearchParamsIterator(this\x2C 'value');\x0d\n  }\x0d\n\x0d\n  // https://heycam.github.io/webidl/#es-stringifier\x0d\n  // https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior\x0d\n  toString() {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    return serializeParams(this[searchParams]);\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectDefineProperties(URLSearchParams.prototype\x2C {\x0d\n  append: { enumerable: true }\x2C\x0d\n  delete: { enumerable: true }\x2C\x0d\n  get: { enumerable: true }\x2C\x0d\n  getAll: { enumerable: true }\x2C\x0d\n  has: { enumerable: true }\x2C\x0d\n  set: { enumerable: true }\x2C\x0d\n  sort: { enumerable: true }\x2C\x0d\n  entries: { enumerable: true }\x2C\x0d\n  forEach: { enumerable: true }\x2C\x0d\n  keys: { enumerable: true }\x2C\x0d\n  values: { enumerable: true }\x2C\x0d\n  toString: { enumerable: true }\x2C\x0d\n  [SymbolToStringTag]: { configurable: true\x2C value: 'URLSearchParams' }\x2C\x0d\n\x0d\n  // https://heycam.github.io/webidl/#es-iterable-entries\x0d\n  [SymbolIterator]: {\x0d\n    configurable: true\x2C\x0d\n    writable: true\x2C\x0d\n    value: URLSearchParams.prototype.entries\x2C\x0d\n  }\x2C\x0d\n});\x0d\n\x0d\nfunction onParseComplete(flags\x2C protocol\x2C username\x2C password\x2C\x0d\n                         host\x2C port\x2C path\x2C query\x2C fragment) {\x0d\n  const ctx = this[context];\x0d\n  ctx.flags = flags;\x0d\n  ctx.scheme = protocol;\x0d\n  ctx.username = (flags & URL_FLAGS_HAS_USERNAME) !== 0 ? username : '';\x0d\n  ctx.password = (flags & URL_FLAGS_HAS_PASSWORD) !== 0 ? password : '';\x0d\n  ctx.port = port;\x0d\n  ctx.path = (flags & URL_FLAGS_HAS_PATH) !== 0 ? path : [];\x0d\n  ctx.query = query;\x0d\n  ctx.fragment = fragment;\x0d\n  ctx.host = host;\x0d\n  if (!this[searchParams]) { // Invoked from URL constructor\x0d\n    this[searchParams] = new URLSearchParams();\x0d\n    this[searchParams][context] = this;\x0d\n  }\x0d\n  initSearchParams(this[searchParams]\x2C query);\x0d\n}\x0d\n\x0d\nfunction onParseError(flags\x2C input) {\x0d\n  throw new ERR_INVALID_URL(input);\x0d\n}\x0d\n\x0d\nfunction onParseProtocolComplete(flags\x2C protocol\x2C username\x2C password\x2C\x0d\n                                 host\x2C port\x2C path\x2C query\x2C fragment) {\x0d\n  const ctx = this[context];\x0d\n  if ((flags & URL_FLAGS_SPECIAL) !== 0) {\x0d\n    ctx.flags |= URL_FLAGS_SPECIAL;\x0d\n  } else {\x0d\n    ctx.flags &= ~URL_FLAGS_SPECIAL;\x0d\n  }\x0d\n  ctx.scheme = protocol;\x0d\n  ctx.port = port;\x0d\n}\x0d\n\x0d\nfunction onParseHostnameComplete(flags\x2C protocol\x2C username\x2C password\x2C\x0d\n                                 host\x2C port\x2C path\x2C query\x2C fragment) {\x0d\n  const ctx = this[context];\x0d\n  if ((flags & URL_FLAGS_HAS_HOST) !== 0) {\x0d\n    ctx.host = host;\x0d\n    ctx.flags |= URL_FLAGS_HAS_HOST;\x0d\n  } else {\x0d\n    ctx.host = null;\x0d\n    ctx.flags &= ~URL_FLAGS_HAS_HOST;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction onParsePortComplete(flags\x2C protocol\x2C username\x2C password\x2C\x0d\n                             host\x2C port\x2C path\x2C query\x2C fragment) {\x0d\n  this[context].port = port;\x0d\n}\x0d\n\x0d\nfunction onParseHostComplete(flags\x2C protocol\x2C username\x2C password\x2C\x0d\n                             host\x2C port\x2C path\x2C query\x2C fragment) {\x0d\n  ReflectApply(onParseHostnameComplete\x2C this\x2C arguments);\x0d\n  if (port !== null || ((flags & URL_FLAGS_IS_DEFAULT_SCHEME_PORT) !== 0))\x0d\n    ReflectApply(onParsePortComplete\x2C this\x2C arguments);\x0d\n}\x0d\n\x0d\nfunction onParsePathComplete(flags\x2C protocol\x2C username\x2C password\x2C\x0d\n                             host\x2C port\x2C path\x2C query\x2C fragment) {\x0d\n  const ctx = this[context];\x0d\n  if ((flags & URL_FLAGS_HAS_PATH) !== 0) {\x0d\n    ctx.path = path;\x0d\n    ctx.flags |= URL_FLAGS_HAS_PATH;\x0d\n  } else {\x0d\n    ctx.path = [];\x0d\n    ctx.flags &= ~URL_FLAGS_HAS_PATH;\x0d\n  }\x0d\n\x0d\n  // The C++ binding may set host to empty string.\x0d\n  if ((flags & URL_FLAGS_HAS_HOST) !== 0) {\x0d\n    ctx.host = host;\x0d\n    ctx.flags |= URL_FLAGS_HAS_HOST;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction onParseSearchComplete(flags\x2C protocol\x2C username\x2C password\x2C\x0d\n                               host\x2C port\x2C path\x2C query\x2C fragment) {\x0d\n  this[context].query = query;\x0d\n}\x0d\n\x0d\nfunction onParseHashComplete(flags\x2C protocol\x2C username\x2C password\x2C\x0d\n                             host\x2C port\x2C path\x2C query\x2C fragment) {\x0d\n  this[context].fragment = fragment;\x0d\n}\x0d\n\x0d\nclass URL {\x0d\n  constructor(input\x2C base = undefined) {\x0d\n    // toUSVString is not needed.\x0d\n    input = `${input}`;\x0d\n    let base_context;\x0d\n    if (base !== undefined) {\x0d\n      base_context = new URL(base)[context];\x0d\n    }\x0d\n    this[context] = new URLContext();\x0d\n    parse(input\x2C -1\x2C base_context\x2C undefined\x2C\x0d\n          FunctionPrototypeBind(onParseComplete\x2C this)\x2C onParseError);\x0d\n  }\x0d\n\x0d\n  get [special]() {\x0d\n    return (this[context].flags & URL_FLAGS_SPECIAL) !== 0;\x0d\n  }\x0d\n\x0d\n  get [cannotBeBase]() {\x0d\n    return (this[context].flags & URL_FLAGS_CANNOT_BE_BASE) !== 0;\x0d\n  }\x0d\n\x0d\n  // https://url.spec.whatwg.org/#cannot-have-a-username-password-port\x0d\n  get [cannotHaveUsernamePasswordPort]() {\x0d\n    const { host\x2C scheme } = this[context];\x0d\n    return ((host == null || host === '') ||\x0d\n            this[cannotBeBase] ||\x0d\n            scheme === 'file:');\x0d\n  }\x0d\n\x0d\n  [inspect.custom](depth\x2C opts) {\x0d\n    if (this == null ||\x0d\n        ObjectGetPrototypeOf(this[context]) !== URLContext.prototype) {\x0d\n      throw new ERR_INVALID_THIS('URL');\x0d\n    }\x0d\n\x0d\n    if (typeof depth === 'number' && depth < 0)\x0d\n      return this;\x0d\n\x0d\n    const constructor = getConstructorOf(this) || URL;\x0d\n    const obj = ObjectCreate({ constructor });\x0d\n\x0d\n    obj.href = this.href;\x0d\n    obj.origin = this.origin;\x0d\n    obj.protocol = this.protocol;\x0d\n    obj.username = this.username;\x0d\n    obj.password = this.password;\x0d\n    obj.host = this.host;\x0d\n    obj.hostname = this.hostname;\x0d\n    obj.port = this.port;\x0d\n    obj.pathname = this.pathname;\x0d\n    obj.search = this.search;\x0d\n    obj.searchParams = this.searchParams;\x0d\n    obj.hash = this.hash;\x0d\n\x0d\n    if (opts.showHidden) {\x0d\n      obj.cannotBeBase = this[cannotBeBase];\x0d\n      obj.special = this[special];\x0d\n      obj[context] = this[context];\x0d\n    }\x0d\n\x0d\n    return `${constructor.name} ${inspect(obj\x2C opts)}`;\x0d\n  }\x0d\n\x0d\n  [kFormat](options) {\x0d\n    if (options)\x0d\n      validateObject(options\x2C 'options');\x0d\n\x0d\n    options = {\x0d\n      fragment: true\x2C\x0d\n      unicode: false\x2C\x0d\n      search: true\x2C\x0d\n      auth: true\x2C\x0d\n      ...options\x0d\n    };\x0d\n    const ctx = this[context];\x0d\n    // https://url.spec.whatwg.org/#url-serializing\x0d\n    let ret = ctx.scheme;\x0d\n    if (ctx.host !== null) {\x0d\n      ret += '//';\x0d\n      const has_username = ctx.username !== '';\x0d\n      const has_password = ctx.password !== '';\x0d\n      if (options.auth && (has_username || has_password)) {\x0d\n        if (has_username)\x0d\n          ret += ctx.username;\x0d\n        if (has_password)\x0d\n          ret += `:${ctx.password}`;\x0d\n        ret += '@';\x0d\n      }\x0d\n      ret += options.unicode ?\x0d\n        domainToUnicode(ctx.host) : ctx.host;\x0d\n      if (ctx.port !== null)\x0d\n        ret += `:${ctx.port}`;\x0d\n    }\x0d\n    if (this[cannotBeBase]) {\x0d\n      ret += ctx.path[0];\x0d\n    } else {\x0d\n      if (ctx.host === null && ctx.path.length > 1 && ctx.path[0] === '') {\x0d\n        ret += '/.';\x0d\n      }\x0d\n      if (ctx.path.length) {\x0d\n        ret += '/' + ArrayPrototypeJoin(ctx.path\x2C '/');\x0d\n      }\x0d\n    }\x0d\n    if (options.search && ctx.query !== null)\x0d\n      ret += `?${ctx.query}`;\x0d\n    if (options.fragment && ctx.fragment !== null)\x0d\n      ret += `#${ctx.fragment}`;\x0d\n    return ret;\x0d\n  }\x0d\n\x0d\n  // https://heycam.github.io/webidl/#es-stringifier\x0d\n  toString() {\x0d\n    return this[kFormat]({});\x0d\n  }\x0d\n\x0d\n  get href() {\x0d\n    return this[kFormat]({});\x0d\n  }\x0d\n\x0d\n  set href(input) {\x0d\n    // toUSVString is not needed.\x0d\n    input = `${input}`;\x0d\n    parse(input\x2C -1\x2C undefined\x2C undefined\x2C\x0d\n          FunctionPrototypeBind(onParseComplete\x2C this)\x2C onParseError);\x0d\n  }\x0d\n\x0d\n  // readonly\x0d\n  get origin() {\x0d\n    // Refs: https://url.spec.whatwg.org/#concept-url-origin\x0d\n    const ctx = this[context];\x0d\n    switch (ctx.scheme) {\x0d\n      case 'blob:':\x0d\n        if (ctx.path.length > 0) {\x0d\n          try {\x0d\n            return (new URL(ctx.path[0])).origin;\x0d\n          } catch {\x0d\n            // Fall through... do nothing\x0d\n          }\x0d\n        }\x0d\n        return kOpaqueOrigin;\x0d\n      case 'ftp:':\x0d\n      case 'http:':\x0d\n      case 'https:':\x0d\n      case 'ws:':\x0d\n      case 'wss:':\x0d\n        return serializeTupleOrigin(ctx.scheme\x2C ctx.host\x2C ctx.port);\x0d\n    }\x0d\n    return kOpaqueOrigin;\x0d\n  }\x0d\n\x0d\n  get protocol() {\x0d\n    return this[context].scheme;\x0d\n  }\x0d\n\x0d\n  set protocol(scheme) {\x0d\n    // toUSVString is not needed.\x0d\n    scheme = `${scheme}`;\x0d\n    if (scheme.length === 0)\x0d\n      return;\x0d\n    const ctx = this[context];\x0d\n    parse(scheme\x2C kSchemeStart\x2C null\x2C ctx\x2C\x0d\n          FunctionPrototypeBind(onParseProtocolComplete\x2C this));\x0d\n  }\x0d\n\x0d\n  get username() {\x0d\n    return this[context].username;\x0d\n  }\x0d\n\x0d\n  set username(username) {\x0d\n    // toUSVString is not needed.\x0d\n    username = `${username}`;\x0d\n    if (this[cannotHaveUsernamePasswordPort])\x0d\n      return;\x0d\n    const ctx = this[context];\x0d\n    if (username === '') {\x0d\n      ctx.username = '';\x0d\n      ctx.flags &= ~URL_FLAGS_HAS_USERNAME;\x0d\n      return;\x0d\n    }\x0d\n    ctx.username = encodeAuth(username);\x0d\n    ctx.flags |= URL_FLAGS_HAS_USERNAME;\x0d\n  }\x0d\n\x0d\n  get password() {\x0d\n    return this[context].password;\x0d\n  }\x0d\n\x0d\n  set password(password) {\x0d\n    // toUSVString is not needed.\x0d\n    password = `${password}`;\x0d\n    if (this[cannotHaveUsernamePasswordPort])\x0d\n      return;\x0d\n    const ctx = this[context];\x0d\n    if (password === '') {\x0d\n      ctx.password = '';\x0d\n      ctx.flags &= ~URL_FLAGS_HAS_PASSWORD;\x0d\n      return;\x0d\n    }\x0d\n    ctx.password = encodeAuth(password);\x0d\n    ctx.flags |= URL_FLAGS_HAS_PASSWORD;\x0d\n  }\x0d\n\x0d\n  get host() {\x0d\n    const ctx = this[context];\x0d\n    let ret = ctx.host || '';\x0d\n    if (ctx.port !== null)\x0d\n      ret += `:${ctx.port}`;\x0d\n    return ret;\x0d\n  }\x0d\n\x0d\n  set host(host) {\x0d\n    const ctx = this[context];\x0d\n    // toUSVString is not needed.\x0d\n    host = `${host}`;\x0d\n    if (this[cannotBeBase]) {\x0d\n      // Cannot set the host if cannot-be-base is set\x0d\n      return;\x0d\n    }\x0d\n    parse(host\x2C kHost\x2C null\x2C ctx\x2C\x0d\n          FunctionPrototypeBind(onParseHostComplete\x2C this));\x0d\n  }\x0d\n\x0d\n  get hostname() {\x0d\n    return this[context].host || '';\x0d\n  }\x0d\n\x0d\n  set hostname(host) {\x0d\n    const ctx = this[context];\x0d\n    // toUSVString is not needed.\x0d\n    host = `${host}`;\x0d\n    if (this[cannotBeBase]) {\x0d\n      // Cannot set the host if cannot-be-base is set\x0d\n      return;\x0d\n    }\x0d\n    parse(host\x2C kHostname\x2C null\x2C ctx\x2C onParseHostnameComplete.bind(this));\x0d\n  }\x0d\n\x0d\n  get port() {\x0d\n    const port = this[context].port;\x0d\n    return port === null ? '' : String(port);\x0d\n  }\x0d\n\x0d\n  set port(port) {\x0d\n    // toUSVString is not needed.\x0d\n    port = `${port}`;\x0d\n    if (this[cannotHaveUsernamePasswordPort])\x0d\n      return;\x0d\n    const ctx = this[context];\x0d\n    if (port === '') {\x0d\n      ctx.port = null;\x0d\n      return;\x0d\n    }\x0d\n    parse(port\x2C kPort\x2C null\x2C ctx\x2C\x0d\n          FunctionPrototypeBind(onParsePortComplete\x2C this));\x0d\n  }\x0d\n\x0d\n  get pathname() {\x0d\n    const ctx = this[context];\x0d\n    if (this[cannotBeBase])\x0d\n      return ctx.path[0];\x0d\n    if (ctx.path.length === 0)\x0d\n      return '';\x0d\n    return `/${ArrayPrototypeJoin(ctx.path\x2C '/')}`;\x0d\n  }\x0d\n\x0d\n  set pathname(path) {\x0d\n    // toUSVString is not needed.\x0d\n    path = `${path}`;\x0d\n    if (this[cannotBeBase])\x0d\n      return;\x0d\n    parse(path\x2C kPathStart\x2C null\x2C this[context]\x2C\x0d\n          onParsePathComplete.bind(this));\x0d\n  }\x0d\n\x0d\n  get search() {\x0d\n    const { query } = this[context];\x0d\n    if (query === null || query === '')\x0d\n      return '';\x0d\n    return `?${query}`;\x0d\n  }\x0d\n\x0d\n  set search(search) {\x0d\n    const ctx = this[context];\x0d\n    search = toUSVString(search);\x0d\n    if (search === '') {\x0d\n      ctx.query = null;\x0d\n      ctx.flags &= ~URL_FLAGS_HAS_QUERY;\x0d\n    } else {\x0d\n      if (search[0] === '?') search = StringPrototypeSlice(search\x2C 1);\x0d\n      ctx.query = '';\x0d\n      ctx.flags |= URL_FLAGS_HAS_QUERY;\x0d\n      if (search) {\x0d\n        parse(search\x2C kQuery\x2C null\x2C ctx\x2C\x0d\n              FunctionPrototypeBind(onParseSearchComplete\x2C this));\x0d\n      }\x0d\n    }\x0d\n    initSearchParams(this[searchParams]\x2C search);\x0d\n  }\x0d\n\x0d\n  // readonly\x0d\n  get searchParams() {\x0d\n    return this[searchParams];\x0d\n  }\x0d\n\x0d\n  get hash() {\x0d\n    const { fragment } = this[context];\x0d\n    if (fragment === null || fragment === '')\x0d\n      return '';\x0d\n    return `#${fragment}`;\x0d\n  }\x0d\n\x0d\n  set hash(hash) {\x0d\n    const ctx = this[context];\x0d\n    // toUSVString is not needed.\x0d\n    hash = `${hash}`;\x0d\n    if (!hash) {\x0d\n      ctx.fragment = null;\x0d\n      ctx.flags &= ~URL_FLAGS_HAS_FRAGMENT;\x0d\n      return;\x0d\n    }\x0d\n    if (hash[0] === '#') hash = StringPrototypeSlice(hash\x2C 1);\x0d\n    ctx.fragment = '';\x0d\n    ctx.flags |= URL_FLAGS_HAS_FRAGMENT;\x0d\n    parse(hash\x2C kFragment\x2C null\x2C ctx\x2C\x0d\n          FunctionPrototypeBind(onParseHashComplete\x2C this));\x0d\n  }\x0d\n\x0d\n  toJSON() {\x0d\n    return this[kFormat]({});\x0d\n  }\x0d\n\x0d\n  static createObjectURL(obj) {\x0d\n    const cryptoRandom = lazyCryptoRandom();\x0d\n    if (cryptoRandom === undefined)\x0d\n      throw new ERR_NO_CRYPTO();\x0d\n\x0d\n    // Yes\x2C lazy loading is annoying but because of circular\x0d\n    // references between the url\x2C internal/blob\x2C and buffer\x0d\n    // modules\x2C lazy loading here makes sure that things work.\x0d\n    const blob = lazyBlob();\x0d\n    if (!blob.isBlob(obj))\x0d\n      throw new ERR_INVALID_ARG_TYPE('obj'\x2C 'Blob'\x2C obj);\x0d\n\x0d\n    const id = cryptoRandom.randomUUID();\x0d\n\x0d\n    storeDataObject(id\x2C obj[blob.kHandle]\x2C obj.size\x2C obj.type);\x0d\n\x0d\n    return `blob:nodedata:${id}`;\x0d\n  }\x0d\n\x0d\n  static revokeObjectURL(url) {\x0d\n    url = `${url}`;\x0d\n    try {\x0d\n      const parsed = new URL(url);\x0d\n      const split = StringPrototypeSplit(parsed.pathname\x2C ':');\x0d\n      if (split.length === 2)\x0d\n        revokeDataObject(split[1]);\x0d\n    } catch {\x0d\n      // If there's an error\x2C it's ignored.\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectDefineProperties(URL.prototype\x2C {\x0d\n  [kFormat]: { configurable: false\x2C writable: false }\x2C\x0d\n  [SymbolToStringTag]: { configurable: true\x2C value: 'URL' }\x2C\x0d\n  toString: { enumerable: true }\x2C\x0d\n  href: { enumerable: true }\x2C\x0d\n  origin: { enumerable: true }\x2C\x0d\n  protocol: { enumerable: true }\x2C\x0d\n  username: { enumerable: true }\x2C\x0d\n  password: { enumerable: true }\x2C\x0d\n  host: { enumerable: true }\x2C\x0d\n  hostname: { enumerable: true }\x2C\x0d\n  port: { enumerable: true }\x2C\x0d\n  pathname: { enumerable: true }\x2C\x0d\n  search: { enumerable: true }\x2C\x0d\n  searchParams: { enumerable: true }\x2C\x0d\n  hash: { enumerable: true }\x2C\x0d\n  toJSON: { enumerable: true }\x2C\x0d\n});\x0d\n\x0d\nfunction update(url\x2C params) {\x0d\n  if (!url)\x0d\n    return;\x0d\n\x0d\n  const ctx = url[context];\x0d\n  const serializedParams = params.toString();\x0d\n  if (serializedParams) {\x0d\n    ctx.query = serializedParams;\x0d\n    ctx.flags |= URL_FLAGS_HAS_QUERY;\x0d\n  } else {\x0d\n    ctx.query = null;\x0d\n    ctx.flags &= ~URL_FLAGS_HAS_QUERY;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction initSearchParams(url\x2C init) {\x0d\n  if (!init) {\x0d\n    url[searchParams] = [];\x0d\n    return;\x0d\n  }\x0d\n  url[searchParams] = parseParams(init);\x0d\n}\x0d\n\x0d\n// application/x-www-form-urlencoded parser\x0d\n// Ref: https://url.spec.whatwg.org/#concept-urlencoded-parser\x0d\nfunction parseParams(qs) {\x0d\n  const out = [];\x0d\n  let pairStart = 0;\x0d\n  let lastPos = 0;\x0d\n  let seenSep = false;\x0d\n  let buf = '';\x0d\n  let encoded = false;\x0d\n  let encodeCheck = 0;\x0d\n  let i;\x0d\n  for (i = 0; i < qs.length; ++i) {\x0d\n    const code = StringPrototypeCharCodeAt(qs\x2C i);\x0d\n\x0d\n    // Try matching key/value pair separator\x0d\n    if (code === CHAR_AMPERSAND) {\x0d\n      if (pairStart === i) {\x0d\n        // We saw an empty substring between pair separators\x0d\n        lastPos = pairStart = i + 1;\x0d\n        continue;\x0d\n      }\x0d\n\x0d\n      if (lastPos < i)\x0d\n        buf += qs.slice(lastPos\x2C i);\x0d\n      if (encoded)\x0d\n        buf = querystring.unescape(buf);\x0d\n      out.push(buf);\x0d\n\x0d\n      // If `buf` is the key\x2C add an empty value.\x0d\n      if (!seenSep)\x0d\n        out.push('');\x0d\n\x0d\n      seenSep = false;\x0d\n      buf = '';\x0d\n      encoded = false;\x0d\n      encodeCheck = 0;\x0d\n      lastPos = pairStart = i + 1;\x0d\n      continue;\x0d\n    }\x0d\n\x0d\n    // Try matching key/value separator (e.g. '=') if we haven't already\x0d\n    if (!seenSep && code === CHAR_EQUAL) {\x0d\n      // Key/value separator match!\x0d\n      if (lastPos < i)\x0d\n        buf += qs.slice(lastPos\x2C i);\x0d\n      if (encoded)\x0d\n        buf = querystring.unescape(buf);\x0d\n      out.push(buf);\x0d\n\x0d\n      seenSep = true;\x0d\n      buf = '';\x0d\n      encoded = false;\x0d\n      encodeCheck = 0;\x0d\n      lastPos = i + 1;\x0d\n      continue;\x0d\n    }\x0d\n\x0d\n    // Handle + and percent decoding.\x0d\n    if (code === CHAR_PLUS) {\x0d\n      if (lastPos < i)\x0d\n        buf += StringPrototypeSlice(qs\x2C lastPos\x2C i);\x0d\n      buf += ' ';\x0d\n      lastPos = i + 1;\x0d\n    } else if (!encoded) {\x0d\n      // Try to match an (valid) encoded byte (once) to minimize unnecessary\x0d\n      // calls to string decoding functions\x0d\n      if (code === CHAR_PERCENT) {\x0d\n        encodeCheck = 1;\x0d\n      } else if (encodeCheck > 0) {\x0d\n        if (isHexTable[code] === 1) {\x0d\n          if (++encodeCheck === 3) {\x0d\n            encoded = true;\x0d\n          }\x0d\n        } else {\x0d\n          encodeCheck = 0;\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // Deal with any leftover key or value data\x0d\n\x0d\n  // There is a trailing &. No more processing is needed.\x0d\n  if (pairStart === i)\x0d\n    return out;\x0d\n\x0d\n  if (lastPos < i)\x0d\n    buf += StringPrototypeSlice(qs\x2C lastPos\x2C i);\x0d\n  if (encoded)\x0d\n    buf = querystring.unescape(buf);\x0d\n  ArrayPrototypePush(out\x2C buf);\x0d\n\x0d\n  // If `buf` is the key\x2C add an empty value.\x0d\n  if (!seenSep)\x0d\n    ArrayPrototypePush(out\x2C '');\x0d\n\x0d\n  return out;\x0d\n}\x0d\n\x0d\n// Adapted from querystring's implementation.\x0d\n// Ref: https://url.spec.whatwg.org/#concept-urlencoded-byte-serializer\x0d\nconst noEscape = new Int8Array([\x0d\n/*\x0d\n  0\x2C 1\x2C 2\x2C 3\x2C 4\x2C 5\x2C 6\x2C 7\x2C 8\x2C 9\x2C A\x2C B\x2C C\x2C D\x2C E\x2C F\x0d\n*/\x0d\n  0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C // 0x00 - 0x0F\x0d\n  0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C // 0x10 - 0x1F\x0d\n  0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 1\x2C 0\x2C 0\x2C 1\x2C 1\x2C 0\x2C // 0x20 - 0x2F\x0d\n  1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C // 0x30 - 0x3F\x0d\n  0\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C // 0x40 - 0x4F\x0d\n  1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 0\x2C 0\x2C 0\x2C 0\x2C 1\x2C // 0x50 - 0x5F\x0d\n  0\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C // 0x60 - 0x6F\x0d\n  1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C  // 0x70 - 0x7F\x0d\n]);\x0d\n\x0d\n// Special version of hexTable that uses `+` for U+0020 SPACE.\x0d\nconst paramHexTable = hexTable.slice();\x0d\nparamHexTable[0x20] = '+';\x0d\n\x0d\n// application/x-www-form-urlencoded serializer\x0d\n// Ref: https://url.spec.whatwg.org/#concept-urlencoded-serializer\x0d\nfunction serializeParams(array) {\x0d\n  const len = array.length;\x0d\n  if (len === 0)\x0d\n    return '';\x0d\n\x0d\n  const firstEncodedParam = encodeStr(array[0]\x2C noEscape\x2C paramHexTable);\x0d\n  const firstEncodedValue = encodeStr(array[1]\x2C noEscape\x2C paramHexTable);\x0d\n  let output = `${firstEncodedParam}=${firstEncodedValue}`;\x0d\n\x0d\n  for (let i = 2; i < len; i += 2) {\x0d\n    const encodedParam = encodeStr(array[i]\x2C noEscape\x2C paramHexTable);\x0d\n    const encodedValue = encodeStr(array[i + 1]\x2C noEscape\x2C paramHexTable);\x0d\n    output += `&${encodedParam}=${encodedValue}`;\x0d\n  }\x0d\n\x0d\n  return output;\x0d\n}\x0d\n\x0d\n// Mainly to mitigate func-name-matching ESLint rule\x0d\nfunction defineIDLClass(proto\x2C classStr\x2C obj) {\x0d\n  // https://heycam.github.io/webidl/#dfn-class-string\x0d\n  ObjectDefineProperty(proto\x2C SymbolToStringTag\x2C {\x0d\n    writable: false\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: true\x2C\x0d\n    value: classStr\x0d\n  });\x0d\n\x0d\n  // https://heycam.github.io/webidl/#es-operations\x0d\n  for (const key of ObjectKeys(obj)) {\x0d\n    ObjectDefineProperty(proto\x2C key\x2C {\x0d\n      writable: true\x2C\x0d\n      enumerable: true\x2C\x0d\n      configurable: true\x2C\x0d\n      value: obj[key]\x0d\n    });\x0d\n  }\x0d\n  for (const key of ObjectGetOwnPropertySymbols(obj)) {\x0d\n    ObjectDefineProperty(proto\x2C key\x2C {\x0d\n      writable: true\x2C\x0d\n      enumerable: false\x2C\x0d\n      configurable: true\x2C\x0d\n      value: obj[key]\x0d\n    });\x0d\n  }\x0d\n}\x0d\n\x0d\n// for merge sort\x0d\nfunction merge(out\x2C start\x2C mid\x2C end\x2C lBuffer\x2C rBuffer) {\x0d\n  const sizeLeft = mid - start;\x0d\n  const sizeRight = end - mid;\x0d\n  let l\x2C r\x2C o;\x0d\n\x0d\n  for (l = 0; l < sizeLeft; l++)\x0d\n    lBuffer[l] = out[start + l];\x0d\n  for (r = 0; r < sizeRight; r++)\x0d\n    rBuffer[r] = out[mid + r];\x0d\n\x0d\n  l = 0;\x0d\n  r = 0;\x0d\n  o = start;\x0d\n  while (l < sizeLeft && r < sizeRight) {\x0d\n    if (lBuffer[l] <= rBuffer[r]) {\x0d\n      out[o++] = lBuffer[l++];\x0d\n      out[o++] = lBuffer[l++];\x0d\n    } else {\x0d\n      out[o++] = rBuffer[r++];\x0d\n      out[o++] = rBuffer[r++];\x0d\n    }\x0d\n  }\x0d\n  while (l < sizeLeft)\x0d\n    out[o++] = lBuffer[l++];\x0d\n  while (r < sizeRight)\x0d\n    out[o++] = rBuffer[r++];\x0d\n}\x0d\n\x0d\n// https://heycam.github.io/webidl/#dfn-default-iterator-object\x0d\nfunction createSearchParamsIterator(target\x2C kind) {\x0d\n  const iterator = ObjectCreate(URLSearchParamsIteratorPrototype);\x0d\n  iterator[context] = {\x0d\n    target\x2C\x0d\n    kind\x2C\x0d\n    index: 0\x0d\n  };\x0d\n  return iterator;\x0d\n}\x0d\n\x0d\n// https://heycam.github.io/webidl/#dfn-iterator-prototype-object\x0d\nconst URLSearchParamsIteratorPrototype = ObjectCreate(IteratorPrototype);\x0d\n\x0d\ndefineIDLClass(URLSearchParamsIteratorPrototype\x2C 'URLSearchParams Iterator'\x2C {\x0d\n  next() {\x0d\n    if (!this ||\x0d\n        ObjectGetPrototypeOf(this) !== URLSearchParamsIteratorPrototype) {\x0d\n      throw new ERR_INVALID_THIS('URLSearchParamsIterator');\x0d\n    }\x0d\n\x0d\n    const {\x0d\n      target\x2C\x0d\n      kind\x2C\x0d\n      index\x0d\n    } = this[context];\x0d\n    const values = target[searchParams];\x0d\n    const len = values.length;\x0d\n    if (index >= len) {\x0d\n      return {\x0d\n        value: undefined\x2C\x0d\n        done: true\x0d\n      };\x0d\n    }\x0d\n\x0d\n    const name = values[index];\x0d\n    const value = values[index + 1];\x0d\n    this[context].index = index + 2;\x0d\n\x0d\n    let result;\x0d\n    if (kind === 'key') {\x0d\n      result = name;\x0d\n    } else if (kind === 'value') {\x0d\n      result = value;\x0d\n    } else {\x0d\n      result = [name\x2C value];\x0d\n    }\x0d\n\x0d\n    return {\x0d\n      value: result\x2C\x0d\n      done: false\x0d\n    };\x0d\n  }\x2C\x0d\n  [inspect.custom](recurseTimes\x2C ctx) {\x0d\n    if (this == null || this[context] == null || this[context].target == null)\x0d\n      throw new ERR_INVALID_THIS('URLSearchParamsIterator');\x0d\n\x0d\n    if (typeof recurseTimes === 'number' && recurseTimes < 0)\x0d\n      return ctx.stylize('[Object]'\x2C 'special');\x0d\n\x0d\n    const innerOpts = { ...ctx };\x0d\n    if (recurseTimes !== null) {\x0d\n      innerOpts.depth = recurseTimes - 1;\x0d\n    }\x0d\n    const {\x0d\n      target\x2C\x0d\n      kind\x2C\x0d\n      index\x0d\n    } = this[context];\x0d\n    const output = ArrayPrototypeReduce(\x0d\n      ArrayPrototypeSlice(target[searchParams]\x2C index)\x2C\x0d\n      (prev\x2C cur\x2C i) => {\x0d\n        const key = i % 2 === 0;\x0d\n        if (kind === 'key' && key) {\x0d\n          ArrayPrototypePush(prev\x2C cur);\x0d\n        } else if (kind === 'value' && !key) {\x0d\n          ArrayPrototypePush(prev\x2C cur);\x0d\n        } else if (kind === 'key+value' && !key) {\x0d\n          ArrayPrototypePush(prev\x2C [target[searchParams][index + i - 1]\x2C cur]);\x0d\n        }\x0d\n        return prev;\x0d\n      }\x2C\x0d\n      []\x0d\n    );\x0d\n    const breakLn = inspect(output\x2C innerOpts).includes('\\n');\x0d\n    const outputStrs = ArrayPrototypeMap(output\x2C (p) => inspect(p\x2C innerOpts));\x0d\n    let outputStr;\x0d\n    if (breakLn) {\x0d\n      outputStr = `\\n  ${ArrayPrototypeJoin(outputStrs\x2C '\x2C\\n  ')}`;\x0d\n    } else {\x0d\n      outputStr = ` ${ArrayPrototypeJoin(outputStrs\x2C '\x2C ')}`;\x0d\n    }\x0d\n    return `${this[SymbolToStringTag]} {${outputStr} }`;\x0d\n  }\x0d\n});\x0d\n\x0d\nfunction domainToASCII(domain) {\x0d\n  if (arguments.length < 1)\x0d\n    throw new ERR_MISSING_ARGS('domain');\x0d\n\x0d\n  // toUSVString is not needed.\x0d\n  return _domainToASCII(`${domain}`);\x0d\n}\x0d\n\x0d\nfunction domainToUnicode(domain) {\x0d\n  if (arguments.length < 1)\x0d\n    throw new ERR_MISSING_ARGS('domain');\x0d\n\x0d\n  // toUSVString is not needed.\x0d\n  return _domainToUnicode(`${domain}`);\x0d\n}\x0d\n\x0d\n// Utility function that converts a URL object into an ordinary\x0d\n// options object as expected by the http.request and https.request\x0d\n// APIs.\x0d\nfunction urlToHttpOptions(url) {\x0d\n  const options = {\x0d\n    protocol: url.protocol\x2C\x0d\n    hostname: typeof url.hostname === 'string' &&\x0d\n              StringPrototypeStartsWith(url.hostname\x2C '[') ?\x0d\n      StringPrototypeSlice(url.hostname\x2C 1\x2C -1) :\x0d\n      url.hostname\x2C\x0d\n    hash: url.hash\x2C\x0d\n    search: url.search\x2C\x0d\n    pathname: url.pathname\x2C\x0d\n    path: `${url.pathname || ''}${url.search || ''}`\x2C\x0d\n    href: url.href\x0d\n  };\x0d\n  if (url.port !== '') {\x0d\n    options.port = Number(url.port);\x0d\n  }\x0d\n  if (url.username || url.password) {\x0d\n    options.auth = `${decodeURIComponent(url.username)}:${decodeURIComponent(url.password)}`;\x0d\n  }\x0d\n  return options;\x0d\n}\x0d\n\x0d\nconst forwardSlashRegEx = /\\//g;\x0d\n\x0d\nfunction getPathFromURLWin32(url) {\x0d\n  const hostname = url.hostname;\x0d\n  let pathname = url.pathname;\x0d\n  for (let n = 0; n < pathname.length; n++) {\x0d\n    if (pathname[n] === '%') {\x0d\n      const third = pathname.codePointAt(n + 2) | 0x20;\x0d\n      if ((pathname[n + 1] === '2' && third === 102) || // 2f 2F /\x0d\n          (pathname[n + 1] === '5' && third === 99)) {  // 5c 5C \\\x0d\n        throw new ERR_INVALID_FILE_URL_PATH(\x0d\n          'must not include encoded \\\\ or / characters'\x0d\n        );\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n  pathname = pathname.replace(forwardSlashRegEx\x2C '\\\\');\x0d\n  pathname = decodeURIComponent(pathname);\x0d\n  if (hostname !== '') {\x0d\n    // If hostname is set\x2C then we have a UNC path\x0d\n    // Pass the hostname through domainToUnicode just in case\x0d\n    // it is an IDN using punycode encoding. We do not need to worry\x0d\n    // about percent encoding because the URL parser will have\x0d\n    // already taken care of that for us. Note that this only\x0d\n    // causes IDNs with an appropriate `xn--` prefix to be decoded.\x0d\n    return `\\\\\\\\${domainToUnicode(hostname)}${pathname}`;\x0d\n  }\x0d\n  // Otherwise\x2C it's a local path that requires a drive letter\x0d\n  const letter = pathname.codePointAt(1) | 0x20;\x0d\n  const sep = pathname[2];\x0d\n  if (letter < CHAR_LOWERCASE_A || letter > CHAR_LOWERCASE_Z ||   // a..z A..Z\x0d\n      (sep !== ':')) {\x0d\n    throw new ERR_INVALID_FILE_URL_PATH('must be absolute');\x0d\n  }\x0d\n  return pathname.slice(1);\x0d\n}\x0d\n\x0d\nfunction getPathFromURLPosix(url) {\x0d\n  if (url.hostname !== '') {\x0d\n    throw new ERR_INVALID_FILE_URL_HOST(platform);\x0d\n  }\x0d\n  const pathname = url.pathname;\x0d\n  for (let n = 0; n < pathname.length; n++) {\x0d\n    if (pathname[n] === '%') {\x0d\n      const third = pathname.codePointAt(n + 2) | 0x20;\x0d\n      if (pathname[n + 1] === '2' && third === 102) {\x0d\n        throw new ERR_INVALID_FILE_URL_PATH(\x0d\n          'must not include encoded / characters'\x0d\n        );\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n  return decodeURIComponent(pathname);\x0d\n}\x0d\n\x0d\nfunction fileURLToPath(path) {\x0d\n  if (typeof path === 'string')\x0d\n    path = new URL(path);\x0d\n  else if (!isURLInstance(path))\x0d\n    throw new ERR_INVALID_ARG_TYPE('path'\x2C ['string'\x2C 'URL']\x2C path);\x0d\n  if (path.protocol !== 'file:')\x0d\n    throw new ERR_INVALID_URL_SCHEME('file');\x0d\n  return isWindows ? getPathFromURLWin32(path) : getPathFromURLPosix(path);\x0d\n}\x0d\n\x0d\n// The following characters are percent-encoded when converting from file path\x0d\n// to URL:\x0d\n// - %: The percent character is the only character not encoded by the\x0d\n//        `pathname` setter.\x0d\n// - \\: Backslash is encoded on non-windows platforms since it's a valid\x0d\n//      character but the `pathname` setters replaces it by a forward slash.\x0d\n// - LF: The newline character is stripped out by the `pathname` setter.\x0d\n//       (See whatwg/url#419)\x0d\n// - CR: The carriage return character is also stripped out by the `pathname`\x0d\n//       setter.\x0d\n// - TAB: The tab character is also stripped out by the `pathname` setter.\x0d\nconst percentRegEx = /%/g;\x0d\nconst backslashRegEx = /\\\\/g;\x0d\nconst newlineRegEx = /\\n/g;\x0d\nconst carriageReturnRegEx = /\\r/g;\x0d\nconst tabRegEx = /\\t/g;\x0d\n\x0d\nfunction encodePathChars(filepath) {\x0d\n  if (StringPrototypeIncludes(filepath\x2C '%'))\x0d\n    filepath = StringPrototypeReplace(filepath\x2C percentRegEx\x2C '%25');\x0d\n  // In posix\x2C backslash is a valid character in paths:\x0d\n  if (!isWindows && StringPrototypeIncludes(filepath\x2C '\\\\'))\x0d\n    filepath = StringPrototypeReplace(filepath\x2C backslashRegEx\x2C '%5C');\x0d\n  if (StringPrototypeIncludes(filepath\x2C '\\n'))\x0d\n    filepath = StringPrototypeReplace(filepath\x2C newlineRegEx\x2C '%0A');\x0d\n  if (StringPrototypeIncludes(filepath\x2C '\\r'))\x0d\n    filepath = StringPrototypeReplace(filepath\x2C carriageReturnRegEx\x2C '%0D');\x0d\n  if (StringPrototypeIncludes(filepath\x2C '\\t'))\x0d\n    filepath = StringPrototypeReplace(filepath\x2C tabRegEx\x2C '%09');\x0d\n  return filepath;\x0d\n}\x0d\n\x0d\nfunction pathToFileURL(filepath) {\x0d\n  const outURL = new URL('file://');\x0d\n  if (isWindows && StringPrototypeStartsWith(filepath\x2C '\\\\\\\\')) {\x0d\n    // UNC path format: \\\\server\\share\\resource\x0d\n    const paths = StringPrototypeSplit(filepath\x2C '\\\\');\x0d\n    if (paths.length <= 3) {\x0d\n      throw new ERR_INVALID_ARG_VALUE(\x0d\n        'filepath'\x2C\x0d\n        filepath\x2C\x0d\n        'Missing UNC resource path'\x0d\n      );\x0d\n    }\x0d\n    const hostname = paths[2];\x0d\n    if (hostname.length === 0) {\x0d\n      throw new ERR_INVALID_ARG_VALUE(\x0d\n        'filepath'\x2C\x0d\n        filepath\x2C\x0d\n        'Empty UNC servername'\x0d\n      );\x0d\n    }\x0d\n    outURL.hostname = domainToASCII(hostname);\x0d\n    outURL.pathname = encodePathChars(\x0d\n      ArrayPrototypeJoin(ArrayPrototypeSlice(paths\x2C 3)\x2C '/'));\x0d\n  } else {\x0d\n    let resolved = path.resolve(filepath);\x0d\n    // path.resolve strips trailing slashes so we must add them back\x0d\n    const filePathLast = StringPrototypeCharCodeAt(filepath\x2C\x0d\n                                                   filepath.length - 1);\x0d\n    if ((filePathLast === CHAR_FORWARD_SLASH ||\x0d\n         (isWindows && filePathLast === CHAR_BACKWARD_SLASH)) &&\x0d\n        resolved[resolved.length - 1] !== path.sep)\x0d\n      resolved += '/';\x0d\n    outURL.pathname = encodePathChars(resolved);\x0d\n  }\x0d\n  return outURL;\x0d\n}\x0d\n\x0d\nfunction isURLInstance(fileURLOrPath) {\x0d\n  return fileURLOrPath != null && fileURLOrPath.href && fileURLOrPath.origin;\x0d\n}\x0d\n\x0d\nfunction toPathIfFileURL(fileURLOrPath) {\x0d\n  if (!isURLInstance(fileURLOrPath))\x0d\n    return fileURLOrPath;\x0d\n  return fileURLToPath(fileURLOrPath);\x0d\n}\x0d\n\x0d\nfunction constructUrl(flags\x2C protocol\x2C username\x2C password\x2C\x0d\n                      host\x2C port\x2C path\x2C query\x2C fragment) {\x0d\n  const ctx = new URLContext();\x0d\n  ctx.flags = flags;\x0d\n  ctx.scheme = protocol;\x0d\n  ctx.username = (flags & URL_FLAGS_HAS_USERNAME) !== 0 ? username : '';\x0d\n  ctx.password = (flags & URL_FLAGS_HAS_PASSWORD) !== 0 ? password : '';\x0d\n  ctx.port = port;\x0d\n  ctx.path = (flags & URL_FLAGS_HAS_PATH) !== 0 ? path : [];\x0d\n  ctx.query = query;\x0d\n  ctx.fragment = fragment;\x0d\n  ctx.host = host;\x0d\n\x0d\n  const url = ObjectCreate(URL.prototype);\x0d\n  url[context] = ctx;\x0d\n  const params = new URLSearchParams();\x0d\n  url[searchParams] = params;\x0d\n  params[context] = url;\x0d\n  initSearchParams(params\x2C query);\x0d\n  return url;\x0d\n}\x0d\nsetURLConstructor(constructUrl);\x0d\n\x0d\nmodule.exports = {\x0d\n  toUSVString\x2C\x0d\n  fileURLToPath\x2C\x0d\n  pathToFileURL\x2C\x0d\n  toPathIfFileURL\x2C\x0d\n  isURLInstance\x2C\x0d\n  URL\x2C\x0d\n  URLSearchParams\x2C\x0d\n  domainToASCII\x2C\x0d\n  domainToUnicode\x2C\x0d\n  urlToHttpOptions\x2C\x0d\n  formatSymbol: kFormat\x2C\x0d\n  searchParamsSymbol: searchParams\x2C\x0d\n  encodeStr\x0d\n};\x0d\n
code-source-info,0x5b6ec92596,39,42956,43081,C0O42977C3O42982C9O43017C11O43038C12O43042C15O43049C19O43078,,
code-creation,LazyCompile,10,400918,0x5b6ec956c6,17,isURLInstance node:internal/url:1492:23,0x3d773ff9038,~
code-source-info,0x5b6ec956c6,39,42829,42928,C0O42850C3O42871C6O42896C12O42918C16O42925,,
code-creation,LazyCompile,10,401028,0x5b6ec95826,81, node:internal/fs/utils:668:38,0x3096a1224b0,~
code-source-info,0x5b6ec95826,81,18830,19110,C14O18864C22O18897C25O18897C31O18924C36O18955C49O18930C54O18924C55O19023C68O19023C74O19062C76O19092C78O19092C80O19109,,
code-creation,LazyCompile,10,401166,0x5b6ec95a36,110, node:internal/fs/utils:357:35,0x3096a121b28,~
code-source-info,0x5b6ec95a36,81,8925,9534,C16O8990C21O9044C26O9044C31O9141C37O9164C41O9193C45O9210C51O9210C60O9262C64O9283C69O9283C76O9329C77O9336C78O9359C94O9359C100O9478C104O9501C106O9501C107O9520C109O9531,,
code-creation,LazyCompile,10,401268,0x5b6ec95bae,16,isUint8Array node:internal/util/types:13:22,0x423ed47088,~
script-source,17,node:internal/util/types,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayBufferIsView\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  TypedArrayPrototypeGetSymbolToStringTag\x2C\x0d\n} = primordials;\x0d\n\x0d\nfunction isTypedArray(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) !== undefined;\x0d\n}\x0d\n\x0d\nfunction isUint8Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Uint8Array';\x0d\n}\x0d\n\x0d\nfunction isUint8ClampedArray(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Uint8ClampedArray';\x0d\n}\x0d\n\x0d\nfunction isUint16Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Uint16Array';\x0d\n}\x0d\n\x0d\nfunction isUint32Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Uint32Array';\x0d\n}\x0d\n\x0d\nfunction isInt8Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Int8Array';\x0d\n}\x0d\n\x0d\nfunction isInt16Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Int16Array';\x0d\n}\x0d\n\x0d\nfunction isInt32Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Int32Array';\x0d\n}\x0d\n\x0d\nfunction isFloat32Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Float32Array';\x0d\n}\x0d\n\x0d\nfunction isFloat64Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Float64Array';\x0d\n}\x0d\n\x0d\nfunction isBigInt64Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'BigInt64Array';\x0d\n}\x0d\n\x0d\nfunction isBigUint64Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'BigUint64Array';\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  ...internalBinding('types')\x2C\x0d\n  isArrayBufferView: ArrayBufferIsView\x2C\x0d\n  isTypedArray\x2C\x0d\n  isUint8Array\x2C\x0d\n  isUint8ClampedArray\x2C\x0d\n  isUint16Array\x2C\x0d\n  isUint32Array\x2C\x0d\n  isInt8Array\x2C\x0d\n  isInt16Array\x2C\x0d\n  isInt32Array\x2C\x0d\n  isFloat32Array\x2C\x0d\n  isFloat64Array\x2C\x0d\n  isBigInt64Array\x2C\x0d\n  isBigUint64Array\x0d\n};\x0d\n\x0d\nlet isCryptoKey;\x0d\nlet isKeyObject;\x0d\n\x0d\nObjectDefineProperties(module.exports\x2C {\x0d\n  isKeyObject: {\x0d\n    configurable: false\x2C\x0d\n    enumerable: true\x2C\x0d\n    value(obj) {\x0d\n      if (!process.versions.openssl) {\x0d\n        return false;\x0d\n      }\x0d\n\x0d\n      if (!isKeyObject) {\x0d\n        ({ isKeyObject } = require('internal/crypto/keys'));\x0d\n      }\x0d\n\x0d\n      return isKeyObject(obj);\x0d\n    }\x0d\n  }\x2C\x0d\n  isCryptoKey: {\x0d\n    configurable: false\x2C\x0d\n    enumerable: true\x2C\x0d\n    value(obj) {\x0d\n      if (!process.versions.openssl) {\x0d\n        return false;\x0d\n      }\x0d\n\x0d\n      if (!isCryptoKey) {\x0d\n        ({ isCryptoKey } = require('internal/crypto/keys'));\x0d\n      }\x0d\n\x0d\n      return isCryptoKey(obj);\x0d\n    }\x0d\n  }\x0d\n});\x0d\n
code-source-info,0x5b6ec95bae,17,269,356,C0O282C5O289C12O336C15O353,,
code-creation,LazyCompile,10,401582,0x5b6ec96056,23,splitRoot node:fs:2362:33,0x3096a1191d8,~
code-source-info,0x5b6ec96056,80,65151,65217,C0O65164C9O65191C12O65171C19O65208C22O65212,,
code-creation,LazyCompile,10,401958,0x5b6ec9627e,63,handleErrorFromBinding node:internal/fs/utils:340:32,0x3096a121ad8,~
code-source-info,0x5b6ec9627e,81,8269,8780,C0O8288C6O8352C11O8352C16O8375C24O8375C29O8433C31O8433C32O8460C38O8692C43O8719C51O8692C56O8766C60O8756C62O8779,,
code-creation,LazyCompile,10,402080,0x5b6ec963f6,53,nextPart node:fs:2388:31,0x3096a1192d0,~
code-source-info,0x5b6ec963f6,80,65908,66159,C0O65935C4O65931C9O65968C14O65968C20O66052C22O66063C24O66059C31O66093C33O66089C38O66122C40O66131C41O65945C47O65922C50O66144C52O66154,,
code-creation,LazyCompile,10,402389,0x5b6ec965ce,34,isFileType node:fs:205:20,0x3096a116f40,~
code-source-info,0x5b6ec965ce,80,5489,5737,C0O5626C2O5631C6O5639C10O5674C15O5681C20O5698C22O5713C24O5711C30O5721C33O5734,,
code-creation,LazyCompile,10,402846,0x5b6ec9677e,72,encodeRealpathResult node:fs:2375:30,0x3096a119280,~
code-source-info,0x5b6ec9677e,80,65497,65763,C0O65520C4O65545C10O65565C17O65574C22O65591C24O65605C25O65626C30O65633C35O65633C41O65662C48O65671C53O65692C55O65708C56O65733C61O65750C66O65733C71O65760,,
code-creation,LazyCompile,10,403013,0x5b6ec9692e,109,shouldUseESMLoader node:internal/modules/run_main:30:28,0x5b6ec87ad0,~
code-source-info,0x5b6ec9692e,128,870,1445,C0O905C8O905C13O949C15O970C16O982C17O1027C25O1027C30O1085C32O1117C37O1134C38O1146C39O1196C45O1212C51O1212C58O1260C59O1272C60O1276C66O1293C72O1293C79O1341C80O1354C81O1370C86O1370C91O1401C93O1419C98O1424C105O1429C108O1442,,
tick,0x7ff723f7059b,403164,0,0x0,3,0x7ff7245a4800,0x5b6ec8895f,0x3979d3bef69
code-creation,LazyCompile,10,403255,0x5b6ec96b4e,129,readPackageScope node:internal/modules/cjs/loader:321:26,0x39aa28576f0,~
code-source-info,0x5b6ec96b4e,111,9239,9772,C0O9283C7O9317C10O9283C16O9330C18O9359C25O9414C28O9376C34O9425C47O9437C54O9494C61O9533C66O9537C70O9498C77O9563C78O9576C79O9596C84O9620C86O9618C90O9596C95O9631C97O9642C104O9664C110O9684C116O9702C117O9730C119O9730C124O9349C127O9756C128O9769,,
code-creation,LazyCompile,10,403451,0x5b6ec96eae,234,readPackage node:internal/modules/cjs/loader:290:21,0x39aa28576a0,~
code-source-info,0x5b6ec96eae,111,8391,9210,C0O8427C5O8432C13O8432C20O8492C25O8509C30O8509C36O8527C38O8555C40O8571C41O8592C46O8610C51O8610C57O8649C63O8662C72O8688C77O8699C79O8730C84O8747C91O8747C97O8774C98O8787C102O8824C107O8824C112O8863C117O8885C125O8911C133O8940C141O8972C149O9001C160O9019C165O9036C170O9036C176O9066C178O9082C190O9105C195O9112C199O9129C207O9158C213O9169C220O9180C224O9176C227O9139C231O9194C233O9194,,
code-creation,LazyCompile,10,403633,0x5b6ec971b6,199,read node:internal/modules/package_json_reader:16:14,0x39aa285d260,~
code-source-info,0x5b6ec971b6,112,307,992,C0O323C5O333C10O333C17O355C22O368C27O368C32O382C33O432C40O461C43O461C48O432C53O404C59O415C66O512C73O514C79O522C86O568C92O568C97O549C102O600C106O633C112O670C115O681C127O732C132O766C142O679C148O805C154O853C159O853C164O885C169O894C174O894C180O943C185O949C190O949C196O975C198O989,,
code-creation,LazyCompile,10,404262,0x5b6ec97e16,70,runMainESM node:internal/modules/run_main:47:20,0x5b6ec87b20,~
code-source-info,0x5b6ec97e16,128,1468,1817,C0O1468C12O1504C20O1504C25O1492C30O1573C38O1573C43O1555C49O1603C54O1621C59O1621C64O1603C69O1816,,
code-creation,LazyCompile,10,404438,0x5b6ec98056,222,loadESM node:internal/process/esm_loader:85:41,0x39aa285dd78,~
code-source-info,0x5b6ec98056,113,2652,2979,C10O2652C21O2679C24O2685C35O2679C58O2710C60O2725C63O2716C75O2710C113O2761C120O2765C125O2813C130O2821C138O2821C143O2850C154O2857C155O2870C163O2870C168O2895C178O2896C197O2978,,
code-creation,LazyCompile,10,404611,0x5b6ec98676,284,initializeLoader node:internal/process/esm_loader:50:32,0x39aa285dc48,~
code-source-info,0x5b6ec98676,113,1490,2608,C10O1490C18O1525C24O1525C29O1506C34O1690C37O1690C42O1755C48O1763C59O1770C60O1812C66O1812C71O1784C76O1841C79O1841C83O1900C88O1919C91O1933C96O1933C103O1939C110O1923C111O1964C114O2229C119O2229C125O2371C132O2404C135O2404C140O2422C147O2434C152O2434C163O2377C176O2347C202O2563C207O2579C212O2579C225O2563C259O2607,,
code-creation,LazyCompile,10,404778,0x5b6ec98966,175,handleMainPromise node:internal/modules/run_main:58:33,0x5b6ec87b70,~
code-source-info,0x5b6ec98966,128,1853,2010,C10O1853C18O1868C21O1876C31O1887C34O1876C43O1921C53O1928C90O1963C93O1971C103O1983C106O1971C150O2009,,
code-creation,LazyCompile,10,405026,0x5b6ec98ba6,318,processTicksAndRejections node:internal/process/task_queues:68:35,0x3d773fda9a0,~
code-source-info,0x5b6ec98ba
code-creation,LazyCompile,10,405203,0x5b6ec98e7e,43,shift node:internal/fixed_queue:108:8,0x3d773fdfcc0,~
code-source-info,0x5b6ec98e7e,34,4061,4295,C0O4089C5O4118C10O4118C15O4141C20O4141C26O4159C32O4260C36O4253C40O4278C42O4290,,
code-creation,LazyCompile,10,405307,0x5b6ec98fc6,54,shift node:internal/fixed_queue:80:8,0x3d773fdfad0,~
code-source-info,0x5b6ec98fc6,34,3379,3596,C0O3411C5O3421C9O3415C13O3435C15O3470C16O3482C17O3493C22O3503C28O3511C32O3549C36O3556C42O3563C44O3561C47O3541C51O3575C53O3591,,
code-creation,LazyCompile,10,405432,0x5b6ec990fe,42,emitBeforeScript node:internal/async_hooks:510:26,0x13fcdd38760,~
code-source-info,0x5b6ec990fe,13,17372,17528,C0O17413C12O17413C17O17471C22O17484C25O17475C31O17499C36O17499C41O17527,,
code-creation,LazyCompile,10,405575,0x5b6ec9924e,180,pushAsyncContext node:internal/async_hooks:540:26,0x13fcdd38908,~
code-source-info,0x5b6ec9924e,13,18046,18601,C0O18102C7O18120C9O18119C13O18138C20O18172C24O18187C26O18198C32O18205C35O18216C40O18232C44O18202C49O18245C54O18252C59O18295C60O18299C65O18310C72O18333C78O18340C83O18356C85O18355C88O18338C92O18379C97O18390C104O18413C107O18417C113O18424C118O18440C120O18439C123O18422C127O18461C134O18479C142O18492C146O18499C153O18515C158O18534C162O18548C169O18564C174O18581C179O18600,,
code-creation,LazyCompile,10,405754,0x5b6ec99466,125, node:internal/child_process:708:22,0x39aa284b408,~
code-source-info,0x5b6ec99466,100,20124,20501,C0O20139C3O20151C12O20170C20O20170C27O20205C28O20212C29O20239C32O20246C41O20254C43O20253C47O20288C52O20316C54O20329C55O20336C56O20359C58O20364C60O20364C65O20390C75O20410C85O20432C89O20390C94O20375C99O20346C102O20456C105O20463C114O20471C119O20489C124O20500,,
code-creation,LazyCompile,10,405885,0x5b6ec99626,31,listenerCount node:events:858:23,0x423ed6bc80,~
code-source-info,0x5b6ec99626,23,25642,25924,C0O25674C5O25688C7O25740C9O25746C13O25761C17O25808C19O25817C20O25830C24O25887C28O25894C29O25912C30O25921,,
code-creation,LazyCompile,10,405969,0x5b6ec9972e,13,destroyHooksExist node:internal/async_hooks:487:27,0x13fcdd38670,~
code-source-info,0x5b6ec9972e,13,16798,16835,C0O16806C5O16822C8O16813C12O16832,,
code-creation,LazyCompile,10,406047,0x5b6ec9981e,32,emitAfterScript node:internal/async_hooks:518:25,0x13fcdd387b0,~
code-source-info,0x5b6ec9981e,13,17558,17659,C0O17573C5O17586C8O17577C14O17600C19O17600C23O17631C26O17631C31O17658,,
code-creation,LazyCompile,10,406165,0x5b6ec99986,167,popAsyncContext node:internal/async_hooks:554:25,0x13fcdd38958,~
code-source-info,0x5b6ec99986,13,18694,19296,C0O18729C7O18747C9O18746C13O18765C14O18781C19O18788C20O18801C21O18807C24O18811C31O18834C36O18850C38O18849C44O18869C49O18953C54O18960C58O18986C59O19012C61O19024C65O19032C72O19048C77O19069C80O19080C87O19098C90O19095C93O19067C97O19112C104O19128C109O19147C112O19158C119O19176C122O19185C125O19173C128O19145C132O19194C137O19220C142O19220C146O19230C153O19248C158O19262C162O19275C163O19289C166O19293,,
code-creation,LazyCompile,10,406289,0x5b6ec99b66,13,enabledHooksExist node:internal/async_hooks:475:27,0x13fcdd38560,~
code-source-info,0x5b6ec99b66,13,16609,16644,C0O16617C5O16633C8O16624C12O16641,,
code-creation,LazyCompile,10,406423,0x5b6ec99cbe,77, node:internal/modules/run_main:51:29,0x5b6ec97d50,~
code-source-info,0x5b6ec99cbe,128,1629,1811,C0O1664C7O1669C15O1669C24O1699C30O1699C35O1722C44O1762C55O1786C60O1786C71O1768C76O1806,,
code-creation,LazyCompile,10,406599,0x5b6ec99f3e,283,pathToFileURL node:internal/url:1455:23,0x3d773ff8fc8,~
code-source-info,0x5b6ec99f3e
code-creation,LazyCompile,10,406787,0x5b6ec9a20e,117,URL node:internal/url:620:14,0x3d773ff7de0,~
code-source-info,0x5b6ec9a20e,39,17608,17965,C13O17676C17O17705C19O17724C23O17757C30O17772C40O17786C42O17785C46O17808C50O17813C57O17828C60O17824C65O17822C69O17847C85O17900C93O17900C110O17847C116O17964,,
code-creation,LazyCompile,10,406898,0x5b6ec9a3de,51,URLContext node:internal/url:160:14,0x3d773ff7580,~
code-source-info,0x5b6ec9a3de,39,3859,4081,C0O3869C1O3880C5O3890C7O3902C11O3914C13O3928C17O3939C19O3953C23O3964C24O3974C28O3987C29O3997C33O4010C35O4020C39O4031C40O4042C44O4055C45O4069C50O4080,,
code-creation,LazyCompile,10,407086,0x5b6ec9a626,190,onParseComplete node:internal/url:532:25,0x3d773ff7b10,~
code-source-info,0x5b6ec9a626,39,14726,15412,C0O14842C2O14847C4O14846C8O14860C10O14870C14O14882C16O14893C20O14908C22O14932C24O14930C29O14956C43O14921C47O14982C49O15006C51O15004C56O15030C70O14995C74O15056C76O15065C80O15076C82O15096C84O15094C89O15116C101O15124C103O15085C107O15138C109O15148C113O15160C115O15173C119O15188C121O15197C125O15208C127O15218C129O15217C134O15272C136O15277C141O15297C144O15293C149O15291C153O15321C155O15326C157O15325C163O15340C168O15349C172O15365C177O15387C179O15386C183O15365C189O15411,,
code-creation,LazyCompile,10,407468,0x5b6ec9aaae,889,URLSearchParams node:internal/url:182:14,0x3d773ff7620,~
code-source-info,0x5b6ec9aaae
code-creation,LazyCompile,10,407727,0x5b6ec9b08e,35,initSearchParams node:internal/url:1016:26,0x3d773ff8b28,~
code-source-info,0x5b6ec9b08e,39,28064,28185,C0O28081C4O28099C6O28103C11O28117C15O28128C16O28135C17O28144C19O28148C25O28164C29O28162C34O28184,,
code-creation,Function,11,408002,0x20b1dd455c0,6232,resolve node:path:158:10,0x14570b4d510,^
code-source-info,0x20b1dd455c0,41,4875,9786,,,
code-creation,Function,11,408069,0x20b1dd46e80,412,isWindowsDeviceRoot node:path:60:29,0x14570b4d408,^
code-source-info,0x20b1dd46e80,41,1991,2136,,,
code-creation,Function,11,408141,0x20b1dd47080,272,validateString node:internal/validators:118:24,0x13fcdd3c958,^
code-source-info,0x20b1dd47080,15,3534,3646,,,
code-creation,Function,11,408197,0x20b1dd47200,544,nextPart node:fs:2388:31,0x3096a1192d0,^
code-source-info,0x20b1dd47200,80,65908,66159,,,
code-creation,Function,11,408243,0x20b1dd47480,152,hasHooks node:internal/async_hooks:471:18,0x13fcdd38510,^
code-source-info,0x20b1dd47480,13,16531,16579,,,
code-creation,LazyCompile,10,408372,0x5b6ec9b9e6,199,encodePathChars node:internal/url:1440:25,0x3d773ff8f78,~
code-source-info,0x5b6ec9b9e6,39,40808,41513,C0O40824C8O40828C15O40873C22O40917C31O40884C38O40999C46O41017C52O41017C59O41063C66O41107C75O41074C82O41134C90O41138C97O41184C104O41228C113O41195C120O41253C128O41257C135O41303C142O41347C151O41314C158O41379C166O41383C173O41429C180O41473C189O41440C196O41494C198O41510,,
code-creation,LazyCompile,10,408513,0x5b6ec9bc16,70,set pathname node:internal/url:884:15,0x3d773ff8718,~
code-source-info,0x5b6ec9bc16,39,24508,24717,C0O24557C5O24580C9O24589C11O24588C16O24611C17O24618C18O24624C29O24636C38O24659C40O24658C49O24700C54O24700C63O24624C69O24716,,
code-creation,LazyCompile,10,408606,0x5b6ec9bd66,31, node:internal/url:636:21,0x3d773ff7eb8,~
code-source-info,0x5b6ec9bd66,39,18078,18155,C0O18088C4O18101C6O18100C10O18110C19O18118C21O18116C26O18144C30O18150,,
code-creation,LazyCompile,10,408746,0x5b6ec9be96,108,onParsePathComplete node:internal/url:591:29,0x3d773ff7cf0,~
code-source-info,0x5b6ec9be96,39,16744,17226,C0O16864C2O16869C4O16868C8O16882C10O16895C12O16893C17O16915C22O16929C24O16938C28O16951C35O16964C40O16961C46O17001C48O17010C52O17021C59O17035C61O17034C66O17031C70O17117C72O17130C74O17128C79O17150C84O17164C86O17173C90O17186C97O17199C102O17196C107O17225,,
code-creation,LazyCompile,10,408864,0x5b6ec9c036,18,get href node:internal/url:734:11,0x3d773ff8048,~
code-source-info,0x5b6ec9c036,39,20841,20881,C0O20851C4O20863C6O20862C12O20871C17O20876,,
code-creation,LazyCompile,10,409060,0x5b6ec9c306,393, node:internal/url:682:12,0x3d773ff7fa8,~
code-source-info,0x5b6ec9c
code-creation,LazyCompile,10,409254,0x5b6ec9c6b6,99, node:internal/validators:154:3,0x13fcdd3cb08,~
code-source-info,0x5b6ec9c6b6,15,4537,5108,C0O4596C4O4637C9O4673C14O4712C21O4748C26O4785C33O4821C38O4836C46O4884C50O4898C53O4898C67O4975C75O5042C91O5048C96O5042C98O5107,,
code-creation,LazyCompile,10,409447,0x5b6ec9c99e,308,import node:internal/modules/esm/loader:324:15,0x39aa285f338,~
code-source-info,0x5b6ec9c99e,114,9906,10476,C10O9906C18O9970C25O9970C30O10001C32O10014C41O10028C50O10073C55O10099C64O10099C70O10137C81O10332C90O10152C98O10142C100O10142C116O10180C123O10203C137O10180C143O10246C154O10247C160O10281C170O10282C175O10173C186O10124C201O10360C212O10381C217O10377C223O10366C235O10360C261O10414C270O10467C283O10471,,
code-creation,LazyCompile,10,409630,0x5b6ec9cd06,251,getModuleJob node:internal/modules/esm/loader:242:21,0x39aa285f2e8,~
code-source-info,0x5b6ec9cd06,114,6925,7774,C10O6925C18O6977C20O7010C22O7019C26O7028C33O7035C38O7202C49O7253C54O7253C59O7240C65O7346C82O7346C95O7335C118O7312C123O7320C128O7427C133O7437C138O7463C143O7437C150O7538C154O7583C159O7593C166O7619C176O7593C181O7641C185O7673C187O7684C208O7700C214O7758C226O7769,,
code-creation,LazyCompile,10,409850,0x5b6ec9d15e,425,resolve node:internal/modules/esm/loader:509:16,0x39aa285f478,~
code-source-info,0x5b6ec9d15e,114,15404,16943,C10O15404C32O15471C37O15471C75O15513C79O15545C91O15616C94O15616C100O15648C120O15654C125O15648C126O15778C133O15829C135O15834C140O15844C144O15873C146O15878C150O15889C157O15896C168O15941C174O15951C178O16003C185O16040C191O16061C197O16088C207O15986C220O15980C246O16148C252O16193C270O16199C275O16193C276O16328C281O16336C286O16363C297O16443C318O16449C323O16443C324O16594C330O16678C351O16684C356O16678C357O16823C366O16823C371O16895C378O16911C384O16926C400O16938,,
code-creation,LazyCompile,10,410281,0x5b6ec9d6a6,577,defaultResolve node:internal/modules/esm/resolve:1039:24,0x39aa2867370,~
code-source-info,0x5b6ec9d6a
code-creation,LazyCompile,10,410583,0x5b6ec9fe76,64,getConditionsSet node:internal/modules/esm/resolve:165:26,0x39aa2866a60,~
code-source-info,0x5b6ec9fe76,118,5376,5712,C0O5394C6O5441C8O5437C13O5468C18O5473C24O5508C40O5514C45O5508C46O5639C53O5646C58O5670C59O5679C63O5709,,
code-creation,LazyCompile,10,410792,0x5b6ec9ffe6,140,moduleResolve node:internal/modules/esm/resolve:966:23,0x39aa2867280,~
code-source-info,0x5b6ec9ffe6,118,32400,33061,C0O32559C2O32572C5O32576C11O32635C24O32646C32O32682C33O32695C39O32699C44O32715C56O32731C62O32718C72O32814C79O32825C88O32823C89O32867C101O32878C107O32951C114O32960C119O32978C121O32994C122O32998C134O33005C139O33058,,
code-creation,LazyCompile,10,410925,0x5b6eca018e,31,shouldBeTreatedAsRelativeOrAbsolutePath node:internal/modules/esm/resolve:953:49,0x39aa2867230,~
code-source-info,0x5b6eca018e,118,32059,32198,C0O32076C2O32090C7O32098C8O32111C9O32115C10O32128C16O32132C21O32141C22O32153C23O32157C26O32164C30O32195,,
code-creation,LazyCompile,10,411035,0x5b6eca02a6,81,isRelativeSpecifier node:internal/modules/esm/resolve:943:29,0x39aa28671e0,~
code-source-info,0x5b6eca02a6,118,31756,32007,C0O31773C1O31786C7O31790C12O31820C19O31827C26O31845C32O31849C37O31858C38O31870C39O31876C41O31889C47O31893C52O31925C59O31932C66O31950C72O31954C77O31963C78O31975C79O31991C80O32004,,
code-creation,LazyCompile,10,411193,0x5b6eca0426,15,get protocol node:internal/url:769:15,0x3d773ff8188,~
code-source-info,0x5b6eca0426,39,21714,21757,C0O21724C4O21736C6O21735C10O21745C14O21752,,
code-creation,LazyCompile,10,411417,0x5b6eca063e,444,finalizeResolution node:internal/modules/esm/resolve:391:28,0x39aa2866ce0,~
code-source-info,0x5b6eca063e
code-creation,LazyCompile,10,411644,0x5b6eca0a26,78,get pathname node:internal/url:875:15,0x3d773ff86a8,~
code-source-info,0x5b6eca0a26,39,24290,24490,C0O24312C4O24317C6O24316C10O24332C14O24341C16O24340C21O24374C27O24378C30O24382C31O24396C36O24401C42O24408C47O24422C49O24432C50O24438C57O24449C60O24472C68O24449C77O24485,,
code-creation,LazyCompile,10,411864,0x5b6eca0c7e,106,fileURLToPath node:internal/url:1413:23,0x3d773ff8f28,~
code-source-info,0x5b6eca0c7e,39,39672,40005,C0O39684C6O39719C13O39726C22O39749C25O39754C31O39780C49O39786C54O39780C55O39857C62O39866C67O39884C77O39890C82O39884C83O39929C92O39948C101O39976C105O40002,,
code-creation,LazyCompile,10,412029,0x5b6eca0eb6,150,get origin node:internal/url:746:13,0x3d773ff8118,~
code-source-info,0x5b6eca0eb6,39,21116,21696,C0O21200C4O21205C6O21204C10O21232C59O21280C64O21285C70O21292C78O21329C83O21349C89O21353C95O21337C101O21359C105O21366C110O21464C116O21485C117O21597C122O21629C127O21641C132O21651C137O21604C142O21657C143O21670C149O21691,,
code-creation,LazyCompile,10,412246,0x5b6eca119e,261,getPathFromURLWin32 node:internal/url:1360:29,0x3d773ff8e88,~
code-source-info,0x5b6eca119e
code-creation,LazyCompile,10,412399,0x5b6eca1446,19,get hostname node:internal/url:841:15,0x3d773ff84f8,~
code-source-info,0x5b6eca1446,39,23466,23513,C0O23476C4O23488C6O23487C10O23497C18O23508,,
code-creation,LazyCompile,10,412604,0x5b6eca156e,30,tryStatSync node:internal/modules/esm/resolve:184:3,0x39aa28673c0,~
code-source-info,0x5b6eca156e,118,5926,5992,C0O5981C5O5945C10O5936C21O5985C24O5981C29O5992,,
code-creation,LazyCompile,10,412876,0x5b6eca1726,123,statSync node:fs:1530:18,0x3096a118418,~
code-source-info,0x5b6eca1726,80,40462,40876,C7O40462C16O40525C21O40532C26O40571C33O40573C40O40598C45O40606C52O40611C55O40622C60O40622C66O40684C76O40606C82O40724C88O40739C96O40752C102O40781C103O40798C104O40807C109O40807C113O40839C118O40846C122O40873,,
code-creation,LazyCompile,10,412996,0x5b6eca18c6,37, node:internal/fs/utils:680:42,0x3096a122500,~
code-source-info,0x5b6eca18c6,81,19157,19296,C14O19213C19O19213C24O19248C29O19248C34O19281C36O19293,,
code-creation,LazyCompile,10,413456,0x5b6eca1a06,64,hasNoEntryError node:fs:1467:25,0x3096a1182e8,~
code-source-info,0x5b6eca1a06,80,38836,39038,C0O38855C6O38883C11O38899C16O38883C21O38912C27O38926C36O38930C39O38943C40O38962C46O38987C51O38993C58O38998C61O39011C62O39022C63O39035,,
code-creation,LazyCompile,10,413713,0x5b6eca1b3e,576,getStatsFromBinding node:internal/fs/utils:530:29,0x3096a1222d0,~
code-source-info,0x5b6eca1b3e
code-creation,LazyCompile,10,413907,0x5b6eca1f6e,16,isBigUint64Array node:internal/util/types:53:26,0x423ed474f0,~
code-source-info,0x5b6eca1f6e,17,1423,1514,C0O1436C5O1443C12O1490C15O1511,,
code-creation,LazyCompile,10,414039,0x5b6eca208e,19,msFromTimeSpec node:internal/fs/utils:446:24,0x3096a121ff8,~
code-source-info,0x5b6eca208e,81,11451,11512,C0O11468C2O11481C4O11479C10O11500C12O11498C15O11491C18O11509,,
code-creation,LazyCompile,10,414171,0x5b6eca22ce,116,Stats node:internal/fs/utils:495:15,0x3096a1221f0,~
code-source-info,0x5b6eca22ce,81,13243,13784,C0O13383C41O13383C46O13513C48O13526C52O13540C54O13553C58O13567C60O13580C64O13594C66O13611C70O13629C73O13642C77O13640C81O13666C84O13679C88O13677C92O13703C95O13716C99O13714C103O13740C106O13757C110O13755C115O13783,,
code-creation,LazyCompile,10,414280,0x5b6eca24a6,62,StatsBase node:internal/fs/utils:400:19,0x3096a121bc8,~
code-source-info,0x5b6eca24a6,81,10312,10613,C0O10400C2O10409C6O10419C8O10429C12O10440C14O10451C18O10463C20O10472C24O10482C26O10491C30O10501C32O10511C36O10522C38O10535C42O10549C44O10558C48O10568C50O10578C54O10589C56O10601C61O10612,,
code-creation,LazyCompile,10,414426,0x5b6eca269e,29,dateFromMs node:internal/fs/utils:460:20,0x3096a122098,~
code-source-info,0x5b6eca269e,81,11977,12024,C0O11987C7O12003C10O12003C17O12014C23O11994C28O12021,,
code-creation,LazyCompile,10,414520,0x5b6eca27a6,16,StatsBase.isDirectory node:internal/fs/utils:414:43,0x3096a121c18,~
code-source-info,0x5b6eca27a6,81,10659,10710,C0O10679C7O10698C10O10679C15O10707,,
code-creation,LazyCompile,10,414609,0x5b6eca28be,54,Stats._checkModeProperty node:internal/fs/utils:517:46,0x3096a122240,~
code-source-info,0x5b6eca28be,81,14142,14370,C0O14158C8O14189C10O14185C17O14213C19O14209C26O14242C28O14238C33O14260C34O14273C35O14339C42O14346C44O14344C50O14354C53O14367,,
code-creation,LazyCompile,10,414703,0x5b6eca29f6,16,StatsBase.isFile node:internal/fs/utils:418:38,0x3096a121ca8,~
code-source-info,0x5b6eca29f6,81,10752,10803,C0O10772C7O10791C10O10772C15O10800,,
code-creation,RegExp,3,414906,0x20b1dd47580,1592,^(?:[a-zA-Z]:|[\\\\/]{2}[^\\\\/]+[\\\\/][^\\\\/]+)?[\\\\/]*
code-creation,LazyCompile,10,415589,0x5b6eca2b56,37,get search node:internal/url:893:13,0x3d773ff8788,~
code-source-info,0x5b6eca2b56,39,24733,24864,C0O24761C4O24766C6O24765C10O24751C15O24781C19O24809C24O24824C26O24834C27O24840C32O24851C36O24859,,
code-creation,LazyCompile,10,415674,0x5b6eca2c9e,37,get hash node:internal/url:923:11,0x3d773ff88d8,~
code-source-info,0x5b6eca2c9e,39,25495,25638,C0O25526C4O25531C6O25530C10O25513C15O25546C19O25580C24O25595C26O25605C27O25611C32O25622C36O25633,,
code-creation,LazyCompile,10,415838,0x5b6eca2e2e,181,set search node:internal/url:900:13,0x3d773ff87f8,~
code-source-info,0x5b6eca2e2e,39,24880,25403,C0O24908C4O24913C6O24912C10O24928C17O24937C23O24963C25O24974C30O24991C31O25001C35O25016C44O25030C46O25029C51O25026C57O25072C58O25082C64O25086C69O25095C79O25104C86O25144C88O25154C92O25167C101O25180C106O25177C110O25208C114O25231C125O25245C134O25279C142O25279C154O25231C159O25353C168O25375C170O25374C174O25353C180O25402,,
code-creation,LazyCompile,10,415947,0x5b6eca3026,41,toUSVString node:internal/util:59:21,0x423ed44e60,~
code-source-info,0x5b6eca3026,16,1409,1709,C0O1432C4O1586C11O1606C14O1586C20O1636C22O1653C24O1664C25O1668C30O1699C35O1675C40O1706,,
code-creation,LazyCompile,10,416086,0x5b6eca319e,144,set hash node:internal/url:930:11,0x3d773ff8940,~
code-source-info,0x5b6eca319e,39,25652,26099,C0O25678C4O25683C6O25682C10O25733C15O25756C17O25776C18O25789C22O25804C31O25818C33O25817C38O25814C42O25849C43O25856C44O25869C45O25877C51O25881C56O25890C66O25897C73O25933C75O25946C79O25957C88O25970C93O25967C97O25999C108O26011C117O26044C125O26044C137O25999C143O26098,,
code-creation,LazyCompile,10,416188,0x5b6eca3366,51,throwIfUnsupportedURLProtocol node:internal/modules/esm/resolve:1032:39,0x39aa2867320,~
code-source-info,0x5b6eca3366,118,34752,34917,C0O34771C7O34780C12O34799C19O34808C24O34834C31O34843C36O34863C43O34869C48O34863C50O34916,,
code-creation,LazyCompile,10,416266,0x5b6eca348e,18,toString node:internal/url:730:11,0x3d773ff7ff8,~
code-source-info,0x5b6eca348e,39,20787,20827,C0O20797C4O20809C6O20808C12O20817C17O20822,,
code-creation,LazyCompile,10,416376,0x5b6eca35ee,59,defaultGetFormatWithoutErrors node:internal/modules/esm/get_format:92:39,0x39aa286ae28,~
code-source-info,0x5b6eca35ee,119,2872,3074,C0O2907C7O2907C13O2924C20O2959C23O2984C28O2929C35O3000C36O3012C37O3016C42O3047C46O3039C52O3056C58O3071,,
code-creation,LazyCompile,10,416516,0x5b6eca3afe,119,getFileProtocolModuleFormat node:internal/modules/esm/get_format:75:37,0x39aa286add8,~
code-source-info,0x5b6eca3afe,119,2291,2830,C0O2328C5O2340C10O2328C15O2354C17O2362C22O2380C27O2387C34O2407C45O2444C46O2470C53O2488C57O2498C59O2510C61O2524C62O2528C69O2564C74O2663C78O2688C79O2705C80O2711C87O2753C90O2753C100O2717C105O2711C106O2782C109O2789C118O2827,,
code-creation,LazyCompile,10,416678,0x5b6eca3d3e,275,extname node:path:836:10,0x14570b4d838,~
code-source-info,0x5b6eca3d3e
code-creation,LazyCompile,10,416814,0x5b6eca3fce,13,getPackageType node:internal/modules/esm/resolve:826:24,0x39aa28670a0,~
code-source-info,0x5b6eca3fce,118,27944,28037,C0O27977C3O27977C8O28029C12O28034,,
code-creation,LazyCompile,10,416917,0x5b6eca4226,173,getPackageScopeConfig node:internal/modules/esm/resolve:248:31,0x39aa2866b00,~
code-source-info,0x5b6eca4226,118,7630,8729,C0O7667C13O7667C19O7766C24O7781C32O7785C39O7863C41O7897C46O7914C49O7914C54O7897C60O8023C66O8031C68O8052C69O8087C72O8108C85O8125C91O8334C96O8366C100O8343C105O8376C107O7707C110O8415C115O8415C120O8471C127O8489C132O8537C137O8559C142O8603C147O8628C154O8648C159O8665C164O8665C170O8705C172O8726,,
code-creation,LazyCompile,10,417191,0x5b6eca48be,331,getPackageConfig node:internal/modules/esm/resolve:192:26,0x39aa2866ab0,~
code-source-info,0x5b6eca48be,118,6159,7522,C0O6205C5O6222C10O6222C16O6236C18O6271C20O6287C21O6311C26O6329C31O6329C37O6339C42O6351C44O6406C51O6426C56O6467C61O6491C66O6539C71O6566C78O6590C83O6607C88O6607C94O6638C96O6659C97O6674C102O6701C107O6715C115O6713C125O6760C137O6819C144O6830C163O6857C168O6871C174O6857C178O6855C185O6904C192O6766C197O6760C198O6936C203O6945C208O6951C213O6957C218O6990C223O7018C233O7071C235O7095C241O7125C243O7146C249O7176C251O7251C253O7260C260O7281C265O7297C268O7339C275O7357C281O7387C287O7398C293O7409C299O7420C305O7434C312O7452C317O7469C322O7469C328O7498C330O7519,,
code-creation,LazyCompile,10,417465,0x5b6eca4c4e,3, node:internal/per_context/primordials:276:21,0x13fcdd09b30,~
code-source-info,0x5b6eca4c4e,6,8195,8226,C0O8207C2O8219,,
code-creation,LazyCompile,10,417624,0x5b6eca4d36,78,get node:internal/modules/esm/module_map:18:6,0x39aa28616e0,~
code-source-info,0x5b6eca4d36,115,604,748,C11O617C18O645C28O645C33O678C43O678C48O713C50O726C61O726C71O736C77O743,,
code-creation,LazyCompile,10,417736,0x5b6eca4f2e,111,#createModuleJob node:internal/modules/esm/loader:278:19,0x39aa285f158,~
code-source-info,0x5b6eca4f2e,114,8441,9245,C0O8441C17O8514C22O8914C31O8957C37O8957C42O9016C70O9016C76O9169C79O9174C84O9184C92O9210C103O9184C108O9229C110O9240,,
code-creation,LazyCompile,10,417884,0x5b6eca5256,196,ModuleJob node:internal/modules/esm/module_job:56:14,0x39aa2862570,~
code-source-info,0x5b6eca5256,116,1367,3214,C0O1367C27O1400C32O1400C50O1478C55O1490C59O1505C64O1527C68O1552C73O1564C77O1579C82O1595C86O1616C90O1628C94O1766C101O1787C104O1816C113O1825C122O1830C135O1787C140O1785C144O1937C149O2890C152O2904C155O2902C159O3014C169O3041C178O3049C181O3014C186O3179C190O3197C195O3213,,
code-creation,LazyCompile,10,418023,0x5b6eca5cc6,187,moduleProvider node:internal/modules/esm/loader:279:28,0x5b6eca4e58,~
code-source-info,0x5b6eca5cc6,114,8514,8886,C10O8514C18O8586C21O8597C26O8612C33O8619C39O8627C43O8597C57O8586C80O8562C85O8575C90O8676C97O8688C102O8688C108O8715C110O8743C119O8749C124O8743C125O8811C147O8818C162O8879,,
code-creation,LazyCompile,10,418210,0x5b6eca6116,410,load node:internal/modules/esm/loader:353:13,0x39aa285f388,~
code-source-info,0x5b6eca6116,114,10854,12162,C10O10854C60O10903C62O10908C67O10916C71O10943C73O10948C77O10957C84O10964C95O11007C101O11015C105O11040C114O11046C127O11040C153O11090C159O11131C177O11137C182O11131C183O11266C188O11281C193O11313C198O11358C210O11358C216O11467C228O11530C235O11580C255O11473C260O11467C261O11616C267O11657C288O11663C293O11657C294O11808C309O11883C312O11883C322O11919C325O11919C331O11952C350O11958C355O11952C356O12111C363O12127C369O12142C385O12157,,
code-creation,LazyCompile,10,418353,0x5b6eca650e,201,defaultLoad node:internal/modules/esm/load:13:27,0x39aa286c310,~
code-source-info,0x5b6eca650e,121,380,847,C10O380C18O411C23O424C28O459C33O494C38O521C43O530C48O563C62O563C67O619C69O636C76O665C81O692C85O717C90O744C95O776C102O783C106O759C119O753C147O804C154O818C160O831C176O844,,
code-creation,LazyCompile,10,418465,0x5b6eca6876,150,validateAssertions node:internal/modules/esm/assert:55:28,0x39aa2864668,~
code-source-info,0x5b6eca6876,117,1835,2993,C12O1897C17O1897C26O1940C33O1953C37O1968C38O1999C48O2155C55O2505C66O2130C67O2142C68O2320C76O2325C83O2393C84O2405C85O2422C88O2469C93O2429C98O2475C99O2581C100O2593C101O2745C109O2750C116O2862C129O2868C134O2862C135O2939C138O2979C143O2939C149O2992,,
code-creation,LazyCompile,10,418636,0x5b6eca6bb6,338,defaultGetSource node:internal/modules/esm/get_source:25:32,0x39aa286ca18,~
code-source-info,0x5b6eca6bb6,122,686,1346,C10O686C31O694C70O747C77O747C83O768C85O790C92O799C97O819C102O834C114O828C144O878C151O887C156O921C163O941C166O966C171O921C177O982C179O1003C186O1009C191O1003C192O1058C199O1069C206O1090C211O1106C218O1111C221O1111C228O1137C237O1106C246O1183C258O1189C263O1183C264O1243C271O1253C280O1272C285O1279C290O1288C295O1288C301O1329C313O1343,,
code-creation,Function,11,418821,0x20b1dd47c20,1468,onParseComplete node:internal/url:532:25,0x3d773ff7b10,^
code-source-info,0x20b1dd47c20,39,14726,15412,,,
code-creation,Function,11,418885,0x20b1dd48240,280, node:internal/url:636:21,0x3d773ff7eb8,^
code-source-info,0x20b1dd48240,39,18078,18155,,,
code-creation,Function,11,418962,0x20b1dd483c0,1916,getPathFromURLWin32 node:internal/url:1360:29,0x3d773ff8e88,^
code-source-info,0x20b1dd483c0,39,37724,39122,,,
code-creation,Function,11,419004,0x20b1dd48ba0,340,URLContext node:internal/url:160:14,0x3d773ff7580,^
code-source-info,0x20b1dd48ba0,39,3859,4081,,,
tick,0x7ff72454a1f4,419129,0,0x0,2,0x7ff7245a4800,0x5b6eca6c1c,0x5b6eca6578,0x5b6eca6188,0x5b6eca5cf1,0x5b6eca52dd,0x5b6eca4f74,0x5b6ec9cdd6,0x7ff724a0b983,0x7ff723ff3d10,0x5b6ec98cab
code-creation,LazyCompile,10,419200,0x5b6eca758e,196,readFile node:internal/fs/promises:786:24,0x39aa286ec90,~
code-source-info,0x5b6eca758e,123,22911,23257,C10O22911C18O22932C23O22953C28O22942C35O23002C44O23020C46O23040C48O23029C53O23057C56O23064C71O23094C72O23100C75O23121C80O23100C84O23146C98O23152C111O23146C137O23180C145O23215C151O23247C156O23187C171O23254,,
code-creation,LazyCompile,10,419300,0x5b6eca9306,29,checkAborted node:internal/fs/promises:319:22,0x39aa286dfc0,~
code-source-info,0x5b6eca9306,123,7466,7532,C0O7480C7O7490C16O7506C21O7512C26O7506C28O7531,,
code-creation,LazyCompile,10,419394,0x5b6eca94ae,182,open node:internal/fs/promises:449:20,0x39aa286e1a0,~
code-source-info,0x5b6eca94ae,123,11749,12062,C10O11749C18O11774C23O11781C29O11828C34O11828C39O11853C55O11860C62O11899C69O11933C72O11941C79O11956C82O11967C87O11967C95O12044C104O11941C117O11927C142O11906C157O12059,,
code-creation,LazyCompile,10,419581,0x5b6eca9976,515,stringToFlags node:internal/fs/utils:555:23,0x3096a122320,~
code-source-info,0x5b6eca
code-creation,LazyCompile,10,419760,0x5b6eca9d66,97,parseFileMode node:internal/validators:59:23,0x13fcdd3c7f8,~
code-source-info,0x5b6eca9d66,15,1545,1852,C0O1569C11O1587C17O1625C24O1650C27O1630C34O1677C41O1722C52O1683C57O1677C58O1745C66O1753C73O1789C89O1789C94O1836C96O1849,,
code-creation,LazyCompile,10,419865,0x5b6eca9f36,206, node:internal/validators:84:3,0x13fcdd3c8b8,~
code-source-info,0x5b6eca9f36,15,2338,2933,C36O2481C39O2486C45O2511C51O2553C67O2559C72O2553C73O2624C78O2629C84O2664C100O2670C105O2664C106O2735C116O2774C129O2787C142O2741C147O2735C148O2814C150O2824C157O2839C162O2855C172O2894C185O2907C198O2861C203O2855C205O2932,,
code-creation,LazyCompile,10,419947,0x5b6ecaa0fe,9,isInt32 node:internal/validators:36:17,0x13fcdd3c298,~
code-source-info,0x5b6ecaa0fe,15,769,814,C0O782C2O806C5O795C8O811,,
code-creation,LazyCompile,10,420481,0x5b6ecaa3ae,263,link node:internal/modules/esm/module_job:69:18,0x5b6eca50d8,~
code-source-info,0x5b6ecaa3ae,116,1937,2831,C4O1937C26O1958C36O1983C48O1972C73O1970C77O2005C89O2017C98O2035C100O2024C104O2005C108O2357C110O2357C112O2385C117O2390C122O2397C132O2397C138O2670C140O2707C151O2728C156O2724C162O2713C174O2707C199O2767C210O2789C218O2785C224O2774C238O2824,,
code-creation,LazyCompile,10,420604,0x5b6ecaa636,19,primordials.PromisePrototypeCatch node:internal/per_context/primordials:397:37,0x13fcdd0a4b8,~
code-source-info,0x5b6ecaa636,6,11842,11930,C0O11874C13O11874C18O11930,,
code-creation,LazyCompile,10,420750,0x5b6ecaa80e,216,set node:internal/modules/esm/module_map:23:6,0x39aa2861730,~
code-source-info,0x5b6ecaa80e,115,755,1288,C11O768C21O801C31O801C36O834C46O834C51O869C55O888C57O877C62O898C73O955C91O961C96O955C97O1024C109O1041C124O1066C126O1062C137O1106C148O1024C152O1165C154O1171C165O1171C178O1183C183O1183C188O1208C190O1231C194O1243C196O1256C210O1256C215O1283,,
code-creation,LazyCompile,10,420879,0x5b6ecaaa0e,89,logger node:internal/util/debuglog:95:18,0x423ed61c20,~
code-source-info,0x5b6ecaaa0e,22,2963,3164,C0O2963C3O2996C24O3021C30O3038C34O3028C38O3043C39O3059C45O3076C51O3085C55O3066C60O3090C61O3107C65O3114C72O3127C77O3123C83O3114C88O3152,,
code-creation,LazyCompile,10,420995,0x5b6ecaab76,140,debug node:internal/util/debuglog:76:15,0x423ed61b80,~
code-source-info,0x5b6ecaab76,22,2432,2838,C0O2432C3O2452C6O2452C9O2563C16O2584C22O2571C30O2569C36O2604C42O2641C47O2644C50O2641C54O2670C75O2695C81O2712C85O2702C89O2717C90O2733C96O2750C102O2759C106O2740C111O2764C112O2781C116O2788C123O2801C128O2797C134O2788C139O2826,,
code-creation,LazyCompile,10,421103,0x5b6ecaad26,41,init node:internal/util/debuglog:72:16,0x423ed61b30,~
code-source-info,0x5b6ecaad26,22,2330,2416,C0O2340C10O2346C14O2344C16O2384C26O2394C33O2392C40O2415,,
code-creation,LazyCompile,10,421173,0x5b6ecaae16,2,testEnabled node:internal/util/debuglog:32:19,0x2e2fa694cc0,~
code-source-info,0x5b6ecaae16,22,1004,1015,C0O1010C1O1015,,
code-creation,LazyCompile,10,421294,0x5b6ecaafae,116,debuglogImpl node:internal/util/debuglog:49:22,0x423ed61980,~
code-source-info,0x5b6ecaafae,22,1499,2059,C0O1499C9O1519C18O1533C23O1561C34O1595C39O1603C43O1595C45O1615C55O1615C59O1648C71O1659C75O1664C83O1994C97O2012C99O2010C103O2033C112O2050C115O2056,,
code-creation,LazyCompile,10,421391,0x5b6ecab166,10, node:internal/modules/esm/module_map:9:63,0x39aa2861640,~
code-source-info,0x5b6ecab166,115,271,298,C0O284C2O290C9O297,,
code-creation,LazyCompile,10,421452,0x5b6ecab216,2,noop node:internal/util/debuglog:47:14,0x423ed61930,~
code-source-info,0x5b6ecab216,22,1465,1473,C1O1472,,
code-creation,LazyCompile,10,421519,0x5b6ecab2ce,10, node:internal/modules/esm/loader:333:15,0x5b6ec9c808,~
code-source-info,0x5b6ecab2ce,114,10252,10270,C0O10265C5O10265C9O10270,,
code-creation,LazyCompile,10,421672,0x5b6ecab726,433,run node:internal/modules/esm/module_job:192:12,0x39aa2862660,~
code-source-info,0x5b6ecab726,116,7119,8323,C10O7119C18O7140C23O7140C35O7129C58O7176C61O7207C66O7243C71O7250C76O7250C90O7232C128O7310C133O7315C143O7322C152O7357C158O7395C163O7357C169O7416C182O7426C186O7463C196O7495C204O7467C211O7530C224O7540C228O7630C235O7661C240O7668C248O7630C259O7700C267O7750C272O7757C277O7700C292O7778C297O7833C302O7861C307O7868C312O7834C318O7901C325O7906C330O7933C344O8082C358O8024C364O8105C370O8185C376O7943C380O8266C382O8266C383O8287C388O8309C408O8318,,
code-creation,LazyCompile,10,421811,0x5b6ecaba56,24,instantiate node:internal/modules/esm/module_job:101:14,0x39aa28625c0,~
code-source-info,0x5b6ecaba56,116,3231,3370,C0O3250C6O3312C11O3312C15O3305C19O3352C23O3365,,
code-creation,LazyCompile,10,422068,0x5b6ecac15e,935,_instantiate node:internal/modules/esm/module_job:108:21,0x39aa2862610,~
code-source-info,0x5b6ecac15e
code-creation,LazyCompile,10,422293,0x5b6ecac7d6,179,addJobsToDependencyGraph node:internal/modules/esm/module_job:110:38,0x5b6ecabea0,~
code-source-info,0x5b6ecac7d6,116,3477,3782,C10O3477C18O3507C23O3523C28O3523C35O3550C46O3557C47O3574C52O3586C57O3586C62O3648C74O3632C100O3663C111O3685C118O3713C123O3747C126O3713C134O3681C140O3670C154O3775,,
code-creation,LazyCompile,10,422575,0x5b6ecacb6e,627,processPromiseRejections node:internal/process/promises:211:34,0x3d773fde3d8,~
script-source,33,node:internal/process/promises,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeShift\x2C\x0d\n  Error\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  SafeWeakMap\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  tickInfo\x2C\x0d\n  promiseRejectEvents: {\x0d\n    kPromiseRejectWithNoHandler\x2C\x0d\n    kPromiseHandlerAddedAfterReject\x2C\x0d\n    kPromiseResolveAfterResolved\x2C\x0d\n    kPromiseRejectAfterResolved\x0d\n  }\x2C\x0d\n  setPromiseRejectCallback\x0d\n} = internalBinding('task_queue');\x0d\n\x0d\nconst {\x0d\n  noSideEffectsToString\x2C\x0d\n  triggerUncaughtException\x0d\n} = internalBinding('errors');\x0d\n\x0d\nconst {\x0d\n  pushAsyncContext\x2C\x0d\n  popAsyncContext\x2C\x0d\n  symbols: {\x0d\n    async_id_symbol: kAsyncIdSymbol\x2C\x0d\n    trigger_async_id_symbol: kTriggerAsyncIdSymbol\x0d\n  }\x0d\n} = require('internal/async_hooks');\x0d\nconst { isErrorStackTraceLimitWritable } = require('internal/errors');\x0d\n\x0d\n// *Must* match Environment::TickInfo::Fields in src/env.h.\x0d\nconst kHasRejectionToWarn = 1;\x0d\n\x0d\nconst maybeUnhandledPromises = new SafeWeakMap();\x0d\nconst pendingUnhandledRejections = [];\x0d\nconst asyncHandledRejections = [];\x0d\nlet lastPromiseId = 0;\x0d\n\x0d\n// --unhandled-rejections=none:\x0d\n// Emit 'unhandledRejection'\x2C but do not emit any warning.\x0d\nconst kIgnoreUnhandledRejections = 0;\x0d\n\x0d\n// --unhandled-rejections=warn:\x0d\n// Emit 'unhandledRejection'\x2C then emit 'UnhandledPromiseRejectionWarning'.\x0d\nconst kAlwaysWarnUnhandledRejections = 1;\x0d\n\x0d\n// --unhandled-rejections=strict:\x0d\n// Emit 'uncaughtException'. If it's not handled\x2C print the error to stderr\x0d\n// and exit the process.\x0d\n// Otherwise\x2C emit 'unhandledRejection'. If 'unhandledRejection' is not\x0d\n// handled\x2C emit 'UnhandledPromiseRejectionWarning'.\x0d\nconst kStrictUnhandledRejections = 2;\x0d\n\x0d\n// --unhandled-rejections=throw:\x0d\n// Emit 'unhandledRejection'\x2C if it's unhandled\x2C emit\x0d\n// 'uncaughtException'. If it's not handled\x2C print the error to stderr\x0d\n// and exit the process.\x0d\nconst kThrowUnhandledRejections = 3;\x0d\n\x0d\n// --unhandled-rejections=warn-with-error-code:\x0d\n// Emit 'unhandledRejection'\x2C if it's unhandled\x2C emit\x0d\n// 'UnhandledPromiseRejectionWarning'\x2C then set process exit code to 1.\x0d\n\x0d\nconst kWarnWithErrorCodeUnhandledRejections = 4;\x0d\n\x0d\nlet unhandledRejectionsMode;\x0d\n\x0d\nfunction setHasRejectionToWarn(value) {\x0d\n  tickInfo[kHasRejectionToWarn] = value ? 1 : 0;\x0d\n}\x0d\n\x0d\nfunction hasRejectionToWarn() {\x0d\n  return tickInfo[kHasRejectionToWarn] === 1;\x0d\n}\x0d\n\x0d\nfunction isErrorLike(o) {\x0d\n  return typeof o === 'object' &&\x0d\n         o !== null &&\x0d\n         ObjectPrototypeHasOwnProperty(o\x2C 'stack');\x0d\n}\x0d\n\x0d\nfunction getUnhandledRejectionsMode() {\x0d\n  const { getOptionValue } = require('internal/options');\x0d\n  switch (getOptionValue('--unhandled-rejections')) {\x0d\n    case 'none':\x0d\n      return kIgnoreUnhandledRejections;\x0d\n    case 'warn':\x0d\n      return kAlwaysWarnUnhandledRejections;\x0d\n    case 'strict':\x0d\n      return kStrictUnhandledRejections;\x0d\n    case 'throw':\x0d\n      return kThrowUnhandledRejections;\x0d\n    case 'warn-with-error-code':\x0d\n      return kWarnWithErrorCodeUnhandledRejections;\x0d\n    default:\x0d\n      return kThrowUnhandledRejections;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction promiseRejectHandler(type\x2C promise\x2C reason) {\x0d\n  if (unhandledRejectionsMode === undefined) {\x0d\n    unhandledRejectionsMode = getUnhandledRejectionsMode();\x0d\n  }\x0d\n  switch (type) {\x0d\n    case kPromiseRejectWithNoHandler:\x0d\n      unhandledRejection(promise\x2C reason);\x0d\n      break;\x0d\n    case kPromiseHandlerAddedAfterReject:\x0d\n      handledRejection(promise);\x0d\n      break;\x0d\n    case kPromiseResolveAfterResolved:\x0d\n      resolveError('resolve'\x2C promise\x2C reason);\x0d\n      break;\x0d\n    case kPromiseRejectAfterResolved:\x0d\n      resolveError('reject'\x2C promise\x2C reason);\x0d\n      break;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction resolveError(type\x2C promise\x2C reason) {\x0d\n  // We have to wrap this in a next tick. Otherwise the error could be caught by\x0d\n  // the executed promise.\x0d\n  process.nextTick(() => {\x0d\n    process.emit('multipleResolves'\x2C type\x2C promise\x2C reason);\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction unhandledRejection(promise\x2C reason) {\x0d\n  const emit = (reason\x2C promise\x2C promiseInfo) => {\x0d\n    if (promiseInfo.domain) {\x0d\n      return promiseInfo.domain.emit('error'\x2C reason);\x0d\n    }\x0d\n    return process.emit('unhandledRejection'\x2C reason\x2C promise);\x0d\n  };\x0d\n\x0d\n  maybeUnhandledPromises.set(promise\x2C {\x0d\n    reason\x2C\x0d\n    uid: ++lastPromiseId\x2C\x0d\n    warned: false\x2C\x0d\n    domain: process.domain\x2C\x0d\n    emit\x0d\n  });\x0d\n  // This causes the promise to be referenced at least for one tick.\x0d\n  ArrayPrototypePush(pendingUnhandledRejections\x2C promise);\x0d\n  setHasRejectionToWarn(true);\x0d\n}\x0d\n\x0d\nfunction handledRejection(promise) {\x0d\n  const promiseInfo = maybeUnhandledPromises.get(promise);\x0d\n  if (promiseInfo !== undefined) {\x0d\n    maybeUnhandledPromises.delete(promise);\x0d\n    if (promiseInfo.warned) {\x0d\n      const { uid } = promiseInfo;\x0d\n      // Generate the warning object early to get a good stack trace.\x0d\n      // eslint-disable-next-line no-restricted-syntax\x0d\n      const warning = new Error('Promise rejection was handled ' +\x0d\n                                `asynchronously (rejection id: ${uid})`);\x0d\n      warning.name = 'PromiseRejectionHandledWarning';\x0d\n      warning.id = uid;\x0d\n      ArrayPrototypePush(asyncHandledRejections\x2C { promise\x2C warning });\x0d\n      setHasRejectionToWarn(true);\x0d\n      return;\x0d\n    }\x0d\n  }\x0d\n  if (maybeUnhandledPromises.size === 0 && asyncHandledRejections.length === 0)\x0d\n    setHasRejectionToWarn(false);\x0d\n}\x0d\n\x0d\nconst unhandledRejectionErrName = 'UnhandledPromiseRejectionWarning';\x0d\nfunction emitUnhandledRejectionWarning(uid\x2C reason) {\x0d\n  const warning = getErrorWithoutStack(\x0d\n    unhandledRejectionErrName\x2C\x0d\n    'Unhandled promise rejection. This error originated either by ' +\x0d\n      'throwing inside of an async function without a catch block\x2C ' +\x0d\n      'or by rejecting a promise which was not handled with .catch(). ' +\x0d\n      'To terminate the node process on unhandled promise ' +\x0d\n      'rejection\x2C use the CLI flag `--unhandled-rejections=strict` (see ' +\x0d\n      'https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). ' +\x0d\n      `(rejection id: ${uid})`\x0d\n  );\x0d\n  try {\x0d\n    if (isErrorLike(reason)) {\x0d\n      warning.stack = reason.stack;\x0d\n      process.emitWarning(reason.stack\x2C unhandledRejectionErrName);\x0d\n    } else {\x0d\n      process.emitWarning(\x0d\n        noSideEffectsToString(reason)\x2C unhandledRejectionErrName);\x0d\n    }\x0d\n  } catch {\x0d\n    try {\x0d\n      process.emitWarning(\x0d\n        noSideEffectsToString(reason)\x2C unhandledRejectionErrName);\x0d\n    } catch {\x0d\n      // Ignore.\x0d\n    }\x0d\n  }\x0d\n\x0d\n  process.emitWarning(warning);\x0d\n}\x0d\n\x0d\n// If this method returns true\x2C we've executed user code or triggered\x0d\n// a warning to be emitted which requires the microtask and next tick\x0d\n// queues to be drained again.\x0d\nfunction processPromiseRejections() {\x0d\n  let maybeScheduledTicksOrMicrotasks = asyncHandledRejections.length > 0;\x0d\n\x0d\n  while (asyncHandledRejections.length > 0) {\x0d\n    const { promise\x2C warning } = ArrayPrototypeShift(asyncHandledRejections);\x0d\n    if (!process.emit('rejectionHandled'\x2C promise)) {\x0d\n      process.emitWarning(warning);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  let len = pendingUnhandledRejections.length;\x0d\n  while (len--) {\x0d\n    const promise = ArrayPrototypeShift(pendingUnhandledRejections);\x0d\n    const promiseInfo = maybeUnhandledPromises.get(promise);\x0d\n    if (promiseInfo === undefined) {\x0d\n      continue;\x0d\n    }\x0d\n    promiseInfo.warned = true;\x0d\n    const { reason\x2C uid\x2C emit } = promiseInfo;\x0d\n\x0d\n    let needPop = true;\x0d\n    const {\x0d\n      [kAsyncIdSymbol]: promiseAsyncId\x2C\x0d\n      [kTriggerAsyncIdSymbol]: promiseTriggerAsyncId\x2C\x0d\n    } = promise;\x0d\n    // We need to check if async_hooks are enabled\x0d\n    // don't use enabledHooksExist as a Promise could\x0d\n    // come from a vm.* context and not have an async id\x0d\n    if (typeof promiseAsyncId !== 'undefined') {\x0d\n      pushAsyncContext(\x0d\n        promiseAsyncId\x2C\x0d\n        promiseTriggerAsyncId\x2C\x0d\n        promise\x0d\n      );\x0d\n    }\x0d\n    try {\x0d\n      switch (unhandledRejectionsMode) {\x0d\n        case kStrictUnhandledRejections: {\x0d\n          const err = isErrorLike(reason) ?\x0d\n            reason : generateUnhandledRejectionError(reason);\x0d\n          // This destroys the async stack\x2C don't clear it after\x0d\n          triggerUncaughtException(err\x2C true /* fromPromise */);\x0d\n          if (typeof promiseAsyncId !== 'undefined') {\x0d\n            pushAsyncContext(\x0d\n              promise[kAsyncIdSymbol]\x2C\x0d\n              promise[kTriggerAsyncIdSymbol]\x2C\x0d\n              promise\x0d\n            );\x0d\n          }\x0d\n          const handled = emit(reason\x2C promise\x2C promiseInfo);\x0d\n          if (!handled) emitUnhandledRejectionWarning(uid\x2C reason);\x0d\n          break;\x0d\n        }\x0d\n        case kIgnoreUnhandledRejections: {\x0d\n          emit(reason\x2C promise\x2C promiseInfo);\x0d\n          break;\x0d\n        }\x0d\n        case kAlwaysWarnUnhandledRejections: {\x0d\n          emit(reason\x2C promise\x2C promiseInfo);\x0d\n          emitUnhandledRejectionWarning(uid\x2C reason);\x0d\n          break;\x0d\n        }\x0d\n        case kThrowUnhandledRejections: {\x0d\n          const handled = emit(reason\x2C promise\x2C promiseInfo);\x0d\n          if (!handled) {\x0d\n            const err = isErrorLike(reason) ?\x0d\n              reason : generateUnhandledRejectionError(reason);\x0d\n              // This destroys the async stack\x2C don't clear it after\x0d\n            triggerUncaughtException(err\x2C true /* fromPromise */);\x0d\n            needPop = false;\x0d\n          }\x0d\n          break;\x0d\n        }\x0d\n        case kWarnWithErrorCodeUnhandledRejections: {\x0d\n          const handled = emit(reason\x2C promise\x2C promiseInfo);\x0d\n          if (!handled) {\x0d\n            emitUnhandledRejectionWarning(uid\x2C reason);\x0d\n            process.exitCode = 1;\x0d\n          }\x0d\n          break;\x0d\n        }\x0d\n      }\x0d\n    } finally {\x0d\n      if (needPop) {\x0d\n        if (typeof promiseAsyncId !== 'undefined') {\x0d\n          popAsyncContext(promiseAsyncId);\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n    maybeScheduledTicksOrMicrotasks = true;\x0d\n  }\x0d\n  return maybeScheduledTicksOrMicrotasks ||\x0d\n         pendingUnhandledRejections.length !== 0;\x0d\n}\x0d\n\x0d\nfunction getErrorWithoutStack(name\x2C message) {\x0d\n  // Reset the stack to prevent any overhead.\x0d\n  const tmp = Error.stackTraceLimit;\x0d\n  if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = 0;\x0d\n  // eslint-disable-next-line no-restricted-syntax\x0d\n  const err = new Error(message);\x0d\n  if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = tmp;\x0d\n  ObjectDefineProperty(err\x2C 'name'\x2C {\x0d\n    value: name\x2C\x0d\n    enumerable: false\x2C\x0d\n    writable: true\x2C\x0d\n    configurable: true\x2C\x0d\n  });\x0d\n  return err;\x0d\n}\x0d\n\x0d\nfunction generateUnhandledRejectionError(reason) {\x0d\n  const message =\x0d\n    'This error originated either by ' +\x0d\n    'throwing inside of an async function without a catch block\x2C ' +\x0d\n    'or by rejecting a promise which was not handled with .catch().' +\x0d\n    ' The promise rejected with the reason ' +\x0d\n    `"${noSideEffectsToString(reason)}".`;\x0d\n\x0d\n  const err = getErrorWithoutStack('UnhandledPromiseRejection'\x2C message);\x0d\n  err.code = 'ERR_UNHANDLED_REJECTION';\x0d\n  return err;\x0d\n}\x0d\n\x0d\nfunction listenForRejections() {\x0d\n  setPromiseRejectCallback(promiseRejectHandler);\x0d\n}\x0d\nmodule.exports = {\x0d\n  hasRejectionToWarn\x2C\x0d\n  setHasRejectionToWarn\x2C\x0d\n  listenForRejections\x2C\x0d\n  processPromiseRejections\x2C\x0d\n};\x0d\n
code-source-info,0x5b6ecacb6e
code-creation,LazyCompile,10,423540,0x5b6ecadac6,25,setHasRejectionToWarn node:internal/process/promises:75:31,0x3d773fdd948,~
code-source-info,0x5b6ecadac6,33,2169,2231,C0O2182C7O2191C12O2214C19O2212C24O2230,,
code-creation,LazyCompile,10,423668,0x5b6ecadbe6,112,FileHandle node:internal/fs/promises:116:14,0x39aa286ece0,~
code-source-info,0x5b6ecadbe6,123,2962,3135,C3O2982C11O2982C40O2996C45O3001C50O3010C54O3029C59O3034C67O3041C69O3065C77O3039C81O3081C86O3086C91O3093C95O3103C100O3108C104O3123C111O3134,,
code-creation,LazyCompile,10,423770,0x5b6ecadd66,63,MixedEventEmitter node:internal/event_target:968:16,0x39aa28785b0,~
code-source-info,0x5b6ecadd66,44,26839,26973,C0O26839C8O26858C15O26865C21O26901C25O26910C29O26901C41O26924C48O26946C54O26924C62O26972,,
code-creation,LazyCompile,10,424071,0x5b6ecae086,601,readFileHandle node:internal/fs/promises:359:30,0x39aa286e060,~
code-source-info,0x5b6ecae086,123,8743,10574,C10O8743C18O8785C25O8792C33O8807C37O8807C41O8853C47O8867C53O8884C64O8895C68O8867C82O8853C110O8915C114O8915C118O8946C120O8955C122O8970C129O8986C131O8984C138O8998C140O8994C145O9014C147O9031C153O9063C155O9083C157O9094C159O9092C164O9113C172O9119C177O9113C178O9173C180O9199C182O9220C183O9225C187O9251C190O9277C199O9298C203O9305C209O9305C215O9341C219O9341C223O9372C225O9389C227O9406C229O9419C233O9440C239O9456C247O9472C251O9456C257O9510C259O9529C266O9589C269O9617C272O9644C280O9666C287O9679C291O9653C297O9735C303O9750C309O9766C321O9841C334O9750C348O9736C379O9867C381O9880C388O9896C389O9918C396O9937C400O9952C405O9976C410O10011C412O10025C414O10021C418O10082C424O10113C433O10113C440O10141C446O10141C451O10202C455O9331C458O10224C460O10235C461O10244C466O10256C468O10275C477O10310C486O10310C495O10365C503O10372C509O10387C516O10393C520O10400C526O10400C533O10517C539O10535C545O10552C551O10535C568O10564C572O10571,,
code-creation,LazyCompile,10,424277,0x5b6ecae4ce,8,get fd node:internal/fs/promises:129:9,0x39aa286ed98,~
code-source-info,0x5b6ecae4ce,123,3212,3244,C0O3222C2O3234C4O3233C7O3239,,
code-creation,LazyCompile,10,424397,0x5b6ecae64e,33,primordials.SafePromisePrototypeFinally node:internal/per_context/primordials:409:43,0x13fcdd0a570,~
code-source-info,0x5b6ecae64e,6,12438,12718,C0O12438C13O12574C27O12574C32O12718,,
code-creation,LazyCompile,10,424486,0x5b6ecae7de,46, node:internal/per_context/primordials:412:15,0x5b6ecae5a0,~
code-source-info,0x5b6ecae7de,6,12586,12713,C0O12703C14O12601C20O12676C28O12683C34O12702C39O12703C45O12713,,
code-creation,LazyCompile,10,424564,0x5b6ecae926,27,SafePromise node:internal/per_context/primordials:393:16,0x13fcdd0a468,~
code-source-info,0x5b6ecae926,6,11762,11793,C3O11775C7O11781C11O11775C26O11792,,
code-creation,LazyCompile,10,424649,0x5b6ecaea1e,22, node:internal/per_context/primordials:413:21,0x5b6ecae728,~
code-source-info,0x5b6ecaea1e,6,12617,12666,C0O12627C16O12627C21O12666,,
code-creation,LazyCompile,10,424753,0x5b6ecaeb16,19,allocUnsafeSlow node:buffer:383:50,0x423ed76e58,~
code-source-info,0x5b6ecaeb16,24,11595,11663,C0O11607C5O11607C9O11628C14O11635C18O11660,,
code-creation,LazyCompile,10,424840,0x5b6ecaec26,54, node:buffer:349:36,0x423ed76d30,~
code-source-info,0x5b6ecaec26,24,10539,10699,C0O10554C8O10554C13O10587C14O10598C21O10614C23O10611C28O10634C33O10666C46O10640C51O10634C53O10698,,
code-creation,LazyCompile,10,424924,0x5b6ecaed4e,30,validateNumber node:internal/validators:123:24,0x13fcdd3c9f8,~
code-source-info,0x5b6ecaed4e,15,3673,3785,C0O3692C6O3728C22O3734C27O3728C29O3784,,
code-creation,LazyCompile,10,425007,0x5b6ecaee7e,71,createUnsafeBuffer node:internal/buffer:1059:28,0x3d773fcbd18,~
code-source-info,0x5b6ecaee7e,25,31379,31495,C0O31391C8O31403C15O31422C22O31429C39O31471C48O31483C70O31494,,
code-creation,LazyCompile,10,425238,0x5b6ecaf16e,248,close node:internal/fs/promises:189:11,0x39aa2870ed8,~
code-source-info,0x5b6ecaf16e,123,4398,5219,C0O4411C7O4420C9O4419C15O4425C20O4442C27O4449C30O4466C31O4481C38O4490C40O4489C45O4515C52O4527C54O4526C57O4542C58O4557C65O4562C73O4568C77O4577C84O4586C86O4585C91O4593C96O4609C103O4614C108O4619C112O4632C119O4637C126O4654C136O4697C138O4696C142O4706C147O4706C157O4654C162O4652C168O4798C175O4803C182O4820C189O4862C199O4858C210O4820C215O4818C219O5162C222O5167C230O5167C235O5187C242O5199C244O5198C247O5214,,
code-creation,LazyCompile,10,425446,0x5b6ecaf4d6,17, node:internal/fs/promises:203:9,0x5b6ecaef58,~
code-source-info,0x5b6ecaf4d6,123,4724,4766,C0O4732C7O4737C11O4752C16O4765,,
code-creation,LazyCompile,10,425640,0x5b6ecaf86e,193,moduleStrategy node:internal/modules/esm/translators:110:56,0x39aa287b7e0,~
code-source-info,0x5b6ecaf86e,125,3150,3602,C0O3150C23O3177C36O3177C41O3222C46O3231C52O3253C59O3253C64O3290C76O3326C81O3290C85O3352C106O3352C112O3401C119O3412C124O3424C129O3428C134O3465C146O3550C150O3424C156O3585C168O3599,,
code-creation,LazyCompile,10,425769,0x5b6ecb05d6,83,assertBufferSource node:internal/modules/esm/translators:74:28,0x39aa287b5b0,~
code-source-info,0x5b6ecb05d6,125,2103,2510,C0O2138C10O2190C11O2197C12O2254C15O2254C19O2214C24O2233C29O2274C35O2301C41O2332C42O2339C43O2348C50O2401C77O2354C82O2348,,
code-creation,LazyCompile,10,425861,0x5b6ecb072e,31,lazyTypes node:internal/modules/esm/translators:22:19,0x39aa287b510,~
code-source-info,0x5b6ecb072e,125,417,514,C0O425C6O446C10O460C11O464C17O480C24O478C30O511,,
code-creation,LazyCompile,10,425954,0x5b6ecb0846,72,stringify node:internal/modules/esm/translators:90:19,0x39aa287b600,~
code-source-info,0x5b6ecb0846,125,2532,2737,C0O2544C6O2574C8O2586C9O2590C20O2590C25O2645C33O2678C36O2674C45O2694C50O2653C56O2706C61O2721C66O2721C71O2734,,
code-creation,LazyCompile,10,426136,0x5b6ecb0a36,206,TextDecoder node:internal/encoding:379:16,0x3d773fd3f88,~
script-source,27,node:internal/encoding,'use strict';\x0d\n\x0d\n// An implementation of the WHATWG Encoding Standard\x0d\n// https://encoding.spec.whatwg.org\x0d\n\x0d\nconst {\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectGetOwnPropertyDescriptors\x2C\x0d\n  SafeMap\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  Symbol\x2C\x0d\n  SymbolToStringTag\x2C\x0d\n  Uint32Array\x2C\x0d\n  Uint8Array\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  ERR_ENCODING_INVALID_ENCODED_DATA\x2C\x0d\n  ERR_ENCODING_NOT_SUPPORTED\x2C\x0d\n  ERR_INVALID_ARG_TYPE\x2C\x0d\n  ERR_INVALID_THIS\x2C\x0d\n  ERR_NO_ICU\x0d\n} = require('internal/errors').codes;\x0d\nconst kHandle = Symbol('handle');\x0d\nconst kFlags = Symbol('flags');\x0d\nconst kEncoding = Symbol('encoding');\x0d\nconst kDecoder = Symbol('decoder');\x0d\nconst kEncoder = Symbol('encoder');\x0d\n\x0d\nconst {\x0d\n  getConstructorOf\x2C\x0d\n  customInspectSymbol: inspect\x0d\n} = require('internal/util');\x0d\n\x0d\nconst {\x0d\n  isAnyArrayBuffer\x2C\x0d\n  isArrayBufferView\x2C\x0d\n  isUint8Array\x0d\n} = require('internal/util/types');\x0d\n\x0d\nconst {\x0d\n  validateString\x2C\x0d\n  validateObject\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst {\x0d\n  encodeInto\x2C\x0d\n  encodeUtf8String\x0d\n} = internalBinding('buffer');\x0d\n\x0d\nlet Buffer;\x0d\nfunction lazyBuffer() {\x0d\n  if (Buffer === undefined)\x0d\n    Buffer = require('buffer').Buffer;\x0d\n  return Buffer;\x0d\n}\x0d\n\x0d\nfunction validateEncoder(obj) {\x0d\n  if (obj == null || obj[kEncoder] !== true)\x0d\n    throw new ERR_INVALID_THIS('TextEncoder');\x0d\n}\x0d\n\x0d\nfunction validateDecoder(obj) {\x0d\n  if (obj == null || obj[kDecoder] !== true)\x0d\n    throw new ERR_INVALID_THIS('TextDecoder');\x0d\n}\x0d\n\x0d\nconst CONVERTER_FLAGS_FLUSH = 0x1;\x0d\nconst CONVERTER_FLAGS_FATAL = 0x2;\x0d\nconst CONVERTER_FLAGS_IGNORE_BOM = 0x4;\x0d\n\x0d\nconst empty = new Uint8Array(0);\x0d\n\x0d\nconst encodings = new SafeMap([\x0d\n  ['unicode-1-1-utf-8'\x2C 'utf-8']\x2C\x0d\n  ['utf8'\x2C 'utf-8']\x2C\x0d\n  ['utf-8'\x2C 'utf-8']\x2C\x0d\n  ['866'\x2C 'ibm866']\x2C\x0d\n  ['cp866'\x2C 'ibm866']\x2C\x0d\n  ['csibm866'\x2C 'ibm866']\x2C\x0d\n  ['ibm866'\x2C 'ibm866']\x2C\x0d\n  ['csisolatin2'\x2C 'iso-8859-2']\x2C\x0d\n  ['iso-8859-2'\x2C 'iso-8859-2']\x2C\x0d\n  ['iso-ir-101'\x2C 'iso-8859-2']\x2C\x0d\n  ['iso8859-2'\x2C 'iso-8859-2']\x2C\x0d\n  ['iso88592'\x2C 'iso-8859-2']\x2C\x0d\n  ['iso_8859-2'\x2C 'iso-8859-2']\x2C\x0d\n  ['iso_8859-2:1987'\x2C 'iso-8859-2']\x2C\x0d\n  ['l2'\x2C 'iso-8859-2']\x2C\x0d\n  ['latin2'\x2C 'iso-8859-2']\x2C\x0d\n  ['csisolatin3'\x2C 'iso-8859-3']\x2C\x0d\n  ['iso-8859-3'\x2C 'iso-8859-3']\x2C\x0d\n  ['iso-ir-109'\x2C 'iso-8859-3']\x2C\x0d\n  ['iso8859-3'\x2C 'iso-8859-3']\x2C\x0d\n  ['iso88593'\x2C 'iso-8859-3']\x2C\x0d\n  ['iso_8859-3'\x2C 'iso-8859-3']\x2C\x0d\n  ['iso_8859-3:1988'\x2C 'iso-8859-3']\x2C\x0d\n  ['l3'\x2C 'iso-8859-3']\x2C\x0d\n  ['latin3'\x2C 'iso-8859-3']\x2C\x0d\n  ['csisolatin4'\x2C 'iso-8859-4']\x2C\x0d\n  ['iso-8859-4'\x2C 'iso-8859-4']\x2C\x0d\n  ['iso-ir-110'\x2C 'iso-8859-4']\x2C\x0d\n  ['iso8859-4'\x2C 'iso-8859-4']\x2C\x0d\n  ['iso88594'\x2C 'iso-8859-4']\x2C\x0d\n  ['iso_8859-4'\x2C 'iso-8859-4']\x2C\x0d\n  ['iso_8859-4:1988'\x2C 'iso-8859-4']\x2C\x0d\n  ['l4'\x2C 'iso-8859-4']\x2C\x0d\n  ['latin4'\x2C 'iso-8859-4']\x2C\x0d\n  ['csisolatincyrillic'\x2C 'iso-8859-5']\x2C\x0d\n  ['cyrillic'\x2C 'iso-8859-5']\x2C\x0d\n  ['iso-8859-5'\x2C 'iso-8859-5']\x2C\x0d\n  ['iso-ir-144'\x2C 'iso-8859-5']\x2C\x0d\n  ['iso8859-5'\x2C 'iso-8859-5']\x2C\x0d\n  ['iso88595'\x2C 'iso-8859-5']\x2C\x0d\n  ['iso_8859-5'\x2C 'iso-8859-5']\x2C\x0d\n  ['iso_8859-5:1988'\x2C 'iso-8859-5']\x2C\x0d\n  ['arabic'\x2C 'iso-8859-6']\x2C\x0d\n  ['asmo-708'\x2C 'iso-8859-6']\x2C\x0d\n  ['csiso88596e'\x2C 'iso-8859-6']\x2C\x0d\n  ['csiso88596i'\x2C 'iso-8859-6']\x2C\x0d\n  ['csisolatinarabic'\x2C 'iso-8859-6']\x2C\x0d\n  ['ecma-114'\x2C 'iso-8859-6']\x2C\x0d\n  ['iso-8859-6'\x2C 'iso-8859-6']\x2C\x0d\n  ['iso-8859-6-e'\x2C 'iso-8859-6']\x2C\x0d\n  ['iso-8859-6-i'\x2C 'iso-8859-6']\x2C\x0d\n  ['iso-ir-127'\x2C 'iso-8859-6']\x2C\x0d\n  ['iso8859-6'\x2C 'iso-8859-6']\x2C\x0d\n  ['iso88596'\x2C 'iso-8859-6']\x2C\x0d\n  ['iso_8859-6'\x2C 'iso-8859-6']\x2C\x0d\n  ['iso_8859-6:1987'\x2C 'iso-8859-6']\x2C\x0d\n  ['csisolatingreek'\x2C 'iso-8859-7']\x2C\x0d\n  ['ecma-118'\x2C 'iso-8859-7']\x2C\x0d\n  ['elot_928'\x2C 'iso-8859-7']\x2C\x0d\n  ['greek'\x2C 'iso-8859-7']\x2C\x0d\n  ['greek8'\x2C 'iso-8859-7']\x2C\x0d\n  ['iso-8859-7'\x2C 'iso-8859-7']\x2C\x0d\n  ['iso-ir-126'\x2C 'iso-8859-7']\x2C\x0d\n  ['iso8859-7'\x2C 'iso-8859-7']\x2C\x0d\n  ['iso88597'\x2C 'iso-8859-7']\x2C\x0d\n  ['iso_8859-7'\x2C 'iso-8859-7']\x2C\x0d\n  ['iso_8859-7:1987'\x2C 'iso-8859-7']\x2C\x0d\n  ['sun_eu_greek'\x2C 'iso-8859-7']\x2C\x0d\n  ['csiso88598e'\x2C 'iso-8859-8']\x2C\x0d\n  ['csisolatinhebrew'\x2C 'iso-8859-8']\x2C\x0d\n  ['hebrew'\x2C 'iso-8859-8']\x2C\x0d\n  ['iso-8859-8'\x2C 'iso-8859-8']\x2C\x0d\n  ['iso-8859-8-e'\x2C 'iso-8859-8']\x2C\x0d\n  ['iso-ir-138'\x2C 'iso-8859-8']\x2C\x0d\n  ['iso8859-8'\x2C 'iso-8859-8']\x2C\x0d\n  ['iso88598'\x2C 'iso-8859-8']\x2C\x0d\n  ['iso_8859-8'\x2C 'iso-8859-8']\x2C\x0d\n  ['iso_8859-8:1988'\x2C 'iso-8859-8']\x2C\x0d\n  ['visual'\x2C 'iso-8859-8']\x2C\x0d\n  ['csiso88598i'\x2C 'iso-8859-8-i']\x2C\x0d\n  ['iso-8859-8-i'\x2C 'iso-8859-8-i']\x2C\x0d\n  ['logical'\x2C 'iso-8859-8-i']\x2C\x0d\n  ['csisolatin6'\x2C 'iso-8859-10']\x2C\x0d\n  ['iso-8859-10'\x2C 'iso-8859-10']\x2C\x0d\n  ['iso-ir-157'\x2C 'iso-8859-10']\x2C\x0d\n  ['iso8859-10'\x2C 'iso-8859-10']\x2C\x0d\n  ['iso885910'\x2C 'iso-8859-10']\x2C\x0d\n  ['l6'\x2C 'iso-8859-10']\x2C\x0d\n  ['latin6'\x2C 'iso-8859-10']\x2C\x0d\n  ['iso-8859-13'\x2C 'iso-8859-13']\x2C\x0d\n  ['iso8859-13'\x2C 'iso-8859-13']\x2C\x0d\n  ['iso885913'\x2C 'iso-8859-13']\x2C\x0d\n  ['iso-8859-14'\x2C 'iso-8859-14']\x2C\x0d\n  ['iso8859-14'\x2C 'iso-8859-14']\x2C\x0d\n  ['iso885914'\x2C 'iso-8859-14']\x2C\x0d\n  ['csisolatin9'\x2C 'iso-8859-15']\x2C\x0d\n  ['iso-8859-15'\x2C 'iso-8859-15']\x2C\x0d\n  ['iso8859-15'\x2C 'iso-8859-15']\x2C\x0d\n  ['iso885915'\x2C 'iso-8859-15']\x2C\x0d\n  ['iso_8859-15'\x2C 'iso-8859-15']\x2C\x0d\n  ['l9'\x2C 'iso-8859-15']\x2C\x0d\n  ['cskoi8r'\x2C 'koi8-r']\x2C\x0d\n  ['koi'\x2C 'koi8-r']\x2C\x0d\n  ['koi8'\x2C 'koi8-r']\x2C\x0d\n  ['koi8-r'\x2C 'koi8-r']\x2C\x0d\n  ['koi8_r'\x2C 'koi8-r']\x2C\x0d\n  ['koi8-ru'\x2C 'koi8-u']\x2C\x0d\n  ['koi8-u'\x2C 'koi8-u']\x2C\x0d\n  ['csmacintosh'\x2C 'macintosh']\x2C\x0d\n  ['mac'\x2C 'macintosh']\x2C\x0d\n  ['macintosh'\x2C 'macintosh']\x2C\x0d\n  ['x-mac-roman'\x2C 'macintosh']\x2C\x0d\n  ['dos-874'\x2C 'windows-874']\x2C\x0d\n  ['iso-8859-11'\x2C 'windows-874']\x2C\x0d\n  ['iso8859-11'\x2C 'windows-874']\x2C\x0d\n  ['iso885911'\x2C 'windows-874']\x2C\x0d\n  ['tis-620'\x2C 'windows-874']\x2C\x0d\n  ['windows-874'\x2C 'windows-874']\x2C\x0d\n  ['cp1250'\x2C 'windows-1250']\x2C\x0d\n  ['windows-1250'\x2C 'windows-1250']\x2C\x0d\n  ['x-cp1250'\x2C 'windows-1250']\x2C\x0d\n  ['cp1251'\x2C 'windows-1251']\x2C\x0d\n  ['windows-1251'\x2C 'windows-1251']\x2C\x0d\n  ['x-cp1251'\x2C 'windows-1251']\x2C\x0d\n  ['ansi_x3.4-1968'\x2C 'windows-1252']\x2C\x0d\n  ['ascii'\x2C 'windows-1252']\x2C\x0d\n  ['cp1252'\x2C 'windows-1252']\x2C\x0d\n  ['cp819'\x2C 'windows-1252']\x2C\x0d\n  ['csisolatin1'\x2C 'windows-1252']\x2C\x0d\n  ['ibm819'\x2C 'windows-1252']\x2C\x0d\n  ['iso-8859-1'\x2C 'windows-1252']\x2C\x0d\n  ['iso-ir-100'\x2C 'windows-1252']\x2C\x0d\n  ['iso8859-1'\x2C 'windows-1252']\x2C\x0d\n  ['iso88591'\x2C 'windows-1252']\x2C\x0d\n  ['iso_8859-1'\x2C 'windows-1252']\x2C\x0d\n  ['iso_8859-1:1987'\x2C 'windows-1252']\x2C\x0d\n  ['l1'\x2C 'windows-1252']\x2C\x0d\n  ['latin1'\x2C 'windows-1252']\x2C\x0d\n  ['us-ascii'\x2C 'windows-1252']\x2C\x0d\n  ['windows-1252'\x2C 'windows-1252']\x2C\x0d\n  ['x-cp1252'\x2C 'windows-1252']\x2C\x0d\n  ['cp1253'\x2C 'windows-1253']\x2C\x0d\n  ['windows-1253'\x2C 'windows-1253']\x2C\x0d\n  ['x-cp1253'\x2C 'windows-1253']\x2C\x0d\n  ['cp1254'\x2C 'windows-1254']\x2C\x0d\n  ['csisolatin5'\x2C 'windows-1254']\x2C\x0d\n  ['iso-8859-9'\x2C 'windows-1254']\x2C\x0d\n  ['iso-ir-148'\x2C 'windows-1254']\x2C\x0d\n  ['iso8859-9'\x2C 'windows-1254']\x2C\x0d\n  ['iso88599'\x2C 'windows-1254']\x2C\x0d\n  ['iso_8859-9'\x2C 'windows-1254']\x2C\x0d\n  ['iso_8859-9:1989'\x2C 'windows-1254']\x2C\x0d\n  ['l5'\x2C 'windows-1254']\x2C\x0d\n  ['latin5'\x2C 'windows-1254']\x2C\x0d\n  ['windows-1254'\x2C 'windows-1254']\x2C\x0d\n  ['x-cp1254'\x2C 'windows-1254']\x2C\x0d\n  ['cp1255'\x2C 'windows-1255']\x2C\x0d\n  ['windows-1255'\x2C 'windows-1255']\x2C\x0d\n  ['x-cp1255'\x2C 'windows-1255']\x2C\x0d\n  ['cp1256'\x2C 'windows-1256']\x2C\x0d\n  ['windows-1256'\x2C 'windows-1256']\x2C\x0d\n  ['x-cp1256'\x2C 'windows-1256']\x2C\x0d\n  ['cp1257'\x2C 'windows-1257']\x2C\x0d\n  ['windows-1257'\x2C 'windows-1257']\x2C\x0d\n  ['x-cp1257'\x2C 'windows-1257']\x2C\x0d\n  ['cp1258'\x2C 'windows-1258']\x2C\x0d\n  ['windows-1258'\x2C 'windows-1258']\x2C\x0d\n  ['x-cp1258'\x2C 'windows-1258']\x2C\x0d\n  ['x-mac-cyrillic'\x2C 'x-mac-cyrillic']\x2C\x0d\n  ['x-mac-ukrainian'\x2C 'x-mac-cyrillic']\x2C\x0d\n  ['chinese'\x2C 'gbk']\x2C\x0d\n  ['csgb2312'\x2C 'gbk']\x2C\x0d\n  ['csiso58gb231280'\x2C 'gbk']\x2C\x0d\n  ['gb2312'\x2C 'gbk']\x2C\x0d\n  ['gb_2312'\x2C 'gbk']\x2C\x0d\n  ['gb_2312-80'\x2C 'gbk']\x2C\x0d\n  ['gbk'\x2C 'gbk']\x2C\x0d\n  ['iso-ir-58'\x2C 'gbk']\x2C\x0d\n  ['x-gbk'\x2C 'gbk']\x2C\x0d\n  ['gb18030'\x2C 'gb18030']\x2C\x0d\n  ['big5'\x2C 'big5']\x2C\x0d\n  ['big5-hkscs'\x2C 'big5']\x2C\x0d\n  ['cn-big5'\x2C 'big5']\x2C\x0d\n  ['csbig5'\x2C 'big5']\x2C\x0d\n  ['x-x-big5'\x2C 'big5']\x2C\x0d\n  ['cseucpkdfmtjapanese'\x2C 'euc-jp']\x2C\x0d\n  ['euc-jp'\x2C 'euc-jp']\x2C\x0d\n  ['x-euc-jp'\x2C 'euc-jp']\x2C\x0d\n  ['csiso2022jp'\x2C 'iso-2022-jp']\x2C\x0d\n  ['iso-2022-jp'\x2C 'iso-2022-jp']\x2C\x0d\n  ['csshiftjis'\x2C 'shift_jis']\x2C\x0d\n  ['ms932'\x2C 'shift_jis']\x2C\x0d\n  ['ms_kanji'\x2C 'shift_jis']\x2C\x0d\n  ['shift-jis'\x2C 'shift_jis']\x2C\x0d\n  ['shift_jis'\x2C 'shift_jis']\x2C\x0d\n  ['sjis'\x2C 'shift_jis']\x2C\x0d\n  ['windows-31j'\x2C 'shift_jis']\x2C\x0d\n  ['x-sjis'\x2C 'shift_jis']\x2C\x0d\n  ['cseuckr'\x2C 'euc-kr']\x2C\x0d\n  ['csksc56011987'\x2C 'euc-kr']\x2C\x0d\n  ['euc-kr'\x2C 'euc-kr']\x2C\x0d\n  ['iso-ir-149'\x2C 'euc-kr']\x2C\x0d\n  ['korean'\x2C 'euc-kr']\x2C\x0d\n  ['ks_c_5601-1987'\x2C 'euc-kr']\x2C\x0d\n  ['ks_c_5601-1989'\x2C 'euc-kr']\x2C\x0d\n  ['ksc5601'\x2C 'euc-kr']\x2C\x0d\n  ['ksc_5601'\x2C 'euc-kr']\x2C\x0d\n  ['windows-949'\x2C 'euc-kr']\x2C\x0d\n  ['utf-16be'\x2C 'utf-16be']\x2C\x0d\n  ['utf-16le'\x2C 'utf-16le']\x2C\x0d\n  ['utf-16'\x2C 'utf-16le']\x2C\x0d\n]);\x0d\n\x0d\n// Unfortunately\x2C String.prototype.trim also removes non-ascii whitespace\x2C\x0d\n// so we have to do this manually\x0d\nfunction trimAsciiWhitespace(label) {\x0d\n  let s = 0;\x0d\n  let e = label.length;\x0d\n  while (s < e && (\x0d\n    label[s] === '\\u0009' ||\x0d\n    label[s] === '\\u000a' ||\x0d\n    label[s] === '\\u000c' ||\x0d\n    label[s] === '\\u000d' ||\x0d\n    label[s] === '\\u0020')) {\x0d\n    s++;\x0d\n  }\x0d\n  while (e > s && (\x0d\n    label[e - 1] === '\\u0009' ||\x0d\n    label[e - 1] === '\\u000a' ||\x0d\n    label[e - 1] === '\\u000c' ||\x0d\n    label[e - 1] === '\\u000d' ||\x0d\n    label[e - 1] === '\\u0020')) {\x0d\n    e--;\x0d\n  }\x0d\n  return StringPrototypeSlice(label\x2C s\x2C e);\x0d\n}\x0d\n\x0d\nfunction getEncodingFromLabel(label) {\x0d\n  const enc = encodings.get(label);\x0d\n  if (enc !== undefined) return enc;\x0d\n  return encodings.get(trimAsciiWhitespace(label.toLowerCase()));\x0d\n}\x0d\n\x0d\nconst encodeIntoResults = new Uint32Array(2);\x0d\n\x0d\nclass TextEncoder {\x0d\n  constructor() {\x0d\n    this[kEncoder] = true;\x0d\n  }\x0d\n\x0d\n  get encoding() {\x0d\n    validateEncoder(this);\x0d\n    return 'utf-8';\x0d\n  }\x0d\n\x0d\n  encode(input = '') {\x0d\n    validateEncoder(this);\x0d\n    return encodeUtf8String(`${input}`);\x0d\n  }\x0d\n\x0d\n  encodeInto(src\x2C dest) {\x0d\n    validateEncoder(this);\x0d\n    validateString(src\x2C 'src');\x0d\n    if (!dest || !isUint8Array(dest))\x0d\n      throw new ERR_INVALID_ARG_TYPE('dest'\x2C 'Uint8Array'\x2C dest);\x0d\n    encodeInto(src\x2C dest\x2C encodeIntoResults);\x0d\n    return { read: encodeIntoResults[0]\x2C written: encodeIntoResults[1] };\x0d\n  }\x0d\n\x0d\n  [inspect](depth\x2C opts) {\x0d\n    validateEncoder(this);\x0d\n    if (typeof depth === 'number' && depth < 0)\x0d\n      return this;\x0d\n    const ctor = getConstructorOf(this);\x0d\n    const obj = ObjectCreate({\x0d\n      constructor: ctor === null ? TextEncoder : ctor\x0d\n    });\x0d\n    obj.encoding = this.encoding;\x0d\n    // Lazy to avoid circular dependency\x0d\n    return require('internal/util/inspect').inspect(obj\x2C opts);\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectDefineProperties(\x0d\n  TextEncoder.prototype\x2C {\x0d\n    'encode': { enumerable: true }\x2C\x0d\n    'encodeInto': { enumerable: true }\x2C\x0d\n    'encoding': { enumerable: true }\x2C\x0d\n    [SymbolToStringTag]: { configurable: true\x2C value: 'TextEncoder' }\x2C\x0d\n  });\x0d\n\x0d\nconst TextDecoder =\x0d\n  internalBinding('config').hasIntl ?\x0d\n    makeTextDecoderICU() :\x0d\n    makeTextDecoderJS();\x0d\n\x0d\nfunction makeTextDecoderICU() {\x0d\n  const {\x0d\n    decode: _decode\x2C\x0d\n    getConverter\x2C\x0d\n  } = internalBinding('icu');\x0d\n\x0d\n  class TextDecoder {\x0d\n    constructor(encoding = 'utf-8'\x2C options = {}) {\x0d\n      encoding = `${encoding}`;\x0d\n      validateObject(options\x2C 'options'\x2C {\x0d\n        nullable: true\x2C\x0d\n        allowArray: true\x2C\x0d\n        allowFunction: true\x2C\x0d\n      });\x0d\n\x0d\n      const enc = getEncodingFromLabel(encoding);\x0d\n      if (enc === undefined)\x0d\n        throw new ERR_ENCODING_NOT_SUPPORTED(encoding);\x0d\n\x0d\n      let flags = 0;\x0d\n      if (options !== null) {\x0d\n        flags |= options.fatal ? CONVERTER_FLAGS_FATAL : 0;\x0d\n        flags |= options.ignoreBOM ? CONVERTER_FLAGS_IGNORE_BOM : 0;\x0d\n      }\x0d\n\x0d\n      const handle = getConverter(enc\x2C flags);\x0d\n      if (handle === undefined)\x0d\n        throw new ERR_ENCODING_NOT_SUPPORTED(encoding);\x0d\n\x0d\n      this[kDecoder] = true;\x0d\n      this[kHandle] = handle;\x0d\n      this[kFlags] = flags;\x0d\n      this[kEncoding] = enc;\x0d\n    }\x0d\n\x0d\n\x0d\n    decode(input = empty\x2C options = {}) {\x0d\n      validateDecoder(this);\x0d\n      if (isAnyArrayBuffer(input)) {\x0d\n        input = lazyBuffer().from(input);\x0d\n      } else if (!isArrayBufferView(input)) {\x0d\n        throw new ERR_INVALID_ARG_TYPE('input'\x2C\x0d\n                                       ['ArrayBuffer'\x2C 'ArrayBufferView']\x2C\x0d\n                                       input);\x0d\n      }\x0d\n      validateObject(options\x2C 'options'\x2C {\x0d\n        nullable: true\x2C\x0d\n        allowArray: true\x2C\x0d\n        allowFunction: true\x2C\x0d\n      });\x0d\n\x0d\n      let flags = 0;\x0d\n      if (options !== null)\x0d\n        flags |= options.stream ? 0 : CONVERTER_FLAGS_FLUSH;\x0d\n\x0d\n      const ret = _decode(this[kHandle]\x2C input\x2C flags);\x0d\n      if (typeof ret === 'number') {\x0d\n        throw new ERR_ENCODING_INVALID_ENCODED_DATA(this.encoding\x2C ret);\x0d\n      }\x0d\n      return ret.toString('ucs2');\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return TextDecoder;\x0d\n}\x0d\n\x0d\nfunction makeTextDecoderJS() {\x0d\n  let StringDecoder;\x0d\n  function lazyStringDecoder() {\x0d\n    if (StringDecoder === undefined)\x0d\n      ({ StringDecoder } = require('string_decoder'));\x0d\n    return StringDecoder;\x0d\n  }\x0d\n\x0d\n  const kBOMSeen = Symbol('BOM seen');\x0d\n\x0d\n  function hasConverter(encoding) {\x0d\n    return encoding === 'utf-8' || encoding === 'utf-16le';\x0d\n  }\x0d\n\x0d\n  class TextDecoder {\x0d\n    constructor(encoding = 'utf-8'\x2C options = {}) {\x0d\n      encoding = `${encoding}`;\x0d\n      validateObject(options\x2C 'options'\x2C {\x0d\n        nullable: true\x2C\x0d\n        allowArray: true\x2C\x0d\n        allowFunction: true\x2C\x0d\n      });\x0d\n\x0d\n      const enc = getEncodingFromLabel(encoding);\x0d\n      if (enc === undefined || !hasConverter(enc))\x0d\n        throw new ERR_ENCODING_NOT_SUPPORTED(encoding);\x0d\n\x0d\n      let flags = 0;\x0d\n      if (options !== null) {\x0d\n        if (options.fatal) {\x0d\n          throw new ERR_NO_ICU('"fatal" option');\x0d\n        }\x0d\n        flags |= options.ignoreBOM ? CONVERTER_FLAGS_IGNORE_BOM : 0;\x0d\n      }\x0d\n\x0d\n      this[kDecoder] = true;\x0d\n      // StringDecoder will normalize WHATWG encoding to Node.js encoding.\x0d\n      this[kHandle] = new (lazyStringDecoder())(enc);\x0d\n      this[kFlags] = flags;\x0d\n      this[kEncoding] = enc;\x0d\n      this[kBOMSeen] = false;\x0d\n    }\x0d\n\x0d\n    decode(input = empty\x2C options = {}) {\x0d\n      validateDecoder(this);\x0d\n      if (isAnyArrayBuffer(input)) {\x0d\n        input = lazyBuffer().from(input);\x0d\n      } else if (isArrayBufferView(input)) {\x0d\n        input = lazyBuffer().from(input.buffer\x2C input.byteOffset\x2C\x0d\n                                  input.byteLength);\x0d\n      } else {\x0d\n        throw new ERR_INVALID_ARG_TYPE('input'\x2C\x0d\n                                       ['ArrayBuffer'\x2C 'ArrayBufferView']\x2C\x0d\n                                       input);\x0d\n      }\x0d\n      validateObject(options\x2C 'options'\x2C {\x0d\n        nullable: true\x2C\x0d\n        allowArray: true\x2C\x0d\n        allowFunction: true\x2C\x0d\n      });\x0d\n\x0d\n      if (this[kFlags] & CONVERTER_FLAGS_FLUSH) {\x0d\n        this[kBOMSeen] = false;\x0d\n      }\x0d\n\x0d\n      if (options !== null && options.stream) {\x0d\n        this[kFlags] &= ~CONVERTER_FLAGS_FLUSH;\x0d\n      } else {\x0d\n        this[kFlags] |= CONVERTER_FLAGS_FLUSH;\x0d\n      }\x0d\n\x0d\n      let result = this[kFlags] & CONVERTER_FLAGS_FLUSH ?\x0d\n        this[kHandle].end(input) :\x0d\n        this[kHandle].write(input);\x0d\n\x0d\n      if (result.length > 0 &&\x0d\n          !this[kBOMSeen] &&\x0d\n          !(this[kFlags] & CONVERTER_FLAGS_IGNORE_BOM)) {\x0d\n        // If the very first result in the stream is a BOM\x2C and we are not\x0d\n        // explicitly told to ignore it\x2C then we discard it.\x0d\n        if (result[0] === '\\ufeff') {\x0d\n          result = StringPrototypeSlice(result\x2C 1);\x0d\n        }\x0d\n        this[kBOMSeen] = true;\x0d\n      }\x0d\n\x0d\n      return result;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return TextDecoder;\x0d\n}\x0d\n\x0d\n// Mix in some shared properties.\x0d\nObjectDefineProperties(\x0d\n  TextDecoder.prototype\x2C\x0d\n  ObjectGetOwnPropertyDescriptors({\x0d\n    get encoding() {\x0d\n      validateDecoder(this);\x0d\n      return this[kEncoding];\x0d\n    }\x2C\x0d\n\x0d\n    get fatal() {\x0d\n      validateDecoder(this);\x0d\n      return (this[kFlags] & CONVERTER_FLAGS_FATAL) === CONVERTER_FLAGS_FATAL;\x0d\n    }\x2C\x0d\n\x0d\n    get ignoreBOM() {\x0d\n      validateDecoder(this);\x0d\n      return (this[kFlags] & CONVERTER_FLAGS_IGNORE_BOM) ===\x0d\n              CONVERTER_FLAGS_IGNORE_BOM;\x0d\n    }\x2C\x0d\n\x0d\n    [inspect](depth\x2C opts) {\x0d\n      validateDecoder(this);\x0d\n      if (typeof depth === 'number' && depth < 0)\x0d\n        return this;\x0d\n      const constructor = getConstructorOf(this) || TextDecoder;\x0d\n      const obj = ObjectCreate({ constructor });\x0d\n      obj.encoding = this.encoding;\x0d\n      obj.fatal = this.fatal;\x0d\n      obj.ignoreBOM = this.ignoreBOM;\x0d\n      if (opts.showHidden) {\x0d\n        obj[kFlags] = this[kFlags];\x0d\n        obj[kHandle] = this[kHandle];\x0d\n      }\x0d\n      // Lazy to avoid circular dependency\x0d\n      const { inspect } = require('internal/util/inspect');\x0d\n      return `${constructor.name} ${inspect(obj)}`;\x0d\n    }\x0d\n  })\x0d\n);\x0d\n\x0d\nObjectDefineProperties(TextDecoder.prototype\x2C {\x0d\n  decode: { enumerable: true }\x2C\x0d\n  [inspect]: { enumerable: false }\x2C\x0d\n  [SymbolToStringTag]: {\x0d\n    configurable: true\x2C\x0d\n    value: 'TextDecoder'\x0d\n  }\x0d\n});\x0d\n\x0d\nmodule.exports = {\x0d\n  getEncodingFromLabel\x2C\x0d\n  TextDecoder\x2C\x0d\n  TextEncoder\x0d\n};\x0d\n
code-source-info,0x5b6ecb0a36,27,10677,11487,C15O10677C21O10721C25O10754C35O10769C43O10754C48O10905C53O10905C58O10944C60O10976C69O10982C74O10976C75O11045C77O11055C81O11105C94O11113C103O11166C116O11178C125O11243C130O11243C136O11276C138O11311C147O11317C152O11311C153O11368C157O11373C161O11383C165O11398C169O11403C174O11412C178O11429C182O11434C187O11442C191O11458C195O11463C200O11474C205O11486,,
code-creation,LazyCompile,10,427718,0x5b6ecb1eb6,55,getEncodingFromLabel node:internal/encoding:313:30,0x3d773fd3cc0,~
code-source-info,0x5b6ecb1eb6,27,8957,9111,C0O8982C5O8992C10O8992C16O9007C18O9030C20O9041C21O9045C26O9062C34O9092C39O9092C44O9066C49O9062C54O9108,,
code-creation,LazyCompile,10,427975,0x5b6ecb21c6,227,decode node:internal/encoding:408:11,0x3d773fd40a8,~
code-source-info,0x5b6ecb21c6,27,11503,12349,C8O11512C25O11542C30O11542C34O11572C41O11576C47O11612C52O11620C56O11632C61O11633C69O11660C76O11665C82O11702C102O11708C107O11702C108O11882C118O11897C126O11882C131O12033C133O12043C137O12091C153O12104C159O12148C168O12161C170O12160C180O12148C186O12193C190O12233C197O12282C207O12239C212O12233C213O12325C221O12325C226O12342,,
code-creation,LazyCompile,10,428155,0x5b6ecb23ee,37,validateDecoder node:internal/encoding:64:25,0x3d773fd3c20,~
code-source-info,0x5b6ecb23ee,27,1332,1436,C0O1343C7O1366C9O1365C14O1376C19O1391C29O1397C34O1391C36O1435,,
code-creation,LazyCompile,10,428382,0x5b6ecb2566,162,toString node:buffer:783:46,0x423ed78c70,~
code-source-info,0x5b6ecb2566,24,24068,24660,C0O24068C2O24110C8O24117C13O24143C20O24161C25O24143C31O24169C32O24197C37O24210C38O24220C43O24231C48O24250C50O24260C55O24273C57O24283C58O24297C65O24314C71O24343C76O24355C83O24379C90O24394C92O24402C97O24417C99O24427C100O24433C104O24478C109O24478C115O24500C116O24518C119O24518C124O24547C126O24575C133O24581C138O24575C139O24633C156O24633C161O24657,,
code-creation,LazyCompile,10,428647,0x5b6ecb2826,499,getEncodingOps node:buffer:679:24,0x423ed78ac8,~
code-source-info,0x5b6ecb
code-creation,LazyCompile,10,428929,0x5b6ecb2c0e,12,slice node:buffer:603:12,0x423ed77778,~
code-source-info,0x5b6ecb2c0e,24,17595,17641,C0O17620C5O17620C11O17641,,
code-creation,LazyCompile,10,429182,0x5b6ecb2ec6,229,maybeCacheSourceMap node:internal/source_map/source_map_cache:74:29,0x39aa284f5a8,~
code-source-info,0x5b6ecb2ec6,108,2312,3381,C0O2382C3O2382C7O2409C10O2423C15O2427C23O2447C25O2467C26O2474C30O2489C35O2500C44O2498C54O2645C64O2655C69O2645C73O2668C74O2675C75O2698C80O2725C85O2698C91O2805C93O2836C96O2864C101O2871C106O2836C112O2907C117O2927C122O2934C127O2957C131O2989C136O3007C141O3011C148O3041C155O3073C165O3104C171O3119C175O3007C183O3250C188O3268C193O3272C201O3306C211O3337C217O3352C221O3268C228O3380,,
code-creation,LazyCompile,10,429359,0x5b6ecb3926,31,getSourceMapsEnabled node:internal/source_map/source_map_cache:43:30,0x39aa284f508,~
code-source-info,0x5b6ecb3926,108,1460,1610,C0O1468C6O1512C11O1533C17O1533C22O1512C26O1582C30O1607,,
code-creation,LazyCompile,10,429489,0x5b6ecb3a9e,100,setSourceMapsEnabled node:internal/source_map/source_map_cache:50:30,0x39aa284f558,~
code-source-info,0x5b6ecb3a9e,108,1643,2280,C0O1654C8O1654C13O1764C19O1764C24O1701C29O1728C34O1794C38O1824C42O1882C48O1882C53O1855C58O1939C64O1998C70O2161C76O2161C81O2133C86O2194C90O2253C92O2271C99O2279,,
code-creation,LazyCompile,10,429682,0x5b6ecb3c16,30,validateBoolean node:internal/validators:139:25,0x13fcdd3ca98,~
code-source-info,0x5b6ecb3c16,15,4199,4313,C0O4218C6O4255C22O4261C27O4255C29O4312,,
code-creation,LazyCompile,10,429806,0x5b6ecb3d0e,10, node:internal/modules/esm/translators:42:63,0x39aa287b790,~
code-source-info,0x5b6ecb3d0e,125,1058,1085,C0O1071C2O1077C9O1084,,
code-creation,Script,10,429977,0x5b6ecb401e,72, file:///D:/nginx-1.23.2/tarea%20clase22/random.js:1:1,0x5b6ecb3e28,~
script-source,129,file:///D:/nginx-1.23.2/tarea%20clase22/random.js,function calculo(cant) {\x0d\n    let randoms = {};\x0d\n    for (let i = 0; i < cant; i++) {\x0d\n        let random = parseInt(Math.random() * 1000) + 1;\x0d\n        if (!randoms[random]) randoms[random] = 1;\x0d\n        else randoms[random]++;\x0d\n    }\x0d\n    return randoms;\x0d\n}\x0d\n\x0d\nprocess.on("message"\x2C (message) => {\x0d\n    process.send({ id: message.id\x2C ...calculo(message.data) });\x0d\n});\x0d\n
code-source-info,0x5b6ecb401e,129,0,371,C10O0C23O0C43O0C47O263C51O271C64O271C71O371,,
code-creation,LazyCompile,10,430249,0x5b6ecb43ee,5,get node:internal/bootstrap/pre_execution:307:8,0x39aa2854978,~
code-source-info,0x5b6ecb43ee,95,10162,10197,C0O10174C4O10190,,
code-creation,LazyCompile,10,430399,0x5b6ecb450e,44,refCounted node:internal/child_process:539:13,0x2e2fa6a0c68,~
code-source-info,0x5b6ecb450e,100,14732,14834,C0O14742C3O14752C9O14753C15O14759C22O14774C27O14802C29O14807C33O14816C38O14816C43O14833,,
code-creation,LazyCompile,10,430534,0x5b6ecb462e,15, node:internal/modules/esm/loader:334:15,0x5b6ec9c858,~
code-source-info,0x5b6ecb462e,114,10287,10324,C0O10290C5O10310C10O10310C14O10324,,
code-creation,LazyCompile,10,430767,0x5b6ecb479e,307,removeListener node:events:693:28,0x423ed6b9d8,~
code-source-info,0x5b6ecb479e
code-creation,LazyCompile,10,430984,0x5b6ecb4a86,64,stopListeningIfSignal node:internal/process/signal:43:31,0x3096a13f870,~
code-source-info,0x5b6ecb4a86,92,978,1149,C0O1003C5O1015C10O1015C16O1029C21O1063C26O1063C33O1083C38O1102C43O1102C47O1116C52O1128C57O1134C63O1148,,
code-creation,LazyCompile,10,431114,0x5b6ecb4bce,30,onRemoveListener node:child_process:178:57,0x39aa2845440,~
code-source-info,0x5b6ecb4bce,99,5433,5524,C0O5447C2O5456C9O5478C14O5496C19O5504C24O5504C29O5523,,
tick,0x7ffe67f8feb4,434310,0,0x0,8
tick,0x7ffe67f8feb4,449634,0,0x0,8
tick,0x7ffe67f8feb4,465367,0,0x0,8
tick,0x7ffe67f8feb4,481442,0,0x0,8
tick,0x7ffe67f8feb4,496662,0,0x0,8
tick,0x7ffe67f8feb4,511733,0,0x0,8
tick,0x7ffe67f8feb4,527825,0,0x0,8
tick,0x7ffe67f8feb4,543625,0,0x0,8
tick,0x7ffe67f8feb4,559641,0,0x0,8
tick,0x7ffe67f8feb4,575819,0,0x0,8
tick,0x7ffe67f8feb4,591670,0,0x0,8
tick,0x7ffe67f8feb4,607660,0,0x0,8
tick,0x7ffe67f8feb4,623560,0,0x0,8
tick,0x7ffe67f8feb4,639659,0,0x0,8
tick,0x7ffe67f8feb4,655677,0,0x0,8
tick,0x7ffe67f8feb4,670900,0,0x0,8
tick,0x7ffe67f8feb4,686771,0,0x0,8
tick,0x7ffe67f8feb4,701835,0,0x0,8
tick,0x7ffe67f8feb4,717712,0,0x0,8
tick,0x7ffe67f8feb4,733693,0,0x0,8
tick,0x7ffe67f8feb4,749671,0,0x0,8
tick,0x7ffe67f8feb4,766065,0,0x0,8
tick,0x7ffe67f8feb4,781879,0,0x0,8
tick,0x7ffe67f8feb4,797695,0,0x0,8
tick,0x7ffe67f8feb4,813718,0,0x0,8
tick,0x7ffe67f8feb4,829677,0,0x0,8
tick,0x7ffe67f8feb4,845742,0,0x0,8
tick,0x7ffe67f8feb4,861762,0,0x0,8
tick,0x7ffe67f8feb4,877679,0,0x0,8
tick,0x7ffe67f8feb4,893687,0,0x0,8
tick,0x7ffe67f8feb4,909762,0,0x0,8
tick,0x7ffe67f8feb4,925689,0,0x0,8
tick,0x7ffe67f8feb4,941710,0,0x0,8
tick,0x7ffe67f8feb4,957742,0,0x0,8
tick,0x7ffe67f8feb4,973846,0,0x0,8
tick,0x7ffe67f8feb4,988985,0,0x0,8
tick,0x7ffe67f8feb4,1005075,0,0x0,8
tick,0x7ffe67f8feb4,1020268,0,0x0,8
tick,0x7ffe67f8feb4,1035876,0,0x0,8
tick,0x7ffe67f8feb4,1051279,0,0x0,8
tick,0x7ffe67f8feb4,1067310,0,0x0,8
tick,0x7ffe67f8feb4,1083312,0,0x0,8
tick,0x7ffe67f8feb4,1098529,0,0x0,8
tick,0x7ffe67f8feb4,1113662,0,0x0,8
tick,0x7ffe67f8feb4,1129627,0,0x0,8
tick,0x7ffe67f8feb4,1145725,0,0x0,8
tick,0x7ffe67f8feb4,1160922,0,0x0,8
tick,0x7ffe67f8feb4,1175948,0,0x0,8
tick,0x7ffe67f8feb4,1191088,0,0x0,8
tick,0x7ffe67f8feb4,1207211,0,0x0,8
tick,0x7ffe67f8feb4,1222537,0,0x0,8
tick,0x7ffe67f8feb4,1238479,0,0x0,8
tick,0x7ffe67f8feb4,1254558,0,0x0,8
tick,0x7ffe67f8feb4,1269870,0,0x0,8
tick,0x7ffe67f8feb4,1285759,0,0x0,8
tick,0x7ffe67f8feb4,1301767,0,0x0,8
tick,0x7ffe67f8feb4,1317105,0,0x0,8
tick,0x7ffe67f8feb4,1332484,0,0x0,8
tick,0x7ffe67f8feb4,1347778,0,0x0,8
tick,0x7ffe67f8feb4,1363819,0,0x0,8
tick,0x7ffe67f8feb4,1379154,0,0x0,8
tick,0x7ffe67f8feb4,1394754,0,0x0,8
tick,0x7ffe67f8feb4,1409757,0,0x0,8
tick,0x7ffe67f8feb4,1426026,0,0x0,8
tick,0x7ffe67f8feb4,1441885,0,0x0,8
tick,0x7ffe67f8feb4,1457839,0,0x0,8
tick,0x7ffe67f8feb4,1473042,0,0x0,8
tick,0x7ffe67f8feb4,1489051,0,0x0,8
tick,0x7ffe67f8feb4,1504736,0,0x0,8
tick,0x7ffe67f8feb4,1519740,0,0x0,8
tick,0x7ffe67f8feb4,1534873,0,0x0,8
tick,0x7ffe67f8feb4,1550805,0,0x0,8
tick,0x7ffe67f8feb4,1566861,0,0x0,8
tick,0x7ffe67f8feb4,1582882,0,0x0,8
tick,0x7ffe67f8feb4,1598842,0,0x0,8
tick,0x7ffe67f8feb4,1615276,0,0x0,8
tick,0x7ffe67f8feb4,1630919,0,0x0,8
tick,0x7ffe67f8feb4,1646898,0,0x0,8
tick,0x7ffe67f8feb4,1662881,0,0x0,8
tick,0x7ffe67f8feb4,1678821,0,0x0,8
tick,0x7ffe67f8feb4,1694073,0,0x0,8
tick,0x7ffe67f8feb4,1710078,0,0x0,8
tick,0x7ffe67f8feb4,1725857,0,0x0,8
tick,0x7ffe67f8feb4,1741808,0,0x0,8
tick,0x7ffe67f8feb4,1757836,0,0x0,8
tick,0x7ffe67f8feb4,1773825,0,0x0,8
tick,0x7ffe67f8feb4,1788830,0,0x0,8
tick,0x7ffe67f8feb4,1804858,0,0x0,8
tick,0x7ffe67f8feb4,1820702,0,0x0,8
tick,0x7ffe67f8feb4,1835860,0,0x0,8
tick,0x7ffe67f8feb4,1851352,0,0x0,8
tick,0x7ffe67f8feb4,1866721,0,0x0,8
tick,0x7ffe67f8feb4,1882739,0,0x0,8
tick,0x7ffe67f8feb4,1898230,0,0x0,8
tick,0x7ffe67f8feb4,1913749,0,0x0,8
tick,0x7ffe67f8feb4,1929810,0,0x0,8
tick,0x7ffe67f8feb4,1944848,0,0x0,8
tick,0x7ffe67f8feb4,1960766,0,0x0,8
tick,0x7ffe67f8feb4,1976792,0,0x0,8
tick,0x7ffe67f8feb4,1991905,0,0x0,8
tick,0x7ffe67f8feb4,2007870,0,0x0,8
tick,0x7ffe67f8feb4,2023903,0,0x0,8
tick,0x7ffe67f8feb4,2038891,0,0x0,8
tick,0x7ffe67f8feb4,2054720,0,0x0,8
tick,0x7ffe67f8feb4,2069908,0,0x0,8
tick,0x7ffe67f8feb4,2085938,0,0x0,8
tick,0x7ffe67f8feb4,2101922,0,0x0,8
tick,0x7ffe67f8feb4,2117908,0,0x0,8
tick,0x7ffe67f8feb4,2134000,0,0x0,8
tick,0x7ffe67f8feb4,2150008,0,0x0,8
tick,0x7ffe67f8feb4,2165916,0,0x0,8
tick,0x7ffe67f8feb4,2181919,0,0x0,8
tick,0x7ffe67f8feb4,2197990,0,0x0,8
tick,0x7ffe67f8feb4,2214116,0,0x0,8
tick,0x7ffe67f8feb4,2230217,0,0x0,8
tick,0x7ffe67f8feb4,2246037,0,0x0,8
tick,0x7ffe67f8feb4,2262009,0,0x0,8
tick,0x7ffe67f8feb4,2277153,0,0x0,8
tick,0x7ffe67f8feb4,2292238,0,0x0,8
tick,0x7ffe67f8feb4,2307365,0,0x0,8
tick,0x7ffe67f8feb4,2323437,0,0x0,8
tick,0x7ffe67f8feb4,2338956,0,0x0,8
tick,0x7ffe67f8feb4,2354532,0,0x0,8
tick,0x7ffe67f8feb4,2370000,0,0x0,8
tick,0x7ffe67f8feb4,2385142,0,0x0,8
tick,0x7ffe67f8feb4,2400968,0,0x0,8
tick,0x7ffe67f8feb4,2416933,0,0x0,8
tick,0x7ffe67f8feb4,2432931,0,0x0,8
tick,0x7ffe67f8feb4,2448928,0,0x0,8
tick,0x7ffe67f8feb4,2464952,0,0x0,8
tick,0x7ffe67f8feb4,2480939,0,0x0,8
tick,0x7ffe67f8feb4,2496959,0,0x0,8
tick,0x7ffe67f8feb4,2513056,0,0x0,8
tick,0x7ffe67f8feb4,2527986,0,0x0,8
tick,0x7ffe67f8feb4,2543971,0,0x0,8
tick,0x7ffe67f8feb4,2559949,0,0x0,8
tick,0x7ffe67f8feb4,2575895,0,0x0,8
tick,0x7ffe67f8feb4,2591884,0,0x0,8
tick,0x7ffe67f8feb4,2607961,0,0x0,8
tick,0x7ffe67f8feb4,2623098,0,0x0,8
tick,0x7ffe67f8feb4,2638982,0,0x0,8
tick,0x7ffe67f8feb4,2655018,0,0x0,8
tick,0x7ffe67f8feb4,2671070,0,0x0,8
tick,0x7ffe67f8feb4,2686753,0,0x0,8
tick,0x7ffe67f8feb4,2701769,0,0x0,8
tick,0x7ffe67f8feb4,2716993,0,0x0,8
tick,0x7ffe67f8feb4,2732350,0,0x0,8
tick,0x7ffe67f8feb4,2748300,0,0x0,8
tick,0x7ffe67f8feb4,2764765,0,0x0,8
tick,0x7ffe67f8feb4,2779819,0,0x0,8
tick,0x7ffe67f8feb4,2795207,0,0x0,8
tick,0x7ffe67f8feb4,2811211,0,0x0,8
tick,0x7ffe67f8feb4,2826340,0,0x0,8
tick,0x7ffe67f8feb4,2841575,0,0x0,8
tick,0x7ffe67f8feb4,2857641,0,0x0,8
tick,0x7ffe67f8feb4,2873032,0,0x0,8
tick,0x7ffe67f8feb4,2889002,0,0x0,8
tick,0x7ffe67f8feb4,2905112,0,0x0,8
tick,0x7ffe67f8feb4,2920232,0,0x0,8
tick,0x7ffe67f8feb4,2935629,0,0x0,8
tick,0x7ffe67f8feb4,2951474,0,0x0,8
tick,0x7ffe67f8feb4,2966613,0,0x0,8
tick,0x7ffe67f8feb4,2981856,0,0x0,8
tick,0x7ffe67f8feb4,2996960,0,0x0,8
tick,0x7ffe67f8feb4,3012605,0,0x0,8
tick,0x7ffe67f8feb4,3028015,0,0x0,8
tick,0x7ffe67f8feb4,3043531,0,0x0,8
tick,0x7ffe67f8feb4,3058847,0,0x0,8
tick,0x7ffe67f8feb4,3075124,0,0x0,8
tick,0x7ffe67f8feb4,3090403,0,0x0,8
tick,0x7ffe67f8feb4,3106270,0,0x0,8
tick,0x7ffe67f8feb4,3121600,0,0x0,8
tick,0x7ffe67f8feb4,3136978,0,0x0,8
tick,0x7ffe67f8feb4,3153261,0,0x0,8
tick,0x7ffe67f8feb4,3169402,0,0x0,8
tick,0x7ffe67f8feb4,3185061,0,0x0,8
tick,0x7ffe67f8feb4,3200976,0,0x0,8
tick,0x7ffe67f8feb4,3217152,0,0x0,8
tick,0x7ffe67f8feb4,3233347,0,0x0,8
tick,0x7ffe67f8feb4,3249202,0,0x0,8
tick,0x7ffe67f8feb4,3265606,0,0x0,8
tick,0x7ffe67f8feb4,3281168,0,0x0,8
tick,0x7ffe67f8feb4,3296853,0,0x0,8
tick,0x7ffe67f8feb4,3312450,0,0x0,8
tick,0x7ffe67f8feb4,3327800,0,0x0,8
tick,0x7ffe67f8feb4,3343212,0,0x0,8
tick,0x7ffe67f8feb4,3358592,0,0x0,8
tick,0x7ffe67f8feb4,3373355,0,0x0,8
tick,0x7ffe67f8feb4,3388948,0,0x0,8
tick,0x7ffe67f8feb4,3404160,0,0x0,8
tick,0x7ffe67f8feb4,3420350,0,0x0,8
tick,0x7ffe67f8feb4,3435304,0,0x0,8
tick,0x7ffe67f8feb4,3451508,0,0x0,8
tick,0x7ffe67f8feb4,3466960,0,0x0,8
tick,0x7ffe67f8feb4,3483093,0,0x0,8
tick,0x7ffe67f8feb4,3499065,0,0x0,8
tick,0x7ffe67f8feb4,3514613,0,0x0,8
tick,0x7ffe67f8feb4,3529983,0,0x0,8
tick,0x7ffe67f8feb4,3545744,0,0x0,8
tick,0x7ffe67f8feb4,3561832,0,0x0,8
tick,0x7ffe67f8feb4,3577070,0,0x0,8
tick,0x7ffe67f8feb4,3592746,0,0x0,8
tick,0x7ffe67f8feb4,3607972,0,0x0,8
tick,0x7ffe67f8feb4,3624138,0,0x0,8
tick,0x7ffe67f8feb4,3639691,0,0x0,8
tick,0x7ffe67f8feb4,3655650,0,0x0,8
tick,0x7ffe67f8feb4,3671664,0,0x0,8
tick,0x7ffe67f8feb4,3687307,0,0x0,8
tick,0x7ffe67f8feb4,3703391,0,0x0,8
tick,0x7ffe67f8feb4,3719438,0,0x0,8
tick,0x7ffe67f8feb4,3735374,0,0x0,8
tick,0x7ffe67f8feb4,3750651,0,0x0,8
tick,0x7ffe67f8feb4,3766335,0,0x0,8
tick,0x7ffe67f8feb4,3782624,0,0x0,8
tick,0x7ffe67f8feb4,3797833,0,0x0,8
tick,0x7ffe67f8feb4,3812892,0,0x0,8
tick,0x7ffe67f8feb4,3828167,0,0x0,8
tick,0x7ffe67f8feb4,3843205,0,0x0,8
tick,0x7ffe67f8feb4,3859266,0,0x0,8
tick,0x7ffe67f8feb4,3875536,0,0x0,8
tick,0x7ffe67f8feb4,3891258,0,0x0,8
tick,0x7ffe67f8feb4,3907336,0,0x0,8
tick,0x7ffe67f8feb4,3923163,0,0x0,8
tick,0x7ffe67f8feb4,3938391,0,0x0,8
tick,0x7ffe67f8feb4,3954400,0,0x0,8
tick,0x7ffe67f8feb4,3969395,0,0x0,8
tick,0x7ffe67f8feb4,3985398,0,0x0,8
tick,0x7ffe67f8feb4,4001423,0,0x0,8
tick,0x7ffe67f8feb4,4017447,0,0x0,8
tick,0x7ffe67f8feb4,4033445,0,0x0,8
tick,0x7ffe67f8feb4,4049461,0,0x0,8
tick,0x7ffe67f8feb4,4065469,0,0x0,8
tick,0x7ffe67f8feb4,4080837,0,0x0,8
tick,0x7ffe67f8feb4,4096813,0,0x0,8
tick,0x7ffe67f8feb4,4112384,0,0x0,8
tick,0x7ffe67f8feb4,4127897,0,0x0,8
tick,0x7ffe67f8feb4,4143149,0,0x0,8
tick,0x7ffe67f8feb4,4159417,0,0x0,8
tick,0x7ffe67f8feb4,4174864,0,0x0,8
tick,0x7ffe67f8feb4,4190671,0,0x0,8
tick,0x7ffe67f8feb4,4213694,0,0x0,8
tick,0x7ffe67f8feb4,4229210,0,0x0,8
tick,0x7ffe67f8feb4,4245409,0,0x0,8
tick,0x7ffe67f8feb4,4260972,0,0x0,8
tick,0x7ffe67f8feb4,4276479,0,0x0,8
tick,0x7ffe67f8feb4,4292620,0,0x0,8
tick,0x7ffe67f8feb4,4308822,0,0x0,8
tick,0x7ffe67f8feb4,4325240,0,0x0,8
tick,0x7ffe67f8feb4,4340908,0,0x0,8
tick,0x7ffe67f8feb4,4356214,0,0x0,8
tick,0x7ffe67f8feb4,4371601,0,0x0,8
tick,0x7ffe67f8feb4,4386865,0,0x0,8
tick,0x7ffe67f8feb4,4402090,0,0x0,8
tick,0x7ffe67f8feb4,4417774,0,0x0,8
tick,0x7ffe67f8feb4,4434006,0,0x0,8
tick,0x7ffe67f8feb4,4448752,0,0x0,8
tick,0x7ffe67f8feb4,4464870,0,0x0,8
tick,0x7ffe67f8feb4,4480675,0,0x0,8
tick,0x7ffe67f8feb4,4495994,0,0x0,8
tick,0x7ffe67f8feb4,4511928,0,0x0,8
tick,0x7ffe67f8feb4,4527777,0,0x0,8
tick,0x7ffe67f8feb4,4544424,0,0x0,8
tick,0x7ffe67f8feb4,4558885,0,0x0,8
tick,0x7ffe67f8feb4,4574885,0,0x0,8
tick,0x7ffe67f8feb4,4589932,0,0x0,8
tick,0x7ffe67f8feb4,4605883,0,0x0,8
tick,0x7ffe67f8feb4,4621906,0,0x0,8
tick,0x7ffe67f8feb4,4638094,0,0x0,8
tick,0x7ffe67f8feb4,4654084,0,0x0,8
tick,0x7ffe67f8feb4,4669197,0,0x0,8
tick,0x7ffe67f8feb4,4684781,0,0x0,8
tick,0x7ffe67f8feb4,4700549,0,0x0,8
tick,0x7ffe67f8feb4,4716215,0,0x0,8
tick,0x7ffe67f8feb4,4731358,0,0x0,8
tick,0x7ffe67f8feb4,4746556,0,0x0,8
tick,0x7ffe67f8feb4,4761664,0,0x0,8
tick,0x7ffe67f8feb4,4777679,0,0x0,8
tick,0x7ffe67f8feb4,4792711,0,0x0,8
tick,0x7ffe67f8feb4,4808248,0,0x0,8
tick,0x7ffe67f8feb4,4824267,0,0x0,8
tick,0x7ffe67f8feb4,4840263,0,0x0,8
tick,0x7ffe67f8feb4,4856228,0,0x0,8
tick,0x7ffe67f8feb4,4872239,0,0x0,8
tick,0x7ffe67f8feb4,4887320,0,0x0,8
tick,0x7ffe67f8feb4,4903252,0,0x0,8
tick,0x7ffe67f8feb4,4919288,0,0x0,8
tick,0x7ffe67f8feb4,4935271,0,0x0,8
tick,0x7ffe67f8feb4,4950452,0,0x0,8
tick,0x7ffe67f8feb4,4966167,0,0x0,8
tick,0x7ffe67f8feb4,4981433,0,0x0,8
tick,0x7ffe67f8feb4,4996574,0,0x0,8
tick,0x7ffe67f8feb4,5011732,0,0x0,8
tick,0x7ffe67f8feb4,5027654,0,0x0,8
tick,0x7ffe67f8feb4,5042797,0,0x0,8
tick,0x7ffe67f8feb4,5058864,0,0x0,8
tick,0x7ffe67f8feb4,5073995,0,0x0,8
tick,0x7ffe67f8feb4,5089463,0,0x0,8
tick,0x7ffe67f8feb4,5104970,0,0x0,8
tick,0x7ffe67f8feb4,5120075,0,0x0,8
tick,0x7ffe67f8feb4,5136467,0,0x0,8
tick,0x7ffe67f8feb4,5152003,0,0x0,8
tick,0x7ffe67f8feb4,5167167,0,0x0,8
tick,0x7ffe67f8feb4,5183299,0,0x0,8
tick,0x7ffe67f8feb4,5198664,0,0x0,8
tick,0x7ffe67f8feb4,5214739,0,0x0,8
tick,0x7ffe67f8feb4,5230873,0,0x0,8
tick,0x7ffe67f8feb4,5246417,0,0x0,8
tick,0x7ffe67f8feb4,5262225,0,0x0,8
tick,0x7ffe67f8feb4,5277789,0,0x0,8
tick,0x7ffe67f8feb4,5292869,0,0x0,8
tick,0x7ffe67f8feb4,5308973,0,0x0,8
tick,0x7ffe67f8feb4,5324222,0,0x0,8
tick,0x7ffe67f8feb4,5340325,0,0x0,8
tick,0x7ffe67f8feb4,5355324,0,0x0,8
tick,0x7ffe67f8feb4,5370503,0,0x0,8
tick,0x7ffe67f8feb4,5386545,0,0x0,8
tick,0x7ffe67f8feb4,5402757,0,0x0,8
tick,0x7ffe67f8feb4,5418626,0,0x0,8
tick,0x7ffe67f8feb4,5433757,0,0x0,8
tick,0x7ffe67f8feb4,5449275,0,0x0,8
tick,0x7ffe67f8feb4,5465182,0,0x0,8
tick,0x7ffe67f8feb4,5480338,0,0x0,8
tick,0x7ffe67f8feb4,5495839,0,0x0,8
tick,0x7ffe67f8feb4,5511908,0,0x0,8
tick,0x7ffe67f8feb4,5527937,0,0x0,8
tick,0x7ffe67f8feb4,5543821,0,0x0,8
tick,0x7ffe67f8feb4,5558931,0,0x0,8
tick,0x7ffe67f8feb4,5574026,0,0x0,8
tick,0x7ffe67f8feb4,5590106,0,0x0,8
tick,0x7ffe67f8feb4,5606095,0,0x0,8
tick,0x7ffe67f8feb4,5621647,0,0x0,8
tick,0x7ffe67f8feb4,5637143,0,0x0,8
tick,0x7ffe67f8feb4,5652438,0,0x0,8
tick,0x7ffe67f8feb4,5668011,0,0x0,8
tick,0x7ffe67f8feb4,5683814,0,0x0,8
tick,0x7ffe67f8feb4,5699382,0,0x0,8
tick,0x7ffe67f8feb4,5715007,0,0x0,8
tick,0x7ffe67f8feb4,5731040,0,0x0,8
tick,0x7ffe67f8feb4,5746535,0,0x0,8
tick,0x7ffe67f8feb4,5762280,0,0x0,8
tick,0x7ffe67f8feb4,5778050,0,0x0,8
tick,0x7ffe67f8feb4,5794000,0,0x0,8
tick,0x7ffe67f8feb4,5809638,0,0x0,8
tick,0x7ffe67f8feb4,5825358,0,0x0,8
tick,0x7ffe67f8feb4,5841602,0,0x0,8
tick,0x7ffe67f8feb4,5856891,0,0x0,8
tick,0x7ffe67f8feb4,5872928,0,0x0,8
tick,0x7ffe67f8feb4,5888180,0,0x0,8
tick,0x7ffe67f8feb4,5904234,0,0x0,8
tick,0x7ffe67f8feb4,5919323,0,0x0,8
tick,0x7ffe67f8feb4,5934387,0,0x0,8
tick,0x7ffe67f8feb4,5949956,0,0x0,8
tick,0x7ffe67f8feb4,5965352,0,0x0,8
tick,0x7ffe67f8feb4,5980467,0,0x0,8
tick,0x7ffe67f8feb4,5996472,0,0x0,8
tick,0x7ffe67f8feb4,6012228,0,0x0,8
tick,0x7ffe67f8feb4,6027093,0,0x0,8
tick,0x7ffe67f8feb4,6042855,0,0x0,8
tick,0x7ffe67f8feb4,6058084,0,0x0,8
tick,0x7ffe67f8feb4,6073595,0,0x0,8
tick,0x7ffe67f8feb4,6088869,0,0x0,8
tick,0x7ffe67f8feb4,6104409,0,0x0,8
tick,0x7ffe67f8feb4,6120311,0,0x0,8
tick,0x7ffe67f8feb4,6135840,0,0x0,8
tick,0x7ffe67f8feb4,6151153,0,0x0,8
tick,0x7ffe67f8feb4,6167136,0,0x0,8
tick,0x7ffe67f8feb4,6182438,0,0x0,8
tick,0x7ffe67f8feb4,6197733,0,0x0,8
tick,0x7ffe67f8feb4,6213349,0,0x0,8
tick,0x7ffe67f8feb4,6228882,0,0x0,8
tick,0x7ffe67f8feb4,6244105,0,0x0,8
tick,0x7ffe67f8feb4,6260148,0,0x0,8
tick,0x7ffe67f8feb4,6275886,0,0x0,8
tick,0x7ffe67f8feb4,6291946,0,0x0,8
tick,0x7ffe67f8feb4,6307295,0,0x0,8
tick,0x7ffe67f8feb4,6322784,0,0x0,8
tick,0x7ffe67f8feb4,6338269,0,0x0,8
tick,0x7ffe67f8feb4,6354675,0,0x0,8
tick,0x7ffe67f8feb4,6370077,0,0x0,8
tick,0x7ffe67f8feb4,6385244,0,0x0,8
tick,0x7ffe67f8feb4,6400343,0,0x0,8
tick,0x7ffe67f8feb4,6415799,0,0x0,8
tick,0x7ffe67f8feb4,6431721,0,0x0,8
tick,0x7ffe67f8feb4,6447230,0,0x0,8
tick,0x7ffe67f8feb4,6462887,0,0x0,8
tick,0x7ffe67f8feb4,6479184,0,0x0,8
tick,0x7ffe67f8feb4,6495352,0,0x0,8
tick,0x7ffe67f8feb4,6510579,0,0x0,8
tick,0x7ffe67f8feb4,6526793,0,0x0,8
tick,0x7ffe67f8feb4,6542081,0,0x0,8
tick,0x7ffe67f8feb4,6557718,0,0x0,8
tick,0x7ffe67f8feb4,6573297,0,0x0,8
tick,0x7ffe67f8feb4,6588753,0,0x0,8
tick,0x7ffe67f8feb4,6604751,0,0x0,8
tick,0x7ffe67f8feb4,6620921,0,0x0,8
tick,0x7ffe67f8feb4,6636689,0,0x0,8
tick,0x7ffe67f8feb4,6652777,0,0x0,8
tick,0x7ffe67f8feb4,6668122,0,0x0,8
tick,0x7ffe67f8feb4,6684539,0,0x0,8
tick,0x7ffe67f8feb4,6700519,0,0x0,8
tick,0x7ffe67f8feb4,6716523,0,0x0,8
tick,0x7ffe67f8feb4,6732630,0,0x0,8
tick,0x7ffe67f8feb4,6748298,0,0x0,8
tick,0x7ffe67f8feb4,6764563,0,0x0,8
tick,0x7ffe67f8feb4,6780339,0,0x0,8
tick,0x7ffe67f8feb4,6795873,0,0x0,8
tick,0x7ffe67f8feb4,6812034,0,0x0,8
tick,0x7ffe67f8feb4,6827449,0,0x0,8
tick,0x7ffe67f8feb4,6843428,0,0x0,8
tick,0x7ffe67f8feb4,6859115,0,0x0,8
tick,0x7ffe67f8feb4,6874633,0,0x0,8
tick,0x7ffe67f8feb4,6890109,0,0x0,8
tick,0x7ffe67f8feb4,6905357,0,0x0,8
tick,0x7ffe67f8feb4,6920499,0,0x0,8
tick,0x7ffe67f8feb4,6936645,0,0x0,8
tick,0x7ffe67f8feb4,6952369,0,0x0,8
tick,0x7ffe67f8feb4,6967759,0,0x0,8
tick,0x7ffe67f8feb4,6983874,0,0x0,8
tick,0x7ffe67f8feb4,6999036,0,0x0,8
tick,0x7ffe67f8feb4,7014569,0,0x0,8
tick,0x7ffe67f8feb4,7030088,0,0x0,8
tick,0x7ffe67f8feb4,7045472,0,0x0,8
tick,0x7ffe67f8feb4,7061040,0,0x0,8
tick,0x7ffe67f8feb4,7076310,0,0x0,8
tick,0x7ffe67f8feb4,7091549,0,0x0,8
tick,0x7ffe67f8feb4,7107068,0,0x0,8
tick,0x7ffe67f8feb4,7122961,0,0x0,8
tick,0x7ffe67f8feb4,7138495,0,0x0,8
tick,0x7ffe67f8feb4,7154919,0,0x0,8
tick,0x7ffe67f8feb4,7171110,0,0x0,8
tick,0x7ffe67f8feb4,7186698,0,0x0,8
tick,0x7ffe67f8feb4,7202322,0,0x0,8
tick,0x7ffe67f8feb4,7217876,0,0x0,8
tick,0x7ffe67f8feb4,7233966,0,0x0,8
tick,0x7ffe67f8feb4,7249737,0,0x0,8
tick,0x7ffe67f8feb4,7265554,0,0x0,8
tick,0x7ffe67f8feb4,7281751,0,0x0,8
tick,0x7ffe67f8feb4,7296562,0,0x0,8
tick,0x7ffe67f8feb4,7312505,0,0x0,8
tick,0x7ffe67f8feb4,7328403,0,0x0,8
tick,0x7ffe67f8feb4,7344347,0,0x0,8
tick,0x7ffe67f8feb4,7359763,0,0x0,8
tick,0x7ffe67f8feb4,7374984,0,0x0,8
tick,0x7ffe67f8feb4,7390273,0,0x0,8
tick,0x7ffe67f8feb4,7405663,0,0x0,8
tick,0x7ffe67f8feb4,7420759,0,0x0,8
tick,0x7ffe67f8feb4,7435833,0,0x0,8
tick,0x7ffe67f8feb4,7451745,0,0x0,8
tick,0x7ffe67f8feb4,7466871,0,0x0,8
tick,0x7ffe67f8feb4,7482267,0,0x0,8
tick,0x7ffe67f8feb4,7497697,0,0x0,8
tick,0x7ffe67f8feb4,7513382,0,0x0,8
tick,0x7ffe67f8feb4,7528100,0,0x0,8
tick,0x7ffe67f8feb4,7543934,0,0x0,8
tick,0x7ffe67f8feb4,7559176,0,0x0,8
tick,0x7ffe67f8feb4,7574783,0,0x0,8
tick,0x7ffe67f8feb4,7590041,0,0x0,8
tick,0x7ffe67f8feb4,7605259,0,0x0,8
tick,0x7ffe67f8feb4,7620436,0,0x0,8
tick,0x7ffe67f8feb4,7635774,0,0x0,8
tick,0x7ffe67f8feb4,7651339,0,0x0,8
tick,0x7ffe67f8feb4,7667254,0,0x0,8
tick,0x7ffe67f8feb4,7683464,0,0x0,8
tick,0x7ffe67f8feb4,7698854,0,0x0,8
tick,0x7ffe67f8feb4,7714908,0,0x0,8
tick,0x7ffe67f8feb4,7730888,0,0x0,8
tick,0x7ffe67f8feb4,7746258,0,0x0,8
tick,0x7ffe67f8feb4,7761933,0,0x0,8
tick,0x7ffe67f8feb4,7777639,0,0x0,8
tick,0x7ffe67f8feb4,7793027,0,0x0,8
tick,0x7ffe67f8feb4,7808456,0,0x0,8
tick,0x7ffe67f8feb4,7824107,0,0x0,8
tick,0x7ffe67f8feb4,7839293,0,0x0,8
tick,0x7ffe67f8feb4,7855304,0,0x0,8
tick,0x7ffe67f8feb4,7871290,0,0x0,8
tick,0x7ffe67f8feb4,7887071,0,0x0,8
tick,0x7ffe67f8feb4,7903150,0,0x0,8
tick,0x7ffe67f8feb4,7918402,0,0x0,8
tick,0x7ffe67f8feb4,7934378,0,0x0,8
tick,0x7ffe67f8feb4,7950459,0,0x0,8
tick,0x7ffe67f8feb4,7966527,0,0x0,8
tick,0x7ffe67f8feb4,7982593,0,0x0,8
tick,0x7ffe67f8feb4,7998725,0,0x0,8
tick,0x7ffe67f8feb4,8014603,0,0x0,8
tick,0x7ffe67f8feb4,8030466,0,0x0,8
tick,0x7ffe67f8feb4,8046891,0,0x0,8
tick,0x7ffe67f8feb4,8062284,0,0x0,8
tick,0x7ffe67f8feb4,8077636,0,0x0,8
tick,0x7ffe67f8feb4,8093017,0,0x0,8
tick,0x7ffe67f8feb4,8108325,0,0x0,8
tick,0x7ffe67f8feb4,8124024,0,0x0,8
tick,0x7ffe67f8feb4,8139654,0,0x0,8
tick,0x7ffe67f8feb4,8154771,0,0x0,8
tick,0x7ffe67f8feb4,8170675,0,0x0,8
tick,0x7ffe67f8feb4,8186459,0,0x0,8
tick,0x7ffe67f8feb4,8202702,0,0x0,8
tick,0x7ffe67f8feb4,8218763,0,0x0,8
tick,0x7ffe67f8feb4,8235026,0,0x0,8
tick,0x7ffe67f8feb4,8250378,0,0x0,8
tick,0x7ffe67f8feb4,8266095,0,0x0,8
tick,0x7ffe67f8feb4,8281638,0,0x0,8
tick,0x7ffe67f8feb4,8297112,0,0x0,8
tick,0x7ffe67f8feb4,8313243,0,0x0,8
tick,0x7ffe67f8feb4,8329195,0,0x0,8
tick,0x7ffe67f8feb4,8344827,0,0x0,8
tick,0x7ffe67f8feb4,8360705,0,0x0,8
tick,0x7ffe67f8feb4,8376325,0,0x0,8
tick,0x7ffe67f8feb4,8392090,0,0x0,8
tick,0x7ffe67f8feb4,8407193,0,0x0,8
tick,0x7ffe67f8feb4,8423029,0,0x0,8
tick,0x7ffe67f8feb4,8439128,0,0x0,8
tick,0x7ffe67f8feb4,8454841,0,0x0,8
tick,0x7ffe67f8feb4,8470530,0,0x0,8
tick,0x7ffe67f8feb4,8485766,0,0x0,8
tick,0x7ffe67f8feb4,8501548,0,0x0,8
tick,0x7ffe67f8feb4,8517601,0,0x0,8
tick,0x7ffe67f8feb4,8533384,0,0x0,8
tick,0x7ffe67f8feb4,8549001,0,0x0,8
tick,0x7ffe67f8feb4,8564758,0,0x0,8
tick,0x7ffe67f8feb4,8579978,0,0x0,8
tick,0x7ffe67f8feb4,8595536,0,0x0,8
tick,0x7ffe67f8feb4,8610930,0,0x0,8
tick,0x7ffe67f8feb4,8626527,0,0x0,8
tick,0x7ffe67f8feb4,8642502,0,0x0,8
tick,0x7ffe67f8feb4,8658644,0,0x0,8
tick,0x7ffe67f8feb4,8674149,0,0x0,8
tick,0x7ffe67f8feb4,8689192,0,0x0,8
tick,0x7ffe67f8feb4,8705279,0,0x0,8
tick,0x7ffe67f8feb4,8719844,0,0x0,8
tick,0x7ffe67f8feb4,8735582,0,0x0,8
tick,0x7ffe67f8feb4,8751122,0,0x0,8
tick,0x7ffe67f8feb4,8767334,0,0x0,8
tick,0x7ffe67f8feb4,8783035,0,0x0,8
tick,0x7ffe67f8feb4,8798997,0,0x0,8
tick,0x7ffe67f8feb4,8815025,0,0x0,8
tick,0x7ffe67f8feb4,8831375,0,0x0,8
tick,0x7ffe67f8feb4,8847001,0,0x0,8
tick,0x7ffe67f8feb4,8863087,0,0x0,8
tick,0x7ffe67f8feb4,8879213,0,0x0,8
tick,0x7ffe67f8feb4,8894850,0,0x0,8
tick,0x7ffe67f8feb4,8911011,0,0x0,8
tick,0x7ffe67f8feb4,8926873,0,0x0,8
tick,0x7ffe67f8feb4,8942926,0,0x0,8
tick,0x7ffe67f8feb4,8959015,0,0x0,8
tick,0x7ffe67f8feb4,8974735,0,0x0,8
tick,0x7ffe67f8feb4,8990748,0,0x0,8
tick,0x7ffe67f8feb4,9006959,0,0x0,8
tick,0x7ffe67f8feb4,9022258,0,0x0,8
tick,0x7ffe67f8feb4,9037787,0,0x0,8
tick,0x7ffe67f8feb4,9053401,0,0x0,8
tick,0x7ffe67f8feb4,9069085,0,0x0,8
tick,0x7ffe67f8feb4,9084453,0,0x0,8
tick,0x7ffe67f8feb4,9100037,0,0x0,8
tick,0x7ffe67f8feb4,9115413,0,0x0,8
tick,0x7ffe67f8feb4,9130918,0,0x0,8
tick,0x7ffe67f8feb4,9146116,0,0x0,8
tick,0x7ffe67f8feb4,9161300,0,0x0,8
tick,0x7ffe67f8feb4,9177039,0,0x0,8
tick,0x7ffe67f8feb4,9192269,0,0x0,8
tick,0x7ffe67f8feb4,9207522,0,0x0,8
tick,0x7ffe67f8feb4,9222954,0,0x0,8
tick,0x7ffe67f8feb4,9239227,0,0x0,8
tick,0x7ffe67f8feb4,9255451,0,0x0,8
tick,0x7ffe67f8feb4,9271005,0,0x0,8
tick,0x7ffe67f8feb4,9286952,0,0x0,8
tick,0x7ffe67f8feb4,9302768,0,0x0,8
tick,0x7ffe67f8feb4,9318714,0,0x0,8
tick,0x7ffe67f8feb4,9334246,0,0x0,8
tick,0x7ffe67f8feb4,9349414,0,0x0,8
tick,0x7ffe67f8feb4,9364848,0,0x0,8
tick,0x7ffe67f8feb4,9380619,0,0x0,8
tick,0x7ffe67f8feb4,9396061,0,0x0,8
tick,0x7ffe67f8feb4,9411764,0,0x0,8
tick,0x7ffe67f8feb4,9426988,0,0x0,8
tick,0x7ffe67f8feb4,9442844,0,0x0,8
tick,0x7ffe67f8feb4,9459040,0,0x0,8
tick,0x7ffe67f8feb4,9474547,0,0x0,8
tick,0x7ffe67f8feb4,9490187,0,0x0,8
tick,0x7ffe67f8feb4,9506044,0,0x0,8
tick,0x7ffe67f8feb4,9521991,0,0x0,8
tick,0x7ffe67f8feb4,9537011,0,0x0,8
tick,0x7ffe67f8feb4,9552725,0,0x0,8
tick,0x7ffe67f8feb4,9568263,0,0x0,8
tick,0x7ffe67f8feb4,9584671,0,0x0,8
tick,0x7ffe67f8feb4,9600318,0,0x0,8
tick,0x7ffe67f8feb4,9616322,0,0x0,8
tick,0x7ffe67f8feb4,9631754,0,0x0,8
tick,0x7ffe67f8feb4,9647149,0,0x0,8
tick,0x7ffe67f8feb4,9663035,0,0x0,8
tick,0x7ffe67f8feb4,9678444,0,0x0,8
tick,0x7ffe67f8feb4,9694228,0,0x0,8
tick,0x7ffe67f8feb4,9709802,0,0x0,8
tick,0x7ffe67f8feb4,9725733,0,0x0,8
tick,0x7ffe67f8feb4,9741125,0,0x0,8
tick,0x7ffe67f8feb4,9756591,0,0x0,8
tick,0x7ffe67f8feb4,9772539,0,0x0,8
tick,0x7ffe67f8feb4,9788102,0,0x0,8
tick,0x7ffe67f8feb4,9804060,0,0x0,8
tick,0x7ffe67f8feb4,9820211,0,0x0,8
tick,0x7ffe67f8feb4,9835673,0,0x0,8
tick,0x7ffe67f8feb4,9851344,0,0x0,8
tick,0x7ffe67f8feb4,9867064,0,0x0,8
tick,0x7ffe67f8feb4,9882172,0,0x0,8
tick,0x7ffe67f8feb4,9898437,0,0x0,8
tick,0x7ffe67f8feb4,9913828,0,0x0,8
tick,0x7ffe67f8feb4,9929064,0,0x0,8
tick,0x7ffe67f8feb4,9945149,0,0x0,8
tick,0x7ffe67f8feb4,9960323,0,0x0,8
tick,0x7ffe67f8feb4,9976307,0,0x0,8
tick,0x7ffe67f8feb4,9992363,0,0x0,8
tick,0x7ffe67f8feb4,10007491,0,0x0,8
tick,0x7ffe67f8feb4,10022782,0,0x0,8
tick,0x7ffe67f8feb4,10038149,0,0x0,8
tick,0x7ffe67f8feb4,10053714,0,0x0,8
tick,0x7ffe67f8feb4,10069333,0,0x0,8
tick,0x7ffe67f8feb4,10084878,0,0x0,8
tick,0x7ffe67f8feb4,10100049,0,0x0,8
tick,0x7ffe67f8feb4,10115910,0,0x0,8
tick,0x7ffe67f8feb4,10131680,0,0x0,8
tick,0x7ffe67f8feb4,10146656,0,0x0,8
tick,0x7ffe67f8feb4,10161635,0,0x0,8
tick,0x7ffe67f8feb4,10176933,0,0x0,8
tick,0x7ffe67f8feb4,10192525,0,0x0,8
tick,0x7ffe67f8feb4,10207682,0,0x0,8
tick,0x7ffe67f8feb4,10223345,0,0x0,8
tick,0x7ffe67f8feb4,10238371,0,0x0,8
tick,0x7ffe67f8feb4,10253942,0,0x0,8
tick,0x7ffe67f8feb4,10268717,0,0x0,8
tick,0x7ffe67f8feb4,10284335,0,0x0,8
tick,0x7ffe67f8feb4,10299628,0,0x0,8
tick,0x7ffe67f8feb4,10315745,0,0x0,8
tick,0x7ffe67f8feb4,10331663,0,0x0,8
tick,0x7ffe67f8feb4,10347792,0,0x0,8
tick,0x7ffe67f8feb4,10363005,0,0x0,8
tick,0x7ffe67f8feb4,10378133,0,0x0,8
tick,0x7ffe67f8feb4,10393237,0,0x0,8
tick,0x7ffe67f8feb4,10408403,0,0x0,8
tick,0x7ffe67f8feb4,10424483,0,0x0,8
tick,0x7ffe67f8feb4,10439627,0,0x0,8
tick,0x7ffe67f8feb4,10455606,0,0x0,8
tick,0x7ffe67f8feb4,10471676,0,0x0,8
tick,0x7ffe67f8feb4,10486781,0,0x0,8
tick,0x7ffe67f8feb4,10501977,0,0x0,8
tick,0x7ffe67f8feb4,10517098,0,0x0,8
tick,0x7ffe67f8feb4,10532248,0,0x0,8
tick,0x7ffe67f8feb4,10547835,0,0x0,8
tick,0x7ffe67f8feb4,10563282,0,0x0,8
tick,0x7ffe67f8feb4,10578631,0,0x0,8
tick,0x7ffe67f8feb4,10594258,0,0x0,8
tick,0x7ffe67f8feb4,10609519,0,0x0,8
tick,0x7ffe67f8feb4,10624880,0,0x0,8
tick,0x7ffe67f8feb4,10641120,0,0x0,8
tick,0x7ffe67f8feb4,10657401,0,0x0,8
tick,0x7ffe67f8feb4,10672860,0,0x0,8
tick,0x7ffe67f8feb4,10688961,0,0x0,8
tick,0x7ffe67f8feb4,10703959,0,0x0,8
tick,0x7ffe67f8feb4,10719337,0,0x0,8
tick,0x7ffe67f8feb4,10734542,0,0x0,8
tick,0x7ffe67f8feb4,10749969,0,0x0,8
tick,0x7ffe67f8feb4,10765567,0,0x0,8
tick,0x7ffe67f8feb4,10781051,0,0x0,8
tick,0x7ffe67f8feb4,10796569,0,0x0,8
tick,0x7ffe67f8feb4,10812434,0,0x0,8
tick,0x7ffe67f8feb4,10828022,0,0x0,8
tick,0x7ffe67f8feb4,10843382,0,0x0,8
tick,0x7ffe67f8feb4,10859328,0,0x0,8
tick,0x7ffe67f8feb4,10874615,0,0x0,8
tick,0x7ffe67f8feb4,10890867,0,0x0,8
tick,0x7ffe67f8feb4,10906394,0,0x0,8
tick,0x7ffe67f8feb4,10921907,0,0x0,8
tick,0x7ffe67f8feb4,10936768,0,0x0,8
tick,0x7ffe67f8feb4,10952243,0,0x0,8
tick,0x7ffe67f8feb4,10967393,0,0x0,8
tick,0x7ffe67f8feb4,10982565,0,0x0,8
tick,0x7ffe67f8feb4,10997762,0,0x0,8
tick,0x7ffe67f8feb4,11012908,0,0x0,8
tick,0x7ffe67f8feb4,11028075,0,0x0,8
tick,0x7ffe67f8feb4,11044204,0,0x0,8
tick,0x7ffe67f8feb4,11059627,0,0x0,8
tick,0x7ffe67f8feb4,11075178,0,0x0,8
tick,0x7ffe67f8feb4,11090214,0,0x0,8
tick,0x7ffe67f8feb4,11105742,0,0x0,8
tick,0x7ffe67f8feb4,11121143,0,0x0,8
tick,0x7ffe67f8feb4,11136794,0,0x0,8
tick,0x7ffe67f8feb4,11151792,0,0x0,8
tick,0x7ffe67f8feb4,11166726,0,0x0,8
tick,0x7ffe67f8feb4,11181976,0,0x0,8
tick,0x7ffe67f8feb4,11197539,0,0x0,8
tick,0x7ffe67f8feb4,11213143,0,0x0,8
tick,0x7ffe67f8feb4,11229053,0,0x0,8
tick,0x7ffe67f8feb4,11244340,0,0x0,8
tick,0x7ffe67f8feb4,11260348,0,0x0,8
tick,0x7ffe67f8feb4,11275859,0,0x0,8
tick,0x7ffe67f8feb4,11291645,0,0x0,8
tick,0x7ffe67f8feb4,11306855,0,0x0,8
tick,0x7ffe67f8feb4,11322141,0,0x0,8
tick,0x7ffe67f8feb4,11338573,0,0x0,8
tick,0x7ffe67f8feb4,11354098,0,0x0,8
tick,0x7ffe67f8feb4,11369467,0,0x0,8
tick,0x7ffe67f8feb4,11385139,0,0x0,8
tick,0x7ffe67f8feb4,11401135,0,0x0,8
tick,0x7ffe67f8feb4,11416299,0,0x0,8
tick,0x7ffe67f8feb4,11431874,0,0x0,8
tick,0x7ffe67f8feb4,11447309,0,0x0,8
tick,0x7ffe67f8feb4,11463326,0,0x0,8
tick,0x7ffe67f8feb4,11479441,0,0x0,8
tick,0x7ffe67f8feb4,11495346,0,0x0,8
tick,0x7ffe67f8feb4,11511302,0,0x0,8
tick,0x7ffe67f8feb4,11527368,0,0x0,8
tick,0x7ffe67f8feb4,11543314,0,0x0,8
tick,0x7ffe67f8feb4,11559333,0,0x0,8
tick,0x7ffe67f8feb4,11574569,0,0x0,8
tick,0x7ffe67f8feb4,11590338,0,0x0,8
tick,0x7ffe67f8feb4,11605507,0,0x0,8
tick,0x7ffe67f8feb4,11621392,0,0x0,8
tick,0x7ffe67f8feb4,11637466,0,0x0,8
tick,0x7ffe67f8feb4,11653792,0,0x0,8
tick,0x7ffe67f8feb4,11669278,0,0x0,8
tick,0x7ffe67f8feb4,11684445,0,0x0,8
tick,0x7ffe67f8feb4,11699764,0,0x0,8
tick,0x7ffe67f8feb4,11715211,0,0x0,8
tick,0x7ffe67f8feb4,11730823,0,0x0,8
tick,0x7ffe67f8feb4,11745999,0,0x0,8
tick,0x7ffe67f8feb4,11761378,0,0x0,8
tick,0x7ffe67f8feb4,11777248,0,0x0,8
tick,0x7ffe67f8feb4,11792400,0,0x0,8
tick,0x7ffe67f8feb4,11807812,0,0x0,8
tick,0x7ffe67f8feb4,11822985,0,0x0,8
tick,0x7ffe67f8feb4,11838945,0,0x0,8
tick,0x7ffe67f8feb4,11854413,0,0x0,8
tick,0x7ffe67f8feb4,11870104,0,0x0,8
tick,0x7ffe67f8feb4,11886081,0,0x0,8
tick,0x7ffe67f8feb4,11899533,0,0x0,8
tick,0x7ffe67f8feb4,11915014,0,0x0,8
tick,0x7ffe67f8feb4,11927793,0,0x0,8
tick,0x7ffe67f8feb4,11943966,0,0x0,8
tick,0x7ffe67f8feb4,11959925,0,0x0,8
tick,0x7ffe67f8feb4,11975992,0,0x0,8
tick,0x7ffe67f8feb4,11992052,0,0x0,8
tick,0x7ffe67f8feb4,12007274,0,0x0,8
tick,0x7ffe67f8feb4,12023298,0,0x0,8
tick,0x7ffe67f8feb4,12039322,0,0x0,8
tick,0x7ffe67f8feb4,12055297,0,0x0,8
tick,0x7ffe67f8feb4,12071309,0,0x0,8
tick,0x7ffe67f8feb4,12086449,0,0x0,8
tick,0x7ffe67f8feb4,12101629,0,0x0,8
tick,0x7ffe67f8feb4,12116783,0,0x0,8
tick,0x7ffe67f8feb4,12132315,0,0x0,8
tick,0x7ffe67f8feb4,12148168,0,0x0,8
tick,0x7ffe67f8feb4,12163561,0,0x0,8
tick,0x7ffe67f8feb4,12179843,0,0x0,8
tick,0x7ffe67f8feb4,12195002,0,0x0,8
tick,0x7ffe67f8feb4,12210311,0,0x0,8
tick,0x7ffe67f8feb4,12225985,0,0x0,8
tick,0x7ffe67f8feb4,12241634,0,0x0,8
tick,0x7ffe67f8feb4,12257040,0,0x0,8
tick,0x7ffe67f8feb4,12272478,0,0x0,8
tick,0x7ffe67f8feb4,12287673,0,0x0,8
tick,0x7ffe67f8feb4,12303800,0,0x0,8
tick,0x7ffe67f8feb4,12319109,0,0x0,8
tick,0x7ffe67f8feb4,12334717,0,0x0,8
tick,0x7ffe67f8feb4,12350512,0,0x0,8
tick,0x7ffe67f8feb4,12366003,0,0x0,8
tick,0x7ffe67f8feb4,12381706,0,0x0,8
tick,0x7ffe67f8feb4,12397074,0,0x0,8
tick,0x7ffe67f8feb4,12412745,0,0x0,8
tick,0x7ffe67f8feb4,12427949,0,0x0,8
tick,0x7ffe67f8feb4,12443571,0,0x0,8
tick,0x7ffe67f8feb4,12459555,0,0x0,8
tick,0x7ffe67f8feb4,12474933,0,0x0,8
tick,0x7ffe67f8feb4,12490524,0,0x0,8
tick,0x7ffe67f8feb4,12505869,0,0x0,8
tick,0x7ffe67f8feb4,12521215,0,0x0,8
tick,0x7ffe67f8feb4,12539981,0,0x0,8
tick,0x7ffe67f8feb4,12555130,0,0x0,8
tick,0x7ffe67f8feb4,12570266,0,0x0,8
tick,0x7ffe67f8feb4,12585593,0,0x0,8
tick,0x7ffe67f8feb4,12601311,0,0x0,8
tick,0x7ffe67f8feb4,12616610,0,0x0,8
tick,0x7ffe67f8feb4,12631818,0,0x0,8
tick,0x7ffe67f8feb4,12647174,0,0x0,8
tick,0x7ffe67f8feb4,12663055,0,0x0,8
tick,0x7ffe67f8feb4,12679051,0,0x0,8
tick,0x7ffe67f8feb4,12694994,0,0x0,8
tick,0x7ffe67f8feb4,12710497,0,0x0,8
tick,0x7ffe67f8feb4,12726161,0,0x0,8
tick,0x7ffe67f8feb4,12741760,0,0x0,8
tick,0x7ffe67f8feb4,12757019,0,0x0,8
tick,0x7ffe67f8feb4,12773148,0,0x0,8
tick,0x7ffe67f8feb4,12789283,0,0x0,8
tick,0x7ffe67f8feb4,12804904,0,0x0,8
tick,0x7ffe67f8feb4,12820292,0,0x0,8
tick,0x7ffe67f8feb4,12835644,0,0x0,8
tick,0x7ffe67f8feb4,12851434,0,0x0,8
tick,0x7ffe67f8feb4,12867167,0,0x0,8
tick,0x7ffe67f8feb4,12883052,0,0x0,8
tick,0x7ffe67f8feb4,12899188,0,0x0,8
tick,0x7ffe67f8feb4,12914315,0,0x0,8
tick,0x7ffe67f8feb4,12930577,0,0x0,8
tick,0x7ffe67f8feb4,12949867,0,0x0,8
tick,0x7ffe67f8feb4,12962015,0,0x0,8
tick,0x7ffe67f8feb4,12979150,0,0x0,8
tick,0x7ffe67f8feb4,12993692,0,0x0,8
tick,0x7ffe67f8feb4,13009414,0,0x0,8
tick,0x7ffe67f8feb4,13025518,0,0x0,8
tick,0x7ffe67f8feb4,13041667,0,0x0,8
tick,0x7ffe67f8feb4,13057908,0,0x0,8
tick,0x7ffe67f8feb4,13073299,0,0x0,8
tick,0x7ffe67f8feb4,13089380,0,0x0,8
tick,0x7ffe67f8feb4,13104598,0,0x0,8
tick,0x7ffe67f8feb4,13120624,0,0x0,8
tick,0x7ffe67f8feb4,13136224,0,0x0,8
tick,0x7ffe67f8feb4,13151608,0,0x0,8
tick,0x7ffe67f8feb4,13166997,0,0x0,8
tick,0x7ffe67f8feb4,13182018,0,0x0,8
tick,0x7ffe67f8feb4,13197986,0,0x0,8
tick,0x7ffe67f8feb4,13213650,0,0x0,8
tick,0x7ffe67f8feb4,13229622,0,0x0,8
tick,0x7ffe67f8feb4,13245175,0,0x0,8
tick,0x7ffe67f8feb4,13260586,0,0x0,8
tick,0x7ffe67f8feb4,13276677,0,0x0,8
tick,0x7ffe67f8feb4,13292664,0,0x0,8
tick,0x7ffe67f8feb4,13308729,0,0x0,8
tick,0x7ffe67f8feb4,13324635,0,0x0,8
tick,0x7ffe67f8feb4,13340991,0,0x0,8
tick,0x7ffe67f8feb4,13356591,0,0x0,8
tick,0x7ffe67f8feb4,13372607,0,0x0,8
tick,0x7ffe67f8feb4,13388600,0,0x0,8
tick,0x7ffe67f8feb4,13404484,0,0x0,8
tick,0x7ffe67f8feb4,13419595,0,0x0,8
tick,0x7ffe67f8feb4,13435512,0,0x0,8
tick,0x7ffe67f8feb4,13450948,0,0x0,8
tick,0x7ffe67f8feb4,13466505,0,0x0,8
tick,0x7ffe67f8feb4,13481487,0,0x0,8
tick,0x7ffe67f8feb4,13497488,0,0x0,8
tick,0x7ffe67f8feb4,13512700,0,0x0,8
tick,0x7ffe67f8feb4,13528710,0,0x0,8
tick,0x7ffe67f8feb4,13544692,0,0x0,8
tick,0x7ffe67f8feb4,13560699,0,0x0,8
tick,0x7ffe67f8feb4,13576792,0,0x0,8
tick,0x7ffe67f8feb4,13592796,0,0x0,8
tick,0x7ffe67f8feb4,13608925,0,0x0,8
tick,0x7ffe67f8feb4,13625140,0,0x0,8
tick,0x7ffe67f8feb4,13640658,0,0x0,8
tick,0x7ffe67f8feb4,13655773,0,0x0,8
tick,0x7ffe67f8feb4,13670899,0,0x0,8
tick,0x7ffe67f8feb4,13686057,0,0x0,8
tick,0x7ffe67f8feb4,13701202,0,0x0,8
tick,0x7ffe67f8feb4,13716831,0,0x0,8
tick,0x7ffe67f8feb4,13732537,0,0x0,8
tick,0x7ffe67f8feb4,13747809,0,0x0,8
tick,0x7ffe67f8feb4,13763754,0,0x0,8
tick,0x7ffe67f8feb4,13778928,0,0x0,8
tick,0x7ffe67f8feb4,13794585,0,0x0,8
tick,0x7ffe67f8feb4,13809715,0,0x0,8
tick,0x7ffe67f8feb4,13824980,0,0x0,8
tick,0x7ffe67f8feb4,13840165,0,0x0,8
tick,0x7ffe67f8feb4,13856029,0,0x0,8
tick,0x7ffe67f8feb4,13872029,0,0x0,8
tick,0x7ffe67f8feb4,13887398,0,0x0,8
tick,0x7ffe67f8feb4,13903420,0,0x0,8
tick,0x7ffe67f8feb4,13919018,0,0x0,8
tick,0x7ffe67f8feb4,13935436,0,0x0,8
tick,0x7ffe67f8feb4,13950620,0,0x0,8
tick,0x7ffe67f8feb4,13966694,0,0x0,8
tick,0x7ffe67f8feb4,13982801,0,0x0,8
tick,0x7ffe67f8feb4,13998902,0,0x0,8
tick,0x7ffe67f8feb4,14014948,0,0x0,8
tick,0x7ffe67f8feb4,14030601,0,0x0,8
tick,0x7ffe67f8feb4,14046960,0,0x0,8
tick,0x7ffe67f8feb4,14062387,0,0x0,8
tick,0x7ffe67f8feb4,14078102,0,0x0,8
tick,0x7ffe67f8feb4,14093360,0,0x0,8
tick,0x7ffe67f8feb4,14108920,0,0x0,8
tick,0x7ffe67f8feb4,14124644,0,0x0,8
tick,0x7ffe67f8feb4,14139754,0,0x0,8
tick,0x7ffe67f8feb4,14155055,0,0x0,8
tick,0x7ffe67f8feb4,14170319,0,0x0,8
tick,0x7ffe67f8feb4,14186106,0,0x0,8
tick,0x7ffe67f8feb4,14201141,0,0x0,8
tick,0x7ffe67f8feb4,14217224,0,0x0,8
tick,0x7ffe67f8feb4,14232841,0,0x0,8
tick,0x7ffe67f8feb4,14248209,0,0x0,8
tick,0x7ffe67f8feb4,14264433,0,0x0,8
tick,0x7ffe67f8feb4,14280052,0,0x0,8
tick,0x7ffe67f8feb4,14295203,0,0x0,8
tick,0x7ffe67f8feb4,14311509,0,0x0,8
tick,0x7ffe67f8feb4,14326650,0,0x0,8
tick,0x7ffe67f8feb4,14342098,0,0x0,8
tick,0x7ffe67f8feb4,14357502,0,0x0,8
tick,0x7ffe67f8feb4,14372998,0,0x0,8
tick,0x7ffe67f8feb4,14388411,0,0x0,8
tick,0x7ffe67f8feb4,14404335,0,0x0,8
tick,0x7ffe67f8feb4,14420586,0,0x0,8
tick,0x7ffe67f8feb4,14435887,0,0x0,8
tick,0x7ffe67f8feb4,14451514,0,0x0,8
tick,0x7ffe67f8feb4,14467443,0,0x0,8
tick,0x7ffe67f8feb4,14483544,0,0x0,8
tick,0x7ffe67f8feb4,14499098,0,0x0,8
tick,0x7ffe67f8feb4,14514609,0,0x0,8
tick,0x7ffe67f8feb4,14529646,0,0x0,8
tick,0x7ffe67f8feb4,14544887,0,0x0,8
tick,0x7ffe67f8feb4,14560770,0,0x0,8
tick,0x7ffe67f8feb4,14576133,0,0x0,8
tick,0x7ffe67f8feb4,14592136,0,0x0,8
tick,0x7ffe67f8feb4,14608565,0,0x0,8
tick,0x7ffe67f8feb4,14624406,0,0x0,8
tick,0x7ffe67f8feb4,14640029,0,0x0,8
tick,0x7ffe67f8feb4,14655350,0,0x0,8
tick,0x7ffe67f8feb4,14670652,0,0x0,8
tick,0x7ffe67f8feb4,14686653,0,0x0,8
tick,0x7ffe67f8feb4,14702148,0,0x0,8
tick,0x7ffe67f8feb4,14717344,0,0x0,8
tick,0x7ffe67f8feb4,14732747,0,0x0,8
tick,0x7ffe67f8feb4,14748198,0,0x0,8
tick,0x7ffe67f8feb4,14763472,0,0x0,8
tick,0x7ffe67f8feb4,14778725,0,0x0,8
tick,0x7ffe67f8feb4,14794401,0,0x0,8
tick,0x7ffe67f8feb4,14809915,0,0x0,8
tick,0x7ffe67f8feb4,14825268,0,0x0,8
tick,0x7ffe67f8feb4,14840761,0,0x0,8
tick,0x7ffe67f8feb4,14856602,0,0x0,8
tick,0x7ffe67f8feb4,14872196,0,0x0,8
tick,0x7ffe67f8feb4,14887557,0,0x0,8
tick,0x7ffe67f8feb4,14903105,0,0x0,8
tick,0x7ffe67f8feb4,14918228,0,0x0,8
tick,0x7ffe67f8feb4,14934308,0,0x0,8
tick,0x7ffe67f8feb4,14950220,0,0x0,8
tick,0x7ffe67f8feb4,14965562,0,0x0,8
tick,0x7ffe67f8feb4,14981529,0,0x0,8
tick,0x7ffe67f8feb4,14997522,0,0x0,8
tick,0x7ffe67f8feb4,15012694,0,0x0,8
tick,0x7ffe67f8feb4,15028151,0,0x0,8
tick,0x7ffe67f8feb4,15043614,0,0x0,8
tick,0x7ffe67f8feb4,15059763,0,0x0,8
tick,0x7ffe67f8feb4,15075112,0,0x0,8
tick,0x7ffe67f8feb4,15090159,0,0x0,8
tick,0x7ffe67f8feb4,15105186,0,0x0,8
tick,0x7ffe67f8feb4,15120739,0,0x0,8
tick,0x7ffe67f8feb4,15135846,0,0x0,8
tick,0x7ffe67f8feb4,15151125,0,0x0,8
tick,0x7ffe67f8feb4,15167116,0,0x0,8
tick,0x7ffe67f8feb4,15182472,0,0x0,8
tick,0x7ffe67f8feb4,15197530,0,0x0,8
tick,0x7ffe67f8feb4,15212525,0,0x0,8
tick,0x7ffe67f8feb4,15227606,0,0x0,8
tick,0x7ffe67f8feb4,15243024,0,0x0,8
tick,0x7ffe67f8feb4,15258814,0,0x0,8
tick,0x7ffe67f8feb4,15275116,0,0x0,8
tick,0x7ffe67f8feb4,15290119,0,0x0,8
tick,0x7ffe67f8feb4,15305555,0,0x0,8
tick,0x7ffe67f8feb4,15321821,0,0x0,8
tick,0x7ffe67f8feb4,15337278,0,0x0,8
tick,0x7ffe67f8feb4,15353511,0,0x0,8
tick,0x7ffe67f8feb4,15369066,0,0x0,8
tick,0x7ffe67f8feb4,15384602,0,0x0,8
tick,0x7ffe67f8feb4,15400111,0,0x0,8
tick,0x7ffe67f8feb4,15415267,0,0x0,8
tick,0x7ffe67f8feb4,15430637,0,0x0,8
tick,0x7ffe67f8feb4,15446610,0,0x0,8
tick,0x7ffe67f8feb4,15462632,0,0x0,8
tick,0x7ffe67f8feb4,15477811,0,0x0,8
tick,0x7ffe67f8feb4,15493642,0,0x0,8
tick,0x7ffe67f8feb4,15509907,0,0x0,8
tick,0x7ffe67f8feb4,15525858,0,0x0,8
tick,0x7ffe67f8feb4,15541208,0,0x0,8
tick,0x7ffe67f8feb4,15556456,0,0x0,8
tick,0x7ffe67f8feb4,15572017,0,0x0,8
tick,0x7ffe67f8feb4,15587466,0,0x0,8
tick,0x7ffe67f8feb4,15603354,0,0x0,8
tick,0x7ffe67f8feb4,15619382,0,0x0,8
tick,0x7ffe67f8feb4,15635039,0,0x0,8
tick,0x7ffe67f8feb4,15650163,0,0x0,8
tick,0x7ffe67f8feb4,15666442,0,0x0,8
tick,0x7ffe67f8feb4,15682371,0,0x0,8
tick,0x7ffe67f8feb4,15697835,0,0x0,8
tick,0x7ffe67f8feb4,15713708,0,0x0,8
tick,0x7ffe67f8feb4,15729293,0,0x0,8
tick,0x7ffe67f8feb4,15745524,0,0x0,8
tick,0x7ffe67f8feb4,15760670,0,0x0,8
tick,0x7ffe67f8feb4,15799203,0,0x0,8
tick,0x7ffe67f8feb4,15805366,0,0x0,8
tick,0x7ffe67f8feb4,15820387,0,0x0,8
tick,0x7ffe67f8feb4,15836370,0,0x0,8
tick,0x7ffe67f8feb4,15852379,0,0x0,8
tick,0x7ffe67f8feb4,15868321,0,0x0,8
tick,0x7ffe67f8feb4,15883496,0,0x0,8
tick,0x7ffe67f8feb4,15898627,0,0x0,8
tick,0x7ffe67f8feb4,15914611,0,0x0,8
tick,0x7ffe67f8feb4,15930603,0,0x0,8
tick,0x7ffe67f8feb4,15946681,0,0x0,8
tick,0x7ffe67f8feb4,15962743,0,0x0,8
tick,0x7ffe67f8feb4,15978802,0,0x0,8
tick,0x7ffe67f8feb4,15994886,0,0x0,8
tick,0x7ffe67f8feb4,16010981,0,0x0,8
tick,0x7ffe67f8feb4,16027065,0,0x0,8
tick,0x7ffe67f8feb4,16042116,0,0x0,8
tick,0x7ffe67f8feb4,16057268,0,0x0,8
tick,0x7ffe67f8feb4,16072491,0,0x0,8
tick,0x7ffe67f8feb4,16088476,0,0x0,8
tick,0x7ffe67f8feb4,16103613,0,0x0,8
tick,0x7ffe67f8feb4,16118939,0,0x0,8
tick,0x7ffe67f8feb4,16134924,0,0x0,8
tick,0x7ffe67f8feb4,16149913,0,0x0,8
tick,0x7ffe67f8feb4,16165940,0,0x0,8
tick,0x7ffe67f8feb4,16181141,0,0x0,8
tick,0x7ffe67f8feb4,16196995,0,0x0,8
tick,0x7ffe67f8feb4,16212218,0,0x0,8
tick,0x7ffe67f8feb4,16227890,0,0x0,8
tick,0x7ffe67f8feb4,16243286,0,0x0,8
tick,0x7ffe67f8feb4,16258568,0,0x0,8
tick,0x7ffe67f8feb4,16274064,0,0x0,8
tick,0x7ffe67f8feb4,16289482,0,0x0,8
tick,0x7ffe67f8feb4,16304919,0,0x0,8
tick,0x7ffe67f8feb4,16321251,0,0x0,8
tick,0x7ffe67f8feb4,16337266,0,0x0,8
tick,0x7ffe67f8feb4,16352454,0,0x0,8
tick,0x7ffe67f8feb4,16367445,0,0x0,8
tick,0x7ffe67f8feb4,16382774,0,0x0,8
tick,0x7ffe67f8feb4,16398234,0,0x0,8
tick,0x7ffe67f8feb4,16414451,0,0x0,8
tick,0x7ffe67f8feb4,16429707,0,0x0,8
tick,0x7ffe67f8feb4,16445197,0,0x0,8
tick,0x7ffe67f8feb4,16477609,0,0x0,8
tick,0x7ffe67f8feb4,16492770,0,0x0,8
tick,0x7ffe67f8feb4,16508843,0,0x0,8
tick,0x7ffe67f8feb4,16524750,0,0x0,8
tick,0x7ffe67f8feb4,16540010,0,0x0,8
tick,0x7ffe67f8feb4,16556086,0,0x0,8
tick,0x7ffe67f8feb4,16571052,0,0x0,8
tick,0x7ffe67f8feb4,16587071,0,0x0,8
tick,0x7ffe67f8feb4,16603184,0,0x0,8
tick,0x7ffe67f8feb4,16619283,0,0x0,8
tick,0x7ffe67f8feb4,16635288,0,0x0,8
tick,0x7ffe67f8feb4,16651406,0,0x0,8
tick,0x7ffe67f8feb4,16667506,0,0x0,8
tick,0x7ffe67f8feb4,16683602,0,0x0,8
tick,0x7ffe67f8feb4,16699692,0,0x0,8
tick,0x7ffe67f8feb4,16715778,0,0x0,8
tick,0x7ffe67f8feb4,16730970,0,0x0,8
tick,0x7ffe67f8feb4,16747042,0,0x0,8
tick,0x7ffe67f8feb4,16762166,0,0x0,8
tick,0x7ffe67f8feb4,16778048,0,0x0,8
tick,0x7ffe67f8feb4,16794268,0,0x0,8
tick,0x7ffe67f8feb4,16809686,0,0x0,8
tick,0x7ffe67f8feb4,16825815,0,0x0,8
tick,0x7ffe67f8feb4,16841145,0,0x0,8
tick,0x7ffe67f8feb4,16857172,0,0x0,8
tick,0x7ffe67f8feb4,16872529,0,0x0,8
tick,0x7ffe67f8feb4,16888493,0,0x0,8
tick,0x7ffe67f8feb4,16904155,0,0x0,8
tick,0x7ffe67f8feb4,16919870,0,0x0,8
tick,0x7ffe67f8feb4,16935225,0,0x0,8
tick,0x7ffe67f8feb4,16950944,0,0x0,8
tick,0x7ffe67f8feb4,16966158,0,0x0,8
tick,0x7ffe67f8feb4,16982200,0,0x0,8
tick,0x7ffe67f8feb4,16997627,0,0x0,8
tick,0x7ffe67f8feb4,17013720,0,0x0,8
tick,0x7ffe67f8feb4,17029554,0,0x0,8
tick,0x7ffe67f8feb4,17045656,0,0x0,8
tick,0x7ffe67f8feb4,17060851,0,0x0,8
tick,0x7ffe67f8feb4,17076443,0,0x0,8
tick,0x7ffe67f8feb4,17092243,0,0x0,8
tick,0x7ffe67f8feb4,17107743,0,0x0,8
tick,0x7ffe67f8feb4,17123428,0,0x0,8
tick,0x7ffe67f8feb4,17138377,0,0x0,8
tick,0x7ffe67f8feb4,17153572,0,0x0,8
tick,0x7ffe67f8feb4,17168887,0,0x0,8
tick,0x7ffe67f8feb4,17184398,0,0x0,8
tick,0x7ffe67f8feb4,17199951,0,0x0,8
tick,0x7ffe67f8feb4,17215394,0,0x0,8
tick,0x7ffe67f8feb4,17230863,0,0x0,8
tick,0x7ffe67f8feb4,17246368,0,0x0,8
tick,0x7ffe67f8feb4,17262255,0,0x0,8
tick,0x7ffe67f8feb4,17277762,0,0x0,8
tick,0x7ffe67f8feb4,17293871,0,0x0,8
tick,0x7ffe67f8feb4,17310050,0,0x0,8
tick,0x7ffe67f8feb4,17325580,0,0x0,8
tick,0x7ffe67f8feb4,17341022,0,0x0,8
tick,0x7ffe67f8feb4,17356799,0,0x0,8
tick,0x7ffe67f8feb4,17372363,0,0x0,8
tick,0x7ffe67f8feb4,17387557,0,0x0,8
tick,0x7ffe67f8feb4,17402974,0,0x0,8
tick,0x7ffe67f8feb4,17419107,0,0x0,8
tick,0x7ffe67f8feb4,17434752,0,0x0,8
tick,0x7ffe67f8feb4,17449875,0,0x0,8
tick,0x7ffe67f8feb4,17465646,0,0x0,8
tick,0x7ffe67f8feb4,17482005,0,0x0,8
tick,0x7ffe67f8feb4,17497428,0,0x0,8
tick,0x7ffe67f8feb4,17513621,0,0x0,8
tick,0x7ffe67f8feb4,17529050,0,0x0,8
tick,0x7ffe67f8feb4,17544549,0,0x0,8
tick,0x7ffe67f8feb4,17560189,0,0x0,8
tick,0x7ffe67f8feb4,17575110,0,0x0,8
tick,0x7ffe67f8feb4,17590749,0,0x0,8
tick,0x7ffe67f8feb4,17606507,0,0x0,8
tick,0x7ffe67f8feb4,17622110,0,0x0,8
tick,0x7ffe67f8feb4,17637963,0,0x0,8
tick,0x7ffe67f8feb4,17653734,0,0x0,8
tick,0x7ffe67f8feb4,17669294,0,0x0,8
tick,0x7ffe67f8feb4,17684987,0,0x0,8
tick,0x7ffe67f8feb4,17700361,0,0x0,8
tick,0x7ffe67f8feb4,17716111,0,0x0,8
tick,0x7ffe67f8feb4,17731260,0,0x0,8
tick,0x7ffe67f8feb4,17746642,0,0x0,8
tick,0x7ffe67f8feb4,17762715,0,0x0,8
tick,0x7ffe67f8feb4,17778579,0,0x0,8
tick,0x7ffe67f8feb4,17794675,0,0x0,8
tick,0x7ffe67f8feb4,17810519,0,0x0,8
tick,0x7ffe67f8feb4,17826357,0,0x0,8
tick,0x7ffe67f8feb4,17842288,0,0x0,8
tick,0x7ffe67f8feb4,17857764,0,0x0,8
tick,0x7ffe67f8feb4,17873676,0,0x0,8
tick,0x7ffe67f8feb4,17889138,0,0x0,8
tick,0x7ffe67f8feb4,17904198,0,0x0,8
tick,0x7ffe67f8feb4,17919682,0,0x0,8
tick,0x7ffe67f8feb4,17935392,0,0x0,8
tick,0x7ffe67f8feb4,17951157,0,0x0,8
tick,0x7ffe67f8feb4,17966859,0,0x0,8
tick,0x7ffe67f8feb4,17982328,0,0x0,8
tick,0x7ffe67f8feb4,17997634,0,0x0,8
tick,0x7ffe67f8feb4,18013076,0,0x0,8
tick,0x7ffe67f8feb4,18029122,0,0x0,8
tick,0x7ffe67f8feb4,18044404,0,0x0,8
tick,0x7ffe67f8feb4,18059487,0,0x0,8
tick,0x7ffe67f8feb4,18075613,0,0x0,8
tick,0x7ffe67f8feb4,18090820,0,0x0,8
tick,0x7ffe67f8feb4,18105878,0,0x0,8
tick,0x7ffe67f8feb4,18120915,0,0x0,8
tick,0x7ffe67f8feb4,18137151,0,0x0,8
tick,0x7ffe67f8feb4,18152720,0,0x0,8
tick,0x7ffe67f8feb4,18167971,0,0x0,8
tick,0x7ffe67f8feb4,18183790,0,0x0,8
tick,0x7ffe67f8feb4,18198612,0,0x0,8
tick,0x7ffe67f8feb4,18214012,0,0x0,8
tick,0x7ffe67f8feb4,18229121,0,0x0,8
tick,0x7ffe67f8feb4,18245448,0,0x0,8
tick,0x7ffe67f8feb4,18260299,0,0x0,8
tick,0x7ffe67f8feb4,18276537,0,0x0,8
tick,0x7ffe67f8feb4,18291901,0,0x0,8
tick,0x7ffe67f8feb4,18307061,0,0x0,8
tick,0x7ffe67f8feb4,18322768,0,0x0,8
tick,0x7ffe67f8feb4,18337949,0,0x0,8
tick,0x7ffe67f8feb4,18353240,0,0x0,8
tick,0x7ffe67f8feb4,18368850,0,0x0,8
tick,0x7ffe67f8feb4,18384960,0,0x0,8
tick,0x7ffe67f8feb4,18400438,0,0x0,8
tick,0x7ffe67f8feb4,18416317,0,0x0,8
tick,0x7ffe67f8feb4,18432372,0,0x0,8
tick,0x7ffe67f8feb4,18448183,0,0x0,8
tick,0x7ffe67f8feb4,18464402,0,0x0,8
tick,0x7ffe67f8feb4,18479345,0,0x0,8
tick,0x7ffe67f8feb4,18495412,0,0x0,8
tick,0x7ffe67f8feb4,18510570,0,0x0,8
tick,0x7ffe67f8feb4,18526615,0,0x0,8
tick,0x7ffe67f8feb4,18542580,0,0x0,8
tick,0x7ffe67f8feb4,18557731,0,0x0,8
tick,0x7ffe67f8feb4,18573748,0,0x0,8
tick,0x7ffe67f8feb4,18589838,0,0x0,8
tick,0x7ffe67f8feb4,18605219,0,0x0,8
tick,0x7ffe67f8feb4,18620286,0,0x0,8
tick,0x7ffe67f8feb4,18636385,0,0x0,8
tick,0x7ffe67f8feb4,18652462,0,0x0,8
tick,0x7ffe67f8feb4,18668508,0,0x0,8
tick,0x7ffe67f8feb4,18684488,0,0x0,8
tick,0x7ffe67f8feb4,18699671,0,0x0,8
tick,0x7ffe67f8feb4,18715445,0,0x0,8
tick,0x7ffe67f8feb4,18730022,0,0x0,8
tick,0x7ffe67f8feb4,18746160,0,0x0,8
tick,0x7ffe67f8feb4,18761352,0,0x0,8
tick,0x7ffe67f8feb4,18777558,0,0x0,8
tick,0x7ffe67f8feb4,18793353,0,0x0,8
tick,0x7ffe67f8feb4,18808885,0,0x0,8
tick,0x7ffe67f8feb4,18824495,0,0x0,8
tick,0x7ffe67f8feb4,18840148,0,0x0,8
tick,0x7ffe67f8feb4,18855562,0,0x0,8
tick,0x7ffe67f8feb4,18871276,0,0x0,8
tick,0x7ffe67f8feb4,18887346,0,0x0,8
tick,0x7ffe67f8feb4,18902581,0,0x0,8
tick,0x7ffe67f8feb4,18917874,0,0x0,8
tick,0x7ffe67f8feb4,18934084,0,0x0,8
tick,0x7ffe67f8feb4,18950308,0,0x0,8
tick,0x7ffe67f8feb4,18965888,0,0x0,8
tick,0x7ffe67f8feb4,18981475,0,0x0,8
tick,0x7ffe67f8feb4,18997142,0,0x0,8
tick,0x7ffe67f8feb4,19013088,0,0x0,8
tick,0x7ffe67f8feb4,19028360,0,0x0,8
tick,0x7ffe67f8feb4,19044403,0,0x0,8
tick,0x7ffe67f8feb4,19060525,0,0x0,8
tick,0x7ffe67f8feb4,19075514,0,0x0,8
tick,0x7ffe67f8feb4,19091602,0,0x0,8
tick,0x7ffe67f8feb4,19107656,0,0x0,8
tick,0x7ffe67f8feb4,19123677,0,0x0,8
tick,0x7ffe67f8feb4,19138828,0,0x0,8
tick,0x7ffe67f8feb4,19154184,0,0x0,8
tick,0x7ffe67f8feb4,19169696,0,0x0,8
tick,0x7ffe67f8feb4,19184866,0,0x0,8
tick,0x7ffe67f8feb4,19200027,0,0x0,8
tick,0x7ffe67f8feb4,19215590,0,0x0,8
tick,0x7ffe67f8feb4,19230555,0,0x0,8
tick,0x7ffe67f8feb4,19246040,0,0x0,8
tick,0x7ffe67f8feb4,19261964,0,0x0,8
tick,0x7ffe67f8feb4,19277031,0,0x0,8
tick,0x7ffe67f8feb4,19292385,0,0x0,8
tick,0x7ffe67f8feb4,19307813,0,0x0,8
tick,0x7ffe67f8feb4,19323798,0,0x0,8
tick,0x7ffe67f8feb4,19339914,0,0x0,8
tick,0x7ffe67f8feb4,19355237,0,0x0,8
tick,0x7ffe67f8feb4,19371019,0,0x0,8
tick,0x7ffe67f8feb4,19386495,0,0x0,8
tick,0x7ffe67f8feb4,19402595,0,0x0,8
tick,0x7ffe67f8feb4,19417357,0,0x0,8
tick,0x7ffe67f8feb4,19433023,0,0x0,8
tick,0x7ffe67f8feb4,19448752,0,0x0,8
tick,0x7ffe67f8feb4,19464656,0,0x0,8
tick,0x7ffe67f8feb4,19480097,0,0x0,8
tick,0x7ffe67f8feb4,19495949,0,0x0,8
tick,0x7ffe67f8feb4,19511879,0,0x0,8
tick,0x7ffe67f8feb4,19526929,0,0x0,8
tick,0x7ffe67f8feb4,19542562,0,0x0,8
tick,0x7ffe67f8feb4,19557819,0,0x0,8
tick,0x7ffe67f8feb4,19573371,0,0x0,8
tick,0x7ffe67f8feb4,19588844,0,0x0,8
tick,0x7ffe67f8feb4,19604396,0,0x0,8
tick,0x7ffe67f8feb4,19619879,0,0x0,8
tick,0x7ffe67f8feb4,19635136,0,0x0,8
tick,0x7ffe67f8feb4,19650778,0,0x0,8
tick,0x7ffe67f8feb4,19665923,0,0x0,8
tick,0x7ffe67f8feb4,19681492,0,0x0,8
tick,0x7ffe67f8feb4,19696820,0,0x0,8
tick,0x7ffe67f8feb4,19712824,0,0x0,8
tick,0x7ffe67f8feb4,19727846,0,0x0,8
tick,0x7ffe67f8feb4,19743032,0,0x0,8
tick,0x7ffe67f8feb4,19758130,0,0x0,8
tick,0x7ffe67f8feb4,19773424,0,0x0,8
tick,0x7ffe67f8feb4,19788795,0,0x0,8
tick,0x7ffe67f8feb4,19804376,0,0x0,8
tick,0x7ffe67f8feb4,19819147,0,0x0,8
tick,0x7ffe67f8feb4,19834822,0,0x0,8
tick,0x7ffe67f8feb4,19850951,0,0x0,8
tick,0x7ffe67f8feb4,19866501,0,0x0,8
tick,0x7ffe67f8feb4,19882202,0,0x0,8
tick,0x7ffe67f8feb4,19897755,0,0x0,8
tick,0x7ffe67f8feb4,19913569,0,0x0,8
tick,0x7ffe67f8feb4,19929832,0,0x0,8
tick,0x7ffe67f8feb4,19945466,0,0x0,8
tick,0x7ffe67f8feb4,19960841,0,0x0,8
tick,0x7ffe67f8feb4,19976923,0,0x0,8
tick,0x7ffe67f8feb4,19992499,0,0x0,8
tick,0x7ffe67f8feb4,20008328,0,0x0,8
tick,0x7ffe67f8feb4,20024093,0,0x0,8
tick,0x7ffe67f8feb4,20039577,0,0x0,8
tick,0x7ffe67f8feb4,20055692,0,0x0,8
tick,0x7ffe67f8feb4,20071667,0,0x0,8
tick,0x7ffe67f8feb4,20086844,0,0x0,8
tick,0x7ffe67f8feb4,20102135,0,0x0,8
tick,0x7ffe67f8feb4,20117897,0,0x0,8
tick,0x7ffe67f8feb4,20133580,0,0x0,8
tick,0x7ffe67f8feb4,20149602,0,0x0,8
tick,0x7ffe67f8feb4,20165717,0,0x0,8
tick,0x7ffe67f8feb4,20180733,0,0x0,8
tick,0x7ffe67f8feb4,20196443,0,0x0,8
tick,0x7ffe67f8feb4,20212683,0,0x0,8
tick,0x7ffe67f8feb4,20228151,0,0x0,8
tick,0x7ffe67f8feb4,20243751,0,0x0,8
tick,0x7ffe67f8feb4,20259085,0,0x0,8
tick,0x7ffe67f8feb4,20274511,0,0x0,8
tick,0x7ffe67f8feb4,20290554,0,0x0,8
tick,0x7ffe67f8feb4,20305845,0,0x0,8
tick,0x7ffe67f8feb4,20322065,0,0x0,8
tick,0x7ffe67f8feb4,20337489,0,0x0,8
tick,0x7ffe67f8feb4,20353400,0,0x0,8
tick,0x7ffe67f8feb4,20368381,0,0x0,8
tick,0x7ffe67f8feb4,20383608,0,0x0,8
tick,0x7ffe67f8feb4,20399246,0,0x0,8
tick,0x7ffe67f8feb4,20415530,0,0x0,8
tick,0x7ffe67f8feb4,20430767,0,0x0,8
tick,0x7ffe67f8feb4,20445806,0,0x0,8
tick,0x7ffe67f8feb4,20462304,0,0x0,8
tick,0x7ffe67f8feb4,20477726,0,0x0,8
tick,0x7ffe67f8feb4,20493829,0,0x0,8
tick,0x7ffe67f8feb4,20509594,0,0x0,8
tick,0x7ffe67f8feb4,20524734,0,0x0,8
tick,0x7ffe67f8feb4,20540758,0,0x0,8
tick,0x7ffe67f8feb4,20555921,0,0x0,8
tick,0x7ffe67f8feb4,20571614,0,0x0,8
tick,0x7ffe67f8feb4,20587717,0,0x0,8
tick,0x7ffe67f8feb4,20603741,0,0x0,8
tick,0x7ffe67f8feb4,20619512,0,0x0,8
tick,0x7ffe67f8feb4,20635538,0,0x0,8
tick,0x7ffe67f8feb4,20651548,0,0x0,8
tick,0x7ffe67f8feb4,20667344,0,0x0,8
tick,0x7ffe67f8feb4,20682909,0,0x0,8
tick,0x7ffe67f8feb4,20698614,0,0x0,8
tick,0x7ffe67f8feb4,20713723,0,0x0,8
tick,0x7ffe67f8feb4,20729384,0,0x0,8
tick,0x7ffe67f8feb4,20744715,0,0x0,8
tick,0x7ffe67f8feb4,20759721,0,0x0,8
tick,0x7ffe67f8feb4,20775337,0,0x0,8
tick,0x7ffe67f8feb4,20790559,0,0x0,8
tick,0x7ffe67f8feb4,20806616,0,0x0,8
tick,0x7ffe67f8feb4,20822372,0,0x0,8
tick,0x7ffe67f8feb4,20838447,0,0x0,8
tick,0x7ffe67f8feb4,20853753,0,0x0,8
tick,0x7ffe67f8feb4,20869533,0,0x0,8
tick,0x7ffe67f8feb4,20885098,0,0x0,8
tick,0x7ffe67f8feb4,20900897,0,0x0,8
tick,0x7ffe67f8feb4,20916559,0,0x0,8
tick,0x7ffe67f8feb4,20931754,0,0x0,8
tick,0x7ffe67f8feb4,20947789,0,0x0,8
tick,0x7ffe67f8feb4,20962886,0,0x0,8
tick,0x7ffe67f8feb4,20978810,0,0x0,8
tick,0x7ffe67f8feb4,20998667,0,0x0,8
tick,0x7ffe67f8feb4,21013441,0,0x0,8
tick,0x7ffe67f8feb4,21029413,0,0x0,8
tick,0x7ffe67f8feb4,21045501,0,0x0,8
tick,0x7ffe67f8feb4,21060521,0,0x0,8
tick,0x7ffe67f8feb4,21076509,0,0x0,8
tick,0x7ffe67f8feb4,21091876,0,0x0,8
tick,0x7ffe67f8feb4,21107030,0,0x0,8
tick,0x7ffe67f8feb4,21122166,0,0x0,8
tick,0x7ffe67f8feb4,21137369,0,0x0,8
tick,0x7ffe67f8feb4,21153324,0,0x0,8
tick,0x7ffe67f8feb4,21168450,0,0x0,8
tick,0x7ffe67f8feb4,21183641,0,0x0,8
tick,0x7ffe67f8feb4,21199095,0,0x0,8
tick,0x7ffe67f8feb4,21214841,0,0x0,8
tick,0x7ffe67f8feb4,21229954,0,0x0,8
tick,0x7ffe67f8feb4,21245324,0,0x0,8
tick,0x7ffe67f8feb4,21260329,0,0x0,8
tick,0x7ffe67f8feb4,21275822,0,0x0,8
tick,0x7ffe67f8feb4,21291823,0,0x0,8
tick,0x7ffe67f8feb4,21307763,0,0x0,8
tick,0x7ffe67f8feb4,21322885,0,0x0,8
tick,0x7ffe67f8feb4,21338876,0,0x0,8
tick,0x7ffe67f8feb4,21354861,0,0x0,8
tick,0x7ffe67f8feb4,21370832,0,0x0,8
tick,0x7ffe67f8feb4,21386605,0,0x0,8
tick,0x7ffe67f8feb4,21402323,0,0x0,8
tick,0x7ffe67f8feb4,21417905,0,0x0,8
tick,0x7ffe67f8feb4,21433328,0,0x0,8
tick,0x7ffe67f8feb4,21448613,0,0x0,8
tick,0x7ffe67f8feb4,21463844,0,0x0,8
tick,0x7ffe67f8feb4,21478981,0,0x0,8
tick,0x7ffe67f8feb4,21494748,0,0x0,8
tick,0x7ffe67f8feb4,21509882,0,0x0,8
tick,0x7ffe67f8feb4,21525011,0,0x0,8
tick,0x7ffe67f8feb4,21540974,0,0x0,8
tick,0x7ffe67f8feb4,21556850,0,0x0,8
tick,0x7ffe67f8feb4,21572375,0,0x0,8
tick,0x7ffe67f8feb4,21587855,0,0x0,8
tick,0x7ffe67f8feb4,21603510,0,0x0,8
tick,0x7ffe67f8feb4,21618848,0,0x0,8
tick,0x7ffe67f8feb4,21634864,0,0x0,8
tick,0x7ffe67f8feb4,21650555,0,0x0,8
tick,0x7ffe67f8feb4,21666250,0,0x0,8
tick,0x7ffe67f8feb4,21682133,0,0x0,8
tick,0x7ffe67f8feb4,21697028,0,0x0,8
tick,0x7ffe67f8feb4,21712209,0,0x0,8
tick,0x7ffe67f8feb4,21728032,0,0x0,8
tick,0x7ffe67f8feb4,21744040,0,0x0,8
tick,0x7ffe67f8feb4,21759699,0,0x0,8
tick,0x7ffe67f8feb4,21776959,0,0x0,8
tick,0x7ffe67f8feb4,21792220,0,0x0,8
tick,0x7ffe67f8feb4,21807286,0,0x0,8
tick,0x7ffe67f8feb4,21822565,0,0x0,8
tick,0x7ffe67f8feb4,21838445,0,0x0,8
tick,0x7ffe67f8feb4,21853927,0,0x0,8
tick,0x7ffe67f8feb4,21869920,0,0x0,8
tick,0x7ffe67f8feb4,21885304,0,0x0,8
tick,0x7ffe67f8feb4,21900851,0,0x0,8
tick,0x7ffe67f8feb4,21916098,0,0x0,8
tick,0x7ffe67f8feb4,21931268,0,0x0,8
tick,0x7ffe67f8feb4,21947315,0,0x0,8
tick,0x7ffe67f8feb4,21962852,0,0x0,8
tick,0x7ffe67f8feb4,21978634,0,0x0,8
tick,0x7ffe67f8feb4,21994223,0,0x0,8
tick,0x7ffe67f8feb4,22009243,0,0x0,8
tick,0x7ffe67f8feb4,22025025,0,0x0,8
tick,0x7ffe67f8feb4,22040269,0,0x0,8
tick,0x7ffe67f8feb4,22056248,0,0x0,8
tick,0x7ffe67f8feb4,22072242,0,0x0,8
tick,0x7ffe67f8feb4,22087757,0,0x0,8
tick,0x7ffe67f8feb4,22103748,0,0x0,8
tick,0x7ffe67f8feb4,22119056,0,0x0,8
tick,0x7ffe67f8feb4,22134395,0,0x0,8
tick,0x7ffe67f8feb4,22150149,0,0x0,8
tick,0x7ffe67f8feb4,22165901,0,0x0,8
tick,0x7ffe67f8feb4,22181088,0,0x0,8
tick,0x7ffe67f8feb4,22197102,0,0x0,8
tick,0x7ffe67f8feb4,22212390,0,0x0,8
tick,0x7ffe67f8feb4,22228094,0,0x0,8
tick,0x7ffe67f8feb4,22244064,0,0x0,8
tick,0x7ffe67f8feb4,22259077,0,0x0,8
tick,0x7ffe67f8feb4,22274771,0,0x0,8
tick,0x7ffe67f8feb4,22290075,0,0x0,8
tick,0x7ffe67f8feb4,22305083,0,0x0,8
tick,0x7ffe67f8feb4,22320836,0,0x0,8
tick,0x7ffe67f8feb4,22336569,0,0x0,8
tick,0x7ffe67f8feb4,22352345,0,0x0,8
tick,0x7ffe67f8feb4,22368126,0,0x0,8
tick,0x7ffe67f8feb4,22384073,0,0x0,8
tick,0x7ffe67f8feb4,22400143,0,0x0,8
tick,0x7ffe67f8feb4,22415463,0,0x0,8
tick,0x7ffe67f8feb4,22431297,0,0x0,8
tick,0x7ffe67f8feb4,22446323,0,0x0,8
tick,0x7ffe67f8feb4,22462346,0,0x0,8
tick,0x7ffe67f8feb4,22478030,0,0x0,8
tick,0x7ffe67f8feb4,22493945,0,0x0,8
tick,0x7ffe67f8feb4,22509235,0,0x0,8
tick,0x7ffe67f8feb4,22524985,0,0x0,8
tick,0x7ffe67f8feb4,22540583,0,0x0,8
tick,0x7ffe67f8feb4,22556601,0,0x0,8
tick,0x7ffe67f8feb4,22572479,0,0x0,8
tick,0x7ffe67f8feb4,22588188,0,0x0,8
tick,0x7ffe67f8feb4,22603448,0,0x0,8
tick,0x7ffe67f8feb4,22618963,0,0x0,8
tick,0x7ffe67f8feb4,22634516,0,0x0,8
tick,0x7ffe67f8feb4,22650173,0,0x0,8
tick,0x7ffe67f8feb4,22666182,0,0x0,8
tick,0x7ffe67f8feb4,22682139,0,0x0,8
tick,0x7ffe67f8feb4,22698122,0,0x0,8
tick,0x7ffe67f8feb4,22713638,0,0x0,8
tick,0x7ffe67f8feb4,22728618,0,0x0,8
tick,0x7ffe67f8feb4,22744410,0,0x0,8
tick,0x7ffe67f8feb4,22760059,0,0x0,8
tick,0x7ffe67f8feb4,22775122,0,0x0,8
tick,0x7ffe67f8feb4,22790799,0,0x0,8
tick,0x7ffe67f8feb4,22806122,0,0x0,8
tick,0x7ffe67f8feb4,22821826,0,0x0,8
tick,0x7ffe67f8feb4,22837097,0,0x0,8
tick,0x7ffe67f8feb4,22852100,0,0x0,8
tick,0x7ffe67f8feb4,22868136,0,0x0,8
tick,0x7ffe67f8feb4,22884149,0,0x0,8
tick,0x7ffe67f8feb4,22900185,0,0x0,8
tick,0x7ffe67f8feb4,22915199,0,0x0,8
tick,0x7ffe67f8feb4,22931109,0,0x0,8
tick,0x7ffe67f8feb4,22947150,0,0x0,8
tick,0x7ffe67f8feb4,22962485,0,0x0,8
tick,0x7ffe67f8feb4,22978122,0,0x0,8
tick,0x7ffe67f8feb4,22994022,0,0x0,8
tick,0x7ffe67f8feb4,23009284,0,0x0,8
tick,0x7ffe67f8feb4,23024832,0,0x0,8
tick,0x7ffe67f8feb4,23040786,0,0x0,8
tick,0x7ffe67f8feb4,23055866,0,0x0,8
tick,0x7ffe67f8feb4,23070844,0,0x0,8
tick,0x7ffe67f8feb4,23086511,0,0x0,8
tick,0x7ffe67f8feb4,23101320,0,0x0,8
tick,0x7ffe67f8feb4,23117437,0,0x0,8
tick,0x7ffe67f8feb4,23132285,0,0x0,8
tick,0x7ffe67f8feb4,23148323,0,0x0,8
tick,0x7ffe67f8feb4,23163286,0,0x0,8
tick,0x7ffe67f8feb4,23179321,0,0x0,8
tick,0x7ffe67f8feb4,23195336,0,0x0,8
tick,0x7ffe67f8feb4,23211305,0,0x0,8
tick,0x7ffe67f8feb4,23226190,0,0x0,8
tick,0x7ffe67f8feb4,23240964,0,0x0,8
tick,0x7ffe67f8feb4,23255941,0,0x0,8
tick,0x7ffe67f8feb4,23272118,0,0x0,8
tick,0x7ffe67f8feb4,23286667,0,0x0,8
tick,0x7ffe67f8feb4,23301688,0,0x0,8
tick,0x7ffe67f8feb4,23317343,0,0x0,8
tick,0x7ffe67f8feb4,23331941,0,0x0,8
tick,0x7ffe67f8feb4,23347138,0,0x0,8
tick,0x7ffe67f8feb4,23362556,0,0x0,8
tick,0x7ffe67f8feb4,23377877,0,0x0,8
tick,0x7ffe67f8feb4,23393285,0,0x0,8
tick,0x7ffe67f8feb4,23409112,0,0x0,8
tick,0x7ffe67f8feb4,23425185,0,0x0,8
tick,0x7ffe67f8feb4,23440310,0,0x0,8
tick,0x7ffe67f8feb4,23455003,0,0x0,8
tick,0x7ffe67f8feb4,23470565,0,0x0,8
tick,0x7ffe67f8feb4,23486634,0,0x0,8
tick,0x7ffe67f8feb4,23501660,0,0x0,8
tick,0x7ffe67f8feb4,23516425,0,0x0,8
tick,0x7ffe67f8feb4,23531201,0,0x0,8
tick,0x7ffe67f8feb4,23546137,0,0x0,8
tick,0x7ffe67f8feb4,23561707,0,0x0,8
tick,0x7ffe67f8feb4,23577130,0,0x0,8
tick,0x7ffe67f8feb4,23592568,0,0x0,8
tick,0x7ffe67f8feb4,23608139,0,0x0,8
tick,0x7ffe67f8feb4,23623690,0,0x0,8
tick,0x7ffe67f8feb4,23639135,0,0x0,8
tick,0x7ffe67f8feb4,23655141,0,0x0,8
tick,0x7ffe67f8feb4,23670833,0,0x0,8
tick,0x7ffe67f8feb4,23686153,0,0x0,8
tick,0x7ffe67f8feb4,23702158,0,0x0,8
tick,0x7ffe67f8feb4,23718106,0,0x0,8
tick,0x7ffe67f8feb4,23734172,0,0x0,8
tick,0x7ffe67f8feb4,23749280,0,0x0,8
tick,0x7ffe67f8feb4,23764836,0,0x0,8
tick,0x7ffe67f8feb4,23780930,0,0x0,8
tick,0x7ffe67f8feb4,23796113,0,0x0,8
tick,0x7ffe67f8feb4,23811297,0,0x0,8
tick,0x7ffe67f8feb4,23827133,0,0x0,8
tick,0x7ffe67f8feb4,23842864,0,0x0,8
tick,0x7ffe67f8feb4,23858129,0,0x0,8
tick,0x7ffe67f8feb4,23873412,0,0x0,8
tick,0x7ffe67f8feb4,23889379,0,0x0,8
tick,0x7ffe67f8feb4,23905065,0,0x0,8
tick,0x7ffe67f8feb4,23921394,0,0x0,8
tick,0x7ffe67f8feb4,23936576,0,0x0,8
tick,0x7ffe67f8feb4,23951987,0,0x0,8
tick,0x7ffe67f8feb4,23967158,0,0x0,8
tick,0x7ffe67f8feb4,23983138,0,0x0,8
tick,0x7ffe67f8feb4,23999129,0,0x0,8
tick,0x7ffe67f8feb4,24014307,0,0x0,8
tick,0x7ffe67f8feb4,24029627,0,0x0,8
tick,0x7ffe67f8feb4,24045308,0,0x0,8
tick,0x7ffe67f8feb4,24061283,0,0x0,8
tick,0x7ffe67f8feb4,24077366,0,0x0,8
tick,0x7ffe67f8feb4,24093291,0,0x0,8
tick,0x7ffe67f8feb4,24109311,0,0x0,8
tick,0x7ffe67f8feb4,24125298,0,0x0,8
tick,0x7ffe67f8feb4,24141309,0,0x0,8
tick,0x7ffe67f8feb4,24157298,0,0x0,8
tick,0x7ffe67f8feb4,24173298,0,0x0,8
tick,0x7ffe67f8feb4,24188483,0,0x0,8
tick,0x7ffe67f8feb4,24204149,0,0x0,8
tick,0x7ffe67f8feb4,24222926,0,0x0,8
tick,0x7ffe67f8feb4,24236382,0,0x0,8
tick,0x7ffe67f8feb4,24252580,0,0x0,8
tick,0x7ffe67f8feb4,24268251,0,0x0,8
tick,0x7ffe67f8feb4,24283925,0,0x0,8
tick,0x7ffe67f8feb4,24300030,0,0x0,8
tick,0x7ffe67f8feb4,24315303,0,0x0,8
tick,0x7ffe67f8feb4,24330454,0,0x0,8
tick,0x7ffe67f8feb4,24346019,0,0x0,8
tick,0x7ffe67f8feb4,24361286,0,0x0,8
tick,0x7ffe67f8feb4,24377132,0,0x0,8
tick,0x7ffe67f8feb4,24392590,0,0x0,8
tick,0x7ffe67f8feb4,24407851,0,0x0,8
tick,0x7ffe67f8feb4,24423012,0,0x0,8
tick,0x7ffe67f8feb4,24438728,0,0x0,8
tick,0x7ffe67f8feb4,24454413,0,0x0,8
tick,0x7ffe67f8feb4,24470134,0,0x0,8
tick,0x7ffe67f8feb4,24485897,0,0x0,8
tick,0x7ffe67f8feb4,24502028,0,0x0,8
tick,0x7ffe67f8feb4,24516966,0,0x0,8
tick,0x7ffe67f8feb4,24532321,0,0x0,8
tick,0x7ffe67f8feb4,24548168,0,0x0,8
tick,0x7ffe67f8feb4,24563621,0,0x0,8
tick,0x7ffe67f8feb4,24578779,0,0x0,8
tick,0x7ffe67f8feb4,24594287,0,0x0,8
tick,0x7ffe67f8feb4,24610097,0,0x0,8
tick,0x7ffe67f8feb4,24625655,0,0x0,8
tick,0x7ffe67f8feb4,24640802,0,0x0,8
tick,0x7ffe67f8feb4,24656010,0,0x0,8
tick,0x7ffe67f8feb4,24672017,0,0x0,8
tick,0x7ffe67f8feb4,24688011,0,0x0,8
tick,0x7ffe67f8feb4,24703913,0,0x0,8
tick,0x7ffe67f8feb4,24719340,0,0x0,8
tick,0x7ffe67f8feb4,24734449,0,0x0,8
tick,0x7ffe67f8feb4,24750346,0,0x0,8
tick,0x7ffe67f8feb4,24766105,0,0x0,8
tick,0x7ffe67f8feb4,24781397,0,0x0,8
tick,0x7ffe67f8feb4,24797124,0,0x0,8
tick,0x7ffe67f8feb4,24812627,0,0x0,8
tick,0x7ffe67f8feb4,24827538,0,0x0,8
tick,0x7ffe67f8feb4,24843376,0,0x0,8
tick,0x7ffe67f8feb4,24859314,0,0x0,8
tick,0x7ffe67f8feb4,24875738,0,0x0,8
tick,0x7ffe67f8feb4,24891905,0,0x0,8
tick,0x7ffe67f8feb4,24907700,0,0x0,8
tick,0x7ffe67f8feb4,24923098,0,0x0,8
tick,0x7ffe67f8feb4,24938593,0,0x0,8
tick,0x7ffe67f8feb4,24955106,0,0x0,8
tick,0x7ffe67f8feb4,24970889,0,0x0,8
tick,0x7ffe67f8feb4,24986563,0,0x0,8
tick,0x7ffe67f8feb4,25002795,0,0x0,8
tick,0x7ffe67f8feb4,25018051,0,0x0,8
tick,0x7ffe67f8feb4,25033774,0,0x0,8
tick,0x7ffe67f8feb4,25048901,0,0x0,8
tick,0x7ffe67f8feb4,25065078,0,0x0,8
tick,0x7ffe67f8feb4,25081000,0,0x0,8
tick,0x7ffe67f8feb4,25097086,0,0x0,8
tick,0x7ffe67f8feb4,25112330,0,0x0,8
tick,0x7ffe67f8feb4,25127485,0,0x0,8
tick,0x7ffe67f8feb4,25142722,0,0x0,8
tick,0x7ffe67f8feb4,25157893,0,0x0,8
tick,0x7ffe67f8feb4,25173933,0,0x0,8
tick,0x7ffe67f8feb4,25189217,0,0x0,8
tick,0x7ffe67f8feb4,25204421,0,0x0,8
tick,0x7ffe67f8feb4,25219327,0,0x0,8
tick,0x7ffe67f8feb4,25235146,0,0x0,8
tick,0x7ffe67f8feb4,25251143,0,0x0,8
tick,0x7ffe67f8feb4,25267180,0,0x0,8
tick,0x7ffe67f8feb4,25282827,0,0x0,8
tick,0x7ffe67f8feb4,25298405,0,0x0,8
tick,0x7ffe67f8feb4,25314546,0,0x0,8
tick,0x7ffe67f8feb4,25329860,0,0x0,8
tick,0x7ffe67f8feb4,25345570,0,0x0,8
tick,0x7ffe67f8feb4,25360737,0,0x0,8
tick,0x7ffe67f8feb4,25376411,0,0x0,8
tick,0x7ffe67f8feb4,25391753,0,0x0,8
tick,0x7ffe67f8feb4,25407716,0,0x0,8
tick,0x7ffe67f8feb4,25423920,0,0x0,8
tick,0x7ffe67f8feb4,25440126,0,0x0,8
tick,0x7ffe67f8feb4,25456091,0,0x0,8
tick,0x7ffe67f8feb4,25472122,0,0x0,8
tick,0x7ffe67f8feb4,25487709,0,0x0,8
tick,0x7ffe67f8feb4,25503791,0,0x0,8
tick,0x7ffe67f8feb4,25519389,0,0x0,8
tick,0x7ffe67f8feb4,25535126,0,0x0,8
tick,0x7ffe67f8feb4,25550868,0,0x0,8
tick,0x7ffe67f8feb4,25566661,0,0x0,8
tick,0x7ffe67f8feb4,25581936,0,0x0,8
tick,0x7ffe67f8feb4,25597562,0,0x0,8
tick,0x7ffe67f8feb4,25614045,0,0x0,8
tick,0x7ffe67f8feb4,25629892,0,0x0,8
tick,0x7ffe67f8feb4,25645995,0,0x0,8
tick,0x7ffe67f8feb4,25661610,0,0x0,8
tick,0x7ffe67f8feb4,25677229,0,0x0,8
tick,0x7ffe67f8feb4,25692661,0,0x0,8
tick,0x7ffe67f8feb4,25707769,0,0x0,8
tick,0x7ffe67f8feb4,25724138,0,0x0,8
tick,0x7ffe67f8feb4,25739288,0,0x0,8
tick,0x7ffe67f8feb4,25754627,0,0x0,8
tick,0x7ffe67f8feb4,25769833,0,0x0,8
tick,0x7ffe67f8feb4,25785884,0,0x0,8
tick,0x7ffe67f8feb4,25801275,0,0x0,8
tick,0x7ffe67f8feb4,25817198,0,0x0,8
tick,0x7ffe67f8feb4,25832643,0,0x0,8
tick,0x7ffe67f8feb4,25848421,0,0x0,8
tick,0x7ffe67f8feb4,25863788,0,0x0,8
tick,0x7ffe67f8feb4,25879566,0,0x0,8
tick,0x7ffe67f8feb4,25894508,0,0x0,8
tick,0x7ffe67f8feb4,25910606,0,0x0,8
tick,0x7ffe67f8feb4,25926272,0,0x0,8
tick,0x7ffe67f8feb4,25941986,0,0x0,8
tick,0x7ffe67f8feb4,25957826,0,0x0,8
tick,0x7ffe67f8feb4,25974043,0,0x0,8
tick,0x7ffe67f8feb4,25988898,0,0x0,8
tick,0x7ffe67f8feb4,26004834,0,0x0,8
tick,0x7ffe67f8feb4,26020000,0,0x0,8
tick,0x7ffe67f8feb4,26035312,0,0x0,8
tick,0x7ffe67f8feb4,26050755,0,0x0,8
tick,0x7ffe67f8feb4,26065752,0,0x0,8
tick,0x7ffe67f8feb4,26081770,0,0x0,8
tick,0x7ffe67f8feb4,26096916,0,0x0,8
tick,0x7ffe67f8feb4,26112215,0,0x0,8
tick,0x7ffe67f8feb4,26128272,0,0x0,8
tick,0x7ffe67f8feb4,26143417,0,0x0,8
tick,0x7ffe67f8feb4,26159444,0,0x0,8
tick,0x7ffe67f8feb4,26175332,0,0x0,8
tick,0x7ffe67f8feb4,26191311,0,0x0,8
tick,0x7ffe67f8feb4,26207162,0,0x0,8
tick,0x7ffe67f8feb4,26222362,0,0x0,8
tick,0x7ffe67f8feb4,26238251,0,0x0,8
tick,0x7ffe67f8feb4,26253809,0,0x0,8
tick,0x7ffe67f8feb4,26269456,0,0x0,8
tick,0x7ffe67f8feb4,26285631,0,0x0,8
tick,0x7ffe67f8feb4,26301714,0,0x0,8
tick,0x7ffe67f8feb4,26317280,0,0x0,8
tick,0x7ffe67f8feb4,26332664,0,0x0,8
tick,0x7ffe67f8feb4,26347742,0,0x0,8
tick,0x7ffe67f8feb4,26363932,0,0x0,8
tick,0x7ffe67f8feb4,26379210,0,0x0,8
tick,0x7ffe67f8feb4,26394737,0,0x0,8
tick,0x7ffe67f8feb4,26410612,0,0x0,8
tick,0x7ffe67f8feb4,26425541,0,0x0,8
tick,0x7ffe67f8feb4,26441653,0,0x0,8
tick,0x7ffe67f8feb4,26457250,0,0x0,8
tick,0x7ffe67f8feb4,26472793,0,0x0,8
tick,0x7ffe67f8feb4,26488615,0,0x0,8
tick,0x7ffe67f8feb4,26504607,0,0x0,8
tick,0x7ffe67f8feb4,26520438,0,0x0,8
tick,0x7ffe67f8feb4,26535965,0,0x0,8
tick,0x7ffe67f8feb4,26551817,0,0x0,8
tick,0x7ffe67f8feb4,26566736,0,0x0,8
tick,0x7ffe67f8feb4,26582294,0,0x0,8
tick,0x7ffe67f8feb4,26597503,0,0x0,8
tick,0x7ffe67f8feb4,26613162,0,0x0,8
tick,0x7ffe67f8feb4,26629144,0,0x0,8
tick,0x7ffe67f8feb4,26644868,0,0x0,8
tick,0x7ffe67f8feb4,26659762,0,0x0,8
tick,0x7ffe67f8feb4,26674840,0,0x0,8
tick,0x7ffe67f8feb4,26690897,0,0x0,8
tick,0x7ffe67f8feb4,26706850,0,0x0,8
tick,0x7ffe67f8feb4,26722869,0,0x0,8
tick,0x7ffe67f8feb4,26738905,0,0x0,8
tick,0x7ffe67f8feb4,26754834,0,0x0,8
tick,0x7ffe67f8feb4,26770857,0,0x0,8
tick,0x7ffe67f8feb4,26785978,0,0x0,8
tick,0x7ffe67f8feb4,26802002,0,0x0,8
tick,0x7ffe67f8feb4,26817987,0,0x0,8
tick,0x7ffe67f8feb4,26833988,0,0x0,8
tick,0x7ffe67f8feb4,26850131,0,0x0,8
tick,0x7ffe67f8feb4,26866028,0,0x0,8
tick,0x7ffe67f8feb4,26881192,0,0x0,8
tick,0x7ffe67f8feb4,26897019,0,0x0,8
tick,0x7ffe67f8feb4,26912184,0,0x0,8
tick,0x7ffe67f8feb4,26928278,0,0x0,8
tick,0x7ffe67f8feb4,26943532,0,0x0,8
tick,0x7ffe67f8feb4,26959329,0,0x0,8
tick,0x7ffe67f8feb4,26974458,0,0x0,8
tick,0x7ffe67f8feb4,26990609,0,0x0,8
tick,0x7ffe67f8feb4,27006474,0,0x0,8
tick,0x7ffe67f8feb4,27022525,0,0x0,8
tick,0x7ffe67f8feb4,27038507,0,0x0,8
tick,0x7ffe67f8feb4,27054436,0,0x0,8
tick,0x7ffe67f8feb4,27070371,0,0x0,8
tick,0x7ffe67f8feb4,27085516,0,0x0,8
tick,0x7ffe67f8feb4,27101520,0,0x0,8
tick,0x7ffe67f8feb4,27117528,0,0x0,8
tick,0x7ffe67f8feb4,27133540,0,0x0,8
tick,0x7ffe67f8feb4,27149526,0,0x0,8
tick,0x7ffe67f8feb4,27165504,0,0x0,8
tick,0x7ffe67f8feb4,27181546,0,0x0,8
tick,0x7ffe67f8feb4,27197151,0,0x0,8
tick,0x7ffe67f8feb4,27212293,0,0x0,8
tick,0x7ffe67f8feb4,27227153,0,0x0,8
tick,0x7ffe67f8feb4,27242772,0,0x0,8
tick,0x7ffe67f8feb4,27258498,0,0x0,8
tick,0x7ffe67f8feb4,27273655,0,0x0,8
tick,0x7ffe67f8feb4,27289215,0,0x0,8
tick,0x7ffe67f8feb4,27305175,0,0x0,8
tick,0x7ffe67f8feb4,27321162,0,0x0,8
tick,0x7ffe67f8feb4,27337128,0,0x0,8
tick,0x7ffe67f8feb4,27352451,0,0x0,8
tick,0x7ffe67f8feb4,27368458,0,0x0,8
tick,0x7ffe67f8feb4,27384451,0,0x0,8
tick,0x7ffe67f8feb4,27400147,0,0x0,8
tick,0x7ffe67f8feb4,27415676,0,0x0,8
tick,0x7ffe67f8feb4,27431298,0,0x0,8
tick,0x7ffe67f8feb4,27446587,0,0x0,8
tick,0x7ffe67f8feb4,27461784,0,0x0,8
tick,0x7ffe67f8feb4,27477760,0,0x0,8
tick,0x7ffe67f8feb4,27493194,0,0x0,8
tick,0x7ffe67f8feb4,27508419,0,0x0,8
tick,0x7ffe67f8feb4,27523760,0,0x0,8
tick,0x7ffe67f8feb4,27539462,0,0x0,8
tick,0x7ffe67f8feb4,27555377,0,0x0,8
tick,0x7ffe67f8feb4,27570399,0,0x0,8
tick,0x7ffe67f8feb4,27586541,0,0x0,8
tick,0x7ffe67f8feb4,27602658,0,0x0,8
tick,0x7ffe67f8feb4,27618427,0,0x0,8
tick,0x7ffe67f8feb4,27633862,0,0x0,8
tick,0x7ffe67f8feb4,27649584,0,0x0,8
tick,0x7ffe67f8feb4,27665416,0,0x0,8
tick,0x7ffe67f8feb4,27680628,0,0x0,8
tick,0x7ffe67f8feb4,27696633,0,0x0,8
tick,0x7ffe67f8feb4,27712397,0,0x0,8
tick,0x7ffe67f8feb4,27727440,0,0x0,8
tick,0x7ffe67f8feb4,27742888,0,0x0,8
tick,0x7ffe67f8feb4,27758361,0,0x0,8
tick,0x7ffe67f8feb4,27773608,0,0x0,8
tick,0x7ffe67f8feb4,27789009,0,0x0,8
tick,0x7ffe67f8feb4,27805081,0,0x0,8
tick,0x7ffe67f8feb4,27820721,0,0x0,8
tick,0x7ffe67f8feb4,27836454,0,0x0,8
tick,0x7ffe67f8feb4,27851934,0,0x0,8
tick,0x7ffe67f8feb4,27867762,0,0x0,8
tick,0x7ffe67f8feb4,27883475,0,0x0,8
tick,0x7ffe67f8feb4,27899501,0,0x0,8
tick,0x7ffe67f8feb4,27915821,0,0x0,8
tick,0x7ffe67f8feb4,27930921,0,0x0,8
tick,0x7ffe67f8feb4,27946299,0,0x0,8
tick,0x7ffe67f8feb4,27961688,0,0x0,8
tick,0x7ffe67f8feb4,27976890,0,0x0,8
tick,0x7ffe67f8feb4,27993113,0,0x0,8
tick,0x7ffe67f8feb4,28007818,0,0x0,8
tick,0x7ffe67f8feb4,28023435,0,0x0,8
tick,0x7ffe67f8feb4,28038639,0,0x0,8
tick,0x7ffe67f8feb4,28054061,0,0x0,8
tick,0x7ffe67f8feb4,28069370,0,0x0,8
tick,0x7ffe67f8feb4,28084762,0,0x0,8
tick,0x7ffe67f8feb4,28099951,0,0x0,8
tick,0x7ffe67f8feb4,28115293,0,0x0,8
tick,0x7ffe67f8feb4,28130264,0,0x0,8
tick,0x7ffe67f8feb4,28146388,0,0x0,8
tick,0x7ffe67f8feb4,28161598,0,0x0,8
tick,0x7ffe67f8feb4,28177424,0,0x0,8
tick,0x7ffe67f8feb4,28193662,0,0x0,8
tick,0x7ffe67f8feb4,28209622,0,0x0,8
tick,0x7ffe67f8feb4,28224801,0,0x0,8
tick,0x7ffe67f8feb4,28240356,0,0x0,8
tick,0x7ffe67f8feb4,28255899,0,0x0,8
tick,0x7ffe67f8feb4,28271558,0,0x0,8
tick,0x7ffe67f8feb4,28287393,0,0x0,8
tick,0x7ffe67f8feb4,28302762,0,0x0,8
tick,0x7ffe67f8feb4,28318459,0,0x0,8
tick,0x7ffe67f8feb4,28333943,0,0x0,8
tick,0x7ffe67f8feb4,28349706,0,0x0,8
tick,0x7ffe67f8feb4,28365323,0,0x0,8
tick,0x7ffe67f8feb4,28381260,0,0x0,8
tick,0x7ffe67f8feb4,28396722,0,0x0,8
tick,0x7ffe67f8feb4,28412852,0,0x0,8
tick,0x7ffe67f8feb4,28428323,0,0x0,8
tick,0x7ffe67f8feb4,28443672,0,0x0,8
tick,0x7ffe67f8feb4,28459734,0,0x0,8
tick,0x7ffe67f8feb4,28475758,0,0x0,8
tick,0x7ffe67f8feb4,28491690,0,0x0,8
tick,0x7ffe67f8feb4,28506589,0,0x0,8
tick,0x7ffe67f8feb4,28521924,0,0x0,8
tick,0x7ffe67f8feb4,28537960,0,0x0,8
tick,0x7ffe67f8feb4,28553688,0,0x0,8
tick,0x7ffe67f8feb4,28568456,0,0x0,8
tick,0x7ffe67f8feb4,28584179,0,0x0,8
tick,0x7ffe67f8feb4,28599308,0,0x0,8
tick,0x7ffe67f8feb4,28615169,0,0x0,8
tick,0x7ffe67f8feb4,28630152,0,0x0,8
tick,0x7ffe67f8feb4,28645689,0,0x0,8
tick,0x7ffe67f8feb4,28661108,0,0x0,8
tick,0x7ffe67f8feb4,28676646,0,0x0,8
tick,0x7ffe67f8feb4,28692049,0,0x0,8
tick,0x7ffe67f8feb4,28707826,0,0x0,8
tick,0x7ffe67f8feb4,28723696,0,0x0,8
tick,0x7ffe67f8feb4,28738939,0,0x0,8
tick,0x7ffe67f8feb4,28754571,0,0x0,8
tick,0x7ffe67f8feb4,28770606,0,0x0,8
tick,0x7ffe67f8feb4,28785813,0,0x0,8
tick,0x7ffe67f8feb4,28802241,0,0x0,8
tick,0x7ffe67f8feb4,28817568,0,0x0,8
tick,0x7ffe67f8feb4,28833291,0,0x0,8
tick,0x7ffe67f8feb4,28848557,0,0x0,8
tick,0x7ffe67f8feb4,28863855,0,0x0,8
tick,0x7ffe67f8feb4,28879726,0,0x0,8
tick,0x7ffe67f8feb4,28895518,0,0x0,8
tick,0x7ffe67f8feb4,28911505,0,0x0,8
tick,0x7ffe67f8feb4,28927413,0,0x0,8
tick,0x7ffe67f8feb4,28943020,0,0x0,8
tick,0x7ffe67f8feb4,28957966,0,0x0,8
tick,0x7ffe67f8feb4,28974302,0,0x0,8
tick,0x7ffe67f8feb4,28989862,0,0x0,8
tick,0x7ffe67f8feb4,29005525,0,0x0,8
tick,0x7ffe67f8feb4,29021109,0,0x0,8
tick,0x7ffe67f8feb4,29036643,0,0x0,8
tick,0x7ffe67f8feb4,29052354,0,0x0,8
tick,0x7ffe67f8feb4,29067680,0,0x0,8
tick,0x7ffe67f8feb4,29083394,0,0x0,8
tick,0x7ffe67f8feb4,29098681,0,0x0,8
tick,0x7ffe67f8feb4,29114761,0,0x0,8
tick,0x7ffe67f8feb4,29129966,0,0x0,8
tick,0x7ffe67f8feb4,29145092,0,0x0,8
tick,0x7ffe67f8feb4,29160266,0,0x0,8
tick,0x7ffe67f8feb4,29176039,0,0x0,8
tick,0x7ffe67f8feb4,29191637,0,0x0,8
tick,0x7ffe67f8feb4,29207500,0,0x0,8
tick,0x7ffe67f8feb4,29222844,0,0x0,8
tick,0x7ffe67f8feb4,29238523,0,0x0,8
tick,0x7ffe67f8feb4,29254516,0,0x0,8
tick,0x7ffe67f8feb4,29269605,0,0x0,8
tick,0x7ffe67f8feb4,29285581,0,0x0,8
tick,0x7ffe67f8feb4,29301479,0,0x0,8
tick,0x7ffe67f8feb4,29317301,0,0x0,8
tick,0x7ffe67f8feb4,29332787,0,0x0,8
tick,0x7ffe67f8feb4,29348299,0,0x0,8
tick,0x7ffe67f8feb4,29364192,0,0x0,8
tick,0x7ffe67f8feb4,29380447,0,0x0,8
tick,0x7ffe67f8feb4,29396003,0,0x0,8
tick,0x7ffe67f8feb4,29411380,0,0x0,8
tick,0x7ffe67f8feb4,29426657,0,0x0,8
tick,0x7ffe67f8feb4,29441541,0,0x0,8
tick,0x7ffe67f8feb4,29456664,0,0x0,8
tick,0x7ffe67f8feb4,29472351,0,0x0,8
tick,0x7ffe67f8feb4,29487310,0,0x0,8
tick,0x7ffe67f8feb4,29503621,0,0x0,8
tick,0x7ffe67f8feb4,29518827,0,0x0,8
tick,0x7ffe67f8feb4,29534820,0,0x0,8
tick,0x7ffe67f8feb4,29551028,0,0x0,8
tick,0x7ffe67f8feb4,29566726,0,0x0,8
tick,0x7ffe67f8feb4,29582345,0,0x0,8
tick,0x7ffe67f8feb4,29598268,0,0x0,8
tick,0x7ffe67f8feb4,29613462,0,0x0,8
tick,0x7ffe67f8feb4,29629405,0,0x0,8
tick,0x7ffe67f8feb4,29645541,0,0x0,8
tick,0x7ffe67f8feb4,29660878,0,0x0,8
tick,0x7ffe67f8feb4,29669844,0,0x0,8
tick,0x7ffe67f8feb4,29685377,0,0x0,8
tick,0x7ffe67f8feb4,29701728,0,0x0,8
tick,0x7ffe67f8feb4,29716626,0,0x0,8
tick,0x7ffe67f8feb4,29732040,0,0x0,8
tick,0x7ffe67f8feb4,29747892,0,0x0,8
tick,0x7ffe67f8feb4,29763332,0,0x0,8
tick,0x7ffe67f8feb4,29778664,0,0x0,8
tick,0x7ffe67f8feb4,29792452,0,0x0,8
tick,0x7ffe67f8feb4,29808375,0,0x0,8
tick,0x7ffe67f8feb4,29824650,0,0x0,8
tick,0x7ffe67f8feb4,29839769,0,0x0,8
tick,0x7ffe67f8feb4,29855265,0,0x0,8
tick,0x7ffe67f8feb4,29871001,0,0x0,8
tick,0x7ffe67f8feb4,29886333,0,0x0,8
tick,0x7ffe67f8feb4,29901801,0,0x0,8
tick,0x7ffe67f8feb4,29917479,0,0x0,8
tick,0x7ffe67f8feb4,29932984,0,0x0,8
tick,0x7ffe67f8feb4,29948954,0,0x0,8
tick,0x7ffe67f8feb4,29965136,0,0x0,8
tick,0x7ffe67f8feb4,29980822,0,0x0,8
tick,0x7ffe67f8feb4,29996671,0,0x0,8
tick,0x7ffe67f8feb4,30012409,0,0x0,8
tick,0x7ffe67f8feb4,30027634,0,0x0,8
tick,0x7ffe67f8feb4,30043754,0,0x0,8
tick,0x7ffe67f8feb4,30059020,0,0x0,8
tick,0x7ffe67f8feb4,30075388,0,0x0,8
tick,0x7ffe67f8feb4,30091109,0,0x0,8
tick,0x7ffe67f8feb4,30106378,0,0x0,8
tick,0x7ffe67f8feb4,30122258,0,0x0,8
tick,0x7ffe67f8feb4,30138276,0,0x0,8
tick,0x7ffe67f8feb4,30154281,0,0x0,8
tick,0x7ffe67f8feb4,30169412,0,0x0,8
tick,0x7ffe67f8feb4,30184830,0,0x0,8
tick,0x7ffe67f8feb4,30200339,0,0x0,8
tick,0x7ffe67f8feb4,30215383,0,0x0,8
tick,0x7ffe67f8feb4,30230578,0,0x0,8
tick,0x7ffe67f8feb4,30246148,0,0x0,8
tick,0x7ffe67f8feb4,30261355,0,0x0,8
tick,0x7ffe67f8feb4,30277289,0,0x0,8
tick,0x7ffe67f8feb4,30292393,0,0x0,8
tick,0x7ffe67f8feb4,30307614,0,0x0,8
tick,0x7ffe67f8feb4,30322888,0,0x0,8
tick,0x7ffe67f8feb4,30337459,0,0x0,8
tick,0x7ffe67f8feb4,30353381,0,0x0,8
tick,0x7ffe67f8feb4,30369295,0,0x0,8
tick,0x7ffe67f8feb4,30384306,0,0x0,8
tick,0x7ffe67f8feb4,30399213,0,0x0,8
tick,0x7ffe67f8feb4,30414885,0,0x0,8
tick,0x7ffe67f8feb4,30429557,0,0x0,8
tick,0x7ffe67f8feb4,30445808,0,0x0,8
tick,0x7ffe67f8feb4,30461280,0,0x0,8
tick,0x7ffe67f8feb4,30476318,0,0x0,8
tick,0x7ffe67f8feb4,30491676,0,0x0,8
tick,0x7ffe67f8feb4,30507269,0,0x0,8
tick,0x7ffe67f8feb4,30522476,0,0x0,8
tick,0x7ffe67f8feb4,30538251,0,0x0,8
tick,0x7ffe67f8feb4,30552987,0,0x0,8
tick,0x7ffe67f8feb4,30568247,0,0x0,8
tick,0x7ffe67f8feb4,30583945,0,0x0,8
tick,0x7ffe67f8feb4,30599867,0,0x0,8
tick,0x7ffe67f8feb4,30615207,0,0x0,8
tick,0x7ffe67f8feb4,30630929,0,0x0,8
tick,0x7ffe67f8feb4,30646250,0,0x0,8
tick,0x7ffe67f8feb4,30661645,0,0x0,8
tick,0x7ffe67f8feb4,30677499,0,0x0,8
tick,0x7ffe67f8feb4,30693323,0,0x0,8
tick,0x7ffe67f8feb4,30708279,0,0x0,8
tick,0x7ffe67f8feb4,30724303,0,0x0,8
tick,0x7ffe67f8feb4,30740327,0,0x0,8
tick,0x7ffe67f8feb4,30755667,0,0x0,8
tick,0x7ffe67f8feb4,30770667,0,0x0,8
tick,0x7ffe67f8feb4,30786654,0,0x0,8
tick,0x7ffe67f8feb4,30802695,0,0x0,8
tick,0x7ffe67f8feb4,30817738,0,0x0,8
tick,0x7ffe67f8feb4,30833445,0,0x0,8
tick,0x7ffe67f8feb4,30849101,0,0x0,8
tick,0x7ffe67f8feb4,30864048,0,0x0,8
tick,0x7ffe67f8feb4,30879486,0,0x0,8
tick,0x7ffe67f8feb4,30895551,0,0x0,8
tick,0x7ffe67f8feb4,30911830,0,0x0,8
tick,0x7ffe67f8feb4,30926610,0,0x0,8
tick,0x7ffe67f8feb4,30943996,0,0x0,8
tick,0x7ffe67f8feb4,30959084,0,0x0,8
tick,0x7ffe67f8feb4,30973786,0,0x0,8
tick,0x7ffe67f8feb4,30989255,0,0x0,8
tick,0x7ffe67f8feb4,31004483,0,0x0,8
tick,0x7ffe67f8feb4,31019218,0,0x0,8
tick,0x7ffe67f8feb4,31034416,0,0x0,8
tick,0x7ffe67f8feb4,31050168,0,0x0,8
tick,0x7ffe67f8feb4,31066183,0,0x0,8
tick,0x7ffe67f8feb4,31082178,0,0x0,8
tick,0x7ffe67f8feb4,31098302,0,0x0,8
tick,0x7ffe67f8feb4,31113360,0,0x0,8
tick,0x7ffe67f8feb4,31129360,0,0x0,8
tick,0x7ffe67f8feb4,31145345,0,0x0,8
tick,0x7ffe67f8feb4,31161330,0,0x0,8
tick,0x7ffe67f8feb4,31176455,0,0x0,8
tick,0x7ffe67f8feb4,31192450,0,0x0,8
tick,0x7ffe67f8feb4,31208556,0,0x0,8
tick,0x7ffe67f8feb4,31224343,0,0x0,8
tick,0x7ffe67f8feb4,31240387,0,0x0,8
tick,0x7ffe67f8feb4,31255704,0,0x0,8
tick,0x7ffe67f8feb4,31271038,0,0x0,8
tick,0x7ffe67f8feb4,31286177,0,0x0,8
tick,0x7ffe67f8feb4,31301534,0,0x0,8
tick,0x7ffe67f8feb4,31316926,0,0x0,8
tick,0x7ffe67f8feb4,31332404,0,0x0,8
tick,0x7ffe67f8feb4,31347767,0,0x0,8
tick,0x7ffe67f8feb4,31363568,0,0x0,8
tick,0x7ffe67f8feb4,31379285,0,0x0,8
tick,0x7ffe67f8feb4,31394729,0,0x0,8
tick,0x7ffe67f8feb4,31410478,0,0x0,8
tick,0x7ffe67f8feb4,31426123,0,0x0,8
tick,0x7ffe67f8feb4,31442025,0,0x0,8
tick,0x7ffe67f8feb4,31457273,0,0x0,8
tick,0x7ffe67f8feb4,31473222,0,0x0,8
tick,0x7ffe67f8feb4,31489245,0,0x0,8
tick,0x7ffe67f8feb4,31505279,0,0x0,8
tick,0x7ffe67f8feb4,31520532,0,0x0,8
tick,0x7ffe67f8feb4,31535984,0,0x0,8
tick,0x7ffe67f8feb4,31551282,0,0x0,8
tick,0x7ffe67f8feb4,31566601,0,0x0,8
tick,0x7ffe67f8feb4,31582172,0,0x0,8
tick,0x7ffe67f8feb4,31597921,0,0x0,8
tick,0x7ffe67f8feb4,31613429,0,0x0,8
tick,0x7ffe67f8feb4,31629166,0,0x0,8
tick,0x7ffe67f8feb4,31644190,0,0x0,8
tick,0x7ffe67f8feb4,31660700,0,0x0,8
tick,0x7ffe67f8feb4,31675807,0,0x0,8
tick,0x7ffe67f8feb4,31691177,0,0x0,8
tick,0x7ffe67f8feb4,31707059,0,0x0,8
tick,0x7ffe67f8feb4,31722292,0,0x0,8
tick,0x7ffe67f8feb4,31738177,0,0x0,8
tick,0x7ffe67f8feb4,31754190,0,0x0,8
tick,0x7ffe67f8feb4,31769730,0,0x0,8
tick,0x7ffe67f8feb4,31784918,0,0x0,8
tick,0x7ffe67f8feb4,31800300,0,0x0,8
tick,0x7ffe67f8feb4,31815497,0,0x0,8
tick,0x7ffe67f8feb4,31831459,0,0x0,8
tick,0x7ffe67f8feb4,31847572,0,0x0,8
tick,0x7ffe67f8feb4,31862942,0,0x0,8
tick,0x7ffe67f8feb4,31878406,0,0x0,8
tick,0x7ffe67f8feb4,31894272,0,0x0,8
tick,0x7ffe67f8feb4,31910233,0,0x0,8
tick,0x7ffe67f8feb4,31926235,0,0x0,8
tick,0x7ffe67f8feb4,31941358,0,0x0,8
tick,0x7ffe67f8feb4,31957128,0,0x0,8
tick,0x7ffe67f8feb4,31973128,0,0x0,8
tick,0x7ffe67f8feb4,31988148,0,0x0,8
tick,0x7ffe67f8feb4,32003169,0,0x0,8
tick,0x7ffe67f8feb4,32019162,0,0x0,8
tick,0x7ffe67f8feb4,32035229,0,0x0,8
tick,0x7ffe67f8feb4,32050310,0,0x0,8
tick,0x7ffe67f8feb4,32066010,0,0x0,8
tick,0x7ffe67f8feb4,32081737,0,0x0,8
tick,0x7ffe67f8feb4,32097465,0,0x0,8
tick,0x7ffe67f8feb4,32113033,0,0x0,8
tick,0x7ffe67f8feb4,32128352,0,0x0,8
tick,0x7ffe67f8feb4,32144304,0,0x0,8
tick,0x7ffe67f8feb4,32159171,0,0x0,8
tick,0x7ffe67f8feb4,32175136,0,0x0,8
tick,0x7ffe67f8feb4,32191132,0,0x0,8
tick,0x7ffe67f8feb4,32207155,0,0x0,8
tick,0x7ffe67f8feb4,32223135,0,0x0,8
tick,0x7ffe67f8feb4,32239142,0,0x0,8
tick,0x7ffe67f8feb4,32255051,0,0x0,8
tick,0x7ffe67f8feb4,32270319,0,0x0,8
tick,0x7ffe67f8feb4,32285920,0,0x0,8
tick,0x7ffe67f8feb4,32301255,0,0x0,8
tick,0x7ffe67f8feb4,32317152,0,0x0,8
tick,0x7ffe67f8feb4,32332195,0,0x0,8
tick,0x7ffe67f8feb4,32348146,0,0x0,8
tick,0x7ffe67f8feb4,32363891,0,0x0,8
tick,0x7ffe67f8feb4,32379183,0,0x0,8
tick,0x7ffe67f8feb4,32395155,0,0x0,8
tick,0x7ffe67f8feb4,32410488,0,0x0,8
tick,0x7ffe67f8feb4,32426175,0,0x0,8
tick,0x7ffe67f8feb4,32441246,0,0x0,8
tick,0x7ffe67f8feb4,32456146,0,0x0,8
tick,0x7ffe67f8feb4,32472160,0,0x0,8
tick,0x7ffe67f8feb4,32488140,0,0x0,8
tick,0x7ffe67f8feb4,32503479,0,0x0,8
tick,0x7ffe67f8feb4,32519344,0,0x0,8
tick,0x7ffe67f8feb4,32534356,0,0x0,8
tick,0x7ffe67f8feb4,32549185,0,0x0,8
tick,0x7ffe67f8feb4,32565192,0,0x0,8
tick,0x7ffe67f8feb4,32580316,0,0x0,8
tick,0x7ffe67f8feb4,32595988,0,0x0,8
tick,0x7ffe67f8feb4,32611929,0,0x0,8
tick,0x7ffe67f8feb4,32627907,0,0x0,8
tick,0x7ffe67f8feb4,32642796,0,0x0,8
tick,0x7ffe67f8feb4,32658415,0,0x0,8
tick,0x7ffe67f8feb4,32673960,0,0x0,8
tick,0x7ffe67f8feb4,32689264,0,0x0,8
tick,0x7ffe67f8feb4,32705145,0,0x0,8
tick,0x7ffe67f8feb4,32720451,0,0x0,8
tick,0x7ffe67f8feb4,32736223,0,0x0,8
tick,0x7ffe67f8feb4,32750771,0,0x0,8
tick,0x7ffe67f8feb4,32766121,0,0x0,8
tick,0x7ffe67f8feb4,32781284,0,0x0,8
tick,0x7ffe67f8feb4,32796605,0,0x0,8
tick,0x7ffe67f8feb4,32812636,0,0x0,8
tick,0x7ffe67f8feb4,32828235,0,0x0,8
tick,0x7ffe67f8feb4,32843693,0,0x0,8
tick,0x7ffe67f8feb4,32859249,0,0x0,8
tick,0x7ffe67f8feb4,32874684,0,0x0,8
tick,0x7ffe67f8feb4,32890311,0,0x0,8
tick,0x7ffe67f8feb4,32906011,0,0x0,8
tick,0x7ffe67f8feb4,32921307,0,0x0,8
tick,0x7ffe67f8feb4,32937432,0,0x0,8
tick,0x7ffe67f8feb4,32952653,0,0x0,8
tick,0x7ffe67f8feb4,32968259,0,0x0,8
tick,0x7ffe67f8feb4,32984002,0,0x0,8
tick,0x7ffe67f8feb4,32999575,0,0x0,8
tick,0x7ffe67f8feb4,33015521,0,0x0,8
tick,0x7ffe67f8feb4,33030423,0,0x0,8
tick,0x7ffe67f8feb4,33045625,0,0x0,8
tick,0x7ffe67f8feb4,33061858,0,0x0,8
tick,0x7ffe67f8feb4,33077231,0,0x0,8
tick,0x7ffe67f8feb4,33093017,0,0x0,8
tick,0x7ffe67f8feb4,33108262,0,0x0,8
tick,0x7ffe67f8feb4,33123762,0,0x0,8
tick,0x7ffe67f8feb4,33139233,0,0x0,8
tick,0x7ffe67f8feb4,33155236,0,0x0,8
tick,0x7ffe67f8feb4,33171437,0,0x0,8
tick,0x7ffe67f8feb4,33186733,0,0x0,8
tick,0x7ffe67f8feb4,33202734,0,0x0,8
tick,0x7ffe67f8feb4,33218722,0,0x0,8
tick,0x7ffe67f8feb4,33234693,0,0x0,8
tick,0x7ffe67f8feb4,33250222,0,0x0,8
tick,0x7ffe67f8feb4,33265499,0,0x0,8
tick,0x7ffe67f8feb4,33281236,0,0x0,8
tick,0x7ffe67f8feb4,33297205,0,0x0,8
tick,0x7ffe67f8feb4,33312602,0,0x0,8
tick,0x7ffe67f8feb4,33328248,0,0x0,8
tick,0x7ffe67f8feb4,33344418,0,0x0,8
tick,0x7ffe67f8feb4,33360229,0,0x0,8
tick,0x7ffe67f8feb4,33375989,0,0x0,8
tick,0x7ffe67f8feb4,33391817,0,0x0,8
tick,0x7ffe67f8feb4,33407525,0,0x0,8
tick,0x7ffe67f8feb4,33423074,0,0x0,8
tick,0x7ffe67f8feb4,33438316,0,0x0,8
tick,0x7ffe67f8feb4,33454256,0,0x0,8
tick,0x7ffe67f8feb4,33470238,0,0x0,8
tick,0x7ffe67f8feb4,33485665,0,0x0,8
tick,0x7ffe67f8feb4,33501668,0,0x0,8
tick,0x7ffe67f8feb4,33517467,0,0x0,8
tick,0x7ffe67f8feb4,33532563,0,0x0,8
tick,0x7ffe67f8feb4,33548189,0,0x0,8
tick,0x7ffe67f8feb4,33563561,0,0x0,8
tick,0x7ffe67f8feb4,33579412,0,0x0,8
tick,0x7ffe67f8feb4,33594355,0,0x0,8
tick,0x7ffe67f8feb4,33610335,0,0x0,8
tick,0x7ffe67f8feb4,33626202,0,0x0,8
tick,0x7ffe67f8feb4,33642224,0,0x0,8
tick,0x7ffe67f8feb4,33658205,0,0x0,8
tick,0x7ffe67f8feb4,33673436,0,0x0,8
tick,0x7ffe67f8feb4,33689252,0,0x0,8
tick,0x7ffe67f8feb4,33704988,0,0x0,8
tick,0x7ffe67f8feb4,33720218,0,0x0,8
tick,0x7ffe67f8feb4,33735723,0,0x0,8
tick,0x7ffe67f8feb4,33751034,0,0x0,8
tick,0x7ffe67f8feb4,33766200,0,0x0,8
tick,0x7ffe67f8feb4,33781608,0,0x0,8
tick,0x7ffe67f8feb4,33797128,0,0x0,8
tick,0x7ffe67f8feb4,33812848,0,0x0,8
tick,0x7ffe67f8feb4,33828413,0,0x0,8
tick,0x7ffe67f8feb4,33843464,0,0x0,8
tick,0x7ffe67f8feb4,33859361,0,0x0,8
tick,0x7ffe67f8feb4,33874583,0,0x0,8
tick,0x7ffe67f8feb4,33889669,0,0x0,8
tick,0x7ffe67f8feb4,33905178,0,0x0,8
tick,0x7ffe67f8feb4,33920207,0,0x0,8
tick,0x7ffe67f8feb4,33935218,0,0x0,8
tick,0x7ffe67f8feb4,33950856,0,0x0,8
tick,0x7ffe67f8feb4,33966285,0,0x0,8
tick,0x7ffe67f8feb4,33982205,0,0x0,8
tick,0x7ffe67f8feb4,33998295,0,0x0,8
tick,0x7ffe67f8feb4,34014038,0,0x0,8
tick,0x7ffe67f8feb4,34029258,0,0x0,8
tick,0x7ffe67f8feb4,34044794,0,0x0,8
tick,0x7ffe67f8feb4,34060220,0,0x0,8
tick,0x7ffe67f8feb4,34076203,0,0x0,8
tick,0x7ffe67f8feb4,34092234,0,0x0,8
tick,0x7ffe67f8feb4,34108229,0,0x0,8
tick,0x7ffe67f8feb4,34123367,0,0x0,8
tick,0x7ffe67f8feb4,34139377,0,0x0,8
tick,0x7ffe67f8feb4,34154364,0,0x0,8
tick,0x7ffe67f8feb4,34170358,0,0x0,8
tick,0x7ffe67f8feb4,34186381,0,0x0,8
tick,0x7ffe67f8feb4,34202370,0,0x0,8
tick,0x7ffe67f8feb4,34218380,0,0x0,8
tick,0x7ffe67f8feb4,34234389,0,0x0,8
tick,0x7ffe67f8feb4,34250364,0,0x0,8
tick,0x7ffe67f8feb4,34265394,0,0x0,8
tick,0x7ffe67f8feb4,34281102,0,0x0,8
tick,0x7ffe67f8feb4,34296631,0,0x0,8
tick,0x7ffe67f8feb4,34312281,0,0x0,8
tick,0x7ffe67f8feb4,34328636,0,0x0,8
tick,0x7ffe67f8feb4,34343266,0,0x0,8
tick,0x7ffe67f8feb4,34359203,0,0x0,8
tick,0x7ffe67f8feb4,34374314,0,0x0,8
tick,0x7ffe67f8feb4,34389982,0,0x0,8
tick,0x7ffe67f8feb4,34405700,0,0x0,8
tick,0x7ffe67f8feb4,34421369,0,0x0,8
tick,0x7ffe67f8feb4,34437422,0,0x0,8
tick,0x7ffe67f8feb4,34453061,0,0x0,8
tick,0x7ffe67f8feb4,34468242,0,0x0,8
tick,0x7ffe67f8feb4,34483227,0,0x0,8
tick,0x7ffe67f8feb4,34498779,0,0x0,8
tick,0x7ffe67f8feb4,34514364,0,0x0,8
tick,0x7ffe67f8feb4,34530371,0,0x0,8
tick,0x7ffe67f8feb4,34546417,0,0x0,8
tick,0x7ffe67f8feb4,34562310,0,0x0,8
tick,0x7ffe67f8feb4,34578679,0,0x0,8
tick,0x7ffe67f8feb4,34593348,0,0x0,8
tick,0x7ffe67f8feb4,34609200,0,0x0,8
tick,0x7ffe67f8feb4,34624622,0,0x0,8
tick,0x7ffe67f8feb4,34640338,0,0x0,8
tick,0x7ffe67f8feb4,34655630,0,0x0,8
tick,0x7ffe67f8feb4,34670762,0,0x0,8
tick,0x7ffe67f8feb4,34686284,0,0x0,8
tick,0x7ffe67f8feb4,34701455,0,0x0,8
tick,0x7ffe67f8feb4,34716944,0,0x0,8
tick,0x7ffe67f8feb4,34732351,0,0x0,8
tick,0x7ffe67f8feb4,34747379,0,0x0,8
tick,0x7ffe67f8feb4,34762363,0,0x0,8
tick,0x7ffe67f8feb4,34778182,0,0x0,8
tick,0x7ffe67f8feb4,34793334,0,0x0,8
tick,0x7ffe67f8feb4,34809198,0,0x0,8
tick,0x7ffe67f8feb4,34825202,0,0x0,8
tick,0x7ffe67f8feb4,34841232,0,0x0,8
tick,0x7ffe67f8feb4,34857229,0,0x0,8
tick,0x7ffe67f8feb4,34872957,0,0x0,8
tick,0x7ffe67f8feb4,34888436,0,0x0,8
tick,0x7ffe67f8feb4,34904409,0,0x0,8
tick,0x7ffe67f8feb4,34920516,0,0x0,8
tick,0x7ffe67f8feb4,34936397,0,0x0,8
tick,0x7ffe67f8feb4,34952407,0,0x0,8
tick,0x7ffe67f8feb4,34968406,0,0x0,8
tick,0x7ffe67f8feb4,34984415,0,0x0,8
tick,0x7ffe67f8feb4,35000410,0,0x0,8
tick,0x7ffe67f8feb4,35016420,0,0x0,8
tick,0x7ffe67f8feb4,35032396,0,0x0,8
tick,0x7ffe67f8feb4,35048404,0,0x0,8
tick,0x7ffe67f8feb4,35064397,0,0x0,8
tick,0x7ffe67f8feb4,35080434,0,0x0,8
tick,0x7ffe67f8feb4,35096013,0,0x0,8
tick,0x7ffe67f8feb4,35111911,0,0x0,8
tick,0x7ffe67f8feb4,35127176,0,0x0,8
tick,0x7ffe67f8feb4,35143194,0,0x0,8
tick,0x7ffe67f8feb4,35159166,0,0x0,8
tick,0x7ffe67f8feb4,35175186,0,0x0,8
tick,0x7ffe67f8feb4,35191173,0,0x0,8
tick,0x7ffe67f8feb4,35207192,0,0x0,8
tick,0x7ffe67f8feb4,35223184,0,0x0,8
tick,0x7ffe67f8feb4,35239177,0,0x0,8
tick,0x7ffe67f8feb4,35254202,0,0x0,8
tick,0x7ffe67f8feb4,35270168,0,0x0,8
tick,0x7ffe67f8feb4,35286014,0,0x0,8
tick,0x7ffe67f8feb4,35301340,0,0x0,8
tick,0x7ffe67f8feb4,35317170,0,0x0,8
tick,0x7ffe67f8feb4,35332785,0,0x0,8
tick,0x7ffe67f8feb4,35347951,0,0x0,8
tick,0x7ffe67f8feb4,35364147,0,0x0,8
tick,0x7ffe67f8feb4,35379372,0,0x0,8
tick,0x7ffe67f8feb4,35394366,0,0x0,8
tick,0x7ffe67f8feb4,35410188,0,0x0,8
tick,0x7ffe67f8feb4,35425741,0,0x0,8
tick,0x7ffe67f8feb4,35441018,0,0x0,8
tick,0x7ffe67f8feb4,35456198,0,0x0,8
tick,0x7ffe67f8feb4,35471341,0,0x0,8
tick,0x7ffe67f8feb4,35486630,0,0x0,8
tick,0x7ffe67f8feb4,35502045,0,0x0,8
tick,0x7ffe67f8feb4,35518013,0,0x0,8
tick,0x7ffe67f8feb4,35533214,0,0x0,8
tick,0x7ffe67f8feb4,35549217,0,0x0,8
tick,0x7ffe67f8feb4,35565006,0,0x0,8
tick,0x7ffe67f8feb4,35580288,0,0x0,8
tick,0x7ffe67f8feb4,35596410,0,0x0,8
tick,0x7ffe67f8feb4,35612036,0,0x0,8
tick,0x7ffe67f8feb4,35628013,0,0x0,8
tick,0x7ffe67f8feb4,35644004,0,0x0,8
tick,0x7ffe67f8feb4,35659188,0,0x0,8
tick,0x7ffe67f8feb4,35675023,0,0x0,8
tick,0x7ffe67f8feb4,35690576,0,0x0,8
tick,0x7ffe67f8feb4,35705829,0,0x0,8
tick,0x7ffe67f8feb4,35721345,0,0x0,8
tick,0x7ffe67f8feb4,35737189,0,0x0,8
tick,0x7ffe67f8feb4,35752641,0,0x0,8
tick,0x7ffe67f8feb4,35768259,0,0x0,8
tick,0x7ffe67f8feb4,35783700,0,0x0,8
tick,0x7ffe67f8feb4,35799175,0,0x0,8
tick,0x7ffe67f8feb4,35815182,0,0x0,8
tick,0x7ffe67f8feb4,35831186,0,0x0,8
tick,0x7ffe67f8feb4,35847211,0,0x0,8
tick,0x7ffe67f8feb4,35862368,0,0x0,8
tick,0x7ffe67f8feb4,35878429,0,0x0,8
tick,0x7ffe67f8feb4,35894492,0,0x0,8
tick,0x7ffe67f8feb4,35909471,0,0x0,8
tick,0x7ffe67f8feb4,35925271,0,0x0,8
tick,0x7ffe67f8feb4,35940465,0,0x0,8
tick,0x7ffe67f8feb4,35955429,0,0x0,8
tick,0x7ffe67f8feb4,35970947,0,0x0,8
tick,0x7ffe67f8feb4,35986484,0,0x0,8
tick,0x7ffe67f8feb4,36001676,0,0x0,8
tick,0x7ffe67f8feb4,36017022,0,0x0,8
tick,0x7ffe67f8feb4,36031862,0,0x0,8
tick,0x7ffe67f8feb4,36047281,0,0x0,8
tick,0x7ffe67f8feb4,36062723,0,0x0,8
tick,0x7ffe67f8feb4,36078243,0,0x0,8
tick,0x7ffe67f8feb4,36093894,0,0x0,8
tick,0x7ffe67f8feb4,36109293,0,0x0,8
tick,0x7ffe67f8feb4,36124493,0,0x0,8
tick,0x7ffe67f8feb4,36140023,0,0x0,8
tick,0x7ffe67f8feb4,36155917,0,0x0,8
tick,0x7ffe67f8feb4,36170626,0,0x0,8
tick,0x7ffe67f8feb4,36185652,0,0x0,8
tick,0x7ffe67f8feb4,36201065,0,0x0,8
tick,0x7ffe67f8feb4,36217086,0,0x0,8
tick,0x7ffe67f8feb4,36233077,0,0x0,8
tick,0x7ffe67f8feb4,36249073,0,0x0,8
tick,0x7ffe67f8feb4,36265076,0,0x0,8
tick,0x7ffe67f8feb4,36280460,0,0x0,8
tick,0x7ffe67f8feb4,36295645,0,0x0,8
tick,0x7ffe67f8feb4,36311218,0,0x0,8
tick,0x7ffe67f8feb4,36327198,0,0x0,8
tick,0x7ffe67f8feb4,36342796,0,0x0,8
tick,0x7ffe67f8feb4,36371327,0,0x0,8
tick,0x7ffe67f8feb4,36374751,0,0x0,8
tick,0x7ffe67f8feb4,36390406,0,0x0,8
tick,0x7ffe67f8feb4,36405788,0,0x0,8
tick,0x7ffe67f8feb4,36421511,0,0x0,8
tick,0x7ffe67f8feb4,36437297,0,0x0,8
tick,0x7ffe67f8feb4,36452273,0,0x0,8
tick,0x7ffe67f8feb4,36467524,0,0x0,8
tick,0x7ffe67f8feb4,36483140,0,0x0,8
tick,0x7ffe67f8feb4,36498723,0,0x0,8
tick,0x7ffe67f8feb4,36514645,0,0x0,8
tick,0x7ffe67f8feb4,36529807,0,0x0,8
tick,0x7ffe67f8feb4,36544946,0,0x0,8
tick,0x7ffe67f8feb4,36560247,0,0x0,8
tick,0x7ffe67f8feb4,36575378,0,0x0,8
tick,0x7ffe67f8feb4,36590773,0,0x0,8
tick,0x7ffe67f8feb4,36606221,0,0x0,8
tick,0x7ffe67f8feb4,36621775,0,0x0,8
tick,0x7ffe67f8feb4,36637204,0,0x0,8
tick,0x7ffe67f8feb4,36652380,0,0x0,8
tick,0x7ffe67f8feb4,36667782,0,0x0,8
tick,0x7ffe67f8feb4,36684031,0,0x0,8
tick,0x7ffe67f8feb4,36699334,0,0x0,8
tick,0x7ffe67f8feb4,36714483,0,0x0,8
tick,0x7ffe67f8feb4,36729506,0,0x0,8
tick,0x7ffe67f8feb4,36744511,0,0x0,8
tick,0x7ffe67f8feb4,36760430,0,0x0,8
tick,0x7ffe67f8feb4,36775845,0,0x0,8
tick,0x7ffe67f8feb4,36790901,0,0x0,8
tick,0x7ffe67f8feb4,36806903,0,0x0,8
tick,0x7ffe67f8feb4,36822038,0,0x0,8
tick,0x7ffe67f8feb4,36837216,0,0x0,8
tick,0x7ffe67f8feb4,36852376,0,0x0,8
tick,0x7ffe67f8feb4,36867811,0,0x0,8
tick,0x7ffe67f8feb4,36883804,0,0x0,8
tick,0x7ffe67f8feb4,36899266,0,0x0,8
tick,0x7ffe67f8feb4,36914341,0,0x0,8
tick,0x7ffe67f8feb4,36930219,0,0x0,8
tick,0x7ffe67f8feb4,36946219,0,0x0,8
tick,0x7ffe67f8feb4,36961504,0,0x0,8
tick,0x7ffe67f8feb4,36977240,0,0x0,8
tick,0x7ffe67f8feb4,36992249,0,0x0,8
tick,0x7ffe67f8feb4,37008204,0,0x0,8
tick,0x7ffe67f8feb4,37023034,0,0x0,8
tick,0x7ffe67f8feb4,37038204,0,0x0,8
tick,0x7ffe67f8feb4,37053702,0,0x0,8
tick,0x7ffe67f8feb4,37069202,0,0x0,8
tick,0x7ffe67f8feb4,37085226,0,0x0,8
tick,0x7ffe67f8feb4,37101284,0,0x0,8
tick,0x7ffe67f8feb4,37116042,0,0x0,8
tick,0x7ffe67f8feb4,37131725,0,0x0,8
tick,0x7ffe67f8feb4,37146909,0,0x0,8
tick,0x7ffe67f8feb4,37162603,0,0x0,8
tick,0x7ffe67f8feb4,37177708,0,0x0,8
tick,0x7ffe67f8feb4,37192943,0,0x0,8
tick,0x7ffe67f8feb4,37208149,0,0x0,8
tick,0x7ffe67f8feb4,37223256,0,0x0,8
tick,0x7ffe67f8feb4,37238571,0,0x0,8
tick,0x7ffe67f8feb4,37253669,0,0x0,8
tick,0x7ffe67f8feb4,37268948,0,0x0,8
tick,0x7ffe67f8feb4,37283980,0,0x0,8
tick,0x7ffe67f8feb4,37299236,0,0x0,8
tick,0x7ffe67f8feb4,37313941,0,0x0,8
tick,0x7ffe67f8feb4,37329313,0,0x0,8
tick,0x7ffe67f8feb4,37344660,0,0x0,8
tick,0x7ffe67f8feb4,37360395,0,0x0,8
tick,0x7ffe67f8feb4,37376268,0,0x0,8
tick,0x7ffe67f8feb4,37390938,0,0x0,8
tick,0x7ffe67f8feb4,37406205,0,0x0,8
tick,0x7ffe67f8feb4,37422026,0,0x0,8
tick,0x7ffe67f8feb4,37437275,0,0x0,8
tick,0x7ffe67f8feb4,37452515,0,0x0,8
tick,0x7ffe67f8feb4,37468238,0,0x0,8
tick,0x7ffe67f8feb4,37483644,0,0x0,8
tick,0x7ffe67f8feb4,37499262,0,0x0,8
tick,0x7ffe67f8feb4,37514634,0,0x0,8
tick,0x7ffe67f8feb4,37529931,0,0x0,8
tick,0x7ffe67f8feb4,37544591,0,0x0,8
tick,0x7ffe67f8feb4,37559738,0,0x0,8
tick,0x7ffe67f8feb4,37575305,0,0x0,8
tick,0x7ffe67f8feb4,37590470,0,0x0,8
tick,0x7ffe67f8feb4,37605806,0,0x0,8
tick,0x7ffe67f8feb4,37620309,0,0x0,8
tick,0x7ffe67f8feb4,37635988,0,0x0,8
tick,0x7ffe67f8feb4,37651563,0,0x0,8
tick,0x7ffe67f8feb4,37666215,0,0x0,8
tick,0x7ffe67f8feb4,37681208,0,0x0,8
tick,0x7ffe67f8feb4,37697226,0,0x0,8
tick,0x7ffe67f8feb4,37712704,0,0x0,8
tick,0x7ffe67f8feb4,37728401,0,0x0,8
tick,0x7ffe67f8feb4,37743330,0,0x0,8
tick,0x7ffe67f8feb4,37758170,0,0x0,8
tick,0x7ffe67f8feb4,37773350,0,0x0,8
tick,0x7ffe67f8feb4,37789155,0,0x0,8
tick,0x7ffe67f8feb4,37804087,0,0x0,8
tick,0x7ffe67f8feb4,37819288,0,0x0,8
tick,0x7ffe67f8feb4,37834389,0,0x0,8
tick,0x7ffe67f8feb4,37849543,0,0x0,8
tick,0x7ffe67f8feb4,37865043,0,0x0,8
tick,0x7ffe67f8feb4,37880264,0,0x0,8
tick,0x7ffe67f8feb4,37895912,0,0x0,8
tick,0x7ffe67f8feb4,37911294,0,0x0,8
tick,0x7ffe67f8feb4,37927203,0,0x0,8
tick,0x7ffe67f8feb4,37942538,0,0x0,8
tick,0x7ffe67f8feb4,37957702,0,0x0,8
tick,0x7ffe67f8feb4,37973768,0,0x0,8
tick,0x7ffe67f8feb4,37988924,0,0x0,8
tick,0x7ffe67f8feb4,38003757,0,0x0,8
tick,0x7ffe67f8feb4,38018676,0,0x0,8
tick,0x7ffe67f8feb4,38034422,0,0x0,8
tick,0x7ffe67f8feb4,38050281,0,0x0,8
tick,0x7ffe67f8feb4,38065429,0,0x0,8
tick,0x7ffe67f8feb4,38080686,0,0x0,8
tick,0x7ffe67f8feb4,38096459,0,0x0,8
tick,0x7ffe67f8feb4,38112695,0,0x0,8
tick,0x7ffe67f8feb4,38128576,0,0x0,8
tick,0x7ffe67f8feb4,38144889,0,0x0,8
tick,0x7ffe67f8feb4,38160897,0,0x0,8
tick,0x7ffe67f8feb4,38176218,0,0x0,8
tick,0x7ffe67f8feb4,38191195,0,0x0,8
tick,0x7ffe67f8feb4,38206004,0,0x0,8
tick,0x7ffe67f8feb4,38221235,0,0x0,8
tick,0x7ffe67f8feb4,38237352,0,0x0,8
tick,0x7ffe67f8feb4,38252480,0,0x0,8
tick,0x7ffe67f8feb4,38267623,0,0x0,8
tick,0x7ffe67f8feb4,38282773,0,0x0,8
tick,0x7ffe67f8feb4,38297959,0,0x0,8
tick,0x7ffe67f8feb4,38313338,0,0x0,8
tick,0x7ffe67f8feb4,38329182,0,0x0,8
tick,0x7ffe67f8feb4,38344489,0,0x0,8
tick,0x7ffe67f8feb4,38359314,0,0x0,8
tick,0x7ffe67f8feb4,38374819,0,0x0,8
tick,0x7ffe67f8feb4,38389969,0,0x0,8
tick,0x7ffe67f8feb4,38405853,0,0x0,8
tick,0x7ffe67f8feb4,38421459,0,0x0,8
tick,0x7ffe67f8feb4,38437484,0,0x0,8
tick,0x7ffe67f8feb4,38452526,0,0x0,8
tick,0x7ffe67f8feb4,38467464,0,0x0,8
tick,0x7ffe67f8feb4,38482910,0,0x0,8
tick,0x7ffe67f8feb4,38498253,0,0x0,8
tick,0x7ffe67f8feb4,38513974,0,0x0,8
tick,0x7ffe67f8feb4,38529517,0,0x0,8
tick,0x7ffe67f8feb4,38544590,0,0x0,8
tick,0x7ffe67f8feb4,38560666,0,0x0,8
tick,0x7ffe67f8feb4,38576338,0,0x0,8
tick,0x7ffe67f8feb4,38592628,0,0x0,8
tick,0x7ffe67f8feb4,38608418,0,0x0,8
tick,0x7ffe67f8feb4,38623936,0,0x0,8
tick,0x7ffe67f8feb4,38639578,0,0x0,8
tick,0x7ffe67f8feb4,38654556,0,0x0,8
tick,0x7ffe67f8feb4,38669666,0,0x0,8
tick,0x7ffe67f8feb4,38685408,0,0x0,8
tick,0x7ffe67f8feb4,38701454,0,0x0,8
tick,0x7ffe67f8feb4,38717227,0,0x0,8
tick,0x7ffe67f8feb4,38732686,0,0x0,8
tick,0x7ffe67f8feb4,38748294,0,0x0,8
tick,0x7ffe67f8feb4,38763763,0,0x0,8
tick,0x7ffe67f8feb4,38779601,0,0x0,8
tick,0x7ffe67f8feb4,38795221,0,0x0,8
tick,0x7ffe67f8feb4,38810383,0,0x0,8
tick,0x7ffe67f8feb4,38825993,0,0x0,8
tick,0x7ffe67f8feb4,38841367,0,0x0,8
tick,0x7ffe67f8feb4,38857263,0,0x0,8
tick,0x7ffe67f8feb4,38873097,0,0x0,8
tick,0x7ffe67f8feb4,38888486,0,0x0,8
tick,0x7ffe67f8feb4,38904352,0,0x0,8
tick,0x7ffe67f8feb4,38919466,0,0x0,8
tick,0x7ffe67f8feb4,38934489,0,0x0,8
tick,0x7ffe67f8feb4,38950555,0,0x0,8
tick,0x7ffe67f8feb4,38966375,0,0x0,8
tick,0x7ffe67f8feb4,38981722,0,0x0,8
tick,0x7ffe67f8feb4,38997338,0,0x0,8
tick,0x7ffe67f8feb4,39012965,0,0x0,8
tick,0x7ffe67f8feb4,39028323,0,0x0,8
tick,0x7ffe67f8feb4,39044035,0,0x0,8
tick,0x7ffe67f8feb4,39059273,0,0x0,8
tick,0x7ffe67f8feb4,39074835,0,0x0,8
tick,0x7ffe67f8feb4,39090224,0,0x0,8
tick,0x7ffe67f8feb4,39105430,0,0x0,8
tick,0x7ffe67f8feb4,39121005,0,0x0,8
tick,0x7ffe67f8feb4,39136239,0,0x0,8
tick,0x7ffe67f8feb4,39151671,0,0x0,8
tick,0x7ffe67f8feb4,39167745,0,0x0,8
tick,0x7ffe67f8feb4,39183268,0,0x0,8
tick,0x7ffe67f8feb4,39199351,0,0x0,8
tick,0x7ffe67f8feb4,39214918,0,0x0,8
tick,0x7ffe67f8feb4,39230536,0,0x0,8
tick,0x7ffe67f8feb4,39246537,0,0x0,8
tick,0x7ffe67f8feb4,39261663,0,0x0,8
tick,0x7ffe67f8feb4,39277659,0,0x0,8
tick,0x7ffe67f8feb4,39293669,0,0x0,8
tick,0x7ffe67f8feb4,39309763,0,0x0,8
tick,0x7ffe67f8feb4,39324918,0,0x0,8
tick,0x7ffe67f8feb4,39340233,0,0x0,8
tick,0x7ffe67f8feb4,39355417,0,0x0,8
tick,0x7ffe67f8feb4,39371332,0,0x0,8
tick,0x7ffe67f8feb4,39387232,0,0x0,8
tick,0x7ffe67f8feb4,39402724,0,0x0,8
tick,0x7ffe67f8feb4,39418283,0,0x0,8
tick,0x7ffe67f8feb4,39434691,0,0x0,8
tick,0x7ffe67f8feb4,39450285,0,0x0,8
tick,0x7ffe67f8feb4,39465086,0,0x0,8
tick,0x7ffe67f8feb4,39480228,0,0x0,8
tick,0x7ffe67f8feb4,39496084,0,0x0,8
tick,0x7ffe67f8feb4,39511394,0,0x0,8
tick,0x7ffe67f8feb4,39527254,0,0x0,8
tick,0x7ffe67f8feb4,39542406,0,0x0,8
tick,0x7ffe67f8feb4,39558181,0,0x0,8
tick,0x7ffe67f8feb4,39573494,0,0x0,8
tick,0x7ffe67f8feb4,39589199,0,0x0,8
tick,0x7ffe67f8feb4,39605175,0,0x0,8
tick,0x7ffe67f8feb4,39621007,0,0x0,8
tick,0x7ffe67f8feb4,39636265,0,0x0,8
tick,0x7ffe67f8feb4,39652202,0,0x0,8
tick,0x7ffe67f8feb4,39667285,0,0x0,8
tick,0x7ffe67f8feb4,39683110,0,0x0,8
tick,0x7ffe67f8feb4,39698849,0,0x0,8
tick,0x7ffe67f8feb4,39714359,0,0x0,8
tick,0x7ffe67f8feb4,39730053,0,0x0,8
tick,0x7ffe67f8feb4,39745134,0,0x0,8
tick,0x7ffe67f8feb4,39761141,0,0x0,8
tick,0x7ffe67f8feb4,39777155,0,0x0,8
tick,0x7ffe67f8feb4,39792886,0,0x0,8
tick,0x7ffe67f8feb4,39808180,0,0x0,8
tick,0x7ffe67f8feb4,39822946,0,0x0,8
tick,0x7ffe67f8feb4,39838189,0,0x0,8
tick,0x7ffe67f8feb4,39854236,0,0x0,8
tick,0x7ffe67f8feb4,39869415,0,0x0,8
tick,0x7ffe67f8feb4,39885456,0,0x0,8
tick,0x7ffe67f8feb4,39901152,0,0x0,8
tick,0x7ffe67f8feb4,39917188,0,0x0,8
tick,0x7ffe67f8feb4,39933214,0,0x0,8
tick,0x7ffe67f8feb4,39948547,0,0x0,8
tick,0x7ffe67f8feb4,39963572,0,0x0,8
tick,0x7ffe67f8feb4,39978202,0,0x0,8
tick,0x7ffe67f8feb4,39993579,0,0x0,8
tick,0x7ffe67f8feb4,40009253,0,0x0,8
tick,0x7ffe67f8feb4,40025288,0,0x0,8
tick,0x7ffe67f8feb4,40041263,0,0x0,8
tick,0x7ffe67f8feb4,40057262,0,0x0,8
tick,0x7ffe67f8feb4,40073181,0,0x0,8
tick,0x7ffe67f8feb4,40088768,0,0x0,8
tick,0x7ffe67f8feb4,40104432,0,0x0,8
tick,0x7ffe67f8feb4,40120100,0,0x0,8
tick,0x7ffe67f8feb4,40136180,0,0x0,8
tick,0x7ffe67f8feb4,40152210,0,0x0,8
tick,0x7ffe67f8feb4,40168202,0,0x0,8
tick,0x7ffe67f8feb4,40183970,0,0x0,8
tick,0x7ffe67f8feb4,40199390,0,0x0,8
tick,0x7ffe67f8feb4,40214329,0,0x0,8
tick,0x7ffe67f8feb4,40230329,0,0x0,8
tick,0x7ffe67f8feb4,40246327,0,0x0,8
tick,0x7ffe67f8feb4,40261336,0,0x0,8
tick,0x7ffe67f8feb4,40277200,0,0x0,8
tick,0x7ffe67f8feb4,40292352,0,0x0,8
tick,0x7ffe67f8feb4,40307184,0,0x0,8
tick,0x7ffe67f8feb4,40322724,0,0x0,8
tick,0x7ffe67f8feb4,40337802,0,0x0,8
tick,0x7ffe67f8feb4,40353199,0,0x0,8
tick,0x7ffe67f8feb4,40368186,0,0x0,8
tick,0x7ffe67f8feb4,40383321,0,0x0,8
tick,0x7ffe67f8feb4,40398328,0,0x0,8
tick,0x7ffe67f8feb4,40413720,0,0x0,8
tick,0x7ffe67f8feb4,40429246,0,0x0,8
tick,0x7ffe67f8feb4,40444580,0,0x0,8
tick,0x7ffe67f8feb4,40460189,0,0x0,8
tick,0x7ffe67f8feb4,40475653,0,0x0,8
tick,0x7ffe67f8feb4,40491156,0,0x0,8
tick,0x7ffe67f8feb4,40506180,0,0x0,8
tick,0x7ffe67f8feb4,40522076,0,0x0,8
tick,0x7ffe67f8feb4,40536740,0,0x0,8
tick,0x7ffe67f8feb4,40552745,0,0x0,8
tick,0x7ffe67f8feb4,40568167,0,0x0,8
tick,0x7ffe67f8feb4,40583767,0,0x0,8
tick,0x7ffe67f8feb4,40599342,0,0x0,8
tick,0x7ffe67f8feb4,40615163,0,0x0,8
tick,0x7ffe67f8feb4,40631257,0,0x0,8
tick,0x7ffe67f8feb4,40647178,0,0x0,8
tick,0x7ffe67f8feb4,40663002,0,0x0,8
tick,0x7ffe67f8feb4,40677972,0,0x0,8
tick,0x7ffe67f8feb4,40693802,0,0x0,8
tick,0x7ffe67f8feb4,40709419,0,0x0,8
tick,0x7ffe67f8feb4,40724852,0,0x0,8
tick,0x7ffe67f8feb4,40740584,0,0x0,8
tick,0x7ffe67f8feb4,40756342,0,0x0,8
tick,0x7ffe67f8feb4,40771837,0,0x0,8
tick,0x7ffe67f8feb4,40787409,0,0x0,8
tick,0x7ffe67f8feb4,40803441,0,0x0,8
tick,0x7ffe67f8feb4,40818484,0,0x0,8
tick,0x7ffe67f8feb4,40833623,0,0x0,8
tick,0x7ffe67f8feb4,40849507,0,0x0,8
tick,0x7ffe67f8feb4,40864823,0,0x0,8
tick,0x7ffe67f8feb4,40880345,0,0x0,8
tick,0x7ffe67f8feb4,40895797,0,0x0,8
tick,0x7ffe67f8feb4,40911501,0,0x0,8
tick,0x7ffe67f8feb4,40927278,0,0x0,8
tick,0x7ffe67f8feb4,40943303,0,0x0,8
tick,0x7ffe67f8feb4,40958864,0,0x0,8
tick,0x7ffe67f8feb4,40973697,0,0x0,8
tick,0x7ffe67f8feb4,40988969,0,0x0,8
tick,0x7ffe67f8feb4,41003943,0,0x0,8
tick,0x7ffe67f8feb4,41019030,0,0x0,8
tick,0x7ffe67f8feb4,41035135,0,0x0,8
tick,0x7ffe67f8feb4,41050984,0,0x0,8
tick,0x7ffe67f8feb4,41066101,0,0x0,8
tick,0x7ffe67f8feb4,41081229,0,0x0,8
tick,0x7ffe67f8feb4,41096280,0,0x0,8
tick,0x7ffe67f8feb4,41112043,0,0x0,8
tick,0x7ffe67f8feb4,41126944,0,0x0,8
tick,0x7ffe67f8feb4,41142377,0,0x0,8
tick,0x7ffe67f8feb4,41157999,0,0x0,8
tick,0x7ffe67f8feb4,41173081,0,0x0,8
tick,0x7ffe67f8feb4,41188914,0,0x0,8
tick,0x7ffe67f8feb4,41204941,0,0x0,8
tick,0x7ffe67f8feb4,41230940,0,0x0,8
tick,0x7ffe67f8feb4,41237811,0,0x0,8
tick,0x7ffe67f8feb4,41253145,0,0x0,8
tick,0x7ffe67f8feb4,41269045,0,0x0,8
tick,0x7ffe67f8feb4,41285708,0,0x0,8
tick,0x7ffe67f8feb4,41301233,0,0x0,8
tick,0x7ffe67f8feb4,41316239,0,0x0,8
tick,0x7ffe67f8feb4,41331002,0,0x0,8
tick,0x7ffe67f8feb4,41346192,0,0x0,8
tick,0x7ffe67f8feb4,41361501,0,0x0,8
tick,0x7ffe67f8feb4,41377210,0,0x0,8
tick,0x7ffe67f8feb4,41392875,0,0x0,8
tick,0x7ffe67f8feb4,41408260,0,0x0,8
tick,0x7ffe67f8feb4,41423471,0,0x0,8
tick,0x7ffe67f8feb4,41439340,0,0x0,8
tick,0x7ffe67f8feb4,41454677,0,0x0,8
tick,0x7ffe67f8feb4,41470374,0,0x0,8
tick,0x7ffe67f8feb4,41486313,0,0x0,8
tick,0x7ffe67f8feb4,41502133,0,0x0,8
tick,0x7ffe67f8feb4,41517076,0,0x0,8
tick,0x7ffe67f8feb4,41532405,0,0x0,8
tick,0x7ffe67f8feb4,41548385,0,0x0,8
tick,0x7ffe67f8feb4,41563451,0,0x0,8
tick,0x7ffe67f8feb4,41579562,0,0x0,8
tick,0x7ffe67f8feb4,41594503,0,0x0,8
tick,0x7ffe67f8feb4,41610386,0,0x0,8
tick,0x7ffe67f8feb4,41625903,0,0x0,8
tick,0x7ffe67f8feb4,41642055,0,0x0,8
tick,0x7ffe67f8feb4,41666698,0,0x0,8
tick,0x7ffe67f8feb4,41682073,0,0x0,8
tick,0x7ffe67f8feb4,41698008,0,0x0,8
tick,0x7ffe67f8feb4,41713924,0,0x0,8
tick,0x7ffe67f8feb4,41729197,0,0x0,8
tick,0x7ffe67f8feb4,41744813,0,0x0,8
tick,0x7ffe67f8feb4,41760218,0,0x0,8
tick,0x7ffe67f8feb4,41775270,0,0x0,8
tick,0x7ffe67f8feb4,41790759,0,0x0,8
tick,0x7ffe67f8feb4,41805930,0,0x0,8
tick,0x7ffe67f8feb4,41821263,0,0x0,8
tick,0x7ffe67f8feb4,41837484,0,0x0,8
tick,0x7ffe67f8feb4,41852957,0,0x0,8
tick,0x7ffe67f8feb4,41868184,0,0x0,8
tick,0x7ffe67f8feb4,41883924,0,0x0,8
tick,0x7ffe67f8feb4,41900065,0,0x0,8
tick,0x7ffe67f8feb4,41915945,0,0x0,8
tick,0x7ffe67f8feb4,41931940,0,0x0,8
tick,0x7ffe67f8feb4,41947945,0,0x0,8
tick,0x7ffe67f8feb4,41963207,0,0x0,8
tick,0x7ffe67f8feb4,41979172,0,0x0,8
tick,0x7ffe67f8feb4,41994744,0,0x0,8
tick,0x7ffe67f8feb4,42010199,0,0x0,8
tick,0x7ffe67f8feb4,42026118,0,0x0,8
tick,0x7ffe67f8feb4,42041217,0,0x0,8
tick,0x7ffe67f8feb4,42057202,0,0x0,8
tick,0x7ffe67f8feb4,42072729,0,0x0,8
tick,0x7ffe67f8feb4,42087979,0,0x0,8
tick,0x7ffe67f8feb4,42104046,0,0x0,8
tick,0x7ffe67f8feb4,42120013,0,0x0,8
tick,0x7ffe67f8feb4,42135184,0,0x0,8
tick,0x7ffe67f8feb4,42151216,0,0x0,8
tick,0x7ffe67f8feb4,42167198,0,0x0,8
tick,0x7ffe67f8feb4,42182812,0,0x0,8
tick,0x7ffe67f8feb4,42198230,0,0x0,8
tick,0x7ffe67f8feb4,42214221,0,0x0,8
tick,0x7ffe67f8feb4,42230191,0,0x0,8
tick,0x7ffe67f8feb4,42246510,0,0x0,8
tick,0x7ffe67f8feb4,42262337,0,0x0,8
tick,0x7ffe67f8feb4,42278357,0,0x0,8
tick,0x7ffe67f8feb4,42294219,0,0x0,8
tick,0x7ffe67f8feb4,42310002,0,0x0,8
tick,0x7ffe67f8feb4,42325466,0,0x0,8
tick,0x7ffe67f8feb4,42341013,0,0x0,8
tick,0x7ffe67f8feb4,42356192,0,0x0,8
tick,0x7ffe67f8feb4,42372187,0,0x0,8
tick,0x7ffe67f8feb4,42388206,0,0x0,8
tick,0x7ffe67f8feb4,42404017,0,0x0,8
tick,0x7ffe67f8feb4,42426546,0,0x0,8
tick,0x7ffe67f8feb4,42442024,0,0x0,8
tick,0x7ffe67f8feb4,42457171,0,0x0,8
tick,0x7ffe67f8feb4,42473285,0,0x0,8
tick,0x7ffe67f8feb4,42488533,0,0x0,8
tick,0x7ffe67f8feb4,42504037,0,0x0,8
tick,0x7ffe67f8feb4,42519507,0,0x0,8
tick,0x7ffe67f8feb4,42535432,0,0x0,8
tick,0x7ffe67f8feb4,42550351,0,0x0,8
tick,0x7ffe67f8feb4,42566165,0,0x0,8
tick,0x7ffe67f8feb4,42581370,0,0x0,8
tick,0x7ffe67f8feb4,42597224,0,0x0,8
tick,0x7ffe67f8feb4,42612666,0,0x0,8
tick,0x7ffe67f8feb4,42628477,0,0x0,8
tick,0x7ffe67f8feb4,42643088,0,0x0,8
tick,0x7ffe67f8feb4,42661902,0,0x0,8
tick,0x7ffe67f8feb4,42676987,0,0x0,8
tick,0x7ffe67f8feb4,42692679,0,0x0,8
tick,0x7ffe67f8feb4,42707960,0,0x0,8
tick,0x7ffe67f8feb4,42723513,0,0x0,8
tick,0x7ffe67f8feb4,42739173,0,0x0,8
tick,0x7ffe67f8feb4,42755200,0,0x0,8
tick,0x7ffe67f8feb4,42770343,0,0x0,8
tick,0x7ffe67f8feb4,42786135,0,0x0,8
tick,0x7ffe67f8feb4,42802073,0,0x0,8
tick,0x7ffe67f8feb4,42817954,0,0x0,8
tick,0x7ffe67f8feb4,42834012,0,0x0,8
tick,0x7ffe67f8feb4,42849224,0,0x0,8
tick,0x7ffe67f8feb4,42864971,0,0x0,8
tick,0x7ffe67f8feb4,42880410,0,0x0,8
tick,0x7ffe67f8feb4,42895509,0,0x0,8
tick,0x7ffe67f8feb4,42911223,0,0x0,8
tick,0x7ffe67f8feb4,42927212,0,0x0,8
tick,0x7ffe67f8feb4,42943132,0,0x0,8
tick,0x7ffe67f8feb4,42958194,0,0x0,8
tick,0x7ffe67f8feb4,42974200,0,0x0,8
tick,0x7ffe67f8feb4,42990317,0,0x0,8
tick,0x7ffe67f8feb4,43006500,0,0x0,8
tick,0x7ffe67f8feb4,43022368,0,0x0,8
tick,0x7ffe67f8feb4,43038361,0,0x0,8
tick,0x7ffe67f8feb4,43054281,0,0x0,8
tick,0x7ffe67f8feb4,43070264,0,0x0,8
tick,0x7ffe67f8feb4,43085730,0,0x0,8
tick,0x7ffe67f8feb4,43101154,0,0x0,8
tick,0x7ffe67f8feb4,43116155,0,0x0,8
tick,0x7ffe67f8feb4,43132159,0,0x0,8
tick,0x7ffe67f8feb4,43148166,0,0x0,8
tick,0x7ffe67f8feb4,43164126,0,0x0,8
tick,0x7ffe67f8feb4,43180124,0,0x0,8
tick,0x7ffe67f8feb4,43196132,0,0x0,8
tick,0x7ffe67f8feb4,43212136,0,0x0,8
tick,0x7ffe67f8feb4,43228159,0,0x0,8
tick,0x7ffe67f8feb4,43244187,0,0x0,8
tick,0x7ffe67f8feb4,43260207,0,0x0,8
tick,0x7ffe67f8feb4,43275140,0,0x0,8
tick,0x7ffe67f8feb4,43291125,0,0x0,8
tick,0x7ffe67f8feb4,43307430,0,0x0,8
tick,0x7ffe67f8feb4,43322718,0,0x0,8
tick,0x7ffe67f8feb4,43338205,0,0x0,8
tick,0x7ffe67f8feb4,43354472,0,0x0,8
tick,0x7ffe67f8feb4,43369347,0,0x0,8
tick,0x7ffe67f8feb4,43385345,0,0x0,8
tick,0x7ffe67f8feb4,43401362,0,0x0,8
tick,0x7ffe67f8feb4,43417459,0,0x0,8
tick,0x7ffe67f8feb4,43433176,0,0x0,8
tick,0x7ffe67f8feb4,43449176,0,0x0,8
tick,0x7ffe67f8feb4,43465187,0,0x0,8
tick,0x7ffe67f8feb4,43480348,0,0x0,8
tick,0x7ffe67f8feb4,43495953,0,0x0,8
tick,0x7ffe67f8feb4,43511355,0,0x0,8
tick,0x7ffe67f8feb4,43527213,0,0x0,8
tick,0x7ffe67f8feb4,43543108,0,0x0,8
tick,0x7ffe67f8feb4,43559195,0,0x0,8
tick,0x7ffe67f8feb4,43574538,0,0x0,8
tick,0x7ffe67f8feb4,43590205,0,0x0,8
tick,0x7ffe67f8feb4,43606195,0,0x0,8
tick,0x7ffe67f8feb4,43622249,0,0x0,8
tick,0x7ffe67f8feb4,43638328,0,0x0,8
tick,0x7ffe67f8feb4,43654359,0,0x0,8
tick,0x7ffe67f8feb4,43670215,0,0x0,8
tick,0x7ffe67f8feb4,43686170,0,0x0,8
tick,0x7ffe67f8feb4,43701922,0,0x0,8
tick,0x7ffe67f8feb4,43717189,0,0x0,8
tick,0x7ffe67f8feb4,43733094,0,0x0,8
tick,0x7ffe67f8feb4,43748341,0,0x0,8
tick,0x7ffe67f8feb4,43764215,0,0x0,8
tick,0x7ffe67f8feb4,43780193,0,0x0,8
tick,0x7ffe67f8feb4,43796138,0,0x0,8
tick,0x7ffe67f8feb4,43812227,0,0x0,8
tick,0x7ffe67f8feb4,43828207,0,0x0,8
tick,0x7ffe67f8feb4,43844260,0,0x0,8
tick,0x7ffe67f8feb4,43860249,0,0x0,8
tick,0x7ffe67f8feb4,43876247,0,0x0,8
tick,0x7ffe67f8feb4,43892252,0,0x0,8
tick,0x7ffe67f8feb4,43908217,0,0x0,8
tick,0x7ffe67f8feb4,43924267,0,0x0,8
tick,0x7ffe67f8feb4,43940276,0,0x0,8
tick,0x7ffe67f8feb4,43956266,0,0x0,8
tick,0x7ffe67f8feb4,43972272,0,0x0,8
tick,0x7ffe67f8feb4,43988274,0,0x0,8
tick,0x7ffe67f8feb4,44004246,0,0x0,8
tick,0x7ffe67f8feb4,44020256,0,0x0,8
tick,0x7ffe67f8feb4,44036263,0,0x0,8
tick,0x7ffe67f8feb4,44052280,0,0x0,8
tick,0x7ffe67f8feb4,44068284,0,0x0,8
tick,0x7ffe67f8feb4,44084288,0,0x0,8
tick,0x7ffe67f8feb4,44100313,0,0x0,8
tick,0x7ffe67f8feb4,44116278,0,0x0,8
tick,0x7ffe67f8feb4,44132277,0,0x0,8
tick,0x7ffe67f8feb4,44148295,0,0x0,8
tick,0x7ffe67f8feb4,44164297,0,0x0,8
tick,0x7ffe67f8feb4,44180288,0,0x0,8
tick,0x7ffe67f8feb4,44196348,0,0x0,8
tick,0x7ffe67f8feb4,44212305,0,0x0,8
tick,0x7ffe67f8feb4,44228286,0,0x0,8
tick,0x7ffe67f8feb4,44244199,0,0x0,8
tick,0x7ffe67f8feb4,44260184,0,0x0,8
tick,0x7ffe67f8feb4,44276373,0,0x0,8
tick,0x7ffe67f8feb4,44292202,0,0x0,8
tick,0x7ffe67f8feb4,44308299,0,0x0,8
tick,0x7ffe67f8feb4,44324338,0,0x0,8
tick,0x7ffe67f8feb4,44340366,0,0x0,8
tick,0x7ffe67f8feb4,44356352,0,0x0,8
tick,0x7ffe67f8feb4,44372435,0,0x0,8
tick,0x7ffe67f8feb4,44388414,0,0x0,8
tick,0x7ffe67f8feb4,44404326,0,0x0,8
tick,0x7ffe67f8feb4,44420329,0,0x0,8
tick,0x7ffe67f8feb4,44436331,0,0x0,8
tick,0x7ffe67f8feb4,44452313,0,0x0,8
tick,0x7ffe67f8feb4,44468204,0,0x0,8
tick,0x7ffe67f8feb4,44483519,0,0x0,8
tick,0x7ffe67f8feb4,44499366,0,0x0,8
tick,0x7ffe67f8feb4,44515330,0,0x0,8
tick,0x7ffe67f8feb4,44531347,0,0x0,8
tick,0x7ffe67f8feb4,44547239,0,0x0,8
tick,0x7ffe67f8feb4,44562486,0,0x0,8
tick,0x7ffe67f8feb4,44578213,0,0x0,8
tick,0x7ffe67f8feb4,44593258,0,0x0,8
tick,0x7ffe67f8feb4,44608412,0,0x0,8
tick,0x7ffe67f8feb4,44623308,0,0x0,8
tick,0x7ffe67f8feb4,44638639,0,0x0,8
tick,0x7ffe67f8feb4,44654683,0,0x0,8
tick,0x7ffe67f8feb4,44670398,0,0x0,8
tick,0x7ffe67f8feb4,44685766,0,0x0,8
tick,0x7ffe67f8feb4,44701432,0,0x0,8
tick,0x7ffe67f8feb4,44717397,0,0x0,8
tick,0x7ffe67f8feb4,44733385,0,0x0,8
tick,0x7ffe67f8feb4,44749231,0,0x0,8
tick,0x7ffe67f8feb4,44765219,0,0x0,8
tick,0x7ffe67f8feb4,44780408,0,0x0,8
tick,0x7ffe67f8feb4,44796218,0,0x0,8
tick,0x7ffe67f8feb4,44811410,0,0x0,8
tick,0x7ffe67f8feb4,44827205,0,0x0,8
tick,0x7ffe67f8feb4,44842654,0,0x0,8
tick,0x7ffe67f8feb4,44859059,0,0x0,8
tick,0x7ffe67f8feb4,44874304,0,0x0,8
tick,0x7ffe67f8feb4,44889864,0,0x0,8
tick,0x7ffe67f8feb4,44905170,0,0x0,8
tick,0x7ffe67f8feb4,44920394,0,0x0,8
tick,0x7ffe67f8feb4,44936202,0,0x0,8
tick,0x7ffe67f8feb4,44951209,0,0x0,8
tick,0x7ffe67f8feb4,44967216,0,0x0,8
tick,0x7ffe67f8feb4,44983224,0,0x0,8
tick,0x7ffe67f8feb4,44998227,0,0x0,8
tick,0x7ffe67f8feb4,45013945,0,0x0,8
tick,0x7ffe67f8feb4,45029432,0,0x0,8
tick,0x7ffe67f8feb4,45064056,0,0x0,8
tick,0x7ffe67f8feb4,45118150,0,0x0,8
tick,0x7ffe67f8feb4,45140740,0,0x0,8
tick,0x7ffe67f8feb4,45160858,0,0x0,8
tick,0x7ffe67f8feb4,45170387,0,0x0,8
tick,0x7ffe67f8feb4,45186197,0,0x0,8
tick,0x7ffe67f8feb4,45202506,0,0x0,8
tick,0x7ffe67f8feb4,45218214,0,0x0,8
tick,0x7ffe67f8feb4,45233203,0,0x0,8
tick,0x7ffe67f8feb4,45249436,0,0x0,8
tick,0x7ffe67f8feb4,45265262,0,0x0,8
tick,0x7ffe67f8feb4,45281272,0,0x0,8
tick,0x7ffe67f8feb4,45297244,0,0x0,8
tick,0x7ffe67f8feb4,45312368,0,0x0,8
tick,0x7ffe67f8feb4,45328211,0,0x0,8
tick,0x7ffe67f8feb4,45343534,0,0x0,8
tick,0x7ffe67f8feb4,45359272,0,0x0,8
tick,0x7ffe67f8feb4,45375209,0,0x0,8
tick,0x7ffe67f8feb4,45391214,0,0x0,8
tick,0x7ffe67f8feb4,45407340,0,0x0,8
tick,0x7ffe67f8feb4,45422884,0,0x0,8
tick,0x7ffe67f8feb4,45438476,0,0x0,8
tick,0x7ffe67f8feb4,45454427,0,0x0,8
tick,0x7ffe67f8feb4,45469513,0,0x0,8
tick,0x7ffe67f8feb4,45485541,0,0x0,8
tick,0x7ffe67f8feb4,45501507,0,0x0,8
tick,0x7ffe67f8feb4,45517336,0,0x0,8
tick,0x7ffe67f8feb4,45532433,0,0x0,8
tick,0x7ffe67f8feb4,45548201,0,0x0,8
tick,0x7ffe67f8feb4,45563499,0,0x0,8
tick,0x7ffe67f8feb4,45579506,0,0x0,8
tick,0x7ffe67f8feb4,45595643,0,0x0,8
tick,0x7ffe67f8feb4,45611580,0,0x0,8
tick,0x7ffe67f8feb4,45627497,0,0x0,8
tick,0x7ffe67f8feb4,45643027,0,0x0,8
tick,0x7ffe67f8feb4,45658240,0,0x0,8
tick,0x7ffe67f8feb4,45673307,0,0x0,8
tick,0x7ffe67f8feb4,45689633,0,0x0,8
tick,0x7ffe67f8feb4,45704486,0,0x0,8
tick,0x7ffe67f8feb4,45720392,0,0x0,8
tick,0x7ffe67f8feb4,45737011,0,0x0,8
tick,0x7ffe67f8feb4,45752521,0,0x0,8
tick,0x7ffe67f8feb4,45768241,0,0x0,8
tick,0x7ffe67f8feb4,45783293,0,0x0,8
tick,0x7ffe67f8feb4,45798291,0,0x0,8
tick,0x7ffe67f8feb4,45813836,0,0x0,8
tick,0x7ffe67f8feb4,45829204,0,0x0,8
tick,0x7ffe67f8feb4,45844759,0,0x0,8
tick,0x7ffe67f8feb4,45860488,0,0x0,8
tick,0x7ffe67f8feb4,45876162,0,0x0,8
tick,0x7ffe67f8feb4,45891786,0,0x0,8
tick,0x7ffe67f8feb4,45907280,0,0x0,8
tick,0x7ffe67f8feb4,45922337,0,0x0,8
tick,0x7ffe67f8feb4,45938195,0,0x0,8
tick,0x7ffe67f8feb4,45954231,0,0x0,8
tick,0x7ffe67f8feb4,45969199,0,0x0,8
tick,0x7ffe67f8feb4,45984580,0,0x0,8
tick,0x7ffe67f8feb4,46000371,0,0x0,8
tick,0x7ffe67f8feb4,46016277,0,0x0,8
tick,0x7ffe67f8feb4,46031689,0,0x0,8
tick,0x7ffe67f8feb4,46047207,0,0x0,8
tick,0x7ffe67f8feb4,46062562,0,0x0,8
tick,0x7ffe67f8feb4,46078664,0,0x0,8
tick,0x7ffe67f8feb4,46094229,0,0x0,8
tick,0x7ffe67f8feb4,46110838,0,0x0,8
tick,0x7ffe67f8feb4,46126424,0,0x0,8
tick,0x7ffe67f8feb4,46142572,0,0x0,8
tick,0x7ffe67f8feb4,46158357,0,0x0,8
tick,0x7ffe67f8feb4,46173791,0,0x0,8
tick,0x7ffe67f8feb4,46189293,0,0x0,8
tick,0x7ffe67f8feb4,46204509,0,0x0,8
tick,0x7ffe67f8feb4,46220280,0,0x0,8
tick,0x7ffe67f8feb4,46235423,0,0x0,8
tick,0x7ffe67f8feb4,46251497,0,0x0,8
tick,0x7ffe67f8feb4,46268921,0,0x0,8
tick,0x7ffe67f8feb4,46283387,0,0x0,8
tick,0x7ffe67f8feb4,46298521,0,0x0,8
tick,0x7ffe67f8feb4,46314372,0,0x0,8
tick,0x7ffe67f8feb4,46330270,0,0x0,8
tick,0x7ffe67f8feb4,46346286,0,0x0,8
tick,0x7ffe67f8feb4,46361775,0,0x0,8
tick,0x7ffe67f8feb4,46377217,0,0x0,8
tick,0x7ffe67f8feb4,46392921,0,0x0,8
tick,0x7ffe67f8feb4,46408240,0,0x0,8
tick,0x7ffe67f8feb4,46424364,0,0x0,8
tick,0x7ffe67f8feb4,46439635,0,0x0,8
tick,0x7ffe67f8feb4,46455687,0,0x0,8
tick,0x7ffe67f8feb4,46471223,0,0x0,8
tick,0x7ffe67f8feb4,46487525,0,0x0,8
tick,0x7ffe67f8feb4,46502752,0,0x0,8
tick,0x7ffe67f8feb4,46518383,0,0x0,8
tick,0x7ffe67f8feb4,46534149,0,0x0,8
tick,0x7ffe67f8feb4,46549362,0,0x0,8
tick,0x7ffe67f8feb4,46564680,0,0x0,8
tick,0x7ffe67f8feb4,46581249,0,0x0,8
tick,0x7ffe67f8feb4,46596736,0,0x0,8
tick,0x7ffe67f8feb4,46613264,0,0x0,8
tick,0x7ffe67f8feb4,46628967,0,0x0,8
tick,0x7ffe67f8feb4,46644592,0,0x0,8
tick,0x7ffe67f8feb4,46660227,0,0x0,8
tick,0x7ffe67f8feb4,46677898,0,0x0,8
tick,0x7ffe67f8feb4,46692480,0,0x0,8
tick,0x7ffe67f8feb4,46708311,0,0x0,8
tick,0x7ffe67f8feb4,46724023,0,0x0,8
tick,0x7ffe67f8feb4,46739212,0,0x0,8
tick,0x7ffe67f8feb4,46755259,0,0x0,8
tick,0x7ffe67f8feb4,46771208,0,0x0,8
tick,0x7ffe67f8feb4,46787288,0,0x0,8
tick,0x7ffe67f8feb4,46803254,0,0x0,8
tick,0x7ffe67f8feb4,46819253,0,0x0,8
tick,0x7ffe67f8feb4,46835205,0,0x0,8
tick,0x7ffe67f8feb4,46850293,0,0x0,8
tick,0x7ffe67f8feb4,46865790,0,0x0,8
tick,0x7ffe67f8feb4,46880776,0,0x0,8
tick,0x7ffe67f8feb4,46896072,0,0x0,8
tick,0x7ffe67f8feb4,46912094,0,0x0,8
tick,0x7ffe67f8feb4,46928105,0,0x0,8
tick,0x7ffe67f8feb4,46943239,0,0x0,8
tick,0x7ffe67f8feb4,46958467,0,0x0,8
tick,0x7ffe67f8feb4,46974386,0,0x0,8
tick,0x7ffe67f8feb4,46989603,0,0x0,8
tick,0x7ffe67f8feb4,47004714,0,0x0,8
tick,0x7ffe67f8feb4,47020770,0,0x0,8
tick,0x7ffe67f8feb4,47036729,0,0x0,8
tick,0x7ffe67f8feb4,47052775,0,0x0,8
tick,0x7ffe67f8feb4,47068710,0,0x0,8
tick,0x7ffe67f8feb4,47084722,0,0x0,8
tick,0x7ffe67f8feb4,47100716,0,0x0,8
tick,0x7ffe67f8feb4,47116734,0,0x0,8
tick,0x7ffe67f8feb4,47132760,0,0x0,8
tick,0x7ffe67f8feb4,47148739,0,0x0,8
tick,0x7ffe67f8feb4,47164758,0,0x0,8
tick,0x7ffe67f8feb4,47180742,0,0x0,8
tick,0x7ffe67f8feb4,47196757,0,0x0,8
tick,0x7ffe67f8feb4,47212758,0,0x0,8
tick,0x7ffe67f8feb4,47227819,0,0x0,8
tick,0x7ffe67f8feb4,47244070,0,0x0,8
tick,0x7ffe67f8feb4,47259858,0,0x0,8
tick,0x7ffe67f8feb4,47275962,0,0x0,8
tick,0x7ffe67f8feb4,47292593,0,0x0,8
tick,0x7ffe67f8feb4,47308343,0,0x0,8
tick,0x7ffe67f8feb4,47323753,0,0x0,8
tick,0x7ffe67f8feb4,47339776,0,0x0,8
tick,0x7ffe67f8feb4,47355659,0,0x0,8
tick,0x7ffe67f8feb4,47371679,0,0x0,8
tick,0x7ffe67f8feb4,47387684,0,0x0,8
tick,0x7ffe67f8feb4,47402589,0,0x0,8
tick,0x7ffe67f8feb4,47418612,0,0x0,8
tick,0x7ffe67f8feb4,47433794,0,0x0,8
tick,0x7ffe67f8feb4,47449642,0,0x0,8
tick,0x7ffe67f8feb4,47464795,0,0x0,8
tick,0x7ffe67f8feb4,47480677,0,0x0,8
tick,0x7ffe67f8feb4,47496430,0,0x0,8
tick,0x7ffe67f8feb4,47512007,0,0x0,8
tick,0x7ffe67f8feb4,47527798,0,0x0,8
tick,0x7ffe67f8feb4,47543758,0,0x0,8
tick,0x7ffe67f8feb4,47559806,0,0x0,8
tick,0x7ffe67f8feb4,47575844,0,0x0,8
tick,0x7ffe67f8feb4,47591876,0,0x0,8
tick,0x7ffe67f8feb4,47607844,0,0x0,8
tick,0x7ffe67f8feb4,47623601,0,0x0,8
tick,0x7ffe67f8feb4,47638839,0,0x0,8
tick,0x7ffe67f8feb4,47654572,0,0x0,8
tick,0x7ffe67f8feb4,47669897,0,0x0,8
tick,0x7ffe67f8feb4,47685824,0,0x0,8
tick,0x7ffe67f8feb4,47701758,0,0x0,8
tick,0x7ffe67f8feb4,47717411,0,0x0,8
tick,0x7ffe67f8feb4,47732853,0,0x0,8
tick,0x7ffe67f8feb4,47749018,0,0x0,8
tick,0x7ffe67f8feb4,47764846,0,0x0,8
tick,0x7ffe67f8feb4,47779850,0,0x0,8
tick,0x7ffe67f8feb4,47795946,0,0x0,8
tick,0x7ffe67f8feb4,47811201,0,0x0,8
tick,0x7ffe67f8feb4,47826414,0,0x0,8
tick,0x7ffe67f8feb4,47841793,0,0x0,8
tick,0x7ffe67f8feb4,47857479,0,0x0,8
tick,0x7ffe67f8feb4,47873045,0,0x0,8
tick,0x7ffe67f8feb4,47888335,0,0x0,8
tick,0x7ffe67f8feb4,47904637,0,0x0,8
tick,0x7ffe67f8feb4,47920693,0,0x0,8
tick,0x7ffe67f8feb4,47936678,0,0x0,8
tick,0x7ffe67f8feb4,47951996,0,0x0,8
tick,0x7ffe67f8feb4,47968054,0,0x0,8
tick,0x7ffe67f8feb4,47982989,0,0x0,8
tick,0x7ffe67f8feb4,47998127,0,0x0,8
tick,0x7ffe67f8feb4,48014223,0,0x0,8
tick,0x7ffe67f8feb4,48028885,0,0x0,8
tick,0x7ffe67f8feb4,48044957,0,0x0,8
tick,0x7ffe67f8feb4,48061153,0,0x0,8
tick,0x7ffe67f8feb4,48076267,0,0x0,8
tick,0x7ffe67f8feb4,48092843,0,0x0,8
tick,0x7ffe67f8feb4,48107950,0,0x0,8
tick,0x7ffe67f8feb4,48123499,0,0x0,8
tick,0x7ffe67f8feb4,48138928,0,0x0,8
tick,0x7ffe67f8feb4,48153932,0,0x0,8
tick,0x7ffe67f8feb4,48169040,0,0x0,8
tick,0x7ffe67f8feb4,48185068,0,0x0,8
tick,0x7ffe67f8feb4,48200790,0,0x0,8
tick,0x7ffe67f8feb4,48216568,0,0x0,8
tick,0x7ffe67f8feb4,48232175,0,0x0,8
tick,0x7ffe67f8feb4,48248214,0,0x0,8
tick,0x7ffe67f8feb4,48264186,0,0x0,8
tick,0x7ffe67f8feb4,48280179,0,0x0,8
tick,0x7ffe67f8feb4,48296183,0,0x0,8
tick,0x7ffe67f8feb4,48312198,0,0x0,8
tick,0x7ffe67f8feb4,48328202,0,0x0,8
tick,0x7ffe67f8feb4,48344211,0,0x0,8
tick,0x7ffe67f8feb4,48359936,0,0x0,8
tick,0x7ffe67f8feb4,48375330,0,0x0,8
tick,0x7ffe67f8feb4,48391331,0,0x0,8
tick,0x7ffe67f8feb4,48406933,0,0x0,8
tick,0x7ffe67f8feb4,48422317,0,0x0,8
tick,0x7ffe67f8feb4,48437955,0,0x0,8
tick,0x7ffe67f8feb4,48453133,0,0x0,8
tick,0x7ffe67f8feb4,48469039,0,0x0,8
tick,0x7ffe67f8feb4,48484958,0,0x0,8
tick,0x7ffe67f8feb4,48500495,0,0x0,8
tick,0x7ffe67f8feb4,48516162,0,0x0,8
tick,0x7ffe67f8feb4,48531583,0,0x0,8
tick,0x7ffe67f8feb4,48547497,0,0x0,8
tick,0x7ffe67f8feb4,48562996,0,0x0,8
tick,0x7ffe67f8feb4,48578542,0,0x0,8
tick,0x7ffe67f8feb4,48594624,0,0x0,8
tick,0x7ffe67f8feb4,48610821,0,0x0,8
tick,0x7ffe67f8feb4,48626094,0,0x0,8
tick,0x7ffe67f8feb4,48641276,0,0x0,8
tick,0x7ffe67f8feb4,48657168,0,0x0,8
tick,0x7ffe67f8feb4,48672656,0,0x0,8
tick,0x7ffe67f8feb4,48688044,0,0x0,8
tick,0x7ffe67f8feb4,48704095,0,0x0,8
tick,0x7ffe67f8feb4,48719129,0,0x0,8
tick,0x7ffe67f8feb4,48734690,0,0x0,8
tick,0x7ffe67f8feb4,48749994,0,0x0,8
tick,0x7ffe67f8feb4,48765967,0,0x0,8
tick,0x7ffe67f8feb4,48781426,0,0x0,8
tick,0x7ffe67f8feb4,48796462,0,0x0,8
tick,0x7ffe67f8feb4,48812133,0,0x0,8
tick,0x7ffe67f8feb4,48827148,0,0x0,8
tick,0x7ffe67f8feb4,48843130,0,0x0,8
tick,0x7ffe67f8feb4,48858806,0,0x0,8
tick,0x7ffe67f8feb4,48873650,0,0x0,8
tick,0x7ffe67f8feb4,48889023,0,0x0,8
tick,0x7ffe67f8feb4,48904945,0,0x0,8
tick,0x7ffe67f8feb4,48920136,0,0x0,8
tick,0x7ffe67f8feb4,48935735,0,0x0,8
tick,0x7ffe67f8feb4,48951076,0,0x0,8
tick,0x7ffe67f8feb4,48967061,0,0x0,8
tick,0x7ffe67f8feb4,48983268,0,0x0,8
tick,0x7ffe67f8feb4,48999040,0,0x0,8
tick,0x7ffe67f8feb4,49014694,0,0x0,8
tick,0x7ffe67f8feb4,49030667,0,0x0,8
tick,0x7ffe67f8feb4,49045932,0,0x0,8
tick,0x7ffe67f8feb4,49061937,0,0x0,8
tick,0x7ffe67f8feb4,49077959,0,0x0,8
tick,0x7ffe67f8feb4,49093933,0,0x0,8
tick,0x7ffe67f8feb4,49109685,0,0x0,8
tick,0x7ffe67f8feb4,49124967,0,0x0,8
tick,0x7ffe67f8feb4,49140979,0,0x0,8
tick,0x7ffe67f8feb4,49156212,0,0x0,8
tick,0x7ffe67f8feb4,49171402,0,0x0,8
tick,0x7ffe67f8feb4,49186508,0,0x0,8
tick,0x7ffe67f8feb4,49201774,0,0x0,8
tick,0x7ffe67f8feb4,49217486,0,0x0,8
tick,0x7ffe67f8feb4,49232910,0,0x0,8
tick,0x7ffe67f8feb4,49248057,0,0x0,8
tick,0x7ffe67f8feb4,49263916,0,0x0,8
tick,0x7ffe67f8feb4,49279884,0,0x0,8
tick,0x7ffe67f8feb4,49295898,0,0x0,8
tick,0x7ffe67f8feb4,49311907,0,0x0,8
tick,0x7ffe67f8feb4,49327891,0,0x0,8
tick,0x7ffe67f8feb4,49343938,0,0x0,8
tick,0x7ffe67f8feb4,49359930,0,0x0,8
tick,0x7ffe67f8feb4,49375088,0,0x0,8
tick,0x7ffe67f8feb4,49390561,0,0x0,8
tick,0x7ffe67f8feb4,49406217,0,0x0,8
tick,0x7ffe67f8feb4,49421098,0,0x0,8
tick,0x7ffe67f8feb4,49437106,0,0x0,8
tick,0x7ffe67f8feb4,49453181,0,0x0,8
tick,0x7ffe67f8feb4,49468109,0,0x0,8
tick,0x7ffe67f8feb4,49483283,0,0x0,8
tick,0x7ffe67f8feb4,49499150,0,0x0,8
tick,0x7ffe67f8feb4,49514119,0,0x0,8
tick,0x7ffe67f8feb4,49529829,0,0x0,8
tick,0x7ffe67f8feb4,49545496,0,0x0,8
tick,0x7ffe67f8feb4,49561535,0,0x0,8
tick,0x7ffe67f8feb4,49576950,0,0x0,8
tick,0x7ffe67f8feb4,49592027,0,0x0,8
tick,0x7ffe67f8feb4,49608266,0,0x0,8
tick,0x7ffe67f8feb4,49623392,0,0x0,8
tick,0x7ffe67f8feb4,49638489,0,0x0,8
tick,0x7ffe67f8feb4,49654732,0,0x0,8
tick,0x7ffe67f8feb4,49670042,0,0x0,8
tick,0x7ffe67f8feb4,49685775,0,0x0,8
tick,0x7ffe67f8feb4,49701342,0,0x0,8
tick,0x7ffe67f8feb4,49717128,0,0x0,8
tick,0x7ffe67f8feb4,49733055,0,0x0,8
tick,0x7ffe67f8feb4,49749056,0,0x0,8
tick,0x7ffe67f8feb4,49764355,0,0x0,8
tick,0x7ffe67f8feb4,49780146,0,0x0,8
tick,0x7ffe67f8feb4,49796082,0,0x0,8
tick,0x7ffe67f8feb4,49811492,0,0x0,8
tick,0x7ffe67f8feb4,49826699,0,0x0,8
tick,0x7ffe67f8feb4,49842558,0,0x0,8
tick,0x7ffe67f8feb4,49858486,0,0x0,8
tick,0x7ffe67f8feb4,49874089,0,0x0,8
tick,0x7ffe67f8feb4,49890036,0,0x0,8
tick,0x7ffe67f8feb4,49905191,0,0x0,8
tick,0x7ffe67f8feb4,49920483,0,0x0,8
tick,0x7ffe67f8feb4,49935642,0,0x0,8
tick,0x7ffe67f8feb4,49951451,0,0x0,8
tick,0x7ffe67f8feb4,49967222,0,0x0,8
tick,0x7ffe67f8feb4,49982081,0,0x0,8
tick,0x7ffe67f8feb4,49997256,0,0x0,8
tick,0x7ffe67f8feb4,50012694,0,0x0,8
tick,0x7ffe67f8feb4,50028493,0,0x0,8
tick,0x7ffe67f8feb4,50044084,0,0x0,8
tick,0x7ffe67f8feb4,50059665,0,0x0,8
tick,0x7ffe67f8feb4,50074924,0,0x0,8
tick,0x7ffe67f8feb4,50090878,0,0x0,8
tick,0x7ffe67f8feb4,50106347,0,0x0,8
tick,0x7ffe67f8feb4,50122235,0,0x0,8
tick,0x7ffe67f8feb4,50137580,0,0x0,8
tick,0x7ffe67f8feb4,50153613,0,0x0,8
tick,0x7ffe67f8feb4,50168864,0,0x0,8
tick,0x7ffe67f8feb4,50184642,0,0x0,8
tick,0x7ffe67f8feb4,50200412,0,0x0,8
tick,0x7ffe67f8feb4,50214990,0,0x0,8
tick,0x7ffe67f8feb4,50230315,0,0x0,8
tick,0x7ffe67f8feb4,50245767,0,0x0,8
tick,0x7ffe67f8feb4,50261726,0,0x0,8
tick,0x7ffe67f8feb4,50277815,0,0x0,8
tick,0x7ffe67f8feb4,50292752,0,0x0,8
tick,0x7ffe67f8feb4,50307758,0,0x0,8
tick,0x7ffe67f8feb4,50323760,0,0x0,8
tick,0x7ffe67f8feb4,50338748,0,0x0,8
tick,0x7ffe67f8feb4,50354773,0,0x0,8
tick,0x7ffe67f8feb4,50370545,0,0x0,8
tick,0x7ffe67f8feb4,50386263,0,0x0,8
tick,0x7ffe67f8feb4,50401593,0,0x0,8
tick,0x7ffe67f8feb4,50416938,0,0x0,8
tick,0x7ffe67f8feb4,50432549,0,0x0,8
tick,0x7ffe67f8feb4,50447827,0,0x0,8
tick,0x7ffe67f8feb4,50463946,0,0x0,8
tick,0x7ffe67f8feb4,50479484,0,0x0,8
tick,0x7ffe67f8feb4,50495463,0,0x0,8
tick,0x7ffe67f8feb4,50510568,0,0x0,8
tick,0x7ffe67f8feb4,50526143,0,0x0,8
tick,0x7ffe67f8feb4,50541103,0,0x0,8
tick,0x7ffe67f8feb4,50555988,0,0x0,8
tick,0x7ffe67f8feb4,50572055,0,0x0,8
tick,0x7ffe67f8feb4,50586821,0,0x0,8
tick,0x7ffe67f8feb4,50602873,0,0x0,8
tick,0x7ffe67f8feb4,50618628,0,0x0,8
tick,0x7ffe67f8feb4,50633952,0,0x0,8
tick,0x7ffe67f8feb4,50649435,0,0x0,8
tick,0x7ffe67f8feb4,50664995,0,0x0,8
tick,0x7ffe67f8feb4,50680704,0,0x0,8
tick,0x7ffe67f8feb4,50696761,0,0x0,8
tick,0x7ffe67f8feb4,50712807,0,0x0,8
tick,0x7ffe67f8feb4,50728450,0,0x0,8
tick,0x7ffe67f8feb4,50743600,0,0x0,8
tick,0x7ffe67f8feb4,50759334,0,0x0,8
tick,0x7ffe67f8feb4,50775393,0,0x0,8
tick,0x7ffe67f8feb4,50791354,0,0x0,8
tick,0x7ffe67f8feb4,50806725,0,0x0,8
tick,0x7ffe67f8feb4,50822314,0,0x0,8
tick,0x7ffe67f8feb4,50837296,0,0x0,8
tick,0x7ffe67f8feb4,50853377,0,0x0,8
tick,0x7ffe67f8feb4,50869461,0,0x0,8
tick,0x7ffe67f8feb4,50884330,0,0x0,8
tick,0x7ffe67f8feb4,50900512,0,0x0,8
tick,0x7ffe67f8feb4,50916006,0,0x0,8
tick,0x7ffe67f8feb4,50931959,0,0x0,8
tick,0x7ffe67f8feb4,50947597,0,0x0,8
tick,0x7ffe67f8feb4,50963467,0,0x0,8
tick,0x7ffe67f8feb4,50979369,0,0x0,8
tick,0x7ffe67f8feb4,50995882,0,0x0,8
tick,0x7ffe67f8feb4,51012646,0,0x0,8
tick,0x7ffe67f8feb4,51026600,0,0x0,8
tick,0x7ffe67f8feb4,51041449,0,0x0,8
tick,0x7ffe67f8feb4,51056343,0,0x0,8
tick,0x7ffe67f8feb4,51072224,0,0x0,8
tick,0x7ffe67f8feb4,51087442,0,0x0,8
tick,0x7ffe67f8feb4,51102674,0,0x0,8
tick,0x7ffe67f8feb4,51117344,0,0x0,8
tick,0x7ffe67f8feb4,51132343,0,0x0,8
tick,0x7ffe67f8feb4,51147402,0,0x0,8
tick,0x7ffe67f8feb4,51163372,0,0x0,8
tick,0x7ffe67f8feb4,51180314,0,0x0,8
tick,0x7ffe67f8feb4,51195364,0,0x0,8
tick,0x7ffe67f8feb4,51211425,0,0x0,8
tick,0x7ffe67f8feb4,51227413,0,0x0,8
tick,0x7ffe67f8feb4,51243423,0,0x0,8
tick,0x7ffe67f8feb4,51258359,0,0x0,8
tick,0x7ffe67f8feb4,51274416,0,0x0,8
tick,0x7ffe67f8feb4,51290405,0,0x0,8
tick,0x7ffe67f8feb4,51306360,0,0x0,8
tick,0x7ffe67f8feb4,51322373,0,0x0,8
tick,0x7ffe67f8feb4,51338375,0,0x0,8
tick,0x7ffe67f8feb4,51354377,0,0x0,8
tick,0x7ffe67f8feb4,51370392,0,0x0,8
tick,0x7ffe67f8feb4,51386404,0,0x0,8
tick,0x7ffe67f8feb4,51402407,0,0x0,8
tick,0x7ffe67f8feb4,51418390,0,0x0,8
tick,0x7ffe67f8feb4,51433581,0,0x0,8
tick,0x7ffe67f8feb4,51449570,0,0x0,8
tick,0x7ffe67f8feb4,51465587,0,0x0,8
tick,0x7ffe67f8feb4,51481386,0,0x0,8
tick,0x7ffe67f8feb4,51497392,0,0x0,8
tick,0x7ffe67f8feb4,51513391,0,0x0,8
tick,0x7ffe67f8feb4,51529402,0,0x0,8
tick,0x7ffe67f8feb4,51545429,0,0x0,8
tick,0x7ffe67f8feb4,51561410,0,0x0,8
tick,0x7ffe67f8feb4,51577417,0,0x0,8
tick,0x7ffe67f8feb4,51593433,0,0x0,8
tick,0x7ffe67f8feb4,51609584,0,0x0,8
tick,0x7ffe67f8feb4,51624724,0,0x0,8
tick,0x7ffe67f8feb4,51640712,0,0x0,8
tick,0x7ffe67f8feb4,51656767,0,0x0,8
tick,0x7ffe67f8feb4,51672758,0,0x0,8
tick,0x7ffe67f8feb4,51688768,0,0x0,8
tick,0x7ffe67f8feb4,51704397,0,0x0,8
tick,0x7ffe67f8feb4,51719841,0,0x0,8
tick,0x7ffe67f8feb4,51735101,0,0x0,8
tick,0x7ffe67f8feb4,51750243,0,0x0,8
tick,0x7ffe67f8feb4,51765365,0,0x0,8
tick,0x7ffe67f8feb4,51781071,0,0x0,8
tick,0x7ffe67f8feb4,51796845,0,0x0,8
tick,0x7ffe67f8feb4,51812805,0,0x0,8
tick,0x7ffe67f8feb4,51827944,0,0x0,8
tick,0x7ffe67f8feb4,51843343,0,0x0,8
tick,0x7ffe67f8feb4,51858422,0,0x0,8
tick,0x7ffe67f8feb4,51873878,0,0x0,8
tick,0x7ffe67f8feb4,51888969,0,0x0,8
tick,0x7ffe67f8feb4,51904033,0,0x0,8
tick,0x7ffe67f8feb4,51918996,0,0x0,8
tick,0x7ffe67f8feb4,51934246,0,0x0,8
tick,0x7ffe67f8feb4,51949396,0,0x0,8
tick,0x7ffe67f8feb4,51964624,0,0x0,8
tick,0x7ffe67f8feb4,51980645,0,0x0,8
tick,0x7ffe67f8feb4,51996437,0,0x0,8
tick,0x7ffe67f8feb4,52011328,0,0x0,8
tick,0x7ffe67f8feb4,52026926,0,0x0,8
tick,0x7ffe67f8feb4,52042648,0,0x0,8
tick,0x7ffe67f8feb4,52058026,0,0x0,8
tick,0x7ffe67f8feb4,52073469,0,0x0,8
tick,0x7ffe67f8feb4,52088974,0,0x0,8
tick,0x7ffe67f8feb4,52104916,0,0x0,8
tick,0x7ffe67f8feb4,52120769,0,0x0,8
tick,0x7ffe67f8feb4,52136740,0,0x0,8
tick,0x7ffe67f8feb4,52152794,0,0x0,8
tick,0x7ffe67f8feb4,52168624,0,0x0,8
tick,0x7ffe67f8feb4,52184688,0,0x0,8
tick,0x7ffe67f8feb4,52199899,0,0x0,8
tick,0x7ffe67f8feb4,52215383,0,0x0,8
tick,0x7ffe67f8feb4,52230527,0,0x0,8
tick,0x7ffe67f8feb4,52246522,0,0x0,8
tick,0x7ffe67f8feb4,52262033,0,0x0,8
tick,0x7ffe67f8feb4,52277482,0,0x0,8
tick,0x7ffe67f8feb4,52293372,0,0x0,8
tick,0x7ffe67f8feb4,52309350,0,0x0,8
tick,0x7ffe67f8feb4,52325295,0,0x0,8
tick,0x7ffe67f8feb4,52341556,0,0x0,8
tick,0x7ffe67f8feb4,52357512,0,0x0,8
tick,0x7ffe67f8feb4,52372812,0,0x0,8
tick,0x7ffe67f8feb4,52388036,0,0x0,8
tick,0x7ffe67f8feb4,52403461,0,0x0,8
tick,0x7ffe67f8feb4,52418532,0,0x0,8
tick,0x7ffe67f8feb4,52433744,0,0x0,8
tick,0x7ffe67f8feb4,52449872,0,0x0,8
tick,0x7ffe67f8feb4,52465126,0,0x0,8
tick,0x7ffe67f8feb4,52481460,0,0x0,8
tick,0x7ffe67f8feb4,52496577,0,0x0,8
tick,0x7ffe67f8feb4,52511465,0,0x0,8
tick,0x7ffe67f8feb4,52526887,0,0x0,8
tick,0x7ffe67f8feb4,52542167,0,0x0,8
tick,0x7ffe67f8feb4,52557384,0,0x0,8
tick,0x7ffe67f8feb4,52572430,0,0x0,8
tick,0x7ffe67f8feb4,52588647,0,0x0,8
tick,0x7ffe67f8feb4,52604127,0,0x0,8
tick,0x7ffe67f8feb4,52620014,0,0x0,8
tick,0x7ffe67f8feb4,52635337,0,0x0,8
tick,0x7ffe67f8feb4,52651348,0,0x0,8
tick,0x7ffe67f8feb4,52666989,0,0x0,8
tick,0x7ffe67f8feb4,52682071,0,0x0,8
tick,0x7ffe67f8feb4,52698117,0,0x0,8
tick,0x7ffe67f8feb4,52713679,0,0x0,8
tick,0x7ffe67f8feb4,52729923,0,0x0,8
tick,0x7ffe67f8feb4,52745214,0,0x0,8
tick,0x7ffe67f8feb4,52760787,0,0x0,8
tick,0x7ffe67f8feb4,52776639,0,0x0,8
tick,0x7ffe67f8feb4,52792553,0,0x0,8
tick,0x7ffe67f8feb4,52808220,0,0x0,8
tick,0x7ffe67f8feb4,52823628,0,0x0,8
tick,0x7ffe67f8feb4,52839028,0,0x0,8
tick,0x7ffe67f8feb4,52855145,0,0x0,8
tick,0x7ffe67f8feb4,52871333,0,0x0,8
tick,0x7ffe67f8feb4,52886759,0,0x0,8
tick,0x7ffe67f8feb4,52902036,0,0x0,8
tick,0x7ffe67f8feb4,52917002,0,0x0,8
tick,0x7ffe67f8feb4,52931954,0,0x0,8
tick,0x7ffe67f8feb4,52947980,0,0x0,8
tick,0x7ffe67f8feb4,52963101,0,0x0,8
tick,0x7ffe67f8feb4,52978244,0,0x0,8
tick,0x7ffe67f8feb4,52993881,0,0x0,8
tick,0x7ffe67f8feb4,53009763,0,0x0,8
tick,0x7ffe67f8feb4,53024436,0,0x0,8
tick,0x7ffe67f8feb4,53040065,0,0x0,8
tick,0x7ffe67f8feb4,53055729,0,0x0,8
tick,0x7ffe67f8feb4,53071288,0,0x0,8
tick,0x7ffe67f8feb4,53086473,0,0x0,8
tick,0x7ffe67f8feb4,53101647,0,0x0,8
tick,0x7ffe67f8feb4,53116930,0,0x0,8
tick,0x7ffe67f8feb4,53132520,0,0x0,8
tick,0x7ffe67f8feb4,53148693,0,0x0,8
tick,0x7ffe67f8feb4,53163837,0,0x0,8
tick,0x7ffe67f8feb4,53179824,0,0x0,8
tick,0x7ffe67f8feb4,53195733,0,0x0,8
tick,0x7ffe67f8feb4,53211209,0,0x0,8
tick,0x7ffe67f8feb4,53227706,0,0x0,8
tick,0x7ffe67f8feb4,53242507,0,0x0,8
tick,0x7ffe67f8feb4,53257802,0,0x0,8
tick,0x7ffe67f8feb4,53273870,0,0x0,8
tick,0x7ffe67f8feb4,53289726,0,0x0,8
tick,0x7ffe67f8feb4,53304669,0,0x0,8
tick,0x7ffe67f8feb4,53319970,0,0x0,8
tick,0x7ffe67f8feb4,53335985,0,0x0,8
tick,0x7ffe67f8feb4,53351991,0,0x0,8
tick,0x7ffe67f8feb4,53367929,0,0x0,8
tick,0x7ffe67f8feb4,53383178,0,0x0,8
tick,0x7ffe67f8feb4,53398585,0,0x0,8
tick,0x7ffe67f8feb4,53414329,0,0x0,8
tick,0x7ffe67f8feb4,53429483,0,0x0,8
tick,0x7ffe67f8feb4,53444969,0,0x0,8
tick,0x7ffe67f8feb4,53460518,0,0x0,8
tick,0x7ffe67f8feb4,53476334,0,0x0,8
tick,0x7ffe67f8feb4,53492366,0,0x0,8
tick,0x7ffe67f8feb4,53507785,0,0x0,8
tick,0x7ffe67f8feb4,53523039,0,0x0,8
tick,0x7ffe67f8feb4,53538324,0,0x0,8
tick,0x7ffe67f8feb4,53553573,0,0x0,8
tick,0x7ffe67f8feb4,53569030,0,0x0,8
tick,0x7ffe67f8feb4,53584639,0,0x0,8
tick,0x7ffe67f8feb4,53600031,0,0x0,8
tick,0x7ffe67f8feb4,53615637,0,0x0,8
tick,0x7ffe67f8feb4,53630974,0,0x0,8
tick,0x7ffe67f8feb4,53646466,0,0x0,8
tick,0x7ffe67f8feb4,53662033,0,0x0,8
tick,0x7ffe67f8feb4,53677723,0,0x0,8
tick,0x7ffe67f8feb4,53693300,0,0x0,8
tick,0x7ffe67f8feb4,53708698,0,0x0,8
tick,0x7ffe67f8feb4,53724658,0,0x0,8
tick,0x7ffe67f8feb4,53740253,0,0x0,8
tick,0x7ffe67f8feb4,53755840,0,0x0,8
tick,0x7ffe67f8feb4,53771406,0,0x0,8
tick,0x7ffe67f8feb4,53787045,0,0x0,8
tick,0x7ffe67f8feb4,53802418,0,0x0,8
tick,0x7ffe67f8feb4,53817551,0,0x0,8
tick,0x7ffe67f8feb4,53833227,0,0x0,8
tick,0x7ffe67f8feb4,53849253,0,0x0,8
tick,0x7ffe67f8feb4,53864558,0,0x0,8
tick,0x7ffe67f8feb4,53879958,0,0x0,8
tick,0x7ffe67f8feb4,53895205,0,0x0,8
tick,0x7ffe67f8feb4,53910264,0,0x0,8
tick,0x7ffe67f8feb4,53925858,0,0x0,8
tick,0x7ffe67f8feb4,53941764,0,0x0,8
tick,0x7ffe67f8feb4,53957775,0,0x0,8
tick,0x7ffe67f8feb4,53973768,0,0x0,8
tick,0x7ffe67f8feb4,53989777,0,0x0,8
tick,0x7ffe67f8feb4,54005786,0,0x0,8
tick,0x7ffe67f8feb4,54021814,0,0x0,8
tick,0x7ffe67f8feb4,54037777,0,0x0,8
tick,0x7ffe67f8feb4,54053818,0,0x0,8
tick,0x7ffe67f8feb4,54070112,0,0x0,8
tick,0x7ffe67f8feb4,54086278,0,0x0,8
tick,0x7ffe67f8feb4,54101937,0,0x0,8
tick,0x7ffe67f8feb4,54116910,0,0x0,8
tick,0x7ffe67f8feb4,54132875,0,0x0,8
tick,0x7ffe67f8feb4,54148876,0,0x0,8
tick,0x7ffe67f8feb4,54164832,0,0x0,8
tick,0x7ffe67f8feb4,54180821,0,0x0,8
tick,0x7ffe67f8feb4,54196827,0,0x0,8
tick,0x7ffe67f8feb4,54212848,0,0x0,8
tick,0x7ffe67f8feb4,54228872,0,0x0,8
tick,0x7ffe67f8feb4,54244848,0,0x0,8
tick,0x7ffe67f8feb4,54260862,0,0x0,8
tick,0x7ffe67f8feb4,54276825,0,0x0,8
tick,0x7ffe67f8feb4,54292992,0,0x0,8
tick,0x7ffe67f8feb4,54308895,0,0x0,8
tick,0x7ffe67f8feb4,54324865,0,0x0,8
tick,0x7ffe67f8feb4,54340857,0,0x0,8
tick,0x7ffe67f8feb4,54356836,0,0x0,8
tick,0x7ffe67f8feb4,54372829,0,0x0,8
tick,0x7ffe67f8feb4,54388830,0,0x0,8
tick,0x7ffe67f8feb4,54404837,0,0x0,8
tick,0x7ffe67f8feb4,54420842,0,0x0,8
tick,0x7ffe67f8feb4,54436798,0,0x0,8
tick,0x7ffe67f8feb4,54452344,0,0x0,8
tick,0x7ffe67f8feb4,54468285,0,0x0,8
tick,0x7ffe67f8feb4,54484290,0,0x0,8
tick,0x7ffe67f8feb4,54500296,0,0x0,8
tick,0x7ffe67f8feb4,54516036,0,0x0,8
tick,0x7ffe67f8feb4,54531919,0,0x0,8
tick,0x7ffe67f8feb4,54547862,0,0x0,8
tick,0x7ffe67f8feb4,54562949,0,0x0,8
tick,0x7ffe67f8feb4,54578921,0,0x0,8
tick,0x7ffe67f8feb4,54594076,0,0x0,8
tick,0x7ffe67f8feb4,54610104,0,0x0,8
tick,0x7ffe67f8feb4,54625586,0,0x0,8
tick,0x7ffe67f8feb4,54640926,0,0x0,8
tick,0x7ffe67f8feb4,54656932,0,0x0,8
tick,0x7ffe67f8feb4,54672071,0,0x0,8
tick,0x7ffe67f8feb4,54687893,0,0x0,8
tick,0x7ffe67f8feb4,54703900,0,0x0,8
tick,0x7ffe67f8feb4,54719392,0,0x0,8
tick,0x7ffe67f8feb4,54735076,0,0x0,8
tick,0x7ffe67f8feb4,54750968,0,0x0,8
tick,0x7ffe67f8feb4,54767078,0,0x0,8
tick,0x7ffe67f8feb4,54782938,0,0x0,8
tick,0x7ffe67f8feb4,54798917,0,0x0,8
tick,0x7ffe67f8feb4,54814903,0,0x0,8
tick,0x7ffe67f8feb4,54830295,0,0x0,8
tick,0x7ffe67f8feb4,54845915,0,0x0,8
tick,0x7ffe67f8feb4,54861916,0,0x0,8
tick,0x7ffe67f8feb4,54877904,0,0x0,8
tick,0x7ffe67f8feb4,54893915,0,0x0,8
tick,0x7ffe67f8feb4,54909937,0,0x0,8
tick,0x7ffe67f8feb4,54925925,0,0x0,8
tick,0x7ffe67f8feb4,54941013,0,0x0,8
tick,0x7ffe67f8feb4,54956976,0,0x0,8
tick,0x7ffe67f8feb4,54972931,0,0x0,8
tick,0x7ffe67f8feb4,54988941,0,0x0,8
tick,0x7ffe67f8feb4,55004939,0,0x0,8
tick,0x7ffe67f8feb4,55020926,0,0x0,8
tick,0x7ffe67f8feb4,55036934,0,0x0,8
tick,0x7ffe67f8feb4,55052037,0,0x0,8
tick,0x7ffe67f8feb4,55067931,0,0x0,8
tick,0x7ffe67f8feb4,55083403,0,0x0,8
tick,0x7ffe67f8feb4,55098978,0,0x0,8
tick,0x7ffe67f8feb4,55114108,0,0x0,8
tick,0x7ffe67f8feb4,55129256,0,0x0,8
tick,0x7ffe67f8feb4,55145491,0,0x0,8
tick,0x7ffe67f8feb4,55160345,0,0x0,8
tick,0x7ffe67f8feb4,55175814,0,0x0,8
tick,0x7ffe67f8feb4,55190775,0,0x0,8
tick,0x7ffe67f8feb4,55206437,0,0x0,8
tick,0x7ffe67f8feb4,55222056,0,0x0,8
tick,0x7ffe67f8feb4,55237970,0,0x0,8
tick,0x7ffe67f8feb4,55253990,0,0x0,8
tick,0x7ffe67f8feb4,55269142,0,0x0,8
tick,0x7ffe67f8feb4,55285065,0,0x0,8
tick,0x7ffe67f8feb4,55300557,0,0x0,8
tick,0x7ffe67f8feb4,55316570,0,0x0,8
tick,0x7ffe67f8feb4,55332286,0,0x0,8
tick,0x7ffe67f8feb4,55347271,0,0x0,8
tick,0x7ffe67f8feb4,55363262,0,0x0,8
tick,0x7ffe67f8feb4,55379245,0,0x0,8
tick,0x7ffe67f8feb4,55395250,0,0x0,8
tick,0x7ffe67f8feb4,55411331,0,0x0,8
tick,0x7ffe67f8feb4,55427155,0,0x0,8
tick,0x7ffe67f8feb4,55442264,0,0x0,8
tick,0x7ffe67f8feb4,55458163,0,0x0,8
tick,0x7ffe67f8feb4,55475198,0,0x0,8
tick,0x7ffe67f8feb4,55490094,0,0x0,8
tick,0x7ffe67f8feb4,55505927,0,0x0,8
tick,0x7ffe67f8feb4,55521267,0,0x0,8
tick,0x7ffe67f8feb4,55537268,0,0x0,8
tick,0x7ffe67f8feb4,55553367,0,0x0,8
tick,0x7ffe67f8feb4,55569356,0,0x0,8
tick,0x7ffe67f8feb4,55584865,0,0x0,8
tick,0x7ffe67f8feb4,55600243,0,0x0,8
tick,0x7ffe67f8feb4,55617187,0,0x0,8
tick,0x7ffe67f8feb4,55632031,0,0x0,8
tick,0x7ffe67f8feb4,55647181,0,0x0,8
tick,0x7ffe67f8feb4,55663029,0,0x0,8
tick,0x7ffe67f8feb4,55679035,0,0x0,8
tick,0x7ffe67f8feb4,55695054,0,0x0,8
tick,0x7ffe67f8feb4,55710183,0,0x0,8
tick,0x7ffe67f8feb4,55725788,0,0x0,8
tick,0x7ffe67f8feb4,55740822,0,0x0,8
tick,0x7ffe67f8feb4,55756846,0,0x0,8
tick,0x7ffe67f8feb4,55772372,0,0x0,8
tick,0x7ffe67f8feb4,55788377,0,0x0,8
tick,0x7ffe67f8feb4,55803760,0,0x0,8
tick,0x7ffe67f8feb4,55819397,0,0x0,8
tick,0x7ffe67f8feb4,55835155,0,0x0,8
tick,0x7ffe67f8feb4,55850809,0,0x0,8
tick,0x7ffe67f8feb4,55866584,0,0x0,8
tick,0x7ffe67f8feb4,55882130,0,0x0,8
tick,0x7ffe67f8feb4,55897961,0,0x0,8
tick,0x7ffe67f8feb4,55913503,0,0x0,8
tick,0x7ffe67f8feb4,55928710,0,0x0,8
tick,0x7ffe67f8feb4,55945201,0,0x0,8
tick,0x7ffe67f8feb4,55959932,0,0x0,8
tick,0x7ffe67f8feb4,55974923,0,0x0,8
tick,0x7ffe67f8feb4,55990385,0,0x0,8
tick,0x7ffe67f8feb4,56006384,0,0x0,8
tick,0x7ffe67f8feb4,56022281,0,0x0,8
tick,0x7ffe67f8feb4,56037643,0,0x0,8
tick,0x7ffe67f8feb4,56052841,0,0x0,8
tick,0x7ffe67f8feb4,56068269,0,0x0,8
tick,0x7ffe67f8feb4,56083619,0,0x0,8
tick,0x7ffe67f8feb4,56099392,0,0x0,8
tick,0x7ffe67f8feb4,56114181,0,0x0,8
tick,0x7ffe67f8feb4,56130131,0,0x0,8
tick,0x7ffe67f8feb4,56145632,0,0x0,8
tick,0x7ffe67f8feb4,56161294,0,0x0,8
tick,0x7ffe67f8feb4,56176359,0,0x0,8
tick,0x7ffe67f8feb4,56191499,0,0x0,8
tick,0x7ffe67f8feb4,56206892,0,0x0,8
tick,0x7ffe67f8feb4,56222549,0,0x0,8
tick,0x7ffe67f8feb4,56237961,0,0x0,8
tick,0x7ffe67f8feb4,56253934,0,0x0,8
tick,0x7ffe67f8feb4,56269498,0,0x0,8
tick,0x7ffe67f8feb4,56285054,0,0x0,8
tick,0x7ffe67f8feb4,56300374,0,0x0,8
tick,0x7ffe67f8feb4,56315539,0,0x0,8
tick,0x7ffe67f8feb4,56331406,0,0x0,8
tick,0x7ffe67f8feb4,56347359,0,0x0,8
tick,0x7ffe67f8feb4,56363358,0,0x0,8
tick,0x7ffe67f8feb4,56379352,0,0x0,8
tick,0x7ffe67f8feb4,56395341,0,0x0,8
tick,0x7ffe67f8feb4,56410340,0,0x0,8
tick,0x7ffe67f8feb4,56426349,0,0x0,8
tick,0x7ffe67f8feb4,56442355,0,0x0,8
tick,0x7ffe67f8feb4,56458368,0,0x0,8
tick,0x7ffe67f8feb4,56473792,0,0x0,8
tick,0x7ffe67f8feb4,56488949,0,0x0,8
tick,0x7ffe67f8feb4,56504922,0,0x0,8
tick,0x7ffe67f8feb4,56520368,0,0x0,8
tick,0x7ffe67f8feb4,56536155,0,0x0,8
tick,0x7ffe67f8feb4,56552150,0,0x0,8
tick,0x7ffe67f8feb4,56567919,0,0x0,8
tick,0x7ffe67f8feb4,56583441,0,0x0,8
tick,0x7ffe67f8feb4,56599228,0,0x0,8
tick,0x7ffe67f8feb4,56614114,0,0x0,8
tick,0x7ffe67f8feb4,56629693,0,0x0,8
tick,0x7ffe67f8feb4,56645241,0,0x0,8
tick,0x7ffe67f8feb4,56660616,0,0x0,8
tick,0x7ffe67f8feb4,56676353,0,0x0,8
tick,0x7ffe67f8feb4,56692094,0,0x0,8
tick,0x7ffe67f8feb4,56707158,0,0x0,8
tick,0x7ffe67f8feb4,56722721,0,0x0,8
tick,0x7ffe67f8feb4,56738332,0,0x0,8
tick,0x7ffe67f8feb4,56753409,0,0x0,8
tick,0x7ffe67f8feb4,56768777,0,0x0,8
tick,0x7ffe67f8feb4,56784389,0,0x0,8
tick,0x7ffe67f8feb4,56800426,0,0x0,8
tick,0x7ffe67f8feb4,56815898,0,0x0,8
tick,0x7ffe67f8feb4,56831307,0,0x0,8
tick,0x7ffe67f8feb4,56847132,0,0x0,8
tick,0x7ffe67f8feb4,56862883,0,0x0,8
tick,0x7ffe67f8feb4,56878082,0,0x0,8
tick,0x7ffe67f8feb4,56893627,0,0x0,8
tick,0x7ffe67f8feb4,56908969,0,0x0,8
tick,0x7ffe67f8feb4,56924333,0,0x0,8
tick,0x7ffe67f8feb4,56939519,0,0x0,8
tick,0x7ffe67f8feb4,56955241,0,0x0,8
tick,0x7ffe67f8feb4,56970408,0,0x0,8
tick,0x7ffe67f8feb4,56986352,0,0x0,8
tick,0x7ffe67f8feb4,57002340,0,0x0,8
tick,0x7ffe67f8feb4,57017629,0,0x0,8
tick,0x7ffe67f8feb4,57033145,0,0x0,8
tick,0x7ffe67f8feb4,57048453,0,0x0,8
tick,0x7ffe67f8feb4,57063910,0,0x0,8
tick,0x7ffe67f8feb4,57079165,0,0x0,8
tick,0x7ffe67f8feb4,57095067,0,0x0,8
tick,0x7ffe67f8feb4,57111417,0,0x0,8
tick,0x7ffe67f8feb4,57127229,0,0x0,8
tick,0x7ffe67f8feb4,57142498,0,0x0,8
tick,0x7ffe67f8feb4,57157351,0,0x0,8
tick,0x7ffe67f8feb4,57173436,0,0x0,8
tick,0x7ffe67f8feb4,57189210,0,0x0,8
tick,0x7ffe67f8feb4,57205117,0,0x0,8
tick,0x7ffe67f8feb4,57220224,0,0x0,8
tick,0x7ffe67f8feb4,57236166,0,0x0,8
tick,0x7ffe67f8feb4,57251738,0,0x0,8
tick,0x7ffe67f8feb4,57268001,0,0x0,8
tick,0x7ffe67f8feb4,57283115,0,0x0,8
tick,0x7ffe67f8feb4,57299217,0,0x0,8
tick,0x7ffe67f8feb4,57314962,0,0x0,8
tick,0x7ffe67f8feb4,57330481,0,0x0,8
tick,0x7ffe67f8feb4,57346512,0,0x0,8
tick,0x7ffe67f8feb4,57362078,0,0x0,8
tick,0x7ffe67f8feb4,57378005,0,0x0,8
tick,0x7ffe67f8feb4,57394006,0,0x0,8
tick,0x7ffe67f8feb4,57410032,0,0x0,8
tick,0x7ffe67f8feb4,57426031,0,0x0,8
tick,0x7ffe67f8feb4,57442060,0,0x0,8
tick,0x7ffe67f8feb4,57458100,0,0x0,8
tick,0x7ffe67f8feb4,57474199,0,0x0,8
tick,0x7ffe67f8feb4,57490233,0,0x0,8
tick,0x7ffe67f8feb4,57505456,0,0x0,8
tick,0x7ffe67f8feb4,57521548,0,0x0,8
tick,0x7ffe67f8feb4,57537557,0,0x0,8
tick,0x7ffe67f8feb4,57552704,0,0x0,8
tick,0x7ffe67f8feb4,57567979,0,0x0,8
tick,0x7ffe67f8feb4,57583463,0,0x0,8
tick,0x7ffe67f8feb4,57599524,0,0x0,8
tick,0x7ffe67f8feb4,57615016,0,0x0,8
tick,0x7ffe67f8feb4,57630743,0,0x0,8
tick,0x7ffe67f8feb4,57646662,0,0x0,8
tick,0x7ffe67f8feb4,57662031,0,0x0,8
tick,0x7ffe67f8feb4,57677938,0,0x0,8
tick,0x7ffe67f8feb4,57693965,0,0x0,8
tick,0x7ffe67f8feb4,57708963,0,0x0,8
tick,0x7ffe67f8feb4,57724745,0,0x0,8
tick,0x7ffe67f8feb4,57740878,0,0x0,8
tick,0x7ffe67f8feb4,57756154,0,0x0,8
tick,0x7ffe67f8feb4,57771397,0,0x0,8
tick,0x7ffe67f8feb4,57787514,0,0x0,8
tick,0x7ffe67f8feb4,57803453,0,0x0,8
tick,0x7ffe67f8feb4,57818866,0,0x0,8
tick,0x7ffe67f8feb4,57834698,0,0x0,8
tick,0x7ffe67f8feb4,57850191,0,0x0,8
tick,0x7ffe67f8feb4,57866217,0,0x0,8
tick,0x7ffe67f8feb4,57881946,0,0x0,8
tick,0x7ffe67f8feb4,57897855,0,0x0,8
tick,0x7ffe67f8feb4,57913675,0,0x0,8
tick,0x7ffe67f8feb4,57928895,0,0x0,8
tick,0x7ffe67f8feb4,57944065,0,0x0,8
tick,0x7ffe67f8feb4,57958800,0,0x0,8
tick,0x7ffe67f8feb4,57974195,0,0x0,8
tick,0x7ffe67f8feb4,57988885,0,0x0,8
tick,0x7ffe67f8feb4,58004363,0,0x0,8
tick,0x7ffe67f8feb4,58020353,0,0x0,8
tick,0x7ffe67f8feb4,58036345,0,0x0,8
tick,0x7ffe67f8feb4,58051834,0,0x0,8
tick,0x7ffe67f8feb4,58066994,0,0x0,8
tick,0x7ffe67f8feb4,58082576,0,0x0,8
tick,0x7ffe67f8feb4,58098027,0,0x0,8
tick,0x7ffe67f8feb4,58113816,0,0x0,8
tick,0x7ffe67f8feb4,58129163,0,0x0,8
tick,0x7ffe67f8feb4,58144678,0,0x0,8
tick,0x7ffe67f8feb4,58160670,0,0x0,8
tick,0x7ffe67f8feb4,58176428,0,0x0,8
tick,0x7ffe67f8feb4,58192044,0,0x0,8
tick,0x7ffe67f8feb4,58208094,0,0x0,8
tick,0x7ffe67f8feb4,58224302,0,0x0,8
tick,0x7ffe67f8feb4,58239867,0,0x0,8
tick,0x7ffe67f8feb4,58255707,0,0x0,8
tick,0x7ffe67f8feb4,58271706,0,0x0,8
tick,0x7ffe67f8feb4,58286997,0,0x0,8
tick,0x7ffe67f8feb4,58302538,0,0x0,8
tick,0x7ffe67f8feb4,58318234,0,0x0,8
tick,0x7ffe67f8feb4,58334022,0,0x0,8
tick,0x7ffe67f8feb4,58349752,0,0x0,8
tick,0x7ffe67f8feb4,58365815,0,0x0,8
tick,0x7ffe67f8feb4,58381852,0,0x0,8
tick,0x7ffe67f8feb4,58396799,0,0x0,8
tick,0x7ffe67f8feb4,58412815,0,0x0,8
tick,0x7ffe67f8feb4,58428948,0,0x0,8
tick,0x7ffe67f8feb4,58444882,0,0x0,8
tick,0x7ffe67f8feb4,58460566,0,0x0,8
tick,0x7ffe67f8feb4,58475751,0,0x0,8
tick,0x7ffe67f8feb4,58491424,0,0x0,8
tick,0x7ffe67f8feb4,58507165,0,0x0,8
tick,0x7ffe67f8feb4,58522352,0,0x0,8
tick,0x7ffe67f8feb4,58537225,0,0x0,8
tick,0x7ffe67f8feb4,58552663,0,0x0,8
tick,0x7ffe67f8feb4,58567721,0,0x0,8
tick,0x7ffe67f8feb4,58583643,0,0x0,8
tick,0x7ffe67f8feb4,58599070,0,0x0,8
tick,0x7ffe67f8feb4,58614755,0,0x0,8
tick,0x7ffe67f8feb4,58630488,0,0x0,8
tick,0x7ffe67f8feb4,58646314,0,0x0,8
tick,0x7ffe67f8feb4,58661607,0,0x0,8
tick,0x7ffe67f8feb4,58677001,0,0x0,8
tick,0x7ffe67f8feb4,58692794,0,0x0,8
tick,0x7ffe67f8feb4,58707745,0,0x0,8
tick,0x7ffe67f8feb4,58723123,0,0x0,8
tick,0x7ffe67f8feb4,58739177,0,0x0,8
tick,0x7ffe67f8feb4,58755144,0,0x0,8
tick,0x7ffe67f8feb4,58771166,0,0x0,8
tick,0x7ffe67f8feb4,58786417,0,0x0,8
tick,0x7ffe67f8feb4,58802242,0,0x0,8
tick,0x7ffe67f8feb4,58817696,0,0x0,8
tick,0x7ffe67f8feb4,58832886,0,0x0,8
tick,0x7ffe67f8feb4,58848471,0,0x0,8
tick,0x7ffe67f8feb4,58864016,0,0x0,8
tick,0x7ffe67f8feb4,58879068,0,0x0,8
tick,0x7ffe67f8feb4,58895195,0,0x0,8
tick,0x7ffe67f8feb4,58910360,0,0x0,8
tick,0x7ffe67f8feb4,58925959,0,0x0,8
tick,0x7ffe67f8feb4,58940892,0,0x0,8
tick,0x7ffe67f8feb4,58956332,0,0x0,8
tick,0x7ffe67f8feb4,58972327,0,0x0,8
tick,0x7ffe67f8feb4,58987666,0,0x0,8
tick,0x7ffe67f8feb4,59003410,0,0x0,8
tick,0x7ffe67f8feb4,59018651,0,0x0,8
tick,0x7ffe67f8feb4,59034111,0,0x0,8
tick,0x7ffe67f8feb4,59049924,0,0x0,8
tick,0x7ffe67f8feb4,59066180,0,0x0,8
tick,0x7ffe67f8feb4,59081903,0,0x0,8
tick,0x7ffe67f8feb4,59097142,0,0x0,8
tick,0x7ffe67f8feb4,59113393,0,0x0,8
tick,0x7ffe67f8feb4,59128624,0,0x0,8
tick,0x7ffe67f8feb4,59144845,0,0x0,8
tick,0x7ffe67f8feb4,59160109,0,0x0,8
tick,0x7ffe67f8feb4,59176174,0,0x0,8
tick,0x7ffe67f8feb4,59191765,0,0x0,8
tick,0x7ffe67f8feb4,59206806,0,0x0,8
tick,0x7ffe67f8feb4,59222536,0,0x0,8
tick,0x7ffe67f8feb4,59238616,0,0x0,8
tick,0x7ffe67f8feb4,59254673,0,0x0,8
tick,0x7ffe67f8feb4,59269999,0,0x0,8
tick,0x7ffe67f8feb4,59285731,0,0x0,8
tick,0x7ffe67f8feb4,59301485,0,0x0,8
tick,0x7ffe67f8feb4,59317731,0,0x0,8
tick,0x7ffe67f8feb4,59333184,0,0x0,8
tick,0x7ffe67f8feb4,59348506,0,0x0,8
tick,0x7ffe67f8feb4,59363504,0,0x0,8
tick,0x7ffe67f8feb4,59379114,0,0x0,8
tick,0x7ffe67f8feb4,59394701,0,0x0,8
tick,0x7ffe67f8feb4,59409680,0,0x0,8
tick,0x7ffe67f8feb4,59425662,0,0x0,8
tick,0x7ffe67f8feb4,59440655,0,0x0,8
tick,0x7ffe67f8feb4,59455686,0,0x0,8
tick,0x7ffe67f8feb4,59471678,0,0x0,8
tick,0x7ffe67f8feb4,59487713,0,0x0,8
tick,0x7ffe67f8feb4,59503695,0,0x0,8
tick,0x7ffe67f8feb4,59519700,0,0x0,8
tick,0x7ffe67f8feb4,59534704,0,0x0,8
tick,0x7ffe67f8feb4,59550694,0,0x0,8
tick,0x7ffe67f8feb4,59566693,0,0x0,8
tick,0x7ffe67f8feb4,59582701,0,0x0,8
tick,0x7ffe67f8feb4,59598736,0,0x0,8
tick,0x7ffe67f8feb4,59614707,0,0x0,8
tick,0x7ffe67f8feb4,59630718,0,0x0,8
tick,0x7ffe67f8feb4,59645729,0,0x0,8
tick,0x7ffe67f8feb4,59660945,0,0x0,8
tick,0x7ffe67f8feb4,59676333,0,0x0,8
tick,0x7ffe67f8feb4,59692026,0,0x0,8
tick,0x7ffe67f8feb4,59708072,0,0x0,8
tick,0x7ffe67f8feb4,59723384,0,0x0,8
tick,0x7ffe67f8feb4,59739031,0,0x0,8
tick,0x7ffe67f8feb4,59754712,0,0x0,8
tick,0x7ffe67f8feb4,59770155,0,0x0,8
tick,0x7ffe67f8feb4,59785565,0,0x0,8
tick,0x7ffe67f8feb4,59801402,0,0x0,8
tick,0x7ffe67f8feb4,59816692,0,0x0,8
tick,0x7ffe67f8feb4,59832289,0,0x0,8
tick,0x7ffe67f8feb4,59848269,0,0x0,8
tick,0x7ffe67f8feb4,59863755,0,0x0,8
tick,0x7ffe67f8feb4,59879448,0,0x0,8
tick,0x7ffe67f8feb4,59894995,0,0x0,8
tick,0x7ffe67f8feb4,59910099,0,0x0,8
tick,0x7ffe67f8feb4,59926038,0,0x0,8
tick,0x7ffe67f8feb4,59941729,0,0x0,8
tick,0x7ffe67f8feb4,59956923,0,0x0,8
tick,0x7ffe67f8feb4,59972104,0,0x0,8
tick,0x7ffe67f8feb4,59988070,0,0x0,8
tick,0x7ffe67f8feb4,60003778,0,0x0,8
tick,0x7ffe67f8feb4,60019629,0,0x0,8
tick,0x7ffe67f8feb4,60035428,0,0x0,8
tick,0x7ffe67f8feb4,60051065,0,0x0,8
tick,0x7ffe67f8feb4,60067337,0,0x0,8
tick,0x7ffe67f8feb4,60082837,0,0x0,8
tick,0x7ffe67f8feb4,60098003,0,0x0,8
tick,0x7ffe67f8feb4,60114032,0,0x0,8
tick,0x7ffe67f8feb4,60129482,0,0x0,8
tick,0x7ffe67f8feb4,60144922,0,0x0,8
tick,0x7ffe67f8feb4,60160142,0,0x0,8
tick,0x7ffe67f8feb4,60176057,0,0x0,8
tick,0x7ffe67f8feb4,60192012,0,0x0,8
tick,0x7ffe67f8feb4,60206749,0,0x0,8
tick,0x7ffe67f8feb4,60222349,0,0x0,8
tick,0x7ffe67f8feb4,60238629,0,0x0,8
tick,0x7ffe67f8feb4,60254324,0,0x0,8
tick,0x7ffe67f8feb4,60270247,0,0x0,8
tick,0x7ffe67f8feb4,60286397,0,0x0,8
tick,0x7ffe67f8feb4,60302663,0,0x0,8
tick,0x7ffe67f8feb4,60318661,0,0x0,8
tick,0x7ffe67f8feb4,60334130,0,0x0,8
tick,0x7ffe67f8feb4,60349459,0,0x0,8
tick,0x7ffe67f8feb4,60365474,0,0x0,8
tick,0x7ffe67f8feb4,60381020,0,0x0,8
tick,0x7ffe67f8feb4,60397210,0,0x0,8
tick,0x7ffe67f8feb4,60413167,0,0x0,8
tick,0x7ffe67f8feb4,60428999,0,0x0,8
tick,0x7ffe67f8feb4,60444893,0,0x0,8
tick,0x7ffe67f8feb4,60460072,0,0x0,8
tick,0x7ffe67f8feb4,60475998,0,0x0,8
tick,0x7ffe67f8feb4,60491486,0,0x0,8
tick,0x7ffe67f8feb4,60507124,0,0x0,8
tick,0x7ffe67f8feb4,60523194,0,0x0,8
tick,0x7ffe67f8feb4,60539164,0,0x0,8
tick,0x7ffe67f8feb4,60555161,0,0x0,8
tick,0x7ffe67f8feb4,60570642,0,0x0,8
tick,0x7ffe67f8feb4,60586732,0,0x0,8
tick,0x7ffe67f8feb4,60602098,0,0x0,8
tick,0x7ffe67f8feb4,60617825,0,0x0,8
tick,0x7ffe67f8feb4,60632956,0,0x0,8
tick,0x7ffe67f8feb4,60649059,0,0x0,8
tick,0x7ffe67f8feb4,60664214,0,0x0,8
tick,0x7ffe67f8feb4,60679846,0,0x0,8
tick,0x7ffe67f8feb4,60695826,0,0x0,8
tick,0x7ffe67f8feb4,60711322,0,0x0,8
tick,0x7ffe67f8feb4,60726644,0,0x0,8
tick,0x7ffe67f8feb4,60741942,0,0x0,8
tick,0x7ffe67f8feb4,60757018,0,0x0,8
tick,0x7ffe67f8feb4,60773042,0,0x0,8
tick,0x7ffe67f8feb4,60788042,0,0x0,8
tick,0x7ffe67f8feb4,60803689,0,0x0,8
tick,0x7ffe67f8feb4,60819115,0,0x0,8
tick,0x7ffe67f8feb4,60835387,0,0x0,8
tick,0x7ffe67f8feb4,60850476,0,0x0,8
tick,0x7ffe67f8feb4,60865803,0,0x0,8
tick,0x7ffe67f8feb4,60881480,0,0x0,8
tick,0x7ffe67f8feb4,60896940,0,0x0,8
tick,0x7ffe67f8feb4,60912495,0,0x0,8
tick,0x7ffe67f8feb4,60927931,0,0x0,8
tick,0x7ffe67f8feb4,60943893,0,0x0,8
tick,0x7ffe67f8feb4,60959343,0,0x0,8
tick,0x7ffe67f8feb4,60975326,0,0x0,8
tick,0x7ffe67f8feb4,60991343,0,0x0,8
tick,0x7ffe67f8feb4,61006588,0,0x0,8
tick,0x7ffe67f8feb4,61022629,0,0x0,8
tick,0x7ffe67f8feb4,61037924,0,0x0,8
tick,0x7ffe67f8feb4,61053159,0,0x0,8
tick,0x7ffe67f8feb4,61068432,0,0x0,8
tick,0x7ffe67f8feb4,61084212,0,0x0,8
tick,0x7ffe67f8feb4,61099803,0,0x0,8
tick,0x7ffe67f8feb4,61114984,0,0x0,8
tick,0x7ffe67f8feb4,61130240,0,0x0,8
tick,0x7ffe67f8feb4,61145596,0,0x0,8
tick,0x7ffe67f8feb4,61160548,0,0x0,8
tick,0x7ffe67f8feb4,61175956,0,0x0,8
tick,0x7ffe67f8feb4,61191803,0,0x0,8
tick,0x7ffe67f8feb4,61207171,0,0x0,8
tick,0x7ffe67f8feb4,61223264,0,0x0,8
tick,0x7ffe67f8feb4,61239078,0,0x0,8
tick,0x7ffe67f8feb4,61254794,0,0x0,8
tick,0x7ffe67f8feb4,61270634,0,0x0,8
tick,0x7ffe67f8feb4,61286841,0,0x0,8
tick,0x7ffe67f8feb4,61302396,0,0x0,8
tick,0x7ffe67f8feb4,61317664,0,0x0,8
tick,0x7ffe67f8feb4,61333092,0,0x0,8
tick,0x7ffe67f8feb4,61348458,0,0x0,8
tick,0x7ffe67f8feb4,61364458,0,0x0,8
tick,0x7ffe67f8feb4,61379945,0,0x0,8
tick,0x7ffe67f8feb4,61395022,0,0x0,8
tick,0x7ffe67f8feb4,61410781,0,0x0,8
tick,0x7ffe67f8feb4,61426812,0,0x0,8
tick,0x7ffe67f8feb4,61442794,0,0x0,8
tick,0x7ffe67f8feb4,61458808,0,0x0,8
tick,0x7ffe67f8feb4,61474004,0,0x0,8
tick,0x7ffe67f8feb4,61490022,0,0x0,8
tick,0x7ffe67f8feb4,61505615,0,0x0,8
tick,0x7ffe67f8feb4,61520948,0,0x0,8
tick,0x7ffe67f8feb4,61537111,0,0x0,8
tick,0x7ffe67f8feb4,61552709,0,0x0,8
tick,0x7ffe67f8feb4,61567989,0,0x0,8
tick,0x7ffe67f8feb4,61583481,0,0x0,8
tick,0x7ffe67f8feb4,61598648,0,0x0,8
tick,0x7ffe67f8feb4,61614123,0,0x0,8
tick,0x7ffe67f8feb4,61629453,0,0x0,8
tick,0x7ffe67f8feb4,61644475,0,0x0,8
tick,0x7ffe67f8feb4,61660578,0,0x0,8
tick,0x7ffe67f8feb4,61675806,0,0x0,8
tick,0x7ffe67f8feb4,61691643,0,0x0,8
tick,0x7ffe67f8feb4,61707171,0,0x0,8
tick,0x7ffe67f8feb4,61722668,0,0x0,8
tick,0x7ffe67f8feb4,61738895,0,0x0,8
tick,0x7ffe67f8feb4,61754518,0,0x0,8
tick,0x7ffe67f8feb4,61770143,0,0x0,8
tick,0x7ffe67f8feb4,61786006,0,0x0,8
tick,0x7ffe67f8feb4,61801385,0,0x0,8
tick,0x7ffe67f8feb4,61816696,0,0x0,8
tick,0x7ffe67f8feb4,61832599,0,0x0,8
tick,0x7ffe67f8feb4,61848757,0,0x0,8
tick,0x7ffe67f8feb4,61864113,0,0x0,8
tick,0x7ffe67f8feb4,61879448,0,0x0,8
tick,0x7ffe67f8feb4,61894938,0,0x0,8
tick,0x7ffe67f8feb4,61910526,0,0x0,8
tick,0x7ffe67f8feb4,61926566,0,0x0,8
tick,0x7ffe67f8feb4,61942164,0,0x0,8
tick,0x7ffe67f8feb4,61958087,0,0x0,8
tick,0x7ffe67f8feb4,61974051,0,0x0,8
tick,0x7ffe67f8feb4,61989463,0,0x0,8
tick,0x7ffe67f8feb4,62004689,0,0x0,8
tick,0x7ffe67f8feb4,62020113,0,0x0,8
tick,0x7ffe67f8feb4,62035640,0,0x0,8
tick,0x7ffe67f8feb4,62051294,0,0x0,8
tick,0x7ffe67f8feb4,62067401,0,0x0,8
tick,0x7ffe67f8feb4,62082697,0,0x0,8
tick,0x7ffe67f8feb4,62097706,0,0x0,8
tick,0x7ffe67f8feb4,62114179,0,0x0,8
tick,0x7ffe67f8feb4,62129565,0,0x0,8
tick,0x7ffe67f8feb4,62145555,0,0x0,8
tick,0x7ffe67f8feb4,62160553,0,0x0,8
tick,0x7ffe67f8feb4,62175402,0,0x0,8
tick,0x7ffe67f8feb4,62191216,0,0x0,8
tick,0x7ffe67f8feb4,62206517,0,0x0,8
tick,0x7ffe67f8feb4,62222202,0,0x0,8
tick,0x7ffe67f8feb4,62237632,0,0x0,8
tick,0x7ffe67f8feb4,62253527,0,0x0,8
tick,0x7ffe67f8feb4,62268668,0,0x0,8
tick,0x7ffe67f8feb4,62284199,0,0x0,8
tick,0x7ffe67f8feb4,62299521,0,0x0,8
tick,0x7ffe67f8feb4,62315259,0,0x0,8
tick,0x7ffe67f8feb4,62331407,0,0x0,8
tick,0x7ffe67f8feb4,62347068,0,0x0,8
tick,0x7ffe67f8feb4,62362653,0,0x0,8
tick,0x7ffe67f8feb4,62378267,0,0x0,8
tick,0x7ffe67f8feb4,62394228,0,0x0,8
tick,0x7ffe67f8feb4,62409743,0,0x0,8
tick,0x7ffe67f8feb4,62425794,0,0x0,8
tick,0x7ffe67f8feb4,62441734,0,0x0,8
tick,0x7ffe67f8feb4,62457704,0,0x0,8
tick,0x7ffe67f8feb4,62472712,0,0x0,8
tick,0x7ffe67f8feb4,62488753,0,0x0,8
tick,0x7ffe67f8feb4,62503787,0,0x0,8
tick,0x7ffe67f8feb4,62519819,0,0x0,8
tick,0x7ffe67f8feb4,62535888,0,0x0,8
tick,0x7ffe67f8feb4,62551052,0,0x0,8
tick,0x7ffe67f8feb4,62565966,0,0x0,8
tick,0x7ffe67f8feb4,62581141,0,0x0,8
tick,0x7ffe67f8feb4,62597010,0,0x0,8
tick,0x7ffe67f8feb4,62612632,0,0x0,8
tick,0x7ffe67f8feb4,62627936,0,0x0,8
tick,0x7ffe67f8feb4,62643290,0,0x0,8
tick,0x7ffe67f8feb4,62659003,0,0x0,8
tick,0x7ffe67f8feb4,62674356,0,0x0,8
tick,0x7ffe67f8feb4,62689923,0,0x0,8
tick,0x7ffe67f8feb4,62705991,0,0x0,8
tick,0x7ffe67f8feb4,62721699,0,0x0,8
tick,0x7ffe67f8feb4,62736917,0,0x0,8
tick,0x7ffe67f8feb4,62752182,0,0x0,8
tick,0x7ffe67f8feb4,62767942,0,0x0,8
tick,0x7ffe67f8feb4,62783583,0,0x0,8
tick,0x7ffe67f8feb4,62799298,0,0x0,8
tick,0x7ffe67f8feb4,62815702,0,0x0,8
tick,0x7ffe67f8feb4,62831452,0,0x0,8
tick,0x7ffe67f8feb4,62847638,0,0x0,8
tick,0x7ffe67f8feb4,62863232,0,0x0,8
tick,0x7ffe67f8feb4,62878489,0,0x0,8
tick,0x7ffe67f8feb4,62894101,0,0x0,8
tick,0x7ffe67f8feb4,62910023,0,0x0,8
tick,0x7ffe67f8feb4,62925998,0,0x0,8
tick,0x7ffe67f8feb4,62942164,0,0x0,8
tick,0x7ffe67f8feb4,62957461,0,0x0,8
tick,0x7ffe67f8feb4,62972835,0,0x0,8
tick,0x7ffe67f8feb4,62989185,0,0x0,8
tick,0x7ffe67f8feb4,63005243,0,0x0,8
tick,0x7ffe67f8feb4,63020037,0,0x0,8
tick,0x7ffe67f8feb4,63035713,0,0x0,8
tick,0x7ffe67f8feb4,63051193,0,0x0,8
tick,0x7ffe67f8feb4,63066616,0,0x0,8
tick,0x7ffe67f8feb4,63081646,0,0x0,8
tick,0x7ffe67f8feb4,63097451,0,0x0,8
tick,0x7ffe67f8feb4,63112946,0,0x0,8
tick,0x7ffe67f8feb4,63128783,0,0x0,8
tick,0x7ffe67f8feb4,63144239,0,0x0,8
tick,0x7ffe67f8feb4,63159998,0,0x0,8
tick,0x7ffe67f8feb4,63176027,0,0x0,8
tick,0x7ffe67f8feb4,63191591,0,0x0,8
tick,0x7ffe67f8feb4,63207219,0,0x0,8
tick,0x7ffe67f8feb4,63222688,0,0x0,8
tick,0x7ffe67f8feb4,63238237,0,0x0,8
tick,0x7ffe67f8feb4,63254089,0,0x0,8
tick,0x7ffe67f8feb4,63269890,0,0x0,8
tick,0x7ffe67f8feb4,63285847,0,0x0,8
tick,0x7ffe67f8feb4,63301701,0,0x0,8
tick,0x7ffe67f8feb4,63316880,0,0x0,8
tick,0x7ffe67f8feb4,63332225,0,0x0,8
tick,0x7ffe67f8feb4,63347425,0,0x0,8
tick,0x7ffe67f8feb4,63362848,0,0x0,8
tick,0x7ffe67f8feb4,63378060,0,0x0,8
tick,0x7ffe67f8feb4,63393089,0,0x0,8
tick,0x7ffe67f8feb4,63409115,0,0x0,8
tick,0x7ffe67f8feb4,63425600,0,0x0,8
tick,0x7ffe67f8feb4,63441000,0,0x0,8
tick,0x7ffe67f8feb4,63456734,0,0x0,8
tick,0x7ffe67f8feb4,63472733,0,0x0,8
tick,0x7ffe67f8feb4,63487743,0,0x0,8
tick,0x7ffe67f8feb4,63503758,0,0x0,8
tick,0x7ffe67f8feb4,63518955,0,0x0,8
tick,0x7ffe67f8feb4,63534978,0,0x0,8
tick,0x7ffe67f8feb4,63550283,0,0x0,8
tick,0x7ffe67f8feb4,63566386,0,0x0,8
tick,0x7ffe67f8feb4,63581459,0,0x0,8
tick,0x7ffe67f8feb4,63596708,0,0x0,8
tick,0x7ffe67f8feb4,63612167,0,0x0,8
tick,0x7ffe67f8feb4,63627445,0,0x0,8
tick,0x7ffe67f8feb4,63643193,0,0x0,8
tick,0x7ffe67f8feb4,63659010,0,0x0,8
tick,0x7ffe67f8feb4,63674307,0,0x0,8
tick,0x7ffe67f8feb4,63689597,0,0x0,8
tick,0x7ffe67f8feb4,63705037,0,0x0,8
tick,0x7ffe67f8feb4,63720685,0,0x0,8
tick,0x7ffe67f8feb4,63736196,0,0x0,8
tick,0x7ffe67f8feb4,63751798,0,0x0,8
tick,0x7ffe67f8feb4,63768188,0,0x0,8
tick,0x7ffe67f8feb4,63783842,0,0x0,8
tick,0x7ffe67f8feb4,63799372,0,0x0,8
tick,0x7ffe67f8feb4,63814904,0,0x0,8
tick,0x7ffe67f8feb4,63830873,0,0x0,8
tick,0x7ffe67f8feb4,63845643,0,0x0,8
tick,0x7ffe67f8feb4,63860935,0,0x0,8
tick,0x7ffe67f8feb4,63876917,0,0x0,8
tick,0x7ffe67f8feb4,63892925,0,0x0,8
tick,0x7ffe67f8feb4,63908129,0,0x0,8
tick,0x7ffe67f8feb4,63923945,0,0x0,8
tick,0x7ffe67f8feb4,63939639,0,0x0,8
tick,0x7ffe67f8feb4,63955234,0,0x0,8
tick,0x7ffe67f8feb4,63971535,0,0x0,8
tick,0x7ffe67f8feb4,63986743,0,0x0,8
tick,0x7ffe67f8feb4,64002235,0,0x0,8
tick,0x7ffe67f8feb4,64018228,0,0x0,8
tick,0x7ffe67f8feb4,64034026,0,0x0,8
tick,0x7ffe67f8feb4,64050160,0,0x0,8
tick,0x7ffe67f8feb4,64066236,0,0x0,8
tick,0x7ffe67f8feb4,64081511,0,0x0,8
tick,0x7ffe67f8feb4,64096847,0,0x0,8
tick,0x7ffe67f8feb4,64112805,0,0x0,8
tick,0x7ffe67f8feb4,64127985,0,0x0,8
tick,0x7ffe67f8feb4,64143880,0,0x0,8
tick,0x7ffe67f8feb4,64159718,0,0x0,8
tick,0x7ffe67f8feb4,64174969,0,0x0,8
tick,0x7ffe67f8feb4,64191058,0,0x0,8
tick,0x7ffe67f8feb4,64205854,0,0x0,8
tick,0x7ffe67f8feb4,64221419,0,0x0,8
tick,0x7ffe67f8feb4,64237716,0,0x0,8
tick,0x7ffe67f8feb4,64253425,0,0x0,8
tick,0x7ffe67f8feb4,64268865,0,0x0,8
tick,0x7ffe67f8feb4,64284483,0,0x0,8
tick,0x7ffe67f8feb4,64300052,0,0x0,8
tick,0x7ffe67f8feb4,64316101,0,0x0,8
tick,0x7ffe67f8feb4,64331387,0,0x0,8
tick,0x7ffe67f8feb4,64346850,0,0x0,8
tick,0x7ffe67f8feb4,64362808,0,0x0,8
tick,0x7ffe67f8feb4,64379475,0,0x0,8
tick,0x7ffe67f8feb4,64394428,0,0x0,8
tick,0x7ffe67f8feb4,64409466,0,0x0,8
tick,0x7ffe67f8feb4,64424819,0,0x0,8
tick,0x7ffe67f8feb4,64440305,0,0x0,8
tick,0x7ffe67f8feb4,64455340,0,0x0,8
tick,0x7ffe67f8feb4,64471312,0,0x0,8
tick,0x7ffe67f8feb4,64487294,0,0x0,8
tick,0x7ffe67f8feb4,64503295,0,0x0,8
tick,0x7ffe67f8feb4,64519333,0,0x0,8
tick,0x7ffe67f8feb4,64535322,0,0x0,8
tick,0x7ffe67f8feb4,64551347,0,0x0,8
tick,0x7ffe67f8feb4,64566533,0,0x0,8
tick,0x7ffe67f8feb4,64582573,0,0x0,8
tick,0x7ffe67f8feb4,64598364,0,0x0,8
tick,0x7ffe67f8feb4,64613616,0,0x0,8
tick,0x7ffe67f8feb4,64629041,0,0x0,8
tick,0x7ffe67f8feb4,64645053,0,0x0,8
tick,0x7ffe67f8feb4,64660657,0,0x0,8
tick,0x7ffe67f8feb4,64676828,0,0x0,8
tick,0x7ffe67f8feb4,64692327,0,0x0,8
tick,0x7ffe67f8feb4,64707314,0,0x0,8
tick,0x7ffe67f8feb4,64722858,0,0x0,8
tick,0x7ffe67f8feb4,64738113,0,0x0,8
tick,0x7ffe67f8feb4,64753644,0,0x0,8
tick,0x7ffe67f8feb4,64769730,0,0x0,8
tick,0x7ffe67f8feb4,64784962,0,0x0,8
tick,0x7ffe67f8feb4,64800425,0,0x0,8
tick,0x7ffe67f8feb4,64815522,0,0x0,8
tick,0x7ffe67f8feb4,64830691,0,0x0,8
tick,0x7ffe67f8feb4,64846495,0,0x0,8
tick,0x7ffe67f8feb4,64862085,0,0x0,8
tick,0x7ffe67f8feb4,64877652,0,0x0,8
tick,0x7ffe67f8feb4,64893624,0,0x0,8
tick,0x7ffe67f8feb4,64908945,0,0x0,8
tick,0x7ffe67f8feb4,64924973,0,0x0,8
tick,0x7ffe67f8feb4,64940508,0,0x0,8
tick,0x7ffe67f8feb4,64956060,0,0x0,8
tick,0x7ffe67f8feb4,64971874,0,0x0,8
tick,0x7ffe67f8feb4,64987105,0,0x0,8
tick,0x7ffe67f8feb4,65002595,0,0x0,8
tick,0x7ffe67f8feb4,65017600,0,0x0,8
tick,0x7ffe67f8feb4,65033573,0,0x0,8
tick,0x7ffe67f8feb4,65049832,0,0x0,8
tick,0x7ffe67f8feb4,65065630,0,0x0,8
tick,0x7ffe67f8feb4,65081004,0,0x0,8
tick,0x7ffe67f8feb4,65096879,0,0x0,8
tick,0x7ffe67f8feb4,65112495,0,0x0,8
tick,0x7ffe67f8feb4,65128301,0,0x0,8
tick,0x7ffe67f8feb4,65143449,0,0x0,8
tick,0x7ffe67f8feb4,65159051,0,0x0,8
tick,0x7ffe67f8feb4,65174163,0,0x0,8
tick,0x7ffe67f8feb4,65189534,0,0x0,8
tick,0x7ffe67f8feb4,65204966,0,0x0,8
tick,0x7ffe67f8feb4,65220462,0,0x0,8
tick,0x7ffe67f8feb4,65235468,0,0x0,8
tick,0x7ffe67f8feb4,65251091,0,0x0,8
tick,0x7ffe67f8feb4,65266524,0,0x0,8
tick,0x7ffe67f8feb4,65281464,0,0x0,8
tick,0x7ffe67f8feb4,65296788,0,0x0,8
tick,0x7ffe67f8feb4,65312341,0,0x0,8
tick,0x7ffe67f8feb4,65328312,0,0x0,8
tick,0x7ffe67f8feb4,65344704,0,0x0,8
tick,0x7ffe67f8feb4,65360672,0,0x0,8
tick,0x7ffe67f8feb4,65376414,0,0x0,8
tick,0x7ffe67f8feb4,65392155,0,0x0,8
tick,0x7ffe67f8feb4,65407940,0,0x0,8
tick,0x7ffe67f8feb4,65424340,0,0x0,8
tick,0x7ffe67f8feb4,65440596,0,0x0,8
tick,0x7ffe67f8feb4,65455717,0,0x0,8
tick,0x7ffe67f8feb4,65471704,0,0x0,8
tick,0x7ffe67f8feb4,65487491,0,0x0,8
tick,0x7ffe67f8feb4,65503471,0,0x0,8
tick,0x7ffe67f8feb4,65519504,0,0x0,8
tick,0x7ffe67f8feb4,65534546,0,0x0,8
tick,0x7ffe67f8feb4,65550067,0,0x0,8
tick,0x7ffe67f8feb4,65566083,0,0x0,8
tick,0x7ffe67f8feb4,65581052,0,0x0,8
tick,0x7ffe67f8feb4,65597067,0,0x0,8
tick,0x7ffe67f8feb4,65612997,0,0x0,8
tick,0x7ffe67f8feb4,65629036,0,0x0,8
tick,0x7ffe67f8feb4,65645130,0,0x0,8
tick,0x7ffe67f8feb4,65661024,0,0x0,8
tick,0x7ffe67f8feb4,65677037,0,0x0,8
tick,0x7ffe67f8feb4,65692745,0,0x0,8
tick,0x7ffe67f8feb4,65708141,0,0x0,8
tick,0x7ffe67f8feb4,65723492,0,0x0,8
tick,0x7ffe67f8feb4,65739142,0,0x0,8
tick,0x7ffe67f8feb4,65754397,0,0x0,8
tick,0x7ffe67f8feb4,65769820,0,0x0,8
tick,0x7ffe67f8feb4,65784893,0,0x0,8
tick,0x7ffe67f8feb4,65801083,0,0x0,8
tick,0x7ffe67f8feb4,65816940,0,0x0,8
tick,0x7ffe67f8feb4,65832702,0,0x0,8
tick,0x7ffe67f8feb4,65848112,0,0x0,8
tick,0x7ffe67f8feb4,65863816,0,0x0,8
tick,0x7ffe67f8feb4,65879643,0,0x0,8
tick,0x7ffe67f8feb4,65894980,0,0x0,8
tick,0x7ffe67f8feb4,65910522,0,0x0,8
tick,0x7ffe67f8feb4,65925953,0,0x0,8
tick,0x7ffe67f8feb4,65941973,0,0x0,8
tick,0x7ffe67f8feb4,65958107,0,0x0,8
tick,0x7ffe67f8feb4,65973814,0,0x0,8
tick,0x7ffe67f8feb4,65989001,0,0x0,8
tick,0x7ffe67f8feb4,66004695,0,0x0,8
tick,0x7ffe67f8feb4,66020399,0,0x0,8
tick,0x7ffe67f8feb4,66036176,0,0x0,8
tick,0x7ffe67f8feb4,66051605,0,0x0,8
tick,0x7ffe67f8feb4,66067139,0,0x0,8
tick,0x7ffe67f8feb4,66083160,0,0x0,8
tick,0x7ffe67f8feb4,66098527,0,0x0,8
tick,0x7ffe67f8feb4,66114004,0,0x0,8
tick,0x7ffe67f8feb4,66129352,0,0x0,8
tick,0x7ffe67f8feb4,66145334,0,0x0,8
tick,0x7ffe67f8feb4,66160526,0,0x0,8
tick,0x7ffe67f8feb4,66176608,0,0x0,8
tick,0x7ffe67f8feb4,66191650,0,0x0,8
tick,0x7ffe67f8feb4,66206895,0,0x0,8
tick,0x7ffe67f8feb4,66222324,0,0x0,8
tick,0x7ffe67f8feb4,66237943,0,0x0,8
tick,0x7ffe67f8feb4,66253229,0,0x0,8
tick,0x7ffe67f8feb4,66268625,0,0x0,8
tick,0x7ffe67f8feb4,66285017,0,0x0,8
tick,0x7ffe67f8feb4,66300234,0,0x0,8
tick,0x7ffe67f8feb4,66316135,0,0x0,8
tick,0x7ffe67f8feb4,66331768,0,0x0,8
tick,0x7ffe67f8feb4,66347290,0,0x0,8
tick,0x7ffe67f8feb4,66363265,0,0x0,8
tick,0x7ffe67f8feb4,66379378,0,0x0,8
tick,0x7ffe67f8feb4,66394799,0,0x0,8
tick,0x7ffe67f8feb4,66410003,0,0x0,8
tick,0x7ffe67f8feb4,66425197,0,0x0,8
tick,0x7ffe67f8feb4,66441264,0,0x0,8
tick,0x7ffe67f8feb4,66456363,0,0x0,8
tick,0x7ffe67f8feb4,66472362,0,0x0,8
tick,0x7ffe67f8feb4,66488118,0,0x0,8
tick,0x7ffe67f8feb4,66504107,0,0x0,8
tick,0x7ffe67f8feb4,66520266,0,0x0,8
tick,0x7ffe67f8feb4,66535179,0,0x0,8
tick,0x7ffe67f8feb4,66550343,0,0x0,8
tick,0x7ffe67f8feb4,66565547,0,0x0,8
tick,0x7ffe67f8feb4,66581239,0,0x0,8
tick,0x7ffe67f8feb4,66596501,0,0x0,8
tick,0x7ffe67f8feb4,66612526,0,0x0,8
tick,0x7ffe67f8feb4,66627772,0,0x0,8
tick,0x7ffe67f8feb4,66643263,0,0x0,8
tick,0x7ffe67f8feb4,66658367,0,0x0,8
tick,0x7ffe67f8feb4,66673778,0,0x0,8
tick,0x7ffe67f8feb4,66689052,0,0x0,8
tick,0x7ffe67f8feb4,66704212,0,0x0,8
tick,0x7ffe67f8feb4,66719681,0,0x0,8
tick,0x7ffe67f8feb4,66735667,0,0x0,8
tick,0x7ffe67f8feb4,66750748,0,0x0,8
tick,0x7ffe67f8feb4,66767070,0,0x0,8
tick,0x7ffe67f8feb4,66782778,0,0x0,8
tick,0x7ffe67f8feb4,66798165,0,0x0,8
tick,0x7ffe67f8feb4,66813747,0,0x0,8
tick,0x7ffe67f8feb4,66829164,0,0x0,8
tick,0x7ffe67f8feb4,66845229,0,0x0,8
tick,0x7ffe67f8feb4,66861051,0,0x0,8
tick,0x7ffe67f8feb4,66876815,0,0x0,8
tick,0x7ffe67f8feb4,66892417,0,0x0,8
tick,0x7ffe67f8feb4,66908492,0,0x0,8
tick,0x7ffe67f8feb4,66924028,0,0x0,8
tick,0x7ffe67f8feb4,66939136,0,0x0,8
tick,0x7ffe67f8feb4,66955420,0,0x0,8
tick,0x7ffe67f8feb4,66971286,0,0x0,8
tick,0x7ffe67f8feb4,66987467,0,0x0,8
tick,0x7ffe67f8feb4,67003369,0,0x0,8
tick,0x7ffe67f8feb4,67019586,0,0x0,8
tick,0x7ffe67f8feb4,67035563,0,0x0,8
tick,0x7ffe67f8feb4,67051005,0,0x0,8
tick,0x7ffe67f8feb4,67066927,0,0x0,8
tick,0x7ffe67f8feb4,67082145,0,0x0,8
tick,0x7ffe67f8feb4,67098024,0,0x0,8
tick,0x7ffe67f8feb4,67113762,0,0x0,8
tick,0x7ffe67f8feb4,67129540,0,0x0,8
tick,0x7ffe67f8feb4,67145576,0,0x0,8
tick,0x7ffe67f8feb4,67160974,0,0x0,8
tick,0x7ffe67f8feb4,67176227,0,0x0,8
tick,0x7ffe67f8feb4,67191433,0,0x0,8
tick,0x7ffe67f8feb4,67207319,0,0x0,8
tick,0x7ffe67f8feb4,67222558,0,0x0,8
tick,0x7ffe67f8feb4,67237584,0,0x0,8
tick,0x7ffe67f8feb4,67252949,0,0x0,8
tick,0x7ffe67f8feb4,67268336,0,0x0,8
tick,0x7ffe67f8feb4,67284392,0,0x0,8
tick,0x7ffe67f8feb4,67299957,0,0x0,8
tick,0x7ffe67f8feb4,67315880,0,0x0,8
tick,0x7ffe67f8feb4,67331466,0,0x0,8
tick,0x7ffe67f8feb4,67347099,0,0x0,8
tick,0x7ffe67f8feb4,67363157,0,0x0,8
tick,0x7ffe67f8feb4,67378357,0,0x0,8
tick,0x7ffe67f8feb4,67394656,0,0x0,8
tick,0x7ffe67f8feb4,67409610,0,0x0,8
tick,0x7ffe67f8feb4,67425379,0,0x0,8
tick,0x7ffe67f8feb4,67441629,0,0x0,8
tick,0x7ffe67f8feb4,67457491,0,0x0,8
tick,0x7ffe67f8feb4,67473448,0,0x0,8
tick,0x7ffe67f8feb4,67489425,0,0x0,8
tick,0x7ffe67f8feb4,67505420,0,0x0,8
tick,0x7ffe67f8feb4,67521446,0,0x0,8
tick,0x7ffe67f8feb4,67536515,0,0x0,8
tick,0x7ffe67f8feb4,67551651,0,0x0,8
tick,0x7ffe67f8feb4,67567573,0,0x0,8
tick,0x7ffe67f8feb4,67583295,0,0x0,8
tick,0x7ffe67f8feb4,67599535,0,0x0,8
tick,0x7ffe67f8feb4,67616506,0,0x0,8
tick,0x7ffe67f8feb4,67631538,0,0x0,8
tick,0x7ffe67f8feb4,67647532,0,0x0,8
tick,0x7ffe67f8feb4,67663524,0,0x0,8
tick,0x7ffe67f8feb4,67679526,0,0x0,8
tick,0x7ffe67f8feb4,67694521,0,0x0,8
tick,0x7ffe67f8feb4,67710548,0,0x0,8
tick,0x7ffe67f8feb4,67726530,0,0x0,8
tick,0x7ffe67f8feb4,67742558,0,0x0,8
tick,0x7ffe67f8feb4,67758573,0,0x0,8
tick,0x7ffe67f8feb4,67773750,0,0x0,8
tick,0x7ffe67f8feb4,67789558,0,0x0,8
tick,0x7ffe67f8feb4,67805589,0,0x0,8
tick,0x7ffe67f8feb4,67821605,0,0x0,8
tick,0x7ffe67f8feb4,67837573,0,0x0,8
tick,0x7ffe67f8feb4,67852892,0,0x0,8
tick,0x7ffe67f8feb4,67868565,0,0x0,8
tick,0x7ffe67f8feb4,67883909,0,0x0,8
tick,0x7ffe67f8feb4,67899901,0,0x0,8
tick,0x7ffe67f8feb4,67915898,0,0x0,8
tick,0x7ffe67f8feb4,67931577,0,0x0,8
tick,0x7ffe67f8feb4,67947236,0,0x0,8
tick,0x7ffe67f8feb4,67963289,0,0x0,8
tick,0x7ffe67f8feb4,67978608,0,0x0,8
tick,0x7ffe67f8feb4,67994444,0,0x0,8
tick,0x7ffe67f8feb4,68009823,0,0x0,8
tick,0x7ffe67f8feb4,68025446,0,0x0,8
tick,0x7ffe67f8feb4,68040592,0,0x0,8
tick,0x7ffe67f8feb4,68056656,0,0x0,8
tick,0x7ffe67f8feb4,68072610,0,0x0,8
tick,0x7ffe67f8feb4,68088578,0,0x0,8
tick,0x7ffe67f8feb4,68104551,0,0x0,8
tick,0x7ffe67f8feb4,68120578,0,0x0,8
tick,0x7ffe67f8feb4,68136584,0,0x0,8
tick,0x7ffe67f8feb4,68152554,0,0x0,8
tick,0x7ffe67f8feb4,68168580,0,0x0,8
tick,0x7ffe67f8feb4,68183958,0,0x0,8
tick,0x7ffe67f8feb4,68199952,0,0x0,8
tick,0x7ffe67f8feb4,68215959,0,0x0,8
tick,0x7ffe67f8feb4,68231985,0,0x0,8
tick,0x7ffe67f8feb4,68247954,0,0x0,8
tick,0x7ffe67f8feb4,68263951,0,0x0,8
tick,0x7ffe67f8feb4,68279989,0,0x0,8
tick,0x7ffe67f8feb4,68295968,0,0x0,8
tick,0x7ffe67f8feb4,68312215,0,0x0,8
tick,0x7ffe67f8feb4,68327954,0,0x0,8
tick,0x7ffe67f8feb4,68343958,0,0x0,8
tick,0x7ffe67f8feb4,68358970,0,0x0,8
tick,0x7ffe67f8feb4,68375012,0,0x0,8
tick,0x7ffe67f8feb4,68390366,0,0x0,8
tick,0x7ffe67f8feb4,68406002,0,0x0,8
tick,0x7ffe67f8feb4,68421991,0,0x0,8
tick,0x7ffe67f8feb4,68438020,0,0x0,8
tick,0x7ffe67f8feb4,68454050,0,0x0,8
tick,0x7ffe67f8feb4,68470052,0,0x0,8
tick,0x7ffe67f8feb4,68486050,0,0x0,8
tick,0x7ffe67f8feb4,68501008,0,0x0,8
tick,0x7ffe67f8feb4,68517036,0,0x0,8
tick,0x7ffe67f8feb4,68533004,0,0x0,8
tick,0x7ffe67f8feb4,68549001,0,0x0,8
tick,0x7ffe67f8feb4,68565005,0,0x0,8
tick,0x7ffe67f8feb4,68580013,0,0x0,8
tick,0x7ffe67f8feb4,68596092,0,0x0,8
tick,0x7ffe67f8feb4,68611999,0,0x0,8
tick,0x7ffe67f8feb4,68628009,0,0x0,8
tick,0x7ffe67f8feb4,68644013,0,0x0,8
tick,0x7ffe67f8feb4,68660027,0,0x0,8
tick,0x7ffe67f8feb4,68676037,0,0x0,8
tick,0x7ffe67f8feb4,68692076,0,0x0,8
tick,0x7ffe67f8feb4,68708047,0,0x0,8
tick,0x7ffe67f8feb4,68724071,0,0x0,8
tick,0x7ffe67f8feb4,68740048,0,0x0,8
tick,0x7ffe67f8feb4,68755329,0,0x0,8
tick,0x7ffe67f8feb4,68771068,0,0x0,8
tick,0x7ffe67f8feb4,68786309,0,0x0,8
tick,0x7ffe67f8feb4,68801933,0,0x0,8
tick,0x7ffe67f8feb4,68817078,0,0x0,8
tick,0x7ffe67f8feb4,68832567,0,0x0,8
tick,0x7ffe67f8feb4,68848045,0,0x0,8
tick,0x7ffe67f8feb4,68864049,0,0x0,8
tick,0x7ffe67f8feb4,68880049,0,0x0,8
tick,0x7ffe67f8feb4,68896156,0,0x0,8
tick,0x7ffe67f8feb4,68911189,0,0x0,8
tick,0x7ffe67f8feb4,68926630,0,0x0,8
tick,0x7ffe67f8feb4,68942369,0,0x0,8
tick,0x7ffe67f8feb4,68957595,0,0x0,8
tick,0x7ffe67f8feb4,68973621,0,0x0,8
tick,0x7ffe67f8feb4,68989300,0,0x0,8
tick,0x7ffe67f8feb4,69005139,0,0x0,8
tick,0x7ffe67f8feb4,69020326,0,0x0,8
tick,0x7ffe67f8feb4,69035987,0,0x0,8
tick,0x7ffe67f8feb4,69050962,0,0x0,8
tick,0x7ffe67f8feb4,69066554,0,0x0,8
tick,0x7ffe67f8feb4,69082050,0,0x0,8
tick,0x7ffe67f8feb4,69097489,0,0x0,8
tick,0x7ffe67f8feb4,69113088,0,0x0,8
tick,0x7ffe67f8feb4,69128082,0,0x0,8
tick,0x7ffe67f8feb4,69144586,0,0x0,8
tick,0x7ffe67f8feb4,69160081,0,0x0,8
tick,0x7ffe67f8feb4,69176102,0,0x0,8
tick,0x7ffe67f8feb4,69191308,0,0x0,8
tick,0x7ffe67f8feb4,69206775,0,0x0,8
tick,0x7ffe67f8feb4,69222206,0,0x0,8
tick,0x7ffe67f8feb4,69237627,0,0x0,8
tick,0x7ffe67f8feb4,69253379,0,0x0,8
tick,0x7ffe67f8feb4,69269314,0,0x0,8
tick,0x7ffe67f8feb4,69284912,0,0x0,8
tick,0x7ffe67f8feb4,69301193,0,0x0,8
tick,0x7ffe67f8feb4,69316603,0,0x0,8
tick,0x7ffe67f8feb4,69332032,0,0x0,8
tick,0x7ffe67f8feb4,69347349,0,0x0,8
tick,0x7ffe67f8feb4,69363369,0,0x0,8
tick,0x7ffe67f8feb4,69379282,0,0x0,8
tick,0x7ffe67f8feb4,69395280,0,0x0,8
tick,0x7ffe67f8feb4,69411128,0,0x0,8
tick,0x7ffe67f8feb4,69427128,0,0x0,8
tick,0x7ffe67f8feb4,69443174,0,0x0,8
tick,0x7ffe67f8feb4,69459164,0,0x0,8
tick,0x7ffe67f8feb4,69474530,0,0x0,8
tick,0x7ffe67f8feb4,69490878,0,0x0,8
tick,0x7ffe67f8feb4,69506627,0,0x0,8
tick,0x7ffe67f8feb4,69522523,0,0x0,8
tick,0x7ffe67f8feb4,69538561,0,0x0,8
tick,0x7ffe67f8feb4,69554198,0,0x0,8
tick,0x7ffe67f8feb4,69569573,0,0x0,8
tick,0x7ffe67f8feb4,69585229,0,0x0,8
tick,0x7ffe67f8feb4,69601157,0,0x0,8
tick,0x7ffe67f8feb4,69616759,0,0x0,8
tick,0x7ffe67f8feb4,69632287,0,0x0,8
tick,0x7ffe67f8feb4,69647780,0,0x0,8
tick,0x7ffe67f8feb4,69663149,0,0x0,8
tick,0x7ffe67f8feb4,69678829,0,0x0,8
tick,0x7ffe67f8feb4,69694850,0,0x0,8
tick,0x7ffe67f8feb4,69709938,0,0x0,8
tick,0x7ffe67f8feb4,69725866,0,0x0,8
tick,0x7ffe67f8feb4,69740989,0,0x0,8
tick,0x7ffe67f8feb4,69756193,0,0x0,8
tick,0x7ffe67f8feb4,69771345,0,0x0,8
tick,0x7ffe67f8feb4,69786474,0,0x0,8
tick,0x7ffe67f8feb4,69802239,0,0x0,8
tick,0x7ffe67f8feb4,69817793,0,0x0,8
tick,0x7ffe67f8feb4,69833895,0,0x0,8
tick,0x7ffe67f8feb4,69849264,0,0x0,8
tick,0x7ffe67f8feb4,69865312,0,0x0,8
tick,0x7ffe67f8feb4,69880640,0,0x0,8
tick,0x7ffe67f8feb4,69896796,0,0x0,8
tick,0x7ffe67f8feb4,69912692,0,0x0,8
tick,0x7ffe67f8feb4,69928502,0,0x0,8
tick,0x7ffe67f8feb4,69943713,0,0x0,8
tick,0x7ffe67f8feb4,69959527,0,0x0,8
tick,0x7ffe67f8feb4,69974621,0,0x0,8
tick,0x7ffe67f8feb4,69989837,0,0x0,8
tick,0x7ffe67f8feb4,70005366,0,0x0,8
tick,0x7ffe67f8feb4,70020813,0,0x0,8
tick,0x7ffe67f8feb4,70036127,0,0x0,8
tick,0x7ffe67f8feb4,70051384,0,0x0,8
tick,0x7ffe67f8feb4,70067527,0,0x0,8
tick,0x7ffe67f8feb4,70083458,0,0x0,8
tick,0x7ffe67f8feb4,70098939,0,0x0,8
tick,0x7ffe67f8feb4,70114191,0,0x0,8
tick,0x7ffe67f8feb4,70129427,0,0x0,8
tick,0x7ffe67f8feb4,70145414,0,0x0,8
tick,0x7ffe67f8feb4,70160933,0,0x0,8
tick,0x7ffe67f8feb4,70176915,0,0x0,8
tick,0x7ffe67f8feb4,70192468,0,0x0,8
tick,0x7ffe67f8feb4,70207718,0,0x0,8
tick,0x7ffe67f8feb4,70224013,0,0x0,8
tick,0x7ffe67f8feb4,70238948,0,0x0,8
tick,0x7ffe67f8feb4,70254808,0,0x0,8
tick,0x7ffe67f8feb4,70270265,0,0x0,8
tick,0x7ffe67f8feb4,70286055,0,0x0,8
tick,0x7ffe67f8feb4,70301969,0,0x0,8
tick,0x7ffe67f8feb4,70317454,0,0x0,8
tick,0x7ffe67f8feb4,70332425,0,0x0,8
tick,0x7ffe67f8feb4,70348087,0,0x0,8
tick,0x7ffe67f8feb4,70363480,0,0x0,8
tick,0x7ffe67f8feb4,70379540,0,0x0,8
tick,0x7ffe67f8feb4,70395744,0,0x0,8
tick,0x7ffe67f8feb4,70411628,0,0x0,8
tick,0x7ffe67f8feb4,70427413,0,0x0,8
tick,0x7ffe67f8feb4,70443159,0,0x0,8
tick,0x7ffe67f8feb4,70458635,0,0x0,8
tick,0x7ffe67f8feb4,70474571,0,0x0,8
tick,0x7ffe67f8feb4,70489568,0,0x0,8
tick,0x7ffe67f8feb4,70504593,0,0x0,8
tick,0x7ffe67f8feb4,70520579,0,0x0,8
tick,0x7ffe67f8feb4,70536578,0,0x0,8
tick,0x7ffe67f8feb4,70552294,0,0x0,8
tick,0x7ffe67f8feb4,70567623,0,0x0,8
tick,0x7ffe67f8feb4,70583095,0,0x0,8
tick,0x7ffe67f8feb4,70598358,0,0x0,8
tick,0x7ffe67f8feb4,70614076,0,0x0,8
tick,0x7ffe67f8feb4,70629113,0,0x0,8
tick,0x7ffe67f8feb4,70644246,0,0x0,8
tick,0x7ffe67f8feb4,70659577,0,0x0,8
tick,0x7ffe67f8feb4,70674714,0,0x0,8
tick,0x7ffe67f8feb4,70689958,0,0x0,8
tick,0x7ffe67f8feb4,70705140,0,0x0,8
tick,0x7ffe67f8feb4,70720366,0,0x0,8
tick,0x7ffe67f8feb4,70736352,0,0x0,8
tick,0x7ffe67f8feb4,70751263,0,0x0,8
tick,0x7ffe67f8feb4,70767338,0,0x0,8
tick,0x7ffe67f8feb4,70783345,0,0x0,8
tick,0x7ffe67f8feb4,70799449,0,0x0,8
tick,0x7ffe67f8feb4,70815374,0,0x0,8
tick,0x7ffe67f8feb4,70830520,0,0x0,8
tick,0x7ffe67f8feb4,70846577,0,0x0,8
tick,0x7ffe67f8feb4,70861519,0,0x0,8
tick,0x7ffe67f8feb4,70877355,0,0x0,8
tick,0x7ffe67f8feb4,70893376,0,0x0,8
tick,0x7ffe67f8feb4,70909388,0,0x0,8
tick,0x7ffe67f8feb4,70925094,0,0x0,8
tick,0x7ffe67f8feb4,70940398,0,0x0,8
tick,0x7ffe67f8feb4,70956308,0,0x0,8
tick,0x7ffe67f8feb4,70971627,0,0x0,8
tick,0x7ffe67f8feb4,70987379,0,0x0,8
tick,0x7ffe67f8feb4,71002312,0,0x0,8
tick,0x7ffe67f8feb4,71017415,0,0x0,8
tick,0x7ffe67f8feb4,71032382,0,0x0,8
tick,0x7ffe67f8feb4,71048393,0,0x0,8
tick,0x7ffe67f8feb4,71064371,0,0x0,8
tick,0x7ffe67f8feb4,71080408,0,0x0,8
tick,0x7ffe67f8feb4,71096377,0,0x0,8
tick,0x7ffe67f8feb4,71112394,0,0x0,8
tick,0x7ffe67f8feb4,71127417,0,0x0,8
tick,0x7ffe67f8feb4,71143420,0,0x0,8
tick,0x7ffe67f8feb4,71159424,0,0x0,8
tick,0x7ffe67f8feb4,71174739,0,0x0,8
tick,0x7ffe67f8feb4,71190481,0,0x0,8
tick,0x7ffe67f8feb4,71206446,0,0x0,8
tick,0x7ffe67f8feb4,71222614,0,0x0,8
tick,0x7ffe67f8feb4,71238446,0,0x0,8
tick,0x7ffe67f8feb4,71253954,0,0x0,8
tick,0x7ffe67f8feb4,71269966,0,0x0,8
tick,0x7ffe67f8feb4,71285531,0,0x0,8
tick,0x7ffe67f8feb4,71300979,0,0x0,8
tick,0x7ffe67f8feb4,71316424,0,0x0,8
tick,0x7ffe67f8feb4,71332432,0,0x0,8
tick,0x7ffe67f8feb4,71348738,0,0x0,8
tick,0x7ffe67f8feb4,71363362,0,0x0,8
tick,0x7ffe67f8feb4,71379368,0,0x0,8
tick,0x7ffe67f8feb4,71395186,0,0x0,8
tick,0x7ffe67f8feb4,71410411,0,0x0,8
tick,0x7ffe67f8feb4,71426406,0,0x0,8
tick,0x7ffe67f8feb4,71441487,0,0x0,8
tick,0x7ffe67f8feb4,71457525,0,0x0,8
tick,0x7ffe67f8feb4,71473539,0,0x0,8
tick,0x7ffe67f8feb4,71489560,0,0x0,8
tick,0x7ffe67f8feb4,71505532,0,0x0,8
tick,0x7ffe67f8feb4,71521553,0,0x0,8
tick,0x7ffe67f8feb4,71538129,0,0x0,8
tick,0x7ffe67f8feb4,71553538,0,0x0,8
tick,0x7ffe67f8feb4,71569657,0,0x0,8
tick,0x7ffe67f8feb4,71585321,0,0x0,8
tick,0x7ffe67f8feb4,71601099,0,0x0,8
tick,0x7ffe67f8feb4,71616560,0,0x0,8
tick,0x7ffe67f8feb4,71632479,0,0x0,8
tick,0x7ffe67f8feb4,71647473,0,0x0,8
tick,0x7ffe67f8feb4,71662583,0,0x0,8
tick,0x7ffe67f8feb4,71678475,0,0x0,8
tick,0x7ffe67f8feb4,71694481,0,0x0,8
tick,0x7ffe67f8feb4,71710478,0,0x0,8
tick,0x7ffe67f8feb4,71727707,0,0x0,8
tick,0x7ffe67f8feb4,71743036,0,0x0,8
tick,0x7ffe67f8feb4,71762487,0,0x0,8
tick,0x7ffe67f8feb4,71774509,0,0x0,8
tick,0x7ffe67f8feb4,71790669,0,0x0,8
tick,0x7ffe67f8feb4,71806693,0,0x0,8
tick,0x7ffe67f8feb4,71822440,0,0x0,8
tick,0x7ffe67f8feb4,71838518,0,0x0,8
tick,0x7ffe67f8feb4,71853439,0,0x0,8
tick,0x7ffe67f8feb4,71869434,0,0x0,8
tick,0x7ffe67f8feb4,71885441,0,0x0,8
tick,0x7ffe67f8feb4,71901209,0,0x0,8
tick,0x7ffe67f8feb4,71916906,0,0x0,8
tick,0x7ffe67f8feb4,71932211,0,0x0,8
tick,0x7ffe67f8feb4,71947884,0,0x0,8
tick,0x7ffe67f8feb4,71963039,0,0x0,8
tick,0x7ffe67f8feb4,71978943,0,0x0,8
tick,0x7ffe67f8feb4,71994541,0,0x0,8
tick,0x7ffe67f8feb4,72009799,0,0x0,8
tick,0x7ffe67f8feb4,72025576,0,0x0,8
tick,0x7ffe67f8feb4,72041570,0,0x0,8
tick,0x7ffe67f8feb4,72057538,0,0x0,8
tick,0x7ffe67f8feb4,72073541,0,0x0,8
tick,0x7ffe67f8feb4,72089092,0,0x0,8
tick,0x7ffe67f8feb4,72104398,0,0x0,8
tick,0x7ffe67f8feb4,72120404,0,0x0,8
tick,0x7ffe67f8feb4,72135845,0,0x0,8
tick,0x7ffe67f8feb4,72151976,0,0x0,8
tick,0x7ffe67f8feb4,72167447,0,0x0,8
tick,0x7ffe67f8feb4,72182764,0,0x0,8
tick,0x7ffe67f8feb4,72198576,0,0x0,8
tick,0x7ffe67f8feb4,72213947,0,0x0,8
tick,0x7ffe67f8feb4,72229004,0,0x0,8
tick,0x7ffe67f8feb4,72244450,0,0x0,8
tick,0x7ffe67f8feb4,72259915,0,0x0,8
tick,0x7ffe67f8feb4,72275913,0,0x0,8
tick,0x7ffe67f8feb4,72291237,0,0x0,8
tick,0x7ffe67f8feb4,72307270,0,0x0,8
tick,0x7ffe67f8feb4,72323267,0,0x0,8
tick,0x7ffe67f8feb4,72339266,0,0x0,8
tick,0x7ffe67f8feb4,72354726,0,0x0,8
tick,0x7ffe67f8feb4,72370715,0,0x0,8
tick,0x7ffe67f8feb4,72386703,0,0x0,8
tick,0x7ffe67f8feb4,72402748,0,0x0,8
tick,0x7ffe67f8feb4,72418632,0,0x0,8
tick,0x7ffe67f8feb4,72434688,0,0x0,8
tick,0x7ffe67f8feb4,72450666,0,0x0,8
tick,0x7ffe67f8feb4,72466614,0,0x0,8
tick,0x7ffe67f8feb4,72482590,0,0x0,8
tick,0x7ffe67f8feb4,72498588,0,0x0,8
tick,0x7ffe67f8feb4,72514586,0,0x0,8
tick,0x7ffe67f8feb4,72530602,0,0x0,8
tick,0x7ffe67f8feb4,72546581,0,0x0,8
tick,0x7ffe67f8feb4,72562598,0,0x0,8
tick,0x7ffe67f8feb4,72578607,0,0x0,8
tick,0x7ffe67f8feb4,72593565,0,0x0,8
tick,0x7ffe67f8feb4,72608723,0,0x0,8
tick,0x7ffe67f8feb4,72624167,0,0x0,8
tick,0x7ffe67f8feb4,72639952,0,0x0,8
tick,0x7ffe67f8feb4,72655973,0,0x0,8
tick,0x7ffe67f8feb4,72671325,0,0x0,8
tick,0x7ffe67f8feb4,72686673,0,0x0,8
tick,0x7ffe67f8feb4,72702030,0,0x0,8
tick,0x7ffe67f8feb4,72717666,0,0x0,8
tick,0x7ffe67f8feb4,72733104,0,0x0,8
tick,0x7ffe67f8feb4,72748703,0,0x0,8
tick,0x7ffe67f8feb4,72764557,0,0x0,8
tick,0x7ffe67f8feb4,72780561,0,0x0,8
tick,0x7ffe67f8feb4,72795534,0,0x0,8
tick,0x7ffe67f8feb4,72811988,0,0x0,8
tick,0x7ffe67f8feb4,72828439,0,0x0,8
tick,0x7ffe67f8feb4,72844239,0,0x0,8
tick,0x7ffe67f8feb4,72859813,0,0x0,8
tick,0x7ffe67f8feb4,72875703,0,0x0,8
tick,0x7ffe67f8feb4,72891070,0,0x0,8
tick,0x7ffe67f8feb4,72906058,0,0x0,8
tick,0x7ffe67f8feb4,72922376,0,0x0,8
tick,0x7ffe67f8feb4,72937910,0,0x0,8
tick,0x7ffe67f8feb4,72952846,0,0x0,8
tick,0x7ffe67f8feb4,72968241,0,0x0,8
tick,0x7ffe67f8feb4,72983868,0,0x0,8
tick,0x7ffe67f8feb4,72999299,0,0x0,8
tick,0x7ffe67f8feb4,73014887,0,0x0,8
tick,0x7ffe67f8feb4,73030742,0,0x0,8
tick,0x7ffe67f8feb4,73046267,0,0x0,8
tick,0x7ffe67f8feb4,73061794,0,0x0,8
tick,0x7ffe67f8feb4,73077046,0,0x0,8
tick,0x7ffe67f8feb4,73092439,0,0x0,8
tick,0x7ffe67f8feb4,73107930,0,0x0,8
tick,0x7ffe67f8feb4,73123958,0,0x0,8
tick,0x7ffe67f8feb4,73139599,0,0x0,8
tick,0x7ffe67f8feb4,73155780,0,0x0,8
tick,0x7ffe67f8feb4,73171517,0,0x0,8
tick,0x7ffe67f8feb4,73186971,0,0x0,8
tick,0x7ffe67f8feb4,73203923,0,0x0,8
tick,0x7ffe67f8feb4,73219468,0,0x0,8
tick,0x7ffe67f8feb4,73237031,0,0x0,8
tick,0x7ffe67f8feb4,73250783,0,0x0,8
tick,0x7ffe67f8feb4,73266224,0,0x0,8
tick,0x7ffe67f8feb4,73281379,0,0x0,8
tick,0x7ffe67f8feb4,73297347,0,0x0,8
tick,0x7ffe67f8feb4,73313326,0,0x0,8
tick,0x7ffe67f8feb4,73329318,0,0x0,8
tick,0x7ffe67f8feb4,73345163,0,0x0,8
tick,0x7ffe67f8feb4,73360325,0,0x0,8
tick,0x7ffe67f8feb4,73376139,0,0x0,8
tick,0x7ffe67f8feb4,73391368,0,0x0,8
tick,0x7ffe67f8feb4,73407178,0,0x0,8
tick,0x7ffe67f8feb4,73422358,0,0x0,8
tick,0x7ffe67f8feb4,73438164,0,0x0,8
tick,0x7ffe67f8feb4,73453962,0,0x0,8
tick,0x7ffe67f8feb4,73469248,0,0x0,8
tick,0x7ffe67f8feb4,73485535,0,0x0,8
tick,0x7ffe67f8feb4,73500405,0,0x0,8
tick,0x7ffe67f8feb4,73516452,0,0x0,8
tick,0x7ffe67f8feb4,73532430,0,0x0,8
tick,0x7ffe67f8feb4,73548402,0,0x0,8
tick,0x7ffe67f8feb4,73564403,0,0x0,8
tick,0x7ffe67f8feb4,73580452,0,0x0,8
tick,0x7ffe67f8feb4,73596417,0,0x0,8
tick,0x7ffe67f8feb4,73612429,0,0x0,8
tick,0x7ffe67f8feb4,73628446,0,0x0,8
tick,0x7ffe67f8feb4,73643466,0,0x0,8
tick,0x7ffe67f8feb4,73659020,0,0x0,8
tick,0x7ffe67f8feb4,73674653,0,0x0,8
tick,0x7ffe67f8feb4,73690529,0,0x0,8
tick,0x7ffe67f8feb4,73706024,0,0x0,8
tick,0x7ffe67f8feb4,73721685,0,0x0,8
tick,0x7ffe67f8feb4,73737118,0,0x0,8
tick,0x7ffe67f8feb4,73753064,0,0x0,8
tick,0x7ffe67f8feb4,73769917,0,0x0,8
tick,0x7ffe67f8feb4,73787535,0,0x0,8
tick,0x7ffe67f8feb4,73801685,0,0x0,8
tick,0x7ffe67f8feb4,73817145,0,0x0,8
tick,0x7ffe67f8feb4,73832495,0,0x0,8
tick,0x7ffe67f8feb4,73848100,0,0x0,8
tick,0x7ffe67f8feb4,73863246,0,0x0,8
tick,0x7ffe67f8feb4,73878845,0,0x0,8
tick,0x7ffe67f8feb4,73894363,0,0x0,8
tick,0x7ffe67f8feb4,73909839,0,0x0,8
tick,0x7ffe67f8feb4,73925131,0,0x0,8
tick,0x7ffe67f8feb4,73940802,0,0x0,8
tick,0x7ffe67f8feb4,73956616,0,0x0,8
tick,0x7ffe67f8feb4,73972522,0,0x0,8
tick,0x7ffe67f8feb4,73988405,0,0x0,8
tick,0x7ffe67f8feb4,74003815,0,0x0,8
tick,0x7ffe67f8feb4,74019730,0,0x0,8
tick,0x7ffe67f8feb4,74034362,0,0x0,8
tick,0x7ffe67f8feb4,74049876,0,0x0,8
tick,0x7ffe67f8feb4,74065235,0,0x0,8
tick,0x7ffe67f8feb4,74080575,0,0x0,8
tick,0x7ffe67f8feb4,74096522,0,0x0,8
tick,0x7ffe67f8feb4,74111668,0,0x0,8
tick,0x7ffe67f8feb4,74127676,0,0x0,8
tick,0x7ffe67f8feb4,74143795,0,0x0,8
tick,0x7ffe67f8feb4,74159661,0,0x0,8
tick,0x7ffe67f8feb4,74174920,0,0x0,8
tick,0x7ffe67f8feb4,74190432,0,0x0,8
tick,0x7ffe67f8feb4,74206057,0,0x0,8
tick,0x7ffe67f8feb4,74221310,0,0x0,8
tick,0x7ffe67f8feb4,74237712,0,0x0,8
tick,0x7ffe67f8feb4,74253533,0,0x0,8
tick,0x7ffe67f8feb4,74269544,0,0x0,8
tick,0x7ffe67f8feb4,74285710,0,0x0,8
tick,0x7ffe67f8feb4,74300592,0,0x0,8
tick,0x7ffe67f8feb4,74316228,0,0x0,8
tick,0x7ffe67f8feb4,74332057,0,0x0,8
tick,0x7ffe67f8feb4,74347050,0,0x0,8
tick,0x7ffe67f8feb4,74362266,0,0x0,8
tick,0x7ffe67f8feb4,74377981,0,0x0,8
tick,0x7ffe67f8feb4,74393866,0,0x0,8
tick,0x7ffe67f8feb4,74409044,0,0x0,8
tick,0x7ffe67f8feb4,74425240,0,0x0,8
tick,0x7ffe67f8feb4,74441345,0,0x0,8
tick,0x7ffe67f8feb4,74457370,0,0x0,8
tick,0x7ffe67f8feb4,74473717,0,0x0,8
tick,0x7ffe67f8feb4,74488962,0,0x0,8
tick,0x7ffe67f8feb4,74504933,0,0x0,8
tick,0x7ffe67f8feb4,74521751,0,0x0,8
tick,0x7ffe67f8feb4,74537851,0,0x0,8
tick,0x7ffe67f8feb4,74553606,0,0x0,8
tick,0x7ffe67f8feb4,74569842,0,0x0,8
tick,0x7ffe67f8feb4,74584551,0,0x0,8
tick,0x7ffe67f8feb4,74600471,0,0x0,8
tick,0x7ffe67f8feb4,74616670,0,0x0,8
tick,0x7ffe67f8feb4,74631934,0,0x0,8
tick,0x7ffe67f8feb4,74647493,0,0x0,8
tick,0x7ffe67f8feb4,74663513,0,0x0,8
tick,0x7ffe67f8feb4,74679059,0,0x0,8
tick,0x7ffe67f8feb4,74694243,0,0x0,8
tick,0x7ffe67f8feb4,74709677,0,0x0,8
tick,0x7ffe67f8feb4,74725442,0,0x0,8
tick,0x7ffe67f8feb4,74741240,0,0x0,8
tick,0x7ffe67f8feb4,74756221,0,0x0,8
tick,0x7ffe67f8feb4,74772279,0,0x0,8
tick,0x7ffe67f8feb4,74787333,0,0x0,8
tick,0x7ffe67f8feb4,74804353,0,0x0,8
tick,0x7ffe67f8feb4,74819995,0,0x0,8
tick,0x7ffe67f8feb4,74833774,0,0x0,8
tick,0x7ffe67f8feb4,74849207,0,0x0,8
tick,0x7ffe67f8feb4,74864940,0,0x0,8
tick,0x7ffe67f8feb4,74880953,0,0x0,8
tick,0x7ffe67f8feb4,74896217,0,0x0,8
tick,0x7ffe67f8feb4,74911239,0,0x0,8
tick,0x7ffe67f8feb4,74927226,0,0x0,8
tick,0x7ffe67f8feb4,74941949,0,0x0,8
tick,0x7ffe67f8feb4,74957255,0,0x0,8
tick,0x7ffe67f8feb4,74973087,0,0x0,8
tick,0x7ffe67f8feb4,74988359,0,0x0,8
tick,0x7ffe67f8feb4,75005672,0,0x0,8
tick,0x7ffe67f8feb4,75020227,0,0x0,8
tick,0x7ffe67f8feb4,75035108,0,0x0,8
tick,0x7ffe67f8feb4,75050951,0,0x0,8
tick,0x7ffe67f8feb4,75066214,0,0x0,8
tick,0x7ffe67f8feb4,75082304,0,0x0,8
tick,0x7ffe67f8feb4,75097267,0,0x0,8
tick,0x7ffe67f8feb4,75112382,0,0x0,8
tick,0x7ffe67f8feb4,75128237,0,0x0,8
tick,0x7ffe67f8feb4,75144225,0,0x0,8
tick,0x7ffe67f8feb4,75160262,0,0x0,8
tick,0x7ffe67f8feb4,75176196,0,0x0,8
tick,0x7ffe67f8feb4,75191623,0,0x0,8
tick,0x7ffe67f8feb4,75207221,0,0x0,8
tick,0x7ffe67f8feb4,75223220,0,0x0,8
tick,0x7ffe67f8feb4,75239219,0,0x0,8
tick,0x7ffe67f8feb4,75255272,0,0x0,8
tick,0x7ffe67f8feb4,75271261,0,0x0,8
tick,0x7ffe67f8feb4,75287307,0,0x0,8
tick,0x7ffe67f8feb4,75303424,0,0x0,8
tick,0x7ffe67f8feb4,75319776,0,0x0,8
tick,0x7ffe67f8feb4,75335098,0,0x0,8
tick,0x7ffe67f8feb4,75350230,0,0x0,8
tick,0x7ffe67f8feb4,75366228,0,0x0,8
tick,0x7ffe67f8feb4,75381376,0,0x0,8
tick,0x7ffe67f8feb4,75397398,0,0x0,8
tick,0x7ffe67f8feb4,75412698,0,0x0,8
tick,0x7ffe67f8feb4,75428679,0,0x0,8
tick,0x7ffe67f8feb4,75443939,0,0x0,8
tick,0x7ffe67f8feb4,75459947,0,0x0,8
tick,0x7ffe67f8feb4,75475095,0,0x0,8
tick,0x7ffe67f8feb4,75490245,0,0x0,8
tick,0x7ffe67f8feb4,75506666,0,0x0,8
tick,0x7ffe67f8feb4,75522448,0,0x0,8
tick,0x7ffe67f8feb4,75538218,0,0x0,8
tick,0x7ffe67f8feb4,75554215,0,0x0,8
tick,0x7ffe67f8feb4,75570217,0,0x0,8
tick,0x7ffe67f8feb4,75586611,0,0x0,8
tick,0x7ffe67f8feb4,75602225,0,0x0,8
tick,0x7ffe67f8feb4,75618227,0,0x0,8
tick,0x7ffe67f8feb4,75634221,0,0x0,8
tick,0x7ffe67f8feb4,75649383,0,0x0,8
tick,0x7ffe67f8feb4,75665201,0,0x0,8
tick,0x7ffe67f8feb4,75681229,0,0x0,8
tick,0x7ffe67f8feb4,75696371,0,0x0,8
tick,0x7ffe67f8feb4,75711633,0,0x0,8
tick,0x7ffe67f8feb4,75727176,0,0x0,8
tick,0x7ffe67f8feb4,75743180,0,0x0,8
tick,0x7ffe67f8feb4,75758385,0,0x0,8
tick,0x7ffe67f8feb4,75774416,0,0x0,8
tick,0x7ffe67f8feb4,75791226,0,0x0,8
tick,0x7ffe67f8feb4,75806401,0,0x0,8
tick,0x7ffe67f8feb4,75822432,0,0x0,8
tick,0x7ffe67f8feb4,75838418,0,0x0,8
tick,0x7ffe67f8feb4,75854395,0,0x0,8
tick,0x7ffe67f8feb4,75870396,0,0x0,8
tick,0x7ffe67f8feb4,75886534,0,0x0,8
tick,0x7ffe67f8feb4,75902457,0,0x0,8
tick,0x7ffe67f8feb4,75917416,0,0x0,8
tick,0x7ffe67f8feb4,75933432,0,0x0,8
tick,0x7ffe67f8feb4,75949418,0,0x0,8
tick,0x7ffe67f8feb4,75965422,0,0x0,8
tick,0x7ffe67f8feb4,75981427,0,0x0,8
tick,0x7ffe67f8feb4,75997448,0,0x0,8
tick,0x7ffe67f8feb4,76013438,0,0x0,8
tick,0x7ffe67f8feb4,76029487,0,0x0,8
tick,0x7ffe67f8feb4,76045161,0,0x0,8
tick,0x7ffe67f8feb4,76061125,0,0x0,8
tick,0x7ffe67f8feb4,76077207,0,0x0,8
tick,0x7ffe67f8feb4,76092274,0,0x0,8
tick,0x7ffe67f8feb4,76107673,0,0x0,8
tick,0x7ffe67f8feb4,76123170,0,0x0,8
tick,0x7ffe67f8feb4,76138600,0,0x0,8
tick,0x7ffe67f8feb4,76154593,0,0x0,8
tick,0x7ffe67f8feb4,76169868,0,0x0,8
tick,0x7ffe67f8feb4,76185225,0,0x0,8
tick,0x7ffe67f8feb4,76200478,0,0x0,8
tick,0x7ffe67f8feb4,76216256,0,0x0,8
tick,0x7ffe67f8feb4,76231436,0,0x0,8
tick,0x7ffe67f8feb4,76246929,0,0x0,8
tick,0x7ffe67f8feb4,76262341,0,0x0,8
tick,0x7ffe67f8feb4,76278141,0,0x0,8
tick,0x7ffe67f8feb4,76294355,0,0x0,8
tick,0x7ffe67f8feb4,76309343,0,0x0,8
tick,0x7ffe67f8feb4,76324749,0,0x0,8
tick,0x7ffe67f8feb4,76340518,0,0x0,8
tick,0x7ffe67f8feb4,76356552,0,0x0,8
tick,0x7ffe67f8feb4,76372489,0,0x0,8
tick,0x7ffe67f8feb4,76388494,0,0x0,8
tick,0x7ffe67f8feb4,76403780,0,0x0,8
tick,0x7ffe67f8feb4,76418814,0,0x0,8
tick,0x7ffe67f8feb4,76434863,0,0x0,8
tick,0x7ffe67f8feb4,76452811,0,0x0,8
tick,0x7ffe67f8feb4,76466835,0,0x0,8
tick,0x7ffe67f8feb4,76482248,0,0x0,8
tick,0x7ffe67f8feb4,76498219,0,0x0,8
tick,0x7ffe67f8feb4,76513439,0,0x0,8
tick,0x7ffe67f8feb4,76529457,0,0x0,8
tick,0x7ffe67f8feb4,76545414,0,0x0,8
tick,0x7ffe67f8feb4,76561404,0,0x0,8
tick,0x7ffe67f8feb4,76576875,0,0x0,8
tick,0x7ffe67f8feb4,76592875,0,0x0,8
tick,0x7ffe67f8feb4,76608865,0,0x0,8
tick,0x7ffe67f8feb4,76624088,0,0x0,8
tick,0x7ffe67f8feb4,76639955,0,0x0,8
tick,0x7ffe67f8feb4,76655959,0,0x0,8
tick,0x7ffe67f8feb4,76671014,0,0x0,8
tick,0x7ffe67f8feb4,76686224,0,0x0,8
tick,0x7ffe67f8feb4,76701408,0,0x0,8
tick,0x7ffe67f8feb4,76716237,0,0x0,8
tick,0x7ffe67f8feb4,76731258,0,0x0,8
tick,0x7ffe67f8feb4,76747311,0,0x0,8
tick,0x7ffe67f8feb4,76763348,0,0x0,8
tick,0x7ffe67f8feb4,76779282,0,0x0,8
tick,0x7ffe67f8feb4,76794711,0,0x0,8
tick,0x7ffe67f8feb4,76810063,0,0x0,8
tick,0x7ffe67f8feb4,76825722,0,0x0,8
tick,0x7ffe67f8feb4,76841197,0,0x0,8
tick,0x7ffe67f8feb4,76857210,0,0x0,8
tick,0x7ffe67f8feb4,76873483,0,0x0,8
tick,0x7ffe67f8feb4,76889181,0,0x0,8
tick,0x7ffe67f8feb4,76905527,0,0x0,8
tick,0x7ffe67f8feb4,76920245,0,0x0,8
tick,0x7ffe67f8feb4,76936229,0,0x0,8
tick,0x7ffe67f8feb4,76951424,0,0x0,8
tick,0x7ffe67f8feb4,76966247,0,0x0,8
tick,0x7ffe67f8feb4,76981423,0,0x0,8
tick,0x7ffe67f8feb4,76997250,0,0x0,8
tick,0x7ffe67f8feb4,77012585,0,0x0,8
tick,0x7ffe67f8feb4,77028689,0,0x0,8
tick,0x7ffe67f8feb4,77045381,0,0x0,8
tick,0x7ffe67f8feb4,77060901,0,0x0,8
tick,0x7ffe67f8feb4,77076882,0,0x0,8
tick,0x7ffe67f8feb4,77092545,0,0x0,8
tick,0x7ffe67f8feb4,77108197,0,0x0,8
tick,0x7ffe67f8feb4,77123428,0,0x0,8
tick,0x7ffe67f8feb4,77139304,0,0x0,8
tick,0x7ffe67f8feb4,77156733,0,0x0,8
tick,0x7ffe67f8feb4,77170364,0,0x0,8
tick,0x7ffe67f8feb4,77186208,0,0x0,8
tick,0x7ffe67f8feb4,77201699,0,0x0,8
tick,0x7ffe67f8feb4,77217034,0,0x0,8
tick,0x7ffe67f8feb4,77232177,0,0x0,8
tick,0x7ffe67f8feb4,77248208,0,0x0,8
tick,0x7ffe67f8feb4,77264127,0,0x0,8
tick,0x7ffe67f8feb4,77279978,0,0x0,8
tick,0x7ffe67f8feb4,77295478,0,0x0,8
tick,0x7ffe67f8feb4,77311145,0,0x0,8
tick,0x7ffe67f8feb4,77326671,0,0x0,8
tick,0x7ffe67f8feb4,77342517,0,0x0,8
tick,0x7ffe67f8feb4,77358180,0,0x0,8
tick,0x7ffe67f8feb4,77373815,0,0x0,8
tick,0x7ffe67f8feb4,77390050,0,0x0,8
tick,0x7ffe67f8feb4,77406253,0,0x0,8
tick,0x7ffe67f8feb4,77421893,0,0x0,8
tick,0x7ffe67f8feb4,77437285,0,0x0,8
tick,0x7ffe67f8feb4,77452873,0,0x0,8
tick,0x7ffe67f8feb4,77468032,0,0x0,8
tick,0x7ffe67f8feb4,77483945,0,0x0,8
tick,0x7ffe67f8feb4,77499972,0,0x0,8
tick,0x7ffe67f8feb4,77515847,0,0x0,8
tick,0x7ffe67f8feb4,77531949,0,0x0,8
tick,0x7ffe67f8feb4,77547794,0,0x0,8
tick,0x7ffe67f8feb4,77563830,0,0x0,8
tick,0x7ffe67f8feb4,77579775,0,0x0,8
tick,0x7ffe67f8feb4,77595772,0,0x0,8
tick,0x7ffe67f8feb4,77611821,0,0x0,8
tick,0x7ffe67f8feb4,77627840,0,0x0,8
tick,0x7ffe67f8feb4,77643858,0,0x0,8
tick,0x7ffe67f8feb4,77659956,0,0x0,8
tick,0x7ffe67f8feb4,77675409,0,0x0,8
tick,0x7ffe67f8feb4,77690736,0,0x0,8
tick,0x7ffe67f8feb4,77706764,0,0x0,8
tick,0x7ffe67f8feb4,77722769,0,0x0,8
tick,0x7ffe67f8feb4,77737943,0,0x0,8
tick,0x7ffe67f8feb4,77753900,0,0x0,8
tick,0x7ffe67f8feb4,77769232,0,0x0,8
tick,0x7ffe67f8feb4,77784387,0,0x0,8
tick,0x7ffe67f8feb4,77799870,0,0x0,8
tick,0x7ffe67f8feb4,77815859,0,0x0,8
tick,0x7ffe67f8feb4,77831837,0,0x0,8
tick,0x7ffe67f8feb4,77847846,0,0x0,8
tick,0x7ffe67f8feb4,77863401,0,0x0,8
tick,0x7ffe67f8feb4,77879177,0,0x0,8
tick,0x7ffe67f8feb4,77895083,0,0x0,8
tick,0x7ffe67f8feb4,77910191,0,0x0,8
tick,0x7ffe67f8feb4,77926218,0,0x0,8
tick,0x7ffe67f8feb4,77941769,0,0x0,8
tick,0x7ffe67f8feb4,77957220,0,0x0,8
tick,0x7ffe67f8feb4,77972994,0,0x0,8
tick,0x7ffe67f8feb4,77988215,0,0x0,8
tick,0x7ffe67f8feb4,78003383,0,0x0,8
tick,0x7ffe67f8feb4,78019258,0,0x0,8
tick,0x7ffe67f8feb4,78034560,0,0x0,8
tick,0x7ffe67f8feb4,78050283,0,0x0,8
tick,0x7ffe67f8feb4,78066211,0,0x0,8
tick,0x7ffe67f8feb4,78082220,0,0x0,8
tick,0x7ffe67f8feb4,78098258,0,0x0,8
tick,0x7ffe67f8feb4,78114247,0,0x0,8
tick,0x7ffe67f8feb4,78129458,0,0x0,8
tick,0x7ffe67f8feb4,78145331,0,0x0,8
tick,0x7ffe67f8feb4,78160644,0,0x0,8
tick,0x7ffe67f8feb4,78176608,0,0x0,8
tick,0x7ffe67f8feb4,78192363,0,0x0,8
tick,0x7ffe67f8feb4,78207617,0,0x0,8
tick,0x7ffe67f8feb4,78223595,0,0x0,8
tick,0x7ffe67f8feb4,78239273,0,0x0,8
tick,0x7ffe67f8feb4,78254666,0,0x0,8
tick,0x7ffe67f8feb4,78270533,0,0x0,8
tick,0x7ffe67f8feb4,78286343,0,0x0,8
tick,0x7ffe67f8feb4,78301899,0,0x0,8
tick,0x7ffe67f8feb4,78317331,0,0x0,8
tick,0x7ffe67f8feb4,78333055,0,0x0,8
tick,0x7ffe67f8feb4,78348683,0,0x0,8
tick,0x7ffe67f8feb4,78364086,0,0x0,8
tick,0x7ffe67f8feb4,78379716,0,0x0,8
tick,0x7ffe67f8feb4,78395297,0,0x0,8
tick,0x7ffe67f8feb4,78411446,0,0x0,8
tick,0x7ffe67f8feb4,78427425,0,0x0,8
tick,0x7ffe67f8feb4,78442904,0,0x0,8
tick,0x7ffe67f8feb4,78457724,0,0x0,8
tick,0x7ffe67f8feb4,78472918,0,0x0,8
tick,0x7ffe67f8feb4,78488022,0,0x0,8
tick,0x7ffe67f8feb4,78502884,0,0x0,8
tick,0x7ffe67f8feb4,78518932,0,0x0,8
tick,0x7ffe67f8feb4,78534912,0,0x0,8
tick,0x7ffe67f8feb4,78550961,0,0x0,8
tick,0x7ffe67f8feb4,78566888,0,0x0,8
tick,0x7ffe67f8feb4,78582867,0,0x0,8
tick,0x7ffe67f8feb4,78598878,0,0x0,8
tick,0x7ffe67f8feb4,78614883,0,0x0,8
tick,0x7ffe67f8feb4,78630871,0,0x0,8
tick,0x7ffe67f8feb4,78646257,0,0x0,8
tick,0x7ffe67f8feb4,78661284,0,0x0,8
tick,0x7ffe67f8feb4,78677343,0,0x0,8
tick,0x7ffe67f8feb4,78692617,0,0x0,8
tick,0x7ffe67f8feb4,78707628,0,0x0,8
tick,0x7ffe67f8feb4,78722731,0,0x0,8
tick,0x7ffe67f8feb4,78737559,0,0x0,8
tick,0x7ffe67f8feb4,78752718,0,0x0,8
tick,0x7ffe67f8feb4,78768280,0,0x0,8
tick,0x7ffe67f8feb4,78783470,0,0x0,8
tick,0x7ffe67f8feb4,78799876,0,0x0,8
tick,0x7ffe67f8feb4,78821407,0,0x0,8
tick,0x7ffe67f8feb4,78831413,0,0x0,8
tick,0x7ffe67f8feb4,78852141,0,0x0,8
tick,0x7ffe67f8feb4,78862422,0,0x0,8
tick,0x7ffe67f8feb4,78880474,0,0x0,8
tick,0x7ffe67f8feb4,78894472,0,0x0,8
tick,0x7ffe67f8feb4,78910303,0,0x0,8
tick,0x7ffe67f8feb4,78926237,0,0x0,8
tick,0x7ffe67f8feb4,78942275,0,0x0,8
tick,0x7ffe67f8feb4,78958251,0,0x0,8
tick,0x7ffe67f8feb4,78974235,0,0x0,8
tick,0x7ffe67f8feb4,78990255,0,0x0,8
tick,0x7ffe67f8feb4,79006302,0,0x0,8
tick,0x7ffe67f8feb4,79021381,0,0x0,8
tick,0x7ffe67f8feb4,79037246,0,0x0,8
tick,0x7ffe67f8feb4,79053272,0,0x0,8
tick,0x7ffe67f8feb4,79069228,0,0x0,8
tick,0x7ffe67f8feb4,79084369,0,0x0,8
tick,0x7ffe67f8feb4,79100262,0,0x0,8
tick,0x7ffe67f8feb4,79116250,0,0x0,8
tick,0x7ffe67f8feb4,79132260,0,0x0,8
tick,0x7ffe67f8feb4,79148249,0,0x0,8
tick,0x7ffe67f8feb4,79163689,0,0x0,8
tick,0x7ffe67f8feb4,79179522,0,0x0,8
tick,0x7ffe67f8feb4,79195516,0,0x0,8
tick,0x7ffe67f8feb4,79211514,0,0x0,8
tick,0x7ffe67f8feb4,79228032,0,0x0,8
tick,0x7ffe67f8feb4,79243382,0,0x0,8
tick,0x7ffe67f8feb4,79258694,0,0x0,8
tick,0x7ffe67f8feb4,79274671,0,0x0,8
tick,0x7ffe67f8feb4,79291790,0,0x0,8
tick,0x7ffe67f8feb4,79307004,0,0x0,8
tick,0x7ffe67f8feb4,79322665,0,0x0,8
tick,0x7ffe67f8feb4,79338645,0,0x0,8
tick,0x7ffe67f8feb4,79354654,0,0x0,8
tick,0x7ffe67f8feb4,79370655,0,0x0,8
tick,0x7ffe67f8feb4,79386286,0,0x0,8
tick,0x7ffe67f8feb4,79402291,0,0x0,8
tick,0x7ffe67f8feb4,79417685,0,0x0,8
tick,0x7ffe67f8feb4,79433688,0,0x0,8
tick,0x7ffe67f8feb4,79448814,0,0x0,8
tick,0x7ffe67f8feb4,79464678,0,0x0,8
tick,0x7ffe67f8feb4,79480704,0,0x0,8
tick,0x7ffe67f8feb4,79496253,0,0x0,8
tick,0x7ffe67f8feb4,79511850,0,0x0,8
tick,0x7ffe67f8feb4,79527869,0,0x0,8
tick,0x7ffe67f8feb4,79543850,0,0x0,8
tick,0x7ffe67f8feb4,79559868,0,0x0,8
tick,0x7ffe67f8feb4,79575838,0,0x0,8
tick,0x7ffe67f8feb4,79591833,0,0x0,8
tick,0x7ffe67f8feb4,79607855,0,0x0,8
tick,0x7ffe67f8feb4,79623850,0,0x0,8
tick,0x7ffe67f8feb4,79639828,0,0x0,8
tick,0x7ffe67f8feb4,79655208,0,0x0,8
tick,0x7ffe67f8feb4,79670662,0,0x0,8
tick,0x7ffe67f8feb4,79686234,0,0x0,8
tick,0x7ffe67f8feb4,79702272,0,0x0,8
tick,0x7ffe67f8feb4,79717051,0,0x0,8
tick,0x7ffe67f8feb4,79732406,0,0x0,8
tick,0x7ffe67f8feb4,79747568,0,0x0,8
tick,0x7ffe67f8feb4,79763403,0,0x0,8
tick,0x7ffe67f8feb4,79779404,0,0x0,8
tick,0x7ffe67f8feb4,79795229,0,0x0,8
tick,0x7ffe67f8feb4,79810438,0,0x0,8
tick,0x7ffe67f8feb4,79826478,0,0x0,8
tick,0x7ffe67f8feb4,79842401,0,0x0,8
tick,0x7ffe67f8feb4,79858221,0,0x0,8
tick,0x7ffe67f8feb4,79873371,0,0x0,8
tick,0x7ffe67f8feb4,79889410,0,0x0,8
tick,0x7ffe67f8feb4,79904560,0,0x0,8
tick,0x7ffe67f8feb4,79919984,0,0x0,8
tick,0x7ffe67f8feb4,79935221,0,0x0,8
tick,0x7ffe67f8feb4,79950753,0,0x0,8
tick,0x7ffe67f8feb4,79965637,0,0x0,8
tick,0x7ffe67f8feb4,79981180,0,0x0,8
tick,0x7ffe67f8feb4,79996521,0,0x0,8
tick,0x7ffe67f8feb4,80011925,0,0x0,8
tick,0x7ffe67f8feb4,80027769,0,0x0,8
tick,0x7ffe67f8feb4,80042994,0,0x0,8
tick,0x7ffe67f8feb4,80059020,0,0x0,8
tick,0x7ffe67f8feb4,80074955,0,0x0,8
tick,0x7ffe67f8feb4,80090527,0,0x0,8
tick,0x7ffe67f8feb4,80106225,0,0x0,8
tick,0x7ffe67f8feb4,80121648,0,0x0,8
tick,0x7ffe67f8feb4,80137319,0,0x0,8
tick,0x7ffe67f8feb4,80152706,0,0x0,8
tick,0x7ffe67f8feb4,80168369,0,0x0,8
tick,0x7ffe67f8feb4,80184547,0,0x0,8
tick,0x7ffe67f8feb4,80199465,0,0x0,8
tick,0x7ffe67f8feb4,80214879,0,0x0,8
tick,0x7ffe67f8feb4,80230502,0,0x0,8
tick,0x7ffe67f8feb4,80245440,0,0x0,8
tick,0x7ffe67f8feb4,80260822,0,0x0,8
tick,0x7ffe67f8feb4,80275657,0,0x0,8
tick,0x7ffe67f8feb4,80291735,0,0x0,8
tick,0x7ffe67f8feb4,80307100,0,0x0,8
tick,0x7ffe67f8feb4,80322304,0,0x0,8
tick,0x7ffe67f8feb4,80338127,0,0x0,8
tick,0x7ffe67f8feb4,80353701,0,0x0,8
tick,0x7ffe67f8feb4,80368652,0,0x0,8
tick,0x7ffe67f8feb4,80384657,0,0x0,8
tick,0x7ffe67f8feb4,80400764,0,0x0,8
tick,0x7ffe67f8feb4,80418025,0,0x0,8
tick,0x7ffe67f8feb4,80432382,0,0x0,8
tick,0x7ffe67f8feb4,80448445,0,0x0,8
tick,0x7ffe67f8feb4,80464381,0,0x0,8
tick,0x7ffe67f8feb4,80480385,0,0x0,8
tick,0x7ffe67f8feb4,80496532,0,0x0,8
tick,0x7ffe67f8feb4,80512386,0,0x0,8
tick,0x7ffe67f8feb4,80528405,0,0x0,8
tick,0x7ffe67f8feb4,80544772,0,0x0,8
tick,0x7ffe67f8feb4,80560389,0,0x0,8
tick,0x7ffe67f8feb4,80576396,0,0x0,8
tick,0x7ffe67f8feb4,80593089,0,0x0,8
tick,0x7ffe67f8feb4,80607745,0,0x0,8
tick,0x7ffe67f8feb4,80624103,0,0x0,8
tick,0x7ffe67f8feb4,80638587,0,0x0,8
tick,0x7ffe67f8feb4,80654379,0,0x0,8
tick,0x7ffe67f8feb4,80670394,0,0x0,8
tick,0x7ffe67f8feb4,80685414,0,0x0,8
tick,0x7ffe67f8feb4,80700397,0,0x0,8
tick,0x7ffe67f8feb4,80715403,0,0x0,8
tick,0x7ffe67f8feb4,80730416,0,0x0,8
tick,0x7ffe67f8feb4,80745379,0,0x0,8
tick,0x7ffe67f8feb4,80760383,0,0x0,8
tick,0x7ffe67f8feb4,80776446,0,0x0,8
tick,0x7ffe67f8feb4,80792432,0,0x0,8
tick,0x7ffe67f8feb4,80807257,0,0x0,8
tick,0x7ffe67f8feb4,80823276,0,0x0,8
tick,0x7ffe67f8feb4,80838265,0,0x0,8
tick,0x7ffe67f8feb4,80853254,0,0x0,8
tick,0x7ffe67f8feb4,80868282,0,0x0,8
tick,0x7ffe67f8feb4,80884251,0,0x0,8
tick,0x7ffe67f8feb4,80900232,0,0x0,8
tick,0x7ffe67f8feb4,80916368,0,0x0,8
tick,0x7ffe67f8feb4,80931351,0,0x0,8
tick,0x7ffe67f8feb4,80947225,0,0x0,8
tick,0x7ffe67f8feb4,80963251,0,0x0,8
tick,0x7ffe67f8feb4,80979271,0,0x0,8
tick,0x7ffe67f8feb4,80995231,0,0x0,8
tick,0x7ffe67f8feb4,81010253,0,0x0,8
tick,0x7ffe67f8feb4,81025259,0,0x0,8
tick,0x7ffe67f8feb4,81041277,0,0x0,8
tick,0x7ffe67f8feb4,81057418,0,0x0,8
tick,0x7ffe67f8feb4,81072909,0,0x0,8
tick,0x7ffe67f8feb4,81088314,0,0x0,8
tick,0x7ffe67f8feb4,81104335,0,0x0,8
tick,0x7ffe67f8feb4,81119458,0,0x0,8
tick,0x7ffe67f8feb4,81135265,0,0x0,8
tick,0x7ffe67f8feb4,81150421,0,0x0,8
tick,0x7ffe67f8feb4,81165240,0,0x0,8
tick,0x7ffe67f8feb4,81180432,0,0x0,8
tick,0x7ffe67f8feb4,81195188,0,0x0,8
tick,0x7ffe67f8feb4,81210902,0,0x0,8
tick,0x7ffe67f8feb4,81226235,0,0x0,8
tick,0x7ffe67f8feb4,81241651,0,0x0,8
tick,0x7ffe67f8feb4,81256296,0,0x0,8
tick,0x7ffe67f8feb4,81271623,0,0x0,8
tick,0x7ffe67f8feb4,81287161,0,0x0,8
tick,0x7ffe67f8feb4,81301606,0,0x0,8
tick,0x7ffe67f8feb4,81317577,0,0x0,8
tick,0x7ffe67f8feb4,81333596,0,0x0,8
tick,0x7ffe67f8feb4,81349587,0,0x0,8
tick,0x7ffe67f8feb4,81365633,0,0x0,8
tick,0x7ffe67f8feb4,81381584,0,0x0,8
tick,0x7ffe67f8feb4,81397618,0,0x0,8
tick,0x7ffe67f8feb4,81412876,0,0x0,8
tick,0x7ffe67f8feb4,81428221,0,0x0,8
tick,0x7ffe67f8feb4,81444266,0,0x0,8
tick,0x7ffe67f8feb4,81459772,0,0x0,8
tick,0x7ffe67f8feb4,81475204,0,0x0,8
tick,0x7ffe67f8feb4,81490325,0,0x0,8
tick,0x7ffe67f8feb4,81506227,0,0x0,8
tick,0x7ffe67f8feb4,81522503,0,0x0,8
tick,0x7ffe67f8feb4,81537566,0,0x0,8
tick,0x7ffe67f8feb4,81552514,0,0x0,8
tick,0x7ffe67f8feb4,81568499,0,0x0,8
tick,0x7ffe67f8feb4,81584371,0,0x0,8
tick,0x7ffe67f8feb4,81600384,0,0x0,8
tick,0x7ffe67f8feb4,81616346,0,0x0,8
tick,0x7ffe67f8feb4,81631467,0,0x0,8
tick,0x7ffe67f8feb4,81647058,0,0x0,8
tick,0x7ffe67f8feb4,81663001,0,0x0,8
tick,0x7ffe67f8feb4,81678335,0,0x0,8
tick,0x7ffe67f8feb4,81694350,0,0x0,8
tick,0x7ffe67f8feb4,81709503,0,0x0,8
tick,0x7ffe67f8feb4,81724847,0,0x0,8
tick,0x7ffe67f8feb4,81741284,0,0x0,8
tick,0x7ffe67f8feb4,81756261,0,0x0,8
tick,0x7ffe67f8feb4,81771191,0,0x0,8
tick,0x7ffe67f8feb4,81787340,0,0x0,8
tick,0x7ffe67f8feb4,81802698,0,0x0,8
tick,0x7ffe67f8feb4,81818328,0,0x0,8
tick,0x7ffe67f8feb4,81833335,0,0x0,8
tick,0x7ffe67f8feb4,81848402,0,0x0,8
tick,0x7ffe67f8feb4,81864734,0,0x0,8
tick,0x7ffe67f8feb4,81879944,0,0x0,8
tick,0x7ffe67f8feb4,81895363,0,0x0,8
tick,0x7ffe67f8feb4,81911297,0,0x0,8
tick,0x7ffe67f8feb4,81927538,0,0x0,8
tick,0x7ffe67f8feb4,81943716,0,0x0,8
tick,0x7ffe67f8feb4,81959206,0,0x0,8
tick,0x7ffe67f8feb4,81974885,0,0x0,8
tick,0x7ffe67f8feb4,81990581,0,0x0,8
tick,0x7ffe67f8feb4,82006227,0,0x0,8
tick,0x7ffe67f8feb4,82021429,0,0x0,8
tick,0x7ffe67f8feb4,82037321,0,0x0,8
tick,0x7ffe67f8feb4,82052323,0,0x0,8
tick,0x7ffe67f8feb4,82067252,0,0x0,8
tick,0x7ffe67f8feb4,82083605,0,0x0,8
tick,0x7ffe67f8feb4,82098330,0,0x0,8
tick,0x7ffe67f8feb4,82113456,0,0x0,8
tick,0x7ffe67f8feb4,82129334,0,0x0,8
tick,0x7ffe67f8feb4,82144243,0,0x0,8
tick,0x7ffe67f8feb4,82160322,0,0x0,8
tick,0x7ffe67f8feb4,82176280,0,0x0,8
tick,0x7ffe67f8feb4,82192242,0,0x0,8
tick,0x7ffe67f8feb4,82208250,0,0x0,8
tick,0x7ffe67f8feb4,82223261,0,0x0,8
tick,0x7ffe67f8feb4,82238344,0,0x0,8
tick,0x7ffe67f8feb4,82253725,0,0x0,8
tick,0x7ffe67f8feb4,82269269,0,0x0,8
tick,0x7ffe67f8feb4,82285275,0,0x0,8
tick,0x7ffe67f8feb4,82300347,0,0x0,8
tick,0x7ffe67f8feb4,82316223,0,0x0,8
tick,0x7ffe67f8feb4,82331310,0,0x0,8
tick,0x7ffe67f8feb4,82347435,0,0x0,8
tick,0x7ffe67f8feb4,82362547,0,0x0,8
tick,0x7ffe67f8feb4,82378314,0,0x0,8
tick,0x7ffe67f8feb4,82394322,0,0x0,8
tick,0x7ffe67f8feb4,82409825,0,0x0,8
tick,0x7ffe67f8feb4,82425031,0,0x0,8
tick,0x7ffe67f8feb4,82441011,0,0x0,8
tick,0x7ffe67f8feb4,82456215,0,0x0,8
tick,0x7ffe67f8feb4,82472262,0,0x0,8
tick,0x7ffe67f8feb4,82488221,0,0x0,8
tick,0x7ffe67f8feb4,82504226,0,0x0,8
tick,0x7ffe67f8feb4,82520228,0,0x0,8
tick,0x7ffe67f8feb4,82535237,0,0x0,8
tick,0x7ffe67f8feb4,82550539,0,0x0,8
tick,0x7ffe67f8feb4,82566491,0,0x0,8
tick,0x7ffe67f8feb4,82582474,0,0x0,8
tick,0x7ffe67f8feb4,82598553,0,0x0,8
tick,0x7ffe67f8feb4,82614480,0,0x0,8
tick,0x7ffe67f8feb4,82629808,0,0x0,8
tick,0x7ffe67f8feb4,82644833,0,0x0,8
tick,0x7ffe67f8feb4,82660875,0,0x0,8
tick,0x7ffe67f8feb4,82676233,0,0x0,8
tick,0x7ffe67f8feb4,82692314,0,0x0,8
tick,0x7ffe67f8feb4,82708248,0,0x0,8
tick,0x7ffe67f8feb4,82724339,0,0x0,8
tick,0x7ffe67f8feb4,82740504,0,0x0,8
tick,0x7ffe67f8feb4,82755253,0,0x0,8
tick,0x7ffe67f8feb4,82771323,0,0x0,8
tick,0x7ffe67f8feb4,82786536,0,0x0,8
tick,0x7ffe67f8feb4,82802243,0,0x0,8
tick,0x7ffe67f8feb4,82817238,0,0x0,8
tick,0x7ffe67f8feb4,82832857,0,0x0,8
tick,0x7ffe67f8feb4,82848848,0,0x0,8
tick,0x7ffe67f8feb4,82864218,0,0x0,8
tick,0x7ffe67f8feb4,82880085,0,0x0,8
tick,0x7ffe67f8feb4,82895272,0,0x0,8
tick,0x7ffe67f8feb4,82911362,0,0x0,8
tick,0x7ffe67f8feb4,82927232,0,0x0,8
tick,0x7ffe67f8feb4,82943255,0,0x0,8
tick,0x7ffe67f8feb4,82959233,0,0x0,8
tick,0x7ffe67f8feb4,82975033,0,0x0,8
tick,0x7ffe67f8feb4,82990251,0,0x0,8
tick,0x7ffe67f8feb4,83006262,0,0x0,8
tick,0x7ffe67f8feb4,83022376,0,0x0,8
tick,0x7ffe67f8feb4,83038314,0,0x0,8
tick,0x7ffe67f8feb4,83054264,0,0x0,8
tick,0x7ffe67f8feb4,83070210,0,0x0,8
tick,0x7ffe67f8feb4,83086240,0,0x0,8
tick,0x7ffe67f8feb4,83101584,0,0x0,8
tick,0x7ffe67f8feb4,83117242,0,0x0,8
tick,0x7ffe67f8feb4,83133235,0,0x0,8
tick,0x7ffe67f8feb4,83148386,0,0x0,8
tick,0x7ffe67f8feb4,83163563,0,0x0,8
tick,0x7ffe67f8feb4,83179531,0,0x0,8
tick,0x7ffe67f8feb4,83195570,0,0x0,8
tick,0x7ffe67f8feb4,83211577,0,0x0,8
tick,0x7ffe67f8feb4,83227249,0,0x0,8
tick,0x7ffe67f8feb4,83242324,0,0x0,8
tick,0x7ffe67f8feb4,83258263,0,0x0,8
tick,0x7ffe67f8feb4,83274290,0,0x0,8
tick,0x7ffe67f8feb4,83289328,0,0x0,8
tick,0x7ffe67f8feb4,83304495,0,0x0,8
tick,0x7ffe67f8feb4,83320451,0,0x0,8
tick,0x7ffe67f8feb4,83336297,0,0x0,8
tick,0x7ffe67f8feb4,83351615,0,0x0,8
tick,0x7ffe67f8feb4,83366284,0,0x0,8
tick,0x7ffe67f8feb4,83382544,0,0x0,8
tick,0x7ffe67f8feb4,83398329,0,0x0,8
tick,0x7ffe67f8feb4,83413573,0,0x0,8
tick,0x7ffe67f8feb4,83428516,0,0x0,8
tick,0x7ffe67f8feb4,83443923,0,0x0,8
tick,0x7ffe67f8feb4,83458911,0,0x0,8
tick,0x7ffe67f8feb4,83474195,0,0x0,8
tick,0x7ffe67f8feb4,83489923,0,0x0,8
tick,0x7ffe67f8feb4,83505547,0,0x0,8
tick,0x7ffe67f8feb4,83520653,0,0x0,8
tick,0x7ffe67f8feb4,83536519,0,0x0,8
tick,0x7ffe67f8feb4,83552810,0,0x0,8
tick,0x7ffe67f8feb4,83568930,0,0x0,8
tick,0x7ffe67f8feb4,83584781,0,0x0,8
tick,0x7ffe67f8feb4,83600786,0,0x0,8
tick,0x7ffe67f8feb4,83616784,0,0x0,8
tick,0x7ffe67f8feb4,83632823,0,0x0,8
tick,0x7ffe67f8feb4,83648842,0,0x0,8
tick,0x7ffe67f8feb4,83664626,0,0x0,8
tick,0x7ffe67f8feb4,83679875,0,0x0,8
tick,0x7ffe67f8feb4,83695937,0,0x0,8
tick,0x7ffe67f8feb4,83711930,0,0x0,8
tick,0x7ffe67f8feb4,83727893,0,0x0,8
tick,0x7ffe67f8feb4,83743981,0,0x0,8
tick,0x7ffe67f8feb4,83759002,0,0x0,8
tick,0x7ffe67f8feb4,83774485,0,0x0,8
tick,0x7ffe67f8feb4,83790526,0,0x0,8
tick,0x7ffe67f8feb4,83806565,0,0x0,8
tick,0x7ffe67f8feb4,83821977,0,0x0,8
tick,0x7ffe67f8feb4,83837266,0,0x0,8
tick,0x7ffe67f8feb4,83852421,0,0x0,8
tick,0x7ffe67f8feb4,83868340,0,0x0,8
tick,0x7ffe67f8feb4,83884408,0,0x0,8
tick,0x7ffe67f8feb4,83900507,0,0x0,8
tick,0x7ffe67f8feb4,83916713,0,0x0,8
tick,0x7ffe67f8feb4,83932479,0,0x0,8
tick,0x7ffe67f8feb4,83947655,0,0x0,8
tick,0x7ffe67f8feb4,83963630,0,0x0,8
tick,0x7ffe67f8feb4,83979607,0,0x0,8
tick,0x7ffe67f8feb4,83995600,0,0x0,8
tick,0x7ffe67f8feb4,84011785,0,0x0,8
tick,0x7ffe67f8feb4,84026270,0,0x0,8
tick,0x7ffe67f8feb4,84041927,0,0x0,8
tick,0x7ffe67f8feb4,84057925,0,0x0,8
tick,0x7ffe67f8feb4,84073970,0,0x0,8
tick,0x7ffe67f8feb4,84089909,0,0x0,8
tick,0x7ffe67f8feb4,84105914,0,0x0,8
tick,0x7ffe67f8feb4,84121914,0,0x0,8
tick,0x7ffe67f8feb4,84137915,0,0x0,8
tick,0x7ffe67f8feb4,84153929,0,0x0,8
tick,0x7ffe67f8feb4,84169924,0,0x0,8
tick,0x7ffe67f8feb4,84185922,0,0x0,8
tick,0x7ffe67f8feb4,84201920,0,0x0,8
tick,0x7ffe67f8feb4,84217914,0,0x0,8
tick,0x7ffe67f8feb4,84233248,0,0x0,8
tick,0x7ffe67f8feb4,84249368,0,0x0,8
tick,0x7ffe67f8feb4,84264608,0,0x0,8
tick,0x7ffe67f8feb4,84280280,0,0x0,8
tick,0x7ffe67f8feb4,84295988,0,0x0,8
tick,0x7ffe67f8feb4,84311478,0,0x0,8
tick,0x7ffe67f8feb4,84326968,0,0x0,8
tick,0x7ffe67f8feb4,84342171,0,0x0,8
tick,0x7ffe67f8feb4,84358000,0,0x0,8
tick,0x7ffe67f8feb4,84373387,0,0x0,8
tick,0x7ffe67f8feb4,84389049,0,0x0,8
tick,0x7ffe67f8feb4,84405086,0,0x0,8
tick,0x7ffe67f8feb4,84420544,0,0x0,8
tick,0x7ffe67f8feb4,84435717,0,0x0,8
tick,0x7ffe67f8feb4,84451255,0,0x0,8
tick,0x7ffe67f8feb4,84466646,0,0x0,8
tick,0x7ffe67f8feb4,84482321,0,0x0,8
tick,0x7ffe67f8feb4,84497296,0,0x0,8
tick,0x7ffe67f8feb4,84513305,0,0x0,8
tick,0x7ffe67f8feb4,84529243,0,0x0,8
tick,0x7ffe67f8feb4,84544978,0,0x0,8
tick,0x7ffe67f8feb4,84560343,0,0x0,8
tick,0x7ffe67f8feb4,84576336,0,0x0,8
tick,0x7ffe67f8feb4,84592334,0,0x0,8
tick,0x7ffe67f8feb4,84608345,0,0x0,8
tick,0x7ffe67f8feb4,84623960,0,0x0,8
tick,0x7ffe67f8feb4,84639411,0,0x0,8
tick,0x7ffe67f8feb4,84655290,0,0x0,8
tick,0x7ffe67f8feb4,84671343,0,0x0,8
tick,0x7ffe67f8feb4,84686523,0,0x0,8
tick,0x7ffe67f8feb4,84702598,0,0x0,8
tick,0x7ffe67f8feb4,84718613,0,0x0,8
tick,0x7ffe67f8feb4,84734594,0,0x0,8
tick,0x7ffe67f8feb4,84750444,0,0x0,8
tick,0x7ffe67f8feb4,84766268,0,0x0,8
tick,0x7ffe67f8feb4,84781867,0,0x0,8
tick,0x7ffe67f8feb4,84797457,0,0x0,8
tick,0x7ffe67f8feb4,84813441,0,0x0,8
tick,0x7ffe67f8feb4,84828839,0,0x0,8
tick,0x7ffe67f8feb4,84844918,0,0x0,8
tick,0x7ffe67f8feb4,84860944,0,0x0,8
tick,0x7ffe67f8feb4,84876261,0,0x0,8
tick,0x7ffe67f8feb4,84891364,0,0x0,8
tick,0x7ffe67f8feb4,84907266,0,0x0,8
tick,0x7ffe67f8feb4,84922888,0,0x0,8
tick,0x7ffe67f8feb4,84938278,0,0x0,8
tick,0x7ffe67f8feb4,84953516,0,0x0,8
tick,0x7ffe67f8feb4,84968515,0,0x0,8
tick,0x7ffe67f8feb4,84984631,0,0x0,8
tick,0x7ffe67f8feb4,85000784,0,0x0,8
tick,0x7ffe67f8feb4,85016781,0,0x0,8
tick,0x7ffe67f8feb4,85032621,0,0x0,8
tick,0x7ffe67f8feb4,85048682,0,0x0,8
tick,0x7ffe67f8feb4,85064700,0,0x0,8
tick,0x7ffe67f8feb4,85080676,0,0x0,8
tick,0x7ffe67f8feb4,85096678,0,0x0,8
tick,0x7ffe67f8feb4,85112429,0,0x0,8
tick,0x7ffe67f8feb4,85127960,0,0x0,8
tick,0x7ffe67f8feb4,85143181,0,0x0,8
tick,0x7ffe67f8feb4,85158362,0,0x0,8
tick,0x7ffe67f8feb4,85174066,0,0x0,8
tick,0x7ffe67f8feb4,85189691,0,0x0,8
tick,0x7ffe67f8feb4,85205849,0,0x0,8
tick,0x7ffe67f8feb4,85221377,0,0x0,8
tick,0x7ffe67f8feb4,85236861,0,0x0,8
tick,0x7ffe67f8feb4,85252860,0,0x0,8
tick,0x7ffe67f8feb4,85268339,0,0x0,8
tick,0x7ffe67f8feb4,85284009,0,0x0,8
tick,0x7ffe67f8feb4,85299286,0,0x0,8
tick,0x7ffe67f8feb4,85315281,0,0x0,8
tick,0x7ffe67f8feb4,85331331,0,0x0,8
tick,0x7ffe67f8feb4,85346502,0,0x0,8
tick,0x7ffe67f8feb4,85361899,0,0x0,8
tick,0x7ffe67f8feb4,85377756,0,0x0,8
tick,0x7ffe67f8feb4,85392653,0,0x0,8
tick,0x7ffe67f8feb4,85407729,0,0x0,8
tick,0x7ffe67f8feb4,85423323,0,0x0,8
tick,0x7ffe67f8feb4,85438810,0,0x0,8
tick,0x7ffe67f8feb4,85454478,0,0x0,8
tick,0x7ffe67f8feb4,85470182,0,0x0,8
tick,0x7ffe67f8feb4,85486153,0,0x0,8
tick,0x7ffe67f8feb4,85502284,0,0x0,8
tick,0x7ffe67f8feb4,85518010,0,0x0,8
tick,0x7ffe67f8feb4,85533655,0,0x0,8
tick,0x7ffe67f8feb4,85549537,0,0x0,8
tick,0x7ffe67f8feb4,85565578,0,0x0,8
tick,0x7ffe67f8feb4,85581548,0,0x0,8
tick,0x7ffe67f8feb4,85597552,0,0x0,8
tick,0x7ffe67f8feb4,85613670,0,0x0,8
tick,0x7ffe67f8feb4,85629425,0,0x0,8
tick,0x7ffe67f8feb4,85644640,0,0x0,8
tick,0x7ffe67f8feb4,85660647,0,0x0,8
tick,0x7ffe67f8feb4,85676316,0,0x0,8
tick,0x7ffe67f8feb4,85692371,0,0x0,8
tick,0x7ffe67f8feb4,85708416,0,0x0,8
tick,0x7ffe67f8feb4,85723560,0,0x0,8
tick,0x7ffe67f8feb4,85739458,0,0x0,8
tick,0x7ffe67f8feb4,85755295,0,0x0,8
tick,0x7ffe67f8feb4,85770535,0,0x0,8
tick,0x7ffe67f8feb4,85785341,0,0x0,8
tick,0x7ffe67f8feb4,85801202,0,0x0,8
tick,0x7ffe67f8feb4,85816306,0,0x0,8
tick,0x7ffe67f8feb4,85832294,0,0x0,8
tick,0x7ffe67f8feb4,85847599,0,0x0,8
tick,0x7ffe67f8feb4,85863938,0,0x0,8
tick,0x7ffe67f8feb4,85879089,0,0x0,8
tick,0x7ffe67f8feb4,85894055,0,0x0,8
tick,0x7ffe67f8feb4,85910095,0,0x0,8
tick,0x7ffe67f8feb4,85925536,0,0x0,8
tick,0x7ffe67f8feb4,85941410,0,0x0,8
tick,0x7ffe67f8feb4,85956796,0,0x0,8
tick,0x7ffe67f8feb4,85971776,0,0x0,8
tick,0x7ffe67f8feb4,85987864,0,0x0,8
tick,0x7ffe67f8feb4,86003264,0,0x0,8
tick,0x7ffe67f8feb4,86018929,0,0x0,8
tick,0x7ffe67f8feb4,86034194,0,0x0,8
tick,0x7ffe67f8feb4,86050269,0,0x0,8
tick,0x7ffe67f8feb4,86065775,0,0x0,8
tick,0x7ffe67f8feb4,86081458,0,0x0,8
tick,0x7ffe67f8feb4,86096800,0,0x0,8
tick,0x7ffe67f8feb4,86113162,0,0x0,8
tick,0x7ffe67f8feb4,86128418,0,0x0,8
tick,0x7ffe67f8feb4,86143550,0,0x0,8
tick,0x7ffe67f8feb4,86158476,0,0x0,8
tick,0x7ffe67f8feb4,86174576,0,0x0,8
tick,0x7ffe67f8feb4,86190183,0,0x0,8
tick,0x7ffe67f8feb4,86205544,0,0x0,8
tick,0x7ffe67f8feb4,86221098,0,0x0,8
tick,0x7ffe67f8feb4,86236336,0,0x0,8
tick,0x7ffe67f8feb4,86251716,0,0x0,8
tick,0x7ffe67f8feb4,86266958,0,0x0,8
tick,0x7ffe67f8feb4,86283014,0,0x0,8
tick,0x7ffe67f8feb4,86298925,0,0x0,8
tick,0x7ffe67f8feb4,86314933,0,0x0,8
tick,0x7ffe67f8feb4,86331064,0,0x0,8
tick,0x7ffe67f8feb4,86346440,0,0x0,8
tick,0x7ffe67f8feb4,86361745,0,0x0,8
tick,0x7ffe67f8feb4,86377769,0,0x0,8
tick,0x7ffe67f8feb4,86393809,0,0x0,8
tick,0x7ffe67f8feb4,86409476,0,0x0,8
tick,0x7ffe67f8feb4,86424941,0,0x0,8
tick,0x7ffe67f8feb4,86440370,0,0x0,8
tick,0x7ffe67f8feb4,86455364,0,0x0,8
tick,0x7ffe67f8feb4,86470502,0,0x0,8
tick,0x7ffe67f8feb4,86485723,0,0x0,8
tick,0x7ffe67f8feb4,86501766,0,0x0,8
tick,0x7ffe67f8feb4,86517402,0,0x0,8
tick,0x7ffe67f8feb4,86532970,0,0x0,8
tick,0x7ffe67f8feb4,86548757,0,0x0,8
tick,0x7ffe67f8feb4,86563980,0,0x0,8
tick,0x7ffe67f8feb4,86579921,0,0x0,8
tick,0x7ffe67f8feb4,86596126,0,0x0,8
tick,0x7ffe67f8feb4,86611908,0,0x0,8
tick,0x7ffe67f8feb4,86627901,0,0x0,8
tick,0x7ffe67f8feb4,86644166,0,0x0,8
tick,0x7ffe67f8feb4,86659298,0,0x0,8
tick,0x7ffe67f8feb4,86675342,0,0x0,8
tick,0x7ffe67f8feb4,86690722,0,0x0,8
tick,0x7ffe67f8feb4,86706386,0,0x0,8
tick,0x7ffe67f8feb4,86721874,0,0x0,8
tick,0x7ffe67f8feb4,86736845,0,0x0,8
tick,0x7ffe67f8feb4,86752906,0,0x0,8
tick,0x7ffe67f8feb4,86768959,0,0x0,8
tick,0x7ffe67f8feb4,86784366,0,0x0,8
tick,0x7ffe67f8feb4,86800206,0,0x0,8
tick,0x7ffe67f8feb4,86816599,0,0x0,8
tick,0x7ffe67f8feb4,86832248,0,0x0,8
tick,0x7ffe67f8feb4,86847699,0,0x0,8
tick,0x7ffe67f8feb4,86863495,0,0x0,8
tick,0x7ffe67f8feb4,86879127,0,0x0,8
tick,0x7ffe67f8feb4,86894869,0,0x0,8
tick,0x7ffe67f8feb4,86910388,0,0x0,8
tick,0x7ffe67f8feb4,86925663,0,0x0,8
tick,0x7ffe67f8feb4,86941443,0,0x0,8
tick,0x7ffe67f8feb4,86957546,0,0x0,8
tick,0x7ffe67f8feb4,86973730,0,0x0,8
tick,0x7ffe67f8feb4,86989333,0,0x0,8
tick,0x7ffe67f8feb4,87005171,0,0x0,8
tick,0x7ffe67f8feb4,87021120,0,0x0,8
tick,0x7ffe67f8feb4,87037597,0,0x0,8
tick,0x7ffe67f8feb4,87053378,0,0x0,8
tick,0x7ffe67f8feb4,87069089,0,0x0,8
tick,0x7ffe67f8feb4,87084346,0,0x0,8
tick,0x7ffe67f8feb4,87100005,0,0x0,8
tick,0x7ffe67f8feb4,87115639,0,0x0,8
tick,0x7ffe67f8feb4,87131091,0,0x0,8
tick,0x7ffe67f8feb4,87147120,0,0x0,8
tick,0x7ffe67f8feb4,87162886,0,0x0,8
tick,0x7ffe67f8feb4,87178612,0,0x0,8
tick,0x7ffe67f8feb4,87194333,0,0x0,8
tick,0x7ffe67f8feb4,87209735,0,0x0,8
tick,0x7ffe67f8feb4,87225070,0,0x0,8
tick,0x7ffe67f8feb4,87241040,0,0x0,8
tick,0x7ffe67f8feb4,87257072,0,0x0,8
tick,0x7ffe67f8feb4,87272524,0,0x0,8
tick,0x7ffe67f8feb4,87288469,0,0x0,8
tick,0x7ffe67f8feb4,87304062,0,0x0,8
tick,0x7ffe67f8feb4,87319717,0,0x0,8
tick,0x7ffe67f8feb4,87335105,0,0x0,8
tick,0x7ffe67f8feb4,87349777,0,0x0,8
tick,0x7ffe67f8feb4,87364802,0,0x0,8
tick,0x7ffe67f8feb4,87381088,0,0x0,8
tick,0x7ffe67f8feb4,87397133,0,0x0,8
tick,0x7ffe67f8feb4,87412609,0,0x0,8
tick,0x7ffe67f8feb4,87427726,0,0x0,8
tick,0x7ffe67f8feb4,87443196,0,0x0,8
tick,0x7ffe67f8feb4,87458917,0,0x0,8
tick,0x7ffe67f8feb4,87474366,0,0x0,8
tick,0x7ffe67f8feb4,87490194,0,0x0,8
tick,0x7ffe67f8feb4,87505203,0,0x0,8
tick,0x7ffe67f8feb4,87520894,0,0x0,8
tick,0x7ffe67f8feb4,87535774,0,0x0,8
tick,0x7ffe67f8feb4,87551905,0,0x0,8
tick,0x7ffe67f8feb4,87567182,0,0x0,8
tick,0x7ffe67f8feb4,87583175,0,0x0,8
tick,0x7ffe67f8feb4,87599096,0,0x0,8
tick,0x7ffe67f8feb4,87615081,0,0x0,8
tick,0x7ffe67f8feb4,87631246,0,0x0,8
tick,0x7ffe67f8feb4,87647122,0,0x0,8
tick,0x7ffe67f8feb4,87662257,0,0x0,8
tick,0x7ffe67f8feb4,87678294,0,0x0,8
tick,0x7ffe67f8feb4,87693243,0,0x0,8
tick,0x7ffe67f8feb4,87708781,0,0x0,8
tick,0x7ffe67f8feb4,87724091,0,0x0,8
tick,0x7ffe67f8feb4,87739611,0,0x0,8
tick,0x7ffe67f8feb4,87754990,0,0x0,8
tick,0x7ffe67f8feb4,87770907,0,0x0,8
tick,0x7ffe67f8feb4,87787055,0,0x0,8
tick,0x7ffe67f8feb4,87803057,0,0x0,8
tick,0x7ffe67f8feb4,87819074,0,0x0,8
tick,0x7ffe67f8feb4,87834312,0,0x0,8
tick,0x7ffe67f8feb4,87850003,0,0x0,8
tick,0x7ffe67f8feb4,87865910,0,0x0,8
tick,0x7ffe67f8feb4,87881324,0,0x0,8
tick,0x7ffe67f8feb4,87896580,0,0x0,8
tick,0x7ffe67f8feb4,87912238,0,0x0,8
tick,0x7ffe67f8feb4,87927862,0,0x0,8
tick,0x7ffe67f8feb4,87943107,0,0x0,8
tick,0x7ffe67f8feb4,87958764,0,0x0,8
tick,0x7ffe67f8feb4,87974365,0,0x0,8
tick,0x7ffe67f8feb4,87989676,0,0x0,8
tick,0x7ffe67f8feb4,88005624,0,0x0,8
tick,0x7ffe67f8feb4,88020565,0,0x0,8
tick,0x7ffe67f8feb4,88036050,0,0x0,8
tick,0x7ffe67f8feb4,88051479,0,0x0,8
tick,0x7ffe67f8feb4,88066828,0,0x0,8
tick,0x7ffe67f8feb4,88082280,0,0x0,8
tick,0x7ffe67f8feb4,88097604,0,0x0,8
tick,0x7ffe67f8feb4,88113865,0,0x0,8
tick,0x7ffe67f8feb4,88129044,0,0x0,8
tick,0x7ffe67f8feb4,88145254,0,0x0,8
tick,0x7ffe67f8feb4,88161461,0,0x0,8
tick,0x7ffe67f8feb4,88176987,0,0x0,8
tick,0x7ffe67f8feb4,88192495,0,0x0,8
tick,0x7ffe67f8feb4,88208151,0,0x0,8
tick,0x7ffe67f8feb4,88223672,0,0x0,8
tick,0x7ffe67f8feb4,88239338,0,0x0,8
tick,0x7ffe67f8feb4,88254605,0,0x0,8
tick,0x7ffe67f8feb4,88270317,0,0x0,8
tick,0x7ffe67f8feb4,88285718,0,0x0,8
tick,0x7ffe67f8feb4,88300852,0,0x0,8
tick,0x7ffe67f8feb4,88316025,0,0x0,8
tick,0x7ffe67f8feb4,88331955,0,0x0,8
tick,0x7ffe67f8feb4,88347399,0,0x0,8
tick,0x7ffe67f8feb4,88363357,0,0x0,8
tick,0x7ffe67f8feb4,88379234,0,0x0,8
tick,0x7ffe67f8feb4,88394912,0,0x0,8
tick,0x7ffe67f8feb4,88410362,0,0x0,8
tick,0x7ffe67f8feb4,88426097,0,0x0,8
tick,0x7ffe67f8feb4,88441774,0,0x0,8
tick,0x7ffe67f8feb4,88457831,0,0x0,8
tick,0x7ffe67f8feb4,88473060,0,0x0,8
tick,0x7ffe67f8feb4,88488868,0,0x0,8
tick,0x7ffe67f8feb4,88504846,0,0x0,8
tick,0x7ffe67f8feb4,88520849,0,0x0,8
tick,0x7ffe67f8feb4,88536892,0,0x0,8
tick,0x7ffe67f8feb4,88552905,0,0x0,8
tick,0x7ffe67f8feb4,88568128,0,0x0,8
tick,0x7ffe67f8feb4,88584209,0,0x0,8
tick,0x7ffe67f8feb4,88600160,0,0x0,8
tick,0x7ffe67f8feb4,88616148,0,0x0,8
tick,0x7ffe67f8feb4,88632184,0,0x0,8
tick,0x7ffe67f8feb4,88646832,0,0x0,8
tick,0x7ffe67f8feb4,88662831,0,0x0,8
tick,0x7ffe67f8feb4,88678221,0,0x0,8
tick,0x7ffe67f8feb4,88694296,0,0x0,8
tick,0x7ffe67f8feb4,88709463,0,0x0,8
tick,0x7ffe67f8feb4,88725328,0,0x0,8
tick,0x7ffe67f8feb4,88740484,0,0x0,8
tick,0x7ffe67f8feb4,88755761,0,0x0,8
tick,0x7ffe67f8feb4,88771499,0,0x0,8
tick,0x7ffe67f8feb4,88787591,0,0x0,8
tick,0x7ffe67f8feb4,88803600,0,0x0,8
tick,0x7ffe67f8feb4,88819186,0,0x0,8
tick,0x7ffe67f8feb4,88834923,0,0x0,8
tick,0x7ffe67f8feb4,88850953,0,0x0,8
tick,0x7ffe67f8feb4,88866175,0,0x0,8
tick,0x7ffe67f8feb4,88881759,0,0x0,8
tick,0x7ffe67f8feb4,88897072,0,0x0,8
tick,0x7ffe67f8feb4,88912429,0,0x0,8
tick,0x7ffe67f8feb4,88927971,0,0x0,8
tick,0x7ffe67f8feb4,88943380,0,0x0,8
tick,0x7ffe67f8feb4,88958410,0,0x0,8
tick,0x7ffe67f8feb4,88973732,0,0x0,8
tick,0x7ffe67f8feb4,88989363,0,0x0,8
tick,0x7ffe67f8feb4,89005635,0,0x0,8
tick,0x7ffe67f8feb4,89021832,0,0x0,8
tick,0x7ffe67f8feb4,89037876,0,0x0,8
tick,0x7ffe67f8feb4,89053641,0,0x0,8
tick,0x7ffe67f8feb4,89068512,0,0x0,8
tick,0x7ffe67f8feb4,89084557,0,0x0,8
tick,0x7ffe67f8feb4,89100186,0,0x0,8
tick,0x7ffe67f8feb4,89115852,0,0x0,8
tick,0x7ffe67f8feb4,89131287,0,0x0,8
tick,0x7ffe67f8feb4,89146957,0,0x0,8
tick,0x7ffe67f8feb4,89162674,0,0x0,8
tick,0x7ffe67f8feb4,89178275,0,0x0,8
tick,0x7ffe67f8feb4,89193860,0,0x0,8
tick,0x7ffe67f8feb4,89209088,0,0x0,8
tick,0x7ffe67f8feb4,89224350,0,0x0,8
tick,0x7ffe67f8feb4,89240039,0,0x0,8
tick,0x7ffe67f8feb4,89255883,0,0x0,8
tick,0x7ffe67f8feb4,89271949,0,0x0,8
tick,0x7ffe67f8feb4,89287950,0,0x0,8
tick,0x7ffe67f8feb4,89303111,0,0x0,8
tick,0x7ffe67f8feb4,89319249,0,0x0,8
tick,0x7ffe67f8feb4,89334120,0,0x0,8
tick,0x7ffe67f8feb4,89349924,0,0x0,8
tick,0x7ffe67f8feb4,89365852,0,0x0,8
tick,0x7ffe67f8feb4,89381229,0,0x0,8
tick,0x7ffe67f8feb4,89397508,0,0x0,8
tick,0x7ffe67f8feb4,89412773,0,0x0,8
tick,0x7ffe67f8feb4,89428602,0,0x0,8
tick,0x7ffe67f8feb4,89444676,0,0x0,8
tick,0x7ffe67f8feb4,89459799,0,0x0,8
tick,0x7ffe67f8feb4,89475365,0,0x0,8
tick,0x7ffe67f8feb4,89491172,0,0x0,8
tick,0x7ffe67f8feb4,89507128,0,0x0,8
tick,0x7ffe67f8feb4,89522517,0,0x0,8
tick,0x7ffe67f8feb4,89537968,0,0x0,8
tick,0x7ffe67f8feb4,89553719,0,0x0,8
tick,0x7ffe67f8feb4,89569786,0,0x0,8
tick,0x7ffe67f8feb4,89585335,0,0x0,8
tick,0x7ffe67f8feb4,89601246,0,0x0,8
tick,0x7ffe67f8feb4,89617265,0,0x0,8
tick,0x7ffe67f8feb4,89633342,0,0x0,8
tick,0x7ffe67f8feb4,89649263,0,0x0,8
tick,0x7ffe67f8feb4,89665321,0,0x0,8
tick,0x7ffe67f8feb4,89680407,0,0x0,8
tick,0x7ffe67f8feb4,89696448,0,0x0,8
tick,0x7ffe67f8feb4,89711600,0,0x0,8
tick,0x7ffe67f8feb4,89727546,0,0x0,8
tick,0x7ffe67f8feb4,89742952,0,0x0,8
tick,0x7ffe67f8feb4,89758946,0,0x0,8
tick,0x7ffe67f8feb4,89774218,0,0x0,8
tick,0x7ffe67f8feb4,89790240,0,0x0,8
tick,0x7ffe67f8feb4,89806153,0,0x0,8
tick,0x7ffe67f8feb4,89821977,0,0x0,8
tick,0x7ffe67f8feb4,89837307,0,0x0,8
tick,0x7ffe67f8feb4,89853241,0,0x0,8
tick,0x7ffe67f8feb4,89869246,0,0x0,8
tick,0x7ffe67f8feb4,89885230,0,0x0,8
tick,0x7ffe67f8feb4,89901253,0,0x0,8
tick,0x7ffe67f8feb4,89916389,0,0x0,8
tick,0x7ffe67f8feb4,89932314,0,0x0,8
tick,0x7ffe67f8feb4,89947406,0,0x0,8
tick,0x7ffe67f8feb4,89962551,0,0x0,8
tick,0x7ffe67f8feb4,89978480,0,0x0,8
tick,0x7ffe67f8feb4,89993924,0,0x0,8
tick,0x7ffe67f8feb4,90009046,0,0x0,8
tick,0x7ffe67f8feb4,90024003,0,0x0,8
tick,0x7ffe67f8feb4,90039206,0,0x0,8
tick,0x7ffe67f8feb4,90054169,0,0x0,8
tick,0x7ffe67f8feb4,90070127,0,0x0,8
tick,0x7ffe67f8feb4,90086175,0,0x0,8
tick,0x7ffe67f8feb4,90102162,0,0x0,8
tick,0x7ffe67f8feb4,90118318,0,0x0,8
tick,0x7ffe67f8feb4,90134037,0,0x0,8
tick,0x7ffe67f8feb4,90149200,0,0x0,8
tick,0x7ffe67f8feb4,90164716,0,0x0,8
tick,0x7ffe67f8feb4,90180670,0,0x0,8
tick,0x7ffe67f8feb4,90196138,0,0x0,8
tick,0x7ffe67f8feb4,90211226,0,0x0,8
tick,0x7ffe67f8feb4,90226366,0,0x0,8
tick,0x7ffe67f8feb4,90242033,0,0x0,8
tick,0x7ffe67f8feb4,90257907,0,0x0,8
tick,0x7ffe67f8feb4,90273336,0,0x0,8
tick,0x7ffe67f8feb4,90288427,0,0x0,8
tick,0x7ffe67f8feb4,90303606,0,0x0,8
tick,0x7ffe67f8feb4,90319306,0,0x0,8
tick,0x7ffe67f8feb4,90334600,0,0x0,8
tick,0x7ffe67f8feb4,90350542,0,0x0,8
tick,0x7ffe67f8feb4,90366532,0,0x0,8
tick,0x7ffe67f8feb4,90382147,0,0x0,8
tick,0x7ffe67f8feb4,90397629,0,0x0,8
tick,0x7ffe67f8feb4,90413206,0,0x0,8
tick,0x7ffe67f8feb4,90428303,0,0x0,8
tick,0x7ffe67f8feb4,90444180,0,0x0,8
tick,0x7ffe67f8feb4,90459320,0,0x0,8
tick,0x7ffe67f8feb4,90474617,0,0x0,8
tick,0x7ffe67f8feb4,90490362,0,0x0,8
tick,0x7ffe67f8feb4,90505346,0,0x0,8
tick,0x7ffe67f8feb4,90521334,0,0x0,8
tick,0x7ffe67f8feb4,90537569,0,0x0,8
tick,0x7ffe67f8feb4,90553377,0,0x0,8
tick,0x7ffe67f8feb4,90568364,0,0x0,8
tick,0x7ffe67f8feb4,90584555,0,0x0,8
tick,0x7ffe67f8feb4,90599452,0,0x0,8
tick,0x7ffe67f8feb4,90615527,0,0x0,8
tick,0x7ffe67f8feb4,90631550,0,0x0,8
tick,0x7ffe67f8feb4,90647433,0,0x0,8
tick,0x7ffe67f8feb4,90662447,0,0x0,8
tick,0x7ffe67f8feb4,90678452,0,0x0,8
tick,0x7ffe67f8feb4,90693458,0,0x0,8
tick,0x7ffe67f8feb4,90709473,0,0x0,8
tick,0x7ffe67f8feb4,90725270,0,0x0,8
tick,0x7ffe67f8feb4,90740077,0,0x0,8
tick,0x7ffe67f8feb4,90755041,0,0x0,8
tick,0x7ffe67f8feb4,90770126,0,0x0,8
tick,0x7ffe67f8feb4,90784833,0,0x0,8
tick,0x7ffe67f8feb4,90800110,0,0x0,8
tick,0x7ffe67f8feb4,90815930,0,0x0,8
tick,0x7ffe67f8feb4,90831107,0,0x0,8
tick,0x7ffe67f8feb4,90846216,0,0x0,8
tick,0x7ffe67f8feb4,90861654,0,0x0,8
tick,0x7ffe67f8feb4,90876443,0,0x0,8
tick,0x7ffe67f8feb4,90891476,0,0x0,8
tick,0x7ffe67f8feb4,90906938,0,0x0,8
tick,0x7ffe67f8feb4,90922712,0,0x0,8
tick,0x7ffe67f8feb4,90939016,0,0x0,8
tick,0x7ffe67f8feb4,90953648,0,0x0,8
tick,0x7ffe67f8feb4,90969646,0,0x0,8
tick,0x7ffe67f8feb4,90985684,0,0x0,8
tick,0x7ffe67f8feb4,91002003,0,0x0,8
tick,0x7ffe67f8feb4,91017249,0,0x0,8
tick,0x7ffe67f8feb4,91032294,0,0x0,8
tick,0x7ffe67f8feb4,91047333,0,0x0,8
tick,0x7ffe67f8feb4,91062674,0,0x0,8
tick,0x7ffe67f8feb4,91078775,0,0x0,8
tick,0x7ffe67f8feb4,91093899,0,0x0,8
tick,0x7ffe67f8feb4,91108931,0,0x0,8
tick,0x7ffe67f8feb4,91125199,0,0x0,8
tick,0x7ffe67f8feb4,91140550,0,0x0,8
tick,0x7ffe67f8feb4,91156215,0,0x0,8
tick,0x7ffe67f8feb4,91172006,0,0x0,8
tick,0x7ffe67f8feb4,91187674,0,0x0,8
tick,0x7ffe67f8feb4,91203068,0,0x0,8
tick,0x7ffe67f8feb4,91218509,0,0x0,8
tick,0x7ffe67f8feb4,91234231,0,0x0,8
tick,0x7ffe67f8feb4,91250115,0,0x0,8
tick,0x7ffe67f8feb4,91265495,0,0x0,8
tick,0x7ffe67f8feb4,91280667,0,0x0,8
tick,0x7ffe67f8feb4,91296687,0,0x0,8
tick,0x7ffe67f8feb4,91312200,0,0x0,8
tick,0x7ffe67f8feb4,91327329,0,0x0,8
tick,0x7ffe67f8feb4,91342684,0,0x0,8
tick,0x7ffe67f8feb4,91357596,0,0x0,8
tick,0x7ffe67f8feb4,91373255,0,0x0,8
tick,0x7ffe67f8feb4,91388849,0,0x0,8
tick,0x7ffe67f8feb4,91404130,0,0x0,8
tick,0x7ffe67f8feb4,91420123,0,0x0,8
tick,0x7ffe67f8feb4,91435746,0,0x0,8
tick,0x7ffe67f8feb4,91451161,0,0x0,8
tick,0x7ffe67f8feb4,91466907,0,0x0,8
tick,0x7ffe67f8feb4,91482430,0,0x0,8
tick,0x7ffe67f8feb4,91497895,0,0x0,8
tick,0x7ffe67f8feb4,91513134,0,0x0,8
tick,0x7ffe67f8feb4,91528083,0,0x0,8
tick,0x7ffe67f8feb4,91543994,0,0x0,8
tick,0x7ffe67f8feb4,91559143,0,0x0,8
tick,0x7ffe67f8feb4,91574742,0,0x0,8
tick,0x7ffe67f8feb4,91590944,0,0x0,8
tick,0x7ffe67f8feb4,91607012,0,0x0,8
tick,0x7ffe67f8feb4,91623015,0,0x0,8
tick,0x7ffe67f8feb4,91638993,0,0x0,8
tick,0x7ffe67f8feb4,91655021,0,0x0,8
tick,0x7ffe67f8feb4,91671045,0,0x0,8
tick,0x7ffe67f8feb4,91686658,0,0x0,8
tick,0x7ffe67f8feb4,91702055,0,0x0,8
tick,0x7ffe67f8feb4,91717690,0,0x0,8
tick,0x7ffe67f8feb4,91733758,0,0x0,8
tick,0x7ffe67f8feb4,91749803,0,0x0,8
tick,0x7ffe67f8feb4,91765739,0,0x0,8
tick,0x7ffe67f8feb4,91781195,0,0x0,8
tick,0x7ffe67f8feb4,91797243,0,0x0,8
tick,0x7ffe67f8feb4,91812570,0,0x0,8
tick,0x7ffe67f8feb4,91827557,0,0x0,8
tick,0x7ffe67f8feb4,91843697,0,0x0,8
tick,0x7ffe67f8feb4,91858870,0,0x0,8
tick,0x7ffe67f8feb4,91874712,0,0x0,8
tick,0x7ffe67f8feb4,91889834,0,0x0,8
tick,0x7ffe67f8feb4,91905692,0,0x0,8
tick,0x7ffe67f8feb4,91921865,0,0x0,8
tick,0x7ffe67f8feb4,91937839,0,0x0,8
tick,0x7ffe67f8feb4,91954397,0,0x0,8
tick,0x7ffe67f8feb4,91969593,0,0x0,8
tick,0x7ffe67f8feb4,91985149,0,0x0,8
tick,0x7ffe67f8feb4,92001203,0,0x0,8
tick,0x7ffe67f8feb4,92016584,0,0x0,8
tick,0x7ffe67f8feb4,92032575,0,0x0,8
tick,0x7ffe67f8feb4,92048617,0,0x0,8
tick,0x7ffe67f8feb4,92064191,0,0x0,8
tick,0x7ffe67f8feb4,92079638,0,0x0,8
tick,0x7ffe67f8feb4,92094835,0,0x0,8
tick,0x7ffe67f8feb4,92110573,0,0x0,8
tick,0x7ffe67f8feb4,92126266,0,0x0,8
tick,0x7ffe67f8feb4,92141515,0,0x0,8
tick,0x7ffe67f8feb4,92157635,0,0x0,8
tick,0x7ffe67f8feb4,92172809,0,0x0,8
tick,0x7ffe67f8feb4,92188237,0,0x0,8
tick,0x7ffe67f8feb4,92203593,0,0x0,8
tick,0x7ffe67f8feb4,92219538,0,0x0,8
tick,0x7ffe67f8feb4,92234286,0,0x0,8
tick,0x7ffe67f8feb4,92250284,0,0x0,8
tick,0x7ffe67f8feb4,92266296,0,0x0,8
tick,0x7ffe67f8feb4,92282283,0,0x0,8
tick,0x7ffe67f8feb4,92298359,0,0x0,8
tick,0x7ffe67f8feb4,92314383,0,0x0,8
tick,0x7ffe67f8feb4,92330306,0,0x0,8
tick,0x7ffe67f8feb4,92346285,0,0x0,8
tick,0x7ffe67f8feb4,92362356,0,0x0,8
tick,0x7ffe67f8feb4,92378332,0,0x0,8
tick,0x7ffe67f8feb4,92393416,0,0x0,8
tick,0x7ffe67f8feb4,92409445,0,0x0,8
tick,0x7ffe67f8feb4,92424625,0,0x0,8
tick,0x7ffe67f8feb4,92440448,0,0x0,8
tick,0x7ffe67f8feb4,92456595,0,0x0,8
tick,0x7ffe67f8feb4,92471890,0,0x0,8
tick,0x7ffe67f8feb4,92487479,0,0x0,8
tick,0x7ffe67f8feb4,92502642,0,0x0,8
tick,0x7ffe67f8feb4,92518626,0,0x0,8
tick,0x7ffe67f8feb4,92534400,0,0x0,8
tick,0x7ffe67f8feb4,92549656,0,0x0,8
tick,0x7ffe67f8feb4,92565639,0,0x0,8
tick,0x7ffe67f8feb4,92581480,0,0x0,8
tick,0x7ffe67f8feb4,92596637,0,0x0,8
tick,0x7ffe67f8feb4,92612557,0,0x0,8
tick,0x7ffe67f8feb4,92628561,0,0x0,8
tick,0x7ffe67f8feb4,92644541,0,0x0,8
tick,0x7ffe67f8feb4,92660540,0,0x0,8
tick,0x7ffe67f8feb4,92675571,0,0x0,8
tick,0x7ffe67f8feb4,92691637,0,0x0,8
tick,0x7ffe67f8feb4,92707472,0,0x0,8
tick,0x7ffe67f8feb4,92723428,0,0x0,8
tick,0x7ffe67f8feb4,92739171,0,0x0,8
tick,0x7ffe67f8feb4,92755067,0,0x0,8
tick,0x7ffe67f8feb4,92771077,0,0x0,8
tick,0x7ffe67f8feb4,92786541,0,0x0,8
tick,0x7ffe67f8feb4,92802085,0,0x0,8
tick,0x7ffe67f8feb4,92818091,0,0x0,8
tick,0x7ffe67f8feb4,92833691,0,0x0,8
tick,0x7ffe67f8feb4,92849752,0,0x0,8
tick,0x7ffe67f8feb4,92864851,0,0x0,8
tick,0x7ffe67f8feb4,92880798,0,0x0,8
tick,0x7ffe67f8feb4,92896821,0,0x0,8
tick,0x7ffe67f8feb4,92911940,0,0x0,8
tick,0x7ffe67f8feb4,92927824,0,0x0,8
tick,0x7ffe67f8feb4,92943153,0,0x0,8
tick,0x7ffe67f8feb4,92959165,0,0x0,8
tick,0x7ffe67f8feb4,92974222,0,0x0,8
tick,0x7ffe67f8feb4,92989733,0,0x0,8
tick,0x7ffe67f8feb4,93005826,0,0x0,8
tick,0x7ffe67f8feb4,93021469,0,0x0,8
tick,0x7ffe67f8feb4,93037011,0,0x0,8
tick,0x7ffe67f8feb4,93052178,0,0x0,8
tick,0x7ffe67f8feb4,93067734,0,0x0,8
tick,0x7ffe67f8feb4,93083736,0,0x0,8
tick,0x7ffe67f8feb4,93100039,0,0x0,8
tick,0x7ffe67f8feb4,93115914,0,0x0,8
tick,0x7ffe67f8feb4,93130870,0,0x0,8
tick,0x7ffe67f8feb4,93146593,0,0x0,8
tick,0x7ffe67f8feb4,93162645,0,0x0,8
tick,0x7ffe67f8feb4,93178631,0,0x0,8
tick,0x7ffe67f8feb4,93194659,0,0x0,8
tick,0x7ffe67f8feb4,93210177,0,0x0,8
tick,0x7ffe67f8feb4,93226296,0,0x0,8
tick,0x7ffe67f8feb4,93241263,0,0x0,8
tick,0x7ffe67f8feb4,93256924,0,0x0,8
tick,0x7ffe67f8feb4,93272584,0,0x0,8
tick,0x7ffe67f8feb4,93287947,0,0x0,8
tick,0x7ffe67f8feb4,93303770,0,0x0,8
tick,0x7ffe67f8feb4,93318957,0,0x0,8
tick,0x7ffe67f8feb4,93335396,0,0x0,8
tick,0x7ffe67f8feb4,93351382,0,0x0,8
tick,0x7ffe67f8feb4,93366823,0,0x0,8
tick,0x7ffe67f8feb4,93382300,0,0x0,8
tick,0x7ffe67f8feb4,93397782,0,0x0,8
tick,0x7ffe67f8feb4,93413737,0,0x0,8
tick,0x7ffe67f8feb4,93428787,0,0x0,8
tick,0x7ffe67f8feb4,93444802,0,0x0,8
tick,0x7ffe67f8feb4,93460788,0,0x0,8
tick,0x7ffe67f8feb4,93477505,0,0x0,8
tick,0x7ffe67f8feb4,93492782,0,0x0,8
tick,0x7ffe67f8feb4,93508779,0,0x0,8
tick,0x7ffe67f8feb4,93524938,0,0x0,8
tick,0x7ffe67f8feb4,93540846,0,0x0,8
tick,0x7ffe67f8feb4,93556840,0,0x0,8
tick,0x7ffe67f8feb4,93572897,0,0x0,8
tick,0x7ffe67f8feb4,93588872,0,0x0,8
tick,0x7ffe67f8feb4,93604871,0,0x0,8
tick,0x7ffe67f8feb4,93620472,0,0x0,8
tick,0x7ffe67f8feb4,93636462,0,0x0,8
tick,0x7ffe67f8feb4,93652461,0,0x0,8
tick,0x7ffe67f8feb4,93668463,0,0x0,8
tick,0x7ffe67f8feb4,93684471,0,0x0,8
tick,0x7ffe67f8feb4,93699804,0,0x0,8
tick,0x7ffe67f8feb4,93715820,0,0x0,8
tick,0x7ffe67f8feb4,93731823,0,0x0,8
tick,0x7ffe67f8feb4,93747825,0,0x0,8
tick,0x7ffe67f8feb4,93763819,0,0x0,8
tick,0x7ffe67f8feb4,93779832,0,0x0,8
tick,0x7ffe67f8feb4,93795841,0,0x0,8
tick,0x7ffe67f8feb4,93811838,0,0x0,8
tick,0x7ffe67f8feb4,93827865,0,0x0,8
tick,0x7ffe67f8feb4,93843839,0,0x0,8
tick,0x7ffe67f8feb4,93859854,0,0x0,8
tick,0x7ffe67f8feb4,93876079,0,0x0,8
tick,0x7ffe67f8feb4,93891879,0,0x0,8
tick,0x7ffe67f8feb4,93907858,0,0x0,8
tick,0x7ffe67f8feb4,93923864,0,0x0,8
tick,0x7ffe67f8feb4,93939853,0,0x0,8
tick,0x7ffe67f8feb4,93955860,0,0x0,8
tick,0x7ffe67f8feb4,93971864,0,0x0,8
tick,0x7ffe67f8feb4,93987999,0,0x0,8
tick,0x7ffe67f8feb4,94003886,0,0x0,8
tick,0x7ffe67f8feb4,94019921,0,0x0,8
tick,0x7ffe67f8feb4,94035866,0,0x0,8
tick,0x7ffe67f8feb4,94051881,0,0x0,8
tick,0x7ffe67f8feb4,94067901,0,0x0,8
tick,0x7ffe67f8feb4,94083885,0,0x0,8
tick,0x7ffe67f8feb4,94099928,0,0x0,8
tick,0x7ffe67f8feb4,94115884,0,0x0,8
tick,0x7ffe67f8feb4,94131909,0,0x0,8
tick,0x7ffe67f8feb4,94147900,0,0x0,8
tick,0x7ffe67f8feb4,94163894,0,0x0,8
tick,0x7ffe67f8feb4,94179908,0,0x0,8
tick,0x7ffe67f8feb4,94195907,0,0x0,8
tick,0x7ffe67f8feb4,94211976,0,0x0,8
tick,0x7ffe67f8feb4,94227908,0,0x0,8
tick,0x7ffe67f8feb4,94243916,0,0x0,8
tick,0x7ffe67f8feb4,94258939,0,0x0,8
tick,0x7ffe67f8feb4,94274512,0,0x0,8
tick,0x7ffe67f8feb4,94289679,0,0x0,8
tick,0x7ffe67f8feb4,94305671,0,0x0,8
tick,0x7ffe67f8feb4,94321736,0,0x0,8
tick,0x7ffe67f8feb4,94336741,0,0x0,8
tick,0x7ffe67f8feb4,94351915,0,0x0,8
tick,0x7ffe67f8feb4,94367780,0,0x0,8
tick,0x7ffe67f8feb4,94382954,0,0x0,8
tick,0x7ffe67f8feb4,94398887,0,0x0,8
tick,0x7ffe67f8feb4,94414848,0,0x0,8
tick,0x7ffe67f8feb4,94430897,0,0x0,8
tick,0x7ffe67f8feb4,94446431,0,0x0,8
tick,0x7ffe67f8feb4,94461983,0,0x0,8
tick,0x7ffe67f8feb4,94477900,0,0x0,8
tick,0x7ffe67f8feb4,94493769,0,0x0,8
tick,0x7ffe67f8feb4,94509826,0,0x0,8
tick,0x7ffe67f8feb4,94525569,0,0x0,8
tick,0x7ffe67f8feb4,94540535,0,0x0,8
tick,0x7ffe67f8feb4,94556159,0,0x0,8
tick,0x7ffe67f8feb4,94571177,0,0x0,8
tick,0x7ffe67f8feb4,94587085,0,0x0,8
tick,0x7ffe67f8feb4,94602315,0,0x0,8
tick,0x7ffe67f8feb4,94618379,0,0x0,8
tick,0x7ffe67f8feb4,94634509,0,0x0,8
tick,0x7ffe67f8feb4,94649334,0,0x0,8
tick,0x7ffe67f8feb4,94665343,0,0x0,8
tick,0x7ffe67f8feb4,94681357,0,0x0,8
tick,0x7ffe67f8feb4,94697089,0,0x0,8
tick,0x7ffe67f8feb4,94713089,0,0x0,8
tick,0x7ffe67f8feb4,94729165,0,0x0,8
tick,0x7ffe67f8feb4,94745110,0,0x0,8
tick,0x7ffe67f8feb4,94760393,0,0x0,8
tick,0x7ffe67f8feb4,94775737,0,0x0,8
tick,0x7ffe67f8feb4,94790997,0,0x0,8
tick,0x7ffe67f8feb4,94806993,0,0x0,8
tick,0x7ffe67f8feb4,94823082,0,0x0,8
tick,0x7ffe67f8feb4,94839021,0,0x0,8
tick,0x7ffe67f8feb4,94854995,0,0x0,8
tick,0x7ffe67f8feb4,94870071,0,0x0,8
tick,0x7ffe67f8feb4,94886029,0,0x0,8
tick,0x7ffe67f8feb4,94902034,0,0x0,8
tick,0x7ffe67f8feb4,94918001,0,0x0,8
tick,0x7ffe67f8feb4,94934043,0,0x0,8
tick,0x7ffe67f8feb4,94949241,0,0x0,8
tick,0x7ffe67f8feb4,94964387,0,0x0,8
tick,0x7ffe67f8feb4,94980585,0,0x0,8
tick,0x7ffe67f8feb4,94996469,0,0x0,8
tick,0x7ffe67f8feb4,95012136,0,0x0,8
tick,0x7ffe67f8feb4,95028382,0,0x0,8
tick,0x7ffe67f8feb4,95044290,0,0x0,8
tick,0x7ffe67f8feb4,95059828,0,0x0,8
tick,0x7ffe67f8feb4,95075487,0,0x0,8
tick,0x7ffe67f8feb4,95091498,0,0x0,8
tick,0x7ffe67f8feb4,95107592,0,0x0,8
tick,0x7ffe67f8feb4,95123633,0,0x0,8
tick,0x7ffe67f8feb4,95138870,0,0x0,8
tick,0x7ffe67f8feb4,95154515,0,0x0,8
tick,0x7ffe67f8feb4,95169829,0,0x0,8
tick,0x7ffe67f8feb4,95185879,0,0x0,8
tick,0x7ffe67f8feb4,95201062,0,0x0,8
tick,0x7ffe67f8feb4,95216403,0,0x0,8
tick,0x7ffe67f8feb4,95231563,0,0x0,8
tick,0x7ffe67f8feb4,95247478,0,0x0,8
tick,0x7ffe67f8feb4,95263112,0,0x0,8
tick,0x7ffe67f8feb4,95278740,0,0x0,8
tick,0x7ffe67f8feb4,95294617,0,0x0,8
tick,0x7ffe67f8feb4,95310625,0,0x0,8
tick,0x7ffe67f8feb4,95326657,0,0x0,8
tick,0x7ffe67f8feb4,95342269,0,0x0,8
tick,0x7ffe67f8feb4,95358120,0,0x0,8
tick,0x7ffe67f8feb4,95373760,0,0x0,8
tick,0x7ffe67f8feb4,95389429,0,0x0,8
tick,0x7ffe67f8feb4,95404803,0,0x0,8
tick,0x7ffe67f8feb4,95420088,0,0x0,8
tick,0x7ffe67f8feb4,95436163,0,0x0,8
tick,0x7ffe67f8feb4,95452120,0,0x0,8
tick,0x7ffe67f8feb4,95468096,0,0x0,8
tick,0x7ffe67f8feb4,95484112,0,0x0,8
tick,0x7ffe67f8feb4,95500137,0,0x0,8
tick,0x7ffe67f8feb4,95516089,0,0x0,8
tick,0x7ffe67f8feb4,95531923,0,0x0,8
tick,0x7ffe67f8feb4,95547877,0,0x0,8
tick,0x7ffe67f8feb4,95563805,0,0x0,8
tick,0x7ffe67f8feb4,95579263,0,0x0,8
tick,0x7ffe67f8feb4,95594608,0,0x0,8
tick,0x7ffe67f8feb4,95610327,0,0x0,8
tick,0x7ffe67f8feb4,95626479,0,0x0,8
tick,0x7ffe67f8feb4,95642177,0,0x0,8
tick,0x7ffe67f8feb4,95658145,0,0x0,8
tick,0x7ffe67f8feb4,95674121,0,0x0,8
tick,0x7ffe67f8feb4,95690136,0,0x0,8
tick,0x7ffe67f8feb4,95706240,0,0x0,8
tick,0x7ffe67f8feb4,95722177,0,0x0,8
tick,0x7ffe67f8feb4,95738215,0,0x0,8
tick,0x7ffe67f8feb4,95753810,0,0x0,8
tick,0x7ffe67f8feb4,95769895,0,0x0,8
tick,0x7ffe67f8feb4,95785335,0,0x0,8
tick,0x7ffe67f8feb4,95800881,0,0x0,8
tick,0x7ffe67f8feb4,95816148,0,0x0,8
tick,0x7ffe67f8feb4,95832197,0,0x0,8
tick,0x7ffe67f8feb4,95848186,0,0x0,8
tick,0x7ffe67f8feb4,95864011,0,0x0,8
tick,0x7ffe67f8feb4,95879983,0,0x0,8
tick,0x7ffe67f8feb4,95895756,0,0x0,8
tick,0x7ffe67f8feb4,95910747,0,0x0,8
tick,0x7ffe67f8feb4,95926730,0,0x0,8
tick,0x7ffe67f8feb4,95942236,0,0x0,8
tick,0x7ffe67f8feb4,95958443,0,0x0,8
tick,0x7ffe67f8feb4,95974197,0,0x0,8
tick,0x7ffe67f8feb4,95989952,0,0x0,8
tick,0x7ffe67f8feb4,96005208,0,0x0,8
tick,0x7ffe67f8feb4,96021215,0,0x0,8
tick,0x7ffe67f8feb4,96037393,0,0x0,8
tick,0x7ffe67f8feb4,96054582,0,0x0,8
tick,0x7ffe67f8feb4,96069167,0,0x0,8
tick,0x7ffe67f8feb4,96083956,0,0x0,8
tick,0x7ffe67f8feb4,96099115,0,0x0,8
tick,0x7ffe67f8feb4,96114400,0,0x0,8
tick,0x7ffe67f8feb4,96129116,0,0x0,8
tick,0x7ffe67f8feb4,96144488,0,0x0,8
tick,0x7ffe67f8feb4,96159853,0,0x0,8
tick,0x7ffe67f8feb4,96175844,0,0x0,8
tick,0x7ffe67f8feb4,96191853,0,0x0,8
tick,0x7ffe67f8feb4,96206878,0,0x0,8
tick,0x7ffe67f8feb4,96222856,0,0x0,8
tick,0x7ffe67f8feb4,96238872,0,0x0,8
tick,0x7ffe67f8feb4,96254873,0,0x0,8
tick,0x7ffe67f8feb4,96270890,0,0x0,8
tick,0x7ffe67f8feb4,96286092,0,0x0,8
tick,0x7ffe67f8feb4,96301950,0,0x0,8
tick,0x7ffe67f8feb4,96317951,0,0x0,8
tick,0x7ffe67f8feb4,96333146,0,0x0,8
tick,0x7ffe67f8feb4,96348245,0,0x0,8
tick,0x7ffe67f8feb4,96363701,0,0x0,8
tick,0x7ffe67f8feb4,96379286,0,0x0,8
tick,0x7ffe67f8feb4,96394848,0,0x0,8
tick,0x7ffe67f8feb4,96409881,0,0x0,8
tick,0x7ffe67f8feb4,96424892,0,0x0,8
tick,0x7ffe67f8feb4,96440363,0,0x0,8
tick,0x7ffe67f8feb4,96456107,0,0x0,8
tick,0x7ffe67f8feb4,96471663,0,0x0,8
tick,0x7ffe67f8feb4,96487706,0,0x0,8
tick,0x7ffe67f8feb4,96502941,0,0x0,8
tick,0x7ffe67f8feb4,96519153,0,0x0,8
tick,0x7ffe67f8feb4,96534228,0,0x0,8
tick,0x7ffe67f8feb4,96549253,0,0x0,8
tick,0x7ffe67f8feb4,96565247,0,0x0,8
tick,0x7ffe67f8feb4,96581254,0,0x0,8
tick,0x7ffe67f8feb4,96597048,0,0x0,8
tick,0x7ffe67f8feb4,96612223,0,0x0,8
tick,0x7ffe67f8feb4,96628215,0,0x0,8
tick,0x7ffe67f8feb4,96643420,0,0x0,8
tick,0x7ffe67f8feb4,96659624,0,0x0,8
tick,0x7ffe67f8feb4,96675276,0,0x0,8
tick,0x7ffe67f8feb4,96691231,0,0x0,8
tick,0x7ffe67f8feb4,96707597,0,0x0,8
tick,0x7ffe67f8feb4,96723256,0,0x0,8
tick,0x7ffe67f8feb4,96739240,0,0x0,8
tick,0x7ffe67f8feb4,96754379,0,0x0,8
tick,0x7ffe67f8feb4,96770374,0,0x0,8
tick,0x7ffe67f8feb4,96786407,0,0x0,8
tick,0x7ffe67f8feb4,96802403,0,0x0,8
tick,0x7ffe67f8feb4,96817990,0,0x0,8
tick,0x7ffe67f8feb4,96833453,0,0x0,8
tick,0x7ffe67f8feb4,96849462,0,0x0,8
tick,0x7ffe67f8feb4,96864544,0,0x0,8
tick,0x7ffe67f8feb4,96880416,0,0x0,8
tick,0x7ffe67f8feb4,96895985,0,0x0,8
tick,0x7ffe67f8feb4,96910790,0,0x0,8
tick,0x7ffe67f8feb4,96926320,0,0x0,8
tick,0x7ffe67f8feb4,96942300,0,0x0,8
tick,0x7ffe67f8feb4,96958334,0,0x0,8
tick,0x7ffe67f8feb4,96973585,0,0x0,8
tick,0x7ffe67f8feb4,96989315,0,0x0,8
tick,0x7ffe67f8feb4,97005336,0,0x0,8
tick,0x7ffe67f8feb4,97020355,0,0x0,8
tick,0x7ffe67f8feb4,97036319,0,0x0,8
tick,0x7ffe67f8feb4,97052332,0,0x0,8
tick,0x7ffe67f8feb4,97067321,0,0x0,8
tick,0x7ffe67f8feb4,97082996,0,0x0,8
tick,0x7ffe67f8feb4,97098341,0,0x0,8
tick,0x7ffe67f8feb4,97113641,0,0x0,8
tick,0x7ffe67f8feb4,97129330,0,0x0,8
tick,0x7ffe67f8feb4,97145384,0,0x0,8
tick,0x7ffe67f8feb4,97161419,0,0x0,8
tick,0x7ffe67f8feb4,97177352,0,0x0,8
tick,0x7ffe67f8feb4,97193447,0,0x0,8
tick,0x7ffe67f8feb4,97209474,0,0x0,8
tick,0x7ffe67f8feb4,97225387,0,0x0,8
tick,0x7ffe67f8feb4,97241374,0,0x0,8
tick,0x7ffe67f8feb4,97256399,0,0x0,8
tick,0x7ffe67f8feb4,97272419,0,0x0,8
tick,0x7ffe67f8feb4,97288389,0,0x0,8
tick,0x7ffe67f8feb4,97304411,0,0x0,8
tick,0x7ffe67f8feb4,97320435,0,0x0,8
tick,0x7ffe67f8feb4,97336432,0,0x0,8
tick,0x7ffe67f8feb4,97352428,0,0x0,8
tick,0x7ffe67f8feb4,97368500,0,0x0,8
tick,0x7ffe67f8feb4,97383919,0,0x0,8
tick,0x7ffe67f8feb4,97399234,0,0x0,8
tick,0x7ffe67f8feb4,97415330,0,0x0,8
tick,0x7ffe67f8feb4,97430799,0,0x0,8
tick,0x7ffe67f8feb4,97446264,0,0x0,8
tick,0x7ffe67f8feb4,97462404,0,0x0,8
tick,0x7ffe67f8feb4,97477418,0,0x0,8
tick,0x7ffe67f8feb4,97493336,0,0x0,8
tick,0x7ffe67f8feb4,97509073,0,0x0,8
tick,0x7ffe67f8feb4,97524334,0,0x0,8
tick,0x7ffe67f8feb4,97540320,0,0x0,8
tick,0x7ffe67f8feb4,97555343,0,0x0,8
tick,0x7ffe67f8feb4,97571126,0,0x0,8
tick,0x7ffe67f8feb4,97586356,0,0x0,8
tick,0x7ffe67f8feb4,97602143,0,0x0,8
tick,0x7ffe67f8feb4,97617637,0,0x0,8
tick,0x7ffe67f8feb4,97633342,0,0x0,8
tick,0x7ffe67f8feb4,97649171,0,0x0,8
tick,0x7ffe67f8feb4,97665152,0,0x0,8
tick,0x7ffe67f8feb4,97680156,0,0x0,8
tick,0x7ffe67f8feb4,97696194,0,0x0,8
tick,0x7ffe67f8feb4,97712243,0,0x0,8
tick,0x7ffe67f8feb4,97728170,0,0x0,8
tick,0x7ffe67f8feb4,97744177,0,0x0,8
tick,0x7ffe67f8feb4,97760562,0,0x0,8
tick,0x7ffe67f8feb4,97776239,0,0x0,8
tick,0x7ffe67f8feb4,97792802,0,0x0,8
tick,0x7ffe67f8feb4,97808143,0,0x0,8
tick,0x7ffe67f8feb4,97824157,0,0x0,8
tick,0x7ffe67f8feb4,97840163,0,0x0,8
tick,0x7ffe67f8feb4,97855328,0,0x0,8
tick,0x7ffe67f8feb4,97871153,0,0x0,8
tick,0x7ffe67f8feb4,97887197,0,0x0,8
tick,0x7ffe67f8feb4,97902409,0,0x0,8
tick,0x7ffe67f8feb4,97918210,0,0x0,8
tick,0x7ffe67f8feb4,97933353,0,0x0,8
tick,0x7ffe67f8feb4,97949309,0,0x0,8
tick,0x7ffe67f8feb4,97965070,0,0x0,8
tick,0x7ffe67f8feb4,97980601,0,0x0,8
tick,0x7ffe67f8feb4,97996318,0,0x0,8
tick,0x7ffe67f8feb4,98012313,0,0x0,8
tick,0x7ffe67f8feb4,98028266,0,0x0,8
tick,0x7ffe67f8feb4,98044203,0,0x0,8
tick,0x7ffe67f8feb4,98060192,0,0x0,8
tick,0x7ffe67f8feb4,98076306,0,0x0,8
tick,0x7ffe67f8feb4,98092315,0,0x0,8
tick,0x7ffe67f8feb4,98108207,0,0x0,8
tick,0x7ffe67f8feb4,98123415,0,0x0,8
tick,0x7ffe67f8feb4,98139228,0,0x0,8
tick,0x7ffe67f8feb4,98155261,0,0x0,8
tick,0x7ffe67f8feb4,98171158,0,0x0,8
tick,0x7ffe67f8feb4,98187197,0,0x0,8
tick,0x7ffe67f8feb4,98202756,0,0x0,8
tick,0x7ffe67f8feb4,98218725,0,0x0,8
tick,0x7ffe67f8feb4,98234742,0,0x0,8
tick,0x7ffe67f8feb4,98249972,0,0x0,8
tick,0x7ffe67f8feb4,98265159,0,0x0,8
tick,0x7ffe67f8feb4,98280239,0,0x0,8
tick,0x7ffe67f8feb4,98296031,0,0x0,8
tick,0x7ffe67f8feb4,98312009,0,0x0,8
tick,0x7ffe67f8feb4,98328025,0,0x0,8
tick,0x7ffe67f8feb4,98344074,0,0x0,8
tick,0x7ffe67f8feb4,98359419,0,0x0,8
tick,0x7ffe67f8feb4,98374331,0,0x0,8
tick,0x7ffe67f8feb4,98390170,0,0x0,8
tick,0x7ffe67f8feb4,98406987,0,0x0,8
tick,0x7ffe67f8feb4,98422206,0,0x0,8
tick,0x7ffe67f8feb4,98438195,0,0x0,8
tick,0x7ffe67f8feb4,98453504,0,0x0,8
tick,0x7ffe67f8feb4,98469234,0,0x0,8
tick,0x7ffe67f8feb4,98484389,0,0x0,8
tick,0x7ffe67f8feb4,98500215,0,0x0,8
tick,0x7ffe67f8feb4,98516116,0,0x0,8
tick,0x7ffe67f8feb4,98532261,0,0x0,8
tick,0x7ffe67f8feb4,98548212,0,0x0,8
tick,0x7ffe67f8feb4,98563261,0,0x0,8
tick,0x7ffe67f8feb4,98579297,0,0x0,8
tick,0x7ffe67f8feb4,98595530,0,0x0,8
tick,0x7ffe67f8feb4,98611239,0,0x0,8
tick,0x7ffe67f8feb4,98626319,0,0x0,8
tick,0x7ffe67f8feb4,98643594,0,0x0,8
tick,0x7ffe67f8feb4,98658103,0,0x0,8
tick,0x7ffe67f8feb4,98674082,0,0x0,8
tick,0x7ffe67f8feb4,98690119,0,0x0,8
tick,0x7ffe67f8feb4,98706053,0,0x0,8
tick,0x7ffe67f8feb4,98722227,0,0x0,8
tick,0x7ffe67f8feb4,98738116,0,0x0,8
tick,0x7ffe67f8feb4,98754061,0,0x0,8
tick,0x7ffe67f8feb4,98770031,0,0x0,8
tick,0x7ffe67f8feb4,98786071,0,0x0,8
tick,0x7ffe67f8feb4,98802092,0,0x0,8
tick,0x7ffe67f8feb4,98818115,0,0x0,8
tick,0x7ffe67f8feb4,98833707,0,0x0,8
tick,0x7ffe67f8feb4,98848929,0,0x0,8
tick,0x7ffe67f8feb4,98864928,0,0x0,8
tick,0x7ffe67f8feb4,98880934,0,0x0,8
tick,0x7ffe67f8feb4,98897021,0,0x0,8
tick,0x7ffe67f8feb4,98912586,0,0x0,8
tick,0x7ffe67f8feb4,98928755,0,0x0,8
tick,0x7ffe67f8feb4,98943821,0,0x0,8
tick,0x7ffe67f8feb4,98958990,0,0x0,8
tick,0x7ffe67f8feb4,98974341,0,0x0,8
tick,0x7ffe67f8feb4,98990174,0,0x0,8
tick,0x7ffe67f8feb4,99006233,0,0x0,8
tick,0x7ffe67f8feb4,99021205,0,0x0,8
tick,0x7ffe67f8feb4,99036747,0,0x0,8
tick,0x7ffe67f8feb4,99052329,0,0x0,8
tick,0x7ffe67f8feb4,99068201,0,0x0,8
tick,0x7ffe67f8feb4,99083438,0,0x0,8
tick,0x7ffe67f8feb4,99099213,0,0x0,8
tick,0x7ffe67f8feb4,99115276,0,0x0,8
tick,0x7ffe67f8feb4,99131352,0,0x0,8
tick,0x7ffe67f8feb4,99146815,0,0x0,8
tick,0x7ffe67f8feb4,99162340,0,0x0,8
tick,0x7ffe67f8feb4,99177710,0,0x0,8
tick,0x7ffe67f8feb4,99192988,0,0x0,8
tick,0x7ffe67f8feb4,99208345,0,0x0,8
tick,0x7ffe67f8feb4,99223550,0,0x0,8
tick,0x7ffe67f8feb4,99239516,0,0x0,8
tick,0x7ffe67f8feb4,99255542,0,0x0,8
tick,0x7ffe67f8feb4,99271204,0,0x0,8
tick,0x7ffe67f8feb4,99285557,0,0x0,8
tick,0x7ffe67f8feb4,99301203,0,0x0,8
tick,0x7ffe67f8feb4,99316565,0,0x0,8
tick,0x7ffe67f8feb4,99345161,0,0x0,8
tick,0x7ffe67f8feb4,99348577,0,0x0,8
tick,0x7ffe67f8feb4,99364216,0,0x0,8
tick,0x7ffe67f8feb4,99380199,0,0x0,8
tick,0x7ffe67f8feb4,99395953,0,0x0,8
tick,0x7ffe67f8feb4,99411637,0,0x0,8
tick,0x7ffe67f8feb4,99427869,0,0x0,8
tick,0x7ffe67f8feb4,99444041,0,0x0,8
tick,0x7ffe67f8feb4,99458484,0,0x0,8
tick,0x7ffe67f8feb4,99474339,0,0x0,8
tick,0x7ffe67f8feb4,99489206,0,0x0,8
tick,0x7ffe67f8feb4,99504338,0,0x0,8
tick,0x7ffe67f8feb4,99520185,0,0x0,8
tick,0x7ffe67f8feb4,99535782,0,0x0,8
tick,0x7ffe67f8feb4,99551317,0,0x0,8
tick,0x7ffe67f8feb4,99566725,0,0x0,8
tick,0x7ffe67f8feb4,99582727,0,0x0,8
tick,0x7ffe67f8feb4,99598756,0,0x0,8
tick,0x7ffe67f8feb4,99614208,0,0x0,8
tick,0x7ffe67f8feb4,99629242,0,0x0,8
tick,0x7ffe67f8feb4,99644761,0,0x0,8
tick,0x7ffe67f8feb4,99660764,0,0x0,8
tick,0x7ffe67f8feb4,99677250,0,0x0,8
tick,0x7ffe67f8feb4,99692772,0,0x0,8
tick,0x7ffe67f8feb4,99708747,0,0x0,8
tick,0x7ffe67f8feb4,99724766,0,0x0,8
tick,0x7ffe67f8feb4,99741003,0,0x0,8
tick,0x7ffe67f8feb4,99756738,0,0x0,8
tick,0x7ffe67f8feb4,99772754,0,0x0,8
tick,0x7ffe67f8feb4,99788761,0,0x0,8
tick,0x7ffe67f8feb4,99804758,0,0x0,8
tick,0x7ffe67f8feb4,99820180,0,0x0,8
tick,0x7ffe67f8feb4,99836193,0,0x0,8
tick,0x7ffe67f8feb4,99852207,0,0x0,8
tick,0x7ffe67f8feb4,99868241,0,0x0,8
tick,0x7ffe67f8feb4,99884217,0,0x0,8
tick,0x7ffe67f8feb4,99900173,0,0x0,8
tick,0x7ffe67f8feb4,99915776,0,0x0,8
tick,0x7ffe67f8feb4,99931345,0,0x0,8
tick,0x7ffe67f8feb4,99946812,0,0x0,8
tick,0x7ffe67f8feb4,99962221,0,0x0,8
tick,0x7ffe67f8feb4,99978193,0,0x0,8
tick,0x7ffe67f8feb4,99993340,0,0x0,8
tick,0x7ffe67f8feb4,100009195,0,0x0,8
tick,0x7ffe67f8feb4,100025195,0,0x0,8
tick,0x7ffe67f8feb4,100040347,0,0x0,8
tick,0x7ffe67f8feb4,100056342,0,0x0,8
tick,0x7ffe67f8feb4,100072192,0,0x0,8
tick,0x7ffe67f8feb4,100087342,0,0x0,8
tick,0x7ffe67f8feb4,100103232,0,0x0,8
tick,0x7ffe67f8feb4,100119207,0,0x0,8
tick,0x7ffe67f8feb4,100134926,0,0x0,8
tick,0x7ffe67f8feb4,100150153,0,0x0,8
tick,0x7ffe67f8feb4,100166127,0,0x0,8
tick,0x7ffe67f8feb4,100181334,0,0x0,8
tick,0x7ffe67f8feb4,100196975,0,0x0,8
tick,0x7ffe67f8feb4,100213231,0,0x0,8
tick,0x7ffe67f8feb4,100228540,0,0x0,8
tick,0x7ffe67f8feb4,100245072,0,0x0,8
tick,0x7ffe67f8feb4,100259221,0,0x0,8
tick,0x7ffe67f8feb4,100274332,0,0x0,8
tick,0x7ffe67f8feb4,100290423,0,0x0,8
tick,0x7ffe67f8feb4,100306389,0,0x0,8
tick,0x7ffe67f8feb4,100321592,0,0x0,8
tick,0x7ffe67f8feb4,100336674,0,0x0,8
tick,0x7ffe67f8feb4,100352378,0,0x0,8
tick,0x7ffe67f8feb4,100367730,0,0x0,8
tick,0x7ffe67f8feb4,100382914,0,0x0,8
tick,0x7ffe67f8feb4,100398727,0,0x0,8
tick,0x7ffe67f8feb4,100414704,0,0x0,8
tick,0x7ffe67f8feb4,100431498,0,0x0,8
tick,0x7ffe67f8feb4,100447310,0,0x0,8
tick,0x7ffe67f8feb4,100461800,0,0x0,8
tick,0x7ffe67f8feb4,100478045,0,0x0,8
tick,0x7ffe67f8feb4,100493697,0,0x0,8
tick,0x7ffe67f8feb4,100509744,0,0x0,8
tick,0x7ffe67f8feb4,100525746,0,0x0,8
tick,0x7ffe67f8feb4,100541717,0,0x0,8
tick,0x7ffe67f8feb4,100557710,0,0x0,8
tick,0x7ffe67f8feb4,100573703,0,0x0,8
tick,0x7ffe67f8feb4,100589695,0,0x0,8
tick,0x7ffe67f8feb4,100605701,0,0x0,8
tick,0x7ffe67f8feb4,100621717,0,0x0,8
tick,0x7ffe67f8feb4,100636883,0,0x0,8
tick,0x7ffe67f8feb4,100652868,0,0x0,8
tick,0x7ffe67f8feb4,100668833,0,0x0,8
tick,0x7ffe67f8feb4,100684713,0,0x0,8
tick,0x7ffe67f8feb4,100700735,0,0x0,8
tick,0x7ffe67f8feb4,100715731,0,0x0,8
tick,0x7ffe67f8feb4,100731795,0,0x0,8
tick,0x7ffe67f8feb4,100746732,0,0x0,8
tick,0x7ffe67f8feb4,100762949,0,0x0,8
tick,0x7ffe67f8feb4,100778749,0,0x0,8
tick,0x7ffe67f8feb4,100794333,0,0x0,8
tick,0x7ffe67f8feb4,100810221,0,0x0,8
tick,0x7ffe67f8feb4,100825352,0,0x0,8
tick,0x7ffe67f8feb4,100840194,0,0x0,8
tick,0x7ffe67f8feb4,100854862,0,0x0,8
tick,0x7ffe67f8feb4,100869875,0,0x0,8
tick,0x7ffe67f8feb4,100884532,0,0x0,8
tick,0x7ffe67f8feb4,100900223,0,0x0,8
tick,0x7ffe67f8feb4,100914959,0,0x0,8
tick,0x7ffe67f8feb4,100930896,0,0x0,8
tick,0x7ffe67f8feb4,100946928,0,0x0,8
tick,0x7ffe67f8feb4,100962201,0,0x0,8
tick,0x7ffe67f8feb4,100977919,0,0x0,8
tick,0x7ffe67f8feb4,100993376,0,0x0,8
tick,0x7ffe67f8feb4,101008953,0,0x0,8
tick,0x7ffe67f8feb4,101024379,0,0x0,8
tick,0x7ffe67f8feb4,101040214,0,0x0,8
tick,0x7ffe67f8feb4,101055391,0,0x0,8
tick,0x7ffe67f8feb4,101071351,0,0x0,8
tick,0x7ffe67f8feb4,101086961,0,0x0,8
tick,0x7ffe67f8feb4,101102374,0,0x0,8
tick,0x7ffe67f8feb4,101117997,0,0x0,8
tick,0x7ffe67f8feb4,101134006,0,0x0,8
tick,0x7ffe67f8feb4,101149978,0,0x0,8
tick,0x7ffe67f8feb4,101165054,0,0x0,8
tick,0x7ffe67f8feb4,101181002,0,0x0,8
tick,0x7ffe67f8feb4,101196963,0,0x0,8
tick,0x7ffe67f8feb4,101213051,0,0x0,8
tick,0x7ffe67f8feb4,101229123,0,0x0,8
tick,0x7ffe67f8feb4,101244351,0,0x0,8
tick,0x7ffe67f8feb4,101260378,0,0x0,8
tick,0x7ffe67f8feb4,101275371,0,0x0,8
tick,0x7ffe67f8feb4,101290369,0,0x0,8
tick,0x7ffe67f8feb4,101305373,0,0x0,8
tick,0x7ffe67f8feb4,101321364,0,0x0,8
tick,0x7ffe67f8feb4,101337403,0,0x0,8
tick,0x7ffe67f8feb4,101352871,0,0x0,8
tick,0x7ffe67f8feb4,101367868,0,0x0,8
tick,0x7ffe67f8feb4,101383918,0,0x0,8
tick,0x7ffe67f8feb4,101398900,0,0x0,8
tick,0x7ffe67f8feb4,101414663,0,0x0,8
tick,0x7ffe67f8feb4,101429969,0,0x0,8
tick,0x7ffe67f8feb4,101445944,0,0x0,8
tick,0x7ffe67f8feb4,101461250,0,0x0,8
tick,0x7ffe67f8feb4,101476992,0,0x0,8
tick,0x7ffe67f8feb4,101492286,0,0x0,8
tick,0x7ffe67f8feb4,101508034,0,0x0,8
tick,0x7ffe67f8feb4,101523355,0,0x0,8
tick,0x7ffe67f8feb4,101539226,0,0x0,8
tick,0x7ffe67f8feb4,101554580,0,0x0,8
tick,0x7ffe67f8feb4,101570197,0,0x0,8
tick,0x7ffe67f8feb4,101585345,0,0x0,8
tick,0x7ffe67f8feb4,101601247,0,0x0,8
tick,0x7ffe67f8feb4,101617204,0,0x0,8
tick,0x7ffe67f8feb4,101632613,0,0x0,8
tick,0x7ffe67f8feb4,101648644,0,0x0,8
tick,0x7ffe67f8feb4,101664649,0,0x0,8
tick,0x7ffe67f8feb4,101680665,0,0x0,8
tick,0x7ffe67f8feb4,101698010,0,0x0,8
tick,0x7ffe67f8feb4,101718986,0,0x0,8
tick,0x7ffe67f8feb4,101735058,0,0x0,8
tick,0x7ffe67f8feb4,101751273,0,0x0,8
tick,0x7ffe67f8feb4,101760634,0,0x0,8
tick,0x7ffe67f8feb4,101775629,0,0x0,8
tick,0x7ffe67f8feb4,101792142,0,0x0,8
tick,0x7ffe67f8feb4,101806738,0,0x0,8
tick,0x7ffe67f8feb4,101822624,0,0x0,8
tick,0x7ffe67f8feb4,101838650,0,0x0,8
tick,0x7ffe67f8feb4,101854119,0,0x0,8
tick,0x7ffe67f8feb4,101870123,0,0x0,8
tick,0x7ffe67f8feb4,101885067,0,0x0,8
tick,0x7ffe67f8feb4,101901087,0,0x0,8
tick,0x7ffe67f8feb4,101917098,0,0x0,8
tick,0x7ffe67f8feb4,101933075,0,0x0,8
tick,0x7ffe67f8feb4,101949231,0,0x0,8
tick,0x7ffe67f8feb4,101965091,0,0x0,8
tick,0x7ffe67f8feb4,101981364,0,0x0,8
tick,0x7ffe67f8feb4,101997242,0,0x0,8
tick,0x7ffe67f8feb4,102013192,0,0x0,8
tick,0x7ffe67f8feb4,102029824,0,0x0,8
tick,0x7ffe67f8feb4,102045161,0,0x0,8
tick,0x7ffe67f8feb4,102061180,0,0x0,8
tick,0x7ffe67f8feb4,102077130,0,0x0,8
tick,0x7ffe67f8feb4,102093153,0,0x0,8
tick,0x7ffe67f8feb4,102109131,0,0x0,8
tick,0x7ffe67f8feb4,102125150,0,0x0,8
tick,0x7ffe67f8feb4,102141195,0,0x0,8
tick,0x7ffe67f8feb4,102157172,0,0x0,8
tick,0x7ffe67f8feb4,102173137,0,0x0,8
tick,0x7ffe67f8feb4,102189156,0,0x0,8
tick,0x7ffe67f8feb4,102205144,0,0x0,8
tick,0x7ffe67f8feb4,102221166,0,0x0,8
tick,0x7ffe67f8feb4,102235942,0,0x0,8
tick,0x7ffe67f8feb4,102251179,0,0x0,8
tick,0x7ffe67f8feb4,102267262,0,0x0,8
tick,0x7ffe67f8feb4,102282343,0,0x0,8
tick,0x7ffe67f8feb4,102298172,0,0x0,8
tick,0x7ffe67f8feb4,102314192,0,0x0,8
tick,0x7ffe67f8feb4,102330217,0,0x0,8
tick,0x7ffe67f8feb4,102345535,0,0x0,8
tick,0x7ffe67f8feb4,102361216,0,0x0,8
tick,0x7ffe67f8feb4,102376621,0,0x0,8
tick,0x7ffe67f8feb4,102392357,0,0x0,8
tick,0x7ffe67f8feb4,102408275,0,0x0,8
tick,0x7ffe67f8feb4,102423724,0,0x0,8
tick,0x7ffe67f8feb4,102439170,0,0x0,8
tick,0x7ffe67f8feb4,102454706,0,0x0,8
tick,0x7ffe67f8feb4,102470172,0,0x0,8
tick,0x7ffe67f8feb4,102486167,0,0x0,8
tick,0x7ffe67f8feb4,102502181,0,0x0,8
tick,0x7ffe67f8feb4,102518177,0,0x0,8
tick,0x7ffe67f8feb4,102534172,0,0x0,8
tick,0x7ffe67f8feb4,102549277,0,0x0,8
tick,0x7ffe67f8feb4,102565222,0,0x0,8
tick,0x7ffe67f8feb4,102581186,0,0x0,8
tick,0x7ffe67f8feb4,102597359,0,0x0,8
tick,0x7ffe67f8feb4,102613306,0,0x0,8
tick,0x7ffe67f8feb4,102629203,0,0x0,8
tick,0x7ffe67f8feb4,102644190,0,0x0,8
tick,0x7ffe67f8feb4,102660176,0,0x0,8
tick,0x7ffe67f8feb4,102675568,0,0x0,8
tick,0x7ffe67f8feb4,102691249,0,0x0,8
tick,0x7ffe67f8feb4,102707174,0,0x0,8
tick,0x7ffe67f8feb4,102723204,0,0x0,8
tick,0x7ffe67f8feb4,102739222,0,0x0,8
tick,0x7ffe67f8feb4,102755169,0,0x0,8
tick,0x7ffe67f8feb4,102771186,0,0x0,8
tick,0x7ffe67f8feb4,102785540,0,0x0,8
tick,0x7ffe67f8feb4,102801162,0,0x0,8
tick,0x7ffe67f8feb4,102816584,0,0x0,8
tick,0x7ffe67f8feb4,102832585,0,0x0,8
tick,0x7ffe67f8feb4,102848224,0,0x0,8
tick,0x7ffe67f8feb4,102864224,0,0x0,8
tick,0x7ffe67f8feb4,102880283,0,0x0,8
tick,0x7ffe67f8feb4,102895324,0,0x0,8
tick,0x7ffe67f8feb4,102911183,0,0x0,8
tick,0x7ffe67f8feb4,102927214,0,0x0,8
tick,0x7ffe67f8feb4,102943234,0,0x0,8
tick,0x7ffe67f8feb4,102959174,0,0x0,8
tick,0x7ffe67f8feb4,102974470,0,0x0,8
tick,0x7ffe67f8feb4,102989163,0,0x0,8
tick,0x7ffe67f8feb4,103004004,0,0x0,8
tick,0x7ffe67f8feb4,103019192,0,0x0,8
tick,0x7ffe67f8feb4,103035170,0,0x0,8
tick,0x7ffe67f8feb4,103050216,0,0x0,8
tick,0x7ffe67f8feb4,103066276,0,0x0,8
tick,0x7ffe67f8feb4,103082205,0,0x0,8
tick,0x7ffe67f8feb4,103098268,0,0x0,8
tick,0x7ffe67f8feb4,103114381,0,0x0,8
tick,0x7ffe67f8feb4,103130428,0,0x0,8
tick,0x7ffe67f8feb4,103145328,0,0x0,8
tick,0x7ffe67f8feb4,103161178,0,0x0,8
tick,0x7ffe67f8feb4,103176337,0,0x0,8
tick,0x7ffe67f8feb4,103192327,0,0x0,8
tick,0x7ffe67f8feb4,103208307,0,0x0,8
tick,0x7ffe67f8feb4,103223322,0,0x0,8
tick,0x7ffe67f8feb4,103239182,0,0x0,8
tick,0x7ffe67f8feb4,103254504,0,0x0,8
tick,0x7ffe67f8feb4,103270182,0,0x0,8
tick,0x7ffe67f8feb4,103286206,0,0x0,8
tick,0x7ffe67f8feb4,103302313,0,0x0,8
tick,0x7ffe67f8feb4,103318302,0,0x0,8
tick,0x7ffe67f8feb4,103334412,0,0x0,8
tick,0x7ffe67f8feb4,103349323,0,0x0,8
tick,0x7ffe67f8feb4,103365298,0,0x0,8
tick,0x7ffe67f8feb4,103381431,0,0x0,8
tick,0x7ffe67f8feb4,103397482,0,0x0,8
tick,0x7ffe67f8feb4,103412356,0,0x0,8
tick,0x7ffe67f8feb4,103427309,0,0x0,8
tick,0x7ffe67f8feb4,103442476,0,0x0,8
tick,0x7ffe67f8feb4,103458342,0,0x0,8
tick,0x7ffe67f8feb4,103474397,0,0x0,8
tick,0x7ffe67f8feb4,103489180,0,0x0,8
tick,0x7ffe67f8feb4,103504625,0,0x0,8
tick,0x7ffe67f8feb4,103520369,0,0x0,8
tick,0x7ffe67f8feb4,103536348,0,0x0,8
tick,0x7ffe67f8feb4,103552347,0,0x0,8
tick,0x7ffe67f8feb4,103568351,0,0x0,8
tick,0x7ffe67f8feb4,103584183,0,0x0,8
tick,0x7ffe67f8feb4,103599400,0,0x0,8
tick,0x7ffe67f8feb4,103614611,0,0x0,8
tick,0x7ffe67f8feb4,103630177,0,0x0,8
tick,0x7ffe67f8feb4,103645326,0,0x0,8
tick,0x7ffe67f8feb4,103661184,0,0x0,8
tick,0x7ffe67f8feb4,103676335,0,0x0,8
tick,0x7ffe67f8feb4,103692347,0,0x0,8
tick,0x7ffe67f8feb4,103708357,0,0x0,8
tick,0x7ffe67f8feb4,103723385,0,0x0,8
tick,0x7ffe67f8feb4,103739326,0,0x0,8
tick,0x7ffe67f8feb4,103755336,0,0x0,8
tick,0x7ffe67f8feb4,103771165,0,0x0,8
tick,0x7ffe67f8feb4,103786301,0,0x0,8
tick,0x7ffe67f8feb4,103801198,0,0x0,8
tick,0x7ffe67f8feb4,103816336,0,0x0,8
tick,0x7ffe67f8feb4,103832327,0,0x0,8
tick,0x7ffe67f8feb4,103847304,0,0x0,8
tick,0x7ffe67f8feb4,103862469,0,0x0,8
tick,0x7ffe67f8feb4,103878402,0,0x0,8
tick,0x7ffe67f8feb4,103894367,0,0x0,8
tick,0x7ffe67f8feb4,103910213,0,0x0,8
tick,0x7ffe67f8feb4,103926289,0,0x0,8
tick,0x7ffe67f8feb4,103942305,0,0x0,8
tick,0x7ffe67f8feb4,103958298,0,0x0,8
tick,0x7ffe67f8feb4,103973481,0,0x0,8
tick,0x7ffe67f8feb4,103989251,0,0x0,8
tick,0x7ffe67f8feb4,104004645,0,0x0,8
tick,0x7ffe67f8feb4,104020235,0,0x0,8
tick,0x7ffe67f8feb4,104035369,0,0x0,8
tick,0x7ffe67f8feb4,104050200,0,0x0,8
tick,0x7ffe67f8feb4,104066125,0,0x0,8
tick,0x7ffe67f8feb4,104082235,0,0x0,8
tick,0x7ffe67f8feb4,104097963,0,0x0,8
tick,0x7ffe67f8feb4,104113226,0,0x0,8
tick,0x7ffe67f8feb4,104128872,0,0x0,8
tick,0x7ffe67f8feb4,104144718,0,0x0,8
tick,0x7ffe67f8feb4,104160278,0,0x0,8
tick,0x7ffe67f8feb4,104176144,0,0x0,8
tick,0x7ffe67f8feb4,104192394,0,0x0,8
tick,0x7ffe67f8feb4,104207140,0,0x0,8
tick,0x7ffe67f8feb4,104222330,0,0x0,8
tick,0x7ffe67f8feb4,104238164,0,0x0,8
tick,0x7ffe67f8feb4,104253354,0,0x0,8
tick,0x7ffe67f8feb4,104269178,0,0x0,8
tick,0x7ffe67f8feb4,104285207,0,0x0,8
tick,0x7ffe67f8feb4,104300478,0,0x0,8
tick,0x7ffe67f8feb4,104316243,0,0x0,8
tick,0x7ffe67f8feb4,104331239,0,0x0,8
tick,0x7ffe67f8feb4,104346505,0,0x0,8
tick,0x7ffe67f8feb4,104361350,0,0x0,8
tick,0x7ffe67f8feb4,104376420,0,0x0,8
tick,0x7ffe67f8feb4,104392322,0,0x0,8
tick,0x7ffe67f8feb4,104408486,0,0x0,8
tick,0x7ffe67f8feb4,104424384,0,0x0,8
tick,0x7ffe67f8feb4,104440261,0,0x0,8
tick,0x7ffe67f8feb4,104455507,0,0x0,8
tick,0x7ffe67f8feb4,104471370,0,0x0,8
tick,0x7ffe67f8feb4,104486915,0,0x0,8
tick,0x7ffe67f8feb4,104502432,0,0x0,8
tick,0x7ffe67f8feb4,104518296,0,0x0,8
tick,0x7ffe67f8feb4,104534496,0,0x0,8
tick,0x7ffe67f8feb4,104549678,0,0x0,8
tick,0x7ffe67f8feb4,104565474,0,0x0,8
tick,0x7ffe67f8feb4,104581292,0,0x0,8
tick,0x7ffe67f8feb4,104596748,0,0x0,8
tick,0x7ffe67f8feb4,104612584,0,0x0,8
tick,0x7ffe67f8feb4,104628029,0,0x0,8
tick,0x7ffe67f8feb4,104643715,0,0x0,8
tick,0x7ffe67f8feb4,104659438,0,0x0,8
tick,0x7ffe67f8feb4,104675272,0,0x0,8
tick,0x7ffe67f8feb4,104691283,0,0x0,8
tick,0x7ffe67f8feb4,104707352,0,0x0,8
tick,0x7ffe67f8feb4,104722290,0,0x0,8
tick,0x7ffe67f8feb4,104738286,0,0x0,8
tick,0x7ffe67f8feb4,104754267,0,0x0,8
tick,0x7ffe67f8feb4,104770264,0,0x0,8
tick,0x7ffe67f8feb4,104786305,0,0x0,8
tick,0x7ffe67f8feb4,104802336,0,0x0,8
tick,0x7ffe67f8feb4,104818461,0,0x0,8
tick,0x7ffe67f8feb4,104834237,0,0x0,8
tick,0x7ffe67f8feb4,104850220,0,0x0,8
tick,0x7ffe67f8feb4,104865864,0,0x0,8
tick,0x7ffe67f8feb4,104880665,0,0x0,8
tick,0x7ffe67f8feb4,104896680,0,0x0,8
tick,0x7ffe67f8feb4,104912642,0,0x0,8
tick,0x7ffe67f8feb4,104928221,0,0x0,8
tick,0x7ffe67f8feb4,104943589,0,0x0,8
tick,0x7ffe67f8feb4,104959357,0,0x0,8
tick,0x7ffe67f8feb4,104975230,0,0x0,8
tick,0x7ffe67f8feb4,104991307,0,0x0,8
tick,0x7ffe67f8feb4,105006612,0,0x0,8
tick,0x7ffe67f8feb4,105022383,0,0x0,8
tick,0x7ffe67f8feb4,105037919,0,0x0,8
tick,0x7ffe67f8feb4,105054002,0,0x0,8
tick,0x7ffe67f8feb4,105069321,0,0x0,8
tick,0x7ffe67f8feb4,105084050,0,0x0,8
tick,0x7ffe67f8feb4,105099222,0,0x0,8
tick,0x7ffe67f8feb4,105115002,0,0x0,8
tick,0x7ffe67f8feb4,105130257,0,0x0,8
tick,0x7ffe67f8feb4,105145494,0,0x0,8
tick,0x7ffe67f8feb4,105161346,0,0x0,8
tick,0x7ffe67f8feb4,105176773,0,0x0,8
tick,0x7ffe67f8feb4,105192678,0,0x0,8
tick,0x7ffe67f8feb4,105207556,0,0x0,8
tick,0x7ffe67f8feb4,105222872,0,0x0,8
tick,0x7ffe67f8feb4,105239034,0,0x0,8
tick,0x7ffe67f8feb4,105254668,0,0x0,8
tick,0x7ffe67f8feb4,105270254,0,0x0,8
tick,0x7ffe67f8feb4,105285723,0,0x0,8
tick,0x7ffe67f8feb4,105301260,0,0x0,8
tick,0x7ffe67f8feb4,105317301,0,0x0,8
tick,0x7ffe67f8feb4,105332759,0,0x0,8
tick,0x7ffe67f8feb4,105348291,0,0x0,8
tick,0x7ffe67f8feb4,105363671,0,0x0,8
tick,0x7ffe67f8feb4,105379414,0,0x0,8
tick,0x7ffe67f8feb4,105395309,0,0x0,8
tick,0x7ffe67f8feb4,105410223,0,0x0,8
tick,0x7ffe67f8feb4,105426231,0,0x0,8
tick,0x7ffe67f8feb4,105441233,0,0x0,8
tick,0x7ffe67f8feb4,105456444,0,0x0,8
tick,0x7ffe67f8feb4,105472219,0,0x0,8
tick,0x7ffe67f8feb4,105487426,0,0x0,8
tick,0x7ffe67f8feb4,105503323,0,0x0,8
tick,0x7ffe67f8feb4,105519599,0,0x0,8
tick,0x7ffe67f8feb4,105535087,0,0x0,8
tick,0x7ffe67f8feb4,105550343,0,0x0,8
tick,0x7ffe67f8feb4,105565830,0,0x0,8
tick,0x7ffe67f8feb4,105581279,0,0x0,8
tick,0x7ffe67f8feb4,105596492,0,0x0,8
tick,0x7ffe67f8feb4,105612390,0,0x0,8
tick,0x7ffe67f8feb4,105627584,0,0x0,8
tick,0x7ffe67f8feb4,105643458,0,0x0,8
tick,0x7ffe67f8feb4,105658917,0,0x0,8
tick,0x7ffe67f8feb4,105674472,0,0x0,8
tick,0x7ffe67f8feb4,105690349,0,0x0,8
tick,0x7ffe67f8feb4,105706470,0,0x0,8
tick,0x7ffe67f8feb4,105721321,0,0x0,8
tick,0x7ffe67f8feb4,105737278,0,0x0,8
tick,0x7ffe67f8feb4,105753260,0,0x0,8
tick,0x7ffe67f8feb4,105769252,0,0x0,8
tick,0x7ffe67f8feb4,105785233,0,0x0,8
tick,0x7ffe67f8feb4,105801194,0,0x0,8
tick,0x7ffe67f8feb4,105816317,0,0x0,8
tick,0x7ffe67f8feb4,105831376,0,0x0,8
tick,0x7ffe67f8feb4,105846765,0,0x0,8
tick,0x7ffe67f8feb4,105862402,0,0x0,8
tick,0x7ffe67f8feb4,105878458,0,0x0,8
tick,0x7ffe67f8feb4,105894395,0,0x0,8
tick,0x7ffe67f8feb4,105910282,0,0x0,8
tick,0x7ffe67f8feb4,105926579,0,0x0,8
tick,0x7ffe67f8feb4,105941507,0,0x0,8
tick,0x7ffe67f8feb4,105956730,0,0x0,8
tick,0x7ffe67f8feb4,105972706,0,0x0,8
tick,0x7ffe67f8feb4,105988763,0,0x0,8
tick,0x7ffe67f8feb4,106004698,0,0x0,8
tick,0x7ffe67f8feb4,106020224,0,0x0,8
tick,0x7ffe67f8feb4,106035927,0,0x0,8
tick,0x7ffe67f8feb4,106051347,0,0x0,8
tick,0x7ffe67f8feb4,106067354,0,0x0,8
tick,0x7ffe67f8feb4,106082919,0,0x0,8
tick,0x7ffe67f8feb4,106097862,0,0x0,8
tick,0x7ffe67f8feb4,106113918,0,0x0,8
tick,0x7ffe67f8feb4,106129238,0,0x0,8
tick,0x7ffe67f8feb4,106144565,0,0x0,8
tick,0x7ffe67f8feb4,106160522,0,0x0,8
tick,0x7ffe67f8feb4,106176659,0,0x0,8
tick,0x7ffe67f8feb4,106191460,0,0x0,8
tick,0x7ffe67f8feb4,106207661,0,0x0,8
tick,0x7ffe67f8feb4,106223753,0,0x0,8
tick,0x7ffe67f8feb4,106238863,0,0x0,8
tick,0x7ffe67f8feb4,106254748,0,0x0,8
tick,0x7ffe67f8feb4,106270467,0,0x0,8
tick,0x7ffe67f8feb4,106285976,0,0x0,8
tick,0x7ffe67f8feb4,106301517,0,0x0,8
tick,0x7ffe67f8feb4,106317425,0,0x0,8
tick,0x7ffe67f8feb4,106333625,0,0x0,8
tick,0x7ffe67f8feb4,106348525,0,0x0,8
tick,0x7ffe67f8feb4,106364492,0,0x0,8
tick,0x7ffe67f8feb4,106380303,0,0x0,8
tick,0x7ffe67f8feb4,106395610,0,0x0,8
tick,0x7ffe67f8feb4,106411278,0,0x0,8
tick,0x7ffe67f8feb4,106426685,0,0x0,8
tick,0x7ffe67f8feb4,106442672,0,0x0,8
tick,0x7ffe67f8feb4,106459134,0,0x0,8
tick,0x7ffe67f8feb4,106473193,0,0x0,8
tick,0x7ffe67f8feb4,106489216,0,0x0,8
tick,0x7ffe67f8feb4,106505201,0,0x0,8
tick,0x7ffe67f8feb4,106521221,0,0x0,8
tick,0x7ffe67f8feb4,106537276,0,0x0,8
tick,0x7ffe67f8feb4,106553483,0,0x0,8
tick,0x7ffe67f8feb4,106569817,0,0x0,8
tick,0x7ffe67f8feb4,106586133,0,0x0,8
tick,0x7ffe67f8feb4,106601200,0,0x0,8
tick,0x7ffe67f8feb4,106617132,0,0x0,8
tick,0x7ffe67f8feb4,106632383,0,0x0,8
tick,0x7ffe67f8feb4,106648228,0,0x0,8
tick,0x7ffe67f8feb4,106663367,0,0x0,8
tick,0x7ffe67f8feb4,106679217,0,0x0,8
tick,0x7ffe67f8feb4,106695235,0,0x0,8
tick,0x7ffe67f8feb4,106710410,0,0x0,8
tick,0x7ffe67f8feb4,106726214,0,0x0,8
tick,0x7ffe67f8feb4,106741205,0,0x0,8
tick,0x7ffe67f8feb4,106757203,0,0x0,8
tick,0x7ffe67f8feb4,106773217,0,0x0,8
tick,0x7ffe67f8feb4,106789230,0,0x0,8
tick,0x7ffe67f8feb4,106805236,0,0x0,8
tick,0x7ffe67f8feb4,106821243,0,0x0,8
tick,0x7ffe67f8feb4,106836476,0,0x0,8
tick,0x7ffe67f8feb4,106852481,0,0x0,8
tick,0x7ffe67f8feb4,106868504,0,0x0,8
tick,0x7ffe67f8feb4,106884202,0,0x0,8
tick,0x7ffe67f8feb4,106899522,0,0x0,8
tick,0x7ffe67f8feb4,106915532,0,0x0,8
tick,0x7ffe67f8feb4,106931209,0,0x0,8
tick,0x7ffe67f8feb4,106946317,0,0x0,8
tick,0x7ffe67f8feb4,106962343,0,0x0,8
tick,0x7ffe67f8feb4,106978352,0,0x0,8
tick,0x7ffe67f8feb4,106994395,0,0x0,8
tick,0x7ffe67f8feb4,107010388,0,0x0,8
tick,0x7ffe67f8feb4,107025572,0,0x0,8
tick,0x7ffe67f8feb4,107041282,0,0x0,8
tick,0x7ffe67f8feb4,107056680,0,0x0,8
tick,0x7ffe67f8feb4,107072695,0,0x0,8
tick,0x7ffe67f8feb4,107088689,0,0x0,8
tick,0x7ffe67f8feb4,107104290,0,0x0,8
tick,0x7ffe67f8feb4,107119678,0,0x0,8
tick,0x7ffe67f8feb4,107134893,0,0x0,8
tick,0x7ffe67f8feb4,107151167,0,0x0,8
tick,0x7ffe67f8feb4,107166783,0,0x0,8
tick,0x7ffe67f8feb4,107182871,0,0x0,8
tick,0x7ffe67f8feb4,107198879,0,0x0,8
tick,0x7ffe67f8feb4,107214977,0,0x0,8
tick,0x7ffe67f8feb4,107230873,0,0x0,8
tick,0x7ffe67f8feb4,107246696,0,0x0,8
tick,0x7ffe67f8feb4,107261887,0,0x0,8
tick,0x7ffe67f8feb4,107277666,0,0x0,8
tick,0x7ffe67f8feb4,107292888,0,0x0,8
tick,0x7ffe67f8feb4,107308889,0,0x0,8
tick,0x7ffe67f8feb4,107324895,0,0x0,8
tick,0x7ffe67f8feb4,107340204,0,0x0,8
tick,0x7ffe67f8feb4,107355932,0,0x0,8
tick,0x7ffe67f8feb4,107371153,0,0x0,8
tick,0x7ffe67f8feb4,107387172,0,0x0,8
tick,0x7ffe67f8feb4,107402982,0,0x0,8
tick,0x7ffe67f8feb4,107419205,0,0x0,8
tick,0x7ffe67f8feb4,107434356,0,0x0,8
tick,0x7ffe67f8feb4,107450197,0,0x0,8
tick,0x7ffe67f8feb4,107464937,0,0x0,8
tick,0x7ffe67f8feb4,107480183,0,0x0,8
tick,0x7ffe67f8feb4,107495778,0,0x0,8
tick,0x7ffe67f8feb4,107510919,0,0x0,8
tick,0x7ffe67f8feb4,107526838,0,0x0,8
tick,0x7ffe67f8feb4,107542005,0,0x0,8
tick,0x7ffe67f8feb4,107556960,0,0x0,8
tick,0x7ffe67f8feb4,107572371,0,0x0,8
tick,0x7ffe67f8feb4,107587961,0,0x0,8
tick,0x7ffe67f8feb4,107603961,0,0x0,8
tick,0x7ffe67f8feb4,107619474,0,0x0,8
tick,0x7ffe67f8feb4,107635977,0,0x0,8
tick,0x7ffe67f8feb4,107651296,0,0x0,8
tick,0x7ffe67f8feb4,107667261,0,0x0,8
tick,0x7ffe67f8feb4,107682469,0,0x0,8
tick,0x7ffe67f8feb4,107698264,0,0x0,8
tick,0x7ffe67f8feb4,107713356,0,0x0,8
tick,0x7ffe67f8feb4,107728963,0,0x0,8
tick,0x7ffe67f8feb4,107744452,0,0x0,8
tick,0x7ffe67f8feb4,107760505,0,0x0,8
tick,0x7ffe67f8feb4,107776471,0,0x0,8
tick,0x7ffe67f8feb4,107792351,0,0x0,8
tick,0x7ffe67f8feb4,107807504,0,0x0,8
tick,0x7ffe67f8feb4,107823311,0,0x0,8
tick,0x7ffe67f8feb4,107838484,0,0x0,8
tick,0x7ffe67f8feb4,107854579,0,0x0,8
tick,0x7ffe67f8feb4,107870490,0,0x0,8
tick,0x7ffe67f8feb4,107887071,0,0x0,8
tick,0x7ffe67f8feb4,107902843,0,0x0,8
tick,0x7ffe67f8feb4,107918595,0,0x0,8
tick,0x7ffe67f8feb4,107934538,0,0x0,8
tick,0x7ffe67f8feb4,107950205,0,0x0,8
tick,0x7ffe67f8feb4,107965524,0,0x0,8
tick,0x7ffe67f8feb4,107981189,0,0x0,8
tick,0x7ffe67f8feb4,107997162,0,0x0,8
tick,0x7ffe67f8feb4,108012520,0,0x0,8
tick,0x7ffe67f8feb4,108028121,0,0x0,8
tick,0x7ffe67f8feb4,108043754,0,0x0,8
tick,0x7ffe67f8feb4,108059580,0,0x0,8
tick,0x7ffe67f8feb4,108075450,0,0x0,8
tick,0x7ffe67f8feb4,108091442,0,0x0,8
tick,0x7ffe67f8feb4,108107454,0,0x0,8
tick,0x7ffe67f8feb4,108123349,0,0x0,8
tick,0x7ffe67f8feb4,108139387,0,0x0,8
tick,0x7ffe67f8feb4,108155420,0,0x0,8
tick,0x7ffe67f8feb4,108170885,0,0x0,8
tick,0x7ffe67f8feb4,108186971,0,0x0,8
tick,0x7ffe67f8feb4,108202271,0,0x0,8
tick,0x7ffe67f8feb4,108217893,0,0x0,8
tick,0x7ffe67f8feb4,108233351,0,0x0,8
tick,0x7ffe67f8feb4,108248907,0,0x0,8
tick,0x7ffe67f8feb4,108264379,0,0x0,8
tick,0x7ffe67f8feb4,108280195,0,0x0,8
tick,0x7ffe67f8feb4,108296196,0,0x0,8
tick,0x7ffe67f8feb4,108311325,0,0x0,8
tick,0x7ffe67f8feb4,108327063,0,0x0,8
tick,0x7ffe67f8feb4,108342381,0,0x0,8
tick,0x7ffe67f8feb4,108357513,0,0x0,8
tick,0x7ffe67f8feb4,108373401,0,0x0,8
tick,0x7ffe67f8feb4,108388392,0,0x0,8
tick,0x7ffe67f8feb4,108404486,0,0x0,8
tick,0x7ffe67f8feb4,108420232,0,0x0,8
tick,0x7ffe67f8feb4,108436192,0,0x0,8
tick,0x7ffe67f8feb4,108451348,0,0x0,8
tick,0x7ffe67f8feb4,108466445,0,0x0,8
tick,0x7ffe67f8feb4,108482360,0,0x0,8
tick,0x7ffe67f8feb4,108498373,0,0x0,8
tick,0x7ffe67f8feb4,108513535,0,0x0,8
tick,0x7ffe67f8feb4,108528861,0,0x0,8
tick,0x7ffe67f8feb4,108544200,0,0x0,8
tick,0x7ffe67f8feb4,108560199,0,0x0,8
tick,0x7ffe67f8feb4,108575716,0,0x0,8
tick,0x7ffe67f8feb4,108591234,0,0x0,8
tick,0x7ffe67f8feb4,108606997,0,0x0,8
tick,0x7ffe67f8feb4,108622279,0,0x0,8
tick,0x7ffe67f8feb4,108638350,0,0x0,8
tick,0x7ffe67f8feb4,108654282,0,0x0,8
tick,0x7ffe67f8feb4,108669413,0,0x0,8
tick,0x7ffe67f8feb4,108685248,0,0x0,8
tick,0x7ffe67f8feb4,108701275,0,0x0,8
tick,0x7ffe67f8feb4,108717275,0,0x0,8
tick,0x7ffe67f8feb4,108733268,0,0x0,8
tick,0x7ffe67f8feb4,108749300,0,0x0,8
tick,0x7ffe67f8feb4,108765275,0,0x0,8
tick,0x7ffe67f8feb4,108781246,0,0x0,8
tick,0x7ffe67f8feb4,108796475,0,0x0,8
tick,0x7ffe67f8feb4,108812340,0,0x0,8
tick,0x7ffe67f8feb4,108828453,0,0x0,8
tick,0x7ffe67f8feb4,108844381,0,0x0,8
tick,0x7ffe67f8feb4,108860201,0,0x0,8
tick,0x7ffe67f8feb4,108876216,0,0x0,8
tick,0x7ffe67f8feb4,108891387,0,0x0,8
tick,0x7ffe67f8feb4,108907369,0,0x0,8
tick,0x7ffe67f8feb4,108923346,0,0x0,8
tick,0x7ffe67f8feb4,108939231,0,0x0,8
tick,0x7ffe67f8feb4,108955212,0,0x0,8
tick,0x7ffe67f8feb4,108971188,0,0x0,8
tick,0x7ffe67f8feb4,108987212,0,0x0,8
tick,0x7ffe67f8feb4,109002434,0,0x0,8
tick,0x7ffe67f8feb4,109018301,0,0x0,8
tick,0x7ffe67f8feb4,109034285,0,0x0,8
tick,0x7ffe67f8feb4,109050251,0,0x0,8
tick,0x7ffe67f8feb4,109066522,0,0x0,8
tick,0x7ffe67f8feb4,109081495,0,0x0,8
tick,0x7ffe67f8feb4,109097561,0,0x0,8
tick,0x7ffe67f8feb4,109114910,0,0x0,8
tick,0x7ffe67f8feb4,109130074,0,0x0,8
tick,0x7ffe67f8feb4,109145636,0,0x0,8
tick,0x7ffe67f8feb4,109160819,0,0x0,8
tick,0x7ffe67f8feb4,109176061,0,0x0,8
tick,0x7ffe67f8feb4,109191258,0,0x0,8
tick,0x7ffe67f8feb4,109207260,0,0x0,8
tick,0x7ffe67f8feb4,109223271,0,0x0,8
tick,0x7ffe67f8feb4,109239221,0,0x0,8
tick,0x7ffe67f8feb4,109254817,0,0x0,8
tick,0x7ffe67f8feb4,109270478,0,0x0,8
tick,0x7ffe67f8feb4,109286181,0,0x0,8
tick,0x7ffe67f8feb4,109302197,0,0x0,8
tick,0x7ffe67f8feb4,109318215,0,0x0,8
tick,0x7ffe67f8feb4,109334188,0,0x0,8
tick,0x7ffe67f8feb4,109350198,0,0x0,8
tick,0x7ffe67f8feb4,109366201,0,0x0,8
tick,0x7ffe67f8feb4,109382193,0,0x0,8
tick,0x7ffe67f8feb4,109398220,0,0x0,8
tick,0x7ffe67f8feb4,109414253,0,0x0,8
tick,0x7ffe67f8feb4,109430218,0,0x0,8
tick,0x7ffe67f8feb4,109446207,0,0x0,8
tick,0x7ffe67f8feb4,109462211,0,0x0,8
tick,0x7ffe67f8feb4,109478227,0,0x0,8
tick,0x7ffe67f8feb4,109494211,0,0x0,8
tick,0x7ffe67f8feb4,109510227,0,0x0,8
tick,0x7ffe67f8feb4,109526199,0,0x0,8
tick,0x7ffe67f8feb4,109542283,0,0x0,8
tick,0x7ffe67f8feb4,109558286,0,0x0,8
tick,0x7ffe67f8feb4,109574359,0,0x0,8
tick,0x7ffe67f8feb4,109590287,0,0x0,8
tick,0x7ffe67f8feb4,109606240,0,0x0,8
tick,0x7ffe67f8feb4,109622269,0,0x0,8
tick,0x7ffe67f8feb4,109638273,0,0x0,8
tick,0x7ffe67f8feb4,109654344,0,0x0,8
tick,0x7ffe67f8feb4,109670460,0,0x0,8
tick,0x7ffe67f8feb4,109686261,0,0x0,8
tick,0x7ffe67f8feb4,109702250,0,0x0,8
tick,0x7ffe67f8feb4,109718253,0,0x0,8
tick,0x7ffe67f8feb4,109734258,0,0x0,8
tick,0x7ffe67f8feb4,109750263,0,0x0,8
tick,0x7ffe67f8feb4,109766260,0,0x0,8
tick,0x7ffe67f8feb4,109782255,0,0x0,8
tick,0x7ffe67f8feb4,109797278,0,0x0,8
tick,0x7ffe67f8feb4,109813119,0,0x0,8
tick,0x7ffe67f8feb4,109828342,0,0x0,8
tick,0x7ffe67f8feb4,109844071,0,0x0,8
tick,0x7ffe67f8feb4,109860118,0,0x0,8
tick,0x7ffe67f8feb4,109876160,0,0x0,8
tick,0x7ffe67f8feb4,109891175,0,0x0,8
tick,0x7ffe67f8feb4,109906148,0,0x0,8
tick,0x7ffe67f8feb4,109921182,0,0x0,8
tick,0x7ffe67f8feb4,109937372,0,0x0,8
tick,0x7ffe67f8feb4,109952169,0,0x0,8
tick,0x7ffe67f8feb4,109967162,0,0x0,8
tick,0x7ffe67f8feb4,109982298,0,0x0,8
tick,0x7ffe67f8feb4,109998190,0,0x0,8
tick,0x7ffe67f8feb4,110014187,0,0x0,8
tick,0x7ffe67f8feb4,110030216,0,0x0,8
tick,0x7ffe67f8feb4,110045594,0,0x0,8
tick,0x7ffe67f8feb4,110061113,0,0x0,8
tick,0x7ffe67f8feb4,110076692,0,0x0,8
tick,0x7ffe67f8feb4,110092614,0,0x0,8
tick,0x7ffe67f8feb4,110108620,0,0x0,8
tick,0x7ffe67f8feb4,110124641,0,0x0,8
tick,0x7ffe67f8feb4,110140683,0,0x0,8
tick,0x7ffe67f8feb4,110156630,0,0x0,8
tick,0x7ffe67f8feb4,110172722,0,0x0,8
tick,0x7ffe67f8feb4,110188663,0,0x0,8
tick,0x7ffe67f8feb4,110205031,0,0x0,8
tick,0x7ffe67f8feb4,110220491,0,0x0,8
tick,0x7ffe67f8feb4,110236345,0,0x0,8
tick,0x7ffe67f8feb4,110252113,0,0x0,8
tick,0x7ffe67f8feb4,110268110,0,0x0,8
tick,0x7ffe67f8feb4,110283437,0,0x0,8
tick,0x7ffe67f8feb4,110299134,0,0x0,8
tick,0x7ffe67f8feb4,110314367,0,0x0,8
tick,0x7ffe67f8feb4,110330210,0,0x0,8
tick,0x7ffe67f8feb4,110345179,0,0x0,8
tick,0x7ffe67f8feb4,110361178,0,0x0,8
tick,0x7ffe67f8feb4,110377195,0,0x0,8
tick,0x7ffe67f8feb4,110392204,0,0x0,8
tick,0x7ffe67f8feb4,110408262,0,0x0,8
tick,0x7ffe67f8feb4,110424304,0,0x0,8
tick,0x7ffe67f8feb4,110439641,0,0x0,8
tick,0x7ffe67f8feb4,110455620,0,0x0,8
tick,0x7ffe67f8feb4,110471660,0,0x0,8
tick,0x7ffe67f8feb4,110486930,0,0x0,8
tick,0x7ffe67f8feb4,110502637,0,0x0,8
tick,0x7ffe67f8feb4,110518283,0,0x0,8
tick,0x7ffe67f8feb4,110533770,0,0x0,8
tick,0x7ffe67f8feb4,110549037,0,0x0,8
tick,0x7ffe67f8feb4,110564694,0,0x0,8
tick,0x7ffe67f8feb4,110580597,0,0x0,8
tick,0x7ffe67f8feb4,110596648,0,0x0,8
tick,0x7ffe67f8feb4,110611547,0,0x0,8
tick,0x7ffe67f8feb4,110627456,0,0x0,8
tick,0x7ffe67f8feb4,110642736,0,0x0,8
tick,0x7ffe67f8feb4,110658715,0,0x0,8
tick,0x7ffe67f8feb4,110674718,0,0x0,8
tick,0x7ffe67f8feb4,110689544,0,0x0,8
tick,0x7ffe67f8feb4,110705061,0,0x0,8
tick,0x7ffe67f8feb4,110720131,0,0x0,8
tick,0x7ffe67f8feb4,110735637,0,0x0,8
tick,0x7ffe67f8feb4,110751361,0,0x0,8
tick,0x7ffe67f8feb4,110767357,0,0x0,8
tick,0x7ffe67f8feb4,110782361,0,0x0,8
tick,0x7ffe67f8feb4,110797360,0,0x0,8
tick,0x7ffe67f8feb4,110812529,0,0x0,8
tick,0x7ffe67f8feb4,110828367,0,0x0,8
tick,0x7ffe67f8feb4,110844178,0,0x0,8
tick,0x7ffe67f8feb4,110859474,0,0x0,8
tick,0x7ffe67f8feb4,110874775,0,0x0,8
tick,0x7ffe67f8feb4,110889519,0,0x0,8
tick,0x7ffe67f8feb4,110905151,0,0x0,8
tick,0x7ffe67f8feb4,110920341,0,0x0,8
tick,0x7ffe67f8feb4,110935362,0,0x0,8
tick,0x7ffe67f8feb4,110950650,0,0x0,8
tick,0x7ffe67f8feb4,110966031,0,0x0,8
tick,0x7ffe67f8feb4,110982084,0,0x0,8
tick,0x7ffe67f8feb4,110997900,0,0x0,8
tick,0x7ffe67f8feb4,111013112,0,0x0,8
tick,0x7ffe67f8feb4,111028187,0,0x0,8
tick,0x7ffe67f8feb4,111044282,0,0x0,8
tick,0x7ffe67f8feb4,111058824,0,0x0,8
tick,0x7ffe67f8feb4,111074996,0,0x0,8
tick,0x7ffe67f8feb4,111091056,0,0x0,8
tick,0x7ffe67f8feb4,111106840,0,0x0,8
tick,0x7ffe67f8feb4,111122787,0,0x0,8
tick,0x7ffe67f8feb4,111138438,0,0x0,8
tick,0x7ffe67f8feb4,111153572,0,0x0,8
tick,0x7ffe67f8feb4,111168872,0,0x0,8
tick,0x7ffe67f8feb4,111184130,0,0x0,8
tick,0x7ffe67f8feb4,111199209,0,0x0,8
tick,0x7ffe67f8feb4,111214673,0,0x0,8
tick,0x7ffe67f8feb4,111230780,0,0x0,8
tick,0x7ffe67f8feb4,111246150,0,0x0,8
tick,0x7ffe67f8feb4,111261551,0,0x0,8
tick,0x7ffe67f8feb4,111276726,0,0x0,8
tick,0x7ffe67f8feb4,111291710,0,0x0,8
tick,0x7ffe67f8feb4,111306912,0,0x0,8
tick,0x7ffe67f8feb4,111322296,0,0x0,8
tick,0x7ffe67f8feb4,111337647,0,0x0,8
tick,0x7ffe67f8feb4,111353443,0,0x0,8
tick,0x7ffe67f8feb4,111368433,0,0x0,8
tick,0x7ffe67f8feb4,111383499,0,0x0,8
tick,0x7ffe67f8feb4,111398838,0,0x0,8
tick,0x7ffe67f8feb4,111413991,0,0x0,8
tick,0x7ffe67f8feb4,111429736,0,0x0,8
tick,0x7ffe67f8feb4,111444800,0,0x0,8
tick,0x7ffe67f8feb4,111460258,0,0x0,8
tick,0x7ffe67f8feb4,111475831,0,0x0,8
tick,0x7ffe67f8feb4,111491615,0,0x0,8
tick,0x7ffe67f8feb4,111507674,0,0x0,8
tick,0x7ffe67f8feb4,111522713,0,0x0,8
tick,0x7ffe67f8feb4,111537902,0,0x0,8
tick,0x7ffe67f8feb4,111553330,0,0x0,8
tick,0x7ffe67f8feb4,111568975,0,0x0,8
tick,0x7ffe67f8feb4,111584211,0,0x0,8
tick,0x7ffe67f8feb4,111600593,0,0x0,8
tick,0x7ffe67f8feb4,111615231,0,0x0,8
tick,0x7ffe67f8feb4,111630550,0,0x0,8
tick,0x7ffe67f8feb4,111646470,0,0x0,8
tick,0x7ffe67f8feb4,111661680,0,0x0,8
tick,0x7ffe67f8feb4,111676853,0,0x0,8
tick,0x7ffe67f8feb4,111692455,0,0x0,8
tick,0x7ffe67f8feb4,111707782,0,0x0,8
tick,0x7ffe67f8feb4,111723049,0,0x0,8
tick,0x7ffe67f8feb4,111738308,0,0x0,8
tick,0x7ffe67f8feb4,111754336,0,0x0,8
tick,0x7ffe67f8feb4,111770270,0,0x0,8
tick,0x7ffe67f8feb4,111786263,0,0x0,8
tick,0x7ffe67f8feb4,111802267,0,0x0,8
tick,0x7ffe67f8feb4,111818300,0,0x0,8
tick,0x7ffe67f8feb4,111833499,0,0x0,8
tick,0x7ffe67f8feb4,111849361,0,0x0,8
tick,0x7ffe67f8feb4,111864949,0,0x0,8
tick,0x7ffe67f8feb4,111880639,0,0x0,8
tick,0x7ffe67f8feb4,111896330,0,0x0,8
tick,0x7ffe67f8feb4,111912326,0,0x0,8
tick,0x7ffe67f8feb4,111927396,0,0x0,8
tick,0x7ffe67f8feb4,111942988,0,0x0,8
tick,0x7ffe67f8feb4,111958386,0,0x0,8
tick,0x7ffe67f8feb4,111974462,0,0x0,8
tick,0x7ffe67f8feb4,111990438,0,0x0,8
tick,0x7ffe67f8feb4,112006553,0,0x0,8
tick,0x7ffe67f8feb4,112021639,0,0x0,8
tick,0x7ffe67f8feb4,112037650,0,0x0,8
tick,0x7ffe67f8feb4,112052925,0,0x0,8
tick,0x7ffe67f8feb4,112068570,0,0x0,8
tick,0x7ffe67f8feb4,112084088,0,0x0,8
tick,0x7ffe67f8feb4,112099254,0,0x0,8
tick,0x7ffe67f8feb4,112114979,0,0x0,8
tick,0x7ffe67f8feb4,112130272,0,0x0,8
tick,0x7ffe67f8feb4,112145936,0,0x0,8
tick,0x7ffe67f8feb4,112161960,0,0x0,8
tick,0x7ffe67f8feb4,112177241,0,0x0,8
tick,0x7ffe67f8feb4,112192989,0,0x0,8
tick,0x7ffe67f8feb4,112208116,0,0x0,8
tick,0x7ffe67f8feb4,112223221,0,0x0,8
tick,0x7ffe67f8feb4,112239104,0,0x0,8
tick,0x7ffe67f8feb4,112255117,0,0x0,8
tick,0x7ffe67f8feb4,112271400,0,0x0,8
tick,0x7ffe67f8feb4,112287748,0,0x0,8
tick,0x7ffe67f8feb4,112302621,0,0x0,8
tick,0x7ffe67f8feb4,112318799,0,0x0,8
tick,0x7ffe67f8feb4,112334808,0,0x0,8
tick,0x7ffe67f8feb4,112350314,0,0x0,8
tick,0x7ffe67f8feb4,112365780,0,0x0,8
tick,0x7ffe67f8feb4,112381280,0,0x0,8
tick,0x7ffe67f8feb4,112396891,0,0x0,8
tick,0x7ffe67f8feb4,112412115,0,0x0,8
tick,0x7ffe67f8feb4,112427605,0,0x0,8
tick,0x7ffe67f8feb4,112444148,0,0x0,8
tick,0x7ffe67f8feb4,112458421,0,0x0,8
tick,0x7ffe67f8feb4,112474608,0,0x0,8
tick,0x7ffe67f8feb4,112490438,0,0x0,8
tick,0x7ffe67f8feb4,112505607,0,0x0,8
tick,0x7ffe67f8feb4,112521017,0,0x0,8
tick,0x7ffe67f8feb4,112536747,0,0x0,8
tick,0x7ffe67f8feb4,112551711,0,0x0,8
tick,0x7ffe67f8feb4,112567724,0,0x0,8
tick,0x7ffe67f8feb4,112583501,0,0x0,8
tick,0x7ffe67f8feb4,112598837,0,0x0,8
tick,0x7ffe67f8feb4,112614965,0,0x0,8
tick,0x7ffe67f8feb4,112630285,0,0x0,8
tick,0x7ffe67f8feb4,112645353,0,0x0,8
tick,0x7ffe67f8feb4,112659973,0,0x0,8
tick,0x7ffe67f8feb4,112675594,0,0x0,8
tick,0x7ffe67f8feb4,112691170,0,0x0,8
tick,0x7ffe67f8feb4,112706613,0,0x0,8
tick,0x7ffe67f8feb4,112721763,0,0x0,8
tick,0x7ffe67f8feb4,112736460,0,0x0,8
tick,0x7ffe67f8feb4,112752037,0,0x0,8
tick,0x7ffe67f8feb4,112767944,0,0x0,8
tick,0x7ffe67f8feb4,112783907,0,0x0,8
tick,0x7ffe67f8feb4,112799926,0,0x0,8
tick,0x7ffe67f8feb4,112815909,0,0x0,8
tick,0x7ffe67f8feb4,112831942,0,0x0,8
tick,0x7ffe67f8feb4,112847922,0,0x0,8
tick,0x7ffe67f8feb4,112863941,0,0x0,8
tick,0x7ffe67f8feb4,112879435,0,0x0,8
tick,0x7ffe67f8feb4,112894850,0,0x0,8
tick,0x7ffe67f8feb4,112910545,0,0x0,8
tick,0x7ffe67f8feb4,112926057,0,0x0,8
tick,0x7ffe67f8feb4,112941715,0,0x0,8
tick,0x7ffe67f8feb4,112956884,0,0x0,8
tick,0x7ffe67f8feb4,112972205,0,0x0,8
tick,0x7ffe67f8feb4,112988142,0,0x0,8
tick,0x7ffe67f8feb4,113003672,0,0x0,8
tick,0x7ffe67f8feb4,113019864,0,0x0,8
tick,0x7ffe67f8feb4,113035632,0,0x0,8
tick,0x7ffe67f8feb4,113051103,0,0x0,8
tick,0x7ffe67f8feb4,113066938,0,0x0,8
tick,0x7ffe67f8feb4,113082166,0,0x0,8
tick,0x7ffe67f8feb4,113097840,0,0x0,8
tick,0x7ffe67f8feb4,113112799,0,0x0,8
tick,0x7ffe67f8feb4,113128103,0,0x0,8
tick,0x7ffe67f8feb4,113143578,0,0x0,8
tick,0x7ffe67f8feb4,113159394,0,0x0,8
tick,0x7ffe67f8feb4,113174927,0,0x0,8
tick,0x7ffe67f8feb4,113190108,0,0x0,8
tick,0x7ffe67f8feb4,113205892,0,0x0,8
tick,0x7ffe67f8feb4,113220929,0,0x0,8
tick,0x7ffe67f8feb4,113236550,0,0x0,8
tick,0x7ffe67f8feb4,113252072,0,0x0,8
tick,0x7ffe67f8feb4,113266887,0,0x0,8
tick,0x7ffe67f8feb4,113282390,0,0x0,8
tick,0x7ffe67f8feb4,113298207,0,0x0,8
tick,0x7ffe67f8feb4,113313470,0,0x0,8
tick,0x7ffe67f8feb4,113328844,0,0x0,8
tick,0x7ffe67f8feb4,113344278,0,0x0,8
tick,0x7ffe67f8feb4,113359604,0,0x0,8
tick,0x7ffe67f8feb4,113375637,0,0x0,8
tick,0x7ffe67f8feb4,113390964,0,0x0,8
tick,0x7ffe67f8feb4,113406828,0,0x0,8
tick,0x7ffe67f8feb4,113422949,0,0x0,8
tick,0x7ffe67f8feb4,113438997,0,0x0,8
tick,0x7ffe67f8feb4,113454382,0,0x0,8
tick,0x7ffe67f8feb4,113470469,0,0x0,8
tick,0x7ffe67f8feb4,113485284,0,0x0,8
tick,0x7ffe67f8feb4,113500736,0,0x0,8
tick,0x7ffe67f8feb4,113516011,0,0x0,8
tick,0x7ffe67f8feb4,113532114,0,0x0,8
tick,0x7ffe67f8feb4,113547829,0,0x0,8
tick,0x7ffe67f8feb4,113563114,0,0x0,8
tick,0x7ffe67f8feb4,113579013,0,0x0,8
tick,0x7ffe67f8feb4,113594787,0,0x0,8
tick,0x7ffe67f8feb4,113610094,0,0x0,8
tick,0x7ffe67f8feb4,113626137,0,0x0,8
tick,0x7ffe67f8feb4,113642136,0,0x0,8
tick,0x7ffe67f8feb4,113657678,0,0x0,8
tick,0x7ffe67f8feb4,113673234,0,0x0,8
tick,0x7ffe67f8feb4,113688549,0,0x0,8
tick,0x7ffe67f8feb4,113704490,0,0x0,8
tick,0x7ffe67f8feb4,113719928,0,0x0,8
tick,0x7ffe67f8feb4,113736038,0,0x0,8
tick,0x7ffe67f8feb4,113751578,0,0x0,8
tick,0x7ffe67f8feb4,113766928,0,0x0,8
tick,0x7ffe67f8feb4,113781788,0,0x0,8
tick,0x7ffe67f8feb4,113796768,0,0x0,8
tick,0x7ffe67f8feb4,113812773,0,0x0,8
tick,0x7ffe67f8feb4,113828778,0,0x0,8
tick,0x7ffe67f8feb4,113843785,0,0x0,8
tick,0x7ffe67f8feb4,113859881,0,0x0,8
tick,0x7ffe67f8feb4,113875910,0,0x0,8
tick,0x7ffe67f8feb4,113890924,0,0x0,8
tick,0x7ffe67f8feb4,113906932,0,0x0,8
tick,0x7ffe67f8feb4,113921971,0,0x0,8
tick,0x7ffe67f8feb4,113937920,0,0x0,8
tick,0x7ffe67f8feb4,113953154,0,0x0,8
tick,0x7ffe67f8feb4,113968907,0,0x0,8
tick,0x7ffe67f8feb4,113983923,0,0x0,8
tick,0x7ffe67f8feb4,113998942,0,0x0,8
tick,0x7ffe67f8feb4,114014922,0,0x0,8
tick,0x7ffe67f8feb4,114030919,0,0x0,8
tick,0x7ffe67f8feb4,114046929,0,0x0,8
tick,0x7ffe67f8feb4,114062924,0,0x0,8
tick,0x7ffe67f8feb4,114078933,0,0x0,8
tick,0x7ffe67f8feb4,114094926,0,0x0,8
tick,0x7ffe67f8feb4,114110934,0,0x0,8
tick,0x7ffe67f8feb4,114126953,0,0x0,8
tick,0x7ffe67f8feb4,114142939,0,0x0,8
tick,0x7ffe67f8feb4,114158321,0,0x0,8
tick,0x7ffe67f8feb4,114173335,0,0x0,8
tick,0x7ffe67f8feb4,114189123,0,0x0,8
tick,0x7ffe67f8feb4,114204392,0,0x0,8
tick,0x7ffe67f8feb4,114219352,0,0x0,8
tick,0x7ffe67f8feb4,114235377,0,0x0,8
tick,0x7ffe67f8feb4,114251374,0,0x0,8
tick,0x7ffe67f8feb4,114267418,0,0x0,8
tick,0x7ffe67f8feb4,114283680,0,0x0,8
tick,0x7ffe67f8feb4,114299098,0,0x0,8
tick,0x7ffe67f8feb4,114314968,0,0x0,8
tick,0x7ffe67f8feb4,114330101,0,0x0,8
tick,0x7ffe67f8feb4,114345361,0,0x0,8
tick,0x7ffe67f8feb4,114360989,0,0x0,8
tick,0x7ffe67f8feb4,114376240,0,0x0,8
tick,0x7ffe67f8feb4,114391606,0,0x0,8
tick,0x7ffe67f8feb4,114406582,0,0x0,8
tick,0x7ffe67f8feb4,114422297,0,0x0,8
tick,0x7ffe67f8feb4,114437992,0,0x0,8
tick,0x7ffe67f8feb4,114453515,0,0x0,8
tick,0x7ffe67f8feb4,114469290,0,0x0,8
tick,0x7ffe67f8feb4,114484305,0,0x0,8
tick,0x7ffe67f8feb4,114499840,0,0x0,8
tick,0x7ffe67f8feb4,114515219,0,0x0,8
tick,0x7ffe67f8feb4,114530716,0,0x0,8
tick,0x7ffe67f8feb4,114545650,0,0x0,8
tick,0x7ffe67f8feb4,114561645,0,0x0,8
tick,0x7ffe67f8feb4,114577644,0,0x0,8
tick,0x7ffe67f8feb4,114593624,0,0x0,8
tick,0x7ffe67f8feb4,114609520,0,0x0,8
tick,0x7ffe67f8feb4,114624597,0,0x0,8
tick,0x7ffe67f8feb4,114640654,0,0x0,8
tick,0x7ffe67f8feb4,114656105,0,0x0,8
tick,0x7ffe67f8feb4,114671394,0,0x0,8
tick,0x7ffe67f8feb4,114687624,0,0x0,8
tick,0x7ffe67f8feb4,114703135,0,0x0,8
tick,0x7ffe67f8feb4,114719137,0,0x0,8
tick,0x7ffe67f8feb4,114734177,0,0x0,8
tick,0x7ffe67f8feb4,114749380,0,0x0,8
tick,0x7ffe67f8feb4,114765611,0,0x0,8
tick,0x7ffe67f8feb4,114780753,0,0x0,8
tick,0x7ffe67f8feb4,114796372,0,0x0,8
tick,0x7ffe67f8feb4,114812398,0,0x0,8
tick,0x7ffe67f8feb4,114828421,0,0x0,8
tick,0x7ffe67f8feb4,114844371,0,0x0,8
tick,0x7ffe67f8feb4,114860382,0,0x0,8
tick,0x7ffe67f8feb4,114876390,0,0x0,8
tick,0x7ffe67f8feb4,114892372,0,0x0,8
tick,0x7ffe67f8feb4,114908382,0,0x0,8
tick,0x7ffe67f8feb4,114923695,0,0x0,8
tick,0x7ffe67f8feb4,114939530,0,0x0,8
tick,0x7ffe67f8feb4,114954635,0,0x0,8
tick,0x7ffe67f8feb4,114970539,0,0x0,8
tick,0x7ffe67f8feb4,114986476,0,0x0,8
tick,0x7ffe67f8feb4,115001628,0,0x0,8
tick,0x7ffe67f8feb4,115017569,0,0x0,8
tick,0x7ffe67f8feb4,115032956,0,0x0,8
tick,0x7ffe67f8feb4,115048274,0,0x0,8
tick,0x7ffe67f8feb4,115064483,0,0x0,8
tick,0x7ffe67f8feb4,115080345,0,0x0,8
tick,0x7ffe67f8feb4,115095754,0,0x0,8
tick,0x7ffe67f8feb4,115111601,0,0x0,8
tick,0x7ffe67f8feb4,115126898,0,0x0,8
tick,0x7ffe67f8feb4,115142335,0,0x0,8
tick,0x7ffe67f8feb4,115158421,0,0x0,8
tick,0x7ffe67f8feb4,115173507,0,0x0,8
tick,0x7ffe67f8feb4,115188770,0,0x0,8
tick,0x7ffe67f8feb4,115204820,0,0x0,8
tick,0x7ffe67f8feb4,115220119,0,0x0,8
tick,0x7ffe67f8feb4,115235872,0,0x0,8
tick,0x7ffe67f8feb4,115251058,0,0x0,8
tick,0x7ffe67f8feb4,115266609,0,0x0,8
tick,0x7ffe67f8feb4,115282616,0,0x0,8
tick,0x7ffe67f8feb4,115297690,0,0x0,8
tick,0x7ffe67f8feb4,115313960,0,0x0,8
tick,0x7ffe67f8feb4,115329453,0,0x0,8
tick,0x7ffe67f8feb4,115345116,0,0x0,8
tick,0x7ffe67f8feb4,115361135,0,0x0,8
tick,0x7ffe67f8feb4,115377728,0,0x0,8
tick,0x7ffe67f8feb4,115393190,0,0x0,8
tick,0x7ffe67f8feb4,115408727,0,0x0,8
tick,0x7ffe67f8feb4,115424196,0,0x0,8
tick,0x7ffe67f8feb4,115440216,0,0x0,8
tick,0x7ffe67f8feb4,115455473,0,0x0,8
tick,0x7ffe67f8feb4,115471137,0,0x0,8
tick,0x7ffe67f8feb4,115486878,0,0x0,8
tick,0x7ffe67f8feb4,115502635,0,0x0,8
tick,0x7ffe67f8feb4,115518249,0,0x0,8
tick,0x7ffe67f8feb4,115536206,0,0x0,8
tick,0x7ffe67f8feb4,115548816,0,0x0,8
tick,0x7ffe67f8feb4,115564082,0,0x0,8
tick,0x7ffe67f8feb4,115580296,0,0x0,8
tick,0x7ffe67f8feb4,115595316,0,0x0,8
tick,0x7ffe67f8feb4,115611222,0,0x0,8
tick,0x7ffe67f8feb4,115627675,0,0x0,8
tick,0x7ffe67f8feb4,115642494,0,0x0,8
tick,0x7ffe67f8feb4,115658264,0,0x0,8
tick,0x7ffe67f8feb4,115673245,0,0x0,8
tick,0x7ffe67f8feb4,115688255,0,0x0,8
tick,0x7ffe67f8feb4,115704192,0,0x0,8
tick,0x7ffe67f8feb4,115720261,0,0x0,8
tick,0x7ffe67f8feb4,115736224,0,0x0,8
tick,0x7ffe67f8feb4,115752208,0,0x0,8
tick,0x7ffe67f8feb4,115768270,0,0x0,8
tick,0x7ffe67f8feb4,115784189,0,0x0,8
tick,0x7ffe67f8feb4,115800238,0,0x0,8
tick,0x7ffe67f8feb4,115816237,0,0x0,8
tick,0x7ffe67f8feb4,115831234,0,0x0,8
tick,0x7ffe67f8feb4,115847239,0,0x0,8
tick,0x7ffe67f8feb4,115863231,0,0x0,8
tick,0x7ffe67f8feb4,115879238,0,0x0,8
tick,0x7ffe67f8feb4,115895230,0,0x0,8
tick,0x7ffe67f8feb4,115911248,0,0x0,8
tick,0x7ffe67f8feb4,115927527,0,0x0,8
tick,0x7ffe67f8feb4,115943374,0,0x0,8
tick,0x7ffe67f8feb4,115959322,0,0x0,8
tick,0x7ffe67f8feb4,115974427,0,0x0,8
tick,0x7ffe67f8feb4,115990299,0,0x0,8
tick,0x7ffe67f8feb4,116006447,0,0x0,8
tick,0x7ffe67f8feb4,116022309,0,0x0,8
tick,0x7ffe67f8feb4,116037761,0,0x0,8
tick,0x7ffe67f8feb4,116053774,0,0x0,8
tick,0x7ffe67f8feb4,116069352,0,0x0,8
tick,0x7ffe67f8feb4,116084742,0,0x0,8
tick,0x7ffe67f8feb4,116100726,0,0x0,8
tick,0x7ffe67f8feb4,116116746,0,0x0,8
tick,0x7ffe67f8feb4,116132263,0,0x0,8
tick,0x7ffe67f8feb4,116148291,0,0x0,8
tick,0x7ffe67f8feb4,116164276,0,0x0,8
tick,0x7ffe67f8feb4,116180287,0,0x0,8
tick,0x7ffe67f8feb4,116196280,0,0x0,8
tick,0x7ffe67f8feb4,116212318,0,0x0,8
tick,0x7ffe67f8feb4,116227963,0,0x0,8
tick,0x7ffe67f8feb4,116243345,0,0x0,8
tick,0x7ffe67f8feb4,116258977,0,0x0,8
tick,0x7ffe67f8feb4,116275204,0,0x0,8
tick,0x7ffe67f8feb4,116290360,0,0x0,8
tick,0x7ffe67f8feb4,116305599,0,0x0,8
tick,0x7ffe67f8feb4,116321142,0,0x0,8
tick,0x7ffe67f8feb4,116337387,0,0x0,8
tick,0x7ffe67f8feb4,116353194,0,0x0,8
tick,0x7ffe67f8feb4,116369199,0,0x0,8
tick,0x7ffe67f8feb4,116385024,0,0x0,8
tick,0x7ffe67f8feb4,116400507,0,0x0,8
tick,0x7ffe67f8feb4,116415960,0,0x0,8
tick,0x7ffe67f8feb4,116431875,0,0x0,8
tick,0x7ffe67f8feb4,116447269,0,0x0,8
tick,0x7ffe67f8feb4,116462748,0,0x0,8
tick,0x7ffe67f8feb4,116478225,0,0x0,8
tick,0x7ffe67f8feb4,116493996,0,0x0,8
tick,0x7ffe67f8feb4,116508758,0,0x0,8
tick,0x7ffe67f8feb4,116524783,0,0x0,8
tick,0x7ffe67f8feb4,116539907,0,0x0,8
tick,0x7ffe67f8feb4,116555298,0,0x0,8
tick,0x7ffe67f8feb4,116570508,0,0x0,8
tick,0x7ffe67f8feb4,116586360,0,0x0,8
tick,0x7ffe67f8feb4,116601874,0,0x0,8
tick,0x7ffe67f8feb4,116617738,0,0x0,8
tick,0x7ffe67f8feb4,116632930,0,0x0,8
tick,0x7ffe67f8feb4,116647942,0,0x0,8
tick,0x7ffe67f8feb4,116663786,0,0x0,8
tick,0x7ffe67f8feb4,116680143,0,0x0,8
tick,0x7ffe67f8feb4,116695865,0,0x0,8
tick,0x7ffe67f8feb4,116711858,0,0x0,8
tick,0x7ffe67f8feb4,116728111,0,0x0,8
tick,0x7ffe67f8feb4,116744158,0,0x0,8
tick,0x7ffe67f8feb4,116759934,0,0x0,8
tick,0x7ffe67f8feb4,116774684,0,0x0,8
tick,0x7ffe67f8feb4,116790069,0,0x0,8
tick,0x7ffe67f8feb4,116805415,0,0x0,8
tick,0x7ffe67f8feb4,116820383,0,0x0,8
tick,0x7ffe67f8feb4,116836525,0,0x0,8
tick,0x7ffe67f8feb4,116852402,0,0x0,8
tick,0x7ffe67f8feb4,116868366,0,0x0,8
tick,0x7ffe67f8feb4,116884351,0,0x0,8
tick,0x7ffe67f8feb4,116900364,0,0x0,8
tick,0x7ffe67f8feb4,116916366,0,0x0,8
tick,0x7ffe67f8feb4,116932367,0,0x0,8
tick,0x7ffe67f8feb4,116948360,0,0x0,8
tick,0x7ffe67f8feb4,116964371,0,0x0,8
tick,0x7ffe67f8feb4,116980377,0,0x0,8
tick,0x7ffe67f8feb4,116996377,0,0x0,8
tick,0x7ffe67f8feb4,117012377,0,0x0,8
tick,0x7ffe67f8feb4,117028406,0,0x0,8
tick,0x7ffe67f8feb4,117044508,0,0x0,8
tick,0x7ffe67f8feb4,117060393,0,0x0,8
tick,0x7ffe67f8feb4,117076417,0,0x0,8
tick,0x7ffe67f8feb4,117092360,0,0x0,8
tick,0x7ffe67f8feb4,117108428,0,0x0,8
tick,0x7ffe67f8feb4,117123965,0,0x0,8
tick,0x7ffe67f8feb4,117139480,0,0x0,8
tick,0x7ffe67f8feb4,117155147,0,0x0,8
tick,0x7ffe67f8feb4,117170471,0,0x0,8
tick,0x7ffe67f8feb4,117185908,0,0x0,8
tick,0x7ffe67f8feb4,117201928,0,0x0,8
tick,0x7ffe67f8feb4,117217899,0,0x0,8
tick,0x7ffe67f8feb4,117233973,0,0x0,8
tick,0x7ffe67f8feb4,117250197,0,0x0,8
tick,0x7ffe67f8feb4,117265488,0,0x0,8
tick,0x7ffe67f8feb4,117280480,0,0x0,8
tick,0x7ffe67f8feb4,117296357,0,0x0,8
tick,0x7ffe67f8feb4,117311801,0,0x0,8
tick,0x7ffe67f8feb4,117327304,0,0x0,8
tick,0x7ffe67f8feb4,117343268,0,0x0,8
tick,0x7ffe67f8feb4,117358558,0,0x0,8
tick,0x7ffe67f8feb4,117374118,0,0x0,8
tick,0x7ffe67f8feb4,117389021,0,0x0,8
tick,0x7ffe67f8feb4,117404112,0,0x0,8
tick,0x7ffe67f8feb4,117419973,0,0x0,8
tick,0x7ffe67f8feb4,117435490,0,0x0,8
tick,0x7ffe67f8feb4,117450666,0,0x0,8
tick,0x7ffe67f8feb4,117466267,0,0x0,8
tick,0x7ffe67f8feb4,117482691,0,0x0,8
tick,0x7ffe67f8feb4,117498342,0,0x0,8
tick,0x7ffe67f8feb4,117514302,0,0x0,8
tick,0x7ffe67f8feb4,117530410,0,0x0,8
tick,0x7ffe67f8feb4,117546467,0,0x0,8
tick,0x7ffe67f8feb4,117562397,0,0x0,8
tick,0x7ffe67f8feb4,117578556,0,0x0,8
tick,0x7ffe67f8feb4,117594052,0,0x0,8
tick,0x7ffe67f8feb4,117609649,0,0x0,8
tick,0x7ffe67f8feb4,117625783,0,0x0,8
tick,0x7ffe67f8feb4,117641503,0,0x0,8
tick,0x7ffe67f8feb4,117657051,0,0x0,8
tick,0x7ffe67f8feb4,117672493,0,0x0,8
tick,0x7ffe67f8feb4,117688473,0,0x0,8
tick,0x7ffe67f8feb4,117704083,0,0x0,8
tick,0x7ffe67f8feb4,117719524,0,0x0,8
tick,0x7ffe67f8feb4,117735506,0,0x0,8
tick,0x7ffe67f8feb4,117751504,0,0x0,8
tick,0x7ffe67f8feb4,117767504,0,0x0,8
tick,0x7ffe67f8feb4,117783475,0,0x0,8
tick,0x7ffe67f8feb4,117799485,0,0x0,8
tick,0x7ffe67f8feb4,117815138,0,0x0,8
tick,0x7ffe67f8feb4,117831144,0,0x0,8
tick,0x7ffe67f8feb4,117847214,0,0x0,8
tick,0x7ffe67f8feb4,117863212,0,0x0,8
tick,0x7ffe67f8feb4,117879135,0,0x0,8
tick,0x7ffe67f8feb4,117894506,0,0x0,8
tick,0x7ffe67f8feb4,117910499,0,0x0,8
tick,0x7ffe67f8feb4,117925614,0,0x0,8
tick,0x7ffe67f8feb4,117940762,0,0x0,8
tick,0x7ffe67f8feb4,117956729,0,0x0,8
tick,0x7ffe67f8feb4,117971904,0,0x0,8
tick,0x7ffe67f8feb4,117987968,0,0x0,8
tick,0x7ffe67f8feb4,118003578,0,0x0,8
tick,0x7ffe67f8feb4,118019518,0,0x0,8
tick,0x7ffe67f8feb4,118035585,0,0x0,8
tick,0x7ffe67f8feb4,118051236,0,0x0,8
tick,0x7ffe67f8feb4,118066385,0,0x0,8
tick,0x7ffe67f8feb4,118082277,0,0x0,8
tick,0x7ffe67f8feb4,118097391,0,0x0,8
tick,0x7ffe67f8feb4,118113263,0,0x0,8
tick,0x7ffe67f8feb4,118129318,0,0x0,8
tick,0x7ffe67f8feb4,118144928,0,0x0,8
tick,0x7ffe67f8feb4,118160468,0,0x0,8
tick,0x7ffe67f8feb4,118176322,0,0x0,8
tick,0x7ffe67f8feb4,118191884,0,0x0,8
tick,0x7ffe67f8feb4,118207927,0,0x0,8
tick,0x7ffe67f8feb4,118223925,0,0x0,8
tick,0x7ffe67f8feb4,118239932,0,0x0,8
tick,0x7ffe67f8feb4,118255563,0,0x0,8
tick,0x7ffe67f8feb4,118271628,0,0x0,8
tick,0x7ffe67f8feb4,118286838,0,0x0,8
tick,0x7ffe67f8feb4,118302600,0,0x0,8
tick,0x7ffe67f8feb4,118318002,0,0x0,8
tick,0x7ffe67f8feb4,118333456,0,0x0,8
tick,0x7ffe67f8feb4,118348695,0,0x0,8
tick,0x7ffe67f8feb4,118364612,0,0x0,8
tick,0x7ffe67f8feb4,118380654,0,0x0,8
tick,0x7ffe67f8feb4,118396757,0,0x0,8
tick,0x7ffe67f8feb4,118411955,0,0x0,8
tick,0x7ffe67f8feb4,118427195,0,0x0,8
tick,0x7ffe67f8feb4,118442897,0,0x0,8
tick,0x7ffe67f8feb4,118458266,0,0x0,8
tick,0x7ffe67f8feb4,118473701,0,0x0,8
tick,0x7ffe67f8feb4,118488967,0,0x0,8
tick,0x7ffe67f8feb4,118504824,0,0x0,8
tick,0x7ffe67f8feb4,118520090,0,0x0,8
tick,0x7ffe67f8feb4,118536493,0,0x0,8
tick,0x7ffe67f8feb4,118552261,0,0x0,8
tick,0x7ffe67f8feb4,118567718,0,0x0,8
tick,0x7ffe67f8feb4,118583277,0,0x0,8
tick,0x7ffe67f8feb4,118598202,0,0x0,8
tick,0x7ffe67f8feb4,118613216,0,0x0,8
tick,0x7ffe67f8feb4,118629719,0,0x0,8
tick,0x7ffe67f8feb4,118645247,0,0x0,8
tick,0x7ffe67f8feb4,118660877,0,0x0,8
tick,0x7ffe67f8feb4,118675824,0,0x0,8
tick,0x7ffe67f8feb4,118691293,0,0x0,8
tick,0x7ffe67f8feb4,118707381,0,0x0,8
tick,0x7ffe67f8feb4,118722852,0,0x0,8
tick,0x7ffe67f8feb4,118738754,0,0x0,8
tick,0x7ffe67f8feb4,118754422,0,0x0,8
tick,0x7ffe67f8feb4,118769162,0,0x0,8
tick,0x7ffe67f8feb4,118785330,0,0x0,8
tick,0x7ffe67f8feb4,118800718,0,0x0,8
tick,0x7ffe67f8feb4,118816083,0,0x0,8
tick,0x7ffe67f8feb4,118832060,0,0x0,8
tick,0x7ffe67f8feb4,118848051,0,0x0,8
tick,0x7ffe67f8feb4,118864086,0,0x0,8
tick,0x7ffe67f8feb4,118880063,0,0x0,8
tick,0x7ffe67f8feb4,118895543,0,0x0,8
tick,0x7ffe67f8feb4,118910720,0,0x0,8
tick,0x7ffe67f8feb4,118926620,0,0x0,8
tick,0x7ffe67f8feb4,118941814,0,0x0,8
tick,0x7ffe67f8feb4,118957394,0,0x0,8
tick,0x7ffe67f8feb4,118973393,0,0x0,8
tick,0x7ffe67f8feb4,118988614,0,0x0,8
tick,0x7ffe67f8feb4,119003977,0,0x0,8
tick,0x7ffe67f8feb4,119018759,0,0x0,8
tick,0x7ffe67f8feb4,119035055,0,0x0,8
tick,0x7ffe67f8feb4,119050091,0,0x0,8
tick,0x7ffe67f8feb4,119065441,0,0x0,8
tick,0x7ffe67f8feb4,119081261,0,0x0,8
tick,0x7ffe67f8feb4,119096781,0,0x0,8
tick,0x7ffe67f8feb4,119113147,0,0x0,8
tick,0x7ffe67f8feb4,119128774,0,0x0,8
tick,0x7ffe67f8feb4,119144147,0,0x0,8
tick,0x7ffe67f8feb4,119159342,0,0x0,8
tick,0x7ffe67f8feb4,119175517,0,0x0,8
tick,0x7ffe67f8feb4,119190582,0,0x0,8
tick,0x7ffe67f8feb4,119205674,0,0x0,8
tick,0x7ffe67f8feb4,119221123,0,0x0,8
tick,0x7ffe67f8feb4,119236902,0,0x0,8
tick,0x7ffe67f8feb4,119252713,0,0x0,8
tick,0x7ffe67f8feb4,119268764,0,0x0,8
tick,0x7ffe67f8feb4,119283991,0,0x0,8
tick,0x7ffe67f8feb4,119299789,0,0x0,8
tick,0x7ffe67f8feb4,119315343,0,0x0,8
tick,0x7ffe67f8feb4,119331363,0,0x0,8
tick,0x7ffe67f8feb4,119347016,0,0x0,8
tick,0x7ffe67f8feb4,119362668,0,0x0,8
tick,0x7ffe67f8feb4,119378010,0,0x0,8
tick,0x7ffe67f8feb4,119393028,0,0x0,8
tick,0x7ffe67f8feb4,119409297,0,0x0,8
tick,0x7ffe67f8feb4,119424364,0,0x0,8
tick,0x7ffe67f8feb4,119439893,0,0x0,8
tick,0x7ffe67f8feb4,119456094,0,0x0,8
tick,0x7ffe67f8feb4,119486794,0,0x0,8
tick,0x7ffe67f8feb4,119488114,0,0x0,8
tick,0x7ffe67f8feb4,119503845,0,0x0,8
tick,0x7ffe67f8feb4,119519986,0,0x0,8
tick,0x7ffe67f8feb4,119535748,0,0x0,8
tick,0x7ffe67f8feb4,119551748,0,0x0,8
tick,0x7ffe67f8feb4,119567762,0,0x0,8
tick,0x7ffe67f8feb4,119583791,0,0x0,8
tick,0x7ffe67f8feb4,119599749,0,0x0,8
tick,0x7ffe67f8feb4,119615807,0,0x0,8
tick,0x7ffe67f8feb4,119631750,0,0x0,8
tick,0x7ffe67f8feb4,119647772,0,0x0,8
tick,0x7ffe67f8feb4,119663773,0,0x0,8
tick,0x7ffe67f8feb4,119679755,0,0x0,8
tick,0x7ffe67f8feb4,119695765,0,0x0,8
tick,0x7ffe67f8feb4,119711777,0,0x0,8
tick,0x7ffe67f8feb4,119727789,0,0x0,8
tick,0x7ffe67f8feb4,119743788,0,0x0,8
tick,0x7ffe67f8feb4,119759808,0,0x0,8
tick,0x7ffe67f8feb4,119775834,0,0x0,8
tick,0x7ffe67f8feb4,119791912,0,0x0,8
tick,0x7ffe67f8feb4,119807632,0,0x0,8
tick,0x7ffe67f8feb4,119822789,0,0x0,8
tick,0x7ffe67f8feb4,119838696,0,0x0,8
tick,0x7ffe67f8feb4,119854655,0,0x0,8
tick,0x7ffe67f8feb4,119870684,0,0x0,8
tick,0x7ffe67f8feb4,119886687,0,0x0,8
tick,0x7ffe67f8feb4,119902710,0,0x0,8
tick,0x7ffe67f8feb4,119918713,0,0x0,8
tick,0x7ffe67f8feb4,119934711,0,0x0,8
tick,0x7ffe67f8feb4,119950686,0,0x0,8
tick,0x7ffe67f8feb4,119965965,0,0x0,8
tick,0x7ffe67f8feb4,119981973,0,0x0,8
tick,0x7ffe67f8feb4,119997896,0,0x0,8
tick,0x7ffe67f8feb4,120012697,0,0x0,8
tick,0x7ffe67f8feb4,120028069,0,0x0,8
tick,0x7ffe67f8feb4,120043471,0,0x0,8
tick,0x7ffe67f8feb4,120058617,0,0x0,8
tick,0x7ffe67f8feb4,120074624,0,0x0,8
tick,0x7ffe67f8feb4,120089881,0,0x0,8
tick,0x7ffe67f8feb4,120105904,0,0x0,8
tick,0x7ffe67f8feb4,120121899,0,0x0,8
tick,0x7ffe67f8feb4,120137918,0,0x0,8
tick,0x7ffe67f8feb4,120153548,0,0x0,8
tick,0x7ffe67f8feb4,120169216,0,0x0,8
tick,0x7ffe67f8feb4,120185440,0,0x0,8
tick,0x7ffe67f8feb4,120201410,0,0x0,8
tick,0x7ffe67f8feb4,120216355,0,0x0,8
tick,0x7ffe67f8feb4,120232301,0,0x0,8
tick,0x7ffe67f8feb4,120247822,0,0x0,8
tick,0x7ffe67f8feb4,120263628,0,0x0,8
tick,0x7ffe67f8feb4,120278796,0,0x0,8
tick,0x7ffe67f8feb4,120294769,0,0x0,8
tick,0x7ffe67f8feb4,120310178,0,0x0,8
tick,0x7ffe67f8feb4,120325328,0,0x0,8
tick,0x7ffe67f8feb4,120340466,0,0x0,8
tick,0x7ffe67f8feb4,120355511,0,0x0,8
tick,0x7ffe67f8feb4,120371168,0,0x0,8
tick,0x7ffe67f8feb4,120386318,0,0x0,8
tick,0x7ffe67f8feb4,120402662,0,0x0,8
tick,0x7ffe67f8feb4,120418222,0,0x0,8
tick,0x7ffe67f8feb4,120433945,0,0x0,8
tick,0x7ffe67f8feb4,120449438,0,0x0,8
tick,0x7ffe67f8feb4,120465363,0,0x0,8
tick,0x7ffe67f8feb4,120481386,0,0x0,8
tick,0x7ffe67f8feb4,120496517,0,0x0,8
tick,0x7ffe67f8feb4,120511951,0,0x0,8
tick,0x7ffe67f8feb4,120527972,0,0x0,8
tick,0x7ffe67f8feb4,120542912,0,0x0,8
tick,0x7ffe67f8feb4,120558986,0,0x0,8
tick,0x7ffe67f8feb4,120574923,0,0x0,8
tick,0x7ffe67f8feb4,120589927,0,0x0,8
tick,0x7ffe67f8feb4,120605975,0,0x0,8
tick,0x7ffe67f8feb4,120621943,0,0x0,8
tick,0x7ffe67f8feb4,120637991,0,0x0,8
tick,0x7ffe67f8feb4,120653603,0,0x0,8
tick,0x7ffe67f8feb4,120669792,0,0x0,8
tick,0x7ffe67f8feb4,120685716,0,0x0,8
tick,0x7ffe67f8feb4,120701494,0,0x0,8
tick,0x7ffe67f8feb4,120717471,0,0x0,8
tick,0x7ffe67f8feb4,120733514,0,0x0,8
tick,0x7ffe67f8feb4,120749474,0,0x0,8
tick,0x7ffe67f8feb4,120764613,0,0x0,8
tick,0x7ffe67f8feb4,120779675,0,0x0,8
tick,0x7ffe67f8feb4,120795795,0,0x0,8
tick,0x7ffe67f8feb4,120811443,0,0x0,8
tick,0x7ffe67f8feb4,120826768,0,0x0,8
tick,0x7ffe67f8feb4,120842576,0,0x0,8
tick,0x7ffe67f8feb4,120857974,0,0x0,8
tick,0x7ffe67f8feb4,120873991,0,0x0,8
tick,0x7ffe67f8feb4,120889952,0,0x0,8
tick,0x7ffe67f8feb4,120905841,0,0x0,8
tick,0x7ffe67f8feb4,120920985,0,0x0,8
tick,0x7ffe67f8feb4,120936767,0,0x0,8
tick,0x7ffe67f8feb4,120952339,0,0x0,8
tick,0x7ffe67f8feb4,120967786,0,0x0,8
tick,0x7ffe67f8feb4,120983795,0,0x0,8
tick,0x7ffe67f8feb4,120999398,0,0x0,8
tick,0x7ffe67f8feb4,121015135,0,0x0,8
tick,0x7ffe67f8feb4,121031013,0,0x0,8
tick,0x7ffe67f8feb4,121046511,0,0x0,8
tick,0x7ffe67f8feb4,121062050,0,0x0,8
tick,0x7ffe67f8feb4,121077886,0,0x0,8
tick,0x7ffe67f8feb4,121093563,0,0x0,8
tick,0x7ffe67f8feb4,121109155,0,0x0,8
tick,0x7ffe67f8feb4,121125542,0,0x0,8
tick,0x7ffe67f8feb4,121140582,0,0x0,8
tick,0x7ffe67f8feb4,121156229,0,0x0,8
tick,0x7ffe67f8feb4,121171200,0,0x0,8
tick,0x7ffe67f8feb4,121187384,0,0x0,8
tick,0x7ffe67f8feb4,121203028,0,0x0,8
tick,0x7ffe67f8feb4,121219257,0,0x0,8
tick,0x7ffe67f8feb4,121234376,0,0x0,8
tick,0x7ffe67f8feb4,121250049,0,0x0,8
tick,0x7ffe67f8feb4,121265194,0,0x0,8
tick,0x7ffe67f8feb4,121281042,0,0x0,8
tick,0x7ffe67f8feb4,121296041,0,0x0,8
tick,0x7ffe67f8feb4,121312041,0,0x0,8
tick,0x7ffe67f8feb4,121328387,0,0x0,8
tick,0x7ffe67f8feb4,121343650,0,0x0,8
tick,0x7ffe67f8feb4,121358972,0,0x0,8
tick,0x7ffe67f8feb4,121374967,0,0x0,8
tick,0x7ffe67f8feb4,121390987,0,0x0,8
tick,0x7ffe67f8feb4,121406169,0,0x0,8
tick,0x7ffe67f8feb4,121422099,0,0x0,8
tick,0x7ffe67f8feb4,121438068,0,0x0,8
tick,0x7ffe67f8feb4,121453637,0,0x0,8
tick,0x7ffe67f8feb4,121469130,0,0x0,8
tick,0x7ffe67f8feb4,121485243,0,0x0,8
tick,0x7ffe67f8feb4,121501190,0,0x0,8
tick,0x7ffe67f8feb4,121516223,0,0x0,8
tick,0x7ffe67f8feb4,121531701,0,0x0,8
tick,0x7ffe67f8feb4,121546947,0,0x0,8
tick,0x7ffe67f8feb4,121562482,0,0x0,8
tick,0x7ffe67f8feb4,121577806,0,0x0,8
tick,0x7ffe67f8feb4,121593775,0,0x0,8
tick,0x7ffe67f8feb4,121609709,0,0x0,8
tick,0x7ffe67f8feb4,121624974,0,0x0,8
tick,0x7ffe67f8feb4,121640574,0,0x0,8
tick,0x7ffe67f8feb4,121656611,0,0x0,8
tick,0x7ffe67f8feb4,121672624,0,0x0,8
tick,0x7ffe67f8feb4,121688451,0,0x0,8
tick,0x7ffe67f8feb4,121704459,0,0x0,8
tick,0x7ffe67f8feb4,121720376,0,0x0,8
tick,0x7ffe67f8feb4,121736510,0,0x0,8
tick,0x7ffe67f8feb4,121752502,0,0x0,8
tick,0x7ffe67f8feb4,121768193,0,0x0,8
tick,0x7ffe67f8feb4,121783534,0,0x0,8
tick,0x7ffe67f8feb4,121799285,0,0x0,8
tick,0x7ffe67f8feb4,121814729,0,0x0,8
tick,0x7ffe67f8feb4,121830675,0,0x0,8
tick,0x7ffe67f8feb4,121846752,0,0x0,8
tick,0x7ffe67f8feb4,121862719,0,0x0,8
tick,0x7ffe67f8feb4,121878688,0,0x0,8
tick,0x7ffe67f8feb4,121893676,0,0x0,8
tick,0x7ffe67f8feb4,121909727,0,0x0,8
tick,0x7ffe67f8feb4,121925685,0,0x0,8
tick,0x7ffe67f8feb4,121941677,0,0x0,8
tick,0x7ffe67f8feb4,121957689,0,0x0,8
tick,0x7ffe67f8feb4,121973688,0,0x0,8
tick,0x7ffe67f8feb4,121989690,0,0x0,8
tick,0x7ffe67f8feb4,122005687,0,0x0,8
tick,0x7ffe67f8feb4,122021695,0,0x0,8
tick,0x7ffe67f8feb4,122037708,0,0x0,8
tick,0x7ffe67f8feb4,122053697,0,0x0,8
tick,0x7ffe67f8feb4,122069695,0,0x0,8
tick,0x7ffe67f8feb4,122085689,0,0x0,8
tick,0x7ffe67f8feb4,122101697,0,0x0,8
tick,0x7ffe67f8feb4,122117717,0,0x0,8
tick,0x7ffe67f8feb4,122133698,0,0x0,8
tick,0x7ffe67f8feb4,122149693,0,0x0,8
tick,0x7ffe67f8feb4,122165698,0,0x0,8
tick,0x7ffe67f8feb4,122181704,0,0x0,8
tick,0x7ffe67f8feb4,122197707,0,0x0,8
tick,0x7ffe67f8feb4,122213151,0,0x0,8
tick,0x7ffe67f8feb4,122229142,0,0x0,8
tick,0x7ffe67f8feb4,122245185,0,0x0,8
tick,0x7ffe67f8feb4,122261201,0,0x0,8
tick,0x7ffe67f8feb4,122277217,0,0x0,8
tick,0x7ffe67f8feb4,122293208,0,0x0,8
tick,0x7ffe67f8feb4,122309181,0,0x0,8
tick,0x7ffe67f8feb4,122324504,0,0x0,8
tick,0x7ffe67f8feb4,122340203,0,0x0,8
tick,0x7ffe67f8feb4,122356126,0,0x0,8
tick,0x7ffe67f8feb4,122371761,0,0x0,8
tick,0x7ffe67f8feb4,122387179,0,0x0,8
tick,0x7ffe67f8feb4,122403211,0,0x0,8
tick,0x7ffe67f8feb4,122419200,0,0x0,8
tick,0x7ffe67f8feb4,122435254,0,0x0,8
tick,0x7ffe67f8feb4,122451421,0,0x0,8
tick,0x7ffe67f8feb4,122467350,0,0x0,8
tick,0x7ffe67f8feb4,122482897,0,0x0,8
tick,0x7ffe67f8feb4,122498881,0,0x0,8
tick,0x7ffe67f8feb4,122514108,0,0x0,8
tick,0x7ffe67f8feb4,122530123,0,0x0,8
tick,0x7ffe67f8feb4,122546127,0,0x0,8
tick,0x7ffe67f8feb4,122561124,0,0x0,8
tick,0x7ffe67f8feb4,122577131,0,0x0,8
tick,0x7ffe67f8feb4,122592512,0,0x0,8
tick,0x7ffe67f8feb4,122608123,0,0x0,8
tick,0x7ffe67f8feb4,122623346,0,0x0,8
tick,0x7ffe67f8feb4,122638730,0,0x0,8
tick,0x7ffe67f8feb4,122654244,0,0x0,8
tick,0x7ffe67f8feb4,122669800,0,0x0,8
tick,0x7ffe67f8feb4,122685788,0,0x0,8
tick,0x7ffe67f8feb4,122701838,0,0x0,8
tick,0x7ffe67f8feb4,122717485,0,0x0,8
tick,0x7ffe67f8feb4,122732701,0,0x0,8
tick,0x7ffe67f8feb4,122748336,0,0x0,8
tick,0x7ffe67f8feb4,122763294,0,0x0,8
tick,0x7ffe67f8feb4,122779283,0,0x0,8
tick,0x7ffe67f8feb4,122795290,0,0x0,8
tick,0x7ffe67f8feb4,122811262,0,0x0,8
tick,0x7ffe67f8feb4,122826581,0,0x0,8
tick,0x7ffe67f8feb4,122842631,0,0x0,8
tick,0x7ffe67f8feb4,122857924,0,0x0,8
tick,0x7ffe67f8feb4,122873133,0,0x0,8
tick,0x7ffe67f8feb4,122888130,0,0x0,8
tick,0x7ffe67f8feb4,122904140,0,0x0,8
tick,0x7ffe67f8feb4,122920129,0,0x0,8
tick,0x7ffe67f8feb4,122936132,0,0x0,8
tick,0x7ffe67f8feb4,122952120,0,0x0,8
tick,0x7ffe67f8feb4,122968159,0,0x0,8
tick,0x7ffe67f8feb4,122983696,0,0x0,8
tick,0x7ffe67f8feb4,122998816,0,0x0,8
tick,0x7ffe67f8feb4,123014053,0,0x0,8
tick,0x7ffe67f8feb4,123029032,0,0x0,8
tick,0x7ffe67f8feb4,123044915,0,0x0,8
tick,0x7ffe67f8feb4,123060113,0,0x0,8
tick,0x7ffe67f8feb4,123075033,0,0x0,8
tick,0x7ffe67f8feb4,123090480,0,0x0,8
tick,0x7ffe67f8feb4,123105791,0,0x0,8
tick,0x7ffe67f8feb4,123121546,0,0x0,8
tick,0x7ffe67f8feb4,123137341,0,0x0,8
tick,0x7ffe67f8feb4,123152532,0,0x0,8
tick,0x7ffe67f8feb4,123167709,0,0x0,8
tick,0x7ffe67f8feb4,123182904,0,0x0,8
tick,0x7ffe67f8feb4,123197956,0,0x0,8
tick,0x7ffe67f8feb4,123214068,0,0x0,8
tick,0x7ffe67f8feb4,123229516,0,0x0,8
tick,0x7ffe67f8feb4,123245591,0,0x0,8
tick,0x7ffe67f8feb4,123261446,0,0x0,8
tick,0x7ffe67f8feb4,123276682,0,0x0,8
tick,0x7ffe67f8feb4,123292682,0,0x0,8
tick,0x7ffe67f8feb4,123308746,0,0x0,8
tick,0x7ffe67f8feb4,123324324,0,0x0,8
tick,0x7ffe67f8feb4,123340309,0,0x0,8
tick,0x7ffe67f8feb4,123356409,0,0x0,8
tick,0x7ffe67f8feb4,123372330,0,0x0,8
tick,0x7ffe67f8feb4,123388341,0,0x0,8
tick,0x7ffe67f8feb4,123404322,0,0x0,8
tick,0x7ffe67f8feb4,123420241,0,0x0,8
tick,0x7ffe67f8feb4,123435507,0,0x0,8
tick,0x7ffe67f8feb4,123451659,0,0x0,8
tick,0x7ffe67f8feb4,123467218,0,0x0,8
tick,0x7ffe67f8feb4,123482378,0,0x0,8
tick,0x7ffe67f8feb4,123498162,0,0x0,8
tick,0x7ffe67f8feb4,123513495,0,0x0,8
tick,0x7ffe67f8feb4,123529365,0,0x0,8
tick,0x7ffe67f8feb4,123544347,0,0x0,8
tick,0x7ffe67f8feb4,123560355,0,0x0,8
tick,0x7ffe67f8feb4,123576360,0,0x0,8
tick,0x7ffe67f8feb4,123592369,0,0x0,8
tick,0x7ffe67f8feb4,123608429,0,0x0,8
tick,0x7ffe67f8feb4,123624363,0,0x0,8
tick,0x7ffe67f8feb4,123640377,0,0x0,8
tick,0x7ffe67f8feb4,123656374,0,0x0,8
tick,0x7ffe67f8feb4,123671572,0,0x0,8
tick,0x7ffe67f8feb4,123687393,0,0x0,8
tick,0x7ffe67f8feb4,123703395,0,0x0,8
tick,0x7ffe67f8feb4,123719705,0,0x0,8
tick,0x7ffe67f8feb4,123735620,0,0x0,8
tick,0x7ffe67f8feb4,123751608,0,0x0,8
tick,0x7ffe67f8feb4,123767425,0,0x0,8
tick,0x7ffe67f8feb4,123783513,0,0x0,8
tick,0x7ffe67f8feb4,123799399,0,0x0,8
tick,0x7ffe67f8feb4,123814576,0,0x0,8
tick,0x7ffe67f8feb4,123830449,0,0x0,8
tick,0x7ffe67f8feb4,123846380,0,0x0,8
tick,0x7ffe67f8feb4,123862423,0,0x0,8
tick,0x7ffe67f8feb4,123878421,0,0x0,8
tick,0x7ffe67f8feb4,123894402,0,0x0,8
tick,0x7ffe67f8feb4,123910441,0,0x0,8
tick,0x7ffe67f8feb4,123926463,0,0x0,8
tick,0x7ffe67f8feb4,123942435,0,0x0,8
tick,0x7ffe67f8feb4,123958429,0,0x0,8
tick,0x7ffe67f8feb4,123973774,0,0x0,8
tick,0x7ffe67f8feb4,123989416,0,0x0,8
tick,0x7ffe67f8feb4,124005151,0,0x0,8
tick,0x7ffe67f8feb4,124020435,0,0x0,8
tick,0x7ffe67f8feb4,124036491,0,0x0,8
tick,0x7ffe67f8feb4,124052500,0,0x0,8
tick,0x7ffe67f8feb4,124068840,0,0x0,8
tick,0x7ffe67f8feb4,124083883,0,0x0,8
tick,0x7ffe67f8feb4,124099783,0,0x0,8
tick,0x7ffe67f8feb4,124115456,0,0x0,8
tick,0x7ffe67f8feb4,124130834,0,0x0,8
tick,0x7ffe67f8feb4,124146460,0,0x0,8
tick,0x7ffe67f8feb4,124162423,0,0x0,8
tick,0x7ffe67f8feb4,124178467,0,0x0,8
tick,0x7ffe67f8feb4,124194465,0,0x0,8
tick,0x7ffe67f8feb4,124209471,0,0x0,8
tick,0x7ffe67f8feb4,124225482,0,0x0,8
tick,0x7ffe67f8feb4,124241489,0,0x0,8
tick,0x7ffe67f8feb4,124257476,0,0x0,8
tick,0x7ffe67f8feb4,124273518,0,0x0,8
tick,0x7ffe67f8feb4,124289462,0,0x0,8
tick,0x7ffe67f8feb4,124305327,0,0x0,8
tick,0x7ffe67f8feb4,124321356,0,0x0,8
tick,0x7ffe67f8feb4,124337342,0,0x0,8
tick,0x7ffe67f8feb4,124352354,0,0x0,8
tick,0x7ffe67f8feb4,124368401,0,0x0,8
tick,0x7ffe67f8feb4,124383470,0,0x0,8
tick,0x7ffe67f8feb4,124399510,0,0x0,8
tick,0x7ffe67f8feb4,124415158,0,0x0,8
tick,0x7ffe67f8feb4,124430505,0,0x0,8
tick,0x7ffe67f8feb4,124446509,0,0x0,8
tick,0x7ffe67f8feb4,124462461,0,0x0,8
tick,0x7ffe67f8feb4,124478528,0,0x0,8
tick,0x7ffe67f8feb4,124493696,0,0x0,8
tick,0x7ffe67f8feb4,124508995,0,0x0,8
tick,0x7ffe67f8feb4,124524439,0,0x0,8
tick,0x7ffe67f8feb4,124544198,0,0x0,8
tick,0x7ffe67f8feb4,124565847,0,0x0,8
tick,0x7ffe67f8feb4,124572496,0,0x0,8
tick,0x7ffe67f8feb4,124588437,0,0x0,8
tick,0x7ffe67f8feb4,124604431,0,0x0,8
tick,0x7ffe67f8feb4,124619668,0,0x0,8
tick,0x7ffe67f8feb4,124635166,0,0x0,8
tick,0x7ffe67f8feb4,124650399,0,0x0,8
tick,0x7ffe67f8feb4,124666389,0,0x0,8
tick,0x7ffe67f8feb4,124682378,0,0x0,8
tick,0x7ffe67f8feb4,124698369,0,0x0,8
tick,0x7ffe67f8feb4,124714382,0,0x0,8
tick,0x7ffe67f8feb4,124730407,0,0x0,8
tick,0x7ffe67f8feb4,124745784,0,0x0,8
tick,0x7ffe67f8feb4,124761820,0,0x0,8
tick,0x7ffe67f8feb4,124777793,0,0x0,8
tick,0x7ffe67f8feb4,124793340,0,0x0,8
tick,0x7ffe67f8feb4,124808816,0,0x0,8
tick,0x7ffe67f8feb4,124824811,0,0x0,8
tick,0x7ffe67f8feb4,124839996,0,0x0,8
tick,0x7ffe67f8feb4,124855177,0,0x0,8
tick,0x7ffe67f8feb4,124870818,0,0x0,8
tick,0x7ffe67f8feb4,124886635,0,0x0,8
tick,0x7ffe67f8feb4,124902702,0,0x0,8
tick,0x7ffe67f8feb4,124917616,0,0x0,8
tick,0x7ffe67f8feb4,124933587,0,0x0,8
tick,0x7ffe67f8feb4,124949598,0,0x0,8
tick,0x7ffe67f8feb4,124965663,0,0x0,8
tick,0x7ffe67f8feb4,124981676,0,0x0,8
tick,0x7ffe67f8feb4,124997739,0,0x0,8
tick,0x7ffe67f8feb4,125013212,0,0x0,8
tick,0x7ffe67f8feb4,125028883,0,0x0,8
tick,0x7ffe67f8feb4,125044813,0,0x0,8
tick,0x7ffe67f8feb4,125060786,0,0x0,8
tick,0x7ffe67f8feb4,125076795,0,0x0,8
tick,0x7ffe67f8feb4,125092795,0,0x0,8
tick,0x7ffe67f8feb4,125108795,0,0x0,8
tick,0x7ffe67f8feb4,125124809,0,0x0,8
tick,0x7ffe67f8feb4,125140827,0,0x0,8
tick,0x7ffe67f8feb4,125156803,0,0x0,8
tick,0x7ffe67f8feb4,125172949,0,0x0,8
tick,0x7ffe67f8feb4,125188806,0,0x0,8
tick,0x7ffe67f8feb4,125204788,0,0x0,8
tick,0x7ffe67f8feb4,125220888,0,0x0,8
tick,0x7ffe67f8feb4,125236827,0,0x0,8
tick,0x7ffe67f8feb4,125252371,0,0x0,8
tick,0x7ffe67f8feb4,125267848,0,0x0,8
tick,0x7ffe67f8feb4,125283817,0,0x0,8
tick,0x7ffe67f8feb4,125299621,0,0x0,8
tick,0x7ffe67f8feb4,125314607,0,0x0,8
tick,0x7ffe67f8feb4,125330593,0,0x0,8
tick,0x7ffe67f8feb4,125346589,0,0x0,8
tick,0x7ffe67f8feb4,125362246,0,0x0,8
tick,0x7ffe67f8feb4,125377628,0,0x0,8
tick,0x7ffe67f8feb4,125393567,0,0x0,8
tick,0x7ffe67f8feb4,125409198,0,0x0,8
tick,0x7ffe67f8feb4,125424661,0,0x0,8
tick,0x7ffe67f8feb4,125440158,0,0x0,8
tick,0x7ffe67f8feb4,125455865,0,0x0,8
tick,0x7ffe67f8feb4,125471548,0,0x0,8
tick,0x7ffe67f8feb4,125487229,0,0x0,8
tick,0x7ffe67f8feb4,125502798,0,0x0,8
tick,0x7ffe67f8feb4,125518263,0,0x0,8
tick,0x7ffe67f8feb4,125534390,0,0x0,8
tick,0x7ffe67f8feb4,125549489,0,0x0,8
tick,0x7ffe67f8feb4,125565092,0,0x0,8
tick,0x7ffe67f8feb4,125580734,0,0x0,8
tick,0x7ffe67f8feb4,125596770,0,0x0,8
tick,0x7ffe67f8feb4,125612439,0,0x0,8
tick,0x7ffe67f8feb4,125628550,0,0x0,8
tick,0x7ffe67f8feb4,125644096,0,0x0,8
tick,0x7ffe67f8feb4,125659017,0,0x0,8
tick,0x7ffe67f8feb4,125674446,0,0x0,8
tick,0x7ffe67f8feb4,125690437,0,0x0,8
tick,0x7ffe67f8feb4,125705759,0,0x0,8
tick,0x7ffe67f8feb4,125721469,0,0x0,8
tick,0x7ffe67f8feb4,125736622,0,0x0,8
tick,0x7ffe67f8feb4,125752377,0,0x0,8
tick,0x7ffe67f8feb4,125767860,0,0x0,8
tick,0x7ffe67f8feb4,125783885,0,0x0,8
tick,0x7ffe67f8feb4,125798642,0,0x0,8
tick,0x7ffe67f8feb4,125814056,0,0x0,8
tick,0x7ffe67f8feb4,125829987,0,0x0,8
tick,0x7ffe67f8feb4,125845467,0,0x0,8
tick,0x7ffe67f8feb4,125861908,0,0x0,8
tick,0x7ffe67f8feb4,125877769,0,0x0,8
tick,0x7ffe67f8feb4,125893792,0,0x0,8
tick,0x7ffe67f8feb4,125909789,0,0x0,8
tick,0x7ffe67f8feb4,125925772,0,0x0,8
tick,0x7ffe67f8feb4,125941739,0,0x0,8
tick,0x7ffe67f8feb4,125957743,0,0x0,8
tick,0x7ffe67f8feb4,125972909,0,0x0,8
tick,0x7ffe67f8feb4,125988763,0,0x0,8
tick,0x7ffe67f8feb4,126004416,0,0x0,8
tick,0x7ffe67f8feb4,126020032,0,0x0,8
tick,0x7ffe67f8feb4,126035372,0,0x0,8
tick,0x7ffe67f8feb4,126051494,0,0x0,8
tick,0x7ffe67f8feb4,126066538,0,0x0,8
tick,0x7ffe67f8feb4,126081757,0,0x0,8
tick,0x7ffe67f8feb4,126097449,0,0x0,8
tick,0x7ffe67f8feb4,126112596,0,0x0,8
tick,0x7ffe67f8feb4,126128413,0,0x0,8
tick,0x7ffe67f8feb4,126144448,0,0x0,8
tick,0x7ffe67f8feb4,126160443,0,0x0,8
tick,0x7ffe67f8feb4,126176454,0,0x0,8
tick,0x7ffe67f8feb4,126192514,0,0x0,8
tick,0x7ffe67f8feb4,126208543,0,0x0,8
tick,0x7ffe67f8feb4,126224538,0,0x0,8
tick,0x7ffe67f8feb4,126240152,0,0x0,8
tick,0x7ffe67f8feb4,126255606,0,0x0,8
tick,0x7ffe67f8feb4,126271622,0,0x0,8
tick,0x7ffe67f8feb4,126287101,0,0x0,8
tick,0x7ffe67f8feb4,126302559,0,0x0,8
tick,0x7ffe67f8feb4,126318486,0,0x0,8
tick,0x7ffe67f8feb4,126333974,0,0x0,8
tick,0x7ffe67f8feb4,126349506,0,0x0,8
tick,0x7ffe67f8feb4,126364797,0,0x0,8
tick,0x7ffe67f8feb4,126380807,0,0x0,8
tick,0x7ffe67f8feb4,126395742,0,0x0,8
tick,0x7ffe67f8feb4,126410732,0,0x0,8
tick,0x7ffe67f8feb4,126426752,0,0x0,8
tick,0x7ffe67f8feb4,126442850,0,0x0,8
tick,0x7ffe67f8feb4,126457844,0,0x0,8
tick,0x7ffe67f8feb4,126473574,0,0x0,8
tick,0x7ffe67f8feb4,126489302,0,0x0,8
tick,0x7ffe67f8feb4,126505664,0,0x0,8
tick,0x7ffe67f8feb4,126521298,0,0x0,8
tick,0x7ffe67f8feb4,126537653,0,0x0,8
tick,0x7ffe67f8feb4,126553137,0,0x0,8
tick,0x7ffe67f8feb4,126569125,0,0x0,8
tick,0x7ffe67f8feb4,126584126,0,0x0,8
tick,0x7ffe67f8feb4,126599299,0,0x0,8
tick,0x7ffe67f8feb4,126614754,0,0x0,8
tick,0x7ffe67f8feb4,126630820,0,0x0,8
tick,0x7ffe67f8feb4,126646082,0,0x0,8
tick,0x7ffe67f8feb4,126661391,0,0x0,8
tick,0x7ffe67f8feb4,126676866,0,0x0,8
tick,0x7ffe67f8feb4,126692261,0,0x0,8
tick,0x7ffe67f8feb4,126708289,0,0x0,8
tick,0x7ffe67f8feb4,126723551,0,0x0,8
tick,0x7ffe67f8feb4,126739291,0,0x0,8
tick,0x7ffe67f8feb4,126755311,0,0x0,8
tick,0x7ffe67f8feb4,126770856,0,0x0,8
tick,0x7ffe67f8feb4,126785575,0,0x0,8
tick,0x7ffe67f8feb4,126800706,0,0x0,8
tick,0x7ffe67f8feb4,126816756,0,0x0,8
tick,0x7ffe67f8feb4,126832173,0,0x0,8
tick,0x7ffe67f8feb4,126847835,0,0x0,8
tick,0x7ffe67f8feb4,126863813,0,0x0,8
tick,0x7ffe67f8feb4,126879389,0,0x0,8
tick,0x7ffe67f8feb4,126895438,0,0x0,8
tick,0x7ffe67f8feb4,126911409,0,0x0,8
tick,0x7ffe67f8feb4,126927418,0,0x0,8
tick,0x7ffe67f8feb4,126943383,0,0x0,8
tick,0x7ffe67f8feb4,126959374,0,0x0,8
tick,0x7ffe67f8feb4,126975465,0,0x0,8
tick,0x7ffe67f8feb4,126990772,0,0x0,8
tick,0x7ffe67f8feb4,127006562,0,0x0,8
tick,0x7ffe67f8feb4,127022129,0,0x0,8
tick,0x7ffe67f8feb4,127038149,0,0x0,8
tick,0x7ffe67f8feb4,127053534,0,0x0,8
tick,0x7ffe67f8feb4,127068784,0,0x0,8
tick,0x7ffe67f8feb4,127084363,0,0x0,8
tick,0x7ffe67f8feb4,127098924,0,0x0,8
tick,0x7ffe67f8feb4,127114698,0,0x0,8
tick,0x7ffe67f8feb4,127129511,0,0x0,8
tick,0x7ffe67f8feb4,127145912,0,0x0,8
tick,0x7ffe67f8feb4,127161469,0,0x0,8
tick,0x7ffe67f8feb4,127176502,0,0x0,8
tick,0x7ffe67f8feb4,127192618,0,0x0,8
tick,0x7ffe67f8feb4,127208491,0,0x0,8
tick,0x7ffe67f8feb4,127224554,0,0x0,8
tick,0x7ffe67f8feb4,127240694,0,0x0,8
tick,0x7ffe67f8feb4,127258334,0,0x0,8
tick,0x7ffe67f8feb4,127274376,0,0x0,8
tick,0x7ffe67f8feb4,127288949,0,0x0,8
tick,0x7ffe67f8feb4,127304693,0,0x0,8
tick,0x7ffe67f8feb4,127320526,0,0x0,8
tick,0x7ffe67f8feb4,127335797,0,0x0,8
tick,0x7ffe67f8feb4,127351798,0,0x0,8
tick,0x7ffe67f8feb4,127367834,0,0x0,8
tick,0x7ffe67f8feb4,127383851,0,0x0,8
tick,0x7ffe67f8feb4,127399143,0,0x0,8
tick,0x7ffe67f8feb4,127415134,0,0x0,8
tick,0x7ffe67f8feb4,127431136,0,0x0,8
tick,0x7ffe67f8feb4,127447166,0,0x0,8
tick,0x7ffe67f8feb4,127462535,0,0x0,8
tick,0x7ffe67f8feb4,127478542,0,0x0,8
tick,0x7ffe67f8feb4,127494223,0,0x0,8
tick,0x7ffe67f8feb4,127509586,0,0x0,8
tick,0x7ffe67f8feb4,127525622,0,0x0,8
tick,0x7ffe67f8feb4,127541629,0,0x0,8
tick,0x7ffe67f8feb4,127557606,0,0x0,8
tick,0x7ffe67f8feb4,127573663,0,0x0,8
tick,0x7ffe67f8feb4,127589330,0,0x0,8
tick,0x7ffe67f8feb4,127604901,0,0x0,8
tick,0x7ffe67f8feb4,127619901,0,0x0,8
tick,0x7ffe67f8feb4,127635895,0,0x0,8
tick,0x7ffe67f8feb4,127651909,0,0x0,8
tick,0x7ffe67f8feb4,127667942,0,0x0,8
tick,0x7ffe67f8feb4,127683508,0,0x0,8
tick,0x7ffe67f8feb4,127699262,0,0x0,8
tick,0x7ffe67f8feb4,127714409,0,0x0,8
tick,0x7ffe67f8feb4,127729245,0,0x0,8
tick,0x7ffe67f8feb4,127745221,0,0x0,8
tick,0x7ffe67f8feb4,127761361,0,0x0,8
tick,0x7ffe67f8feb4,127777326,0,0x0,8
tick,0x7ffe67f8feb4,127792754,0,0x0,8
tick,0x7ffe67f8feb4,127807926,0,0x0,8
tick,0x7ffe67f8feb4,127823978,0,0x0,8
tick,0x7ffe67f8feb4,127840025,0,0x0,8
tick,0x7ffe67f8feb4,127855489,0,0x0,8
tick,0x7ffe67f8feb4,127870983,0,0x0,8
tick,0x7ffe67f8feb4,127887031,0,0x0,8
tick,0x7ffe67f8feb4,127902710,0,0x0,8
tick,0x7ffe67f8feb4,127918635,0,0x0,8
tick,0x7ffe67f8feb4,127934955,0,0x0,8
tick,0x7ffe67f8feb4,127950869,0,0x0,8
tick,0x7ffe67f8feb4,127966527,0,0x0,8
tick,0x7ffe67f8feb4,127981815,0,0x0,8
tick,0x7ffe67f8feb4,127996893,0,0x0,8
tick,0x7ffe67f8feb4,128012579,0,0x0,8
tick,0x7ffe67f8feb4,128027995,0,0x0,8
tick,0x7ffe67f8feb4,128044162,0,0x0,8
tick,0x7ffe67f8feb4,128059432,0,0x0,8
tick,0x7ffe67f8feb4,128075664,0,0x0,8
tick,0x7ffe67f8feb4,128090857,0,0x0,8
tick,0x7ffe67f8feb4,128106954,0,0x0,8
tick,0x7ffe67f8feb4,128122397,0,0x0,8
tick,0x7ffe67f8feb4,128137545,0,0x0,8
tick,0x7ffe67f8feb4,128153095,0,0x0,8
tick,0x7ffe67f8feb4,128168226,0,0x0,8
tick,0x7ffe67f8feb4,128184263,0,0x0,8
tick,0x7ffe67f8feb4,128199962,0,0x0,8
tick,0x7ffe67f8feb4,128215126,0,0x0,8
tick,0x7ffe67f8feb4,128230645,0,0x0,8
tick,0x7ffe67f8feb4,128246420,0,0x0,8
tick,0x7ffe67f8feb4,128262449,0,0x0,8
tick,0x7ffe67f8feb4,128277823,0,0x0,8
tick,0x7ffe67f8feb4,128292644,0,0x0,8
tick,0x7ffe67f8feb4,128307766,0,0x0,8
tick,0x7ffe67f8feb4,128323775,0,0x0,8
tick,0x7ffe67f8feb4,128338817,0,0x0,8
tick,0x7ffe67f8feb4,128353946,0,0x0,8
tick,0x7ffe67f8feb4,128369950,0,0x0,8
tick,0x7ffe67f8feb4,128385986,0,0x0,8
tick,0x7ffe67f8feb4,128401109,0,0x0,8
tick,0x7ffe67f8feb4,128416538,0,0x0,8
tick,0x7ffe67f8feb4,128431969,0,0x0,8
tick,0x7ffe67f8feb4,128446789,0,0x0,8
tick,0x7ffe67f8feb4,128461989,0,0x0,8
tick,0x7ffe67f8feb4,128477187,0,0x0,8
tick,0x7ffe67f8feb4,128493070,0,0x0,8
tick,0x7ffe67f8feb4,128509289,0,0x0,8
tick,0x7ffe67f8feb4,128524326,0,0x0,8
tick,0x7ffe67f8feb4,128540378,0,0x0,8
tick,0x7ffe67f8feb4,128556376,0,0x0,8
tick,0x7ffe67f8feb4,128572690,0,0x0,8
tick,0x7ffe67f8feb4,128588337,0,0x0,8
tick,0x7ffe67f8feb4,128604361,0,0x0,8
tick,0x7ffe67f8feb4,128620361,0,0x0,8
tick,0x7ffe67f8feb4,128636161,0,0x0,8
tick,0x7ffe67f8feb4,128652202,0,0x0,8
tick,0x7ffe67f8feb4,128668174,0,0x0,8
tick,0x7ffe67f8feb4,128684184,0,0x0,8
tick,0x7ffe67f8feb4,128699313,0,0x0,8
tick,0x7ffe67f8feb4,128715057,0,0x0,8
tick,0x7ffe67f8feb4,128730072,0,0x0,8
tick,0x7ffe67f8feb4,128745584,0,0x0,8
tick,0x7ffe67f8feb4,128761063,0,0x0,8
tick,0x7ffe67f8feb4,128777064,0,0x0,8
tick,0x7ffe67f8feb4,128792585,0,0x0,8
tick,0x7ffe67f8feb4,128808548,0,0x0,8
tick,0x7ffe67f8feb4,128824540,0,0x0,8
tick,0x7ffe67f8feb4,128840608,0,0x0,8
tick,0x7ffe67f8feb4,128856017,0,0x0,8
tick,0x7ffe67f8feb4,128871265,0,0x0,8
tick,0x7ffe67f8feb4,128887312,0,0x0,8
tick,0x7ffe67f8feb4,128903340,0,0x0,8
tick,0x7ffe67f8feb4,128918334,0,0x0,8
tick,0x7ffe67f8feb4,128934289,0,0x0,8
tick,0x7ffe67f8feb4,128950287,0,0x0,8
tick,0x7ffe67f8feb4,128965273,0,0x0,8
tick,0x7ffe67f8feb4,128981334,0,0x0,8
tick,0x7ffe67f8feb4,128997055,0,0x0,8
tick,0x7ffe67f8feb4,129012386,0,0x0,8
tick,0x7ffe67f8feb4,129027445,0,0x0,8
tick,0x7ffe67f8feb4,129042830,0,0x0,8
tick,0x7ffe67f8feb4,129058522,0,0x0,8
tick,0x7ffe67f8feb4,129073259,0,0x0,8
tick,0x7ffe67f8feb4,129089168,0,0x0,8
tick,0x7ffe67f8feb4,129105327,0,0x0,8
tick,0x7ffe67f8feb4,129120469,0,0x0,8
tick,0x7ffe67f8feb4,129135891,0,0x0,8
tick,0x7ffe67f8feb4,129150820,0,0x0,8
tick,0x7ffe67f8feb4,129166900,0,0x0,8
tick,0x7ffe67f8feb4,129182849,0,0x0,8
tick,0x7ffe67f8feb4,129198867,0,0x0,8
tick,0x7ffe67f8feb4,129214881,0,0x0,8
tick,0x7ffe67f8feb4,129230930,0,0x0,8
tick,0x7ffe67f8feb4,129249906,0,0x0,8
tick,0x7ffe67f8feb4,129266073,0,0x0,8
tick,0x7ffe67f8feb4,129281326,0,0x0,8
tick,0x7ffe67f8feb4,129296726,0,0x0,8
tick,0x7ffe67f8feb4,129312462,0,0x0,8
tick,0x7ffe67f8feb4,129327492,0,0x0,8
tick,0x7ffe67f8feb4,129343712,0,0x0,8
tick,0x7ffe67f8feb4,129358941,0,0x0,8
tick,0x7ffe67f8feb4,129374962,0,0x0,8
tick,0x7ffe67f8feb4,129390989,0,0x0,8
tick,0x7ffe67f8feb4,129406173,0,0x0,8
tick,0x7ffe67f8feb4,129421624,0,0x0,8
tick,0x7ffe67f8feb4,129437671,0,0x0,8
tick,0x7ffe67f8feb4,129453292,0,0x0,8
tick,0x7ffe67f8feb4,129469267,0,0x0,8
tick,0x7ffe67f8feb4,129484695,0,0x0,8
tick,0x7ffe67f8feb4,129500004,0,0x0,8
tick,0x7ffe67f8feb4,129515376,0,0x0,8
tick,0x7ffe67f8feb4,129530584,0,0x0,8
tick,0x7ffe67f8feb4,129546202,0,0x0,8
tick,0x7ffe67f8feb4,129562169,0,0x0,8
tick,0x7ffe67f8feb4,129577330,0,0x0,8
tick,0x7ffe67f8feb4,129592476,0,0x0,8
tick,0x7ffe67f8feb4,129607993,0,0x0,8
tick,0x7ffe67f8feb4,129623863,0,0x0,8
tick,0x7ffe67f8feb4,129639276,0,0x0,8
tick,0x7ffe67f8feb4,129655488,0,0x0,8
tick,0x7ffe67f8feb4,129670205,0,0x0,8
tick,0x7ffe67f8feb4,129686247,0,0x0,8
tick,0x7ffe67f8feb4,129701320,0,0x0,8
tick,0x7ffe67f8feb4,129716520,0,0x0,8
tick,0x7ffe67f8feb4,129732577,0,0x0,8
tick,0x7ffe67f8feb4,129748636,0,0x0,8
tick,0x7ffe67f8feb4,129767005,0,0x0,8
tick,0x7ffe67f8feb4,129782338,0,0x0,8
tick,0x7ffe67f8feb4,129797717,0,0x0,8
tick,0x7ffe67f8feb4,129812723,0,0x0,8
tick,0x7ffe67f8feb4,129827965,0,0x0,8
tick,0x7ffe67f8feb4,129843841,0,0x0,8
tick,0x7ffe67f8feb4,129859733,0,0x0,8
tick,0x7ffe67f8feb4,129875865,0,0x0,8
tick,0x7ffe67f8feb4,129891776,0,0x0,8
tick,0x7ffe67f8feb4,129907821,0,0x0,8
tick,0x7ffe67f8feb4,129923915,0,0x0,8
tick,0x7ffe67f8feb4,129939747,0,0x0,8
tick,0x7ffe67f8feb4,129955763,0,0x0,8
tick,0x7ffe67f8feb4,129971757,0,0x0,8
tick,0x7ffe67f8feb4,129987743,0,0x0,8
tick,0x7ffe67f8feb4,130003777,0,0x0,8
tick,0x7ffe67f8feb4,130019833,0,0x0,8
tick,0x7ffe67f8feb4,130035834,0,0x0,8
tick,0x7ffe67f8feb4,130051857,0,0x0,8
tick,0x7ffe67f8feb4,130067819,0,0x0,8
tick,0x7ffe67f8feb4,130083160,0,0x0,8
tick,0x7ffe67f8feb4,130099145,0,0x0,8
tick,0x7ffe67f8feb4,130114836,0,0x0,8
tick,0x7ffe67f8feb4,130130842,0,0x0,8
tick,0x7ffe67f8feb4,130146914,0,0x0,8
tick,0x7ffe67f8feb4,130162875,0,0x0,8
tick,0x7ffe67f8feb4,130179065,0,0x0,8
tick,0x7ffe67f8feb4,130194558,0,0x0,8
tick,0x7ffe67f8feb4,130210356,0,0x0,8
tick,0x7ffe67f8feb4,130226353,0,0x0,8
tick,0x7ffe67f8feb4,130242380,0,0x0,8
tick,0x7ffe67f8feb4,130258372,0,0x0,8
tick,0x7ffe67f8feb4,130274277,0,0x0,8
tick,0x7ffe67f8feb4,130290097,0,0x0,8
tick,0x7ffe67f8feb4,130305110,0,0x0,8
tick,0x7ffe67f8feb4,130320524,0,0x0,8
tick,0x7ffe67f8feb4,130335817,0,0x0,8
tick,0x7ffe67f8feb4,130350793,0,0x0,8
tick,0x7ffe67f8feb4,130366210,0,0x0,8
tick,0x7ffe67f8feb4,130381604,0,0x0,8
tick,0x7ffe67f8feb4,130396821,0,0x0,8
tick,0x7ffe67f8feb4,130412191,0,0x0,8
tick,0x7ffe67f8feb4,130427884,0,0x0,8
tick,0x7ffe67f8feb4,130443852,0,0x0,8
tick,0x7ffe67f8feb4,130460036,0,0x0,8
tick,0x7ffe67f8feb4,130476234,0,0x0,8
tick,0x7ffe67f8feb4,130491897,0,0x0,8
tick,0x7ffe67f8feb4,130507877,0,0x0,8
tick,0x7ffe67f8feb4,130523635,0,0x0,8
tick,0x7ffe67f8feb4,130538811,0,0x0,8
tick,0x7ffe67f8feb4,130553831,0,0x0,8
tick,0x7ffe67f8feb4,130569867,0,0x0,8
tick,0x7ffe67f8feb4,130585839,0,0x0,8
tick,0x7ffe67f8feb4,130601891,0,0x0,8
tick,0x7ffe67f8feb4,130617318,0,0x0,8
tick,0x7ffe67f8feb4,130632363,0,0x0,8
tick,0x7ffe67f8feb4,130648646,0,0x0,8
tick,0x7ffe67f8feb4,130664258,0,0x0,8
tick,0x7ffe67f8feb4,130680279,0,0x0,8
tick,0x7ffe67f8feb4,130695830,0,0x0,8
tick,0x7ffe67f8feb4,130711563,0,0x0,8
tick,0x7ffe67f8feb4,130726600,0,0x0,8
tick,0x7ffe67f8feb4,130742625,0,0x0,8
tick,0x7ffe67f8feb4,130758676,0,0x0,8
tick,0x7ffe67f8feb4,130774777,0,0x0,8
tick,0x7ffe67f8feb4,130790172,0,0x0,8
tick,0x7ffe67f8feb4,130805874,0,0x0,8
tick,0x7ffe67f8feb4,130822173,0,0x0,8
tick,0x7ffe67f8feb4,130837177,0,0x0,8
tick,0x7ffe67f8feb4,130852532,0,0x0,8
tick,0x7ffe67f8feb4,130867672,0,0x0,8
tick,0x7ffe67f8feb4,130882979,0,0x0,8
tick,0x7ffe67f8feb4,130898223,0,0x0,8
tick,0x7ffe67f8feb4,130913678,0,0x0,8
tick,0x7ffe67f8feb4,130929398,0,0x0,8
tick,0x7ffe67f8feb4,130945359,0,0x0,8
tick,0x7ffe67f8feb4,130961365,0,0x0,8
tick,0x7ffe67f8feb4,130977391,0,0x0,8
tick,0x7ffe67f8feb4,130993382,0,0x0,8
tick,0x7ffe67f8feb4,131009394,0,0x0,8
tick,0x7ffe67f8feb4,131024569,0,0x0,8
tick,0x7ffe67f8feb4,131040574,0,0x0,8
tick,0x7ffe67f8feb4,131056574,0,0x0,8
tick,0x7ffe67f8feb4,131072653,0,0x0,8
tick,0x7ffe67f8feb4,131088613,0,0x0,8
tick,0x7ffe67f8feb4,131103783,0,0x0,8
tick,0x7ffe67f8feb4,131119600,0,0x0,8
tick,0x7ffe67f8feb4,131134798,0,0x0,8
tick,0x7ffe67f8feb4,131150199,0,0x0,8
tick,0x7ffe67f8feb4,131165683,0,0x0,8
tick,0x7ffe67f8feb4,131180870,0,0x0,8
tick,0x7ffe67f8feb4,131197107,0,0x0,8
tick,0x7ffe67f8feb4,131213136,0,0x0,8
tick,0x7ffe67f8feb4,131228803,0,0x0,8
tick,0x7ffe67f8feb4,131244805,0,0x0,8
tick,0x7ffe67f8feb4,131260890,0,0x0,8
tick,0x7ffe67f8feb4,131276904,0,0x0,8
tick,0x7ffe67f8feb4,131292131,0,0x0,8
tick,0x7ffe67f8feb4,131307574,0,0x0,8
tick,0x7ffe67f8feb4,131322717,0,0x0,8
tick,0x7ffe67f8feb4,131337857,0,0x0,8
tick,0x7ffe67f8feb4,131353578,0,0x0,8
tick,0x7ffe67f8feb4,131369478,0,0x0,8
tick,0x7ffe67f8feb4,131385437,0,0x0,8
tick,0x7ffe67f8feb4,131401434,0,0x0,8
tick,0x7ffe67f8feb4,131417493,0,0x0,8
tick,0x7ffe67f8feb4,131432810,0,0x0,8
tick,0x7ffe67f8feb4,131448446,0,0x0,8
tick,0x7ffe67f8feb4,131463714,0,0x0,8
tick,0x7ffe67f8feb4,131478837,0,0x0,8
tick,0x7ffe67f8feb4,131494441,0,0x0,8
tick,0x7ffe67f8feb4,131509894,0,0x0,8
tick,0x7ffe67f8feb4,131525392,0,0x0,8
tick,0x7ffe67f8feb4,131540587,0,0x0,8
tick,0x7ffe67f8feb4,131555923,0,0x0,8
tick,0x7ffe67f8feb4,131571471,0,0x0,8
tick,0x7ffe67f8feb4,131587511,0,0x0,8
tick,0x7ffe67f8feb4,131603054,0,0x0,8
tick,0x7ffe67f8feb4,131618310,0,0x0,8
tick,0x7ffe67f8feb4,131634297,0,0x0,8
tick,0x7ffe67f8feb4,131649648,0,0x0,8
tick,0x7ffe67f8feb4,131665492,0,0x0,8
tick,0x7ffe67f8feb4,131680881,0,0x0,8
tick,0x7ffe67f8feb4,131695744,0,0x0,8
tick,0x7ffe67f8feb4,131711573,0,0x0,8
tick,0x7ffe67f8feb4,131726936,0,0x0,8
tick,0x7ffe67f8feb4,131742497,0,0x0,8
tick,0x7ffe67f8feb4,131757790,0,0x0,8
tick,0x7ffe67f8feb4,131773600,0,0x0,8
tick,0x7ffe67f8feb4,131789295,0,0x0,8
tick,0x7ffe67f8feb4,131805020,0,0x0,8
tick,0x7ffe67f8feb4,131821098,0,0x0,8
tick,0x7ffe67f8feb4,131836528,0,0x0,8
tick,0x7ffe67f8feb4,131852344,0,0x0,8
tick,0x7ffe67f8feb4,131867828,0,0x0,8
tick,0x7ffe67f8feb4,131883583,0,0x0,8
tick,0x7ffe67f8feb4,131898799,0,0x0,8
tick,0x7ffe67f8feb4,131913831,0,0x0,8
tick,0x7ffe67f8feb4,131929772,0,0x0,8
tick,0x7ffe67f8feb4,131945776,0,0x0,8
tick,0x7ffe67f8feb4,131961768,0,0x0,8
tick,0x7ffe67f8feb4,131977833,0,0x0,8
tick,0x7ffe67f8feb4,131993793,0,0x0,8
tick,0x7ffe67f8feb4,132009167,0,0x0,8
tick,0x7ffe67f8feb4,132024886,0,0x0,8
tick,0x7ffe67f8feb4,132040237,0,0x0,8
tick,0x7ffe67f8feb4,132055556,0,0x0,8
tick,0x7ffe67f8feb4,132070892,0,0x0,8
tick,0x7ffe67f8feb4,132086142,0,0x0,8
tick,0x7ffe67f8feb4,132101678,0,0x0,8
tick,0x7ffe67f8feb4,132116775,0,0x0,8
tick,0x7ffe67f8feb4,132132621,0,0x0,8
tick,0x7ffe67f8feb4,132147964,0,0x0,8
tick,0x7ffe67f8feb4,132162903,0,0x0,8
tick,0x7ffe67f8feb4,132178106,0,0x0,8
tick,0x7ffe67f8feb4,132193598,0,0x0,8
tick,0x7ffe67f8feb4,132209867,0,0x0,8
tick,0x7ffe67f8feb4,132225429,0,0x0,8
tick,0x7ffe67f8feb4,132241180,0,0x0,8
tick,0x7ffe67f8feb4,132256750,0,0x0,8
tick,0x7ffe67f8feb4,132271901,0,0x0,8
tick,0x7ffe67f8feb4,132287912,0,0x0,8
tick,0x7ffe67f8feb4,132303220,0,0x0,8
tick,0x7ffe67f8feb4,132318894,0,0x0,8
tick,0x7ffe67f8feb4,132334903,0,0x0,8
tick,0x7ffe67f8feb4,132351181,0,0x0,8
tick,0x7ffe67f8feb4,132366900,0,0x0,8
tick,0x7ffe67f8feb4,132382993,0,0x0,8
tick,0x7ffe67f8feb4,132398940,0,0x0,8
tick,0x7ffe67f8feb4,132413948,0,0x0,8
tick,0x7ffe67f8feb4,132430159,0,0x0,8
tick,0x7ffe67f8feb4,132445545,0,0x0,8
tick,0x7ffe67f8feb4,132461783,0,0x0,8
tick,0x7ffe67f8feb4,132477597,0,0x0,8
tick,0x7ffe67f8feb4,132493458,0,0x0,8
tick,0x7ffe67f8feb4,132508929,0,0x0,8
tick,0x7ffe67f8feb4,132524651,0,0x0,8
tick,0x7ffe67f8feb4,132539658,0,0x0,8
tick,0x7ffe67f8feb4,132555269,0,0x0,8
tick,0x7ffe67f8feb4,132570742,0,0x0,8
tick,0x7ffe67f8feb4,132586765,0,0x0,8
tick,0x7ffe67f8feb4,132601656,0,0x0,8
tick,0x7ffe67f8feb4,132617712,0,0x0,8
tick,0x7ffe67f8feb4,132632751,0,0x0,8
tick,0x7ffe67f8feb4,132648690,0,0x0,8
tick,0x7ffe67f8feb4,132663912,0,0x0,8
tick,0x7ffe67f8feb4,132679681,0,0x0,8
tick,0x7ffe67f8feb4,132695680,0,0x0,8
tick,0x7ffe67f8feb4,132711891,0,0x0,8
tick,0x7ffe67f8feb4,132727969,0,0x0,8
tick,0x7ffe67f8feb4,132744564,0,0x0,8
tick,0x7ffe67f8feb4,132759706,0,0x0,8
tick,0x7ffe67f8feb4,132775330,0,0x0,8
tick,0x7ffe67f8feb4,132790774,0,0x0,8
tick,0x7ffe67f8feb4,132806610,0,0x0,8
tick,0x7ffe67f8feb4,132822610,0,0x0,8
tick,0x7ffe67f8feb4,132837878,0,0x0,8
tick,0x7ffe67f8feb4,132853783,0,0x0,8
tick,0x7ffe67f8feb4,132869798,0,0x0,8
tick,0x7ffe67f8feb4,132885650,0,0x0,8
tick,0x7ffe67f8feb4,132901680,0,0x0,8
tick,0x7ffe67f8feb4,132916956,0,0x0,8
tick,0x7ffe67f8feb4,132932856,0,0x0,8
tick,0x7ffe67f8feb4,132947793,0,0x0,8
tick,0x7ffe67f8feb4,132963794,0,0x0,8
tick,0x7ffe67f8feb4,132979791,0,0x0,8
tick,0x7ffe67f8feb4,132995821,0,0x0,8
tick,0x7ffe67f8feb4,133011836,0,0x0,8
tick,0x7ffe67f8feb4,133028049,0,0x0,8
tick,0x7ffe67f8feb4,133043855,0,0x0,8
tick,0x7ffe67f8feb4,133064611,0,0x0,8
tick,0x7ffe67f8feb4,133074861,0,0x0,8
tick,0x7ffe67f8feb4,133090829,0,0x0,8
tick,0x7ffe67f8feb4,133106458,0,0x0,8
tick,0x7ffe67f8feb4,133121469,0,0x0,8
tick,0x7ffe67f8feb4,133136664,0,0x0,8
tick,0x7ffe67f8feb4,133151942,0,0x0,8
tick,0x7ffe67f8feb4,133167680,0,0x0,8
tick,0x7ffe67f8feb4,133183705,0,0x0,8
tick,0x7ffe67f8feb4,133199708,0,0x0,8
tick,0x7ffe67f8feb4,133215700,0,0x0,8
tick,0x7ffe67f8feb4,133231697,0,0x0,8
tick,0x7ffe67f8feb4,133247715,0,0x0,8
tick,0x7ffe67f8feb4,133263693,0,0x0,8
tick,0x7ffe67f8feb4,133279702,0,0x0,8
tick,0x7ffe67f8feb4,133295753,0,0x0,8
tick,0x7ffe67f8feb4,133311696,0,0x0,8
tick,0x7ffe67f8feb4,133327762,0,0x0,8
tick,0x7ffe67f8feb4,133344836,0,0x0,8
tick,0x7ffe67f8feb4,133359698,0,0x0,8
tick,0x7ffe67f8feb4,133374861,0,0x0,8
tick,0x7ffe67f8feb4,133390868,0,0x0,8
tick,0x7ffe67f8feb4,133406884,0,0x0,8
tick,0x7ffe67f8feb4,133422886,0,0x0,8
tick,0x7ffe67f8feb4,133438875,0,0x0,8
tick,0x7ffe67f8feb4,133454805,0,0x0,8
tick,0x7ffe67f8feb4,133469975,0,0x0,8
tick,0x7ffe67f8feb4,133485288,0,0x0,8
tick,0x7ffe67f8feb4,133501005,0,0x0,8
tick,0x7ffe67f8feb4,133516990,0,0x0,8
tick,0x7ffe67f8feb4,133533017,0,0x0,8
tick,0x7ffe67f8feb4,133548993,0,0x0,8
tick,0x7ffe67f8feb4,133564877,0,0x0,8
tick,0x7ffe67f8feb4,133581104,0,0x0,8
tick,0x7ffe67f8feb4,133596943,0,0x0,8
tick,0x7ffe67f8feb4,133612971,0,0x0,8
tick,0x7ffe67f8feb4,133629428,0,0x0,8
tick,0x7ffe67f8feb4,133645006,0,0x0,8
tick,0x7ffe67f8feb4,133660743,0,0x0,8
tick,0x7ffe67f8feb4,133675902,0,0x0,8
tick,0x7ffe67f8feb4,133691915,0,0x0,8
tick,0x7ffe67f8feb4,133707913,0,0x0,8
tick,0x7ffe67f8feb4,133723939,0,0x0,8
tick,0x7ffe67f8feb4,133739929,0,0x0,8
tick,0x7ffe67f8feb4,133755933,0,0x0,8
tick,0x7ffe67f8feb4,133771986,0,0x0,8
tick,0x7ffe67f8feb4,133788110,0,0x0,8
tick,0x7ffe67f8feb4,133803948,0,0x0,8
tick,0x7ffe67f8feb4,133818931,0,0x0,8
tick,0x7ffe67f8feb4,133834867,0,0x0,8
tick,0x7ffe67f8feb4,133850952,0,0x0,8
tick,0x7ffe67f8feb4,133866284,0,0x0,8
tick,0x7ffe67f8feb4,133882283,0,0x0,8
tick,0x7ffe67f8feb4,133898700,0,0x0,8
tick,0x7ffe67f8feb4,133914529,0,0x0,8
tick,0x7ffe67f8feb4,133930404,0,0x0,8
tick,0x7ffe67f8feb4,133946325,0,0x0,8
tick,0x7ffe67f8feb4,133962355,0,0x0,8
tick,0x7ffe67f8feb4,133978305,0,0x0,8
tick,0x7ffe67f8feb4,133994287,0,0x0,8
tick,0x7ffe67f8feb4,134009352,0,0x0,8
tick,0x7ffe67f8feb4,134025369,0,0x0,8
tick,0x7ffe67f8feb4,134041375,0,0x0,8
tick,0x7ffe67f8feb4,134057392,0,0x0,8
tick,0x7ffe67f8feb4,134073384,0,0x0,8
tick,0x7ffe67f8feb4,134089379,0,0x0,8
tick,0x7ffe67f8feb4,134108958,0,0x0,8
tick,0x7ffe67f8feb4,134121479,0,0x0,8
tick,0x7ffe67f8feb4,134136528,0,0x0,8
tick,0x7ffe67f8feb4,134152697,0,0x0,8
tick,0x7ffe67f8feb4,134168438,0,0x0,8
tick,0x7ffe67f8feb4,134184455,0,0x0,8
tick,0x7ffe67f8feb4,134200439,0,0x0,8
tick,0x7ffe67f8feb4,134215988,0,0x0,8
tick,0x7ffe67f8feb4,134231437,0,0x0,8
tick,0x7ffe67f8feb4,134246815,0,0x0,8
tick,0x7ffe67f8feb4,134262671,0,0x0,8
tick,0x7ffe67f8feb4,134277803,0,0x0,8
tick,0x7ffe67f8feb4,134293826,0,0x0,8
tick,0x7ffe67f8feb4,134309849,0,0x0,8
tick,0x7ffe67f8feb4,134325892,0,0x0,8
tick,0x7ffe67f8feb4,134341893,0,0x0,8
tick,0x7ffe67f8feb4,134357893,0,0x0,8
tick,0x7ffe67f8feb4,134373059,0,0x0,8
tick,0x7ffe67f8feb4,134388931,0,0x0,8
tick,0x7ffe67f8feb4,134405027,0,0x0,8
tick,0x7ffe67f8feb4,134420931,0,0x0,8
tick,0x7ffe67f8feb4,134436109,0,0x0,8
tick,0x7ffe67f8feb4,134452023,0,0x0,8
tick,0x7ffe67f8feb4,134468059,0,0x0,8
tick,0x7ffe67f8feb4,134483498,0,0x0,8
tick,0x7ffe67f8feb4,134499033,0,0x0,8
tick,0x7ffe67f8feb4,134515068,0,0x0,8
tick,0x7ffe67f8feb4,134530728,0,0x0,8
tick,0x7ffe67f8feb4,134546185,0,0x0,8
tick,0x7ffe67f8feb4,134562055,0,0x0,8
tick,0x7ffe67f8feb4,134578038,0,0x0,8
tick,0x7ffe67f8feb4,134594067,0,0x0,8
tick,0x7ffe67f8feb4,134609060,0,0x0,8
tick,0x7ffe67f8feb4,134625087,0,0x0,8
tick,0x7ffe67f8feb4,134640251,0,0x0,8
tick,0x7ffe67f8feb4,134656207,0,0x0,8
tick,0x7ffe67f8feb4,134672068,0,0x0,8
tick,0x7ffe67f8feb4,134687233,0,0x0,8
tick,0x7ffe67f8feb4,134702719,0,0x0,8
tick,0x7ffe67f8feb4,134718226,0,0x0,8
tick,0x7ffe67f8feb4,134733908,0,0x0,8
tick,0x7ffe67f8feb4,134749268,0,0x0,8
tick,0x7ffe67f8feb4,134765189,0,0x0,8
tick,0x7ffe67f8feb4,134780859,0,0x0,8
tick,0x7ffe67f8feb4,134796531,0,0x0,8
tick,0x7ffe67f8feb4,134811922,0,0x0,8
tick,0x7ffe67f8feb4,134827627,0,0x0,8
tick,0x7ffe67f8feb4,134843096,0,0x0,8
tick,0x7ffe67f8feb4,134859055,0,0x0,8
tick,0x7ffe67f8feb4,134874261,0,0x0,8
tick,0x7ffe67f8feb4,134890099,0,0x0,8
tick,0x7ffe67f8feb4,134905090,0,0x0,8
tick,0x7ffe67f8feb4,134920986,0,0x0,8
tick,0x7ffe67f8feb4,134936306,0,0x0,8
tick,0x7ffe67f8feb4,134952294,0,0x0,8
tick,0x7ffe67f8feb4,134968265,0,0x0,8
tick,0x7ffe67f8feb4,134984314,0,0x0,8
tick,0x7ffe67f8feb4,135000367,0,0x0,8
tick,0x7ffe67f8feb4,135016454,0,0x0,8
tick,0x7ffe67f8feb4,135032457,0,0x0,8
tick,0x7ffe67f8feb4,135048113,0,0x0,8
tick,0x7ffe67f8feb4,135064201,0,0x0,8
tick,0x7ffe67f8feb4,135079182,0,0x0,8
tick,0x7ffe67f8feb4,135095068,0,0x0,8
tick,0x7ffe67f8feb4,135111088,0,0x0,8
tick,0x7ffe67f8feb4,135126247,0,0x0,8
tick,0x7ffe67f8feb4,135141384,0,0x0,8
tick,0x7ffe67f8feb4,135156954,0,0x0,8
tick,0x7ffe67f8feb4,135172132,0,0x0,8
tick,0x7ffe67f8feb4,135187970,0,0x0,8
tick,0x7ffe67f8feb4,135203134,0,0x0,8
tick,0x7ffe67f8feb4,135219124,0,0x0,8
tick,0x7ffe67f8feb4,135234647,0,0x0,8
tick,0x7ffe67f8feb4,135249880,0,0x0,8
tick,0x7ffe67f8feb4,135264955,0,0x0,8
tick,0x7ffe67f8feb4,135280701,0,0x0,8
tick,0x7ffe67f8feb4,135295724,0,0x0,8
tick,0x7ffe67f8feb4,135311147,0,0x0,8
tick,0x7ffe67f8feb4,135326910,0,0x0,8
tick,0x7ffe67f8feb4,135342903,0,0x0,8
tick,0x7ffe67f8feb4,135358884,0,0x0,8
tick,0x7ffe67f8feb4,135374167,0,0x0,8
tick,0x7ffe67f8feb4,135389624,0,0x0,8
tick,0x7ffe67f8feb4,135404887,0,0x0,8
tick,0x7ffe67f8feb4,135420170,0,0x0,8
tick,0x7ffe67f8feb4,135435871,0,0x0,8
tick,0x7ffe67f8feb4,135450946,0,0x0,8
tick,0x7ffe67f8feb4,135466899,0,0x0,8
tick,0x7ffe67f8feb4,135482574,0,0x0,8
tick,0x7ffe67f8feb4,135498673,0,0x0,8
tick,0x7ffe67f8feb4,135513999,0,0x0,8
tick,0x7ffe67f8feb4,135529191,0,0x0,8
tick,0x7ffe67f8feb4,135545185,0,0x0,8
tick,0x7ffe67f8feb4,135561206,0,0x0,8
tick,0x7ffe67f8feb4,135576709,0,0x0,8
tick,0x7ffe67f8feb4,135592226,0,0x0,8
tick,0x7ffe67f8feb4,135608263,0,0x0,8
tick,0x7ffe67f8feb4,135624280,0,0x0,8
tick,0x7ffe67f8feb4,135640207,0,0x0,8
tick,0x7ffe67f8feb4,135655946,0,0x0,8
tick,0x7ffe67f8feb4,135671217,0,0x0,8
tick,0x7ffe67f8feb4,135687235,0,0x0,8
tick,0x7ffe67f8feb4,135702459,0,0x0,8
tick,0x7ffe67f8feb4,135718464,0,0x0,8
tick,0x7ffe67f8feb4,135734228,0,0x0,8
tick,0x7ffe67f8feb4,135750152,0,0x0,8
tick,0x7ffe67f8feb4,135766236,0,0x0,8
tick,0x7ffe67f8feb4,135782458,0,0x0,8
tick,0x7ffe67f8feb4,135797803,0,0x0,8
tick,0x7ffe67f8feb4,135813149,0,0x0,8
tick,0x7ffe67f8feb4,135828933,0,0x0,8
tick,0x7ffe67f8feb4,135844238,0,0x0,8
tick,0x7ffe67f8feb4,135859958,0,0x0,8
tick,0x7ffe67f8feb4,135875113,0,0x0,8
tick,0x7ffe67f8feb4,135891000,0,0x0,8
tick,0x7ffe67f8feb4,135906502,0,0x0,8
tick,0x7ffe67f8feb4,135922537,0,0x0,8
tick,0x7ffe67f8feb4,135938584,0,0x0,8
tick,0x7ffe67f8feb4,135954516,0,0x0,8
tick,0x7ffe67f8feb4,135970515,0,0x0,8
tick,0x7ffe67f8feb4,135986523,0,0x0,8
tick,0x7ffe67f8feb4,136002518,0,0x0,8
tick,0x7ffe67f8feb4,136018560,0,0x0,8
tick,0x7ffe67f8feb4,136034121,0,0x0,8
tick,0x7ffe67f8feb4,136049561,0,0x0,8
tick,0x7ffe67f8feb4,136065589,0,0x0,8
tick,0x7ffe67f8feb4,136081195,0,0x0,8
tick,0x7ffe67f8feb4,136097270,0,0x0,8
tick,0x7ffe67f8feb4,136113180,0,0x0,8
tick,0x7ffe67f8feb4,136129278,0,0x0,8
tick,0x7ffe67f8feb4,136145179,0,0x0,8
tick,0x7ffe67f8feb4,136161163,0,0x0,8
tick,0x7ffe67f8feb4,136177187,0,0x0,8
tick,0x7ffe67f8feb4,136193225,0,0x0,8
tick,0x7ffe67f8feb4,136209383,0,0x0,8
tick,0x7ffe67f8feb4,136225984,0,0x0,8
tick,0x7ffe67f8feb4,136241205,0,0x0,8
tick,0x7ffe67f8feb4,136257120,0,0x0,8
tick,0x7ffe67f8feb4,136272134,0,0x0,8
tick,0x7ffe67f8feb4,136288135,0,0x0,8
tick,0x7ffe67f8feb4,136303777,0,0x0,8
tick,0x7ffe67f8feb4,136319160,0,0x0,8
tick,0x7ffe67f8feb4,136334439,0,0x0,8
tick,0x7ffe67f8feb4,136350188,0,0x0,8
tick,0x7ffe67f8feb4,136366187,0,0x0,8
tick,0x7ffe67f8feb4,136382192,0,0x0,8
tick,0x7ffe67f8feb4,136398226,0,0x0,8
tick,0x7ffe67f8feb4,136413336,0,0x0,8
tick,0x7ffe67f8feb4,136429350,0,0x0,8
tick,0x7ffe67f8feb4,136445138,0,0x0,8
tick,0x7ffe67f8feb4,136460330,0,0x0,8
tick,0x7ffe67f8feb4,136476141,0,0x0,8
tick,0x7ffe67f8feb4,136491325,0,0x0,8
tick,0x7ffe67f8feb4,136507068,0,0x0,8
tick,0x7ffe67f8feb4,136522343,0,0x0,8
tick,0x7ffe67f8feb4,136538170,0,0x0,8
tick,0x7ffe67f8feb4,136553199,0,0x0,8
tick,0x7ffe67f8feb4,136569241,0,0x0,8
tick,0x7ffe67f8feb4,136584620,0,0x0,8
tick,0x7ffe67f8feb4,136599787,0,0x0,8
tick,0x7ffe67f8feb4,136615731,0,0x0,8
tick,0x7ffe67f8feb4,136631763,0,0x0,8
tick,0x7ffe67f8feb4,136647894,0,0x0,8
tick,0x7ffe67f8feb4,136664054,0,0x0,8
tick,0x7ffe67f8feb4,136679684,0,0x0,8
tick,0x7ffe67f8feb4,136695693,0,0x0,8
tick,0x7ffe67f8feb4,136711689,0,0x0,8
tick,0x7ffe67f8feb4,136727679,0,0x0,8
tick,0x7ffe67f8feb4,136743752,0,0x0,8
tick,0x7ffe67f8feb4,136759722,0,0x0,8
tick,0x7ffe67f8feb4,136775502,0,0x0,8
tick,0x7ffe67f8feb4,136791505,0,0x0,8
tick,0x7ffe67f8feb4,136807512,0,0x0,8
tick,0x7ffe67f8feb4,136823516,0,0x0,8
tick,0x7ffe67f8feb4,136839385,0,0x0,8
tick,0x7ffe67f8feb4,136854593,0,0x0,8
tick,0x7ffe67f8feb4,136870412,0,0x0,8
tick,0x7ffe67f8feb4,136885963,0,0x0,8
tick,0x7ffe67f8feb4,136902009,0,0x0,8
tick,0x7ffe67f8feb4,136918038,0,0x0,8
tick,0x7ffe67f8feb4,136934068,0,0x0,8
tick,0x7ffe67f8feb4,136950110,0,0x0,8
tick,0x7ffe67f8feb4,136966110,0,0x0,8
tick,0x7ffe67f8feb4,136982115,0,0x0,8
tick,0x7ffe67f8feb4,136997358,0,0x0,8
tick,0x7ffe67f8feb4,137013166,0,0x0,8
tick,0x7ffe67f8feb4,137028409,0,0x0,8
tick,0x7ffe67f8feb4,137044086,0,0x0,8
tick,0x7ffe67f8feb4,137059250,0,0x0,8
tick,0x7ffe67f8feb4,137075263,0,0x0,8
tick,0x7ffe67f8feb4,137090681,0,0x0,8
tick,0x7ffe67f8feb4,137106499,0,0x0,8
tick,0x7ffe67f8feb4,137121479,0,0x0,8
tick,0x7ffe67f8feb4,137136972,0,0x0,8
tick,0x7ffe67f8feb4,137152653,0,0x0,8
tick,0x7ffe67f8feb4,137168709,0,0x0,8
tick,0x7ffe67f8feb4,137183993,0,0x0,8
tick,0x7ffe67f8feb4,137199242,0,0x0,8
tick,0x7ffe67f8feb4,137215055,0,0x0,8
tick,0x7ffe67f8feb4,137230385,0,0x0,8
tick,0x7ffe67f8feb4,137245531,0,0x0,8
tick,0x7ffe67f8feb4,137261084,0,0x0,8
tick,0x7ffe67f8feb4,137277224,0,0x0,8
tick,0x7ffe67f8feb4,137292847,0,0x0,8
tick,0x7ffe67f8feb4,137308157,0,0x0,8
tick,0x7ffe67f8feb4,137323909,0,0x0,8
tick,0x7ffe67f8feb4,137339101,0,0x0,8
tick,0x7ffe67f8feb4,137355010,0,0x0,8
tick,0x7ffe67f8feb4,137370149,0,0x0,8
tick,0x7ffe67f8feb4,137385862,0,0x0,8
tick,0x7ffe67f8feb4,137401627,0,0x0,8
tick,0x7ffe67f8feb4,137417250,0,0x0,8
tick,0x7ffe67f8feb4,137433330,0,0x0,8
tick,0x7ffe67f8feb4,137449819,0,0x0,8
tick,0x7ffe67f8feb4,137465146,0,0x0,8
tick,0x7ffe67f8feb4,137480250,0,0x0,8
tick,0x7ffe67f8feb4,137495644,0,0x0,8
tick,0x7ffe67f8feb4,137510954,0,0x0,8
tick,0x7ffe67f8feb4,137526909,0,0x0,8
tick,0x7ffe67f8feb4,137542479,0,0x0,8
tick,0x7ffe67f8feb4,137558466,0,0x0,8
tick,0x7ffe67f8feb4,137574502,0,0x0,8
tick,0x7ffe67f8feb4,137590475,0,0x0,8
tick,0x7ffe67f8feb4,137606051,0,0x0,8
tick,0x7ffe67f8feb4,137622074,0,0x0,8
tick,0x7ffe67f8feb4,137637111,0,0x0,8
tick,0x7ffe67f8feb4,137652865,0,0x0,8
tick,0x7ffe67f8feb4,137669094,0,0x0,8
tick,0x7ffe67f8feb4,137684020,0,0x0,8
tick,0x7ffe67f8feb4,137699874,0,0x0,8
tick,0x7ffe67f8feb4,137715126,0,0x0,8
tick,0x7ffe67f8feb4,137730467,0,0x0,8
tick,0x7ffe67f8feb4,137746546,0,0x0,8
tick,0x7ffe67f8feb4,137762398,0,0x0,8
tick,0x7ffe67f8feb4,137777651,0,0x0,8
tick,0x7ffe67f8feb4,137792955,0,0x0,8
tick,0x7ffe67f8feb4,137808336,0,0x0,8
tick,0x7ffe67f8feb4,137823682,0,0x0,8
tick,0x7ffe67f8feb4,137839069,0,0x0,8
tick,0x7ffe67f8feb4,137854318,0,0x0,8
tick,0x7ffe67f8feb4,137869682,0,0x0,8
tick,0x7ffe67f8feb4,137885016,0,0x0,8
tick,0x7ffe67f8feb4,137900773,0,0x0,8
tick,0x7ffe67f8feb4,137916729,0,0x0,8
tick,0x7ffe67f8feb4,137932518,0,0x0,8
tick,0x7ffe67f8feb4,137948101,0,0x0,8
tick,0x7ffe67f8feb4,137964236,0,0x0,8
tick,0x7ffe67f8feb4,137980076,0,0x0,8
tick,0x7ffe67f8feb4,137994877,0,0x0,8
tick,0x7ffe67f8feb4,138010887,0,0x0,8
tick,0x7ffe67f8feb4,138025930,0,0x0,8
tick,0x7ffe67f8feb4,138041898,0,0x0,8
tick,0x7ffe67f8feb4,138057888,0,0x0,8
tick,0x7ffe67f8feb4,138073944,0,0x0,8
tick,0x7ffe67f8feb4,138089920,0,0x0,8
tick,0x7ffe67f8feb4,138106166,0,0x0,8
tick,0x7ffe67f8feb4,138121791,0,0x0,8
tick,0x7ffe67f8feb4,138137927,0,0x0,8
tick,0x7ffe67f8feb4,138152947,0,0x0,8
tick,0x7ffe67f8feb4,138168989,0,0x0,8
tick,0x7ffe67f8feb4,138184363,0,0x0,8
tick,0x7ffe67f8feb4,138200379,0,0x0,8
tick,0x7ffe67f8feb4,138216063,0,0x0,8
tick,0x7ffe67f8feb4,138231840,0,0x0,8
tick,0x7ffe67f8feb4,138247699,0,0x0,8
tick,0x7ffe67f8feb4,138263254,0,0x0,8
tick,0x7ffe67f8feb4,138279490,0,0x0,8
tick,0x7ffe67f8feb4,138295565,0,0x0,8
tick,0x7ffe67f8feb4,138311870,0,0x0,8
tick,0x7ffe67f8feb4,138327341,0,0x0,8
tick,0x7ffe67f8feb4,138342751,0,0x0,8
tick,0x7ffe67f8feb4,138358005,0,0x0,8
tick,0x7ffe67f8feb4,138373629,0,0x0,8
tick,0x7ffe67f8feb4,138389681,0,0x0,8
tick,0x7ffe67f8feb4,138405487,0,0x0,8
tick,0x7ffe67f8feb4,138420999,0,0x0,8
tick,0x7ffe67f8feb4,138435913,0,0x0,8
tick,0x7ffe67f8feb4,138452034,0,0x0,8
tick,0x7ffe67f8feb4,138466923,0,0x0,8
tick,0x7ffe67f8feb4,138482822,0,0x0,8
tick,0x7ffe67f8feb4,138498665,0,0x0,8
tick,0x7ffe67f8feb4,138514186,0,0x0,8
tick,0x7ffe67f8feb4,138529619,0,0x0,8
tick,0x7ffe67f8feb4,138544804,0,0x0,8
tick,0x7ffe67f8feb4,138560826,0,0x0,8
tick,0x7ffe67f8feb4,138576835,0,0x0,8
tick,0x7ffe67f8feb4,138591833,0,0x0,8
tick,0x7ffe67f8feb4,138607829,0,0x0,8
tick,0x7ffe67f8feb4,138623471,0,0x0,8
tick,0x7ffe67f8feb4,138639492,0,0x0,8
tick,0x7ffe67f8feb4,138655522,0,0x0,8
tick,0x7ffe67f8feb4,138670847,0,0x0,8
tick,0x7ffe67f8feb4,138685742,0,0x0,8
tick,0x7ffe67f8feb4,138700560,0,0x0,8
tick,0x7ffe67f8feb4,138716038,0,0x0,8
tick,0x7ffe67f8feb4,138731821,0,0x0,8
tick,0x7ffe67f8feb4,138747798,0,0x0,8
tick,0x7ffe67f8feb4,138763808,0,0x0,8
tick,0x7ffe67f8feb4,138779847,0,0x0,8
tick,0x7ffe67f8feb4,138795912,0,0x0,8
tick,0x7ffe67f8feb4,138811349,0,0x0,8
tick,0x7ffe67f8feb4,138826581,0,0x0,8
tick,0x7ffe67f8feb4,138842073,0,0x0,8
tick,0x7ffe67f8feb4,138858132,0,0x0,8
tick,0x7ffe67f8feb4,138873710,0,0x0,8
tick,0x7ffe67f8feb4,138889457,0,0x0,8
tick,0x7ffe67f8feb4,138905120,0,0x0,8
tick,0x7ffe67f8feb4,138920903,0,0x0,8
tick,0x7ffe67f8feb4,138936702,0,0x0,8
tick,0x7ffe67f8feb4,138951988,0,0x0,8
tick,0x7ffe67f8feb4,138967663,0,0x0,8
tick,0x7ffe67f8feb4,138983686,0,0x0,8
tick,0x7ffe67f8feb4,138998682,0,0x0,8
tick,0x7ffe67f8feb4,139014672,0,0x0,8
tick,0x7ffe67f8feb4,139030701,0,0x0,8
tick,0x7ffe67f8feb4,139046668,0,0x0,8
tick,0x7ffe67f8feb4,139062488,0,0x0,8
tick,0x7ffe67f8feb4,139077703,0,0x0,8
tick,0x7ffe67f8feb4,139093614,0,0x0,8
tick,0x7ffe67f8feb4,139108737,0,0x0,8
tick,0x7ffe67f8feb4,139124709,0,0x0,8
tick,0x7ffe67f8feb4,139140646,0,0x0,8
tick,0x7ffe67f8feb4,139156021,0,0x0,8
tick,0x7ffe67f8feb4,139171677,0,0x0,8
tick,0x7ffe67f8feb4,139187770,0,0x0,8
tick,0x7ffe67f8feb4,139203700,0,0x0,8
tick,0x7ffe67f8feb4,139219748,0,0x0,8
tick,0x7ffe67f8feb4,139235778,0,0x0,8
tick,0x7ffe67f8feb4,139251747,0,0x0,8
tick,0x7ffe67f8feb4,139267744,0,0x0,8
tick,0x7ffe67f8feb4,139283773,0,0x0,8
tick,0x7ffe67f8feb4,139299459,0,0x0,8
tick,0x7ffe67f8feb4,139315310,0,0x0,8
tick,0x7ffe67f8feb4,139330764,0,0x0,8
tick,0x7ffe67f8feb4,139345752,0,0x0,8
tick,0x7ffe67f8feb4,139361240,0,0x0,8
tick,0x7ffe67f8feb4,139376723,0,0x0,8
tick,0x7ffe67f8feb4,139392758,0,0x0,8
tick,0x7ffe67f8feb4,139408016,0,0x0,8
tick,0x7ffe67f8feb4,139424034,0,0x0,8
tick,0x7ffe67f8feb4,139439151,0,0x0,8
tick,0x7ffe67f8feb4,139454338,0,0x0,8
tick,0x7ffe67f8feb4,139469505,0,0x0,8
tick,0x7ffe67f8feb4,139485560,0,0x0,8
tick,0x7ffe67f8feb4,139500558,0,0x0,8
tick,0x7ffe67f8feb4,139515754,0,0x0,8
tick,0x7ffe67f8feb4,139531423,0,0x0,8
tick,0x7ffe67f8feb4,139546373,0,0x0,8
tick,0x7ffe67f8feb4,139561432,0,0x0,8
tick,0x7ffe67f8feb4,139577445,0,0x0,8
tick,0x7ffe67f8feb4,139593470,0,0x0,8
tick,0x7ffe67f8feb4,139608860,0,0x0,8
tick,0x7ffe67f8feb4,139624936,0,0x0,8
tick,0x7ffe67f8feb4,139640082,0,0x0,8
tick,0x7ffe67f8feb4,139655344,0,0x0,8
tick,0x7ffe67f8feb4,139671134,0,0x0,8
tick,0x7ffe67f8feb4,139686814,0,0x0,8
tick,0x7ffe67f8feb4,139702517,0,0x0,8
tick,0x7ffe67f8feb4,139718159,0,0x0,8
tick,0x7ffe67f8feb4,139733217,0,0x0,8
tick,0x7ffe67f8feb4,139749294,0,0x0,8
tick,0x7ffe67f8feb4,139765114,0,0x0,8
tick,0x7ffe67f8feb4,139780317,0,0x0,8
tick,0x7ffe67f8feb4,139795856,0,0x0,8
tick,0x7ffe67f8feb4,139811309,0,0x0,8
tick,0x7ffe67f8feb4,139827321,0,0x0,8
tick,0x7ffe67f8feb4,139843122,0,0x0,8
tick,0x7ffe67f8feb4,139858097,0,0x0,8
tick,0x7ffe67f8feb4,139873254,0,0x0,8
tick,0x7ffe67f8feb4,139888838,0,0x0,8
tick,0x7ffe67f8feb4,139904019,0,0x0,8
tick,0x7ffe67f8feb4,139920027,0,0x0,8
tick,0x7ffe67f8feb4,139936021,0,0x0,8
tick,0x7ffe67f8feb4,139951712,0,0x0,8
tick,0x7ffe67f8feb4,139966859,0,0x0,8
tick,0x7ffe67f8feb4,139982308,0,0x0,8
tick,0x7ffe67f8feb4,139998321,0,0x0,8
tick,0x7ffe67f8feb4,140014247,0,0x0,8
tick,0x7ffe67f8feb4,140030254,0,0x0,8
tick,0x7ffe67f8feb4,140046262,0,0x0,8
tick,0x7ffe67f8feb4,140062266,0,0x0,8
tick,0x7ffe67f8feb4,140078253,0,0x0,8
tick,0x7ffe67f8feb4,140094272,0,0x0,8
tick,0x7ffe67f8feb4,140110287,0,0x0,8
tick,0x7ffe67f8feb4,140125454,0,0x0,8
tick,0x7ffe67f8feb4,140141316,0,0x0,8
tick,0x7ffe67f8feb4,140156929,0,0x0,8
tick,0x7ffe67f8feb4,140172419,0,0x0,8
tick,0x7ffe67f8feb4,140188505,0,0x0,8
tick,0x7ffe67f8feb4,140204433,0,0x0,8
tick,0x7ffe67f8feb4,140220285,0,0x0,8
tick,0x7ffe67f8feb4,140236324,0,0x0,8
tick,0x7ffe67f8feb4,140252281,0,0x0,8
tick,0x7ffe67f8feb4,140267209,0,0x0,8
tick,0x7ffe67f8feb4,140282690,0,0x0,8
tick,0x7ffe67f8feb4,140298260,0,0x0,8
tick,0x7ffe67f8feb4,140313026,0,0x0,8
tick,0x7ffe67f8feb4,140328245,0,0x0,8
tick,0x7ffe67f8feb4,140343840,0,0x0,8
tick,0x7ffe67f8feb4,140359472,0,0x0,8
tick,0x7ffe67f8feb4,140374969,0,0x0,8
tick,0x7ffe67f8feb4,140390574,0,0x0,8
tick,0x7ffe67f8feb4,140405911,0,0x0,8
tick,0x7ffe67f8feb4,140421106,0,0x0,8
tick,0x7ffe67f8feb4,140436631,0,0x0,8
tick,0x7ffe67f8feb4,140452602,0,0x0,8
tick,0x7ffe67f8feb4,140468548,0,0x0,8
tick,0x7ffe67f8feb4,140484190,0,0x0,8
tick,0x7ffe67f8feb4,140499591,0,0x0,8
tick,0x7ffe67f8feb4,140514991,0,0x0,8
tick,0x7ffe67f8feb4,140530185,0,0x0,8
tick,0x7ffe67f8feb4,140545056,0,0x0,8
tick,0x7ffe67f8feb4,140560164,0,0x0,8
tick,0x7ffe67f8feb4,140576171,0,0x0,8
tick,0x7ffe67f8feb4,140592195,0,0x0,8
tick,0x7ffe67f8feb4,140608181,0,0x0,8
tick,0x7ffe67f8feb4,140624242,0,0x0,8
tick,0x7ffe67f8feb4,140639527,0,0x0,8
tick,0x7ffe67f8feb4,140655687,0,0x0,8
tick,0x7ffe67f8feb4,140671496,0,0x0,8
tick,0x7ffe67f8feb4,140686974,0,0x0,8
tick,0x7ffe67f8feb4,140702868,0,0x0,8
tick,0x7ffe67f8feb4,140718075,0,0x0,8
tick,0x7ffe67f8feb4,140734156,0,0x0,8
tick,0x7ffe67f8feb4,140749158,0,0x0,8
tick,0x7ffe67f8feb4,140765465,0,0x0,8
tick,0x7ffe67f8feb4,140781185,0,0x0,8
tick,0x7ffe67f8feb4,140796520,0,0x0,8
tick,0x7ffe67f8feb4,140811528,0,0x0,8
tick,0x7ffe67f8feb4,140827010,0,0x0,8
tick,0x7ffe67f8feb4,140842347,0,0x0,8
tick,0x7ffe67f8feb4,140857483,0,0x0,8
tick,0x7ffe67f8feb4,140872700,0,0x0,8
tick,0x7ffe67f8feb4,140888499,0,0x0,8
tick,0x7ffe67f8feb4,140904087,0,0x0,8
tick,0x7ffe67f8feb4,140920066,0,0x0,8
tick,0x7ffe67f8feb4,140936175,0,0x0,8
tick,0x7ffe67f8feb4,140951746,0,0x0,8
tick,0x7ffe67f8feb4,140967006,0,0x0,8
tick,0x7ffe67f8feb4,140982989,0,0x0,8
tick,0x7ffe67f8feb4,140998467,0,0x0,8
tick,0x7ffe67f8feb4,141014528,0,0x0,8
tick,0x7ffe67f8feb4,141030477,0,0x0,8
tick,0x7ffe67f8feb4,141046492,0,0x0,8
tick,0x7ffe67f8feb4,141062453,0,0x0,8
tick,0x7ffe67f8feb4,141077944,0,0x0,8
tick,0x7ffe67f8feb4,141093348,0,0x0,8
tick,0x7ffe67f8feb4,141109246,0,0x0,8
tick,0x7ffe67f8feb4,141124653,0,0x0,8
tick,0x7ffe67f8feb4,141140228,0,0x0,8
tick,0x7ffe67f8feb4,141155916,0,0x0,8
tick,0x7ffe67f8feb4,141171900,0,0x0,8
tick,0x7ffe67f8feb4,141187793,0,0x0,8
tick,0x7ffe67f8feb4,141203677,0,0x0,8
tick,0x7ffe67f8feb4,141219690,0,0x0,8
tick,0x7ffe67f8feb4,141235621,0,0x0,8
tick,0x7ffe67f8feb4,141250983,0,0x0,8
tick,0x7ffe67f8feb4,141266425,0,0x0,8
tick,0x7ffe67f8feb4,141282025,0,0x0,8
tick,0x7ffe67f8feb4,141297224,0,0x0,8
tick,0x7ffe67f8feb4,141312920,0,0x0,8
tick,0x7ffe67f8feb4,141328080,0,0x0,8
tick,0x7ffe67f8feb4,141369746,0,0x0,8
tick,0x7ffe67f8feb4,141378330,0,0x0,8
tick,0x7ffe67f8feb4,141392124,0,0x0,8
tick,0x7ffe67f8feb4,141408497,0,0x0,8
tick,0x7ffe67f8feb4,141424063,0,0x0,8
tick,0x7ffe67f8feb4,141440940,0,0x0,8
tick,0x7ffe67f8feb4,141459016,0,0x0,8
tick,0x7ffe67f8feb4,141472099,0,0x0,8
tick,0x7ffe67f8feb4,141488217,0,0x0,8
tick,0x7ffe67f8feb4,141504265,0,0x0,8
tick,0x7ffe67f8feb4,141520198,0,0x0,8
tick,0x7ffe67f8feb4,141538928,0,0x0,8
tick,0x7ffe67f8feb4,141557575,0,0x0,8
tick,0x7ffe67f8feb4,141568054,0,0x0,8
tick,0x7ffe67f8feb4,141584421,0,0x0,8
tick,0x7ffe67f8feb4,141600380,0,0x0,8
tick,0x7ffe67f8feb4,141645321,0,0x0,8
tick,0x7ffe67f8feb4,141650115,0,0x0,8
tick,0x7ffe67f8feb4,141663081,0,0x0,8
tick,0x7ffe67f8feb4,141682498,0,0x0,8
tick,0x7ffe67f8feb4,141695464,0,0x0,8
tick,0x7ffe67f8feb4,141711079,0,0x0,8
tick,0x7ffe67f8feb4,141727072,0,0x0,8
tick,0x7ffe67f8feb4,141743211,0,0x0,8
tick,0x7ffe67f8feb4,141759154,0,0x0,8
tick,0x7ffe67f8feb4,141775063,0,0x0,8
tick,0x7ffe67f8feb4,141791079,0,0x0,8
tick,0x7ffe67f8feb4,141807125,0,0x0,8
tick,0x7ffe67f8feb4,141823123,0,0x0,8
tick,0x7ffe67f8feb4,141839143,0,0x0,8
tick,0x7ffe67f8feb4,141855329,0,0x0,8
tick,0x7ffe67f8feb4,141871166,0,0x0,8
tick,0x7ffe67f8feb4,141887333,0,0x0,8
tick,0x7ffe67f8feb4,141903301,0,0x0,8
tick,0x7ffe67f8feb4,141919279,0,0x0,8
tick,0x7ffe67f8feb4,141935185,0,0x0,8
tick,0x7ffe67f8feb4,141951154,0,0x0,8
tick,0x7ffe67f8feb4,141966511,0,0x0,8
tick,0x7ffe67f8feb4,141982507,0,0x0,8
tick,0x7ffe67f8feb4,141998171,0,0x0,8
tick,0x7ffe67f8feb4,142013746,0,0x0,8
tick,0x7ffe67f8feb4,142029802,0,0x0,8
tick,0x7ffe67f8feb4,142045737,0,0x0,8
tick,0x7ffe67f8feb4,142061772,0,0x0,8
tick,0x7ffe67f8feb4,142077765,0,0x0,8
tick,0x7ffe67f8feb4,142092935,0,0x0,8
tick,0x7ffe67f8feb4,142108919,0,0x0,8
tick,0x7ffe67f8feb4,142124006,0,0x0,8
tick,0x7ffe67f8feb4,142139942,0,0x0,8
tick,0x7ffe67f8feb4,142155937,0,0x0,8
tick,0x7ffe67f8feb4,142171977,0,0x0,8
tick,0x7ffe67f8feb4,142187050,0,0x0,8
tick,0x7ffe67f8feb4,142202963,0,0x0,8
tick,0x7ffe67f8feb4,142218941,0,0x0,8
tick,0x7ffe67f8feb4,142234588,0,0x0,8
tick,0x7ffe67f8feb4,142250432,0,0x0,8
tick,0x7ffe67f8feb4,142265983,0,0x0,8
tick,0x7ffe67f8feb4,142281992,0,0x0,8
tick,0x7ffe67f8feb4,142297962,0,0x0,8
tick,0x7ffe67f8feb4,142313381,0,0x0,8
tick,0x7ffe67f8feb4,142329014,0,0x0,8
tick,0x7ffe67f8feb4,142344999,0,0x0,8
tick,0x7ffe67f8feb4,142359988,0,0x0,8
tick,0x7ffe67f8feb4,142375829,0,0x0,8
tick,0x7ffe67f8feb4,142391017,0,0x0,8
tick,0x7ffe67f8feb4,142407096,0,0x0,8
tick,0x7ffe67f8feb4,142423077,0,0x0,8
tick,0x7ffe67f8feb4,142439099,0,0x0,8
tick,0x7ffe67f8feb4,142455293,0,0x0,8
tick,0x7ffe67f8feb4,142471042,0,0x0,8
tick,0x7ffe67f8feb4,142486557,0,0x0,8
tick,0x7ffe67f8feb4,142501613,0,0x0,8
tick,0x7ffe67f8feb4,142517014,0,0x0,8
tick,0x7ffe67f8feb4,142532133,0,0x0,8
tick,0x7ffe67f8feb4,142547964,0,0x0,8
tick,0x7ffe67f8feb4,142563966,0,0x0,8
tick,0x7ffe67f8feb4,142579994,0,0x0,8
tick,0x7ffe67f8feb4,142595989,0,0x0,8
tick,0x7ffe67f8feb4,142612016,0,0x0,8
tick,0x7ffe67f8feb4,142627995,0,0x0,8
tick,0x7ffe67f8feb4,142643742,0,0x0,8
tick,0x7ffe67f8feb4,142659126,0,0x0,8
tick,0x7ffe67f8feb4,142674665,0,0x0,8
tick,0x7ffe67f8feb4,142689991,0,0x0,8
tick,0x7ffe67f8feb4,142705906,0,0x0,8
tick,0x7ffe67f8feb4,142721205,0,0x0,8
tick,0x7ffe67f8feb4,142736723,0,0x0,8
tick,0x7ffe67f8feb4,142752745,0,0x0,8
tick,0x7ffe67f8feb4,142767596,0,0x0,8
tick,0x7ffe67f8feb4,142783278,0,0x0,8
tick,0x7ffe67f8feb4,142799210,0,0x0,8
tick,0x7ffe67f8feb4,142814764,0,0x0,8
tick,0x7ffe67f8feb4,142830573,0,0x0,8
tick,0x7ffe67f8feb4,142846450,0,0x0,8
tick,0x7ffe67f8feb4,142862269,0,0x0,8
tick,0x7ffe67f8feb4,142877734,0,0x0,8
tick,0x7ffe67f8feb4,142893298,0,0x0,8
tick,0x7ffe67f8feb4,142908876,0,0x0,8
tick,0x7ffe67f8feb4,142924644,0,0x0,8
tick,0x7ffe67f8feb4,142939900,0,0x0,8
tick,0x7ffe67f8feb4,142955125,0,0x0,8
tick,0x7ffe67f8feb4,142971169,0,0x0,8
tick,0x7ffe67f8feb4,142986705,0,0x0,8
tick,0x7ffe67f8feb4,143002161,0,0x0,8
tick,0x7ffe67f8feb4,143017405,0,0x0,8
tick,0x7ffe67f8feb4,143032337,0,0x0,8
tick,0x7ffe67f8feb4,143047317,0,0x0,8
tick,0x7ffe67f8feb4,143063315,0,0x0,8
tick,0x7ffe67f8feb4,143078615,0,0x0,8
tick,0x7ffe67f8feb4,143094215,0,0x0,8
tick,0x7ffe67f8feb4,143110008,0,0x0,8
tick,0x7ffe67f8feb4,143125565,0,0x0,8
tick,0x7ffe67f8feb4,143141471,0,0x0,8
tick,0x7ffe67f8feb4,143157492,0,0x0,8
tick,0x7ffe67f8feb4,143172827,0,0x0,8
tick,0x7ffe67f8feb4,143188414,0,0x0,8
tick,0x7ffe67f8feb4,143204458,0,0x0,8
tick,0x7ffe67f8feb4,143220656,0,0x0,8
tick,0x7ffe67f8feb4,143235697,0,0x0,8
tick,0x7ffe67f8feb4,143250712,0,0x0,8
tick,0x7ffe67f8feb4,143266998,0,0x0,8
tick,0x7ffe67f8feb4,143282719,0,0x0,8
tick,0x7ffe67f8feb4,143297836,0,0x0,8
tick,0x7ffe67f8feb4,143313380,0,0x0,8
tick,0x7ffe67f8feb4,143328371,0,0x0,8
tick,0x7ffe67f8feb4,143343537,0,0x0,8
tick,0x7ffe67f8feb4,143358380,0,0x0,8
tick,0x7ffe67f8feb4,143373593,0,0x0,8
tick,0x7ffe67f8feb4,143389063,0,0x0,8
tick,0x7ffe67f8feb4,143404513,0,0x0,8
tick,0x7ffe67f8feb4,143419812,0,0x0,8
tick,0x7ffe67f8feb4,143436222,0,0x0,8
tick,0x7ffe67f8feb4,143452213,0,0x0,8
tick,0x7ffe67f8feb4,143467457,0,0x0,8
tick,0x7ffe67f8feb4,143483292,0,0x0,8
tick,0x7ffe67f8feb4,143499246,0,0x0,8
tick,0x7ffe67f8feb4,143515309,0,0x0,8
tick,0x7ffe67f8feb4,143531135,0,0x0,8
tick,0x7ffe67f8feb4,143546365,0,0x0,8
tick,0x7ffe67f8feb4,143562429,0,0x0,8
tick,0x7ffe67f8feb4,143578418,0,0x0,8
tick,0x7ffe67f8feb4,143594369,0,0x0,8
tick,0x7ffe67f8feb4,143608765,0,0x0,8
tick,0x7ffe67f8feb4,143624472,0,0x0,8
tick,0x7ffe67f8feb4,143640436,0,0x0,8
tick,0x7ffe67f8feb4,143656401,0,0x0,8
tick,0x7ffe67f8feb4,143671667,0,0x0,8
tick,0x7ffe67f8feb4,143687177,0,0x0,8
tick,0x7ffe67f8feb4,143702640,0,0x0,8
tick,0x7ffe67f8feb4,143718649,0,0x0,8
tick,0x7ffe67f8feb4,143733845,0,0x0,8
tick,0x7ffe67f8feb4,143749144,0,0x0,8
tick,0x7ffe67f8feb4,143764660,0,0x0,8
tick,0x7ffe67f8feb4,143780022,0,0x0,8
tick,0x7ffe67f8feb4,143795439,0,0x0,8
tick,0x7ffe67f8feb4,143810629,0,0x0,8
tick,0x7ffe67f8feb4,143825936,0,0x0,8
tick,0x7ffe67f8feb4,143841532,0,0x0,8
tick,0x7ffe67f8feb4,143856925,0,0x0,8
tick,0x7ffe67f8feb4,143872731,0,0x0,8
tick,0x7ffe67f8feb4,143888157,0,0x0,8
tick,0x7ffe67f8feb4,143904099,0,0x0,8
tick,0x7ffe67f8feb4,143919661,0,0x0,8
tick,0x7ffe67f8feb4,143935941,0,0x0,8
tick,0x7ffe67f8feb4,143951387,0,0x0,8
tick,0x7ffe67f8feb4,143967375,0,0x0,8
tick,0x7ffe67f8feb4,143982704,0,0x0,8
tick,0x7ffe67f8feb4,143997932,0,0x0,8
tick,0x7ffe67f8feb4,144013006,0,0x0,8
tick,0x7ffe67f8feb4,144028347,0,0x0,8
tick,0x7ffe67f8feb4,144044279,0,0x0,8
tick,0x7ffe67f8feb4,144060315,0,0x0,8
tick,0x7ffe67f8feb4,144076315,0,0x0,8
tick,0x7ffe67f8feb4,144092305,0,0x0,8
tick,0x7ffe67f8feb4,144108363,0,0x0,8
tick,0x7ffe67f8feb4,144123536,0,0x0,8
tick,0x7ffe67f8feb4,144139413,0,0x0,8
tick,0x7ffe67f8feb4,144154494,0,0x0,8
tick,0x7ffe67f8feb4,144169612,0,0x0,8
tick,0x7ffe67f8feb4,144185097,0,0x0,8
tick,0x7ffe67f8feb4,144200593,0,0x0,8
tick,0x7ffe67f8feb4,144215957,0,0x0,8
tick,0x7ffe67f8feb4,144231347,0,0x0,8
tick,0x7ffe67f8feb4,144246421,0,0x0,8
tick,0x7ffe67f8feb4,144262103,0,0x0,8
tick,0x7ffe67f8feb4,144276731,0,0x0,8
tick,0x7ffe67f8feb4,144292648,0,0x0,8
tick,0x7ffe67f8feb4,144308144,0,0x0,8
tick,0x7ffe67f8feb4,144323824,0,0x0,8
tick,0x7ffe67f8feb4,144339612,0,0x0,8
tick,0x7ffe67f8feb4,144355143,0,0x0,8
tick,0x7ffe67f8feb4,144370393,0,0x0,8
tick,0x7ffe67f8feb4,144385784,0,0x0,8
tick,0x7ffe67f8feb4,144401480,0,0x0,8
tick,0x7ffe67f8feb4,144416944,0,0x0,8
tick,0x7ffe67f8feb4,144432941,0,0x0,8
tick,0x7ffe67f8feb4,144449006,0,0x0,8
tick,0x7ffe67f8feb4,144464050,0,0x0,8
tick,0x7ffe67f8feb4,144480059,0,0x0,8
tick,0x7ffe67f8feb4,144495591,0,0x0,8
tick,0x7ffe67f8feb4,144511705,0,0x0,8
tick,0x7ffe67f8feb4,144527593,0,0x0,8
tick,0x7ffe67f8feb4,144542764,0,0x0,8
tick,0x7ffe67f8feb4,144558784,0,0x0,8
tick,0x7ffe67f8feb4,144574781,0,0x0,8
tick,0x7ffe67f8feb4,144590555,0,0x0,8
tick,0x7ffe67f8feb4,144606799,0,0x0,8
tick,0x7ffe67f8feb4,144622645,0,0x0,8
tick,0x7ffe67f8feb4,144638732,0,0x0,8
tick,0x7ffe67f8feb4,144653616,0,0x0,8
tick,0x7ffe67f8feb4,144669583,0,0x0,8
tick,0x7ffe67f8feb4,144685630,0,0x0,8
tick,0x7ffe67f8feb4,144701650,0,0x0,8
tick,0x7ffe67f8feb4,144717658,0,0x0,8
tick,0x7ffe67f8feb4,144733068,0,0x0,8
tick,0x7ffe67f8feb4,144749099,0,0x0,8
tick,0x7ffe67f8feb4,144764585,0,0x0,8
tick,0x7ffe67f8feb4,144779782,0,0x0,8
tick,0x7ffe67f8feb4,144795236,0,0x0,8
tick,0x7ffe67f8feb4,144810814,0,0x0,8
tick,0x7ffe67f8feb4,144826535,0,0x0,8
tick,0x7ffe67f8feb4,144842556,0,0x0,8
tick,0x7ffe67f8feb4,144858586,0,0x0,8
tick,0x7ffe67f8feb4,144874561,0,0x0,8
tick,0x7ffe67f8feb4,144890732,0,0x0,8
tick,0x7ffe67f8feb4,144906667,0,0x0,8
tick,0x7ffe67f8feb4,144922657,0,0x0,8
tick,0x7ffe67f8feb4,144938121,0,0x0,8
tick,0x7ffe67f8feb4,144953907,0,0x0,8
tick,0x7ffe67f8feb4,144969207,0,0x0,8
tick,0x7ffe67f8feb4,144984769,0,0x0,8
tick,0x7ffe67f8feb4,145000795,0,0x0,8
tick,0x7ffe67f8feb4,145016812,0,0x0,8
tick,0x7ffe67f8feb4,145032108,0,0x0,8
tick,0x7ffe67f8feb4,145048043,0,0x0,8
tick,0x7ffe67f8feb4,145064045,0,0x0,8
tick,0x7ffe67f8feb4,145080042,0,0x0,8
tick,0x7ffe67f8feb4,145096074,0,0x0,8
tick,0x7ffe67f8feb4,145111662,0,0x0,8
tick,0x7ffe67f8feb4,145127662,0,0x0,8
tick,0x7ffe67f8feb4,145143570,0,0x0,8
tick,0x7ffe67f8feb4,145159161,0,0x0,8
tick,0x7ffe67f8feb4,145175145,0,0x0,8
tick,0x7ffe67f8feb4,145190647,0,0x0,8
tick,0x7ffe67f8feb4,145206624,0,0x0,8
tick,0x7ffe67f8feb4,145222506,0,0x0,8
tick,0x7ffe67f8feb4,145237744,0,0x0,8
tick,0x7ffe67f8feb4,145253209,0,0x0,8
tick,0x7ffe67f8feb4,145269346,0,0x0,8
tick,0x7ffe67f8feb4,145285323,0,0x0,8
tick,0x7ffe67f8feb4,145300850,0,0x0,8
tick,0x7ffe67f8feb4,145316672,0,0x0,8
tick,0x7ffe67f8feb4,145332330,0,0x0,8
tick,0x7ffe67f8feb4,145347793,0,0x0,8
tick,0x7ffe67f8feb4,145362901,0,0x0,8
tick,0x7ffe67f8feb4,145378959,0,0x0,8
tick,0x7ffe67f8feb4,145394390,0,0x0,8
tick,0x7ffe67f8feb4,145409881,0,0x0,8
tick,0x7ffe67f8feb4,145425330,0,0x0,8
tick,0x7ffe67f8feb4,145440993,0,0x0,8
tick,0x7ffe67f8feb4,145457391,0,0x0,8
tick,0x7ffe67f8feb4,145472207,0,0x0,8
tick,0x7ffe67f8feb4,145487460,0,0x0,8
tick,0x7ffe67f8feb4,145503018,0,0x0,8
tick,0x7ffe67f8feb4,145518230,0,0x0,8
tick,0x7ffe67f8feb4,145534226,0,0x0,8
tick,0x7ffe67f8feb4,145550229,0,0x0,8
tick,0x7ffe67f8feb4,145566212,0,0x0,8
tick,0x7ffe67f8feb4,145582242,0,0x0,8
tick,0x7ffe67f8feb4,145598291,0,0x0,8
tick,0x7ffe67f8feb4,145614254,0,0x0,8
tick,0x7ffe67f8feb4,145630291,0,0x0,8
tick,0x7ffe67f8feb4,145645754,0,0x0,8
tick,0x7ffe67f8feb4,145661939,0,0x0,8
tick,0x7ffe67f8feb4,145677743,0,0x0,8
tick,0x7ffe67f8feb4,145692930,0,0x0,8
tick,0x7ffe67f8feb4,145708333,0,0x0,8
tick,0x7ffe67f8feb4,145723686,0,0x0,8
tick,0x7ffe67f8feb4,145739858,0,0x0,8
tick,0x7ffe67f8feb4,145754673,0,0x0,8
tick,0x7ffe67f8feb4,145770675,0,0x0,8
tick,0x7ffe67f8feb4,145786140,0,0x0,8
tick,0x7ffe67f8feb4,145801432,0,0x0,8
tick,0x7ffe67f8feb4,145817245,0,0x0,8
tick,0x7ffe67f8feb4,145832601,0,0x0,8
tick,0x7ffe67f8feb4,145847695,0,0x0,8
tick,0x7ffe67f8feb4,145862794,0,0x0,8
tick,0x7ffe67f8feb4,145877812,0,0x0,8
tick,0x7ffe67f8feb4,145892710,0,0x0,8
tick,0x7ffe67f8feb4,145908678,0,0x0,8
tick,0x7ffe67f8feb4,145924695,0,0x0,8
tick,0x7ffe67f8feb4,145940744,0,0x0,8
tick,0x7ffe67f8feb4,145956758,0,0x0,8
tick,0x7ffe67f8feb4,145972453,0,0x0,8
tick,0x7ffe67f8feb4,145988100,0,0x0,8
tick,0x7ffe67f8feb4,146003887,0,0x0,8
tick,0x7ffe67f8feb4,146019762,0,0x0,8
tick,0x7ffe67f8feb4,146035209,0,0x0,8
tick,0x7ffe67f8feb4,146051419,0,0x0,8
tick,0x7ffe67f8feb4,146067193,0,0x0,8
tick,0x7ffe67f8feb4,146083182,0,0x0,8
tick,0x7ffe67f8feb4,146099169,0,0x0,8
tick,0x7ffe67f8feb4,146114280,0,0x0,8
tick,0x7ffe67f8feb4,146129445,0,0x0,8
tick,0x7ffe67f8feb4,146145252,0,0x0,8
tick,0x7ffe67f8feb4,146161306,0,0x0,8
tick,0x7ffe67f8feb4,146177361,0,0x0,8
tick,0x7ffe67f8feb4,146192689,0,0x0,8
tick,0x7ffe67f8feb4,146208655,0,0x0,8
tick,0x7ffe67f8feb4,146224685,0,0x0,8
tick,0x7ffe67f8feb4,146239806,0,0x0,8
tick,0x7ffe67f8feb4,146255747,0,0x0,8
tick,0x7ffe67f8feb4,146271250,0,0x0,8
tick,0x7ffe67f8feb4,146287059,0,0x0,8
tick,0x7ffe67f8feb4,146302593,0,0x0,8
tick,0x7ffe67f8feb4,146317782,0,0x0,8
tick,0x7ffe67f8feb4,146333517,0,0x0,8
tick,0x7ffe67f8feb4,146349482,0,0x0,8
tick,0x7ffe67f8feb4,146364841,0,0x0,8
tick,0x7ffe67f8feb4,146380065,0,0x0,8
tick,0x7ffe67f8feb4,146396021,0,0x0,8
tick,0x7ffe67f8feb4,146412049,0,0x0,8
tick,0x7ffe67f8feb4,146428042,0,0x0,8
tick,0x7ffe67f8feb4,146444256,0,0x0,8
tick,0x7ffe67f8feb4,146460029,0,0x0,8
tick,0x7ffe67f8feb4,146476035,0,0x0,8
tick,0x7ffe67f8feb4,146492061,0,0x0,8
tick,0x7ffe67f8feb4,146508102,0,0x0,8
tick,0x7ffe67f8feb4,146524226,0,0x0,8
tick,0x7ffe67f8feb4,146540069,0,0x0,8
tick,0x7ffe67f8feb4,146556074,0,0x0,8
tick,0x7ffe67f8feb4,146572095,0,0x0,8
tick,0x7ffe67f8feb4,146588084,0,0x0,8
tick,0x7ffe67f8feb4,146604159,0,0x0,8
tick,0x7ffe67f8feb4,146620105,0,0x0,8
tick,0x7ffe67f8feb4,146636300,0,0x0,8
tick,0x7ffe67f8feb4,146652134,0,0x0,8
tick,0x7ffe67f8feb4,146668311,0,0x0,8
tick,0x7ffe67f8feb4,146684223,0,0x0,8
tick,0x7ffe67f8feb4,146700115,0,0x0,8
tick,0x7ffe67f8feb4,146716548,0,0x0,8
tick,0x7ffe67f8feb4,146732152,0,0x0,8
tick,0x7ffe67f8feb4,146748191,0,0x0,8
tick,0x7ffe67f8feb4,146764140,0,0x0,8
tick,0x7ffe67f8feb4,146780161,0,0x0,8
tick,0x7ffe67f8feb4,146795472,0,0x0,8
tick,0x7ffe67f8feb4,146811472,0,0x0,8
tick,0x7ffe67f8feb4,146827515,0,0x0,8
tick,0x7ffe67f8feb4,146843490,0,0x0,8
tick,0x7ffe67f8feb4,146859562,0,0x0,8
tick,0x7ffe67f8feb4,146875680,0,0x0,8
tick,0x7ffe67f8feb4,146891678,0,0x0,8
tick,0x7ffe67f8feb4,146907681,0,0x0,8
tick,0x7ffe67f8feb4,146923526,0,0x0,8
tick,0x7ffe67f8feb4,146939443,0,0x0,8
tick,0x7ffe67f8feb4,146954463,0,0x0,8
tick,0x7ffe67f8feb4,146970485,0,0x0,8
tick,0x7ffe67f8feb4,146986428,0,0x0,8
tick,0x7ffe67f8feb4,147001567,0,0x0,8
tick,0x7ffe67f8feb4,147017506,0,0x0,8
tick,0x7ffe67f8feb4,147033508,0,0x0,8
tick,0x7ffe67f8feb4,147049523,0,0x0,8
tick,0x7ffe67f8feb4,147065510,0,0x0,8
tick,0x7ffe67f8feb4,147081505,0,0x0,8
tick,0x7ffe67f8feb4,147097521,0,0x0,8
tick,0x7ffe67f8feb4,147113599,0,0x0,8
tick,0x7ffe67f8feb4,147129524,0,0x0,8
tick,0x7ffe67f8feb4,147145209,0,0x0,8
tick,0x7ffe67f8feb4,147160782,0,0x0,8
tick,0x7ffe67f8feb4,147175927,0,0x0,8
tick,0x7ffe67f8feb4,147192046,0,0x0,8
tick,0x7ffe67f8feb4,147208018,0,0x0,8
tick,0x7ffe67f8feb4,147222950,0,0x0,8
tick,0x7ffe67f8feb4,147238928,0,0x0,8
tick,0x7ffe67f8feb4,147254111,0,0x0,8
tick,0x7ffe67f8feb4,147268941,0,0x0,8
tick,0x7ffe67f8feb4,147285084,0,0x0,8
tick,0x7ffe67f8feb4,147300979,0,0x0,8
tick,0x7ffe67f8feb4,147316996,0,0x0,8
tick,0x7ffe67f8feb4,147332166,0,0x0,8
tick,0x7ffe67f8feb4,147347353,0,0x0,8
tick,0x7ffe67f8feb4,147362849,0,0x0,8
tick,0x7ffe67f8feb4,147379175,0,0x0,8
tick,0x7ffe67f8feb4,147394981,0,0x0,8
tick,0x7ffe67f8feb4,147411004,0,0x0,8
tick,0x7ffe67f8feb4,147427013,0,0x0,8
tick,0x7ffe67f8feb4,147442978,0,0x0,8
tick,0x7ffe67f8feb4,147458152,0,0x0,8
tick,0x7ffe67f8feb4,147473187,0,0x0,8
tick,0x7ffe67f8feb4,147488446,0,0x0,8
tick,0x7ffe67f8feb4,147504132,0,0x0,8
tick,0x7ffe67f8feb4,147520436,0,0x0,8
tick,0x7ffe67f8feb4,147535717,0,0x0,8
tick,0x7ffe67f8feb4,147551312,0,0x0,8
tick,0x7ffe67f8feb4,147567285,0,0x0,8
tick,0x7ffe67f8feb4,147583076,0,0x0,8
tick,0x7ffe67f8feb4,147598334,0,0x0,8
tick,0x7ffe67f8feb4,147614415,0,0x0,8
tick,0x7ffe67f8feb4,147629549,0,0x0,8
tick,0x7ffe67f8feb4,147645253,0,0x0,8
tick,0x7ffe67f8feb4,147660790,0,0x0,8
tick,0x7ffe67f8feb4,147675744,0,0x0,8
tick,0x7ffe67f8feb4,147691403,0,0x0,8
tick,0x7ffe67f8feb4,147707196,0,0x0,8
tick,0x7ffe67f8feb4,147722581,0,0x0,8
tick,0x7ffe67f8feb4,147738443,0,0x0,8
tick,0x7ffe67f8feb4,147753732,0,0x0,8
tick,0x7ffe67f8feb4,147769386,0,0x0,8
tick,0x7ffe67f8feb4,147784922,0,0x0,8
tick,0x7ffe67f8feb4,147800398,0,0x0,8
tick,0x7ffe67f8feb4,147815889,0,0x0,8
tick,0x7ffe67f8feb4,147831730,0,0x0,8
tick,0x7ffe67f8feb4,147847416,0,0x0,8
tick,0x7ffe67f8feb4,147862581,0,0x0,8
tick,0x7ffe67f8feb4,147878574,0,0x0,8
tick,0x7ffe67f8feb4,147894570,0,0x0,8
tick,0x7ffe67f8feb4,147909617,0,0x0,8
tick,0x7ffe67f8feb4,147925669,0,0x0,8
tick,0x7ffe67f8feb4,147941588,0,0x0,8
tick,0x7ffe67f8feb4,147957661,0,0x0,8
tick,0x7ffe67f8feb4,147973616,0,0x0,8
tick,0x7ffe67f8feb4,147989693,0,0x0,8
tick,0x7ffe67f8feb4,148005692,0,0x0,8
tick,0x7ffe67f8feb4,148021127,0,0x0,8
tick,0x7ffe67f8feb4,148037164,0,0x0,8
tick,0x7ffe67f8feb4,148052150,0,0x0,8
tick,0x7ffe67f8feb4,148068116,0,0x0,8
tick,0x7ffe67f8feb4,148084116,0,0x0,8
tick,0x7ffe67f8feb4,148100120,0,0x0,8
tick,0x7ffe67f8feb4,148116308,0,0x0,8
tick,0x7ffe67f8feb4,148132622,0,0x0,8
tick,0x7ffe67f8feb4,148148638,0,0x0,8
tick,0x7ffe67f8feb4,148164313,0,0x0,8
tick,0x7ffe67f8feb4,148179114,0,0x0,8
tick,0x7ffe67f8feb4,148195344,0,0x0,8
tick,0x7ffe67f8feb4,148210385,0,0x0,8
tick,0x7ffe67f8feb4,148226377,0,0x0,8
tick,0x7ffe67f8feb4,148242668,0,0x0,8
tick,0x7ffe67f8feb4,148257746,0,0x0,8
tick,0x7ffe67f8feb4,148272802,0,0x0,8
tick,0x7ffe67f8feb4,148288072,0,0x0,8
tick,0x7ffe67f8feb4,148303402,0,0x0,8
tick,0x7ffe67f8feb4,148318882,0,0x0,8
tick,0x7ffe67f8feb4,148335331,0,0x0,8
tick,0x7ffe67f8feb4,148351040,0,0x0,8
tick,0x7ffe67f8feb4,148366733,0,0x0,8
tick,0x7ffe67f8feb4,148382197,0,0x0,8
tick,0x7ffe67f8feb4,148397251,0,0x0,8
tick,0x7ffe67f8feb4,148412585,0,0x0,8
tick,0x7ffe67f8feb4,148428416,0,0x0,8
tick,0x7ffe67f8feb4,148443977,0,0x0,8
tick,0x7ffe67f8feb4,148459253,0,0x0,8
tick,0x7ffe67f8feb4,148474857,0,0x0,8
tick,0x7ffe67f8feb4,148490501,0,0x0,8
tick,0x7ffe67f8feb4,148506466,0,0x0,8
tick,0x7ffe67f8feb4,148521661,0,0x0,8
tick,0x7ffe67f8feb4,148536875,0,0x0,8
tick,0x7ffe67f8feb4,148552181,0,0x0,8
tick,0x7ffe67f8feb4,148567898,0,0x0,8
tick,0x7ffe67f8feb4,148583512,0,0x0,8
tick,0x7ffe67f8feb4,148598662,0,0x0,8
tick,0x7ffe67f8feb4,148614580,0,0x0,8
tick,0x7ffe67f8feb4,148629550,0,0x0,8
tick,0x7ffe67f8feb4,148645196,0,0x0,8
tick,0x7ffe67f8feb4,148660578,0,0x0,8
tick,0x7ffe67f8feb4,148675896,0,0x0,8
tick,0x7ffe67f8feb4,148691452,0,0x0,8
tick,0x7ffe67f8feb4,148707180,0,0x0,8
tick,0x7ffe67f8feb4,148722784,0,0x0,8
tick,0x7ffe67f8feb4,148738170,0,0x0,8
tick,0x7ffe67f8feb4,148753840,0,0x0,8
tick,0x7ffe67f8feb4,148769607,0,0x0,8
tick,0x7ffe67f8feb4,148785336,0,0x0,8
tick,0x7ffe67f8feb4,148800302,0,0x0,8
tick,0x7ffe67f8feb4,148815679,0,0x0,8
tick,0x7ffe67f8feb4,148831561,0,0x0,8
tick,0x7ffe67f8feb4,148847826,0,0x0,8
tick,0x7ffe67f8feb4,148862786,0,0x0,8
tick,0x7ffe67f8feb4,148877562,0,0x0,8
tick,0x7ffe67f8feb4,148893640,0,0x0,8
tick,0x7ffe67f8feb4,148910328,0,0x0,8
tick,0x7ffe67f8feb4,148925174,0,0x0,8
tick,0x7ffe67f8feb4,148940192,0,0x0,8
tick,0x7ffe67f8feb4,148955562,0,0x0,8
tick,0x7ffe67f8feb4,148971559,0,0x0,8
tick,0x7ffe67f8feb4,148987533,0,0x0,8
tick,0x7ffe67f8feb4,149003199,0,0x0,8
tick,0x7ffe67f8feb4,149018192,0,0x0,8
tick,0x7ffe67f8feb4,149033490,0,0x0,8
tick,0x7ffe67f8feb4,149048483,0,0x0,8
tick,0x7ffe67f8feb4,149064504,0,0x0,8
tick,0x7ffe67f8feb4,149080529,0,0x0,8
tick,0x7ffe67f8feb4,149096492,0,0x0,8
tick,0x7ffe67f8feb4,149112487,0,0x0,8
tick,0x7ffe67f8feb4,149127517,0,0x0,8
tick,0x7ffe67f8feb4,149144509,0,0x0,8
tick,0x7ffe67f8feb4,149159524,0,0x0,8
tick,0x7ffe67f8feb4,149174633,0,0x0,8
tick,0x7ffe67f8feb4,149190622,0,0x0,8
tick,0x7ffe67f8feb4,149205871,0,0x0,8
tick,0x7ffe67f8feb4,149221849,0,0x0,8
tick,0x7ffe67f8feb4,149237861,0,0x0,8
tick,0x7ffe67f8feb4,149252822,0,0x0,8
tick,0x7ffe67f8feb4,149268877,0,0x0,8
tick,0x7ffe67f8feb4,149284926,0,0x0,8
tick,0x7ffe67f8feb4,149300898,0,0x0,8
tick,0x7ffe67f8feb4,149315933,0,0x0,8
tick,0x7ffe67f8feb4,149331888,0,0x0,8
tick,0x7ffe67f8feb4,149347887,0,0x0,8
tick,0x7ffe67f8feb4,149363170,0,0x0,8
tick,0x7ffe67f8feb4,149378793,0,0x0,8
tick,0x7ffe67f8feb4,149394499,0,0x0,8
tick,0x7ffe67f8feb4,149410184,0,0x0,8
tick,0x7ffe67f8feb4,149425016,0,0x0,8
tick,0x7ffe67f8feb4,149439935,0,0x0,8
tick,0x7ffe67f8feb4,149455434,0,0x0,8
tick,0x7ffe67f8feb4,149470491,0,0x0,8
tick,0x7ffe67f8feb4,149486944,0,0x0,8
tick,0x7ffe67f8feb4,149502732,0,0x0,8
tick,0x7ffe67f8feb4,149518705,0,0x0,8
tick,0x7ffe67f8feb4,149534419,0,0x0,8
tick,0x7ffe67f8feb4,149549420,0,0x0,8
tick,0x7ffe67f8feb4,149565540,0,0x0,8
tick,0x7ffe67f8feb4,149581086,0,0x0,8
tick,0x7ffe67f8feb4,149596809,0,0x0,8
tick,0x7ffe67f8feb4,149612817,0,0x0,8
tick,0x7ffe67f8feb4,149628836,0,0x0,8
tick,0x7ffe67f8feb4,149644794,0,0x0,8
tick,0x7ffe67f8feb4,149659859,0,0x0,8
tick,0x7ffe67f8feb4,149674804,0,0x0,8
tick,0x7ffe67f8feb4,149689992,0,0x0,8
tick,0x7ffe67f8feb4,149706028,0,0x0,8
tick,0x7ffe67f8feb4,149722000,0,0x0,8
tick,0x7ffe67f8feb4,149738020,0,0x0,8
tick,0x7ffe67f8feb4,149754020,0,0x0,8
tick,0x7ffe67f8feb4,149770027,0,0x0,8
tick,0x7ffe67f8feb4,149785171,0,0x0,8
tick,0x7ffe67f8feb4,149800336,0,0x0,8
tick,0x7ffe67f8feb4,149816231,0,0x0,8
tick,0x7ffe67f8feb4,149832292,0,0x0,8
tick,0x7ffe67f8feb4,149848286,0,0x0,8
tick,0x7ffe67f8feb4,149863914,0,0x0,8
tick,0x7ffe67f8feb4,149879379,0,0x0,8
tick,0x7ffe67f8feb4,149895369,0,0x0,8
tick,0x7ffe67f8feb4,149911514,0,0x0,8
tick,0x7ffe67f8feb4,149927434,0,0x0,8
tick,0x7ffe67f8feb4,149943188,0,0x0,8
tick,0x7ffe67f8feb4,149959202,0,0x0,8
tick,0x7ffe67f8feb4,149974392,0,0x0,8
tick,0x7ffe67f8feb4,149990432,0,0x0,8
tick,0x7ffe67f8feb4,150005578,0,0x0,8
tick,0x7ffe67f8feb4,150021307,0,0x0,8
tick,0x7ffe67f8feb4,150037400,0,0x0,8
tick,0x7ffe67f8feb4,150053395,0,0x0,8
tick,0x7ffe67f8feb4,150069391,0,0x0,8
tick,0x7ffe67f8feb4,150085397,0,0x0,8
tick,0x7ffe67f8feb4,150101387,0,0x0,8
tick,0x7ffe67f8feb4,150117393,0,0x0,8
tick,0x7ffe67f8feb4,150133385,0,0x0,8
tick,0x7ffe67f8feb4,150149389,0,0x0,8
tick,0x7ffe67f8feb4,150165460,0,0x0,8
tick,0x7ffe67f8feb4,150181399,0,0x0,8
tick,0x7ffe67f8feb4,150197433,0,0x0,8
tick,0x7ffe67f8feb4,150213434,0,0x0,8
tick,0x7ffe67f8feb4,150229463,0,0x0,8
tick,0x7ffe67f8feb4,150245487,0,0x0,8
tick,0x7ffe67f8feb4,150262216,0,0x0,8
tick,0x7ffe67f8feb4,150278814,0,0x0,8
tick,0x7ffe67f8feb4,150293128,0,0x0,8
tick,0x7ffe67f8feb4,150308452,0,0x0,8
tick,0x7ffe67f8feb4,150324433,0,0x0,8
tick,0x7ffe67f8feb4,150340447,0,0x0,8
tick,0x7ffe67f8feb4,150356486,0,0x0,8
tick,0x7ffe67f8feb4,150372450,0,0x0,8
tick,0x7ffe67f8feb4,150388452,0,0x0,8
tick,0x7ffe67f8feb4,150404479,0,0x0,8
tick,0x7ffe67f8feb4,150420452,0,0x0,8
tick,0x7ffe67f8feb4,150436435,0,0x0,8
tick,0x7ffe67f8feb4,150452462,0,0x0,8
tick,0x7ffe67f8feb4,150468474,0,0x0,8
tick,0x7ffe67f8feb4,150484457,0,0x0,8
tick,0x7ffe67f8feb4,150500477,0,0x0,8
tick,0x7ffe67f8feb4,150516447,0,0x0,8
tick,0x7ffe67f8feb4,150532474,0,0x0,8
tick,0x7ffe67f8feb4,150548444,0,0x0,8
tick,0x7ffe67f8feb4,150564466,0,0x0,8
tick,0x7ffe67f8feb4,150580463,0,0x0,8
tick,0x7ffe67f8feb4,150596530,0,0x0,8
tick,0x7ffe67f8feb4,150612505,0,0x0,8
tick,0x7ffe67f8feb4,150627486,0,0x0,8
tick,0x7ffe67f8feb4,150643499,0,0x0,8
tick,0x7ffe67f8feb4,150659503,0,0x0,8
tick,0x7ffe67f8feb4,150675521,0,0x0,8
tick,0x7ffe67f8feb4,150691533,0,0x0,8
tick,0x7ffe67f8feb4,150707499,0,0x0,8
tick,0x7ffe67f8feb4,150723514,0,0x0,8
tick,0x7ffe67f8feb4,150739492,0,0x0,8
tick,0x7ffe67f8feb4,150754792,0,0x0,8
tick,0x7ffe67f8feb4,150770560,0,0x0,8
tick,0x7ffe67f8feb4,150786712,0,0x0,8
tick,0x7ffe67f8feb4,150802091,0,0x0,8
tick,0x7ffe67f8feb4,150818413,0,0x0,8
tick,0x7ffe67f8feb4,150834432,0,0x0,8
tick,0x7ffe67f8feb4,150850289,0,0x0,8
tick,0x7ffe67f8feb4,150866486,0,0x0,8
tick,0x7ffe67f8feb4,150882296,0,0x0,8
tick,0x7ffe67f8feb4,150897439,0,0x0,8
tick,0x7ffe67f8feb4,150913406,0,0x0,8
tick,0x7ffe67f8feb4,150929398,0,0x0,8
tick,0x7ffe67f8feb4,150945396,0,0x0,8
tick,0x7ffe67f8feb4,150961392,0,0x0,8
tick,0x7ffe67f8feb4,150977401,0,0x0,8
tick,0x7ffe67f8feb4,150993412,0,0x0,8
tick,0x7ffe67f8feb4,151008548,0,0x0,8
tick,0x7ffe67f8feb4,151023975,0,0x0,8
tick,0x7ffe67f8feb4,151039978,0,0x0,8
tick,0x7ffe67f8feb4,151067607,0,0x0,8
tick,0x7ffe67f8feb4,151077018,0,0x0,8
tick,0x7ffe67f8feb4,151089716,0,0x0,8
tick,0x7ffe67f8feb4,151103695,0,0x0,8
tick,0x7ffe67f8feb4,151120180,0,0x0,8
tick,0x7ffe67f8feb4,151135568,0,0x0,8
tick,0x7ffe67f8feb4,151151615,0,0x0,8
tick,0x7ffe67f8feb4,151167589,0,0x0,8
tick,0x7ffe67f8feb4,151183559,0,0x0,8
tick,0x7ffe67f8feb4,151199402,0,0x0,8
tick,0x7ffe67f8feb4,151214997,0,0x0,8
tick,0x7ffe67f8feb4,151230670,0,0x0,8
tick,0x7ffe67f8feb4,151246414,0,0x0,8
tick,0x7ffe67f8feb4,151262410,0,0x0,8
tick,0x7ffe67f8feb4,151277397,0,0x0,8
tick,0x7ffe67f8feb4,151293404,0,0x0,8
tick,0x7ffe67f8feb4,151309422,0,0x0,8
tick,0x7ffe67f8feb4,151325457,0,0x0,8
tick,0x7ffe67f8feb4,151341446,0,0x0,8
tick,0x7ffe67f8feb4,151357494,0,0x0,8
tick,0x7ffe67f8feb4,151373457,0,0x0,8
tick,0x7ffe67f8feb4,151389474,0,0x0,8
tick,0x7ffe67f8feb4,151405461,0,0x0,8
tick,0x7ffe67f8feb4,151421470,0,0x0,8
tick,0x7ffe67f8feb4,151437484,0,0x0,8
tick,0x7ffe67f8feb4,151452652,0,0x0,8
tick,0x7ffe67f8feb4,151468576,0,0x0,8
tick,0x7ffe67f8feb4,151484663,0,0x0,8
tick,0x7ffe67f8feb4,151499615,0,0x0,8
tick,0x7ffe67f8feb4,151514817,0,0x0,8
tick,0x7ffe67f8feb4,151530336,0,0x0,8
tick,0x7ffe67f8feb4,151546031,0,0x0,8
tick,0x7ffe67f8feb4,151561624,0,0x0,8
tick,0x7ffe67f8feb4,151577636,0,0x0,8
tick,0x7ffe67f8feb4,151593516,0,0x0,8
tick,0x7ffe67f8feb4,151609505,0,0x0,8
tick,0x7ffe67f8feb4,151624642,0,0x0,8
tick,0x7ffe67f8feb4,151640674,0,0x0,8
tick,0x7ffe67f8feb4,151656475,0,0x0,8
tick,0x7ffe67f8feb4,151671680,0,0x0,8
tick,0x7ffe67f8feb4,151687494,0,0x0,8
tick,0x7ffe67f8feb4,151703168,0,0x0,8
tick,0x7ffe67f8feb4,151718664,0,0x0,8
tick,0x7ffe67f8feb4,151734191,0,0x0,8
tick,0x7ffe67f8feb4,151749870,0,0x0,8
tick,0x7ffe67f8feb4,151765865,0,0x0,8
tick,0x7ffe67f8feb4,151781243,0,0x0,8
tick,0x7ffe67f8feb4,151796961,0,0x0,8
tick,0x7ffe67f8feb4,151812578,0,0x0,8
tick,0x7ffe67f8feb4,151827957,0,0x0,8
tick,0x7ffe67f8feb4,151844139,0,0x0,8
tick,0x7ffe67f8feb4,151859575,0,0x0,8
tick,0x7ffe67f8feb4,151874821,0,0x0,8
tick,0x7ffe67f8feb4,151890674,0,0x0,8
tick,0x7ffe67f8feb4,151906474,0,0x0,8
tick,0x7ffe67f8feb4,151921683,0,0x0,8
tick,0x7ffe67f8feb4,151937686,0,0x0,8
tick,0x7ffe67f8feb4,151953677,0,0x0,8
tick,0x7ffe67f8feb4,151968850,0,0x0,8
tick,0x7ffe67f8feb4,151984971,0,0x0,8
tick,0x7ffe67f8feb4,152000704,0,0x0,8
tick,0x7ffe67f8feb4,152016771,0,0x0,8
tick,0x7ffe67f8feb4,152031962,0,0x0,8
tick,0x7ffe67f8feb4,152047879,0,0x0,8
tick,0x7ffe67f8feb4,152063741,0,0x0,8
tick,0x7ffe67f8feb4,152079482,0,0x0,8
tick,0x7ffe67f8feb4,152095106,0,0x0,8
tick,0x7ffe67f8feb4,152111085,0,0x0,8
tick,0x7ffe67f8feb4,152127088,0,0x0,8
tick,0x7ffe67f8feb4,152143062,0,0x0,8
tick,0x7ffe67f8feb4,152159083,0,0x0,8
tick,0x7ffe67f8feb4,152175117,0,0x0,8
tick,0x7ffe67f8feb4,152191128,0,0x0,8
tick,0x7ffe67f8feb4,152206322,0,0x0,8
tick,0x7ffe67f8feb4,152221467,0,0x0,8
tick,0x7ffe67f8feb4,152236768,0,0x0,8
tick,0x7ffe67f8feb4,152252726,0,0x0,8
tick,0x7ffe67f8feb4,152268756,0,0x0,8
tick,0x7ffe67f8feb4,152283750,0,0x0,8
tick,0x7ffe67f8feb4,152299827,0,0x0,8
tick,0x7ffe67f8feb4,152315752,0,0x0,8
tick,0x7ffe67f8feb4,152331754,0,0x0,8
tick,0x7ffe67f8feb4,152347763,0,0x0,8
tick,0x7ffe67f8feb4,152363881,0,0x0,8
tick,0x7ffe67f8feb4,152379849,0,0x0,8
tick,0x7ffe67f8feb4,152395735,0,0x0,8
tick,0x7ffe67f8feb4,152410846,0,0x0,8
tick,0x7ffe67f8feb4,152426792,0,0x0,8
tick,0x7ffe67f8feb4,152442528,0,0x0,8
tick,0x7ffe67f8feb4,152458546,0,0x0,8
tick,0x7ffe67f8feb4,152474452,0,0x0,8
tick,0x7ffe67f8feb4,152489594,0,0x0,8
tick,0x7ffe67f8feb4,152504811,0,0x0,8
tick,0x7ffe67f8feb4,152520404,0,0x0,8
tick,0x7ffe67f8feb4,152535680,0,0x0,8
tick,0x7ffe67f8feb4,152550785,0,0x0,8
tick,0x7ffe67f8feb4,152566409,0,0x0,8
tick,0x7ffe67f8feb4,152581813,0,0x0,8
tick,0x7ffe67f8feb4,152597431,0,0x0,8
tick,0x7ffe67f8feb4,152613047,0,0x0,8
tick,0x7ffe67f8feb4,152629096,0,0x0,8
tick,0x7ffe67f8feb4,152644781,0,0x0,8
tick,0x7ffe67f8feb4,152660783,0,0x0,8
tick,0x7ffe67f8feb4,152676817,0,0x0,8
tick,0x7ffe67f8feb4,152692842,0,0x0,8
tick,0x7ffe67f8feb4,152708895,0,0x0,8
tick,0x7ffe67f8feb4,152724791,0,0x0,8
tick,0x7ffe67f8feb4,152740934,0,0x0,8
tick,0x7ffe67f8feb4,152756827,0,0x0,8
tick,0x7ffe67f8feb4,152772840,0,0x0,8
tick,0x7ffe67f8feb4,152788843,0,0x0,8
tick,0x7ffe67f8feb4,152804818,0,0x0,8
tick,0x7ffe67f8feb4,152820817,0,0x0,8
tick,0x7ffe67f8feb4,152836807,0,0x0,8
tick,0x7ffe67f8feb4,152852822,0,0x0,8
tick,0x7ffe67f8feb4,152868378,0,0x0,8
tick,0x7ffe67f8feb4,152883814,0,0x0,8
tick,0x7ffe67f8feb4,152899402,0,0x0,8
tick,0x7ffe67f8feb4,152915415,0,0x0,8
tick,0x7ffe67f8feb4,152931402,0,0x0,8
tick,0x7ffe67f8feb4,152947479,0,0x0,8
tick,0x7ffe67f8feb4,152962874,0,0x0,8
tick,0x7ffe67f8feb4,152978869,0,0x0,8
tick,0x7ffe67f8feb4,152994864,0,0x0,8
tick,0x7ffe67f8feb4,153010041,0,0x0,8
tick,0x7ffe67f8feb4,153025956,0,0x0,8
tick,0x7ffe67f8feb4,153041724,0,0x0,8
tick,0x7ffe67f8feb4,153057905,0,0x0,8
tick,0x7ffe67f8feb4,153074063,0,0x0,8
tick,0x7ffe67f8feb4,153089158,0,0x0,8
tick,0x7ffe67f8feb4,153105165,0,0x0,8
tick,0x7ffe67f8feb4,153121139,0,0x0,8
tick,0x7ffe67f8feb4,153137133,0,0x0,8
tick,0x7ffe67f8feb4,153153102,0,0x0,8
tick,0x7ffe67f8feb4,153169125,0,0x0,8
tick,0x7ffe67f8feb4,153185433,0,0x0,8
tick,0x7ffe67f8feb4,153201474,0,0x0,8
tick,0x7ffe67f8feb4,153216543,0,0x0,8
tick,0x7ffe67f8feb4,153231786,0,0x0,8
tick,0x7ffe67f8feb4,153248037,0,0x0,8
tick,0x7ffe67f8feb4,153264055,0,0x0,8
tick,0x7ffe67f8feb4,153278866,0,0x0,8
tick,0x7ffe67f8feb4,153294871,0,0x0,8
tick,0x7ffe67f8feb4,153310179,0,0x0,8
tick,0x7ffe67f8feb4,153326177,0,0x0,8
tick,0x7ffe67f8feb4,153341930,0,0x0,8
tick,0x7ffe67f8feb4,153357048,0,0x0,8
tick,0x7ffe67f8feb4,153373105,0,0x0,8
tick,0x7ffe67f8feb4,153389115,0,0x0,8
tick,0x7ffe67f8feb4,153404683,0,0x0,8
tick,0x7ffe67f8feb4,153420119,0,0x0,8
tick,0x7ffe67f8feb4,153435380,0,0x0,8
tick,0x7ffe67f8feb4,153451235,0,0x0,8
tick,0x7ffe67f8feb4,153467213,0,0x0,8
tick,0x7ffe67f8feb4,153483172,0,0x0,8
tick,0x7ffe67f8feb4,153499354,0,0x0,8
tick,0x7ffe67f8feb4,153515120,0,0x0,8
tick,0x7ffe67f8feb4,153531226,0,0x0,8
tick,0x7ffe67f8feb4,153545943,0,0x0,8
tick,0x7ffe67f8feb4,153561982,0,0x0,8
tick,0x7ffe67f8feb4,153577953,0,0x0,8
tick,0x7ffe67f8feb4,153593534,0,0x0,8
tick,0x7ffe67f8feb4,153608941,0,0x0,8
tick,0x7ffe67f8feb4,153623983,0,0x0,8
tick,0x7ffe67f8feb4,153640019,0,0x0,8
tick,0x7ffe67f8feb4,153655815,0,0x0,8
tick,0x7ffe67f8feb4,153671003,0,0x0,8
tick,0x7ffe67f8feb4,153686423,0,0x0,8
tick,0x7ffe67f8feb4,153701987,0,0x0,8
tick,0x7ffe67f8feb4,153717535,0,0x0,8
tick,0x7ffe67f8feb4,153733546,0,0x0,8
tick,0x7ffe67f8feb4,153748895,0,0x0,8
tick,0x7ffe67f8feb4,153764112,0,0x0,8
tick,0x7ffe67f8feb4,153779911,0,0x0,8
tick,0x7ffe67f8feb4,153795209,0,0x0,8
tick,0x7ffe67f8feb4,153810734,0,0x0,8
tick,0x7ffe67f8feb4,153826643,0,0x0,8
tick,0x7ffe67f8feb4,153842407,0,0x0,8
tick,0x7ffe67f8feb4,153858084,0,0x0,8
tick,0x7ffe67f8feb4,153873291,0,0x0,8
tick,0x7ffe67f8feb4,153888587,0,0x0,8
tick,0x7ffe67f8feb4,153904815,0,0x0,8
tick,0x7ffe67f8feb4,153920135,0,0x0,8
tick,0x7ffe67f8feb4,153935053,0,0x0,8
tick,0x7ffe67f8feb4,153951080,0,0x0,8
tick,0x7ffe67f8feb4,153967231,0,0x0,8
tick,0x7ffe67f8feb4,154002476,0,0x0,8
tick,0x7ffe67f8feb4,154008909,0,0x0,8
tick,0x7ffe67f8feb4,154016277,0,0x0,8
tick,0x7ffe67f8feb4,154032626,0,0x0,8
tick,0x7ffe67f8feb4,154046610,0,0x0,8
tick,0x7ffe67f8feb4,154062624,0,0x0,8
tick,0x7ffe67f8feb4,154078541,0,0x0,8
tick,0x7ffe67f8feb4,154095140,0,0x0,8
tick,0x7ffe67f8feb4,154110594,0,0x0,8
tick,0x7ffe67f8feb4,154126571,0,0x0,8
tick,0x7ffe67f8feb4,154142585,0,0x0,8
tick,0x7ffe67f8feb4,154158562,0,0x0,8
tick,0x7ffe67f8feb4,154174027,0,0x0,8
tick,0x7ffe67f8feb4,154189592,0,0x0,8
tick,0x7ffe67f8feb4,154205331,0,0x0,8
tick,0x7ffe67f8feb4,154221330,0,0x0,8
tick,0x7ffe67f8feb4,154237348,0,0x0,8
tick,0x7ffe67f8feb4,154253029,0,0x0,8
tick,0x7ffe67f8feb4,154269074,0,0x0,8
tick,0x7ffe67f8feb4,154284748,0,0x0,8
tick,0x7ffe67f8feb4,154300674,0,0x0,8
tick,0x7ffe67f8feb4,154316086,0,0x0,8
tick,0x7ffe67f8feb4,154332343,0,0x0,8
tick,0x7ffe67f8feb4,154348041,0,0x0,8
tick,0x7ffe67f8feb4,154363565,0,0x0,8
tick,0x7ffe67f8feb4,154379321,0,0x0,8
tick,0x7ffe67f8feb4,154394686,0,0x0,8
tick,0x7ffe67f8feb4,154410708,0,0x0,8
tick,0x7ffe67f8feb4,154426703,0,0x0,8
tick,0x7ffe67f8feb4,154442732,0,0x0,8
tick,0x7ffe67f8feb4,154458064,0,0x0,8
tick,0x7ffe67f8feb4,154474190,0,0x0,8
tick,0x7ffe67f8feb4,154490077,0,0x0,8
tick,0x7ffe67f8feb4,154506153,0,0x0,8
tick,0x7ffe67f8feb4,154521911,0,0x0,8
tick,0x7ffe67f8feb4,154537474,0,0x0,8
tick,0x7ffe67f8feb4,154553425,0,0x0,8
tick,0x7ffe67f8feb4,154569099,0,0x0,8
tick,0x7ffe67f8feb4,154584077,0,0x0,8
tick,0x7ffe67f8feb4,154600111,0,0x0,8
tick,0x7ffe67f8feb4,154616540,0,0x0,8
tick,0x7ffe67f8feb4,154632285,0,0x0,8
tick,0x7ffe67f8feb4,154648092,0,0x0,8
tick,0x7ffe67f8feb4,154664101,0,0x0,8
tick,0x7ffe67f8feb4,154680112,0,0x0,8
tick,0x7ffe67f8feb4,154696110,0,0x0,8
tick,0x7ffe67f8feb4,154712151,0,0x0,8
tick,0x7ffe67f8feb4,154728107,0,0x0,8
tick,0x7ffe67f8feb4,154744087,0,0x0,8
tick,0x7ffe67f8feb4,154760130,0,0x0,8
tick,0x7ffe67f8feb4,154776114,0,0x0,8
tick,0x7ffe67f8feb4,154792117,0,0x0,8
tick,0x7ffe67f8feb4,154808125,0,0x0,8
tick,0x7ffe67f8feb4,154824131,0,0x0,8
tick,0x7ffe67f8feb4,154840131,0,0x0,8
tick,0x7ffe67f8feb4,154855797,0,0x0,8
tick,0x7ffe67f8feb4,154871309,0,0x0,8
tick,0x7ffe67f8feb4,154887165,0,0x0,8
tick,0x7ffe67f8feb4,154903153,0,0x0,8
tick,0x7ffe67f8feb4,154919167,0,0x0,8
tick,0x7ffe67f8feb4,154935144,0,0x0,8
tick,0x7ffe67f8feb4,154951148,0,0x0,8
tick,0x7ffe67f8feb4,154966289,0,0x0,8
tick,0x7ffe67f8feb4,154982349,0,0x0,8
tick,0x7ffe67f8feb4,154998158,0,0x0,8
tick,0x7ffe67f8feb4,155014188,0,0x0,8
tick,0x7ffe67f8feb4,155030177,0,0x0,8
tick,0x7ffe67f8feb4,155046187,0,0x0,8
tick,0x7ffe67f8feb4,155061299,0,0x0,8
tick,0x7ffe67f8feb4,155077208,0,0x0,8
tick,0x7ffe67f8feb4,155093199,0,0x0,8
tick,0x7ffe67f8feb4,155109252,0,0x0,8
tick,0x7ffe67f8feb4,155125203,0,0x0,8
tick,0x7ffe67f8feb4,155141186,0,0x0,8
tick,0x7ffe67f8feb4,155157187,0,0x0,8
tick,0x7ffe67f8feb4,155173193,0,0x0,8
tick,0x7ffe67f8feb4,155189216,0,0x0,8
tick,0x7ffe67f8feb4,155205201,0,0x0,8
tick,0x7ffe67f8feb4,155221169,0,0x0,8
tick,0x7ffe67f8feb4,155236670,0,0x0,8
tick,0x7ffe67f8feb4,155252200,0,0x0,8
tick,0x7ffe67f8feb4,155268061,0,0x0,8
tick,0x7ffe67f8feb4,155284068,0,0x0,8
tick,0x7ffe67f8feb4,155300068,0,0x0,8
tick,0x7ffe67f8feb4,155315206,0,0x0,8
tick,0x7ffe67f8feb4,155331243,0,0x0,8
tick,0x7ffe67f8feb4,155346375,0,0x0,8
tick,0x7ffe67f8feb4,155361972,0,0x0,8
tick,0x7ffe67f8feb4,155377226,0,0x0,8
tick,0x7ffe67f8feb4,155392622,0,0x0,8
tick,0x7ffe67f8feb4,155407894,0,0x0,8
tick,0x7ffe67f8feb4,155423327,0,0x0,8
tick,0x7ffe67f8feb4,155439347,0,0x0,8
tick,0x7ffe67f8feb4,155455577,0,0x0,8
tick,0x7ffe67f8feb4,155471207,0,0x0,8
tick,0x7ffe67f8feb4,155486392,0,0x0,8
tick,0x7ffe67f8feb4,155501668,0,0x0,8
tick,0x7ffe67f8feb4,155517594,0,0x0,8
tick,0x7ffe67f8feb4,155533575,0,0x0,8
tick,0x7ffe67f8feb4,155549654,0,0x0,8
tick,0x7ffe67f8feb4,155565244,0,0x0,8
tick,0x7ffe67f8feb4,155581266,0,0x0,8
tick,0x7ffe67f8feb4,155597230,0,0x0,8
tick,0x7ffe67f8feb4,155613257,0,0x0,8
tick,0x7ffe67f8feb4,155628515,0,0x0,8
tick,0x7ffe67f8feb4,155644372,0,0x0,8
tick,0x7ffe67f8feb4,155659900,0,0x0,8
tick,0x7ffe67f8feb4,155674987,0,0x0,8
tick,0x7ffe67f8feb4,155690981,0,0x0,8
tick,0x7ffe67f8feb4,155706637,0,0x0,8
tick,0x7ffe67f8feb4,155722659,0,0x0,8
tick,0x7ffe67f8feb4,155738677,0,0x0,8
tick,0x7ffe67f8feb4,155754956,0,0x0,8
tick,0x7ffe67f8feb4,155770648,0,0x0,8
tick,0x7ffe67f8feb4,155785767,0,0x0,8
tick,0x7ffe67f8feb4,155801679,0,0x0,8
tick,0x7ffe67f8feb4,155817701,0,0x0,8
tick,0x7ffe67f8feb4,155833069,0,0x0,8
tick,0x7ffe67f8feb4,155849003,0,0x0,8
tick,0x7ffe67f8feb4,155865004,0,0x0,8
tick,0x7ffe67f8feb4,155880345,0,0x0,8
tick,0x7ffe67f8feb4,155895877,0,0x0,8
tick,0x7ffe67f8feb4,155910931,0,0x0,8
tick,0x7ffe67f8feb4,155926197,0,0x0,8
tick,0x7ffe67f8feb4,155941358,0,0x0,8
tick,0x7ffe67f8feb4,155956835,0,0x0,8
tick,0x7ffe67f8feb4,155972844,0,0x0,8
tick,0x7ffe67f8feb4,155987950,0,0x0,8
tick,0x7ffe67f8feb4,156004017,0,0x0,8
tick,0x7ffe67f8feb4,156018836,0,0x0,8
tick,0x7ffe67f8feb4,156034713,0,0x0,8
tick,0x7ffe67f8feb4,156050269,0,0x0,8
tick,0x7ffe67f8feb4,156065284,0,0x0,8
tick,0x7ffe67f8feb4,156080974,0,0x0,8
tick,0x7ffe67f8feb4,156095978,0,0x0,8
tick,0x7ffe67f8feb4,156111370,0,0x0,8
tick,0x7ffe67f8feb4,156127369,0,0x0,8
tick,0x7ffe67f8feb4,156142399,0,0x0,8
tick,0x7ffe67f8feb4,156158140,0,0x0,8
tick,0x7ffe67f8feb4,156174350,0,0x0,8
tick,0x7ffe67f8feb4,156190122,0,0x0,8
tick,0x7ffe67f8feb4,156206164,0,0x0,8
tick,0x7ffe67f8feb4,156222397,0,0x0,8
tick,0x7ffe67f8feb4,156238169,0,0x0,8
tick,0x7ffe67f8feb4,156253733,0,0x0,8
tick,0x7ffe67f8feb4,156269720,0,0x0,8
tick,0x7ffe67f8feb4,156285728,0,0x0,8
tick,0x7ffe67f8feb4,156301459,0,0x0,8
tick,0x7ffe67f8feb4,156317072,0,0x0,8
tick,0x7ffe67f8feb4,156332292,0,0x0,8
tick,0x7ffe67f8feb4,156347489,0,0x0,8
tick,0x7ffe67f8feb4,156362787,0,0x0,8
tick,0x7ffe67f8feb4,156378526,0,0x0,8
tick,0x7ffe67f8feb4,156394342,0,0x0,8
tick,0x7ffe67f8feb4,156409951,0,0x0,8
tick,0x7ffe67f8feb4,156425054,0,0x0,8
tick,0x7ffe67f8feb4,156440331,0,0x0,8
tick,0x7ffe67f8feb4,156455181,0,0x0,8
tick,0x7ffe67f8feb4,156470517,0,0x0,8
tick,0x7ffe67f8feb4,156485614,0,0x0,8
tick,0x7ffe67f8feb4,156501740,0,0x0,8
tick,0x7ffe67f8feb4,156517519,0,0x0,8
tick,0x7ffe67f8feb4,156533291,0,0x0,8
tick,0x7ffe67f8feb4,156548480,0,0x0,8
tick,0x7ffe67f8feb4,156564480,0,0x0,8
tick,0x7ffe67f8feb4,156580703,0,0x0,8
tick,0x7ffe67f8feb4,156595703,0,0x0,8
tick,0x7ffe67f8feb4,156613354,0,0x0,8
tick,0x7ffe67f8feb4,156627602,0,0x0,8
tick,0x7ffe67f8feb4,156643703,0,0x0,8
tick,0x7ffe67f8feb4,156659472,0,0x0,8
tick,0x7ffe67f8feb4,156675485,0,0x0,8
tick,0x7ffe67f8feb4,156691715,0,0x0,8
tick,0x7ffe67f8feb4,156717513,0,0x0,8
tick,0x7ffe67f8feb4,156723461,0,0x0,8
tick,0x7ffe67f8feb4,156739463,0,0x0,8
tick,0x7ffe67f8feb4,156755470,0,0x0,8
tick,0x7ffe67f8feb4,156771459,0,0x0,8
tick,0x7ffe67f8feb4,156787949,0,0x0,8
tick,0x7ffe67f8feb4,156803464,0,0x0,8
tick,0x7ffe67f8feb4,156819462,0,0x0,8
tick,0x7ffe67f8feb4,156835462,0,0x0,8
tick,0x7ffe67f8feb4,156851484,0,0x0,8
tick,0x7ffe67f8feb4,156867549,0,0x0,8
tick,0x7ffe67f8feb4,156883399,0,0x0,8
tick,0x7ffe67f8feb4,156898302,0,0x0,8
tick,0x7ffe67f8feb4,156913301,0,0x0,8
tick,0x7ffe67f8feb4,156929335,0,0x0,8
tick,0x7ffe67f8feb4,156945345,0,0x0,8
tick,0x7ffe67f8feb4,156961331,0,0x0,8
tick,0x7ffe67f8feb4,156977368,0,0x0,8
tick,0x7ffe67f8feb4,156993369,0,0x0,8
tick,0x7ffe67f8feb4,157009358,0,0x0,8
tick,0x7ffe67f8feb4,157025408,0,0x0,8
tick,0x7ffe67f8feb4,157041012,0,0x0,8
tick,0x7ffe67f8feb4,157056400,0,0x0,8
tick,0x7ffe67f8feb4,157072432,0,0x0,8
tick,0x7ffe67f8feb4,157088399,0,0x0,8
tick,0x7ffe67f8feb4,157104459,0,0x0,8
tick,0x7ffe67f8feb4,157120445,0,0x0,8
tick,0x7ffe67f8feb4,157136429,0,0x0,8
tick,0x7ffe67f8feb4,157152458,0,0x0,8
tick,0x7ffe67f8feb4,157168454,0,0x0,8
tick,0x7ffe67f8feb4,157184440,0,0x0,8
tick,0x7ffe67f8feb4,157200259,0,0x0,8
tick,0x7ffe67f8feb4,157216280,0,0x0,8
tick,0x7ffe67f8feb4,157232269,0,0x0,8
tick,0x7ffe67f8feb4,157248256,0,0x0,8
tick,0x7ffe67f8feb4,157264294,0,0x0,8
tick,0x7ffe67f8feb4,157280267,0,0x0,8
tick,0x7ffe67f8feb4,157296285,0,0x0,8
tick,0x7ffe67f8feb4,157311433,0,0x0,8
tick,0x7ffe67f8feb4,157327390,0,0x0,8
tick,0x7ffe67f8feb4,157343404,0,0x0,8
tick,0x7ffe67f8feb4,157359544,0,0x0,8
tick,0x7ffe67f8feb4,157375925,0,0x0,8
tick,0x7ffe67f8feb4,157392075,0,0x0,8
tick,0x7ffe67f8feb4,157407853,0,0x0,8
tick,0x7ffe67f8feb4,157424229,0,0x0,8
tick,0x7ffe67f8feb4,157439682,0,0x0,8
tick,0x7ffe67f8feb4,157455876,0,0x0,8
tick,0x7ffe67f8feb4,157471854,0,0x0,8
tick,0x7ffe67f8feb4,157487575,0,0x0,8
tick,0x7ffe67f8feb4,157503061,0,0x0,8
tick,0x7ffe67f8feb4,157519020,0,0x0,8
tick,0x7ffe67f8feb4,157534507,0,0x0,8
tick,0x7ffe67f8feb4,157549672,0,0x0,8
tick,0x7ffe67f8feb4,157565216,0,0x0,8
tick,0x7ffe67f8feb4,157581057,0,0x0,8
tick,0x7ffe67f8feb4,157597227,0,0x0,8
tick,0x7ffe67f8feb4,157613053,0,0x0,8
tick,0x7ffe67f8feb4,157628587,0,0x0,8
tick,0x7ffe67f8feb4,157644092,0,0x0,8
tick,0x7ffe67f8feb4,157659381,0,0x0,8
tick,0x7ffe67f8feb4,157675579,0,0x0,8
tick,0x7ffe67f8feb4,157691246,0,0x0,8
tick,0x7ffe67f8feb4,157706476,0,0x0,8
tick,0x7ffe67f8feb4,157721502,0,0x0,8
tick,0x7ffe67f8feb4,157737553,0,0x0,8
tick,0x7ffe67f8feb4,157753009,0,0x0,8
tick,0x7ffe67f8feb4,157768069,0,0x0,8
tick,0x7ffe67f8feb4,157784100,0,0x0,8
tick,0x7ffe67f8feb4,157800075,0,0x0,8
tick,0x7ffe67f8feb4,157816075,0,0x0,8
tick,0x7ffe67f8feb4,157832066,0,0x0,8
tick,0x7ffe67f8feb4,157848078,0,0x0,8
tick,0x7ffe67f8feb4,157864082,0,0x0,8
tick,0x7ffe67f8feb4,157880080,0,0x0,8
tick,0x7ffe67f8feb4,157896101,0,0x0,8
tick,0x7ffe67f8feb4,157912082,0,0x0,8
tick,0x7ffe67f8feb4,157928112,0,0x0,8
tick,0x7ffe67f8feb4,157944083,0,0x0,8
tick,0x7ffe67f8feb4,157959075,0,0x0,8
tick,0x7ffe67f8feb4,157974590,0,0x0,8
tick,0x7ffe67f8feb4,157990563,0,0x0,8
tick,0x7ffe67f8feb4,158006526,0,0x0,8
tick,0x7ffe67f8feb4,158022526,0,0x0,8
tick,0x7ffe67f8feb4,158038617,0,0x0,8
tick,0x7ffe67f8feb4,158054609,0,0x0,8
tick,0x7ffe67f8feb4,158070618,0,0x0,8
tick,0x7ffe67f8feb4,158086608,0,0x0,8
tick,0x7ffe67f8feb4,158102628,0,0x0,8
tick,0x7ffe67f8feb4,158118852,0,0x0,8
tick,0x7ffe67f8feb4,158134279,0,0x0,8
tick,0x7ffe67f8feb4,158149626,0,0x0,8
tick,0x7ffe67f8feb4,158165622,0,0x0,8
tick,0x7ffe67f8feb4,158181611,0,0x0,8
tick,0x7ffe67f8feb4,158197910,0,0x0,8
tick,0x7ffe67f8feb4,158213628,0,0x0,8
tick,0x7ffe67f8feb4,158229713,0,0x0,8
tick,0x7ffe67f8feb4,158245697,0,0x0,8
tick,0x7ffe67f8feb4,158261644,0,0x0,8
tick,0x7ffe67f8feb4,158277645,0,0x0,8
tick,0x7ffe67f8feb4,158293359,0,0x0,8
tick,0x7ffe67f8feb4,158309391,0,0x0,8
tick,0x7ffe67f8feb4,158325363,0,0x0,8
tick,0x7ffe67f8feb4,158341375,0,0x0,8
tick,0x7ffe67f8feb4,158357384,0,0x0,8
tick,0x7ffe67f8feb4,158373404,0,0x0,8
tick,0x7ffe67f8feb4,158389385,0,0x0,8
tick,0x7ffe67f8feb4,158405387,0,0x0,8
tick,0x7ffe67f8feb4,158421420,0,0x0,8
tick,0x7ffe67f8feb4,158437472,0,0x0,8
tick,0x7ffe67f8feb4,158453466,0,0x0,8
tick,0x7ffe67f8feb4,158469030,0,0x0,8
tick,0x7ffe67f8feb4,158484458,0,0x0,8
tick,0x7ffe67f8feb4,158499991,0,0x0,8
tick,0x7ffe67f8feb4,158515421,0,0x0,8
tick,0x7ffe67f8feb4,158531003,0,0x0,8
tick,0x7ffe67f8feb4,158546400,0,0x0,8
tick,0x7ffe67f8feb4,158561505,0,0x0,8
tick,0x7ffe67f8feb4,158577145,0,0x0,8
tick,0x7ffe67f8feb4,158592750,0,0x0,8
tick,0x7ffe67f8feb4,158607720,0,0x0,8
tick,0x7ffe67f8feb4,158623707,0,0x0,8
tick,0x7ffe67f8feb4,158638966,0,0x0,8
tick,0x7ffe67f8feb4,158654523,0,0x0,8
tick,0x7ffe67f8feb4,158670512,0,0x0,8
tick,0x7ffe67f8feb4,158686153,0,0x0,8
tick,0x7ffe67f8feb4,158701674,0,0x0,8
tick,0x7ffe67f8feb4,158717337,0,0x0,8
tick,0x7ffe67f8feb4,158732232,0,0x0,8
tick,0x7ffe67f8feb4,158747414,0,0x0,8
tick,0x7ffe67f8feb4,158762607,0,0x0,8
tick,0x7ffe67f8feb4,158778040,0,0x0,8
tick,0x7ffe67f8feb4,158794080,0,0x0,8
tick,0x7ffe67f8feb4,158808833,0,0x0,8
tick,0x7ffe67f8feb4,158824766,0,0x0,8
tick,0x7ffe67f8feb4,158840292,0,0x0,8
tick,0x7ffe67f8feb4,158855747,0,0x0,8
tick,0x7ffe67f8feb4,158871790,0,0x0,8
tick,0x7ffe67f8feb4,158887799,0,0x0,8
tick,0x7ffe67f8feb4,158903994,0,0x0,8
tick,0x7ffe67f8feb4,158919809,0,0x0,8
tick,0x7ffe67f8feb4,158935783,0,0x0,8
tick,0x7ffe67f8feb4,158951804,0,0x0,8
tick,0x7ffe67f8feb4,158967786,0,0x0,8
tick,0x7ffe67f8feb4,158983643,0,0x0,8
tick,0x7ffe67f8feb4,158999749,0,0x0,8
tick,0x7ffe67f8feb4,159015450,0,0x0,8
tick,0x7ffe67f8feb4,159030772,0,0x0,8
tick,0x7ffe67f8feb4,159045776,0,0x0,8
tick,0x7ffe67f8feb4,159061753,0,0x0,8
tick,0x7ffe67f8feb4,159077780,0,0x0,8
tick,0x7ffe67f8feb4,159093769,0,0x0,8
tick,0x7ffe67f8feb4,159109769,0,0x0,8
tick,0x7ffe67f8feb4,159125764,0,0x0,8
tick,0x7ffe67f8feb4,159141773,0,0x0,8
tick,0x7ffe67f8feb4,159157795,0,0x0,8
tick,0x7ffe67f8feb4,159173772,0,0x0,8
tick,0x7ffe67f8feb4,159189787,0,0x0,8
tick,0x7ffe67f8feb4,159205778,0,0x0,8
tick,0x7ffe67f8feb4,159221799,0,0x0,8
tick,0x7ffe67f8feb4,159237786,0,0x0,8
tick,0x7ffe67f8feb4,159253804,0,0x0,8
tick,0x7ffe67f8feb4,159270013,0,0x0,8
tick,0x7ffe67f8feb4,159285863,0,0x0,8
tick,0x7ffe67f8feb4,159301825,0,0x0,8
tick,0x7ffe67f8feb4,159317808,0,0x0,8
tick,0x7ffe67f8feb4,159333803,0,0x0,8
tick,0x7ffe67f8feb4,159349795,0,0x0,8
tick,0x7ffe67f8feb4,159366572,0,0x0,8
tick,0x7ffe67f8feb4,159382097,0,0x0,8
tick,0x7ffe67f8feb4,159397802,0,0x0,8
tick,0x7ffe67f8feb4,159413803,0,0x0,8
tick,0x7ffe67f8feb4,159429949,0,0x0,8
tick,0x7ffe67f8feb4,159445804,0,0x0,8
tick,0x7ffe67f8feb4,159461846,0,0x0,8
tick,0x7ffe67f8feb4,159477889,0,0x0,8
tick,0x7ffe67f8feb4,159493839,0,0x0,8
tick,0x7ffe67f8feb4,159509841,0,0x0,8
tick,0x7ffe67f8feb4,159524973,0,0x0,8
tick,0x7ffe67f8feb4,159540864,0,0x0,8
tick,0x7ffe67f8feb4,159557375,0,0x0,8
tick,0x7ffe67f8feb4,159572950,0,0x0,8
tick,0x7ffe67f8feb4,159588877,0,0x0,8
tick,0x7ffe67f8feb4,159604858,0,0x0,8
tick,0x7ffe67f8feb4,159620898,0,0x0,8
tick,0x7ffe67f8feb4,159636014,0,0x0,8
tick,0x7ffe67f8feb4,159651871,0,0x0,8
tick,0x7ffe67f8feb4,159667049,0,0x0,8
tick,0x7ffe67f8feb4,159682868,0,0x0,8
tick,0x7ffe67f8feb4,159698898,0,0x0,8
tick,0x7ffe67f8feb4,159714899,0,0x0,8
tick,0x7ffe67f8feb4,159730891,0,0x0,8
tick,0x7ffe67f8feb4,159746906,0,0x0,8
tick,0x7ffe67f8feb4,159762894,0,0x0,8
tick,0x7ffe67f8feb4,159778880,0,0x0,8
tick,0x7ffe67f8feb4,159794932,0,0x0,8
tick,0x7ffe67f8feb4,159810900,0,0x0,8
tick,0x7ffe67f8feb4,159826640,0,0x0,8
tick,0x7ffe67f8feb4,159842676,0,0x0,8
tick,0x7ffe67f8feb4,159858141,0,0x0,8
tick,0x7ffe67f8feb4,159873910,0,0x0,8
tick,0x7ffe67f8feb4,159889302,0,0x0,8
tick,0x7ffe67f8feb4,159905360,0,0x0,8
tick,0x7ffe67f8feb4,159921331,0,0x0,8
tick,0x7ffe67f8feb4,159937247,0,0x0,8
tick,0x7ffe67f8feb4,159952426,0,0x0,8
tick,0x7ffe67f8feb4,159967453,0,0x0,8
tick,0x7ffe67f8feb4,159982953,0,0x0,8
tick,0x7ffe67f8feb4,159998960,0,0x0,8
tick,0x7ffe67f8feb4,160014819,0,0x0,8
tick,0x7ffe67f8feb4,160029947,0,0x0,8
tick,0x7ffe67f8feb4,160045950,0,0x0,8
tick,0x7ffe67f8feb4,160061968,0,0x0,8
tick,0x7ffe67f8feb4,160077930,0,0x0,8
tick,0x7ffe67f8feb4,160094240,0,0x0,8
tick,0x7ffe67f8feb4,160110516,0,0x0,8
tick,0x7ffe67f8feb4,160125664,0,0x0,8
tick,0x7ffe67f8feb4,160140839,0,0x0,8
tick,0x7ffe67f8feb4,160156404,0,0x0,8
tick,0x7ffe67f8feb4,160172439,0,0x0,8
tick,0x7ffe67f8feb4,160188437,0,0x0,8
tick,0x7ffe67f8feb4,160204386,0,0x0,8
tick,0x7ffe67f8feb4,160220372,0,0x0,8
tick,0x7ffe67f8feb4,160236371,0,0x0,8
tick,0x7ffe67f8feb4,160252406,0,0x0,8
tick,0x7ffe67f8feb4,160268416,0,0x0,8
tick,0x7ffe67f8feb4,160283938,0,0x0,8
tick,0x7ffe67f8feb4,160299482,0,0x0,8
tick,0x7ffe67f8feb4,160314970,0,0x0,8
tick,0x7ffe67f8feb4,160330477,0,0x0,8
tick,0x7ffe67f8feb4,160345997,0,0x0,8
tick,0x7ffe67f8feb4,160361534,0,0x0,8
tick,0x7ffe67f8feb4,160376967,0,0x0,8
tick,0x7ffe67f8feb4,160392710,0,0x0,8
tick,0x7ffe67f8feb4,160408029,0,0x0,8
tick,0x7ffe67f8feb4,160423372,0,0x0,8
tick,0x7ffe67f8feb4,160438988,0,0x0,8
tick,0x7ffe67f8feb4,160454548,0,0x0,8
tick,0x7ffe67f8feb4,160470606,0,0x0,8
tick,0x7ffe67f8feb4,160486519,0,0x0,8
tick,0x7ffe67f8feb4,160502290,0,0x0,8
tick,0x7ffe67f8feb4,160517526,0,0x0,8
tick,0x7ffe67f8feb4,160533713,0,0x0,8
tick,0x7ffe67f8feb4,160548767,0,0x0,8
tick,0x7ffe67f8feb4,160564759,0,0x0,8
tick,0x7ffe67f8feb4,160580790,0,0x0,8
tick,0x7ffe67f8feb4,160596460,0,0x0,8
tick,0x7ffe67f8feb4,160614828,0,0x0,8
tick,0x7ffe67f8feb4,160630246,0,0x0,8
tick,0x7ffe67f8feb4,160645714,0,0x0,8
tick,0x7ffe67f8feb4,160661174,0,0x0,8
tick,0x7ffe67f8feb4,160676743,0,0x0,8
tick,0x7ffe67f8feb4,160692784,0,0x0,8
tick,0x7ffe67f8feb4,160708508,0,0x0,8
tick,0x7ffe67f8feb4,160723701,0,0x0,8
tick,0x7ffe67f8feb4,160739441,0,0x0,8
tick,0x7ffe67f8feb4,160754895,0,0x0,8
tick,0x7ffe67f8feb4,160770317,0,0x0,8
tick,0x7ffe67f8feb4,160785922,0,0x0,8
tick,0x7ffe67f8feb4,160801937,0,0x0,8
tick,0x7ffe67f8feb4,160817931,0,0x0,8
tick,0x7ffe67f8feb4,160833620,0,0x0,8
tick,0x7ffe67f8feb4,160848641,0,0x0,8
tick,0x7ffe67f8feb4,160864240,0,0x0,8
tick,0x7ffe67f8feb4,160879789,0,0x0,8
tick,0x7ffe67f8feb4,160895264,0,0x0,8
tick,0x7ffe67f8feb4,160911292,0,0x0,8
tick,0x7ffe67f8feb4,160926446,0,0x0,8
tick,0x7ffe67f8feb4,160942281,0,0x0,8
tick,0x7ffe67f8feb4,160958284,0,0x0,8
tick,0x7ffe67f8feb4,160974335,0,0x0,8
tick,0x7ffe67f8feb4,160989604,0,0x0,8
tick,0x7ffe67f8feb4,161005667,0,0x0,8
tick,0x7ffe67f8feb4,161021905,0,0x0,8
tick,0x7ffe67f8feb4,161036243,0,0x0,8
tick,0x7ffe67f8feb4,161052265,0,0x0,8
tick,0x7ffe67f8feb4,161068228,0,0x0,8
tick,0x7ffe67f8feb4,161083729,0,0x0,8
tick,0x7ffe67f8feb4,161099244,0,0x0,8
tick,0x7ffe67f8feb4,161115303,0,0x0,8
tick,0x7ffe67f8feb4,161130856,0,0x0,8
tick,0x7ffe67f8feb4,161146444,0,0x0,8
tick,0x7ffe67f8feb4,161161371,0,0x0,8
tick,0x7ffe67f8feb4,161176612,0,0x0,8
tick,0x7ffe67f8feb4,161192550,0,0x0,8
tick,0x7ffe67f8feb4,161208523,0,0x0,8
tick,0x7ffe67f8feb4,161224525,0,0x0,8
tick,0x7ffe67f8feb4,161240484,0,0x0,8
tick,0x7ffe67f8feb4,161255977,0,0x0,8
tick,0x7ffe67f8feb4,161273020,0,0x0,8
tick,0x7ffe67f8feb4,161288063,0,0x0,8
tick,0x7ffe67f8feb4,161304065,0,0x0,8
tick,0x7ffe67f8feb4,161319994,0,0x0,8
tick,0x7ffe67f8feb4,161335985,0,0x0,8
tick,0x7ffe67f8feb4,161352036,0,0x0,8
tick,0x7ffe67f8feb4,161368035,0,0x0,8
tick,0x7ffe67f8feb4,161383985,0,0x0,8
tick,0x7ffe67f8feb4,161400027,0,0x0,8
tick,0x7ffe67f8feb4,161415992,0,0x0,8
tick,0x7ffe67f8feb4,161432003,0,0x0,8
tick,0x7ffe67f8feb4,161447786,0,0x0,8
tick,0x7ffe67f8feb4,161463567,0,0x0,8
tick,0x7ffe67f8feb4,161479563,0,0x0,8
tick,0x7ffe67f8feb4,161495604,0,0x0,8
tick,0x7ffe67f8feb4,161511579,0,0x0,8
tick,0x7ffe67f8feb4,161527568,0,0x0,8
tick,0x7ffe67f8feb4,161542984,0,0x0,8
tick,0x7ffe67f8feb4,161558695,0,0x0,8
tick,0x7ffe67f8feb4,161574371,0,0x0,8
tick,0x7ffe67f8feb4,161590046,0,0x0,8
tick,0x7ffe67f8feb4,161605343,0,0x0,8
tick,0x7ffe67f8feb4,161621778,0,0x0,8
tick,0x7ffe67f8feb4,161637549,0,0x0,8
tick,0x7ffe67f8feb4,161652520,0,0x0,8
tick,0x7ffe67f8feb4,161668541,0,0x0,8
tick,0x7ffe67f8feb4,161684303,0,0x0,8
tick,0x7ffe67f8feb4,161699965,0,0x0,8
tick,0x7ffe67f8feb4,161715307,0,0x0,8
tick,0x7ffe67f8feb4,161730260,0,0x0,8
tick,0x7ffe67f8feb4,161746744,0,0x0,8
tick,0x7ffe67f8feb4,161762574,0,0x0,8
tick,0x7ffe67f8feb4,161778443,0,0x0,8
tick,0x7ffe67f8feb4,161794500,0,0x0,8
tick,0x7ffe67f8feb4,161809546,0,0x0,8
tick,0x7ffe67f8feb4,161825463,0,0x0,8
tick,0x7ffe67f8feb4,161841754,0,0x0,8
tick,0x7ffe67f8feb4,161857420,0,0x0,8
tick,0x7ffe67f8feb4,161873522,0,0x0,8
tick,0x7ffe67f8feb4,161889472,0,0x0,8
tick,0x7ffe67f8feb4,161904889,0,0x0,8
tick,0x7ffe67f8feb4,161920910,0,0x0,8
tick,0x7ffe67f8feb4,161936050,0,0x0,8
tick,0x7ffe67f8feb4,161951338,0,0x0,8
tick,0x7ffe67f8feb4,161967326,0,0x0,8
tick,0x7ffe67f8feb4,161982740,0,0x0,8
tick,0x7ffe67f8feb4,161998322,0,0x0,8
tick,0x7ffe67f8feb4,162014324,0,0x0,8
tick,0x7ffe67f8feb4,162030347,0,0x0,8
tick,0x7ffe67f8feb4,162045983,0,0x0,8
tick,0x7ffe67f8feb4,162062014,0,0x0,8
tick,0x7ffe67f8feb4,162077983,0,0x0,8
tick,0x7ffe67f8feb4,162093259,0,0x0,8
tick,0x7ffe67f8feb4,162109248,0,0x0,8
tick,0x7ffe67f8feb4,162125234,0,0x0,8
tick,0x7ffe67f8feb4,162141244,0,0x0,8
tick,0x7ffe67f8feb4,162156706,0,0x0,8
tick,0x7ffe67f8feb4,162172856,0,0x0,8
tick,0x7ffe67f8feb4,162188763,0,0x0,8
tick,0x7ffe67f8feb4,162204698,0,0x0,8
tick,0x7ffe67f8feb4,162220695,0,0x0,8
tick,0x7ffe67f8feb4,162236690,0,0x0,8
tick,0x7ffe67f8feb4,162252731,0,0x0,8
tick,0x7ffe67f8feb4,162268701,0,0x0,8
tick,0x7ffe67f8feb4,162284753,0,0x0,8
tick,0x7ffe67f8feb4,162299894,0,0x0,8
tick,0x7ffe67f8feb4,162315729,0,0x0,8
tick,0x7ffe67f8feb4,162331752,0,0x0,8
tick,0x7ffe67f8feb4,162347775,0,0x0,8
tick,0x7ffe67f8feb4,162363296,0,0x0,8
tick,0x7ffe67f8feb4,162378735,0,0x0,8
tick,0x7ffe67f8feb4,162394444,0,0x0,8
tick,0x7ffe67f8feb4,162409800,0,0x0,8
tick,0x7ffe67f8feb4,162425634,0,0x0,8
tick,0x7ffe67f8feb4,162441001,0,0x0,8
tick,0x7ffe67f8feb4,162456527,0,0x0,8
tick,0x7ffe67f8feb4,162472134,0,0x0,8
tick,0x7ffe67f8feb4,162487430,0,0x0,8
tick,0x7ffe67f8feb4,162502547,0,0x0,8
tick,0x7ffe67f8feb4,162518399,0,0x0,8
tick,0x7ffe67f8feb4,162534435,0,0x0,8
tick,0x7ffe67f8feb4,162549458,0,0x0,8
tick,0x7ffe67f8feb4,162564899,0,0x0,8
tick,0x7ffe67f8feb4,162580031,0,0x0,8
tick,0x7ffe67f8feb4,162596155,0,0x0,8
tick,0x7ffe67f8feb4,162611439,0,0x0,8
tick,0x7ffe67f8feb4,162627579,0,0x0,8
tick,0x7ffe67f8feb4,162642915,0,0x0,8
tick,0x7ffe67f8feb4,162658884,0,0x0,8
tick,0x7ffe67f8feb4,162675230,0,0x0,8
tick,0x7ffe67f8feb4,162690683,0,0x0,8
tick,0x7ffe67f8feb4,162705741,0,0x0,8
tick,0x7ffe67f8feb4,162721194,0,0x0,8
tick,0x7ffe67f8feb4,162737463,0,0x0,8
tick,0x7ffe67f8feb4,162753144,0,0x0,8
tick,0x7ffe67f8feb4,162768747,0,0x0,8
tick,0x7ffe67f8feb4,162784258,0,0x0,8
tick,0x7ffe67f8feb4,162800057,0,0x0,8
tick,0x7ffe67f8feb4,162815614,0,0x0,8
tick,0x7ffe67f8feb4,162830672,0,0x0,8
tick,0x7ffe67f8feb4,162846739,0,0x0,8
tick,0x7ffe67f8feb4,162862433,0,0x0,8
tick,0x7ffe67f8feb4,162878208,0,0x0,8
tick,0x7ffe67f8feb4,162893438,0,0x0,8
tick,0x7ffe67f8feb4,162909498,0,0x0,8
tick,0x7ffe67f8feb4,162924759,0,0x0,8
tick,0x7ffe67f8feb4,162939861,0,0x0,8
tick,0x7ffe67f8feb4,162955616,0,0x0,8
tick,0x7ffe67f8feb4,162971146,0,0x0,8
tick,0x7ffe67f8feb4,162986940,0,0x0,8
tick,0x7ffe67f8feb4,163002897,0,0x0,8
tick,0x7ffe67f8feb4,163019007,0,0x0,8
tick,0x7ffe67f8feb4,163034884,0,0x0,8
tick,0x7ffe67f8feb4,163050877,0,0x0,8
tick,0x7ffe67f8feb4,163066968,0,0x0,8
tick,0x7ffe67f8feb4,163083109,0,0x0,8
tick,0x7ffe67f8feb4,163098974,0,0x0,8
tick,0x7ffe67f8feb4,163115177,0,0x0,8
tick,0x7ffe67f8feb4,163130889,0,0x0,8
tick,0x7ffe67f8feb4,163147676,0,0x0,8
tick,0x7ffe67f8feb4,163162895,0,0x0,8
tick,0x7ffe67f8feb4,163178894,0,0x0,8
tick,0x7ffe67f8feb4,163195115,0,0x0,8
tick,0x7ffe67f8feb4,163210901,0,0x0,8
tick,0x7ffe67f8feb4,163226906,0,0x0,8
tick,0x7ffe67f8feb4,163242895,0,0x0,8
tick,0x7ffe67f8feb4,163258916,0,0x0,8
tick,0x7ffe67f8feb4,163274910,0,0x0,8
tick,0x7ffe67f8feb4,163290913,0,0x0,8
tick,0x7ffe67f8feb4,163306897,0,0x0,8
tick,0x7ffe67f8feb4,163322923,0,0x0,8
tick,0x7ffe67f8feb4,163337921,0,0x0,8
tick,0x7ffe67f8feb4,163353911,0,0x0,8
tick,0x7ffe67f8feb4,163370142,0,0x0,8
tick,0x7ffe67f8feb4,163385922,0,0x0,8
tick,0x7ffe67f8feb4,163401914,0,0x0,8
tick,0x7ffe67f8feb4,163417962,0,0x0,8
tick,0x7ffe67f8feb4,163433912,0,0x0,8
tick,0x7ffe67f8feb4,163450067,0,0x0,8
tick,0x7ffe67f8feb4,163465923,0,0x0,8
tick,0x7ffe67f8feb4,163481955,0,0x0,8
tick,0x7ffe67f8feb4,163497966,0,0x0,8
tick,0x7ffe67f8feb4,163513923,0,0x0,8
tick,0x7ffe67f8feb4,163529944,0,0x0,8
tick,0x7ffe67f8feb4,163545930,0,0x0,8
tick,0x7ffe67f8feb4,163561942,0,0x0,8
tick,0x7ffe67f8feb4,163577919,0,0x0,8
tick,0x7ffe67f8feb4,163593954,0,0x0,8
tick,0x7ffe67f8feb4,163609972,0,0x0,8
tick,0x7ffe67f8feb4,163626001,0,0x0,8
tick,0x7ffe67f8feb4,163642030,0,0x0,8
tick,0x7ffe67f8feb4,163657997,0,0x0,8
tick,0x7ffe67f8feb4,163674003,0,0x0,8
tick,0x7ffe67f8feb4,163690026,0,0x0,8
tick,0x7ffe67f8feb4,163706091,0,0x0,8
tick,0x7ffe67f8feb4,163722054,0,0x0,8
tick,0x7ffe67f8feb4,163738049,0,0x0,8
tick,0x7ffe67f8feb4,163754084,0,0x0,8
tick,0x7ffe67f8feb4,163770109,0,0x0,8
tick,0x7ffe67f8feb4,163786108,0,0x0,8
tick,0x7ffe67f8feb4,163802112,0,0x0,8
tick,0x7ffe67f8feb4,163818091,0,0x0,8
tick,0x7ffe67f8feb4,163833975,0,0x0,8
tick,0x7ffe67f8feb4,163850029,0,0x0,8
tick,0x7ffe67f8feb4,163865998,0,0x0,8
tick,0x7ffe67f8feb4,163882037,0,0x0,8
tick,0x7ffe67f8feb4,163898059,0,0x0,8
tick,0x7ffe67f8feb4,163914026,0,0x0,8
tick,0x7ffe67f8feb4,163930021,0,0x0,8
tick,0x7ffe67f8feb4,163945499,0,0x0,8
tick,0x7ffe67f8feb4,163961299,0,0x0,8
tick,0x7ffe67f8feb4,163977365,0,0x0,8
tick,0x7ffe67f8feb4,163993251,0,0x0,8
tick,0x7ffe67f8feb4,164009268,0,0x0,8
tick,0x7ffe67f8feb4,164025340,0,0x0,8
tick,0x7ffe67f8feb4,164040663,0,0x0,8
tick,0x7ffe67f8feb4,164056225,0,0x0,8
tick,0x7ffe67f8feb4,164071699,0,0x0,8
tick,0x7ffe67f8feb4,164087758,0,0x0,8
tick,0x7ffe67f8feb4,164103044,0,0x0,8
tick,0x7ffe67f8feb4,164119116,0,0x0,8
tick,0x7ffe67f8feb4,164134574,0,0x0,8
tick,0x7ffe67f8feb4,164150279,0,0x0,8
tick,0x7ffe67f8feb4,164166356,0,0x0,8
tick,0x7ffe67f8feb4,164181844,0,0x0,8
tick,0x7ffe67f8feb4,164196946,0,0x0,8
tick,0x7ffe67f8feb4,164212708,0,0x0,8
tick,0x7ffe67f8feb4,164228694,0,0x0,8
tick,0x7ffe67f8feb4,164244676,0,0x0,8
tick,0x7ffe67f8feb4,164260720,0,0x0,8
tick,0x7ffe67f8feb4,164276753,0,0x0,8
tick,0x7ffe67f8feb4,164292028,0,0x0,8
tick,0x7ffe67f8feb4,164308001,0,0x0,8
tick,0x7ffe67f8feb4,164324031,0,0x0,8
tick,0x7ffe67f8feb4,164340043,0,0x0,8
tick,0x7ffe67f8feb4,164355177,0,0x0,8
tick,0x7ffe67f8feb4,164370568,0,0x0,8
tick,0x7ffe67f8feb4,164386457,0,0x0,8
tick,0x7ffe67f8feb4,164402586,0,0x0,8
tick,0x7ffe67f8feb4,164418163,0,0x0,8
tick,0x7ffe67f8feb4,164433547,0,0x0,8
tick,0x7ffe67f8feb4,164448862,0,0x0,8
tick,0x7ffe67f8feb4,164465021,0,0x0,8
tick,0x7ffe67f8feb4,164480413,0,0x0,8
tick,0x7ffe67f8feb4,164495894,0,0x0,8
tick,0x7ffe67f8feb4,164511156,0,0x0,8
tick,0x7ffe67f8feb4,164527145,0,0x0,8
tick,0x7ffe67f8feb4,164542397,0,0x0,8
tick,0x7ffe67f8feb4,164557644,0,0x0,8
tick,0x7ffe67f8feb4,164572740,0,0x0,8
tick,0x7ffe67f8feb4,164588061,0,0x0,8
tick,0x7ffe67f8feb4,164604065,0,0x0,8
tick,0x7ffe67f8feb4,164619307,0,0x0,8
tick,0x7ffe67f8feb4,164635539,0,0x0,8
tick,0x7ffe67f8feb4,164651361,0,0x0,8
tick,0x7ffe67f8feb4,164667664,0,0x0,8
tick,0x7ffe67f8feb4,164683217,0,0x0,8
tick,0x7ffe67f8feb4,164699566,0,0x0,8
tick,0x7ffe67f8feb4,164715478,0,0x0,8
tick,0x7ffe67f8feb4,164730552,0,0x0,8
tick,0x7ffe67f8feb4,164745670,0,0x0,8
tick,0x7ffe67f8feb4,164761633,0,0x0,8
tick,0x7ffe67f8feb4,164777723,0,0x0,8
tick,0x7ffe67f8feb4,164793371,0,0x0,8
tick,0x7ffe67f8feb4,164809430,0,0x0,8
tick,0x7ffe67f8feb4,164825784,0,0x0,8
tick,0x7ffe67f8feb4,164841760,0,0x0,8
tick,0x7ffe67f8feb4,164857769,0,0x0,8
tick,0x7ffe67f8feb4,164873127,0,0x0,8
tick,0x7ffe67f8feb4,164889232,0,0x0,8
tick,0x7ffe67f8feb4,164904496,0,0x0,8
tick,0x7ffe67f8feb4,164920464,0,0x0,8
tick,0x7ffe67f8feb4,164936300,0,0x0,8
tick,0x7ffe67f8feb4,164952351,0,0x0,8
tick,0x7ffe67f8feb4,164968323,0,0x0,8
tick,0x7ffe67f8feb4,164984306,0,0x0,8
tick,0x7ffe67f8feb4,165000348,0,0x0,8
tick,0x7ffe67f8feb4,165016433,0,0x0,8
tick,0x7ffe67f8feb4,165032403,0,0x0,8
tick,0x7ffe67f8feb4,165048335,0,0x0,8
tick,0x7ffe67f8feb4,165064338,0,0x0,8
tick,0x7ffe67f8feb4,165080321,0,0x0,8
tick,0x7ffe67f8feb4,165096329,0,0x0,8
tick,0x7ffe67f8feb4,165112329,0,0x0,8
tick,0x7ffe67f8feb4,165128319,0,0x0,8
tick,0x7ffe67f8feb4,165144322,0,0x0,8
tick,0x7ffe67f8feb4,165160322,0,0x0,8
tick,0x7ffe67f8feb4,165176327,0,0x0,8
tick,0x7ffe67f8feb4,165192350,0,0x0,8
tick,0x7ffe67f8feb4,165208333,0,0x0,8
tick,0x7ffe67f8feb4,165224331,0,0x0,8
tick,0x7ffe67f8feb4,165240332,0,0x0,8
tick,0x7ffe67f8feb4,165257064,0,0x0,8
tick,0x7ffe67f8feb4,165272345,0,0x0,8
tick,0x7ffe67f8feb4,165288364,0,0x0,8
tick,0x7ffe67f8feb4,165304336,0,0x0,8
tick,0x7ffe67f8feb4,165320364,0,0x0,8
tick,0x7ffe67f8feb4,165336332,0,0x0,8
tick,0x7ffe67f8feb4,165352368,0,0x0,8
tick,0x7ffe67f8feb4,165368373,0,0x0,8
tick,0x7ffe67f8feb4,165384376,0,0x0,8
tick,0x7ffe67f8feb4,165400385,0,0x0,8
tick,0x7ffe67f8feb4,165416411,0,0x0,8
tick,0x7ffe67f8feb4,165432445,0,0x0,8
tick,0x7ffe67f8feb4,165448443,0,0x0,8
tick,0x7ffe67f8feb4,165464436,0,0x0,8
tick,0x7ffe67f8feb4,165480451,0,0x0,8
tick,0x7ffe67f8feb4,165495974,0,0x0,8
tick,0x7ffe67f8feb4,165511960,0,0x0,8
tick,0x7ffe67f8feb4,165527327,0,0x0,8
tick,0x7ffe67f8feb4,165542888,0,0x0,8
tick,0x7ffe67f8feb4,165558375,0,0x0,8
tick,0x7ffe67f8feb4,165574345,0,0x0,8
tick,0x7ffe67f8feb4,165590369,0,0x0,8
tick,0x7ffe67f8feb4,165606393,0,0x0,8
tick,0x7ffe67f8feb4,165622407,0,0x0,8
tick,0x7ffe67f8feb4,165638473,0,0x0,8
tick,0x7ffe67f8feb4,165653974,0,0x0,8
tick,0x7ffe67f8feb4,165669096,0,0x0,8
tick,0x7ffe67f8feb4,165685227,0,0x0,8
tick,0x7ffe67f8feb4,165701019,0,0x0,8
tick,0x7ffe67f8feb4,165716327,0,0x0,8
tick,0x7ffe67f8feb4,165732236,0,0x0,8
tick,0x7ffe67f8feb4,165748458,0,0x0,8
tick,0x7ffe67f8feb4,165764559,0,0x0,8
tick,0x7ffe67f8feb4,165779683,0,0x0,8
tick,0x7ffe67f8feb4,165795672,0,0x0,8
tick,0x7ffe67f8feb4,165811686,0,0x0,8
tick,0x7ffe67f8feb4,165826892,0,0x0,8
tick,0x7ffe67f8feb4,165842806,0,0x0,8
tick,0x7ffe67f8feb4,165858176,0,0x0,8
tick,0x7ffe67f8feb4,165873696,0,0x0,8
tick,0x7ffe67f8feb4,165889284,0,0x0,8
tick,0x7ffe67f8feb4,165904500,0,0x0,8
tick,0x7ffe67f8feb4,165919979,0,0x0,8
tick,0x7ffe67f8feb4,165935962,0,0x0,8
tick,0x7ffe67f8feb4,165951830,0,0x0,8
tick,0x7ffe67f8feb4,165967758,0,0x0,8
tick,0x7ffe67f8feb4,165983832,0,0x0,8
tick,0x7ffe67f8feb4,165999754,0,0x0,8
tick,0x7ffe67f8feb4,166015789,0,0x0,8
tick,0x7ffe67f8feb4,166031825,0,0x0,8
tick,0x7ffe67f8feb4,166047764,0,0x0,8
tick,0x7ffe67f8feb4,166063755,0,0x0,8
tick,0x7ffe67f8feb4,166079746,0,0x0,8
tick,0x7ffe67f8feb4,166095749,0,0x0,8
tick,0x7ffe67f8feb4,166111777,0,0x0,8
tick,0x7ffe67f8feb4,166127732,0,0x0,8
tick,0x7ffe67f8feb4,166143003,0,0x0,8
tick,0x7ffe67f8feb4,166158990,0,0x0,8
tick,0x7ffe67f8feb4,166175317,0,0x0,8
tick,0x7ffe67f8feb4,166190990,0,0x0,8
tick,0x7ffe67f8feb4,166207001,0,0x0,8
tick,0x7ffe67f8feb4,166223014,0,0x0,8
tick,0x7ffe67f8feb4,166239000,0,0x0,8
tick,0x7ffe67f8feb4,166255318,0,0x0,8
tick,0x7ffe67f8feb4,166271021,0,0x0,8
tick,0x7ffe67f8feb4,166287012,0,0x0,8
tick,0x7ffe67f8feb4,166302038,0,0x0,8
tick,0x7ffe67f8feb4,166318010,0,0x0,8
tick,0x7ffe67f8feb4,166334015,0,0x0,8
tick,0x7ffe67f8feb4,166350317,0,0x0,8
tick,0x7ffe67f8feb4,166366015,0,0x0,8
tick,0x7ffe67f8feb4,166382267,0,0x0,8
tick,0x7ffe67f8feb4,166398017,0,0x0,8
tick,0x7ffe67f8feb4,166414017,0,0x0,8
tick,0x7ffe67f8feb4,166430024,0,0x0,8
tick,0x7ffe67f8feb4,166446350,0,0x0,8
tick,0x7ffe67f8feb4,166462032,0,0x0,8
tick,0x7ffe67f8feb4,166477080,0,0x0,8
tick,0x7ffe67f8feb4,166493085,0,0x0,8
tick,0x7ffe67f8feb4,166509224,0,0x0,8
tick,0x7ffe67f8feb4,166525033,0,0x0,8
tick,0x7ffe67f8feb4,166541021,0,0x0,8
tick,0x7ffe67f8feb4,166557093,0,0x0,8
tick,0x7ffe67f8feb4,166572477,0,0x0,8
tick,0x7ffe67f8feb4,166587949,0,0x0,8
tick,0x7ffe67f8feb4,166603948,0,0x0,8
tick,0x7ffe67f8feb4,166619981,0,0x0,8
tick,0x7ffe67f8feb4,166635982,0,0x0,8
tick,0x7ffe67f8feb4,166651992,0,0x0,8
tick,0x7ffe67f8feb4,166667998,0,0x0,8
tick,0x7ffe67f8feb4,166684005,0,0x0,8
tick,0x7ffe67f8feb4,166700061,0,0x0,8
tick,0x7ffe67f8feb4,166716040,0,0x0,8
tick,0x7ffe67f8feb4,166732049,0,0x0,8
tick,0x7ffe67f8feb4,166748073,0,0x0,8
tick,0x7ffe67f8feb4,166764061,0,0x0,8
tick,0x7ffe67f8feb4,166780088,0,0x0,8
tick,0x7ffe67f8feb4,166796102,0,0x0,8
tick,0x7ffe67f8feb4,166812202,0,0x0,8
tick,0x7ffe67f8feb4,166828531,0,0x0,8
tick,0x7ffe67f8feb4,166842536,0,0x0,8
tick,0x7ffe67f8feb4,166858190,0,0x0,8
tick,0x7ffe67f8feb4,166874212,0,0x0,8
tick,0x7ffe67f8feb4,166890244,0,0x0,8
tick,0x7ffe67f8feb4,166906252,0,0x0,8
tick,0x7ffe67f8feb4,166922250,0,0x0,8
tick,0x7ffe67f8feb4,166938295,0,0x0,8
tick,0x7ffe67f8feb4,166954238,0,0x0,8
tick,0x7ffe67f8feb4,166970282,0,0x0,8
tick,0x7ffe67f8feb4,166986467,0,0x0,8
tick,0x7ffe67f8feb4,167002071,0,0x0,8
tick,0x7ffe67f8feb4,167018430,0,0x0,8
tick,0x7ffe67f8feb4,167034000,0,0x0,8
tick,0x7ffe67f8feb4,167050006,0,0x0,8
tick,0x7ffe67f8feb4,167066027,0,0x0,8
tick,0x7ffe67f8feb4,167082005,0,0x0,8
tick,0x7ffe67f8feb4,167098097,0,0x0,8
tick,0x7ffe67f8feb4,167114017,0,0x0,8
tick,0x7ffe67f8feb4,167129038,0,0x0,8
tick,0x7ffe67f8feb4,167145022,0,0x0,8
tick,0x7ffe67f8feb4,167161199,0,0x0,8
tick,0x7ffe67f8feb4,167176337,0,0x0,8
tick,0x7ffe67f8feb4,167192025,0,0x0,8
tick,0x7ffe67f8feb4,167208007,0,0x0,8
tick,0x7ffe67f8feb4,167224019,0,0x0,8
tick,0x7ffe67f8feb4,167240003,0,0x0,8
tick,0x7ffe67f8feb4,167256020,0,0x0,8
tick,0x7ffe67f8feb4,167272206,0,0x0,8
tick,0x7ffe67f8feb4,167288111,0,0x0,8
tick,0x7ffe67f8feb4,167304047,0,0x0,8
tick,0x7ffe67f8feb4,167320066,0,0x0,8
tick,0x7ffe67f8feb4,167336056,0,0x0,8
tick,0x7ffe67f8feb4,167352066,0,0x0,8
tick,0x7ffe67f8feb4,167368062,0,0x0,8
tick,0x7ffe67f8feb4,167384172,0,0x0,8
tick,0x7ffe67f8feb4,167400202,0,0x0,8
tick,0x7ffe67f8feb4,167416126,0,0x0,8
tick,0x7ffe67f8feb4,167431554,0,0x0,8
tick,0x7ffe67f8feb4,167447187,0,0x0,8
tick,0x7ffe67f8feb4,167462560,0,0x0,8
tick,0x7ffe67f8feb4,167478179,0,0x0,8
tick,0x7ffe67f8feb4,167493507,0,0x0,8
tick,0x7ffe67f8feb4,167509183,0,0x0,8
tick,0x7ffe67f8feb4,167525202,0,0x0,8
tick,0x7ffe67f8feb4,167540442,0,0x0,8
tick,0x7ffe67f8feb4,167556361,0,0x0,8
tick,0x7ffe67f8feb4,167571892,0,0x0,8
tick,0x7ffe67f8feb4,167587936,0,0x0,8
tick,0x7ffe67f8feb4,167603278,0,0x0,8
tick,0x7ffe67f8feb4,167618796,0,0x0,8
tick,0x7ffe67f8feb4,167634541,0,0x0,8
tick,0x7ffe67f8feb4,167650329,0,0x0,8
tick,0x7ffe67f8feb4,167666703,0,0x0,8
tick,0x7ffe67f8feb4,167682886,0,0x0,8
tick,0x7ffe67f8feb4,167698571,0,0x0,8
tick,0x7ffe67f8feb4,167714550,0,0x0,8
tick,0x7ffe67f8feb4,167730566,0,0x0,8
tick,0x7ffe67f8feb4,167745655,0,0x0,8
tick,0x7ffe67f8feb4,167761001,0,0x0,8
tick,0x7ffe67f8feb4,167776968,0,0x0,8
tick,0x7ffe67f8feb4,167792663,0,0x0,8
tick,0x7ffe67f8feb4,167808738,0,0x0,8
tick,0x7ffe67f8feb4,167824485,0,0x0,8
tick,0x7ffe67f8feb4,167839612,0,0x0,8
tick,0x7ffe67f8feb4,167855128,0,0x0,8
tick,0x7ffe67f8feb4,167870906,0,0x0,8
tick,0x7ffe67f8feb4,167886309,0,0x0,8
tick,0x7ffe67f8feb4,167901403,0,0x0,8
tick,0x7ffe67f8feb4,167916689,0,0x0,8
tick,0x7ffe67f8feb4,167932391,0,0x0,8
tick,0x7ffe67f8feb4,167948015,0,0x0,8
tick,0x7ffe67f8feb4,167964050,0,0x0,8
tick,0x7ffe67f8feb4,167979524,0,0x0,8
tick,0x7ffe67f8feb4,167995090,0,0x0,8
tick,0x7ffe67f8feb4,168010622,0,0x0,8
tick,0x7ffe67f8feb4,168026189,0,0x0,8
tick,0x7ffe67f8feb4,168042025,0,0x0,8
tick,0x7ffe67f8feb4,168057056,0,0x0,8
tick,0x7ffe67f8feb4,168073052,0,0x0,8
tick,0x7ffe67f8feb4,168089060,0,0x0,8
tick,0x7ffe67f8feb4,168105062,0,0x0,8
tick,0x7ffe67f8feb4,168121040,0,0x0,8
tick,0x7ffe67f8feb4,168136667,0,0x0,8
tick,0x7ffe67f8feb4,168152140,0,0x0,8
tick,0x7ffe67f8feb4,168168156,0,0x0,8
tick,0x7ffe67f8feb4,168183963,0,0x0,8
tick,0x7ffe67f8feb4,168199969,0,0x0,8
tick,0x7ffe67f8feb4,168215965,0,0x0,8
tick,0x7ffe67f8feb4,168231964,0,0x0,8
tick,0x7ffe67f8feb4,168247955,0,0x0,8
tick,0x7ffe67f8feb4,168263960,0,0x0,8
tick,0x7ffe67f8feb4,168279957,0,0x0,8
tick,0x7ffe67f8feb4,168295966,0,0x0,8
tick,0x7ffe67f8feb4,168311966,0,0x0,8
tick,0x7ffe67f8feb4,168328015,0,0x0,8
tick,0x7ffe67f8feb4,168343200,0,0x0,8
tick,0x7ffe67f8feb4,168359187,0,0x0,8
tick,0x7ffe67f8feb4,168375175,0,0x0,8
tick,0x7ffe67f8feb4,168391179,0,0x0,8
tick,0x7ffe67f8feb4,168407174,0,0x0,8
tick,0x7ffe67f8feb4,168423174,0,0x0,8
tick,0x7ffe67f8feb4,168439197,0,0x0,8
tick,0x7ffe67f8feb4,168455231,0,0x0,8
tick,0x7ffe67f8feb4,168471186,0,0x0,8
tick,0x7ffe67f8feb4,168487189,0,0x0,8
tick,0x7ffe67f8feb4,168503227,0,0x0,8
tick,0x7ffe67f8feb4,168519218,0,0x0,8
tick,0x7ffe67f8feb4,168535220,0,0x0,8
tick,0x7ffe67f8feb4,168551226,0,0x0,8
tick,0x7ffe67f8feb4,168566723,0,0x0,8
tick,0x7ffe67f8feb4,168582744,0,0x0,8
tick,0x7ffe67f8feb4,168598084,0,0x0,8
tick,0x7ffe67f8feb4,168614081,0,0x0,8
tick,0x7ffe67f8feb4,168629692,0,0x0,8
tick,0x7ffe67f8feb4,168644609,0,0x0,8
tick,0x7ffe67f8feb4,168660224,0,0x0,8
tick,0x7ffe67f8feb4,168676231,0,0x0,8
tick,0x7ffe67f8feb4,168692234,0,0x0,8
tick,0x7ffe67f8feb4,168708258,0,0x0,8
tick,0x7ffe67f8feb4,168724272,0,0x0,8
tick,0x7ffe67f8feb4,168740262,0,0x0,8
tick,0x7ffe67f8feb4,168756239,0,0x0,8
tick,0x7ffe67f8feb4,168772259,0,0x0,8
tick,0x7ffe67f8feb4,168788261,0,0x0,8
tick,0x7ffe67f8feb4,168804269,0,0x0,8
tick,0x7ffe67f8feb4,168820249,0,0x0,8
tick,0x7ffe67f8feb4,168836244,0,0x0,8
tick,0x7ffe67f8feb4,168852269,0,0x0,8
tick,0x7ffe67f8feb4,168868271,0,0x0,8
tick,0x7ffe67f8feb4,168884293,0,0x0,8
tick,0x7ffe67f8feb4,168900273,0,0x0,8
tick,0x7ffe67f8feb4,168915302,0,0x0,8
tick,0x7ffe67f8feb4,168931338,0,0x0,8
tick,0x7ffe67f8feb4,168947284,0,0x0,8
tick,0x7ffe67f8feb4,168963288,0,0x0,8
tick,0x7ffe67f8feb4,168978357,0,0x0,8
tick,0x7ffe67f8feb4,168994238,0,0x0,8
tick,0x7ffe67f8feb4,169009451,0,0x0,8
tick,0x7ffe67f8feb4,169025359,0,0x0,8
tick,0x7ffe67f8feb4,169041358,0,0x0,8
tick,0x7ffe67f8feb4,169057291,0,0x0,8
tick,0x7ffe67f8feb4,169072450,0,0x0,8
tick,0x7ffe67f8feb4,169088376,0,0x0,8
tick,0x7ffe67f8feb4,169103579,0,0x0,8
tick,0x7ffe67f8feb4,169118747,0,0x0,8
tick,0x7ffe67f8feb4,169134316,0,0x0,8
tick,0x7ffe67f8feb4,169150361,0,0x0,8
tick,0x7ffe67f8feb4,169166314,0,0x0,8
tick,0x7ffe67f8feb4,169182092,0,0x0,8
tick,0x7ffe67f8feb4,169197654,0,0x0,8
tick,0x7ffe67f8feb4,169213848,0,0x0,8
tick,0x7ffe67f8feb4,169228338,0,0x0,8
tick,0x7ffe67f8feb4,169244358,0,0x0,8
tick,0x7ffe67f8feb4,169260351,0,0x0,8
tick,0x7ffe67f8feb4,169276346,0,0x0,8
tick,0x7ffe67f8feb4,169292361,0,0x0,8
tick,0x7ffe67f8feb4,169308384,0,0x0,8
tick,0x7ffe67f8feb4,169323550,0,0x0,8
tick,0x7ffe67f8feb4,169339516,0,0x0,8
tick,0x7ffe67f8feb4,169355573,0,0x0,8
tick,0x7ffe67f8feb4,169371626,0,0x0,8
tick,0x7ffe67f8feb4,169387658,0,0x0,8
tick,0x7ffe67f8feb4,169403625,0,0x0,8
tick,0x7ffe67f8feb4,169419628,0,0x0,8
tick,0x7ffe67f8feb4,169435730,0,0x0,8
tick,0x7ffe67f8feb4,169451050,0,0x0,8
tick,0x7ffe67f8feb4,169467150,0,0x0,8
tick,0x7ffe67f8feb4,169482886,0,0x0,8
tick,0x7ffe67f8feb4,169498938,0,0x0,8
tick,0x7ffe67f8feb4,169514413,0,0x0,8
tick,0x7ffe67f8feb4,169530929,0,0x0,8
tick,0x7ffe67f8feb4,169545960,0,0x0,8
tick,0x7ffe67f8feb4,169561894,0,0x0,8
tick,0x7ffe67f8feb4,169578048,0,0x0,8
tick,0x7ffe67f8feb4,169593927,0,0x0,8
tick,0x7ffe67f8feb4,169609929,0,0x0,8
tick,0x7ffe67f8feb4,169625169,0,0x0,8
tick,0x7ffe67f8feb4,169641159,0,0x0,8
tick,0x7ffe67f8feb4,169656384,0,0x0,8
tick,0x7ffe67f8feb4,169672392,0,0x0,8
tick,0x7ffe67f8feb4,169688381,0,0x0,8
tick,0x7ffe67f8feb4,169704397,0,0x0,8
tick,0x7ffe67f8feb4,169720144,0,0x0,8
tick,0x7ffe67f8feb4,169735448,0,0x0,8
tick,0x7ffe67f8feb4,169751469,0,0x0,8
tick,0x7ffe67f8feb4,169767498,0,0x0,8
tick,0x7ffe67f8feb4,169782925,0,0x0,8
tick,0x7ffe67f8feb4,169798889,0,0x0,8
tick,0x7ffe67f8feb4,169814296,0,0x0,8
tick,0x7ffe67f8feb4,169829829,0,0x0,8
tick,0x7ffe67f8feb4,169845532,0,0x0,8
tick,0x7ffe67f8feb4,169861287,0,0x0,8
tick,0x7ffe67f8feb4,169876723,0,0x0,8
tick,0x7ffe67f8feb4,169892704,0,0x0,8
tick,0x7ffe67f8feb4,169908739,0,0x0,8
tick,0x7ffe67f8feb4,169924504,0,0x0,8
tick,0x7ffe67f8feb4,169940504,0,0x0,8
tick,0x7ffe67f8feb4,169955761,0,0x0,8
tick,0x7ffe67f8feb4,169971514,0,0x0,8
tick,0x7ffe67f8feb4,169987513,0,0x0,8
tick,0x7ffe67f8feb4,170002909,0,0x0,8
tick,0x7ffe67f8feb4,170018579,0,0x0,8
tick,0x7ffe67f8feb4,170034477,0,0x0,8
tick,0x7ffe67f8feb4,170050458,0,0x0,8
tick,0x7ffe67f8feb4,170066491,0,0x0,8
tick,0x7ffe67f8feb4,170082503,0,0x0,8
tick,0x7ffe67f8feb4,170098643,0,0x0,8
tick,0x7ffe67f8feb4,170114208,0,0x0,8
tick,0x7ffe67f8feb4,170129435,0,0x0,8
tick,0x7ffe67f8feb4,170145438,0,0x0,8
tick,0x7ffe67f8feb4,170161423,0,0x0,8
tick,0x7ffe67f8feb4,170177409,0,0x0,8
tick,0x7ffe67f8feb4,170193455,0,0x0,8
tick,0x7ffe67f8feb4,170209486,0,0x0,8
tick,0x7ffe67f8feb4,170225470,0,0x0,8
tick,0x7ffe67f8feb4,170241468,0,0x0,8
tick,0x7ffe67f8feb4,170257471,0,0x0,8
tick,0x7ffe67f8feb4,170273455,0,0x0,8
tick,0x7ffe67f8feb4,170289501,0,0x0,8
tick,0x7ffe67f8feb4,170305459,0,0x0,8
tick,0x7ffe67f8feb4,170321491,0,0x0,8
tick,0x7ffe67f8feb4,170337486,0,0x0,8
tick,0x7ffe67f8feb4,170353478,0,0x0,8
tick,0x7ffe67f8feb4,170369490,0,0x0,8
tick,0x7ffe67f8feb4,170385494,0,0x0,8
tick,0x7ffe67f8feb4,170401489,0,0x0,8
tick,0x7ffe67f8feb4,170417523,0,0x0,8
tick,0x7ffe67f8feb4,170433560,0,0x0,8
tick,0x7ffe67f8feb4,170449529,0,0x0,8
tick,0x7ffe67f8feb4,170465720,0,0x0,8
tick,0x7ffe67f8feb4,170481737,0,0x0,8
tick,0x7ffe67f8feb4,170496516,0,0x0,8
tick,0x7ffe67f8feb4,170511846,0,0x0,8
tick,0x7ffe67f8feb4,170527523,0,0x0,8
tick,0x7ffe67f8feb4,170543438,0,0x0,8
tick,0x7ffe67f8feb4,170559311,0,0x0,8
tick,0x7ffe67f8feb4,170574506,0,0x0,8
tick,0x7ffe67f8feb4,170590328,0,0x0,8
tick,0x7ffe67f8feb4,170605564,0,0x0,8
tick,0x7ffe67f8feb4,170621561,0,0x0,8
tick,0x7ffe67f8feb4,170637517,0,0x0,8
tick,0x7ffe67f8feb4,170653082,0,0x0,8
tick,0x7ffe67f8feb4,170668526,0,0x0,8
tick,0x7ffe67f8feb4,170684531,0,0x0,8
tick,0x7ffe67f8feb4,170700543,0,0x0,8
tick,0x7ffe67f8feb4,170715594,0,0x0,8
tick,0x7ffe67f8feb4,170731630,0,0x0,8
tick,0x7ffe67f8feb4,170747532,0,0x0,8
tick,0x7ffe67f8feb4,170763571,0,0x0,8
tick,0x7ffe67f8feb4,170778896,0,0x0,8
tick,0x7ffe67f8feb4,170794919,0,0x0,8
tick,0x7ffe67f8feb4,170810930,0,0x0,8
tick,0x7ffe67f8feb4,170826158,0,0x0,8
tick,0x7ffe67f8feb4,170842179,0,0x0,8
tick,0x7ffe67f8feb4,170858215,0,0x0,8
tick,0x7ffe67f8feb4,170873591,0,0x0,8
tick,0x7ffe67f8feb4,170889217,0,0x0,8
tick,0x7ffe67f8feb4,170905207,0,0x0,8
tick,0x7ffe67f8feb4,170921258,0,0x0,8
tick,0x7ffe67f8feb4,170937356,0,0x0,8
tick,0x7ffe67f8feb4,170952716,0,0x0,8
tick,0x7ffe67f8feb4,170968367,0,0x0,8
tick,0x7ffe67f8feb4,170983856,0,0x0,8
tick,0x7ffe67f8feb4,170999909,0,0x0,8
tick,0x7ffe67f8feb4,171015396,0,0x0,8
tick,0x7ffe67f8feb4,171030800,0,0x0,8
tick,0x7ffe67f8feb4,171046394,0,0x0,8
tick,0x7ffe67f8feb4,171062308,0,0x0,8
tick,0x7ffe67f8feb4,171077443,0,0x0,8
tick,0x7ffe67f8feb4,171092858,0,0x0,8
tick,0x7ffe67f8feb4,171108278,0,0x0,8
tick,0x7ffe67f8feb4,171124419,0,0x0,8
tick,0x7ffe67f8feb4,171139486,0,0x0,8
tick,0x7ffe67f8feb4,171158747,0,0x0,8
tick,0x7ffe67f8feb4,171170941,0,0x0,8
tick,0x7ffe67f8feb4,171186245,0,0x0,8
tick,0x7ffe67f8feb4,171201977,0,0x0,8
tick,0x7ffe67f8feb4,171217387,0,0x0,8
tick,0x7ffe67f8feb4,171233420,0,0x0,8
tick,0x7ffe67f8feb4,171249532,0,0x0,8
tick,0x7ffe67f8feb4,171265475,0,0x0,8
tick,0x7ffe67f8feb4,171281302,0,0x0,8
tick,0x7ffe67f8feb4,171297334,0,0x0,8
tick,0x7ffe67f8feb4,171313302,0,0x0,8
tick,0x7ffe67f8feb4,171329354,0,0x0,8
tick,0x7ffe67f8feb4,171344536,0,0x0,8
tick,0x7ffe67f8feb4,171360097,0,0x0,8
tick,0x7ffe67f8feb4,171375822,0,0x0,8
tick,0x7ffe67f8feb4,171391388,0,0x0,8
tick,0x7ffe67f8feb4,171406701,0,0x0,8
tick,0x7ffe67f8feb4,171422842,0,0x0,8
tick,0x7ffe67f8feb4,171438049,0,0x0,8
tick,0x7ffe67f8feb4,171454183,0,0x0,8
tick,0x7ffe67f8feb4,171469322,0,0x0,8
tick,0x7ffe67f8feb4,171484672,0,0x0,8
tick,0x7ffe67f8feb4,171499994,0,0x0,8
tick,0x7ffe67f8feb4,171515794,0,0x0,8
tick,0x7ffe67f8feb4,171530621,0,0x0,8
tick,0x7ffe67f8feb4,171545739,0,0x0,8
tick,0x7ffe67f8feb4,171561164,0,0x0,8
tick,0x7ffe67f8feb4,171577058,0,0x0,8
tick,0x7ffe67f8feb4,171592426,0,0x0,8
tick,0x7ffe67f8feb4,171608357,0,0x0,8
tick,0x7ffe67f8feb4,171623677,0,0x0,8
tick,0x7ffe67f8feb4,171639678,0,0x0,8
tick,0x7ffe67f8feb4,171655663,0,0x0,8
tick,0x7ffe67f8feb4,171671672,0,0x0,8
tick,0x7ffe67f8feb4,171687347,0,0x0,8
tick,0x7ffe67f8feb4,171703394,0,0x0,8
tick,0x7ffe67f8feb4,171719341,0,0x0,8
tick,0x7ffe67f8feb4,171735550,0,0x0,8
tick,0x7ffe67f8feb4,171751471,0,0x0,8
tick,0x7ffe67f8feb4,171766815,0,0x0,8
tick,0x7ffe67f8feb4,171782721,0,0x0,8
tick,0x7ffe67f8feb4,171798702,0,0x0,8
tick,0x7ffe67f8feb4,171814694,0,0x0,8
tick,0x7ffe67f8feb4,171830720,0,0x0,8
tick,0x7ffe67f8feb4,171846598,0,0x0,8
tick,0x7ffe67f8feb4,171862614,0,0x0,8
tick,0x7ffe67f8feb4,171878691,0,0x0,8
tick,0x7ffe67f8feb4,171894416,0,0x0,8
tick,0x7ffe67f8feb4,171909753,0,0x0,8
tick,0x7ffe67f8feb4,171925094,0,0x0,8
tick,0x7ffe67f8feb4,171940688,0,0x0,8
tick,0x7ffe67f8feb4,171956353,0,0x0,8
tick,0x7ffe67f8feb4,171972285,0,0x0,8
tick,0x7ffe67f8feb4,171987798,0,0x0,8
tick,0x7ffe67f8feb4,172003740,0,0x0,8
tick,0x7ffe67f8feb4,172019774,0,0x0,8
tick,0x7ffe67f8feb4,172035697,0,0x0,8
tick,0x7ffe67f8feb4,172051707,0,0x0,8
tick,0x7ffe67f8feb4,172067707,0,0x0,8
tick,0x7ffe67f8feb4,172083757,0,0x0,8
tick,0x7ffe67f8feb4,172098718,0,0x0,8
tick,0x7ffe67f8feb4,172113917,0,0x0,8
tick,0x7ffe67f8feb4,172129740,0,0x0,8
tick,0x7ffe67f8feb4,172145136,0,0x0,8
tick,0x7ffe67f8feb4,172160764,0,0x0,8
tick,0x7ffe67f8feb4,172176429,0,0x0,8
tick,0x7ffe67f8feb4,172192447,0,0x0,8
tick,0x7ffe67f8feb4,172208423,0,0x0,8
tick,0x7ffe67f8feb4,172224615,0,0x0,8
tick,0x7ffe67f8feb4,172240512,0,0x0,8
tick,0x7ffe67f8feb4,172256507,0,0x0,8
tick,0x7ffe67f8feb4,172273765,0,0x0,8
tick,0x7ffe67f8feb4,172292218,0,0x0,8
tick,0x7ffe67f8feb4,172307595,0,0x0,8
tick,0x7ffe67f8feb4,172320435,0,0x0,8
tick,0x7ffe67f8feb4,172336442,0,0x0,8
tick,0x7ffe67f8feb4,172357926,0,0x0,8
tick,0x7ffe67f8feb4,172368672,0,0x0,8
tick,0x7ffe67f8feb4,172385489,0,0x0,8
tick,0x7ffe67f8feb4,172400568,0,0x0,8
tick,0x7ffe67f8feb4,172416806,0,0x0,8
tick,0x7ffe67f8feb4,172431455,0,0x0,8
tick,0x7ffe67f8feb4,172447455,0,0x0,8
tick,0x7ffe67f8feb4,172462885,0,0x0,8
tick,0x7ffe67f8feb4,172478809,0,0x0,8
tick,0x7ffe67f8feb4,172494244,0,0x0,8
tick,0x7ffe67f8feb4,172509829,0,0x0,8
tick,0x7ffe67f8feb4,172525464,0,0x0,8
tick,0x7ffe67f8feb4,172541453,0,0x0,8
tick,0x7ffe67f8feb4,172557461,0,0x0,8
tick,0x7ffe67f8feb4,172573041,0,0x0,8
tick,0x7ffe67f8feb4,172588501,0,0x0,8
tick,0x7ffe67f8feb4,172604121,0,0x0,8
tick,0x7ffe67f8feb4,172619829,0,0x0,8
tick,0x7ffe67f8feb4,172635095,0,0x0,8
tick,0x7ffe67f8feb4,172651253,0,0x0,8
tick,0x7ffe67f8feb4,172667096,0,0x0,8
tick,0x7ffe67f8feb4,172683087,0,0x0,8
tick,0x7ffe67f8feb4,172699107,0,0x0,8
tick,0x7ffe67f8feb4,172715092,0,0x0,8
tick,0x7ffe67f8feb4,172731127,0,0x0,8
tick,0x7ffe67f8feb4,172747122,0,0x0,8
tick,0x7ffe67f8feb4,172763120,0,0x0,8
tick,0x7ffe67f8feb4,172778991,0,0x0,8
tick,0x7ffe67f8feb4,172794574,0,0x0,8
tick,0x7ffe67f8feb4,172810074,0,0x0,8
tick,0x7ffe67f8feb4,172826091,0,0x0,8
tick,0x7ffe67f8feb4,172842059,0,0x0,8
tick,0x7ffe67f8feb4,172858056,0,0x0,8
tick,0x7ffe67f8feb4,172873058,0,0x0,8
tick,0x7ffe67f8feb4,172889078,0,0x0,8
tick,0x7ffe67f8feb4,172905063,0,0x0,8
tick,0x7ffe67f8feb4,172921053,0,0x0,8
tick,0x7ffe67f8feb4,172937078,0,0x0,8
tick,0x7ffe67f8feb4,172953071,0,0x0,8
tick,0x7ffe67f8feb4,172969076,0,0x0,8
tick,0x7ffe67f8feb4,172984776,0,0x0,8
tick,0x7ffe67f8feb4,173000116,0,0x0,8
tick,0x7ffe67f8feb4,173015441,0,0x0,8
tick,0x7ffe67f8feb4,173031549,0,0x0,8
tick,0x7ffe67f8feb4,173047605,0,0x0,8
tick,0x7ffe67f8feb4,173063495,0,0x0,8
tick,0x7ffe67f8feb4,173078587,0,0x0,8
tick,0x7ffe67f8feb4,173094519,0,0x0,8
tick,0x7ffe67f8feb4,173110525,0,0x0,8
tick,0x7ffe67f8feb4,173126533,0,0x0,8
tick,0x7ffe67f8feb4,173141698,0,0x0,8
tick,0x7ffe67f8feb4,173157780,0,0x0,8
tick,0x7ffe67f8feb4,173173785,0,0x0,8
tick,0x7ffe67f8feb4,173189191,0,0x0,8
tick,0x7ffe67f8feb4,173205096,0,0x0,8
tick,0x7ffe67f8feb4,173220448,0,0x0,8
tick,0x7ffe67f8feb4,173235773,0,0x0,8
tick,0x7ffe67f8feb4,173251834,0,0x0,8
tick,0x7ffe67f8feb4,173267975,0,0x0,8
tick,0x7ffe67f8feb4,173283659,0,0x0,8
tick,0x7ffe67f8feb4,173299623,0,0x0,8
tick,0x7ffe67f8feb4,173315611,0,0x0,8
tick,0x7ffe67f8feb4,173331307,0,0x0,8
tick,0x7ffe67f8feb4,173346651,0,0x0,8
tick,0x7ffe67f8feb4,173362302,0,0x0,8
tick,0x7ffe67f8feb4,173377733,0,0x0,8
tick,0x7ffe67f8feb4,173393986,0,0x0,8
tick,0x7ffe67f8feb4,173409311,0,0x0,8
tick,0x7ffe67f8feb4,173424897,0,0x0,8
tick,0x7ffe67f8feb4,173440438,0,0x0,8
tick,0x7ffe67f8feb4,173456401,0,0x0,8
tick,0x7ffe67f8feb4,173472471,0,0x0,8
tick,0x7ffe67f8feb4,173488494,0,0x0,8
tick,0x7ffe67f8feb4,173504028,0,0x0,8
tick,0x7ffe67f8feb4,173519670,0,0x0,8
tick,0x7ffe67f8feb4,173535347,0,0x0,8
tick,0x7ffe67f8feb4,173551099,0,0x0,8
tick,0x7ffe67f8feb4,173566201,0,0x0,8
tick,0x7ffe67f8feb4,173581636,0,0x0,8
tick,0x7ffe67f8feb4,173597716,0,0x0,8
tick,0x7ffe67f8feb4,173612968,0,0x0,8
tick,0x7ffe67f8feb4,173628723,0,0x0,8
tick,0x7ffe67f8feb4,173644772,0,0x0,8
tick,0x7ffe67f8feb4,173660224,0,0x0,8
tick,0x7ffe67f8feb4,173676242,0,0x0,8
tick,0x7ffe67f8feb4,173691701,0,0x0,8
tick,0x7ffe67f8feb4,173707053,0,0x0,8
tick,0x7ffe67f8feb4,173722432,0,0x0,8
tick,0x7ffe67f8feb4,173737641,0,0x0,8
tick,0x7ffe67f8feb4,173753043,0,0x0,8
tick,0x7ffe67f8feb4,173769169,0,0x0,8
tick,0x7ffe67f8feb4,173784769,0,0x0,8
tick,0x7ffe67f8feb4,173799574,0,0x0,8
tick,0x7ffe67f8feb4,173815702,0,0x0,8
tick,0x7ffe67f8feb4,173830808,0,0x0,8
tick,0x7ffe67f8feb4,173846002,0,0x0,8
tick,0x7ffe67f8feb4,173861786,0,0x0,8
tick,0x7ffe67f8feb4,173877751,0,0x0,8
tick,0x7ffe67f8feb4,173893476,0,0x0,8
tick,0x7ffe67f8feb4,173909000,0,0x0,8
tick,0x7ffe67f8feb4,173924581,0,0x0,8
tick,0x7ffe67f8feb4,173940282,0,0x0,8
tick,0x7ffe67f8feb4,173956039,0,0x0,8
tick,0x7ffe67f8feb4,173971037,0,0x0,8
tick,0x7ffe67f8feb4,173986177,0,0x0,8
tick,0x7ffe67f8feb4,174002420,0,0x0,8
tick,0x7ffe67f8feb4,174018253,0,0x0,8
tick,0x7ffe67f8feb4,174033296,0,0x0,8
tick,0x7ffe67f8feb4,174049204,0,0x0,8
tick,0x7ffe67f8feb4,174064768,0,0x0,8
tick,0x7ffe67f8feb4,174079922,0,0x0,8
tick,0x7ffe67f8feb4,174095805,0,0x0,8
tick,0x7ffe67f8feb4,174110834,0,0x0,8
tick,0x7ffe67f8feb4,174126802,0,0x0,8
tick,0x7ffe67f8feb4,174141813,0,0x0,8
tick,0x7ffe67f8feb4,174157051,0,0x0,8
tick,0x7ffe67f8feb4,174173047,0,0x0,8
tick,0x7ffe67f8feb4,174189056,0,0x0,8
tick,0x7ffe67f8feb4,174205043,0,0x0,8
tick,0x7ffe67f8feb4,174221035,0,0x0,8
tick,0x7ffe67f8feb4,174237042,0,0x0,8
tick,0x7ffe67f8feb4,174253126,0,0x0,8
tick,0x7ffe67f8feb4,174269084,0,0x0,8
tick,0x7ffe67f8feb4,174285321,0,0x0,8
tick,0x7ffe67f8feb4,174301048,0,0x0,8
tick,0x7ffe67f8feb4,174317025,0,0x0,8
tick,0x7ffe67f8feb4,174333021,0,0x0,8
tick,0x7ffe67f8feb4,174349030,0,0x0,8
tick,0x7ffe67f8feb4,174364219,0,0x0,8
tick,0x7ffe67f8feb4,174380235,0,0x0,8
tick,0x7ffe67f8feb4,174396225,0,0x0,8
tick,0x7ffe67f8feb4,174412262,0,0x0,8
tick,0x7ffe67f8feb4,174428257,0,0x0,8
tick,0x7ffe67f8feb4,174443422,0,0x0,8
tick,0x7ffe67f8feb4,174459423,0,0x0,8
tick,0x7ffe67f8feb4,174474937,0,0x0,8
tick,0x7ffe67f8feb4,174490404,0,0x0,8
tick,0x7ffe67f8feb4,174506004,0,0x0,8
tick,0x7ffe67f8feb4,174521746,0,0x0,8
tick,0x7ffe67f8feb4,174537229,0,0x0,8
tick,0x7ffe67f8feb4,174553167,0,0x0,8
tick,0x7ffe67f8feb4,174569279,0,0x0,8
tick,0x7ffe67f8feb4,174584255,0,0x0,8
tick,0x7ffe67f8feb4,174599587,0,0x0,8
tick,0x7ffe67f8feb4,174615102,0,0x0,8
tick,0x7ffe67f8feb4,174630348,0,0x0,8
tick,0x7ffe67f8feb4,174645829,0,0x0,8
tick,0x7ffe67f8feb4,174661882,0,0x0,8
tick,0x7ffe67f8feb4,174677448,0,0x0,8
tick,0x7ffe67f8feb4,174692958,0,0x0,8
tick,0x7ffe67f8feb4,174708107,0,0x0,8
tick,0x7ffe67f8feb4,174723833,0,0x0,8
tick,0x7ffe67f8feb4,174739229,0,0x0,8
tick,0x7ffe67f8feb4,174754638,0,0x0,8
tick,0x7ffe67f8feb4,174770712,0,0x0,8
tick,0x7ffe67f8feb4,174786731,0,0x0,8
tick,0x7ffe67f8feb4,174802388,0,0x0,8
tick,0x7ffe67f8feb4,174818167,0,0x0,8
tick,0x7ffe67f8feb4,174833724,0,0x0,8
tick,0x7ffe67f8feb4,174849489,0,0x0,8
tick,0x7ffe67f8feb4,174864848,0,0x0,8
tick,0x7ffe67f8feb4,174880628,0,0x0,8
tick,0x7ffe67f8feb4,174895739,0,0x0,8
tick,0x7ffe67f8feb4,174911140,0,0x0,8
tick,0x7ffe67f8feb4,174926758,0,0x0,8
tick,0x7ffe67f8feb4,174942534,0,0x0,8
tick,0x7ffe67f8feb4,174958333,0,0x0,8
tick,0x7ffe67f8feb4,174974358,0,0x0,8
tick,0x7ffe67f8feb4,174990336,0,0x0,8
tick,0x7ffe67f8feb4,175005515,0,0x0,8
tick,0x7ffe67f8feb4,175021582,0,0x0,8
tick,0x7ffe67f8feb4,175036912,0,0x0,8
tick,0x7ffe67f8feb4,175052694,0,0x0,8
tick,0x7ffe67f8feb4,175067881,0,0x0,8
tick,0x7ffe67f8feb4,175083520,0,0x0,8
tick,0x7ffe67f8feb4,175098789,0,0x0,8
tick,0x7ffe67f8feb4,175114553,0,0x0,8
tick,0x7ffe67f8feb4,175129811,0,0x0,8
tick,0x7ffe67f8feb4,175145947,0,0x0,8
tick,0x7ffe67f8feb4,175161594,0,0x0,8
tick,0x7ffe67f8feb4,175177010,0,0x0,8
tick,0x7ffe67f8feb4,175192360,0,0x0,8
tick,0x7ffe67f8feb4,175207693,0,0x0,8
tick,0x7ffe67f8feb4,175222901,0,0x0,8
tick,0x7ffe67f8feb4,175238531,0,0x0,8
tick,0x7ffe67f8feb4,175254850,0,0x0,8
tick,0x7ffe67f8feb4,175270787,0,0x0,8
tick,0x7ffe67f8feb4,175286599,0,0x0,8
tick,0x7ffe67f8feb4,175301598,0,0x0,8
tick,0x7ffe67f8feb4,175317575,0,0x0,8
tick,0x7ffe67f8feb4,175333555,0,0x0,8
tick,0x7ffe67f8feb4,175349555,0,0x0,8
tick,0x7ffe67f8feb4,175365014,0,0x0,8
tick,0x7ffe67f8feb4,175380692,0,0x0,8
tick,0x7ffe67f8feb4,175396659,0,0x0,8
tick,0x7ffe67f8feb4,175411939,0,0x0,8
tick,0x7ffe67f8feb4,175427707,0,0x0,8
tick,0x7ffe67f8feb4,175443456,0,0x0,8
tick,0x7ffe67f8feb4,175458509,0,0x0,8
tick,0x7ffe67f8feb4,175474051,0,0x0,8
tick,0x7ffe67f8feb4,175490016,0,0x0,8
tick,0x7ffe67f8feb4,175505090,0,0x0,8
tick,0x7ffe67f8feb4,175521085,0,0x0,8
tick,0x7ffe67f8feb4,175536336,0,0x0,8
tick,0x7ffe67f8feb4,175551269,0,0x0,8
tick,0x7ffe67f8feb4,175567283,0,0x0,8
tick,0x7ffe67f8feb4,175583271,0,0x0,8
tick,0x7ffe67f8feb4,175598311,0,0x0,8
tick,0x7ffe67f8feb4,175614309,0,0x0,8
tick,0x7ffe67f8feb4,175629296,0,0x0,8
tick,0x7ffe67f8feb4,175644385,0,0x0,8
tick,0x7ffe67f8feb4,175660300,0,0x0,8
tick,0x7ffe67f8feb4,175676041,0,0x0,8
tick,0x7ffe67f8feb4,175692079,0,0x0,8
tick,0x7ffe67f8feb4,175707058,0,0x0,8
tick,0x7ffe67f8feb4,175722317,0,0x0,8
tick,0x7ffe67f8feb4,175738331,0,0x0,8
tick,0x7ffe67f8feb4,175753399,0,0x0,8
tick,0x7ffe67f8feb4,175769301,0,0x0,8
tick,0x7ffe67f8feb4,175785300,0,0x0,8
tick,0x7ffe67f8feb4,175801160,0,0x0,8
tick,0x7ffe67f8feb4,175816291,0,0x0,8
tick,0x7ffe67f8feb4,175832304,0,0x0,8
tick,0x7ffe67f8feb4,175848316,0,0x0,8
tick,0x7ffe67f8feb4,175864303,0,0x0,8
tick,0x7ffe67f8feb4,175880307,0,0x0,8
tick,0x7ffe67f8feb4,175896342,0,0x0,8
tick,0x7ffe67f8feb4,175912336,0,0x0,8
tick,0x7ffe67f8feb4,175928320,0,0x0,8
tick,0x7ffe67f8feb4,175944343,0,0x0,8
tick,0x7ffe67f8feb4,175959621,0,0x0,8
tick,0x7ffe67f8feb4,175975328,0,0x0,8
tick,0x7ffe67f8feb4,175991335,0,0x0,8
tick,0x7ffe67f8feb4,176007372,0,0x0,8
tick,0x7ffe67f8feb4,176022561,0,0x0,8
tick,0x7ffe67f8feb4,176038656,0,0x0,8
tick,0x7ffe67f8feb4,176053524,0,0x0,8
tick,0x7ffe67f8feb4,176069364,0,0x0,8
tick,0x7ffe67f8feb4,176085405,0,0x0,8
tick,0x7ffe67f8feb4,176101384,0,0x0,8
tick,0x7ffe67f8feb4,176117404,0,0x0,8
tick,0x7ffe67f8feb4,176133410,0,0x0,8
tick,0x7ffe67f8feb4,176149411,0,0x0,8
tick,0x7ffe67f8feb4,176165452,0,0x0,8
tick,0x7ffe67f8feb4,176181358,0,0x0,8
tick,0x7ffe67f8feb4,176197404,0,0x0,8
tick,0x7ffe67f8feb4,176213407,0,0x0,8
tick,0x7ffe67f8feb4,176229382,0,0x0,8
tick,0x7ffe67f8feb4,176244983,0,0x0,8
tick,0x7ffe67f8feb4,176260400,0,0x0,8
tick,0x7ffe67f8feb4,176276413,0,0x0,8
tick,0x7ffe67f8feb4,176291898,0,0x0,8
tick,0x7ffe67f8feb4,176307855,0,0x0,8
tick,0x7ffe67f8feb4,176322878,0,0x0,8
tick,0x7ffe67f8feb4,176338868,0,0x0,8
tick,0x7ffe67f8feb4,176354887,0,0x0,8
tick,0x7ffe67f8feb4,176371223,0,0x0,8
tick,0x7ffe67f8feb4,176385865,0,0x0,8
tick,0x7ffe67f8feb4,176401892,0,0x0,8
tick,0x7ffe67f8feb4,176417884,0,0x0,8
tick,0x7ffe67f8feb4,176433879,0,0x0,8
tick,0x7ffe67f8feb4,176449004,0,0x0,8
tick,0x7ffe67f8feb4,176464923,0,0x0,8
tick,0x7ffe67f8feb4,176480906,0,0x0,8
tick,0x7ffe67f8feb4,176495956,0,0x0,8
tick,0x7ffe67f8feb4,176511639,0,0x0,8
tick,0x7ffe67f8feb4,176527360,0,0x0,8
tick,0x7ffe67f8feb4,176542966,0,0x0,8
tick,0x7ffe67f8feb4,176559006,0,0x0,8
tick,0x7ffe67f8feb4,176574987,0,0x0,8
tick,0x7ffe67f8feb4,176591029,0,0x0,8
tick,0x7ffe67f8feb4,176607066,0,0x0,8
tick,0x7ffe67f8feb4,176623044,0,0x0,8
tick,0x7ffe67f8feb4,176638287,0,0x0,8
tick,0x7ffe67f8feb4,176653964,0,0x0,8
tick,0x7ffe67f8feb4,176669638,0,0x0,8
tick,0x7ffe67f8feb4,176685855,0,0x0,8
tick,0x7ffe67f8feb4,176701292,0,0x0,8
tick,0x7ffe67f8feb4,176716653,0,0x0,8
tick,0x7ffe67f8feb4,176732590,0,0x0,8
tick,0x7ffe67f8feb4,176748210,0,0x0,8
tick,0x7ffe67f8feb4,176763559,0,0x0,8
tick,0x7ffe67f8feb4,176778697,0,0x0,8
tick,0x7ffe67f8feb4,176794429,0,0x0,8
tick,0x7ffe67f8feb4,176809581,0,0x0,8
tick,0x7ffe67f8feb4,176825741,0,0x0,8
tick,0x7ffe67f8feb4,176840965,0,0x0,8
tick,0x7ffe67f8feb4,176856929,0,0x0,8
tick,0x7ffe67f8feb4,176872583,0,0x0,8
tick,0x7ffe67f8feb4,176887856,0,0x0,8
tick,0x7ffe67f8feb4,176903921,0,0x0,8
tick,0x7ffe67f8feb4,176919599,0,0x0,8
tick,0x7ffe67f8feb4,176935319,0,0x0,8
tick,0x7ffe67f8feb4,176951350,0,0x0,8
tick,0x7ffe67f8feb4,176966873,0,0x0,8
tick,0x7ffe67f8feb4,176982564,0,0x0,8
tick,0x7ffe67f8feb4,176997757,0,0x0,8
tick,0x7ffe67f8feb4,177013256,0,0x0,8
tick,0x7ffe67f8feb4,177029272,0,0x0,8
tick,0x7ffe67f8feb4,177044504,0,0x0,8
tick,0x7ffe67f8feb4,177059909,0,0x0,8
tick,0x7ffe67f8feb4,177075258,0,0x0,8
tick,0x7ffe67f8feb4,177090334,0,0x0,8
tick,0x7ffe67f8feb4,177106358,0,0x0,8
tick,0x7ffe67f8feb4,177122318,0,0x0,8
tick,0x7ffe67f8feb4,177138376,0,0x0,8
tick,0x7ffe67f8feb4,177154333,0,0x0,8
tick,0x7ffe67f8feb4,177169903,0,0x0,8
tick,0x7ffe67f8feb4,177184909,0,0x0,8
tick,0x7ffe67f8feb4,177200609,0,0x0,8
tick,0x7ffe67f8feb4,177216598,0,0x0,8
tick,0x7ffe67f8feb4,177231723,0,0x0,8
tick,0x7ffe67f8feb4,177247750,0,0x0,8
tick,0x7ffe67f8feb4,177263725,0,0x0,8
tick,0x7ffe67f8feb4,177279284,0,0x0,8
tick,0x7ffe67f8feb4,177294868,0,0x0,8
tick,0x7ffe67f8feb4,177310864,0,0x0,8
tick,0x7ffe67f8feb4,177326878,0,0x0,8
tick,0x7ffe67f8feb4,177342879,0,0x0,8
tick,0x7ffe67f8feb4,177358223,0,0x0,8
tick,0x7ffe67f8feb4,177373556,0,0x0,8
tick,0x7ffe67f8feb4,177389354,0,0x0,8
tick,0x7ffe67f8feb4,177405432,0,0x0,8
tick,0x7ffe67f8feb4,177420558,0,0x0,8
tick,0x7ffe67f8feb4,177436578,0,0x0,8
tick,0x7ffe67f8feb4,177452229,0,0x0,8
tick,0x7ffe67f8feb4,177468097,0,0x0,8
tick,0x7ffe67f8feb4,177484121,0,0x0,8
tick,0x7ffe67f8feb4,177499519,0,0x0,8
tick,0x7ffe67f8feb4,177514667,0,0x0,8
tick,0x7ffe67f8feb4,177530128,0,0x0,8
tick,0x7ffe67f8feb4,177545181,0,0x0,8
tick,0x7ffe67f8feb4,177560652,0,0x0,8
tick,0x7ffe67f8feb4,177575984,0,0x0,8
tick,0x7ffe67f8feb4,177591297,0,0x0,8
tick,0x7ffe67f8feb4,177606973,0,0x0,8
tick,0x7ffe67f8feb4,177622974,0,0x0,8
tick,0x7ffe67f8feb4,177638251,0,0x0,8
tick,0x7ffe67f8feb4,177653701,0,0x0,8
tick,0x7ffe67f8feb4,177669057,0,0x0,8
tick,0x7ffe67f8feb4,177684984,0,0x0,8
tick,0x7ffe67f8feb4,177701038,0,0x0,8
tick,0x7ffe67f8feb4,177716193,0,0x0,8
tick,0x7ffe67f8feb4,177731655,0,0x0,8
tick,0x7ffe67f8feb4,177747447,0,0x0,8
tick,0x7ffe67f8feb4,177762684,0,0x0,8
tick,0x7ffe67f8feb4,177778599,0,0x0,8
tick,0x7ffe67f8feb4,177794995,0,0x0,8
tick,0x7ffe67f8feb4,177810280,0,0x0,8
tick,0x7ffe67f8feb4,177825804,0,0x0,8
tick,0x7ffe67f8feb4,177841057,0,0x0,8
tick,0x7ffe67f8feb4,177857456,0,0x0,8
tick,0x7ffe67f8feb4,177873500,0,0x0,8
tick,0x7ffe67f8feb4,177888960,0,0x0,8
tick,0x7ffe67f8feb4,177904676,0,0x0,8
tick,0x7ffe67f8feb4,177920063,0,0x0,8
tick,0x7ffe67f8feb4,177935515,0,0x0,8
tick,0x7ffe67f8feb4,177951393,0,0x0,8
tick,0x7ffe67f8feb4,177967543,0,0x0,8
tick,0x7ffe67f8feb4,177983519,0,0x0,8
tick,0x7ffe67f8feb4,177999301,0,0x0,8
tick,0x7ffe67f8feb4,178015315,0,0x0,8
tick,0x7ffe67f8feb4,178031112,0,0x0,8
tick,0x7ffe67f8feb4,178046333,0,0x0,8
tick,0x7ffe67f8feb4,178062338,0,0x0,8
tick,0x7ffe67f8feb4,178078328,0,0x0,8
tick,0x7ffe67f8feb4,178094164,0,0x0,8
tick,0x7ffe67f8feb4,178109870,0,0x0,8
tick,0x7ffe67f8feb4,178125898,0,0x0,8
tick,0x7ffe67f8feb4,178140988,0,0x0,8
tick,0x7ffe67f8feb4,178156704,0,0x0,8
tick,0x7ffe67f8feb4,178172106,0,0x0,8
tick,0x7ffe67f8feb4,178187987,0,0x0,8
tick,0x7ffe67f8feb4,178203130,0,0x0,8
tick,0x7ffe67f8feb4,178219172,0,0x0,8
tick,0x7ffe67f8feb4,178234424,0,0x0,8
tick,0x7ffe67f8feb4,178249764,0,0x0,8
tick,0x7ffe67f8feb4,178265460,0,0x0,8
tick,0x7ffe67f8feb4,178280654,0,0x0,8
tick,0x7ffe67f8feb4,178295812,0,0x0,8
tick,0x7ffe67f8feb4,178311527,0,0x0,8
tick,0x7ffe67f8feb4,178327766,0,0x0,8
tick,0x7ffe67f8feb4,178343533,0,0x0,8
tick,0x7ffe67f8feb4,178359534,0,0x0,8
tick,0x7ffe67f8feb4,178374550,0,0x0,8
tick,0x7ffe67f8feb4,178390194,0,0x0,8
tick,0x7ffe67f8feb4,178405638,0,0x0,8
tick,0x7ffe67f8feb4,178421578,0,0x0,8
tick,0x7ffe67f8feb4,178436552,0,0x0,8
tick,0x7ffe67f8feb4,178452184,0,0x0,8
tick,0x7ffe67f8feb4,178467535,0,0x0,8
tick,0x7ffe67f8feb4,178483634,0,0x0,8
tick,0x7ffe67f8feb4,178498866,0,0x0,8
tick,0x7ffe67f8feb4,178514840,0,0x0,8
tick,0x7ffe67f8feb4,178529884,0,0x0,8
tick,0x7ffe67f8feb4,178544953,0,0x0,8
tick,0x7ffe67f8feb4,178560877,0,0x0,8
tick,0x7ffe67f8feb4,178576900,0,0x0,8
tick,0x7ffe67f8feb4,178592414,0,0x0,8
tick,0x7ffe67f8feb4,178608094,0,0x0,8
tick,0x7ffe67f8feb4,178623838,0,0x0,8
tick,0x7ffe67f8feb4,178639456,0,0x0,8
tick,0x7ffe67f8feb4,178654951,0,0x0,8
tick,0x7ffe67f8feb4,178670267,0,0x0,8
tick,0x7ffe67f8feb4,178685768,0,0x0,8
tick,0x7ffe67f8feb4,178701354,0,0x0,8
tick,0x7ffe67f8feb4,178716309,0,0x0,8
tick,0x7ffe67f8feb4,178731731,0,0x0,8
tick,0x7ffe67f8feb4,178747127,0,0x0,8
tick,0x7ffe67f8feb4,178763560,0,0x0,8
tick,0x7ffe67f8feb4,178778981,0,0x0,8
tick,0x7ffe67f8feb4,178793989,0,0x0,8
tick,0x7ffe67f8feb4,178809115,0,0x0,8
tick,0x7ffe67f8feb4,178825479,0,0x0,8
tick,0x7ffe67f8feb4,178841218,0,0x0,8
tick,0x7ffe67f8feb4,178857365,0,0x0,8
tick,0x7ffe67f8feb4,178873352,0,0x0,8
tick,0x7ffe67f8feb4,178888917,0,0x0,8
tick,0x7ffe67f8feb4,178904551,0,0x0,8
tick,0x7ffe67f8feb4,178920172,0,0x0,8
tick,0x7ffe67f8feb4,178935521,0,0x0,8
tick,0x7ffe67f8feb4,178951326,0,0x0,8
tick,0x7ffe67f8feb4,178966716,0,0x0,8
tick,0x7ffe67f8feb4,178982698,0,0x0,8
tick,0x7ffe67f8feb4,178998806,0,0x0,8
tick,0x7ffe67f8feb4,179014848,0,0x0,8
tick,0x7ffe67f8feb4,179030808,0,0x0,8
tick,0x7ffe67f8feb4,179046549,0,0x0,8
tick,0x7ffe67f8feb4,179061622,0,0x0,8
tick,0x7ffe67f8feb4,179077433,0,0x0,8
tick,0x7ffe67f8feb4,179092768,0,0x0,8
tick,0x7ffe67f8feb4,179108263,0,0x0,8
tick,0x7ffe67f8feb4,179124191,0,0x0,8
tick,0x7ffe67f8feb4,179140235,0,0x0,8
tick,0x7ffe67f8feb4,179155720,0,0x0,8
tick,0x7ffe67f8feb4,179170871,0,0x0,8
tick,0x7ffe67f8feb4,179186842,0,0x0,8
tick,0x7ffe67f8feb4,179202686,0,0x0,8
tick,0x7ffe67f8feb4,179218752,0,0x0,8
tick,0x7ffe67f8feb4,179234797,0,0x0,8
tick,0x7ffe67f8feb4,179250750,0,0x0,8
tick,0x7ffe67f8feb4,179266824,0,0x0,8
tick,0x7ffe67f8feb4,179282851,0,0x0,8
tick,0x7ffe67f8feb4,179297984,0,0x0,8
tick,0x7ffe67f8feb4,179313692,0,0x0,8
tick,0x7ffe67f8feb4,179329691,0,0x0,8
tick,0x7ffe67f8feb4,179345245,0,0x0,8
tick,0x7ffe67f8feb4,179360890,0,0x0,8
tick,0x7ffe67f8feb4,179376245,0,0x0,8
tick,0x7ffe67f8feb4,179392091,0,0x0,8
tick,0x7ffe67f8feb4,179407615,0,0x0,8
tick,0x7ffe67f8feb4,179423067,0,0x0,8
tick,0x7ffe67f8feb4,179439113,0,0x0,8
tick,0x7ffe67f8feb4,179455171,0,0x0,8
tick,0x7ffe67f8feb4,179470793,0,0x0,8
tick,0x7ffe67f8feb4,179486120,0,0x0,8
tick,0x7ffe67f8feb4,179502144,0,0x0,8
tick,0x7ffe67f8feb4,179517364,0,0x0,8
tick,0x7ffe67f8feb4,179532488,0,0x0,8
tick,0x7ffe67f8feb4,179547839,0,0x0,8
tick,0x7ffe67f8feb4,179562838,0,0x0,8
tick,0x7ffe67f8feb4,179578683,0,0x0,8
tick,0x7ffe67f8feb4,179594499,0,0x0,8
tick,0x7ffe67f8feb4,179610253,0,0x0,8
tick,0x7ffe67f8feb4,179625990,0,0x0,8
tick,0x7ffe67f8feb4,179641618,0,0x0,8
tick,0x7ffe67f8feb4,179657606,0,0x0,8
tick,0x7ffe67f8feb4,179673479,0,0x0,8
tick,0x7ffe67f8feb4,179689420,0,0x0,8
tick,0x7ffe67f8feb4,179704717,0,0x0,8
tick,0x7ffe67f8feb4,179720641,0,0x0,8
tick,0x7ffe67f8feb4,179736412,0,0x0,8
tick,0x7ffe67f8feb4,179752463,0,0x0,8
tick,0x7ffe67f8feb4,179767719,0,0x0,8
tick,0x7ffe67f8feb4,179782852,0,0x0,8
tick,0x7ffe67f8feb4,179798828,0,0x0,8
tick,0x7ffe67f8feb4,179815849,0,0x0,8
tick,0x7ffe67f8feb4,179830513,0,0x0,8
tick,0x7ffe67f8feb4,179846377,0,0x0,8
tick,0x7ffe67f8feb4,179862167,0,0x0,8
tick,0x7ffe67f8feb4,179878057,0,0x0,8
tick,0x7ffe67f8feb4,179893499,0,0x0,8
tick,0x7ffe67f8feb4,179908701,0,0x0,8
tick,0x7ffe67f8feb4,179924800,0,0x0,8
tick,0x7ffe67f8feb4,179939939,0,0x0,8
tick,0x7ffe67f8feb4,179955922,0,0x0,8
tick,0x7ffe67f8feb4,179971989,0,0x0,8
tick,0x7ffe67f8feb4,179987561,0,0x0,8
tick,0x7ffe67f8feb4,180003674,0,0x0,8
tick,0x7ffe67f8feb4,180019636,0,0x0,8
tick,0x7ffe67f8feb4,180035607,0,0x0,8
tick,0x7ffe67f8feb4,180051663,0,0x0,8
tick,0x7ffe67f8feb4,180067606,0,0x0,8
tick,0x7ffe67f8feb4,180083707,0,0x0,8
tick,0x7ffe67f8feb4,180099529,0,0x0,8
tick,0x7ffe67f8feb4,180117097,0,0x0,8
tick,0x7ffe67f8feb4,180131949,0,0x0,8
tick,0x7ffe67f8feb4,180150749,0,0x0,8
tick,0x7ffe67f8feb4,180163624,0,0x0,8
tick,0x7ffe67f8feb4,180179761,0,0x0,8
tick,0x7ffe67f8feb4,180195717,0,0x0,8
tick,0x7ffe67f8feb4,180211219,0,0x0,8
tick,0x7ffe67f8feb4,180226897,0,0x0,8
tick,0x7ffe67f8feb4,180242535,0,0x0,8
tick,0x7ffe67f8feb4,180258402,0,0x0,8
tick,0x7ffe67f8feb4,180274441,0,0x0,8
tick,0x7ffe67f8feb4,180289754,0,0x0,8
tick,0x7ffe67f8feb4,180304819,0,0x0,8
tick,0x7ffe67f8feb4,180320777,0,0x0,8
tick,0x7ffe67f8feb4,180336815,0,0x0,8
tick,0x7ffe67f8feb4,180352482,0,0x0,8
tick,0x7ffe67f8feb4,180367752,0,0x0,8
tick,0x7ffe67f8feb4,180383772,0,0x0,8
tick,0x7ffe67f8feb4,180399326,0,0x0,8
tick,0x7ffe67f8feb4,180414309,0,0x0,8
tick,0x7ffe67f8feb4,180429894,0,0x0,8
tick,0x7ffe67f8feb4,180445675,0,0x0,8
tick,0x7ffe67f8feb4,180461254,0,0x0,8
tick,0x7ffe67f8feb4,180476416,0,0x0,8
tick,0x7ffe67f8feb4,180491873,0,0x0,8
tick,0x7ffe67f8feb4,180507151,0,0x0,8
tick,0x7ffe67f8feb4,180523109,0,0x0,8
tick,0x7ffe67f8feb4,180538434,0,0x0,8
tick,0x7ffe67f8feb4,180554156,0,0x0,8
tick,0x7ffe67f8feb4,180569266,0,0x0,8
tick,0x7ffe67f8feb4,180584845,0,0x0,8
tick,0x7ffe67f8feb4,180600461,0,0x0,8
tick,0x7ffe67f8feb4,180615728,0,0x0,8
tick,0x7ffe67f8feb4,180631571,0,0x0,8
tick,0x7ffe67f8feb4,180647587,0,0x0,8
tick,0x7ffe67f8feb4,180663265,0,0x0,8
tick,0x7ffe67f8feb4,180679030,0,0x0,8
tick,0x7ffe67f8feb4,180695013,0,0x0,8
tick,0x7ffe67f8feb4,180710984,0,0x0,8
tick,0x7ffe67f8feb4,180726134,0,0x0,8
tick,0x7ffe67f8feb4,180741875,0,0x0,8
tick,0x7ffe67f8feb4,180757687,0,0x0,8
tick,0x7ffe67f8feb4,180772877,0,0x0,8
tick,0x7ffe67f8feb4,180788896,0,0x0,8
tick,0x7ffe67f8feb4,180804836,0,0x0,8
tick,0x7ffe67f8feb4,180820358,0,0x0,8
tick,0x7ffe67f8feb4,180836428,0,0x0,8
tick,0x7ffe67f8feb4,180852348,0,0x0,8
tick,0x7ffe67f8feb4,180867840,0,0x0,8
tick,0x7ffe67f8feb4,180883021,0,0x0,8
tick,0x7ffe67f8feb4,180898174,0,0x0,8
tick,0x7ffe67f8feb4,180914022,0,0x0,8
tick,0x7ffe67f8feb4,180929977,0,0x0,8
tick,0x7ffe67f8feb4,180945484,0,0x0,8
tick,0x7ffe67f8feb4,180961516,0,0x0,8
tick,0x7ffe67f8feb4,180976939,0,0x0,8
tick,0x7ffe67f8feb4,180992768,0,0x0,8
tick,0x7ffe67f8feb4,181008171,0,0x0,8
tick,0x7ffe67f8feb4,181024181,0,0x0,8
tick,0x7ffe67f8feb4,181039599,0,0x0,8
tick,0x7ffe67f8feb4,181054826,0,0x0,8
tick,0x7ffe67f8feb4,181070831,0,0x0,8
tick,0x7ffe67f8feb4,181086281,0,0x0,8
tick,0x7ffe67f8feb4,181101893,0,0x0,8
tick,0x7ffe67f8feb4,181117549,0,0x0,8
tick,0x7ffe67f8feb4,181133501,0,0x0,8
tick,0x7ffe67f8feb4,181149536,0,0x0,8
tick,0x7ffe67f8feb4,181164834,0,0x0,8
tick,0x7ffe67f8feb4,181180719,0,0x0,8
tick,0x7ffe67f8feb4,181196368,0,0x0,8
tick,0x7ffe67f8feb4,181211595,0,0x0,8
tick,0x7ffe67f8feb4,181227688,0,0x0,8
tick,0x7ffe67f8feb4,181243635,0,0x0,8
tick,0x7ffe67f8feb4,181259582,0,0x0,8
tick,0x7ffe67f8feb4,181274782,0,0x0,8
tick,0x7ffe67f8feb4,181289975,0,0x0,8
tick,0x7ffe67f8feb4,181305235,0,0x0,8
tick,0x7ffe67f8feb4,181321167,0,0x0,8
tick,0x7ffe67f8feb4,181337255,0,0x0,8
tick,0x7ffe67f8feb4,181352969,0,0x0,8
tick,0x7ffe67f8feb4,181368961,0,0x0,8
tick,0x7ffe67f8feb4,181384189,0,0x0,8
tick,0x7ffe67f8feb4,181399180,0,0x0,8
tick,0x7ffe67f8feb4,181414528,0,0x0,8
tick,0x7ffe67f8feb4,181430405,0,0x0,8
tick,0x7ffe67f8feb4,181445375,0,0x0,8
tick,0x7ffe67f8feb4,181460914,0,0x0,8
tick,0x7ffe67f8feb4,181476555,0,0x0,8
tick,0x7ffe67f8feb4,181492390,0,0x0,8
tick,0x7ffe67f8feb4,181507910,0,0x0,8
tick,0x7ffe67f8feb4,181523227,0,0x0,8
tick,0x7ffe67f8feb4,181538567,0,0x0,8
tick,0x7ffe67f8feb4,181553567,0,0x0,8
tick,0x7ffe67f8feb4,181568658,0,0x0,8
tick,0x7ffe67f8feb4,181584042,0,0x0,8
tick,0x7ffe67f8feb4,181599752,0,0x0,8
tick,0x7ffe67f8feb4,181615069,0,0x0,8
tick,0x7ffe67f8feb4,181631048,0,0x0,8
tick,0x7ffe67f8feb4,181646265,0,0x0,8
tick,0x7ffe67f8feb4,181662101,0,0x0,8
tick,0x7ffe67f8feb4,181677461,0,0x0,8
tick,0x7ffe67f8feb4,181692757,0,0x0,8
tick,0x7ffe67f8feb4,181708168,0,0x0,8
tick,0x7ffe67f8feb4,181723416,0,0x0,8
tick,0x7ffe67f8feb4,181738985,0,0x0,8
tick,0x7ffe67f8feb4,181754529,0,0x0,8
tick,0x7ffe67f8feb4,181769682,0,0x0,8
tick,0x7ffe67f8feb4,181785438,0,0x0,8
tick,0x7ffe67f8feb4,181800606,0,0x0,8
tick,0x7ffe67f8feb4,181816590,0,0x0,8
tick,0x7ffe67f8feb4,181831990,0,0x0,8
tick,0x7ffe67f8feb4,181847990,0,0x0,8
tick,0x7ffe67f8feb4,181863466,0,0x0,8
tick,0x7ffe67f8feb4,181878848,0,0x0,8
tick,0x7ffe67f8feb4,181894104,0,0x0,8
tick,0x7ffe67f8feb4,181910304,0,0x0,8
tick,0x7ffe67f8feb4,181926036,0,0x0,8
tick,0x7ffe67f8feb4,181941538,0,0x0,8
tick,0x7ffe67f8feb4,181958486,0,0x0,8
tick,0x7ffe67f8feb4,181973554,0,0x0,8
tick,0x7ffe67f8feb4,181989141,0,0x0,8
tick,0x7ffe67f8feb4,182005122,0,0x0,8
tick,0x7ffe67f8feb4,182020473,0,0x0,8
tick,0x7ffe67f8feb4,182036499,0,0x0,8
tick,0x7ffe67f8feb4,182051863,0,0x0,8
tick,0x7ffe67f8feb4,182067516,0,0x0,8
tick,0x7ffe67f8feb4,182082787,0,0x0,8
tick,0x7ffe67f8feb4,182098143,0,0x0,8
tick,0x7ffe67f8feb4,182113339,0,0x0,8
tick,0x7ffe67f8feb4,182129424,0,0x0,8
tick,0x7ffe67f8feb4,182145471,0,0x0,8
tick,0x7ffe67f8feb4,182161478,0,0x0,8
tick,0x7ffe67f8feb4,182177474,0,0x0,8
tick,0x7ffe67f8feb4,182192507,0,0x0,8
tick,0x7ffe67f8feb4,182208519,0,0x0,8
tick,0x7ffe67f8feb4,182223708,0,0x0,8
tick,0x7ffe67f8feb4,182239600,0,0x0,8
tick,0x7ffe67f8feb4,182255600,0,0x0,8
tick,0x7ffe67f8feb4,182271138,0,0x0,8
tick,0x7ffe67f8feb4,182286739,0,0x0,8
tick,0x7ffe67f8feb4,182302728,0,0x0,8
tick,0x7ffe67f8feb4,182318728,0,0x0,8
tick,0x7ffe67f8feb4,182335155,0,0x0,8
tick,0x7ffe67f8feb4,182350707,0,0x0,8
tick,0x7ffe67f8feb4,182366164,0,0x0,8
tick,0x7ffe67f8feb4,182382316,0,0x0,8
tick,0x7ffe67f8feb4,182398249,0,0x0,8
tick,0x7ffe67f8feb4,182414172,0,0x0,8
tick,0x7ffe67f8feb4,182430182,0,0x0,8
tick,0x7ffe67f8feb4,182445177,0,0x0,8
tick,0x7ffe67f8feb4,182460961,0,0x0,8
tick,0x7ffe67f8feb4,182477026,0,0x0,8
tick,0x7ffe67f8feb4,182492614,0,0x0,8
tick,0x7ffe67f8feb4,182508576,0,0x0,8
tick,0x7ffe67f8feb4,182524668,0,0x0,8
tick,0x7ffe67f8feb4,182540573,0,0x0,8
tick,0x7ffe67f8feb4,182556133,0,0x0,8
tick,0x7ffe67f8feb4,182572011,0,0x0,8
tick,0x7ffe67f8feb4,182587987,0,0x0,8
tick,0x7ffe67f8feb4,182603166,0,0x0,8
tick,0x7ffe67f8feb4,182619328,0,0x0,8
tick,0x7ffe67f8feb4,182635185,0,0x0,8
tick,0x7ffe67f8feb4,182651309,0,0x0,8
tick,0x7ffe67f8feb4,182672056,0,0x0,8
tick,0x7ffe67f8feb4,182684082,0,0x0,8
tick,0x7ffe67f8feb4,182699166,0,0x0,8
tick,0x7ffe67f8feb4,182715242,0,0x0,8
tick,0x7ffe67f8feb4,182731175,0,0x0,8
tick,0x7ffe67f8feb4,182747232,0,0x0,8
tick,0x7ffe67f8feb4,182762662,0,0x0,8
tick,0x7ffe67f8feb4,182777804,0,0x0,8
tick,0x7ffe67f8feb4,182793839,0,0x0,8
tick,0x7ffe67f8feb4,182808997,0,0x0,8
tick,0x7ffe67f8feb4,182824450,0,0x0,8
tick,0x7ffe67f8feb4,182840220,0,0x0,8
tick,0x7ffe67f8feb4,182856354,0,0x0,8
tick,0x7ffe67f8feb4,182872389,0,0x0,8
tick,0x7ffe67f8feb4,182888194,0,0x0,8
tick,0x7ffe67f8feb4,182904567,0,0x0,8
tick,0x7ffe67f8feb4,182920289,0,0x0,8
tick,0x7ffe67f8feb4,182936210,0,0x0,8
tick,0x7ffe67f8feb4,182952205,0,0x0,8
tick,0x7ffe67f8feb4,182968213,0,0x0,8
tick,0x7ffe67f8feb4,182984314,0,0x0,8
tick,0x7ffe67f8feb4,183000353,0,0x0,8
tick,0x7ffe67f8feb4,183016211,0,0x0,8
tick,0x7ffe67f8feb4,183032245,0,0x0,8
tick,0x7ffe67f8feb4,183047892,0,0x0,8
tick,0x7ffe67f8feb4,183063211,0,0x0,8
tick,0x7ffe67f8feb4,183078510,0,0x0,8
tick,0x7ffe67f8feb4,183094674,0,0x0,8
tick,0x7ffe67f8feb4,183110632,0,0x0,8
tick,0x7ffe67f8feb4,183126184,0,0x0,8
tick,0x7ffe67f8feb4,183142023,0,0x0,8
tick,0x7ffe67f8feb4,183158053,0,0x0,8
tick,0x7ffe67f8feb4,183173728,0,0x0,8
tick,0x7ffe67f8feb4,183188827,0,0x0,8
tick,0x7ffe67f8feb4,183204560,0,0x0,8
tick,0x7ffe67f8feb4,183220555,0,0x0,8
tick,0x7ffe67f8feb4,183236313,0,0x0,8
tick,0x7ffe67f8feb4,183252323,0,0x0,8
tick,0x7ffe67f8feb4,183268341,0,0x0,8
tick,0x7ffe67f8feb4,183283552,0,0x0,8
tick,0x7ffe67f8feb4,183299521,0,0x0,8
tick,0x7ffe67f8feb4,183315606,0,0x0,8
tick,0x7ffe67f8feb4,183331501,0,0x0,8
tick,0x7ffe67f8feb4,183347471,0,0x0,8
tick,0x7ffe67f8feb4,183363488,0,0x0,8
tick,0x7ffe67f8feb4,183379392,0,0x0,8
tick,0x7ffe67f8feb4,183395536,0,0x0,8
tick,0x7ffe67f8feb4,183412833,0,0x0,8
tick,0x7ffe67f8feb4,183427042,0,0x0,8
tick,0x7ffe67f8feb4,183442545,0,0x0,8
tick,0x7ffe67f8feb4,183458478,0,0x0,8
tick,0x7ffe67f8feb4,183478173,0,0x0,8
tick,0x7ffe67f8feb4,183490440,0,0x0,8
tick,0x7ffe67f8feb4,183505570,0,0x0,8
tick,0x7ffe67f8feb4,183521593,0,0x0,8
tick,0x7ffe67f8feb4,183537612,0,0x0,8
tick,0x7ffe67f8feb4,183553405,0,0x0,8
tick,0x7ffe67f8feb4,183568587,0,0x0,8
tick,0x7ffe67f8feb4,183584641,0,0x0,8
tick,0x7ffe67f8feb4,183601082,0,0x0,8
tick,0x7ffe67f8feb4,183616669,0,0x0,8
tick,0x7ffe67f8feb4,183632117,0,0x0,8
tick,0x7ffe67f8feb4,183647985,0,0x0,8
tick,0x7ffe67f8feb4,183664488,0,0x0,8
tick,0x7ffe67f8feb4,183679988,0,0x0,8
tick,0x7ffe67f8feb4,183696566,0,0x0,8
tick,0x7ffe67f8feb4,183712394,0,0x0,8
tick,0x7ffe67f8feb4,183729200,0,0x0,8
tick,0x7ffe67f8feb4,183745228,0,0x0,8
tick,0x7ffe67f8feb4,183759506,0,0x0,8
tick,0x7ffe67f8feb4,183775454,0,0x0,8
tick,0x7ffe67f8feb4,183791050,0,0x0,8
tick,0x7ffe67f8feb4,183806363,0,0x0,8
tick,0x7ffe67f8feb4,183822351,0,0x0,8
tick,0x7ffe67f8feb4,183838369,0,0x0,8
tick,0x7ffe67f8feb4,183853847,0,0x0,8
tick,0x7ffe67f8feb4,183869540,0,0x0,8
tick,0x7ffe67f8feb4,183884392,0,0x0,8
tick,0x7ffe67f8feb4,183899808,0,0x0,8
tick,0x7ffe67f8feb4,183915802,0,0x0,8
tick,0x7ffe67f8feb4,183931786,0,0x0,8
tick,0x7ffe67f8feb4,183946904,0,0x0,8
tick,0x7ffe67f8feb4,183962122,0,0x0,8
tick,0x7ffe67f8feb4,183977606,0,0x0,8
tick,0x7ffe67f8feb4,183993588,0,0x0,8
tick,0x7ffe67f8feb4,184009042,0,0x0,8
tick,0x7ffe67f8feb4,184024994,0,0x0,8
tick,0x7ffe67f8feb4,184040249,0,0x0,8
tick,0x7ffe67f8feb4,184056258,0,0x0,8
tick,0x7ffe67f8feb4,184071553,0,0x0,8
tick,0x7ffe67f8feb4,184086853,0,0x0,8
tick,0x7ffe67f8feb4,184102275,0,0x0,8
tick,0x7ffe67f8feb4,184117714,0,0x0,8
tick,0x7ffe67f8feb4,184132936,0,0x0,8
tick,0x7ffe67f8feb4,184148421,0,0x0,8
tick,0x7ffe67f8feb4,184164289,0,0x0,8
tick,0x7ffe67f8feb4,184179982,0,0x0,8
tick,0x7ffe67f8feb4,184196013,0,0x0,8
tick,0x7ffe67f8feb4,184212174,0,0x0,8
tick,0x7ffe67f8feb4,184226916,0,0x0,8
tick,0x7ffe67f8feb4,184242992,0,0x0,8
tick,0x7ffe67f8feb4,184259079,0,0x0,8
tick,0x7ffe67f8feb4,184274198,0,0x0,8
tick,0x7ffe67f8feb4,184290222,0,0x0,8
tick,0x7ffe67f8feb4,184305688,0,0x0,8
tick,0x7ffe67f8feb4,184321835,0,0x0,8
tick,0x7ffe67f8feb4,184337780,0,0x0,8
tick,0x7ffe67f8feb4,184353808,0,0x0,8
tick,0x7ffe67f8feb4,184369667,0,0x0,8
tick,0x7ffe67f8feb4,184385591,0,0x0,8
tick,0x7ffe67f8feb4,184401597,0,0x0,8
tick,0x7ffe67f8feb4,184417901,0,0x0,8
tick,0x7ffe67f8feb4,184433601,0,0x0,8
tick,0x7ffe67f8feb4,184448792,0,0x0,8
tick,0x7ffe67f8feb4,184464771,0,0x0,8
tick,0x7ffe67f8feb4,184480541,0,0x0,8
tick,0x7ffe67f8feb4,184496389,0,0x0,8
tick,0x7ffe67f8feb4,184513322,0,0x0,8
tick,0x7ffe67f8feb4,184528274,0,0x0,8
tick,0x7ffe67f8feb4,184544186,0,0x0,8
tick,0x7ffe67f8feb4,184560195,0,0x0,8
tick,0x7ffe67f8feb4,184576049,0,0x0,8
tick,0x7ffe67f8feb4,184592159,0,0x0,8
tick,0x7ffe67f8feb4,184607972,0,0x0,8
tick,0x7ffe67f8feb4,184623714,0,0x0,8
tick,0x7ffe67f8feb4,184638973,0,0x0,8
tick,0x7ffe67f8feb4,184654598,0,0x0,8
tick,0x7ffe67f8feb4,184669914,0,0x0,8
tick,0x7ffe67f8feb4,184685214,0,0x0,8
tick,0x7ffe67f8feb4,184700996,0,0x0,8
tick,0x7ffe67f8feb4,184716834,0,0x0,8
tick,0x7ffe67f8feb4,184732477,0,0x0,8
tick,0x7ffe67f8feb4,184748372,0,0x0,8
tick,0x7ffe67f8feb4,184764289,0,0x0,8
tick,0x7ffe67f8feb4,184780154,0,0x0,8
tick,0x7ffe67f8feb4,184796315,0,0x0,8
tick,0x7ffe67f8feb4,184812379,0,0x0,8
tick,0x7ffe67f8feb4,184827650,0,0x0,8
tick,0x7ffe67f8feb4,184843675,0,0x0,8
tick,0x7ffe67f8feb4,184859330,0,0x0,8
tick,0x7ffe67f8feb4,184874571,0,0x0,8
tick,0x7ffe67f8feb4,184889765,0,0x0,8
tick,0x7ffe67f8feb4,184905827,0,0x0,8
tick,0x7ffe67f8feb4,184921746,0,0x0,8
tick,0x7ffe67f8feb4,184937052,0,0x0,8
tick,0x7ffe67f8feb4,184952528,0,0x0,8
tick,0x7ffe67f8feb4,184968534,0,0x0,8
tick,0x7ffe67f8feb4,184984544,0,0x0,8
tick,0x7ffe67f8feb4,184999721,0,0x0,8
tick,0x7ffe67f8feb4,185014874,0,0x0,8
tick,0x7ffe67f8feb4,185030474,0,0x0,8
tick,0x7ffe67f8feb4,185045802,0,0x0,8
tick,0x7ffe67f8feb4,185061575,0,0x0,8
tick,0x7ffe67f8feb4,185077653,0,0x0,8
tick,0x7ffe67f8feb4,185092980,0,0x0,8
tick,0x7ffe67f8feb4,185108872,0,0x0,8
tick,0x7ffe67f8feb4,185124711,0,0x0,8
tick,0x7ffe67f8feb4,185140193,0,0x0,8
tick,0x7ffe67f8feb4,185155400,0,0x0,8
tick,0x7ffe67f8feb4,185170843,0,0x0,8
tick,0x7ffe67f8feb4,185185973,0,0x0,8
tick,0x7ffe67f8feb4,185201627,0,0x0,8
tick,0x7ffe67f8feb4,185217618,0,0x0,8
tick,0x7ffe67f8feb4,185233608,0,0x0,8
tick,0x7ffe67f8feb4,185249601,0,0x0,8
tick,0x7ffe67f8feb4,185265596,0,0x0,8
tick,0x7ffe67f8feb4,185281600,0,0x0,8
tick,0x7ffe67f8feb4,185296999,0,0x0,8
tick,0x7ffe67f8feb4,185313083,0,0x0,8
tick,0x7ffe67f8feb4,185328972,0,0x0,8
tick,0x7ffe67f8feb4,185344980,0,0x0,8
tick,0x7ffe67f8feb4,185361037,0,0x0,8
tick,0x7ffe67f8feb4,185376996,0,0x0,8
tick,0x7ffe67f8feb4,185392990,0,0x0,8
tick,0x7ffe67f8feb4,185409008,0,0x0,8
tick,0x7ffe67f8feb4,185425012,0,0x0,8
tick,0x7ffe67f8feb4,185441021,0,0x0,8
tick,0x7ffe67f8feb4,185457156,0,0x0,8
tick,0x7ffe67f8feb4,185472219,0,0x0,8
tick,0x7ffe67f8feb4,185488208,0,0x0,8
tick,0x7ffe67f8feb4,185504241,0,0x0,8
tick,0x7ffe67f8feb4,185520182,0,0x0,8
tick,0x7ffe67f8feb4,185536165,0,0x0,8
tick,0x7ffe67f8feb4,185552221,0,0x0,8
tick,0x7ffe67f8feb4,185567526,0,0x0,8
tick,0x7ffe67f8feb4,185583503,0,0x0,8
tick,0x7ffe67f8feb4,185599575,0,0x0,8
tick,0x7ffe67f8feb4,185615553,0,0x0,8
tick,0x7ffe67f8feb4,185631512,0,0x0,8
tick,0x7ffe67f8feb4,185647526,0,0x0,8
tick,0x7ffe67f8feb4,185663519,0,0x0,8
tick,0x7ffe67f8feb4,185679534,0,0x0,8
tick,0x7ffe67f8feb4,185695551,0,0x0,8
tick,0x7ffe67f8feb4,185711514,0,0x0,8
tick,0x7ffe67f8feb4,185727537,0,0x0,8
tick,0x7ffe67f8feb4,185743562,0,0x0,8
tick,0x7ffe67f8feb4,185759539,0,0x0,8
tick,0x7ffe67f8feb4,185775530,0,0x0,8
tick,0x7ffe67f8feb4,185791541,0,0x0,8
tick,0x7ffe67f8feb4,185807525,0,0x0,8
tick,0x7ffe67f8feb4,185823533,0,0x0,8
tick,0x7ffe67f8feb4,185839397,0,0x0,8
tick,0x7ffe67f8feb4,185855071,0,0x0,8
tick,0x7ffe67f8feb4,185871243,0,0x0,8
tick,0x7ffe67f8feb4,185886302,0,0x0,8
tick,0x7ffe67f8feb4,185901809,0,0x0,8
tick,0x7ffe67f8feb4,185917008,0,0x0,8
tick,0x7ffe67f8feb4,185932882,0,0x0,8
tick,0x7ffe67f8feb4,185947658,0,0x0,8
tick,0x7ffe67f8feb4,185963157,0,0x0,8
tick,0x7ffe67f8feb4,185978318,0,0x0,8
tick,0x7ffe67f8feb4,185994152,0,0x0,8
tick,0x7ffe67f8feb4,186009923,0,0x0,8
tick,0x7ffe67f8feb4,186025506,0,0x0,8
tick,0x7ffe67f8feb4,186041491,0,0x0,8
tick,0x7ffe67f8feb4,186056729,0,0x0,8
tick,0x7ffe67f8feb4,186072834,0,0x0,8
tick,0x7ffe67f8feb4,186088310,0,0x0,8
tick,0x7ffe67f8feb4,186103919,0,0x0,8
tick,0x7ffe67f8feb4,186119058,0,0x0,8
tick,0x7ffe67f8feb4,186134613,0,0x0,8
tick,0x7ffe67f8feb4,186150636,0,0x0,8
tick,0x7ffe67f8feb4,186166645,0,0x0,8
tick,0x7ffe67f8feb4,186182688,0,0x0,8
tick,0x7ffe67f8feb4,186198610,0,0x0,8
tick,0x7ffe67f8feb4,186214685,0,0x0,8
tick,0x7ffe67f8feb4,186229696,0,0x0,8
tick,0x7ffe67f8feb4,186245750,0,0x0,8
tick,0x7ffe67f8feb4,186261794,0,0x0,8
tick,0x7ffe67f8feb4,186277242,0,0x0,8
tick,0x7ffe67f8feb4,186292500,0,0x0,8
tick,0x7ffe67f8feb4,186307954,0,0x0,8
tick,0x7ffe67f8feb4,186323728,0,0x0,8
tick,0x7ffe67f8feb4,186339696,0,0x0,8
tick,0x7ffe67f8feb4,186355687,0,0x0,8
tick,0x7ffe67f8feb4,186371560,0,0x0,8
tick,0x7ffe67f8feb4,186387185,0,0x0,8
tick,0x7ffe67f8feb4,186403221,0,0x0,8
tick,0x7ffe67f8feb4,186419181,0,0x0,8
tick,0x7ffe67f8feb4,186435186,0,0x0,8
tick,0x7ffe67f8feb4,186450907,0,0x0,8
tick,0x7ffe67f8feb4,186466830,0,0x0,8
tick,0x7ffe67f8feb4,186482145,0,0x0,8
tick,0x7ffe67f8feb4,186497784,0,0x0,8
tick,0x7ffe67f8feb4,186513472,0,0x0,8
tick,0x7ffe67f8feb4,186529222,0,0x0,8
tick,0x7ffe67f8feb4,186545013,0,0x0,8
tick,0x7ffe67f8feb4,186561013,0,0x0,8
tick,0x7ffe67f8feb4,186576455,0,0x0,8
tick,0x7ffe67f8feb4,186591750,0,0x0,8
tick,0x7ffe67f8feb4,186607817,0,0x0,8
tick,0x7ffe67f8feb4,186623019,0,0x0,8
tick,0x7ffe67f8feb4,186639024,0,0x0,8
tick,0x7ffe67f8feb4,186654760,0,0x0,8
tick,0x7ffe67f8feb4,186670632,0,0x0,8
tick,0x7ffe67f8feb4,186686670,0,0x0,8
tick,0x7ffe67f8feb4,186702573,0,0x0,8
tick,0x7ffe67f8feb4,186717954,0,0x0,8
tick,0x7ffe67f8feb4,186734045,0,0x0,8
tick,0x7ffe67f8feb4,186749959,0,0x0,8
tick,0x7ffe67f8feb4,186766034,0,0x0,8
tick,0x7ffe67f8feb4,186781560,0,0x0,8
tick,0x7ffe67f8feb4,186797162,0,0x0,8
tick,0x7ffe67f8feb4,186812506,0,0x0,8
tick,0x7ffe67f8feb4,186827775,0,0x0,8
tick,0x7ffe67f8feb4,186843761,0,0x0,8
tick,0x7ffe67f8feb4,186859754,0,0x0,8
tick,0x7ffe67f8feb4,186875780,0,0x0,8
tick,0x7ffe67f8feb4,186891238,0,0x0,8
tick,0x7ffe67f8feb4,186906754,0,0x0,8
tick,0x7ffe67f8feb4,186922277,0,0x0,8
tick,0x7ffe67f8feb4,186937929,0,0x0,8
tick,0x7ffe67f8feb4,186953601,0,0x0,8
tick,0x7ffe67f8feb4,186969615,0,0x0,8
tick,0x7ffe67f8feb4,186985611,0,0x0,8
tick,0x7ffe67f8feb4,187001520,0,0x0,8
tick,0x7ffe67f8feb4,187017526,0,0x0,8
tick,0x7ffe67f8feb4,187033180,0,0x0,8
tick,0x7ffe67f8feb4,187048598,0,0x0,8
tick,0x7ffe67f8feb4,187064794,0,0x0,8
tick,0x7ffe67f8feb4,187080400,0,0x0,8
tick,0x7ffe67f8feb4,187095956,0,0x0,8
tick,0x7ffe67f8feb4,187111553,0,0x0,8
tick,0x7ffe67f8feb4,187127463,0,0x0,8
tick,0x7ffe67f8feb4,187143471,0,0x0,8
tick,0x7ffe67f8feb4,187158748,0,0x0,8
tick,0x7ffe67f8feb4,187174777,0,0x0,8
tick,0x7ffe67f8feb4,187190409,0,0x0,8
tick,0x7ffe67f8feb4,187206263,0,0x0,8
tick,0x7ffe67f8feb4,187222159,0,0x0,8
tick,0x7ffe67f8feb4,187237451,0,0x0,8
tick,0x7ffe67f8feb4,187253095,0,0x0,8
tick,0x7ffe67f8feb4,187273823,0,0x0,8
tick,0x7ffe67f8feb4,187289107,0,0x0,8
tick,0x7ffe67f8feb4,187302757,0,0x0,8
tick,0x7ffe67f8feb4,187319692,0,0x0,8
tick,0x7ffe67f8feb4,187334837,0,0x0,8
tick,0x7ffe67f8feb4,187350493,0,0x0,8
tick,0x7ffe67f8feb4,187364114,0,0x0,8
tick,0x7ffe67f8feb4,187380402,0,0x0,8
tick,0x7ffe67f8feb4,187407823,0,0x0,8
tick,0x7ffe67f8feb4,187412737,0,0x0,8
tick,0x7ffe67f8feb4,187428493,0,0x0,8
tick,0x7ffe67f8feb4,187443585,0,0x0,8
tick,0x7ffe67f8feb4,187459168,0,0x0,8
tick,0x7ffe67f8feb4,187475147,0,0x0,8
tick,0x7ffe67f8feb4,187491666,0,0x0,8
tick,0x7ffe67f8feb4,187507236,0,0x0,8
tick,0x7ffe67f8feb4,187522709,0,0x0,8
tick,0x7ffe67f8feb4,187537830,0,0x0,8
tick,0x7ffe67f8feb4,187553536,0,0x0,8
tick,0x7ffe67f8feb4,187568737,0,0x0,8
tick,0x7ffe67f8feb4,187584980,0,0x0,8
tick,0x7ffe67f8feb4,187600747,0,0x0,8
tick,0x7ffe67f8feb4,187617091,0,0x0,8
tick,0x7ffe67f8feb4,187631166,0,0x0,8
tick,0x7ffe67f8feb4,187646813,0,0x0,8
tick,0x7ffe67f8feb4,187661725,0,0x0,8
tick,0x7ffe67f8feb4,187677524,0,0x0,8
tick,0x7ffe67f8feb4,187692944,0,0x0,8
tick,0x7ffe67f8feb4,187708092,0,0x0,8
tick,0x7ffe67f8feb4,187724025,0,0x0,8
tick,0x7ffe67f8feb4,187739521,0,0x0,8
tick,0x7ffe67f8feb4,187755233,0,0x0,8
tick,0x7ffe67f8feb4,187770900,0,0x0,8
tick,0x7ffe67f8feb4,187786859,0,0x0,8
tick,0x7ffe67f8feb4,187803159,0,0x0,8
tick,0x7ffe67f8feb4,187818750,0,0x0,8
tick,0x7ffe67f8feb4,187835316,0,0x0,8
tick,0x7ffe67f8feb4,187850814,0,0x0,8
tick,0x7ffe67f8feb4,187867242,0,0x0,8
tick,0x7ffe67f8feb4,187881482,0,0x0,8
tick,0x7ffe67f8feb4,187898052,0,0x0,8
tick,0x7ffe67f8feb4,187913511,0,0x0,8
tick,0x7ffe67f8feb4,187929580,0,0x0,8
tick,0x7ffe67f8feb4,187945646,0,0x0,8
tick,0x7ffe67f8feb4,187964535,0,0x0,8
tick,0x7ffe67f8feb4,187978645,0,0x0,8
tick,0x7ffe67f8feb4,187993505,0,0x0,8
tick,0x7ffe67f8feb4,188009967,0,0x0,8
tick,0x7ffe67f8feb4,188025561,0,0x0,8
tick,0x7ffe67f8feb4,188041671,0,0x0,8
tick,0x7ffe67f8feb4,188057701,0,0x0,8
tick,0x7ffe67f8feb4,188073653,0,0x0,8
tick,0x7ffe67f8feb4,188089801,0,0x0,8
tick,0x7ffe67f8feb4,188105849,0,0x0,8
tick,0x7ffe67f8feb4,188121596,0,0x0,8
tick,0x7ffe67f8feb4,188137812,0,0x0,8
tick,0x7ffe67f8feb4,188154054,0,0x0,8
tick,0x7ffe67f8feb4,188169593,0,0x0,8
tick,0x7ffe67f8feb4,188184975,0,0x0,8
tick,0x7ffe67f8feb4,188200599,0,0x0,8
tick,0x7ffe67f8feb4,188216507,0,0x0,8
tick,0x7ffe67f8feb4,188231627,0,0x0,8
tick,0x7ffe67f8feb4,188247256,0,0x0,8
tick,0x7ffe67f8feb4,188263229,0,0x0,8
tick,0x7ffe67f8feb4,188282764,0,0x0,8
tick,0x7ffe67f8feb4,188295150,0,0x0,8
tick,0x7ffe67f8feb4,188310232,0,0x0,8
tick,0x7ffe67f8feb4,188326413,0,0x0,8
tick,0x7ffe67f8feb4,188341239,0,0x0,8
tick,0x7ffe67f8feb4,188357257,0,0x0,8
tick,0x7ffe67f8feb4,188373265,0,0x0,8
tick,0x7ffe67f8feb4,188389274,0,0x0,8
tick,0x7ffe67f8feb4,188405258,0,0x0,8
tick,0x7ffe67f8feb4,188421244,0,0x0,8
tick,0x7ffe67f8feb4,188437363,0,0x0,8
tick,0x7ffe67f8feb4,188453248,0,0x0,8
tick,0x7ffe67f8feb4,188469250,0,0x0,8
tick,0x7ffe67f8feb4,188485266,0,0x0,8
tick,0x7ffe67f8feb4,188501258,0,0x0,8
tick,0x7ffe67f8feb4,188531198,0,0x0,8
tick,0x7ffe67f8feb4,188536431,0,0x0,8
tick,0x7ffe67f8feb4,188557658,0,0x0,8
tick,0x7ffe67f8feb4,188564242,0,0x0,8
tick,0x7ffe67f8feb4,188580270,0,0x0,8
tick,0x7ffe67f8feb4,188596261,0,0x0,8
tick,0x7ffe67f8feb4,188612133,0,0x0,8
tick,0x7ffe67f8feb4,188627967,0,0x0,8
tick,0x7ffe67f8feb4,188643278,0,0x0,8
tick,0x7ffe67f8feb4,188659281,0,0x0,8
tick,0x7ffe67f8feb4,188674648,0,0x0,8
tick,0x7ffe67f8feb4,188690186,0,0x0,8
tick,0x7ffe67f8feb4,188705198,0,0x0,8
tick,0x7ffe67f8feb4,188721294,0,0x0,8
tick,0x7ffe67f8feb4,188737207,0,0x0,8
tick,0x7ffe67f8feb4,188753221,0,0x0,8
tick,0x7ffe67f8feb4,188769196,0,0x0,8
tick,0x7ffe67f8feb4,188785200,0,0x0,8
tick,0x7ffe67f8feb4,188801201,0,0x0,8
tick,0x7ffe67f8feb4,188816850,0,0x0,8
tick,0x7ffe67f8feb4,188832240,0,0x0,8
tick,0x7ffe67f8feb4,188848228,0,0x0,8
tick,0x7ffe67f8feb4,188864407,0,0x0,8
tick,0x7ffe67f8feb4,188880243,0,0x0,8
tick,0x7ffe67f8feb4,188896261,0,0x0,8
tick,0x7ffe67f8feb4,188912380,0,0x0,8
tick,0x7ffe67f8feb4,188928116,0,0x0,8
tick,0x7ffe67f8feb4,188943820,0,0x0,8
tick,0x7ffe67f8feb4,188959831,0,0x0,8
tick,0x7ffe67f8feb4,188975815,0,0x0,8
tick,0x7ffe67f8feb4,188991912,0,0x0,8
tick,0x7ffe67f8feb4,189007634,0,0x0,8
tick,0x7ffe67f8feb4,189023576,0,0x0,8
tick,0x7ffe67f8feb4,189039496,0,0x0,8
tick,0x7ffe67f8feb4,189054835,0,0x0,8
tick,0x7ffe67f8feb4,189070736,0,0x0,8
tick,0x7ffe67f8feb4,189086105,0,0x0,8
tick,0x7ffe67f8feb4,189101495,0,0x0,8
tick,0x7ffe67f8feb4,189117486,0,0x0,8
tick,0x7ffe67f8feb4,189133589,0,0x0,8
tick,0x7ffe67f8feb4,189149654,0,0x0,8
tick,0x7ffe67f8feb4,189164927,0,0x0,8
tick,0x7ffe67f8feb4,189180949,0,0x0,8
tick,0x7ffe67f8feb4,189196374,0,0x0,8
tick,0x7ffe67f8feb4,189212338,0,0x0,8
tick,0x7ffe67f8feb4,189228156,0,0x0,8
tick,0x7ffe67f8feb4,189243851,0,0x0,8
tick,0x7ffe67f8feb4,189259024,0,0x0,8
tick,0x7ffe67f8feb4,189274827,0,0x0,8
tick,0x7ffe67f8feb4,189290408,0,0x0,8
tick,0x7ffe67f8feb4,189306518,0,0x0,8
tick,0x7ffe67f8feb4,189321680,0,0x0,8
tick,0x7ffe67f8feb4,189337354,0,0x0,8
tick,0x7ffe67f8feb4,189353056,0,0x0,8
tick,0x7ffe67f8feb4,189368234,0,0x0,8
tick,0x7ffe67f8feb4,189386233,0,0x0,8
tick,0x7ffe67f8feb4,189400647,0,0x0,8
tick,0x7ffe67f8feb4,189416191,0,0x0,8
tick,0x7ffe67f8feb4,189432171,0,0x0,8
tick,0x7ffe67f8feb4,189447643,0,0x0,8
tick,0x7ffe67f8feb4,189463578,0,0x0,8
tick,0x7ffe67f8feb4,189479572,0,0x0,8
tick,0x7ffe67f8feb4,189494714,0,0x0,8
tick,0x7ffe67f8feb4,189510701,0,0x0,8
tick,0x7ffe67f8feb4,189526199,0,0x0,8
tick,0x7ffe67f8feb4,189541697,0,0x0,8
tick,0x7ffe67f8feb4,189557356,0,0x0,8
tick,0x7ffe67f8feb4,189573875,0,0x0,8
tick,0x7ffe67f8feb4,189589352,0,0x0,8
tick,0x7ffe67f8feb4,189605350,0,0x0,8
tick,0x7ffe67f8feb4,189621320,0,0x0,8
tick,0x7ffe67f8feb4,189637438,0,0x0,8
tick,0x7ffe67f8feb4,189653393,0,0x0,8
tick,0x7ffe67f8feb4,189669466,0,0x0,8
tick,0x7ffe67f8feb4,189685443,0,0x0,8
tick,0x7ffe67f8feb4,189701371,0,0x0,8
tick,0x7ffe67f8feb4,189716370,0,0x0,8
tick,0x7ffe67f8feb4,189732357,0,0x0,8
tick,0x7ffe67f8feb4,189748446,0,0x0,8
tick,0x7ffe67f8feb4,189764325,0,0x0,8
tick,0x7ffe67f8feb4,189780334,0,0x0,8
tick,0x7ffe67f8feb4,189796396,0,0x0,8
tick,0x7ffe67f8feb4,189812412,0,0x0,8
tick,0x7ffe67f8feb4,189828390,0,0x0,8
tick,0x7ffe67f8feb4,189844768,0,0x0,8
tick,0x7ffe67f8feb4,189860568,0,0x0,8
tick,0x7ffe67f8feb4,189876463,0,0x0,8
tick,0x7ffe67f8feb4,189891798,0,0x0,8
tick,0x7ffe67f8feb4,189907460,0,0x0,8
tick,0x7ffe67f8feb4,189922875,0,0x0,8
tick,0x7ffe67f8feb4,189938471,0,0x0,8
tick,0x7ffe67f8feb4,189956586,0,0x0,8
tick,0x7ffe67f8feb4,189969794,0,0x0,8
tick,0x7ffe67f8feb4,189990962,0,0x0,8
tick,0x7ffe67f8feb4,190001583,0,0x0,8
tick,0x7ffe67f8feb4,190016811,0,0x0,8
tick,0x7ffe67f8feb4,190032840,0,0x0,8
tick,0x7ffe67f8feb4,190048850,0,0x0,8
tick,0x7ffe67f8feb4,190064862,0,0x0,8
tick,0x7ffe67f8feb4,190080813,0,0x0,8
tick,0x7ffe67f8feb4,190096839,0,0x0,8
tick,0x7ffe67f8feb4,190112881,0,0x0,8
tick,0x7ffe67f8feb4,190127844,0,0x0,8
tick,0x7ffe67f8feb4,190143874,0,0x0,8
tick,0x7ffe67f8feb4,190159920,0,0x0,8
tick,0x7ffe67f8feb4,190175828,0,0x0,8
tick,0x7ffe67f8feb4,190191828,0,0x0,8
tick,0x7ffe67f8feb4,190209772,0,0x0,8
tick,0x7ffe67f8feb4,190225593,0,0x0,8
tick,0x7ffe67f8feb4,190239895,0,0x0,8
tick,0x7ffe67f8feb4,190255875,0,0x0,8
tick,0x7ffe67f8feb4,190272271,0,0x0,8
tick,0x7ffe67f8feb4,190287931,0,0x0,8
tick,0x7ffe67f8feb4,190303831,0,0x0,8
tick,0x7ffe67f8feb4,190319600,0,0x0,8
tick,0x7ffe67f8feb4,190334902,0,0x0,8
tick,0x7ffe67f8feb4,190349999,0,0x0,8
tick,0x7ffe67f8feb4,190365257,0,0x0,8
tick,0x7ffe67f8feb4,190380978,0,0x0,8
tick,0x7ffe67f8feb4,190396555,0,0x0,8
tick,0x7ffe67f8feb4,190412628,0,0x0,8
tick,0x7ffe67f8feb4,190428706,0,0x0,8
tick,0x7ffe67f8feb4,190444513,0,0x0,8
tick,0x7ffe67f8feb4,190459843,0,0x0,8
tick,0x7ffe67f8feb4,190475870,0,0x0,8
tick,0x7ffe67f8feb4,190491904,0,0x0,8
tick,0x7ffe67f8feb4,190507848,0,0x0,8
tick,0x7ffe67f8feb4,190523871,0,0x0,8
tick,0x7ffe67f8feb4,190539885,0,0x0,8
tick,0x7ffe67f8feb4,190555885,0,0x0,8
tick,0x7ffe67f8feb4,190572043,0,0x0,8
tick,0x7ffe67f8feb4,190587882,0,0x0,8
tick,0x7ffe67f8feb4,190603896,0,0x0,8
tick,0x7ffe67f8feb4,190619862,0,0x0,8
tick,0x7ffe67f8feb4,190636289,0,0x0,8
tick,0x7ffe67f8feb4,190652253,0,0x0,8
tick,0x7ffe67f8feb4,190667874,0,0x0,8
tick,0x7ffe67f8feb4,190683959,0,0x0,8
tick,0x7ffe67f8feb4,190699959,0,0x0,8
tick,0x7ffe67f8feb4,190715339,0,0x0,8
tick,0x7ffe67f8feb4,190731176,0,0x0,8
tick,0x7ffe67f8feb4,190746322,0,0x0,8
tick,0x7ffe67f8feb4,190761354,0,0x0,8
tick,0x7ffe67f8feb4,190776880,0,0x0,8
tick,0x7ffe67f8feb4,190792656,0,0x0,8
tick,0x7ffe67f8feb4,190808725,0,0x0,8
tick,0x7ffe67f8feb4,190824657,0,0x0,8
tick,0x7ffe67f8feb4,190840031,0,0x0,8
tick,0x7ffe67f8feb4,190855218,0,0x0,8
tick,0x7ffe67f8feb4,190871094,0,0x0,8
tick,0x7ffe67f8feb4,190887062,0,0x0,8
tick,0x7ffe67f8feb4,190903104,0,0x0,8
tick,0x7ffe67f8feb4,190919090,0,0x0,8
tick,0x7ffe67f8feb4,190935220,0,0x0,8
tick,0x7ffe67f8feb4,190950665,0,0x0,8
tick,0x7ffe67f8feb4,190966751,0,0x0,8
tick,0x7ffe67f8feb4,190982477,0,0x0,8
tick,0x7ffe67f8feb4,190998477,0,0x0,8
tick,0x7ffe67f8feb4,191014520,0,0x0,8
tick,0x7ffe67f8feb4,191030441,0,0x0,8
tick,0x7ffe67f8feb4,191045920,0,0x0,8
tick,0x7ffe67f8feb4,191061963,0,0x0,8
tick,0x7ffe67f8feb4,191077795,0,0x0,8
tick,0x7ffe67f8feb4,191093812,0,0x0,8
tick,0x7ffe67f8feb4,191109870,0,0x0,8
tick,0x7ffe67f8feb4,191125978,0,0x0,8
tick,0x7ffe67f8feb4,191141717,0,0x0,8
tick,0x7ffe67f8feb4,191157898,0,0x0,8
tick,0x7ffe67f8feb4,191173576,0,0x0,8
tick,0x7ffe67f8feb4,191189109,0,0x0,8
tick,0x7ffe67f8feb4,191204893,0,0x0,8
tick,0x7ffe67f8feb4,191220470,0,0x0,8
tick,0x7ffe67f8feb4,191236380,0,0x0,8
tick,0x7ffe67f8feb4,191251462,0,0x0,8
tick,0x7ffe67f8feb4,191267328,0,0x0,8
tick,0x7ffe67f8feb4,191283100,0,0x0,8
tick,0x7ffe67f8feb4,191298570,0,0x0,8
tick,0x7ffe67f8feb4,191314582,0,0x0,8
tick,0x7ffe67f8feb4,191329857,0,0x0,8
tick,0x7ffe67f8feb4,191345178,0,0x0,8
tick,0x7ffe67f8feb4,191361165,0,0x0,8
tick,0x7ffe67f8feb4,191376730,0,0x0,8
tick,0x7ffe67f8feb4,191392506,0,0x0,8
tick,0x7ffe67f8feb4,191408659,0,0x0,8
tick,0x7ffe67f8feb4,191424611,0,0x0,8
tick,0x7ffe67f8feb4,191439547,0,0x0,8
tick,0x7ffe67f8feb4,191455519,0,0x0,8
tick,0x7ffe67f8feb4,191471521,0,0x0,8
tick,0x7ffe67f8feb4,191487202,0,0x0,8
tick,0x7ffe67f8feb4,191503147,0,0x0,8
tick,0x7ffe67f8feb4,191519750,0,0x0,8
tick,0x7ffe67f8feb4,191534736,0,0x0,8
tick,0x7ffe67f8feb4,191550147,0,0x0,8
tick,0x7ffe67f8feb4,191565486,0,0x0,8
tick,0x7ffe67f8feb4,191580832,0,0x0,8
tick,0x7ffe67f8feb4,191596848,0,0x0,8
tick,0x7ffe67f8feb4,191612313,0,0x0,8
tick,0x7ffe67f8feb4,191627662,0,0x0,8
tick,0x7ffe67f8feb4,191643679,0,0x0,8
tick,0x7ffe67f8feb4,191658902,0,0x0,8
tick,0x7ffe67f8feb4,191674905,0,0x0,8
tick,0x7ffe67f8feb4,191690086,0,0x0,8
tick,0x7ffe67f8feb4,191705607,0,0x0,8
tick,0x7ffe67f8feb4,191721570,0,0x0,8
tick,0x7ffe67f8feb4,191736811,0,0x0,8
tick,0x7ffe67f8feb4,191753215,0,0x0,8
tick,0x7ffe67f8feb4,191768205,0,0x0,8
tick,0x7ffe67f8feb4,191783846,0,0x0,8
tick,0x7ffe67f8feb4,191799062,0,0x0,8
tick,0x7ffe67f8feb4,191814264,0,0x0,8
tick,0x7ffe67f8feb4,191829481,0,0x0,8
tick,0x7ffe67f8feb4,191845405,0,0x0,8
tick,0x7ffe67f8feb4,191860816,0,0x0,8
tick,0x7ffe67f8feb4,191876933,0,0x0,8
tick,0x7ffe67f8feb4,191892631,0,0x0,8
tick,0x7ffe67f8feb4,191908747,0,0x0,8
tick,0x7ffe67f8feb4,191924486,0,0x0,8
tick,0x7ffe67f8feb4,191940132,0,0x0,8
tick,0x7ffe67f8feb4,191956140,0,0x0,8
tick,0x7ffe67f8feb4,191972175,0,0x0,8
tick,0x7ffe67f8feb4,191987659,0,0x0,8
tick,0x7ffe67f8feb4,192003128,0,0x0,8
tick,0x7ffe67f8feb4,192019078,0,0x0,8
tick,0x7ffe67f8feb4,192034209,0,0x0,8
tick,0x7ffe67f8feb4,192049428,0,0x0,8
tick,0x7ffe67f8feb4,192065395,0,0x0,8
tick,0x7ffe67f8feb4,192081309,0,0x0,8
tick,0x7ffe67f8feb4,192096960,0,0x0,8
tick,0x7ffe67f8feb4,192113020,0,0x0,8
tick,0x7ffe67f8feb4,192128125,0,0x0,8
tick,0x7ffe67f8feb4,192143485,0,0x0,8
tick,0x7ffe67f8feb4,192159403,0,0x0,8
tick,0x7ffe67f8feb4,192175066,0,0x0,8
tick,0x7ffe67f8feb4,192190770,0,0x0,8
tick,0x7ffe67f8feb4,192206281,0,0x0,8
tick,0x7ffe67f8feb4,192222339,0,0x0,8
tick,0x7ffe67f8feb4,192238075,0,0x0,8
tick,0x7ffe67f8feb4,192253830,0,0x0,8
tick,0x7ffe67f8feb4,192269227,0,0x0,8
tick,0x7ffe67f8feb4,192284488,0,0x0,8
tick,0x7ffe67f8feb4,192300344,0,0x0,8
tick,0x7ffe67f8feb4,192315459,0,0x0,8
tick,0x7ffe67f8feb4,192331385,0,0x0,8
tick,0x7ffe67f8feb4,192346824,0,0x0,8
tick,0x7ffe67f8feb4,192362938,0,0x0,8
tick,0x7ffe67f8feb4,192378293,0,0x0,8
tick,0x7ffe67f8feb4,192394213,0,0x0,8
tick,0x7ffe67f8feb4,192409618,0,0x0,8
tick,0x7ffe67f8feb4,192425560,0,0x0,8
tick,0x7ffe67f8feb4,192441563,0,0x0,8
tick,0x7ffe67f8feb4,192457021,0,0x0,8
tick,0x7ffe67f8feb4,192473037,0,0x0,8
tick,0x7ffe67f8feb4,192488747,0,0x0,8
tick,0x7ffe67f8feb4,192504128,0,0x0,8
tick,0x7ffe67f8feb4,192519133,0,0x0,8
tick,0x7ffe67f8feb4,192534907,0,0x0,8
tick,0x7ffe67f8feb4,192550292,0,0x0,8
tick,0x7ffe67f8feb4,192565804,0,0x0,8
tick,0x7ffe67f8feb4,192581925,0,0x0,8
tick,0x7ffe67f8feb4,192596953,0,0x0,8
tick,0x7ffe67f8feb4,192611841,0,0x0,8
tick,0x7ffe67f8feb4,192627841,0,0x0,8
tick,0x7ffe67f8feb4,192643002,0,0x0,8
tick,0x7ffe67f8feb4,192657830,0,0x0,8
tick,0x7ffe67f8feb4,192673816,0,0x0,8
tick,0x7ffe67f8feb4,192690059,0,0x0,8
tick,0x7ffe67f8feb4,192705962,0,0x0,8
tick,0x7ffe67f8feb4,192720998,0,0x0,8
tick,0x7ffe67f8feb4,192736574,0,0x0,8
tick,0x7ffe67f8feb4,192751864,0,0x0,8
tick,0x7ffe67f8feb4,192768440,0,0x0,8
tick,0x7ffe67f8feb4,192783837,0,0x0,8
tick,0x7ffe67f8feb4,192799960,0,0x0,8
tick,0x7ffe67f8feb4,192815959,0,0x0,8
tick,0x7ffe67f8feb4,192832016,0,0x0,8
tick,0x7ffe67f8feb4,192847860,0,0x0,8
tick,0x7ffe67f8feb4,192863785,0,0x0,8
tick,0x7ffe67f8feb4,192880118,0,0x0,8
tick,0x7ffe67f8feb4,192895422,0,0x0,8
tick,0x7ffe67f8feb4,192911534,0,0x0,8
tick,0x7ffe67f8feb4,192927512,0,0x0,8
tick,0x7ffe67f8feb4,192943078,0,0x0,8
tick,0x7ffe67f8feb4,192958893,0,0x0,8
tick,0x7ffe67f8feb4,192974694,0,0x0,8
tick,0x7ffe67f8feb4,192989931,0,0x0,8
tick,0x7ffe67f8feb4,193005931,0,0x0,8
tick,0x7ffe67f8feb4,193022173,0,0x0,8
tick,0x7ffe67f8feb4,193037490,0,0x0,8
tick,0x7ffe67f8feb4,193053302,0,0x0,8
tick,0x7ffe67f8feb4,193069150,0,0x0,8
tick,0x7ffe67f8feb4,193084364,0,0x0,8
tick,0x7ffe67f8feb4,193099500,0,0x0,8
tick,0x7ffe67f8feb4,193114945,0,0x0,8
tick,0x7ffe67f8feb4,193130155,0,0x0,8
tick,0x7ffe67f8feb4,193145328,0,0x0,8
tick,0x7ffe67f8feb4,193160948,0,0x0,8
tick,0x7ffe67f8feb4,193176493,0,0x0,8
tick,0x7ffe67f8feb4,193191968,0,0x0,8
tick,0x7ffe67f8feb4,193207725,0,0x0,8
tick,0x7ffe67f8feb4,193222914,0,0x0,8
tick,0x7ffe67f8feb4,193238112,0,0x0,8
tick,0x7ffe67f8feb4,193254009,0,0x0,8
tick,0x7ffe67f8feb4,193270188,0,0x0,8
tick,0x7ffe67f8feb4,193285997,0,0x0,8
tick,0x7ffe67f8feb4,193301640,0,0x0,8
tick,0x7ffe67f8feb4,193317635,0,0x0,8
tick,0x7ffe67f8feb4,193332950,0,0x0,8
tick,0x7ffe67f8feb4,193348462,0,0x0,8
tick,0x7ffe67f8feb4,193363952,0,0x0,8
tick,0x7ffe67f8feb4,193380061,0,0x0,8
tick,0x7ffe67f8feb4,193395953,0,0x0,8
tick,0x7ffe67f8feb4,193411180,0,0x0,8
tick,0x7ffe67f8feb4,193426240,0,0x0,8
tick,0x7ffe67f8feb4,193441212,0,0x0,8
tick,0x7ffe67f8feb4,193457236,0,0x0,8
tick,0x7ffe67f8feb4,193471954,0,0x0,8
tick,0x7ffe67f8feb4,193488072,0,0x0,8
tick,0x7ffe67f8feb4,193503080,0,0x0,8
tick,0x7ffe67f8feb4,193519079,0,0x0,8
tick,0x7ffe67f8feb4,193534985,0,0x0,8
tick,0x7ffe67f8feb4,193549904,0,0x0,8
tick,0x7ffe67f8feb4,193565047,0,0x0,8
tick,0x7ffe67f8feb4,193581120,0,0x0,8
tick,0x7ffe67f8feb4,193597106,0,0x0,8
tick,0x7ffe67f8feb4,193612578,0,0x0,8
tick,0x7ffe67f8feb4,193628576,0,0x0,8
tick,0x7ffe67f8feb4,193644343,0,0x0,8
tick,0x7ffe67f8feb4,193659484,0,0x0,8
tick,0x7ffe67f8feb4,193674864,0,0x0,8
tick,0x7ffe67f8feb4,193690357,0,0x0,8
tick,0x7ffe67f8feb4,193705894,0,0x0,8
tick,0x7ffe67f8feb4,193721673,0,0x0,8
tick,0x7ffe67f8feb4,193737854,0,0x0,8
tick,0x7ffe67f8feb4,193753659,0,0x0,8
tick,0x7ffe67f8feb4,193769616,0,0x0,8
tick,0x7ffe67f8feb4,193785262,0,0x0,8
tick,0x7ffe67f8feb4,193800986,0,0x0,8
tick,0x7ffe67f8feb4,193816982,0,0x0,8
tick,0x7ffe67f8feb4,193832973,0,0x0,8
tick,0x7ffe67f8feb4,193849099,0,0x0,8
tick,0x7ffe67f8feb4,193864408,0,0x0,8
tick,0x7ffe67f8feb4,193879565,0,0x0,8
tick,0x7ffe67f8feb4,193895625,0,0x0,8
tick,0x7ffe67f8feb4,193910869,0,0x0,8
tick,0x7ffe67f8feb4,193926460,0,0x0,8
tick,0x7ffe67f8feb4,193942479,0,0x0,8
tick,0x7ffe67f8feb4,193958097,0,0x0,8
tick,0x7ffe67f8feb4,193973519,0,0x0,8
tick,0x7ffe67f8feb4,193989526,0,0x0,8
tick,0x7ffe67f8feb4,194005152,0,0x0,8
tick,0x7ffe67f8feb4,194020653,0,0x0,8
tick,0x7ffe67f8feb4,194036483,0,0x0,8
tick,0x7ffe67f8feb4,194052574,0,0x0,8
tick,0x7ffe67f8feb4,194068481,0,0x0,8
tick,0x7ffe67f8feb4,194084303,0,0x0,8
tick,0x7ffe67f8feb4,194100393,0,0x0,8
tick,0x7ffe67f8feb4,194116393,0,0x0,8
tick,0x7ffe67f8feb4,194131360,0,0x0,8
tick,0x7ffe67f8feb4,194147062,0,0x0,8
tick,0x7ffe67f8feb4,194162895,0,0x0,8
tick,0x7ffe67f8feb4,194178448,0,0x0,8
tick,0x7ffe67f8feb4,194193678,0,0x0,8
tick,0x7ffe67f8feb4,194209258,0,0x0,8
tick,0x7ffe67f8feb4,194225144,0,0x0,8
tick,0x7ffe67f8feb4,194241102,0,0x0,8
tick,0x7ffe67f8feb4,194256909,0,0x0,8
tick,0x7ffe67f8feb4,194272913,0,0x0,8
tick,0x7ffe67f8feb4,194288828,0,0x0,8
tick,0x7ffe67f8feb4,194304965,0,0x0,8
tick,0x7ffe67f8feb4,194320679,0,0x0,8
tick,0x7ffe67f8feb4,194336338,0,0x0,8
tick,0x7ffe67f8feb4,194351994,0,0x0,8
tick,0x7ffe67f8feb4,194367256,0,0x0,8
tick,0x7ffe67f8feb4,194382696,0,0x0,8
tick,0x7ffe67f8feb4,194398050,0,0x0,8
tick,0x7ffe67f8feb4,194414027,0,0x0,8
tick,0x7ffe67f8feb4,194430137,0,0x0,8
tick,0x7ffe67f8feb4,194446017,0,0x0,8
tick,0x7ffe67f8feb4,194461921,0,0x0,8
tick,0x7ffe67f8feb4,194477296,0,0x0,8
tick,0x7ffe67f8feb4,194493306,0,0x0,8
tick,0x7ffe67f8feb4,194508637,0,0x0,8
tick,0x7ffe67f8feb4,194524387,0,0x0,8
tick,0x7ffe67f8feb4,194539903,0,0x0,8
tick,0x7ffe67f8feb4,194555306,0,0x0,8
tick,0x7ffe67f8feb4,194571047,0,0x0,8
tick,0x7ffe67f8feb4,194586468,0,0x0,8
tick,0x7ffe67f8feb4,194602526,0,0x0,8
tick,0x7ffe67f8feb4,194628938,0,0x0,8
tick,0x7ffe67f8feb4,194642905,0,0x0,8
tick,0x7ffe67f8feb4,194652456,0,0x0,8
tick,0x7ffe67f8feb4,194668300,0,0x0,8
tick,0x7ffe67f8feb4,194682507,0,0x0,8
tick,0x7ffe67f8feb4,194698428,0,0x0,8
tick,0x7ffe67f8feb4,194714094,0,0x0,8
tick,0x7ffe67f8feb4,194729865,0,0x0,8
tick,0x7ffe67f8feb4,194745864,0,0x0,8
tick,0x7ffe67f8feb4,194761041,0,0x0,8
tick,0x7ffe67f8feb4,194777076,0,0x0,8
tick,0x7ffe67f8feb4,194793048,0,0x0,8
tick,0x7ffe67f8feb4,194808239,0,0x0,8
tick,0x7ffe67f8feb4,194823725,0,0x0,8
tick,0x7ffe67f8feb4,194840230,0,0x0,8
tick,0x7ffe67f8feb4,194855818,0,0x0,8
tick,0x7ffe67f8feb4,194871304,0,0x0,8
tick,0x7ffe67f8feb4,194887312,0,0x0,8
tick,0x7ffe67f8feb4,194902556,0,0x0,8
tick,0x7ffe67f8feb4,194918559,0,0x0,8
tick,0x7ffe67f8feb4,194934194,0,0x0,8
tick,0x7ffe67f8feb4,194949601,0,0x0,8
tick,0x7ffe67f8feb4,194965302,0,0x0,8
tick,0x7ffe67f8feb4,194981226,0,0x0,8
tick,0x7ffe67f8feb4,194996997,0,0x0,8
tick,0x7ffe67f8feb4,195012990,0,0x0,8
tick,0x7ffe67f8feb4,195028998,0,0x0,8
tick,0x7ffe67f8feb4,195045012,0,0x0,8
tick,0x7ffe67f8feb4,195061033,0,0x0,8
tick,0x7ffe67f8feb4,195076579,0,0x0,8
tick,0x7ffe67f8feb4,195092553,0,0x0,8
tick,0x7ffe67f8feb4,195108561,0,0x0,8
tick,0x7ffe67f8feb4,195124668,0,0x0,8
tick,0x7ffe67f8feb4,195140670,0,0x0,8
tick,0x7ffe67f8feb4,195156679,0,0x0,8
tick,0x7ffe67f8feb4,195172543,0,0x0,8
tick,0x7ffe67f8feb4,195188483,0,0x0,8
tick,0x7ffe67f8feb4,195204466,0,0x0,8
tick,0x7ffe67f8feb4,195220006,0,0x0,8
tick,0x7ffe67f8feb4,195235703,0,0x0,8
tick,0x7ffe67f8feb4,195251383,0,0x0,8
tick,0x7ffe67f8feb4,195266767,0,0x0,8
tick,0x7ffe67f8feb4,195282752,0,0x0,8
tick,0x7ffe67f8feb4,195298857,0,0x0,8
tick,0x7ffe67f8feb4,195314065,0,0x0,8
tick,0x7ffe67f8feb4,195329457,0,0x0,8
tick,0x7ffe67f8feb4,195345563,0,0x0,8
tick,0x7ffe67f8feb4,195361341,0,0x0,8
tick,0x7ffe67f8feb4,195377450,0,0x0,8
tick,0x7ffe67f8feb4,195393223,0,0x0,8
tick,0x7ffe67f8feb4,195408763,0,0x0,8
tick,0x7ffe67f8feb4,195424535,0,0x0,8
tick,0x7ffe67f8feb4,195439676,0,0x0,8
tick,0x7ffe67f8feb4,195455241,0,0x0,8
tick,0x7ffe67f8feb4,195471224,0,0x0,8
tick,0x7ffe67f8feb4,195486614,0,0x0,8
tick,0x7ffe67f8feb4,195501840,0,0x0,8
tick,0x7ffe67f8feb4,195517344,0,0x0,8
tick,0x7ffe67f8feb4,195532999,0,0x0,8
tick,0x7ffe67f8feb4,195548745,0,0x0,8
tick,0x7ffe67f8feb4,195564587,0,0x0,8
tick,0x7ffe67f8feb4,195580532,0,0x0,8
tick,0x7ffe67f8feb4,195595730,0,0x0,8
tick,0x7ffe67f8feb4,195611742,0,0x0,8
tick,0x7ffe67f8feb4,195627773,0,0x0,8
tick,0x7ffe67f8feb4,195643185,0,0x0,8
tick,0x7ffe67f8feb4,195659210,0,0x0,8
tick,0x7ffe67f8feb4,195674676,0,0x0,8
tick,0x7ffe67f8feb4,195689869,0,0x0,8
tick,0x7ffe67f8feb4,195705400,0,0x0,8
tick,0x7ffe67f8feb4,195721349,0,0x0,8
tick,0x7ffe67f8feb4,195736757,0,0x0,8
tick,0x7ffe67f8feb4,195752738,0,0x0,8
tick,0x7ffe67f8feb4,195768777,0,0x0,8
tick,0x7ffe67f8feb4,195783963,0,0x0,8
tick,0x7ffe67f8feb4,195799960,0,0x0,8
tick,0x7ffe67f8feb4,195815685,0,0x0,8
tick,0x7ffe67f8feb4,195831130,0,0x0,8
tick,0x7ffe67f8feb4,195846355,0,0x0,8
tick,0x7ffe67f8feb4,195861513,0,0x0,8
tick,0x7ffe67f8feb4,195876672,0,0x0,8
tick,0x7ffe67f8feb4,195892656,0,0x0,8
tick,0x7ffe67f8feb4,195908239,0,0x0,8
tick,0x7ffe67f8feb4,195924073,0,0x0,8
tick,0x7ffe67f8feb4,195939268,0,0x0,8
tick,0x7ffe67f8feb4,195954747,0,0x0,8
tick,0x7ffe67f8feb4,195970267,0,0x0,8
tick,0x7ffe67f8feb4,195985506,0,0x0,8
tick,0x7ffe67f8feb4,196001315,0,0x0,8
tick,0x7ffe67f8feb4,196017289,0,0x0,8
tick,0x7ffe67f8feb4,196032164,0,0x0,8
tick,0x7ffe67f8feb4,196047777,0,0x0,8
tick,0x7ffe67f8feb4,196063735,0,0x0,8
tick,0x7ffe67f8feb4,196079402,0,0x0,8
tick,0x7ffe67f8feb4,196094515,0,0x0,8
tick,0x7ffe67f8feb4,196110516,0,0x0,8
tick,0x7ffe67f8feb4,196125851,0,0x0,8
tick,0x7ffe67f8feb4,196141805,0,0x0,8
tick,0x7ffe67f8feb4,196157328,0,0x0,8
tick,0x7ffe67f8feb4,196173346,0,0x0,8
tick,0x7ffe67f8feb4,196188730,0,0x0,8
tick,0x7ffe67f8feb4,196204804,0,0x0,8
tick,0x7ffe67f8feb4,196220617,0,0x0,8
tick,0x7ffe67f8feb4,196236027,0,0x0,8
tick,0x7ffe67f8feb4,196251667,0,0x0,8
tick,0x7ffe67f8feb4,196267553,0,0x0,8
tick,0x7ffe67f8feb4,196282629,0,0x0,8
tick,0x7ffe67f8feb4,196298610,0,0x0,8
tick,0x7ffe67f8feb4,196314054,0,0x0,8
tick,0x7ffe67f8feb4,196329738,0,0x0,8
tick,0x7ffe67f8feb4,196344902,0,0x0,8
tick,0x7ffe67f8feb4,196360953,0,0x0,8
tick,0x7ffe67f8feb4,196376893,0,0x0,8
tick,0x7ffe67f8feb4,196392709,0,0x0,8
tick,0x7ffe67f8feb4,196408793,0,0x0,8
tick,0x7ffe67f8feb4,196424713,0,0x0,8
tick,0x7ffe67f8feb4,196440709,0,0x0,8
tick,0x7ffe67f8feb4,196456790,0,0x0,8
tick,0x7ffe67f8feb4,196472465,0,0x0,8
tick,0x7ffe67f8feb4,196488468,0,0x0,8
tick,0x7ffe67f8feb4,196504541,0,0x0,8
tick,0x7ffe67f8feb4,196519708,0,0x0,8
tick,0x7ffe67f8feb4,196535687,0,0x0,8
tick,0x7ffe67f8feb4,196551727,0,0x0,8
tick,0x7ffe67f8feb4,196567039,0,0x0,8
tick,0x7ffe67f8feb4,196582290,0,0x0,8
tick,0x7ffe67f8feb4,196598248,0,0x0,8
tick,0x7ffe67f8feb4,196613836,0,0x0,8
tick,0x7ffe67f8feb4,196630146,0,0x0,8
tick,0x7ffe67f8feb4,196645061,0,0x0,8
tick,0x7ffe67f8feb4,196660818,0,0x0,8
tick,0x7ffe67f8feb4,196676852,0,0x0,8
tick,0x7ffe67f8feb4,196692389,0,0x0,8
tick,0x7ffe67f8feb4,196707653,0,0x0,8
tick,0x7ffe67f8feb4,196722845,0,0x0,8
tick,0x7ffe67f8feb4,196738768,0,0x0,8
tick,0x7ffe67f8feb4,196753968,0,0x0,8
tick,0x7ffe67f8feb4,196770007,0,0x0,8
tick,0x7ffe67f8feb4,196785332,0,0x0,8
tick,0x7ffe67f8feb4,196800323,0,0x0,8
tick,0x7ffe67f8feb4,196816038,0,0x0,8
tick,0x7ffe67f8feb4,196832046,0,0x0,8
tick,0x7ffe67f8feb4,196847549,0,0x0,8
tick,0x7ffe67f8feb4,196863165,0,0x0,8
tick,0x7ffe67f8feb4,196879208,0,0x0,8
tick,0x7ffe67f8feb4,196894727,0,0x0,8
tick,0x7ffe67f8feb4,196909770,0,0x0,8
tick,0x7ffe67f8feb4,196926198,0,0x0,8
tick,0x7ffe67f8feb4,196941197,0,0x0,8
tick,0x7ffe67f8feb4,196957003,0,0x0,8
tick,0x7ffe67f8feb4,196973082,0,0x0,8
tick,0x7ffe67f8feb4,196989023,0,0x0,8
tick,0x7ffe67f8feb4,197004011,0,0x0,8
tick,0x7ffe67f8feb4,197019914,0,0x0,8
tick,0x7ffe67f8feb4,197035998,0,0x0,8
tick,0x7ffe67f8feb4,197051444,0,0x0,8
tick,0x7ffe67f8feb4,197067503,0,0x0,8
tick,0x7ffe67f8feb4,197083384,0,0x0,8
tick,0x7ffe67f8feb4,197099305,0,0x0,8
tick,0x7ffe67f8feb4,197114334,0,0x0,8
tick,0x7ffe67f8feb4,197130383,0,0x0,8
tick,0x7ffe67f8feb4,197145491,0,0x0,8
tick,0x7ffe67f8feb4,197162609,0,0x0,8
tick,0x7ffe67f8feb4,197177393,0,0x0,8
tick,0x7ffe67f8feb4,197192669,0,0x0,8
tick,0x7ffe67f8feb4,197208744,0,0x0,8
tick,0x7ffe67f8feb4,197224323,0,0x0,8
tick,0x7ffe67f8feb4,197240312,0,0x0,8
tick,0x7ffe67f8feb4,197256396,0,0x0,8
tick,0x7ffe67f8feb4,197271883,0,0x0,8
tick,0x7ffe67f8feb4,197287717,0,0x0,8
tick,0x7ffe67f8feb4,197303076,0,0x0,8
tick,0x7ffe67f8feb4,197319113,0,0x0,8
tick,0x7ffe67f8feb4,197334282,0,0x0,8
tick,0x7ffe67f8feb4,197349615,0,0x0,8
tick,0x7ffe67f8feb4,197364790,0,0x0,8
tick,0x7ffe67f8feb4,197380817,0,0x0,8
tick,0x7ffe67f8feb4,197396702,0,0x0,8
tick,0x7ffe67f8feb4,197412342,0,0x0,8
tick,0x7ffe67f8feb4,197427601,0,0x0,8
tick,0x7ffe67f8feb4,197443463,0,0x0,8
tick,0x7ffe67f8feb4,197459326,0,0x0,8
tick,0x7ffe67f8feb4,197475056,0,0x0,8
tick,0x7ffe67f8feb4,197490742,0,0x0,8
tick,0x7ffe67f8feb4,197505801,0,0x0,8
tick,0x7ffe67f8feb4,197521311,0,0x0,8
tick,0x7ffe67f8feb4,197536465,0,0x0,8
tick,0x7ffe67f8feb4,197551924,0,0x0,8
tick,0x7ffe67f8feb4,197567809,0,0x0,8
tick,0x7ffe67f8feb4,197583667,0,0x0,8
tick,0x7ffe67f8feb4,197599753,0,0x0,8
tick,0x7ffe67f8feb4,197615239,0,0x0,8
tick,0x7ffe67f8feb4,197631043,0,0x0,8
tick,0x7ffe67f8feb4,197647339,0,0x0,8
tick,0x7ffe67f8feb4,197662401,0,0x0,8
tick,0x7ffe67f8feb4,197678367,0,0x0,8
tick,0x7ffe67f8feb4,197693803,0,0x0,8
tick,0x7ffe67f8feb4,197709174,0,0x0,8
tick,0x7ffe67f8feb4,197726266,0,0x0,8
tick,0x7ffe67f8feb4,197741007,0,0x0,8
tick,0x7ffe67f8feb4,197757003,0,0x0,8
tick,0x7ffe67f8feb4,197772620,0,0x0,8
tick,0x7ffe67f8feb4,197788621,0,0x0,8
tick,0x7ffe67f8feb4,197804036,0,0x0,8
tick,0x7ffe67f8feb4,197820073,0,0x0,8
tick,0x7ffe67f8feb4,197836038,0,0x0,8
tick,0x7ffe67f8feb4,197851592,0,0x0,8
tick,0x7ffe67f8feb4,197867702,0,0x0,8
tick,0x7ffe67f8feb4,197883599,0,0x0,8
tick,0x7ffe67f8feb4,197899585,0,0x0,8
tick,0x7ffe67f8feb4,197915211,0,0x0,8
tick,0x7ffe67f8feb4,197931016,0,0x0,8
tick,0x7ffe67f8feb4,197947096,0,0x0,8
tick,0x7ffe67f8feb4,197963335,0,0x0,8
tick,0x7ffe67f8feb4,197978304,0,0x0,8
tick,0x7ffe67f8feb4,197993903,0,0x0,8
tick,0x7ffe67f8feb4,198010598,0,0x0,8
tick,0x7ffe67f8feb4,198026339,0,0x0,8
tick,0x7ffe67f8feb4,198041800,0,0x0,8
tick,0x7ffe67f8feb4,198057858,0,0x0,8
tick,0x7ffe67f8feb4,198073078,0,0x0,8
tick,0x7ffe67f8feb4,198088518,0,0x0,8
tick,0x7ffe67f8feb4,198104315,0,0x0,8
tick,0x7ffe67f8feb4,198119433,0,0x0,8
tick,0x7ffe67f8feb4,198135451,0,0x0,8
tick,0x7ffe67f8feb4,198151109,0,0x0,8
tick,0x7ffe67f8feb4,198167116,0,0x0,8
tick,0x7ffe67f8feb4,198182327,0,0x0,8
tick,0x7ffe67f8feb4,198198007,0,0x0,8
tick,0x7ffe67f8feb4,198213790,0,0x0,8
tick,0x7ffe67f8feb4,198229739,0,0x0,8
tick,0x7ffe67f8feb4,198245571,0,0x0,8
tick,0x7ffe67f8feb4,198261255,0,0x0,8
tick,0x7ffe67f8feb4,198277932,0,0x0,8
tick,0x7ffe67f8feb4,198293148,0,0x0,8
tick,0x7ffe67f8feb4,198307966,0,0x0,8
tick,0x7ffe67f8feb4,198323725,0,0x0,8
tick,0x7ffe67f8feb4,198339211,0,0x0,8
tick,0x7ffe67f8feb4,198355126,0,0x0,8
tick,0x7ffe67f8feb4,198370973,0,0x0,8
tick,0x7ffe67f8feb4,198387043,0,0x0,8
tick,0x7ffe67f8feb4,198402984,0,0x0,8
tick,0x7ffe67f8feb4,198418194,0,0x0,8
tick,0x7ffe67f8feb4,198433527,0,0x0,8
tick,0x7ffe67f8feb4,198449500,0,0x0,8
tick,0x7ffe67f8feb4,198465490,0,0x0,8
tick,0x7ffe67f8feb4,198481259,0,0x0,8
tick,0x7ffe67f8feb4,198496437,0,0x0,8
tick,0x7ffe67f8feb4,198512267,0,0x0,8
tick,0x7ffe67f8feb4,198527937,0,0x0,8
tick,0x7ffe67f8feb4,198543435,0,0x0,8
tick,0x7ffe67f8feb4,198559062,0,0x0,8
tick,0x7ffe67f8feb4,198574314,0,0x0,8
tick,0x7ffe67f8feb4,198598440,0,0x0,8
tick,0x7ffe67f8feb4,198606607,0,0x0,8
tick,0x7ffe67f8feb4,198622392,0,0x0,8
tick,0x7ffe67f8feb4,198638311,0,0x0,8
tick,0x7ffe67f8feb4,198653737,0,0x0,8
tick,0x7ffe67f8feb4,198669788,0,0x0,8
tick,0x7ffe67f8feb4,198685718,0,0x0,8
tick,0x7ffe67f8feb4,198701718,0,0x0,8
tick,0x7ffe67f8feb4,198717697,0,0x0,8
tick,0x7ffe67f8feb4,198733713,0,0x0,8
tick,0x7ffe67f8feb4,198749705,0,0x0,8
tick,0x7ffe67f8feb4,198765705,0,0x0,8
tick,0x7ffe67f8feb4,198781856,0,0x0,8
tick,0x7ffe67f8feb4,198797720,0,0x0,8
tick,0x7ffe67f8feb4,198813775,0,0x0,8
tick,0x7ffe67f8feb4,198829707,0,0x0,8
tick,0x7ffe67f8feb4,198845784,0,0x0,8
tick,0x7ffe67f8feb4,198861787,0,0x0,8
tick,0x7ffe67f8feb4,198877375,0,0x0,8
tick,0x7ffe67f8feb4,198893561,0,0x0,8
tick,0x7ffe67f8feb4,198909393,0,0x0,8
tick,0x7ffe67f8feb4,198925288,0,0x0,8
tick,0x7ffe67f8feb4,198940820,0,0x0,8
tick,0x7ffe67f8feb4,198955977,0,0x0,8
tick,0x7ffe67f8feb4,198971685,0,0x0,8
tick,0x7ffe67f8feb4,198987693,0,0x0,8
tick,0x7ffe67f8feb4,199003287,0,0x0,8
tick,0x7ffe67f8feb4,199018492,0,0x0,8
tick,0x7ffe67f8feb4,199047817,0,0x0,8
tick,0x7ffe67f8feb4,199051282,0,0x0,8
tick,0x7ffe67f8feb4,199068541,0,0x0,8
tick,0x7ffe67f8feb4,199082488,0,0x0,8
tick,0x7ffe67f8feb4,199098536,0,0x0,8
tick,0x7ffe67f8feb4,199113854,0,0x0,8
tick,0x7ffe67f8feb4,199128914,0,0x0,8
tick,0x7ffe67f8feb4,199144319,0,0x0,8
tick,0x7ffe67f8feb4,199159750,0,0x0,8
tick,0x7ffe67f8feb4,199175025,0,0x0,8
tick,0x7ffe67f8feb4,199190146,0,0x0,8
tick,0x7ffe67f8feb4,199206089,0,0x0,8
tick,0x7ffe67f8feb4,199222095,0,0x0,8
tick,0x7ffe67f8feb4,199237899,0,0x0,8
tick,0x7ffe67f8feb4,199253434,0,0x0,8
tick,0x7ffe67f8feb4,199269340,0,0x0,8
tick,0x7ffe67f8feb4,199285397,0,0x0,8
tick,0x7ffe67f8feb4,199301313,0,0x0,8
tick,0x7ffe67f8feb4,199317070,0,0x0,8
tick,0x7ffe67f8feb4,199332915,0,0x0,8
tick,0x7ffe67f8feb4,199348969,0,0x0,8
tick,0x7ffe67f8feb4,199364656,0,0x0,8
tick,0x7ffe67f8feb4,199380769,0,0x0,8
tick,0x7ffe67f8feb4,199396080,0,0x0,8
tick,0x7ffe67f8feb4,199412047,0,0x0,8
tick,0x7ffe67f8feb4,199427545,0,0x0,8
tick,0x7ffe67f8feb4,199443712,0,0x0,8
tick,0x7ffe67f8feb4,199459595,0,0x0,8
tick,0x7ffe67f8feb4,199474726,0,0x0,8
tick,0x7ffe67f8feb4,199490868,0,0x0,8
tick,0x7ffe67f8feb4,199506960,0,0x0,8
tick,0x7ffe67f8feb4,199522642,0,0x0,8
tick,0x7ffe67f8feb4,199537706,0,0x0,8
tick,0x7ffe67f8feb4,199553699,0,0x0,8
tick,0x7ffe67f8feb4,199569689,0,0x0,8
tick,0x7ffe67f8feb4,199585460,0,0x0,8
tick,0x7ffe67f8feb4,199600789,0,0x0,8
tick,0x7ffe67f8feb4,199616850,0,0x0,8
tick,0x7ffe67f8feb4,199636957,0,0x0,8
tick,0x7ffe67f8feb4,199649061,0,0x0,8
tick,0x7ffe67f8feb4,199668378,0,0x0,8
tick,0x7ffe67f8feb4,199681050,0,0x0,8
tick,0x7ffe67f8feb4,199697003,0,0x0,8
tick,0x7ffe67f8feb4,199712853,0,0x0,8
tick,0x7ffe67f8feb4,199728804,0,0x0,8
tick,0x7ffe67f8feb4,199743959,0,0x0,8
tick,0x7ffe67f8feb4,199759760,0,0x0,8
tick,0x7ffe67f8feb4,199775735,0,0x0,8
tick,0x7ffe67f8feb4,199791125,0,0x0,8
tick,0x7ffe67f8feb4,199806640,0,0x0,8
tick,0x7ffe67f8feb4,199822591,0,0x0,8
tick,0x7ffe67f8feb4,199838341,0,0x0,8
tick,0x7ffe67f8feb4,199853677,0,0x0,8
tick,0x7ffe67f8feb4,199869687,0,0x0,8
tick,0x7ffe67f8feb4,199885684,0,0x0,8
tick,0x7ffe67f8feb4,199901277,0,0x0,8
tick,0x7ffe67f8feb4,199916070,0,0x0,8
tick,0x7ffe67f8feb4,199932089,0,0x0,8
tick,0x7ffe67f8feb4,199947868,0,0x0,8
tick,0x7ffe67f8feb4,199962937,0,0x0,8
tick,0x7ffe67f8feb4,199978857,0,0x0,8
tick,0x7ffe67f8feb4,199994891,0,0x0,8
tick,0x7ffe67f8feb4,200010870,0,0x0,8
tick,0x7ffe67f8feb4,200026905,0,0x0,8
tick,0x7ffe67f8feb4,200042021,0,0x0,8
tick,0x7ffe67f8feb4,200057579,0,0x0,8
tick,0x7ffe67f8feb4,200073016,0,0x0,8
tick,0x7ffe67f8feb4,200088207,0,0x0,8
tick,0x7ffe67f8feb4,200103773,0,0x0,8
tick,0x7ffe67f8feb4,200119322,0,0x0,8
tick,0x7ffe67f8feb4,200135550,0,0x0,8
tick,0x7ffe67f8feb4,200151292,0,0x0,8
tick,0x7ffe67f8feb4,200167296,0,0x0,8
tick,0x7ffe67f8feb4,200183608,0,0x0,8
tick,0x7ffe67f8feb4,200198787,0,0x0,8
tick,0x7ffe67f8feb4,200214829,0,0x0,8
tick,0x7ffe67f8feb4,200230753,0,0x0,8
tick,0x7ffe67f8feb4,200246485,0,0x0,8
tick,0x7ffe67f8feb4,200262251,0,0x0,8
tick,0x7ffe67f8feb4,200278935,0,0x0,8
tick,0x7ffe67f8feb4,200294054,0,0x0,8
tick,0x7ffe67f8feb4,200309637,0,0x0,8
tick,0x7ffe67f8feb4,200324967,0,0x0,8
tick,0x7ffe67f8feb4,200340389,0,0x0,8
tick,0x7ffe67f8feb4,200355544,0,0x0,8
tick,0x7ffe67f8feb4,200371576,0,0x0,8
tick,0x7ffe67f8feb4,200386827,0,0x0,8
tick,0x7ffe67f8feb4,200402725,0,0x0,8
tick,0x7ffe67f8feb4,200418646,0,0x0,8
tick,0x7ffe67f8feb4,200434654,0,0x0,8
tick,0x7ffe67f8feb4,200450104,0,0x0,8
tick,0x7ffe67f8feb4,200466103,0,0x0,8
tick,0x7ffe67f8feb4,200482066,0,0x0,8
tick,0x7ffe67f8feb4,200497496,0,0x0,8
tick,0x7ffe67f8feb4,200513478,0,0x0,8
tick,0x7ffe67f8feb4,200529440,0,0x0,8
tick,0x7ffe67f8feb4,200545103,0,0x0,8
tick,0x7ffe67f8feb4,200561245,0,0x0,8
tick,0x7ffe67f8feb4,200577311,0,0x0,8
tick,0x7ffe67f8feb4,200592569,0,0x0,8
tick,0x7ffe67f8feb4,200608530,0,0x0,8
tick,0x7ffe67f8feb4,200624468,0,0x0,8
tick,0x7ffe67f8feb4,200640474,0,0x0,8
tick,0x7ffe67f8feb4,200655791,0,0x0,8
tick,0x7ffe67f8feb4,200671344,0,0x0,8
tick,0x7ffe67f8feb4,200686874,0,0x0,8
tick,0x7ffe67f8feb4,200702926,0,0x0,8
tick,0x7ffe67f8feb4,200718432,0,0x0,8
tick,0x7ffe67f8feb4,200733652,0,0x0,8
tick,0x7ffe67f8feb4,200749701,0,0x0,8
tick,0x7ffe67f8feb4,200765269,0,0x0,8
tick,0x7ffe67f8feb4,200780579,0,0x0,8
tick,0x7ffe67f8feb4,200796623,0,0x0,8
tick,0x7ffe67f8feb4,200812086,0,0x0,8
tick,0x7ffe67f8feb4,200827768,0,0x0,8
tick,0x7ffe67f8feb4,200843379,0,0x0,8
tick,0x7ffe67f8feb4,200859295,0,0x0,8
tick,0x7ffe67f8feb4,200875328,0,0x0,8
tick,0x7ffe67f8feb4,200890710,0,0x0,8
tick,0x7ffe67f8feb4,200906750,0,0x0,8
tick,0x7ffe67f8feb4,200922411,0,0x0,8
tick,0x7ffe67f8feb4,200938188,0,0x0,8
tick,0x7ffe67f8feb4,200954227,0,0x0,8
tick,0x7ffe67f8feb4,200969060,0,0x0,8
tick,0x7ffe67f8feb4,200984613,0,0x0,8
tick,0x7ffe67f8feb4,201000015,0,0x0,8
tick,0x7ffe67f8feb4,201015175,0,0x0,8
tick,0x7ffe67f8feb4,201030903,0,0x0,8
tick,0x7ffe67f8feb4,201046493,0,0x0,8
tick,0x7ffe67f8feb4,201061996,0,0x0,8
tick,0x7ffe67f8feb4,201077166,0,0x0,8
tick,0x7ffe67f8feb4,201093306,0,0x0,8
tick,0x7ffe67f8feb4,201108884,0,0x0,8
tick,0x7ffe67f8feb4,201124932,0,0x0,8
tick,0x7ffe67f8feb4,201140750,0,0x0,8
tick,0x7ffe67f8feb4,201156182,0,0x0,8
tick,0x7ffe67f8feb4,201171400,0,0x0,8
tick,0x7ffe67f8feb4,201186799,0,0x0,8
tick,0x7ffe67f8feb4,201202030,0,0x0,8
tick,0x7ffe67f8feb4,201217337,0,0x0,8
tick,0x7ffe67f8feb4,201232357,0,0x0,8
tick,0x7ffe67f8feb4,201248172,0,0x0,8
tick,0x7ffe67f8feb4,201263945,0,0x0,8
tick,0x7ffe67f8feb4,201279091,0,0x0,8
tick,0x7ffe67f8feb4,201295237,0,0x0,8
tick,0x7ffe67f8feb4,201310619,0,0x0,8
tick,0x7ffe67f8feb4,201325803,0,0x0,8
tick,0x7ffe67f8feb4,201341635,0,0x0,8
tick,0x7ffe67f8feb4,201357792,0,0x0,8
tick,0x7ffe67f8feb4,201373796,0,0x0,8
tick,0x7ffe67f8feb4,201389760,0,0x0,8
tick,0x7ffe67f8feb4,201405827,0,0x0,8
tick,0x7ffe67f8feb4,201421117,0,0x0,8
tick,0x7ffe67f8feb4,201436524,0,0x0,8
tick,0x7ffe67f8feb4,201452540,0,0x0,8
tick,0x7ffe67f8feb4,201468542,0,0x0,8
tick,0x7ffe67f8feb4,201484590,0,0x0,8
tick,0x7ffe67f8feb4,201499571,0,0x0,8
tick,0x7ffe67f8feb4,201514963,0,0x0,8
tick,0x7ffe67f8feb4,201530650,0,0x0,8
tick,0x7ffe67f8feb4,201546650,0,0x0,8
tick,0x7ffe67f8feb4,201561631,0,0x0,8
tick,0x7ffe67f8feb4,201577338,0,0x0,8
tick,0x7ffe67f8feb4,201593370,0,0x0,8
tick,0x7ffe67f8feb4,201609111,0,0x0,8
tick,0x7ffe67f8feb4,201624562,0,0x0,8
tick,0x7ffe67f8feb4,201639819,0,0x0,8
tick,0x7ffe67f8feb4,201655007,0,0x0,8
tick,0x7ffe67f8feb4,201670307,0,0x0,8
tick,0x7ffe67f8feb4,201685430,0,0x0,8
tick,0x7ffe67f8feb4,201701293,0,0x0,8
tick,0x7ffe67f8feb4,201716786,0,0x0,8
tick,0x7ffe67f8feb4,201732328,0,0x0,8
tick,0x7ffe67f8feb4,201748073,0,0x0,8
tick,0x7ffe67f8feb4,201764075,0,0x0,8
tick,0x7ffe67f8feb4,201780156,0,0x0,8
tick,0x7ffe67f8feb4,201796055,0,0x0,8
tick,0x7ffe67f8feb4,201811981,0,0x0,8
tick,0x7ffe67f8feb4,201827578,0,0x0,8
tick,0x7ffe67f8feb4,201843322,0,0x0,8
tick,0x7ffe67f8feb4,201859092,0,0x0,8
tick,0x7ffe67f8feb4,201874598,0,0x0,8
tick,0x7ffe67f8feb4,201890083,0,0x0,8
tick,0x7ffe67f8feb4,201905791,0,0x0,8
tick,0x7ffe67f8feb4,201920983,0,0x0,8
tick,0x7ffe67f8feb4,201935953,0,0x0,8
tick,0x7ffe67f8feb4,201952046,0,0x0,8
tick,0x7ffe67f8feb4,201967966,0,0x0,8
tick,0x7ffe67f8feb4,201983152,0,0x0,8
tick,0x7ffe67f8feb4,201999060,0,0x0,8
tick,0x7ffe67f8feb4,202014347,0,0x0,8
tick,0x7ffe67f8feb4,202030386,0,0x0,8
tick,0x7ffe67f8feb4,202045688,0,0x0,8
tick,0x7ffe67f8feb4,202061576,0,0x0,8
tick,0x7ffe67f8feb4,202077607,0,0x0,8
tick,0x7ffe67f8feb4,202093459,0,0x0,8
tick,0x7ffe67f8feb4,202109570,0,0x0,8
tick,0x7ffe67f8feb4,202125088,0,0x0,8
tick,0x7ffe67f8feb4,202140755,0,0x0,8
tick,0x7ffe67f8feb4,202156134,0,0x0,8
tick,0x7ffe67f8feb4,202171843,0,0x0,8
tick,0x7ffe67f8feb4,202187815,0,0x0,8
tick,0x7ffe67f8feb4,202203558,0,0x0,8
tick,0x7ffe67f8feb4,202219172,0,0x0,8
tick,0x7ffe67f8feb4,202235175,0,0x0,8
tick,0x7ffe67f8feb4,202250845,0,0x0,8
tick,0x7ffe67f8feb4,202265938,0,0x0,8
tick,0x7ffe67f8feb4,202281422,0,0x0,8
tick,0x7ffe67f8feb4,202296672,0,0x0,8
tick,0x7ffe67f8feb4,202312158,0,0x0,8
tick,0x7ffe67f8feb4,202327290,0,0x0,8
tick,0x7ffe67f8feb4,202343093,0,0x0,8
tick,0x7ffe67f8feb4,202358095,0,0x0,8
tick,0x7ffe67f8feb4,202374154,0,0x0,8
tick,0x7ffe67f8feb4,202390040,0,0x0,8
tick,0x7ffe67f8feb4,202405599,0,0x0,8
tick,0x7ffe67f8feb4,202421572,0,0x0,8
tick,0x7ffe67f8feb4,202436420,0,0x0,8
tick,0x7ffe67f8feb4,202452226,0,0x0,8
tick,0x7ffe67f8feb4,202468019,0,0x0,8
tick,0x7ffe67f8feb4,202484082,0,0x0,8
tick,0x7ffe67f8feb4,202499687,0,0x0,8
tick,0x7ffe67f8feb4,202515280,0,0x0,8
tick,0x7ffe67f8feb4,202531239,0,0x0,8
tick,0x7ffe67f8feb4,202546342,0,0x0,8
tick,0x7ffe67f8feb4,202561564,0,0x0,8
tick,0x7ffe67f8feb4,202577265,0,0x0,8
tick,0x7ffe67f8feb4,202592602,0,0x0,8
tick,0x7ffe67f8feb4,202608344,0,0x0,8
tick,0x7ffe67f8feb4,202624524,0,0x0,8
tick,0x7ffe67f8feb4,202639625,0,0x0,8
tick,0x7ffe67f8feb4,202655717,0,0x0,8
tick,0x7ffe67f8feb4,202671378,0,0x0,8
tick,0x7ffe67f8feb4,202686847,0,0x0,8
tick,0x7ffe67f8feb4,202702548,0,0x0,8
tick,0x7ffe67f8feb4,202717790,0,0x0,8
tick,0x7ffe67f8feb4,202733783,0,0x0,8
tick,0x7ffe67f8feb4,202749791,0,0x0,8
tick,0x7ffe67f8feb4,202765118,0,0x0,8
tick,0x7ffe67f8feb4,202780262,0,0x0,8
tick,0x7ffe67f8feb4,202796024,0,0x0,8
tick,0x7ffe67f8feb4,202811058,0,0x0,8
tick,0x7ffe67f8feb4,202827092,0,0x0,8
tick,0x7ffe67f8feb4,202843043,0,0x0,8
tick,0x7ffe67f8feb4,202858324,0,0x0,8
tick,0x7ffe67f8feb4,202874329,0,0x0,8
tick,0x7ffe67f8feb4,202889682,0,0x0,8
tick,0x7ffe67f8feb4,202905602,0,0x0,8
tick,0x7ffe67f8feb4,202921002,0,0x0,8
tick,0x7ffe67f8feb4,202936996,0,0x0,8
tick,0x7ffe67f8feb4,202952408,0,0x0,8
tick,0x7ffe67f8feb4,202967331,0,0x0,8
tick,0x7ffe67f8feb4,202983349,0,0x0,8
tick,0x7ffe67f8feb4,202999307,0,0x0,8
tick,0x7ffe67f8feb4,203014655,0,0x0,8
tick,0x7ffe67f8feb4,203030653,0,0x0,8
tick,0x7ffe67f8feb4,203046599,0,0x0,8
tick,0x7ffe67f8feb4,203062647,0,0x0,8
tick,0x7ffe67f8feb4,203077831,0,0x0,8
tick,0x7ffe67f8feb4,203093937,0,0x0,8
tick,0x7ffe67f8feb4,203109950,0,0x0,8
tick,0x7ffe67f8feb4,203125388,0,0x0,8
tick,0x7ffe67f8feb4,203140914,0,0x0,8
tick,0x7ffe67f8feb4,203156159,0,0x0,8
tick,0x7ffe67f8feb4,203171566,0,0x0,8
tick,0x7ffe67f8feb4,203188059,0,0x0,8
tick,0x7ffe67f8feb4,203202793,0,0x0,8
tick,0x7ffe67f8feb4,203218096,0,0x0,8
tick,0x7ffe67f8feb4,203234152,0,0x0,8
tick,0x7ffe67f8feb4,203249519,0,0x0,8
tick,0x7ffe67f8feb4,203265504,0,0x0,8
tick,0x7ffe67f8feb4,203281922,0,0x0,8
tick,0x7ffe67f8feb4,203297503,0,0x0,8
tick,0x7ffe67f8feb4,203313451,0,0x0,8
tick,0x7ffe67f8feb4,203329455,0,0x0,8
tick,0x7ffe67f8feb4,203344847,0,0x0,8
tick,0x7ffe67f8feb4,203359970,0,0x0,8
tick,0x7ffe67f8feb4,203375115,0,0x0,8
tick,0x7ffe67f8feb4,203391114,0,0x0,8
tick,0x7ffe67f8feb4,203407134,0,0x0,8
tick,0x7ffe67f8feb4,203422503,0,0x0,8
tick,0x7ffe67f8feb4,203438360,0,0x0,8
tick,0x7ffe67f8feb4,203454217,0,0x0,8
tick,0x7ffe67f8feb4,203469874,0,0x0,8
tick,0x7ffe67f8feb4,203485858,0,0x0,8
tick,0x7ffe67f8feb4,203504741,0,0x0,8
tick,0x7ffe67f8feb4,203520562,0,0x0,8
tick,0x7ffe67f8feb4,203534020,0,0x0,8
tick,0x7ffe67f8feb4,203549282,0,0x0,8
tick,0x7ffe67f8feb4,203564670,0,0x0,8
tick,0x7ffe67f8feb4,203580419,0,0x0,8
tick,0x7ffe67f8feb4,203595608,0,0x0,8
tick,0x7ffe67f8feb4,203611317,0,0x0,8
tick,0x7ffe67f8feb4,203626777,0,0x0,8
tick,0x7ffe67f8feb4,203642771,0,0x0,8
tick,0x7ffe67f8feb4,203658238,0,0x0,8
tick,0x7ffe67f8feb4,203673348,0,0x0,8
tick,0x7ffe67f8feb4,203688935,0,0x0,8
tick,0x7ffe67f8feb4,203704584,0,0x0,8
tick,0x7ffe67f8feb4,203720398,0,0x0,8
tick,0x7ffe67f8feb4,203736375,0,0x0,8
tick,0x7ffe67f8feb4,203751918,0,0x0,8
tick,0x7ffe67f8feb4,203767046,0,0x0,8
tick,0x7ffe67f8feb4,203783078,0,0x0,8
tick,0x7ffe67f8feb4,203798182,0,0x0,8
tick,0x7ffe67f8feb4,203813602,0,0x0,8
tick,0x7ffe67f8feb4,203829819,0,0x0,8
tick,0x7ffe67f8feb4,203857488,0,0x0,8
tick,0x7ffe67f8feb4,203861677,0,0x0,8
tick,0x7ffe67f8feb4,203880865,0,0x0,8
tick,0x7ffe67f8feb4,203893759,0,0x0,8
tick,0x7ffe67f8feb4,203908697,0,0x0,8
tick,0x7ffe67f8feb4,203924672,0,0x0,8
tick,0x7ffe67f8feb4,203940604,0,0x0,8
tick,0x7ffe67f8feb4,203955652,0,0x0,8
tick,0x7ffe67f8feb4,203971430,0,0x0,8
tick,0x7ffe67f8feb4,203987432,0,0x0,8
tick,0x7ffe67f8feb4,204003605,0,0x0,8
tick,0x7ffe67f8feb4,204018964,0,0x0,8
tick,0x7ffe67f8feb4,204034505,0,0x0,8
tick,0x7ffe67f8feb4,204049708,0,0x0,8
tick,0x7ffe67f8feb4,204065444,0,0x0,8
tick,0x7ffe67f8feb4,204081140,0,0x0,8
tick,0x7ffe67f8feb4,204096165,0,0x0,8
tick,0x7ffe67f8feb4,204112110,0,0x0,8
tick,0x7ffe67f8feb4,204128064,0,0x0,8
tick,0x7ffe67f8feb4,204142978,0,0x0,8
tick,0x7ffe67f8feb4,204159026,0,0x0,8
tick,0x7ffe67f8feb4,204177585,0,0x0,8
tick,0x7ffe67f8feb4,204190987,0,0x0,8
tick,0x7ffe67f8feb4,204205994,0,0x0,8
tick,0x7ffe67f8feb4,204222005,0,0x0,8
tick,0x7ffe67f8feb4,204237774,0,0x0,8
tick,0x7ffe67f8feb4,204252751,0,0x0,8
tick,0x7ffe67f8feb4,204268777,0,0x0,8
tick,0x7ffe67f8feb4,204284816,0,0x0,8
tick,0x7ffe67f8feb4,204301686,0,0x0,8
tick,0x7ffe67f8feb4,204318155,0,0x0,8
tick,0x7ffe67f8feb4,204332988,0,0x0,8
tick,0x7ffe67f8feb4,204348892,0,0x0,8
tick,0x7ffe67f8feb4,204364758,0,0x0,8
tick,0x7ffe67f8feb4,204380756,0,0x0,8
tick,0x7ffe67f8feb4,204396894,0,0x0,8
tick,0x7ffe67f8feb4,204412771,0,0x0,8
tick,0x7ffe67f8feb4,204428740,0,0x0,8
tick,0x7ffe67f8feb4,204444975,0,0x0,8
tick,0x7ffe67f8feb4,204460835,0,0x0,8
tick,0x7ffe67f8feb4,204476766,0,0x0,8
tick,0x7ffe67f8feb4,204492760,0,0x0,8
tick,0x7ffe67f8feb4,204508764,0,0x0,8
tick,0x7ffe67f8feb4,204525111,0,0x0,8
tick,0x7ffe67f8feb4,204540757,0,0x0,8
tick,0x7ffe67f8feb4,204556767,0,0x0,8
tick,0x7ffe67f8feb4,204572760,0,0x0,8
tick,0x7ffe67f8feb4,204587816,0,0x0,8
tick,0x7ffe67f8feb4,204603959,0,0x0,8
tick,0x7ffe67f8feb4,204619837,0,0x0,8
tick,0x7ffe67f8feb4,204635781,0,0x0,8
tick,0x7ffe67f8feb4,204652172,0,0x0,8
tick,0x7ffe67f8feb4,204667887,0,0x0,8
tick,0x7ffe67f8feb4,204683869,0,0x0,8
tick,0x7ffe67f8feb4,204699053,0,0x0,8
tick,0x7ffe67f8feb4,204714780,0,0x0,8
tick,0x7ffe67f8feb4,204730847,0,0x0,8
tick,0x7ffe67f8feb4,204745781,0,0x0,8
tick,0x7ffe67f8feb4,204761778,0,0x0,8
tick,0x7ffe67f8feb4,204777899,0,0x0,8
tick,0x7ffe67f8feb4,204793794,0,0x0,8
tick,0x7ffe67f8feb4,204809780,0,0x0,8
tick,0x7ffe67f8feb4,204825782,0,0x0,8
tick,0x7ffe67f8feb4,204842031,0,0x0,8
tick,0x7ffe67f8feb4,204857839,0,0x0,8
tick,0x7ffe67f8feb4,204873887,0,0x0,8
tick,0x7ffe67f8feb4,204890103,0,0x0,8
tick,0x7ffe67f8feb4,204905904,0,0x0,8
tick,0x7ffe67f8feb4,204921811,0,0x0,8
tick,0x7ffe67f8feb4,204936853,0,0x0,8
tick,0x7ffe67f8feb4,204952793,0,0x0,8
tick,0x7ffe67f8feb4,204968808,0,0x0,8
tick,0x7ffe67f8feb4,204983938,0,0x0,8
tick,0x7ffe67f8feb4,204999860,0,0x0,8
tick,0x7ffe67f8feb4,205017445,0,0x0,8
tick,0x7ffe67f8feb4,205032288,0,0x0,8
tick,0x7ffe67f8feb4,205047735,0,0x0,8
tick,0x7ffe67f8feb4,205063345,0,0x0,8
tick,0x7ffe67f8feb4,205079004,0,0x0,8
tick,0x7ffe67f8feb4,205094804,0,0x0,8
tick,0x7ffe67f8feb4,205110617,0,0x0,8
tick,0x7ffe67f8feb4,205126606,0,0x0,8
tick,0x7ffe67f8feb4,205142446,0,0x0,8
tick,0x7ffe67f8feb4,205158606,0,0x0,8
tick,0x7ffe67f8feb4,205175218,0,0x0,8
tick,0x7ffe67f8feb4,205190510,0,0x0,8
tick,0x7ffe67f8feb4,205206387,0,0x0,8
tick,0x7ffe67f8feb4,205222457,0,0x0,8
tick,0x7ffe67f8feb4,205238580,0,0x0,8
tick,0x7ffe67f8feb4,205253835,0,0x0,8
tick,0x7ffe67f8feb4,205269776,0,0x0,8
tick,0x7ffe67f8feb4,205285786,0,0x0,8
tick,0x7ffe67f8feb4,205307340,0,0x0,8
tick,0x7ffe67f8feb4,205320520,0,0x0,8
tick,0x7ffe67f8feb4,205334281,0,0x0,8
tick,0x7ffe67f8feb4,205352267,0,0x0,8
tick,0x7ffe67f8feb4,205365904,0,0x0,8
tick,0x7ffe67f8feb4,205381777,0,0x0,8
tick,0x7ffe67f8feb4,205396906,0,0x0,8
tick,0x7ffe67f8feb4,205412565,0,0x0,8
tick,0x7ffe67f8feb4,205427422,0,0x0,8
tick,0x7ffe67f8feb4,205443242,0,0x0,8
tick,0x7ffe67f8feb4,205459246,0,0x0,8
tick,0x7ffe67f8feb4,205474906,0,0x0,8
tick,0x7ffe67f8feb4,205490803,0,0x0,8
tick,0x7ffe67f8feb4,205506892,0,0x0,8
tick,0x7ffe67f8feb4,205522100,0,0x0,8
tick,0x7ffe67f8feb4,205537430,0,0x0,8
tick,0x7ffe67f8feb4,205552969,0,0x0,8
tick,0x7ffe67f8feb4,205568510,0,0x0,8
tick,0x7ffe67f8feb4,205586210,0,0x0,8
tick,0x7ffe67f8feb4,205601282,0,0x0,8
tick,0x7ffe67f8feb4,205615919,0,0x0,8
tick,0x7ffe67f8feb4,205631917,0,0x0,8
tick,0x7ffe67f8feb4,205647377,0,0x0,8
tick,0x7ffe67f8feb4,205663114,0,0x0,8
tick,0x7ffe67f8feb4,205678827,0,0x0,8
tick,0x7ffe67f8feb4,205694846,0,0x0,8
tick,0x7ffe67f8feb4,205710269,0,0x0,8
tick,0x7ffe67f8feb4,205726428,0,0x0,8
tick,0x7ffe67f8feb4,205742273,0,0x0,8
tick,0x7ffe67f8feb4,205758545,0,0x0,8
tick,0x7ffe67f8feb4,205773864,0,0x0,8
tick,0x7ffe67f8feb4,205789345,0,0x0,8
tick,0x7ffe67f8feb4,205805215,0,0x0,8
tick,0x7ffe67f8feb4,205820926,0,0x0,8
tick,0x7ffe67f8feb4,205836829,0,0x0,8
tick,0x7ffe67f8feb4,205852050,0,0x0,8
tick,0x7ffe67f8feb4,205869234,0,0x0,8
tick,0x7ffe67f8feb4,205885336,0,0x0,8
tick,0x7ffe67f8feb4,205899008,0,0x0,8
tick,0x7ffe67f8feb4,205915009,0,0x0,8
tick,0x7ffe67f8feb4,205930682,0,0x0,8
tick,0x7ffe67f8feb4,205945967,0,0x0,8
tick,0x7ffe67f8feb4,205961406,0,0x0,8
tick,0x7ffe67f8feb4,205976608,0,0x0,8
tick,0x7ffe67f8feb4,205992587,0,0x0,8
tick,0x7ffe67f8feb4,206008724,0,0x0,8
tick,0x7ffe67f8feb4,206023638,0,0x0,8
tick,0x7ffe67f8feb4,206039671,0,0x0,8
tick,0x7ffe67f8feb4,206055645,0,0x0,8
tick,0x7ffe67f8feb4,206071193,0,0x0,8
tick,0x7ffe67f8feb4,206087323,0,0x0,8
tick,0x7ffe67f8feb4,206102125,0,0x0,8
tick,0x7ffe67f8feb4,206118075,0,0x0,8
tick,0x7ffe67f8feb4,206132922,0,0x0,8
tick,0x7ffe67f8feb4,206148986,0,0x0,8
tick,0x7ffe67f8feb4,206165713,0,0x0,8
tick,0x7ffe67f8feb4,206179046,0,0x0,8
tick,0x7ffe67f8feb4,206196175,0,0x0,8
tick,0x7ffe67f8feb4,206209099,0,0x0,8
tick,0x7ffe67f8feb4,206225014,0,0x0,8
tick,0x7ffe67f8feb4,206242085,0,0x0,8
tick,0x7ffe67f8feb4,206257741,0,0x0,8
tick,0x7ffe67f8feb4,206272027,0,0x0,8
tick,0x7ffe67f8feb4,206287057,0,0x0,8
tick,0x7ffe67f8feb4,206308179,0,0x0,8
tick,0x7ffe67f8feb4,206316995,0,0x0,8
tick,0x7ffe67f8feb4,206332074,0,0x0,8
tick,0x7ffe67f8feb4,206347557,0,0x0,8
tick,0x7ffe67f8feb4,206362271,0,0x0,8
tick,0x7ffe67f8feb4,206377198,0,0x0,8
tick,0x7ffe67f8feb4,206409481,0,0x0,8
tick,0x7ffe67f8feb4,206422031,0,0x0,8
tick,0x7ffe67f8feb4,206437226,0,0x0,8
tick,0x7ffe67f8feb4,206452020,0,0x0,8
tick,0x7ffe67f8feb4,206467081,0,0x0,8
tick,0x7ffe67f8feb4,206499200,0,0x0,8
tick,0x7ffe67f8feb4,206513249,0,0x0,8
tick,0x7ffe67f8feb4,206528069,0,0x0,8
tick,0x7ffe67f8feb4,206544297,0,0x0,8
tick,0x7ffe67f8feb4,206558956,0,0x0,8
tick,0x7ffe67f8feb4,206575201,0,0x0,8
tick,0x7ffe67f8feb4,206595392,0,0x0,8
tick,0x7ffe67f8feb4,206608414,0,0x0,8
tick,0x7ffe67f8feb4,206629184,0,0x0,8
tick,0x7ffe67f8feb4,206637729,0,0x0,8
tick,0x7ffe67f8feb4,206648751,0,0x0,8
tick,0x7ffe67f8feb4,206664878,0,0x0,8
tick,0x7ffe67f8feb4,206682872,0,0x0,8
tick,0x7ffe67f8feb4,206695180,0,0x0,8
tick,0x7ffe67f8feb4,206711527,0,0x0,8
tick,0x7ffe67f8feb4,206727194,0,0x0,8
tick,0x7ffe67f8feb4,206741185,0,0x0,8
tick,0x7ffe67f8feb4,206757873,0,0x0,8
tick,0x7ffe67f8feb4,206788413,0,0x0,8
tick,0x7ffe67f8feb4,206803767,0,0x0,8
tick,0x7ffe67f8feb4,206820339,0,0x0,8
tick,0x7ffe67f8feb4,206837180,0,0x0,8
tick,0x7ffe67f8feb4,206857451,0,0x0,8
tick,0x7ffe67f8feb4,206880584,0,0x0,8
tick,0x7ffe67f8feb4,206940577,0,0x0,8
tick,0x7ffe67f8feb4,206943421,0,0x0,8
tick,0x7ffe67f8feb4,206960376,0,0x0,8
tick,0x7ffe67f8feb4,206988562,0,0x0,8
tick,0x7ffe67f8feb4,206994165,0,0x0,8
tick,0x7ffe67f8feb4,207013217,0,0x0,8
tick,0x7ffe67f8feb4,207028056,0,0x0,8
tick,0x7ffe67f8feb4,207084004,0,0x0,8
tick,0x7ffe67f8feb4,207104845,0,0x0,8
tick,0x7ffe67f8feb4,207117484,0,0x0,8
tick,0x7ffe67f8feb4,207133201,0,0x0,8
tick,0x7ffe67f8feb4,207159361,0,0x0,8
tick,0x7ffe67f8feb4,207194891,0,0x0,8
tick,0x7ffe67f8feb4,207215800,0,0x0,8
tick,0x7ffe67f8feb4,207258888,0,0x0,8
tick,0x7ffe67f8feb4,207279939,0,0x0,8
tick,0x7ffe67f8feb4,207289518,0,0x0,8
tick,0x7ffe67f8feb4,207304390,0,0x0,8
tick,0x7ffe67f8feb4,207320627,0,0x0,8
tick,0x7ffe67f8feb4,207336088,0,0x0,8
tick,0x7ffe67f8feb4,207351070,0,0x0,8
tick,0x7ffe67f8feb4,207368426,0,0x0,8
tick,0x7ffe67f8feb4,207383277,0,0x0,8
tick,0x7ffe67f8feb4,207399027,0,0x0,8
tick,0x7ffe67f8feb4,207415457,0,0x0,8
tick,0x7ffe67f8feb4,207431475,0,0x0,8
tick,0x7ffe67f8feb4,207447817,0,0x0,8
tick,0x7ffe67f8feb4,207463818,0,0x0,8
tick,0x7ffe67f8feb4,207479670,0,0x0,8
tick,0x7ffe67f8feb4,207496373,0,0x0,8
tick,0x7ffe67f8feb4,207511522,0,0x0,8
tick,0x7ffe67f8feb4,207530826,0,0x0,8
tick,0x7ffe67f8feb4,207544728,0,0x0,8
tick,0x7ffe67f8feb4,207559255,0,0x0,8
tick,0x7ffe67f8feb4,207574302,0,0x0,8
tick,0x7ffe67f8feb4,207589913,0,0x0,8
tick,0x7ffe67f8feb4,207608804,0,0x0,8
tick,0x7ffe67f8feb4,207624800,0,0x0,8
tick,0x7ffe67f8feb4,207642873,0,0x0,8
tick,0x7ffe67f8feb4,207651332,0,0x0,8
tick,0x7ffe67f8feb4,207667407,0,0x0,8
tick,0x7ffe67f8feb4,207683076,0,0x0,8
tick,0x7ffe67f8feb4,207699187,0,0x0,8
tick,0x7ffe67f8feb4,207715461,0,0x0,8
tick,0x7ffe67f8feb4,207731159,0,0x0,8
tick,0x7ffe67f8feb4,207746265,0,0x0,8
tick,0x7ffe67f8feb4,207762457,0,0x0,8
tick,0x7ffe67f8feb4,207809063,0,0x0,8
tick,0x7ffe67f8feb4,207825694,0,0x0,8
tick,0x7ffe67f8feb4,207847520,0,0x0,8
tick,0x7ffe67f8feb4,207859595,0,0x0,8
tick,0x7ffe67f8feb4,207873427,0,0x0,8
tick,0x7ffe67f8feb4,207890462,0,0x0,8
tick,0x7ffe67f8feb4,207905343,0,0x0,8
tick,0x7ffe67f8feb4,207920456,0,0x0,8
tick,0x7ffe67f8feb4,207937461,0,0x0,8
tick,0x7ffe67f8feb4,207956595,0,0x0,8
tick,0x7ffe67f8feb4,207967504,0,0x0,8
tick,0x7ffe67f8feb4,207983364,0,0x0,8
tick,0x7ffe67f8feb4,207999546,0,0x0,8
tick,0x7ffe67f8feb4,208015735,0,0x0,8
tick,0x7ffe67f8feb4,208041080,0,0x0,8
tick,0x7ffe67f8feb4,208047594,0,0x0,8
tick,0x7ffe67f8feb4,208063159,0,0x0,8
tick,0x7ffe67f8feb4,208082882,0,0x0,8
tick,0x7ffe67f8feb4,208097810,0,0x0,8
tick,0x7ffe67f8feb4,208112354,0,0x0,8
tick,0x7ffe67f8feb4,208128132,0,0x0,8
tick,0x7ffe67f8feb4,208144013,0,0x0,8
tick,0x7ffe67f8feb4,208160375,0,0x0,8
tick,0x7ffe67f8feb4,208174350,0,0x0,8
tick,0x7ffe67f8feb4,208190496,0,0x0,8
tick,0x7ffe67f8feb4,208207556,0,0x0,8
tick,0x7ffe67f8feb4,208223367,0,0x0,8
tick,0x7ffe67f8feb4,208237453,0,0x0,8
tick,0x7ffe67f8feb4,208253572,0,0x0,8
tick,0x7ffe67f8feb4,208270444,0,0x0,8
tick,0x7ffe67f8feb4,208285473,0,0x0,8
tick,0x7ffe67f8feb4,208301166,0,0x0,8
tick,0x7ffe67f8feb4,208317392,0,0x0,8
tick,0x7ffe67f8feb4,208332775,0,0x0,8
tick,0x7ffe67f8feb4,208349056,0,0x0,8
tick,0x7ffe67f8feb4,208365139,0,0x0,8
tick,0x7ffe67f8feb4,208381518,0,0x0,8
tick,0x7ffe67f8feb4,208427908,0,0x0,8
tick,0x7ffe67f8feb4,208445157,0,0x0,8
tick,0x7ffe67f8feb4,208467907,0,0x0,8
tick,0x7ffe67f8feb4,208477605,0,0x0,8
tick,0x7ffe67f8feb4,208492747,0,0x0,8
tick,0x7ffe67f8feb4,208510119,0,0x0,8
tick,0x7ffe67f8feb4,208525794,0,0x0,8
tick,0x7ffe67f8feb4,208540719,0,0x0,8
tick,0x7ffe67f8feb4,208557726,0,0x0,8
tick,0x7ffe67f8feb4,208573902,0,0x0,8
tick,0x7ffe67f8feb4,208588953,0,0x0,8
tick,0x7ffe67f8feb4,208610515,0,0x0,8
tick,0x7ffe67f8feb4,208622349,0,0x0,8
tick,0x7ffe67f8feb4,208635488,0,0x0,8
tick,0x7ffe67f8feb4,208654355,0,0x0,8
tick,0x7ffe67f8feb4,208666803,0,0x0,8
tick,0x7ffe67f8feb4,208682625,0,0x0,8
tick,0x7ffe67f8feb4,208698600,0,0x0,8
tick,0x7ffe67f8feb4,208716675,0,0x0,8
tick,0x7ffe67f8feb4,208731818,0,0x0,8
tick,0x7ffe67f8feb4,208746651,0,0x0,8
tick,0x7ffe67f8feb4,208762862,0,0x0,8
tick,0x7ffe67f8feb4,208787804,0,0x0,8
tick,0x7ffe67f8feb4,208794939,0,0x0,8
tick,0x7ffe67f8feb4,208818728,0,0x0,8
tick,0x7ffe67f8feb4,208826828,0,0x0,8
tick,0x7ffe67f8feb4,208844123,0,0x0,8
tick,0x7ffe67f8feb4,208859137,0,0x0,8
tick,0x7ffe67f8feb4,208877568,0,0x0,8
tick,0x7ffe67f8feb4,208892032,0,0x0,8
tick,0x7ffe67f8feb4,208907022,0,0x0,8
tick,0x7ffe67f8feb4,208923638,0,0x0,8
tick,0x7ffe67f8feb4,208939004,0,0x0,8
tick,0x7ffe67f8feb4,208954830,0,0x0,8
tick,0x7ffe67f8feb4,208981833,0,0x0,8
tick,0x7ffe67f8feb4,208988752,0,0x0,8
tick,0x7ffe67f8feb4,209002760,0,0x0,8
tick,0x7ffe67f8feb4,209021011,0,0x0,8
tick,0x7ffe67f8feb4,209034152,0,0x0,8
tick,0x7ffe67f8feb4,209049100,0,0x0,8
tick,0x7ffe67f8feb4,209064640,0,0x0,8
tick,0x7ffe67f8feb4,209080557,0,0x0,8
tick,0x7ffe67f8feb4,209096454,0,0x0,8
tick,0x7ffe67f8feb4,209112397,0,0x0,8
tick,0x7ffe67f8feb4,209128079,0,0x0,8
tick,0x7ffe67f8feb4,209143850,0,0x0,8
tick,0x7ffe67f8feb4,209159020,0,0x0,8
tick,0x7ffe67f8feb4,209176014,0,0x0,8
tick,0x7ffe67f8feb4,209191600,0,0x0,8
tick,0x7ffe67f8feb4,209207469,0,0x0,8
tick,0x7ffe67f8feb4,209223089,0,0x0,8
tick,0x7ffe67f8feb4,209239283,0,0x0,8
tick,0x7ffe67f8feb4,209254590,0,0x0,8
tick,0x7ffe67f8feb4,209271809,0,0x0,8
tick,0x7ffe67f8feb4,209288250,0,0x0,8
tick,0x7ffe67f8feb4,209301597,0,0x0,8
tick,0x7ffe67f8feb4,209318856,0,0x0,8
tick,0x7ffe67f8feb4,209334092,0,0x0,8
tick,0x7ffe67f8feb4,209351476,0,0x0,8
tick,0x7ffe67f8feb4,209365960,0,0x0,8
tick,0x7ffe67f8feb4,209383960,0,0x0,8
tick,0x7ffe67f8feb4,209405894,0,0x0,8
tick,0x7ffe67f8feb4,209412821,0,0x0,8
tick,0x7ffe67f8feb4,209428847,0,0x0,8
tick,0x7ffe67f8feb4,209445152,0,0x0,8
tick,0x7ffe67f8feb4,209461748,0,0x0,8
tick,0x7ffe67f8feb4,209477254,0,0x0,8
tick,0x7ffe67f8feb4,209494839,0,0x0,8
tick,0x7ffe67f8feb4,209508787,0,0x0,8
tick,0x7ffe67f8feb4,209524830,0,0x0,8
tick,0x7ffe67f8feb4,209539314,0,0x0,8
tick,0x7ffe67f8feb4,209556284,0,0x0,8
tick,0x7ffe67f8feb4,209571599,0,0x0,8
tick,0x7ffe67f8feb4,209588383,0,0x0,8
tick,0x7ffe67f8feb4,209603071,0,0x0,8
tick,0x7ffe67f8feb4,209618838,0,0x0,8
tick,0x7ffe67f8feb4,209635176,0,0x0,8
tick,0x7ffe67f8feb4,209650878,0,0x0,8
tick,0x7ffe67f8feb4,209667393,0,0x0,8
tick,0x7ffe67f8feb4,209682632,0,0x0,8
tick,0x7ffe67f8feb4,209740040,0,0x0,8
tick,0x7ffe67f8feb4,209748203,0,0x0,8
tick,0x7ffe67f8feb4,209769411,0,0x0,8
tick,0x7ffe67f8feb4,209778017,0,0x0,8
tick,0x7ffe67f8feb4,209794793,0,0x0,8
tick,0x7ffe67f8feb4,209808853,0,0x0,8
tick,0x7ffe67f8feb4,209823964,0,0x0,8
tick,0x7ffe67f8feb4,209840258,0,0x0,8
tick,0x7ffe67f8feb4,209855843,0,0x0,8
tick,0x7ffe67f8feb4,209871971,0,0x0,8
tick,0x7ffe67f8feb4,209890402,0,0x0,8
tick,0x7ffe67f8feb4,209902872,0,0x0,8
tick,0x7ffe67f8feb4,209918108,0,0x0,8
tick,0x7ffe67f8feb4,209933681,0,0x0,8
tick,0x7ffe67f8feb4,209950079,0,0x0,8
tick,0x7ffe67f8feb4,209964727,0,0x0,8
tick,0x7ffe67f8feb4,209980791,0,0x0,8
tick,0x7ffe67f8feb4,209996663,0,0x0,8
tick,0x7ffe67f8feb4,210010859,0,0x0,8
tick,0x7ffe67f8feb4,210031162,0,0x0,8
tick,0x7ffe67f8feb4,210043416,0,0x0,8
tick,0x7ffe67f8feb4,210059929,0,0x0,8
tick,0x7ffe67f8feb4,210078648,0,0x0,8
tick,0x7ffe67f8feb4,210091304,0,0x0,8
tick,0x7ffe67f8feb4,210109942,0,0x0,8
tick,0x7ffe67f8feb4,210122254,0,0x0,8
tick,0x7ffe67f8feb4,210138839,0,0x0,8
tick,0x7ffe67f8feb4,210153403,0,0x0,8
tick,0x7ffe67f8feb4,210170131,0,0x0,8
tick,0x7ffe67f8feb4,210185065,0,0x0,8
tick,0x7ffe67f8feb4,210218303,0,0x0,8
tick,0x7ffe67f8feb4,210241321,0,0x0,8
tick,0x7ffe67f8feb4,210249256,0,0x0,8
tick,0x7ffe67f8feb4,210264740,0,0x0,8
tick,0x7ffe67f8feb4,210280677,0,0x0,8
tick,0x7ffe67f8feb4,210296934,0,0x0,8
tick,0x7ffe67f8feb4,210313043,0,0x0,8
tick,0x7ffe67f8feb4,210329738,0,0x0,8
tick,0x7ffe67f8feb4,210343734,0,0x0,8
tick,0x7ffe67f8feb4,210361395,0,0x0,8
tick,0x7ffe67f8feb4,210385094,0,0x0,8
tick,0x7ffe67f8feb4,210392340,0,0x0,8
tick,0x7ffe67f8feb4,210407839,0,0x0,8
tick,0x7ffe67f8feb4,210422462,0,0x0,8
tick,0x7ffe67f8feb4,210439090,0,0x0,8
tick,0x7ffe67f8feb4,210453964,0,0x0,8
tick,0x7ffe67f8feb4,210470316,0,0x0,8
tick,0x7ffe67f8feb4,210486629,0,0x0,8
tick,0x7ffe67f8feb4,210502585,0,0x0,8
tick,0x7ffe67f8feb4,210517985,0,0x0,8
tick,0x7ffe67f8feb4,210534452,0,0x0,8
tick,0x7ffe67f8feb4,210550141,0,0x0,8
tick,0x7ffe67f8feb4,210565897,0,0x0,8
tick,0x7ffe67f8feb4,210582255,0,0x0,8
tick,0x7ffe67f8feb4,210597596,0,0x0,8
tick,0x7ffe67f8feb4,210615556,0,0x0,8
tick,0x7ffe67f8feb4,210629966,0,0x0,8
tick,0x7ffe67f8feb4,210646934,0,0x0,8
tick,0x7ffe67f8feb4,210661118,0,0x0,8
tick,0x7ffe67f8feb4,210689880,0,0x0,8
tick,0x7ffe67f8feb4,210692709,0,0x0,8
tick,0x7ffe67f8feb4,210711929,0,0x0,8
tick,0x7ffe67f8feb4,210723700,0,0x0,8
tick,0x7ffe67f8feb4,210742146,0,0x0,8
tick,0x7ffe67f8feb4,210759089,0,0x0,8
tick,0x7ffe67f8feb4,210773490,0,0x0,8
tick,0x7ffe67f8feb4,210787981,0,0x0,8
tick,0x7ffe67f8feb4,210803797,0,0x0,8
tick,0x7ffe67f8feb4,210820397,0,0x0,8
tick,0x7ffe67f8feb4,210834840,0,0x0,8
tick,0x7ffe67f8feb4,210851852,0,0x0,8
tick,0x7ffe67f8feb4,210867214,0,0x0,8
tick,0x7ffe67f8feb4,210886932,0,0x0,8
tick,0x7ffe67f8feb4,210899507,0,0x0,8
tick,0x7ffe67f8feb4,210921205,0,0x0,8
tick,0x7ffe67f8feb4,210929901,0,0x0,8
tick,0x7ffe67f8feb4,210944912,0,0x0,8
tick,0x7ffe67f8feb4,210960340,0,0x0,8
tick,0x7ffe67f8feb4,210975761,0,0x0,8
tick,0x7ffe67f8feb4,210993086,0,0x0,8
tick,0x7ffe67f8feb4,211012681,0,0x0,8
tick,0x7ffe67f8feb4,211025555,0,0x0,8
tick,0x7ffe67f8feb4,211042517,0,0x0,8
tick,0x7ffe67f8feb4,211055354,0,0x0,8
tick,0x7ffe67f8feb4,211070729,0,0x0,8
tick,0x7ffe67f8feb4,211088139,0,0x0,8
tick,0x7ffe67f8feb4,211103136,0,0x0,8
tick,0x7ffe67f8feb4,211119012,0,0x0,8
tick,0x7ffe67f8feb4,211135243,0,0x0,8
tick,0x7ffe67f8feb4,211151774,0,0x0,8
tick,0x7ffe67f8feb4,211167272,0,0x0,8
tick,0x7ffe67f8feb4,211183203,0,0x0,8
tick,0x7ffe67f8feb4,211197844,0,0x0,8
tick,0x7ffe67f8feb4,211214068,0,0x0,8
tick,0x7ffe67f8feb4,211231030,0,0x0,8
tick,0x7ffe67f8feb4,211245822,0,0x0,8
tick,0x7ffe67f8feb4,211261737,0,0x0,8
tick,0x7ffe67f8feb4,211277769,0,0x0,8
tick,0x7ffe67f8feb4,211293379,0,0x0,8
tick,0x7ffe67f8feb4,211308670,0,0x0,8
tick,0x7ffe67f8feb4,211324354,0,0x0,8
tick,0x7ffe67f8feb4,211340615,0,0x0,8
tick,0x7ffe67f8feb4,211356694,0,0x0,8
tick,0x7ffe67f8feb4,211370684,0,0x0,8
tick,0x7ffe67f8feb4,211385542,0,0x0,8
tick,0x7ffe67f8feb4,211400530,0,0x0,8
tick,0x7ffe67f8feb4,211416575,0,0x0,8
tick,0x7ffe67f8feb4,211432139,0,0x0,8
tick,0x7ffe67f8feb4,211447161,0,0x0,8
tick,0x7ffe67f8feb4,211463108,0,0x0,8
tick,0x7ffe67f8feb4,211479087,0,0x0,8
tick,0x7ffe67f8feb4,211494901,0,0x0,8
tick,0x7ffe67f8feb4,211510862,0,0x0,8
tick,0x7ffe67f8feb4,211526499,0,0x0,8
tick,0x7ffe67f8feb4,211541998,0,0x0,8
tick,0x7ffe67f8feb4,211557245,0,0x0,8
tick,0x7ffe67f8feb4,211572912,0,0x0,8
tick,0x7ffe67f8feb4,211588487,0,0x0,8
tick,0x7ffe67f8feb4,211604454,0,0x0,8
tick,0x7ffe67f8feb4,211620436,0,0x0,8
tick,0x7ffe67f8feb4,211636454,0,0x0,8
tick,0x7ffe67f8feb4,211652457,0,0x0,8
tick,0x7ffe67f8feb4,211668443,0,0x0,8
tick,0x7ffe67f8feb4,211684448,0,0x0,8
tick,0x7ffe67f8feb4,211700433,0,0x0,8
tick,0x7ffe67f8feb4,211716441,0,0x0,8
tick,0x7ffe67f8feb4,211731563,0,0x0,8
tick,0x7ffe67f8feb4,211747625,0,0x0,8
tick,0x7ffe67f8feb4,211763462,0,0x0,8
tick,0x7ffe67f8feb4,211779546,0,0x0,8
tick,0x7ffe67f8feb4,211794519,0,0x0,8
tick,0x7ffe67f8feb4,211809729,0,0x0,8
tick,0x7ffe67f8feb4,211825770,0,0x0,8
tick,0x7ffe67f8feb4,211841972,0,0x0,8
tick,0x7ffe67f8feb4,211857559,0,0x0,8
tick,0x7ffe67f8feb4,211875117,0,0x0,8
tick,0x7ffe67f8feb4,211888586,0,0x0,8
tick,0x7ffe67f8feb4,211904151,0,0x0,8
tick,0x7ffe67f8feb4,211919719,0,0x0,8
tick,0x7ffe67f8feb4,211935590,0,0x0,8
tick,0x7ffe67f8feb4,211950616,0,0x0,8
tick,0x7ffe67f8feb4,211966233,0,0x0,8
tick,0x7ffe67f8feb4,211981563,0,0x0,8
tick,0x7ffe67f8feb4,211997534,0,0x0,8
tick,0x7ffe67f8feb4,212013369,0,0x0,8
tick,0x7ffe67f8feb4,212028416,0,0x0,8
tick,0x7ffe67f8feb4,212043692,0,0x0,8
tick,0x7ffe67f8feb4,212059580,0,0x0,8
tick,0x7ffe67f8feb4,212075604,0,0x0,8
tick,0x7ffe67f8feb4,212091569,0,0x0,8
tick,0x7ffe67f8feb4,212107554,0,0x0,8
tick,0x7ffe67f8feb4,212123660,0,0x0,8
tick,0x7ffe67f8feb4,212139943,0,0x0,8
tick,0x7ffe67f8feb4,212155597,0,0x0,8
tick,0x7ffe67f8feb4,212171644,0,0x0,8
tick,0x7ffe67f8feb4,212187592,0,0x0,8
tick,0x7ffe67f8feb4,212202899,0,0x0,8
tick,0x7ffe67f8feb4,212218884,0,0x0,8
tick,0x7ffe67f8feb4,212234570,0,0x0,8
tick,0x7ffe67f8feb4,212250003,0,0x0,8
tick,0x7ffe67f8feb4,212265660,0,0x0,8
tick,0x7ffe67f8feb4,212281551,0,0x0,8
tick,0x7ffe67f8feb4,212297583,0,0x0,8
tick,0x7ffe67f8feb4,212313671,0,0x0,8
tick,0x7ffe67f8feb4,212328706,0,0x0,8
tick,0x7ffe67f8feb4,212344583,0,0x0,8
tick,0x7ffe67f8feb4,212360380,0,0x0,8
tick,0x7ffe67f8feb4,212376345,0,0x0,8
tick,0x7ffe67f8feb4,212391296,0,0x0,8
tick,0x7ffe67f8feb4,212406586,0,0x0,8
tick,0x7ffe67f8feb4,212421727,0,0x0,8
tick,0x7ffe67f8feb4,212437800,0,0x0,8
tick,0x7ffe67f8feb4,212453419,0,0x0,8
tick,0x7ffe67f8feb4,212469377,0,0x0,8
tick,0x7ffe67f8feb4,212485371,0,0x0,8
tick,0x7ffe67f8feb4,212500524,0,0x0,8
tick,0x7ffe67f8feb4,212516286,0,0x0,8
tick,0x7ffe67f8feb4,212532075,0,0x0,8
tick,0x7ffe67f8feb4,212547630,0,0x0,8
tick,0x7ffe67f8feb4,212562884,0,0x0,8
tick,0x7ffe67f8feb4,212578855,0,0x0,8
tick,0x7ffe67f8feb4,212594966,0,0x0,8
tick,0x7ffe67f8feb4,212610841,0,0x0,8
tick,0x7ffe67f8feb4,212626845,0,0x0,8
tick,0x7ffe67f8feb4,212641851,0,0x0,8
tick,0x7ffe67f8feb4,212657856,0,0x0,8
tick,0x7ffe67f8feb4,212673956,0,0x0,8
tick,0x7ffe67f8feb4,212688834,0,0x0,8
tick,0x7ffe67f8feb4,212704819,0,0x0,8
tick,0x7ffe67f8feb4,212720755,0,0x0,8
tick,0x7ffe67f8feb4,212736592,0,0x0,8
tick,0x7ffe67f8feb4,212751836,0,0x0,8
tick,0x7ffe67f8feb4,212767548,0,0x0,8
tick,0x7ffe67f8feb4,212783627,0,0x0,8
tick,0x7ffe67f8feb4,212799050,0,0x0,8
tick,0x7ffe67f8feb4,212814426,0,0x0,8
tick,0x7ffe67f8feb4,212829564,0,0x0,8
tick,0x7ffe67f8feb4,212845570,0,0x0,8
tick,0x7ffe67f8feb4,212860896,0,0x0,8
tick,0x7ffe67f8feb4,212876744,0,0x0,8
tick,0x7ffe67f8feb4,212892851,0,0x0,8
tick,0x7ffe67f8feb4,212908634,0,0x0,8
tick,0x7ffe67f8feb4,212924686,0,0x0,8
tick,0x7ffe67f8feb4,212939724,0,0x0,8
tick,0x7ffe67f8feb4,212955408,0,0x0,8
tick,0x7ffe67f8feb4,212970578,0,0x0,8
tick,0x7ffe67f8feb4,212985781,0,0x0,8
tick,0x7ffe67f8feb4,213001520,0,0x0,8
tick,0x7ffe67f8feb4,213016579,0,0x0,8
tick,0x7ffe67f8feb4,213032610,0,0x0,8
tick,0x7ffe67f8feb4,213048542,0,0x0,8
tick,0x7ffe67f8feb4,213064363,0,0x0,8
tick,0x7ffe67f8feb4,213079739,0,0x0,8
tick,0x7ffe67f8feb4,213095291,0,0x0,8
tick,0x7ffe67f8feb4,213110571,0,0x0,8
tick,0x7ffe67f8feb4,213125576,0,0x0,8
tick,0x7ffe67f8feb4,213142328,0,0x0,8
tick,0x7ffe67f8feb4,213156613,0,0x0,8
tick,0x7ffe67f8feb4,213171576,0,0x0,8
tick,0x7ffe67f8feb4,213186575,0,0x0,8
tick,0x7ffe67f8feb4,213201705,0,0x0,8
tick,0x7ffe67f8feb4,213217584,0,0x0,8
tick,0x7ffe67f8feb4,213232734,0,0x0,8
tick,0x7ffe67f8feb4,213248756,0,0x0,8
tick,0x7ffe67f8feb4,213264312,0,0x0,8
tick,0x7ffe67f8feb4,213279757,0,0x0,8
tick,0x7ffe67f8feb4,213294640,0,0x0,8
tick,0x7ffe67f8feb4,213310572,0,0x0,8
tick,0x7ffe67f8feb4,213326580,0,0x0,8
tick,0x7ffe67f8feb4,213342604,0,0x0,8
tick,0x7ffe67f8feb4,213358556,0,0x0,8
tick,0x7ffe67f8feb4,213374649,0,0x0,8
tick,0x7ffe67f8feb4,213389685,0,0x0,8
tick,0x7ffe67f8feb4,213405253,0,0x0,8
tick,0x7ffe67f8feb4,213420741,0,0x0,8
tick,0x7ffe67f8feb4,213435632,0,0x0,8
tick,0x7ffe67f8feb4,213451041,0,0x0,8
tick,0x7ffe67f8feb4,213466449,0,0x0,8
tick,0x7ffe67f8feb4,213482394,0,0x0,8
tick,0x7ffe67f8feb4,213497567,0,0x0,8
tick,0x7ffe67f8feb4,213512577,0,0x0,8
tick,0x7ffe67f8feb4,213528591,0,0x0,8
tick,0x7ffe67f8feb4,213544351,0,0x0,8
tick,0x7ffe67f8feb4,213561145,0,0x0,8
tick,0x7ffe67f8feb4,213576495,0,0x0,8
tick,0x7ffe67f8feb4,213592600,0,0x0,8
tick,0x7ffe67f8feb4,213607355,0,0x0,8
tick,0x7ffe67f8feb4,213623317,0,0x0,8
tick,0x7ffe67f8feb4,213639322,0,0x0,8
tick,0x7ffe67f8feb4,213655313,0,0x0,8
tick,0x7ffe67f8feb4,213671358,0,0x0,8
tick,0x7ffe67f8feb4,213686368,0,0x0,8
tick,0x7ffe67f8feb4,213701510,0,0x0,8
tick,0x7ffe67f8feb4,213717597,0,0x0,8
tick,0x7ffe67f8feb4,213733606,0,0x0,8
tick,0x7ffe67f8feb4,213749552,0,0x0,8
tick,0x7ffe67f8feb4,213764761,0,0x0,8
tick,0x7ffe67f8feb4,213780724,0,0x0,8
tick,0x7ffe67f8feb4,213796293,0,0x0,8
tick,0x7ffe67f8feb4,213811610,0,0x0,8
tick,0x7ffe67f8feb4,213827550,0,0x0,8
tick,0x7ffe67f8feb4,213843722,0,0x0,8
tick,0x7ffe67f8feb4,213860129,0,0x0,8
tick,0x7ffe67f8feb4,213876071,0,0x0,8
tick,0x7ffe67f8feb4,213890966,0,0x0,8
tick,0x7ffe67f8feb4,213906616,0,0x0,8
tick,0x7ffe67f8feb4,213922583,0,0x0,8
tick,0x7ffe67f8feb4,213938560,0,0x0,8
tick,0x7ffe67f8feb4,213953803,0,0x0,8
tick,0x7ffe67f8feb4,213969553,0,0x0,8
tick,0x7ffe67f8feb4,213984866,0,0x0,8
tick,0x7ffe67f8feb4,214000721,0,0x0,8
tick,0x7ffe67f8feb4,214015549,0,0x0,8
tick,0x7ffe67f8feb4,214031611,0,0x0,8
tick,0x7ffe67f8feb4,214046576,0,0x0,8
tick,0x7ffe67f8feb4,214062239,0,0x0,8
tick,0x7ffe67f8feb4,214078121,0,0x0,8
tick,0x7ffe67f8feb4,214094521,0,0x0,8
tick,0x7ffe67f8feb4,214110179,0,0x0,8
tick,0x7ffe67f8feb4,214126211,0,0x0,8
tick,0x7ffe67f8feb4,214142042,0,0x0,8
tick,0x7ffe67f8feb4,214157877,0,0x0,8
tick,0x7ffe67f8feb4,214172620,0,0x0,8
tick,0x7ffe67f8feb4,214188602,0,0x0,8
tick,0x7ffe67f8feb4,214204403,0,0x0,8
tick,0x7ffe67f8feb4,214220423,0,0x0,8
tick,0x7ffe67f8feb4,214236414,0,0x0,8
tick,0x7ffe67f8feb4,214251834,0,0x0,8
tick,0x7ffe67f8feb4,214267950,0,0x0,8
tick,0x7ffe67f8feb4,214283859,0,0x0,8
tick,0x7ffe67f8feb4,214299899,0,0x0,8
tick,0x7ffe67f8feb4,214315841,0,0x0,8
tick,0x7ffe67f8feb4,214331997,0,0x0,8
tick,0x7ffe67f8feb4,214348274,0,0x0,8
tick,0x7ffe67f8feb4,214363905,0,0x0,8
tick,0x7ffe67f8feb4,214380281,0,0x0,8
tick,0x7ffe67f8feb4,214395235,0,0x0,8
tick,0x7ffe67f8feb4,214411241,0,0x0,8
tick,0x7ffe67f8feb4,214426701,0,0x0,8
tick,0x7ffe67f8feb4,214443080,0,0x0,8
tick,0x7ffe67f8feb4,214457562,0,0x0,8
tick,0x7ffe67f8feb4,214472756,0,0x0,8
tick,0x7ffe67f8feb4,214488570,0,0x0,8
tick,0x7ffe67f8feb4,214504445,0,0x0,8
tick,0x7ffe67f8feb4,214519848,0,0x0,8
tick,0x7ffe67f8feb4,214535891,0,0x0,8
tick,0x7ffe67f8feb4,214551725,0,0x0,8
tick,0x7ffe67f8feb4,214567764,0,0x0,8
tick,0x7ffe67f8feb4,214583641,0,0x0,8
tick,0x7ffe67f8feb4,214599611,0,0x0,8
tick,0x7ffe67f8feb4,214615856,0,0x0,8
tick,0x7ffe67f8feb4,214631866,0,0x0,8
tick,0x7ffe67f8feb4,214647698,0,0x0,8
tick,0x7ffe67f8feb4,214663655,0,0x0,8
tick,0x7ffe67f8feb4,214679590,0,0x0,8
tick,0x7ffe67f8feb4,214695591,0,0x0,8
tick,0x7ffe67f8feb4,214711630,0,0x0,8
tick,0x7ffe67f8feb4,214727582,0,0x0,8
tick,0x7ffe67f8feb4,214743595,0,0x0,8
tick,0x7ffe67f8feb4,214759576,0,0x0,8
tick,0x7ffe67f8feb4,214775708,0,0x0,8
tick,0x7ffe67f8feb4,214790715,0,0x0,8
tick,0x7ffe67f8feb4,214806333,0,0x0,8
tick,0x7ffe67f8feb4,214821716,0,0x0,8
tick,0x7ffe67f8feb4,214837569,0,0x0,8
tick,0x7ffe67f8feb4,214853230,0,0x0,8
tick,0x7ffe67f8feb4,214869236,0,0x0,8
tick,0x7ffe67f8feb4,214885237,0,0x0,8
tick,0x7ffe67f8feb4,214900600,0,0x0,8
tick,0x7ffe67f8feb4,214916066,0,0x0,8
tick,0x7ffe67f8feb4,214931292,0,0x0,8
tick,0x7ffe67f8feb4,214947294,0,0x0,8
tick,0x7ffe67f8feb4,214963285,0,0x0,8
tick,0x7ffe67f8feb4,214979267,0,0x0,8
tick,0x7ffe67f8feb4,214995362,0,0x0,8
tick,0x7ffe67f8feb4,215011311,0,0x0,8
tick,0x7ffe67f8feb4,215026705,0,0x0,8
tick,0x7ffe67f8feb4,215044350,0,0x0,8
tick,0x7ffe67f8feb4,215057583,0,0x0,8
tick,0x7ffe67f8feb4,215073609,0,0x0,8
tick,0x7ffe67f8feb4,215088713,0,0x0,8
tick,0x7ffe67f8feb4,215104604,0,0x0,8
tick,0x7ffe67f8feb4,215119730,0,0x0,8
tick,0x7ffe67f8feb4,215135000,0,0x0,8
tick,0x7ffe67f8feb4,215150578,0,0x0,8
tick,0x7ffe67f8feb4,215165775,0,0x0,8
tick,0x7ffe67f8feb4,215181156,0,0x0,8
tick,0x7ffe67f8feb4,215196735,0,0x0,8
tick,0x7ffe67f8feb4,215212720,0,0x0,8
tick,0x7ffe67f8feb4,215228761,0,0x0,8
tick,0x7ffe67f8feb4,215244741,0,0x0,8
tick,0x7ffe67f8feb4,215260756,0,0x0,8
tick,0x7ffe67f8feb4,215277529,0,0x0,8
tick,0x7ffe67f8feb4,215293859,0,0x0,8
tick,0x7ffe67f8feb4,215308740,0,0x0,8
tick,0x7ffe67f8feb4,215324742,0,0x0,8
tick,0x7ffe67f8feb4,215340738,0,0x0,8
tick,0x7ffe67f8feb4,215356806,0,0x0,8
tick,0x7ffe67f8feb4,215372722,0,0x0,8
tick,0x7ffe67f8feb4,215388739,0,0x0,8
tick,0x7ffe67f8feb4,215404748,0,0x0,8
tick,0x7ffe67f8feb4,215420889,0,0x0,8
tick,0x7ffe67f8feb4,215436815,0,0x0,8
tick,0x7ffe67f8feb4,215452739,0,0x0,8
tick,0x7ffe67f8feb4,215468742,0,0x0,8
tick,0x7ffe67f8feb4,215484752,0,0x0,8
tick,0x7ffe67f8feb4,215500772,0,0x0,8
tick,0x7ffe67f8feb4,215516776,0,0x0,8
tick,0x7ffe67f8feb4,215532761,0,0x0,8
tick,0x7ffe67f8feb4,215548544,0,0x0,8
tick,0x7ffe67f8feb4,215564575,0,0x0,8
tick,0x7ffe67f8feb4,215580020,0,0x0,8
tick,0x7ffe67f8feb4,215595583,0,0x0,8
tick,0x7ffe67f8feb4,215611578,0,0x0,8
tick,0x7ffe67f8feb4,215627728,0,0x0,8
tick,0x7ffe67f8feb4,215643699,0,0x0,8
tick,0x7ffe67f8feb4,215660201,0,0x0,8
tick,0x7ffe67f8feb4,215675404,0,0x0,8
tick,0x7ffe67f8feb4,215691428,0,0x0,8
tick,0x7ffe67f8feb4,215707589,0,0x0,8
tick,0x7ffe67f8feb4,215723423,0,0x0,8
tick,0x7ffe67f8feb4,215739441,0,0x0,8
tick,0x7ffe67f8feb4,215755398,0,0x0,8
tick,0x7ffe67f8feb4,215770529,0,0x0,8
tick,0x7ffe67f8feb4,215786403,0,0x0,8
tick,0x7ffe67f8feb4,215801444,0,0x0,8
tick,0x7ffe67f8feb4,215817457,0,0x0,8
tick,0x7ffe67f8feb4,215833398,0,0x0,8
tick,0x7ffe67f8feb4,215849402,0,0x0,8
tick,0x7ffe67f8feb4,215864559,0,0x0,8
tick,0x7ffe67f8feb4,215879736,0,0x0,8
tick,0x7ffe67f8feb4,215895421,0,0x0,8
tick,0x7ffe67f8feb4,215911422,0,0x0,8
tick,0x7ffe67f8feb4,215928662,0,0x0,8
tick,0x7ffe67f8feb4,215943060,0,0x0,8
tick,0x7ffe67f8feb4,215958574,0,0x0,8
tick,0x7ffe67f8feb4,215973956,0,0x0,8
tick,0x7ffe67f8feb4,215989752,0,0x0,8
tick,0x7ffe67f8feb4,216004912,0,0x0,8
tick,0x7ffe67f8feb4,216020641,0,0x0,8
tick,0x7ffe67f8feb4,216036295,0,0x0,8
tick,0x7ffe67f8feb4,216051433,0,0x0,8
tick,0x7ffe67f8feb4,216066586,0,0x0,8
tick,0x7ffe67f8feb4,216081950,0,0x0,8
tick,0x7ffe67f8feb4,216097652,0,0x0,8
tick,0x7ffe67f8feb4,216112822,0,0x0,8
tick,0x7ffe67f8feb4,216128648,0,0x0,8
tick,0x7ffe67f8feb4,216144654,0,0x0,8
tick,0x7ffe67f8feb4,216160842,0,0x0,8
tick,0x7ffe67f8feb4,216176325,0,0x0,8
tick,0x7ffe67f8feb4,216191641,0,0x0,8
tick,0x7ffe67f8feb4,216207710,0,0x0,8
tick,0x7ffe67f8feb4,216223103,0,0x0,8
tick,0x7ffe67f8feb4,216238754,0,0x0,8
tick,0x7ffe67f8feb4,216254382,0,0x0,8
tick,0x7ffe67f8feb4,216269847,0,0x0,8
tick,0x7ffe67f8feb4,216285754,0,0x0,8
tick,0x7ffe67f8feb4,216301021,0,0x0,8
tick,0x7ffe67f8feb4,216316081,0,0x0,8
tick,0x7ffe67f8feb4,216331771,0,0x0,8
tick,0x7ffe67f8feb4,216347317,0,0x0,8
tick,0x7ffe67f8feb4,216362618,0,0x0,8
tick,0x7ffe67f8feb4,216378501,0,0x0,8
tick,0x7ffe67f8feb4,216394502,0,0x0,8
tick,0x7ffe67f8feb4,216409757,0,0x0,8
tick,0x7ffe67f8feb4,216425631,0,0x0,8
tick,0x7ffe67f8feb4,216440794,0,0x0,8
tick,0x7ffe67f8feb4,216456685,0,0x0,8
tick,0x7ffe67f8feb4,216472259,0,0x0,8
tick,0x7ffe67f8feb4,216487514,0,0x0,8
tick,0x7ffe67f8feb4,216503509,0,0x0,8
tick,0x7ffe67f8feb4,216519514,0,0x0,8
tick,0x7ffe67f8feb4,216535533,0,0x0,8
tick,0x7ffe67f8feb4,216550706,0,0x0,8
tick,0x7ffe67f8feb4,216566496,0,0x0,8
tick,0x7ffe67f8feb4,216581531,0,0x0,8
tick,0x7ffe67f8feb4,216596545,0,0x0,8
tick,0x7ffe67f8feb4,216611605,0,0x0,8
tick,0x7ffe67f8feb4,216628185,0,0x0,8
tick,0x7ffe67f8feb4,216643503,0,0x0,8
tick,0x7ffe67f8feb4,216659051,0,0x0,8
tick,0x7ffe67f8feb4,216674019,0,0x0,8
tick,0x7ffe67f8feb4,216690026,0,0x0,8
tick,0x7ffe67f8feb4,216706024,0,0x0,8
tick,0x7ffe67f8feb4,216721403,0,0x0,8
tick,0x7ffe67f8feb4,216736611,0,0x0,8
tick,0x7ffe67f8feb4,216752067,0,0x0,8
tick,0x7ffe67f8feb4,216767597,0,0x0,8
tick,0x7ffe67f8feb4,216782853,0,0x0,8
tick,0x7ffe67f8feb4,216798592,0,0x0,8
tick,0x7ffe67f8feb4,216814629,0,0x0,8
tick,0x7ffe67f8feb4,216830595,0,0x0,8
tick,0x7ffe67f8feb4,216846118,0,0x0,8
tick,0x7ffe67f8feb4,216862062,0,0x0,8
tick,0x7ffe67f8feb4,216878322,0,0x0,8
tick,0x7ffe67f8feb4,216893594,0,0x0,8
tick,0x7ffe67f8feb4,216909578,0,0x0,8
tick,0x7ffe67f8feb4,216924836,0,0x0,8
tick,0x7ffe67f8feb4,216940599,0,0x0,8
tick,0x7ffe67f8feb4,216956778,0,0x0,8
tick,0x7ffe67f8feb4,216971586,0,0x0,8
tick,0x7ffe67f8feb4,216987582,0,0x0,8
tick,0x7ffe67f8feb4,217002773,0,0x0,8
tick,0x7ffe67f8feb4,217018665,0,0x0,8
tick,0x7ffe67f8feb4,217034183,0,0x0,8
tick,0x7ffe67f8feb4,217049735,0,0x0,8
tick,0x7ffe67f8feb4,217065624,0,0x0,8
tick,0x7ffe67f8feb4,217080942,0,0x0,8
tick,0x7ffe67f8feb4,217096946,0,0x0,8
tick,0x7ffe67f8feb4,217112955,0,0x0,8
tick,0x7ffe67f8feb4,217128954,0,0x0,8
tick,0x7ffe67f8feb4,217143771,0,0x0,8
tick,0x7ffe67f8feb4,217159778,0,0x0,8
tick,0x7ffe67f8feb4,217175006,0,0x0,8
tick,0x7ffe67f8feb4,217191024,0,0x0,8
tick,0x7ffe67f8feb4,217206359,0,0x0,8
tick,0x7ffe67f8feb4,217222325,0,0x0,8
tick,0x7ffe67f8feb4,217237573,0,0x0,8
tick,0x7ffe67f8feb4,217253359,0,0x0,8
tick,0x7ffe67f8feb4,217268585,0,0x0,8
tick,0x7ffe67f8feb4,217284584,0,0x0,8
tick,0x7ffe67f8feb4,217300611,0,0x0,8
tick,0x7ffe67f8feb4,217316515,0,0x0,8
tick,0x7ffe67f8feb4,217332265,0,0x0,8
tick,0x7ffe67f8feb4,217348282,0,0x0,8
tick,0x7ffe67f8feb4,217363269,0,0x0,8
tick,0x7ffe67f8feb4,217378581,0,0x0,8
tick,0x7ffe67f8feb4,217393945,0,0x0,8
tick,0x7ffe67f8feb4,217409739,0,0x0,8
tick,0x7ffe67f8feb4,217425242,0,0x0,8
tick,0x7ffe67f8feb4,217440762,0,0x0,8
tick,0x7ffe67f8feb4,217456193,0,0x0,8
tick,0x7ffe67f8feb4,217471632,0,0x0,8
tick,0x7ffe67f8feb4,217487659,0,0x0,8
tick,0x7ffe67f8feb4,217502855,0,0x0,8
tick,0x7ffe67f8feb4,217518621,0,0x0,8
tick,0x7ffe67f8feb4,217534123,0,0x0,8
tick,0x7ffe67f8feb4,217550070,0,0x0,8
tick,0x7ffe67f8feb4,217565460,0,0x0,8
tick,0x7ffe67f8feb4,217580708,0,0x0,8
tick,0x7ffe67f8feb4,217595963,0,0x0,8
tick,0x7ffe67f8feb4,217611131,0,0x0,8
tick,0x7ffe67f8feb4,217627182,0,0x0,8
tick,0x7ffe67f8feb4,217643115,0,0x0,8
tick,0x7ffe67f8feb4,217659112,0,0x0,8
tick,0x7ffe67f8feb4,217675132,0,0x0,8
tick,0x7ffe67f8feb4,217690144,0,0x0,8
tick,0x7ffe67f8feb4,217706120,0,0x0,8
tick,0x7ffe67f8feb4,217721110,0,0x0,8
tick,0x7ffe67f8feb4,217735966,0,0x0,8
tick,0x7ffe67f8feb4,217751706,0,0x0,8
tick,0x7ffe67f8feb4,217766717,0,0x0,8
tick,0x7ffe67f8feb4,217782705,0,0x0,8
tick,0x7ffe67f8feb4,217798592,0,0x0,8
tick,0x7ffe67f8feb4,217814630,0,0x0,8
tick,0x7ffe67f8feb4,217830737,0,0x0,8
tick,0x7ffe67f8feb4,217845911,0,0x0,8
tick,0x7ffe67f8feb4,217860896,0,0x0,8
tick,0x7ffe67f8feb4,217876017,0,0x0,8
tick,0x7ffe67f8feb4,217891749,0,0x0,8
tick,0x7ffe67f8feb4,217907653,0,0x0,8
tick,0x7ffe67f8feb4,217922728,0,0x0,8
tick,0x7ffe67f8feb4,217938579,0,0x0,8
tick,0x7ffe67f8feb4,217953852,0,0x0,8
tick,0x7ffe67f8feb4,217969586,0,0x0,8
tick,0x7ffe67f8feb4,217984742,0,0x0,8
tick,0x7ffe67f8feb4,218000069,0,0x0,8
tick,0x7ffe67f8feb4,218015260,0,0x0,8
tick,0x7ffe67f8feb4,218030735,0,0x0,8
tick,0x7ffe67f8feb4,218047263,0,0x0,8
tick,0x7ffe67f8feb4,218062870,0,0x0,8
tick,0x7ffe67f8feb4,218078708,0,0x0,8
tick,0x7ffe67f8feb4,218093728,0,0x0,8
tick,0x7ffe67f8feb4,218109582,0,0x0,8
tick,0x7ffe67f8feb4,218125104,0,0x0,8
tick,0x7ffe67f8feb4,218140749,0,0x0,8
tick,0x7ffe67f8feb4,218156602,0,0x0,8
tick,0x7ffe67f8feb4,218172514,0,0x0,8
tick,0x7ffe67f8feb4,218188662,0,0x0,8
tick,0x7ffe67f8feb4,218203748,0,0x0,8
tick,0x7ffe67f8feb4,218218617,0,0x0,8
tick,0x7ffe67f8feb4,218234539,0,0x0,8
tick,0x7ffe67f8feb4,218249760,0,0x0,8
tick,0x7ffe67f8feb4,218265583,0,0x0,8
tick,0x7ffe67f8feb4,218281617,0,0x0,8
tick,0x7ffe67f8feb4,218297589,0,0x0,8
tick,0x7ffe67f8feb4,218313584,0,0x0,8
tick,0x7ffe67f8feb4,218328828,0,0x0,8
tick,0x7ffe67f8feb4,218344645,0,0x0,8
tick,0x7ffe67f8feb4,218360609,0,0x0,8
tick,0x7ffe67f8feb4,218375620,0,0x0,8
tick,0x7ffe67f8feb4,218390796,0,0x0,8
tick,0x7ffe67f8feb4,218406102,0,0x0,8
tick,0x7ffe67f8feb4,218421224,0,0x0,8
tick,0x7ffe67f8feb4,218436466,0,0x0,8
tick,0x7ffe67f8feb4,218452472,0,0x0,8
tick,0x7ffe67f8feb4,218468578,0,0x0,8
tick,0x7ffe67f8feb4,218483667,0,0x0,8
tick,0x7ffe67f8feb4,218499602,0,0x0,8
tick,0x7ffe67f8feb4,218515611,0,0x0,8
tick,0x7ffe67f8feb4,218531595,0,0x0,8
tick,0x7ffe67f8feb4,218547607,0,0x0,8
tick,0x7ffe67f8feb4,218564281,0,0x0,8
tick,0x7ffe67f8feb4,218579728,0,0x0,8
tick,0x7ffe67f8feb4,218595355,0,0x0,8
tick,0x7ffe67f8feb4,218611414,0,0x0,8
tick,0x7ffe67f8feb4,218627403,0,0x0,8
tick,0x7ffe67f8feb4,218643388,0,0x0,8
tick,0x7ffe67f8feb4,218658882,0,0x0,8
tick,0x7ffe67f8feb4,218674892,0,0x0,8
tick,0x7ffe67f8feb4,218690881,0,0x0,8
tick,0x7ffe67f8feb4,218706903,0,0x0,8
tick,0x7ffe67f8feb4,218722551,0,0x0,8
tick,0x7ffe67f8feb4,218738579,0,0x0,8
tick,0x7ffe67f8feb4,218753748,0,0x0,8
tick,0x7ffe67f8feb4,218769745,0,0x0,8
tick,0x7ffe67f8feb4,218785380,0,0x0,8
tick,0x7ffe67f8feb4,218800730,0,0x0,8
tick,0x7ffe67f8feb4,218816347,0,0x0,8
tick,0x7ffe67f8feb4,218831591,0,0x0,8
tick,0x7ffe67f8feb4,218847605,0,0x0,8
tick,0x7ffe67f8feb4,218863614,0,0x0,8
tick,0x7ffe67f8feb4,218878719,0,0x0,8
tick,0x7ffe67f8feb4,218894249,0,0x0,8
tick,0x7ffe67f8feb4,218909790,0,0x0,8
tick,0x7ffe67f8feb4,218925251,0,0x0,8
tick,0x7ffe67f8feb4,218940885,0,0x0,8
tick,0x7ffe67f8feb4,218956397,0,0x0,8
tick,0x7ffe67f8feb4,218972024,0,0x0,8
tick,0x7ffe67f8feb4,218987695,0,0x0,8
tick,0x7ffe67f8feb4,219003539,0,0x0,8
tick,0x7ffe67f8feb4,219018753,0,0x0,8
tick,0x7ffe67f8feb4,219034591,0,0x0,8
tick,0x7ffe67f8feb4,219050175,0,0x0,8
tick,0x7ffe67f8feb4,219065634,0,0x0,8
tick,0x7ffe67f8feb4,219081682,0,0x0,8
tick,0x7ffe67f8feb4,219097759,0,0x0,8
tick,0x7ffe67f8feb4,219113602,0,0x0,8
tick,0x7ffe67f8feb4,219129596,0,0x0,8
tick,0x7ffe67f8feb4,219144738,0,0x0,8
tick,0x7ffe67f8feb4,219160612,0,0x0,8
tick,0x7ffe67f8feb4,219176135,0,0x0,8
tick,0x7ffe67f8feb4,219191630,0,0x0,8
tick,0x7ffe67f8feb4,219206266,0,0x0,8
tick,0x7ffe67f8feb4,219221407,0,0x0,8
tick,0x7ffe67f8feb4,219236631,0,0x0,8
tick,0x7ffe67f8feb4,219252618,0,0x0,8
tick,0x7ffe67f8feb4,219268640,0,0x0,8
tick,0x7ffe67f8feb4,219284106,0,0x0,8
tick,0x7ffe67f8feb4,219299663,0,0x0,8
tick,0x7ffe67f8feb4,219315686,0,0x0,8
tick,0x7ffe67f8feb4,219331884,0,0x0,8
tick,0x7ffe67f8feb4,219347685,0,0x0,8
tick,0x7ffe67f8feb4,219364328,0,0x0,8
tick,0x7ffe67f8feb4,219378743,0,0x0,8
tick,0x7ffe67f8feb4,219394131,0,0x0,8
tick,0x7ffe67f8feb4,219410126,0,0x0,8
tick,0x7ffe67f8feb4,219426137,0,0x0,8
tick,0x7ffe67f8feb4,219441761,0,0x0,8
tick,0x7ffe67f8feb4,219457677,0,0x0,8
tick,0x7ffe67f8feb4,219473092,0,0x0,8
tick,0x7ffe67f8feb4,219488933,0,0x0,8
tick,0x7ffe67f8feb4,219505197,0,0x0,8
tick,0x7ffe67f8feb4,219520682,0,0x0,8
tick,0x7ffe67f8feb4,219536218,0,0x0,8
tick,0x7ffe67f8feb4,219551799,0,0x0,8
tick,0x7ffe67f8feb4,219567634,0,0x0,8
tick,0x7ffe67f8feb4,219582933,0,0x0,8
tick,0x7ffe67f8feb4,219598880,0,0x0,8
tick,0x7ffe67f8feb4,219614955,0,0x0,8
tick,0x7ffe67f8feb4,219630945,0,0x0,8
tick,0x7ffe67f8feb4,219648088,0,0x0,8
tick,0x7ffe67f8feb4,219662820,0,0x0,8
tick,0x7ffe67f8feb4,219678843,0,0x0,8
tick,0x7ffe67f8feb4,219694867,0,0x0,8
tick,0x7ffe67f8feb4,219710863,0,0x0,8
tick,0x7ffe67f8feb4,219726858,0,0x0,8
tick,0x7ffe67f8feb4,219741871,0,0x0,8
tick,0x7ffe67f8feb4,219757841,0,0x0,8
tick,0x7ffe67f8feb4,219773094,0,0x0,8
tick,0x7ffe67f8feb4,219787710,0,0x0,8
tick,0x7ffe67f8feb4,219803680,0,0x0,8
tick,0x7ffe67f8feb4,219818676,0,0x0,8
tick,0x7ffe67f8feb4,219834724,0,0x0,8
tick,0x7ffe67f8feb4,219850065,0,0x0,8
tick,0x7ffe67f8feb4,219866028,0,0x0,8
tick,0x7ffe67f8feb4,219881741,0,0x0,8
tick,0x7ffe67f8feb4,219897845,0,0x0,8
tick,0x7ffe67f8feb4,219913042,0,0x0,8
tick,0x7ffe67f8feb4,219929031,0,0x0,8
tick,0x7ffe67f8feb4,219944251,0,0x0,8
tick,0x7ffe67f8feb4,219959573,0,0x0,8
tick,0x7ffe67f8feb4,219975339,0,0x0,8
tick,0x7ffe67f8feb4,219990015,0,0x0,8
tick,0x7ffe67f8feb4,220005712,0,0x0,8
tick,0x7ffe67f8feb4,220020910,0,0x0,8
tick,0x7ffe67f8feb4,220036910,0,0x0,8
tick,0x7ffe67f8feb4,220052907,0,0x0,8
tick,0x7ffe67f8feb4,220069448,0,0x0,8
tick,0x7ffe67f8feb4,220084692,0,0x0,8
tick,0x7ffe67f8feb4,220100601,0,0x0,8
tick,0x7ffe67f8feb4,220116633,0,0x0,8
tick,0x7ffe67f8feb4,220132663,0,0x0,8
tick,0x7ffe67f8feb4,220148636,0,0x0,8
tick,0x7ffe67f8feb4,220164555,0,0x0,8
tick,0x7ffe67f8feb4,220180085,0,0x0,8
tick,0x7ffe67f8feb4,220195085,0,0x0,8
tick,0x7ffe67f8feb4,220210752,0,0x0,8
tick,0x7ffe67f8feb4,220226642,0,0x0,8
tick,0x7ffe67f8feb4,220242652,0,0x0,8
tick,0x7ffe67f8feb4,220258624,0,0x0,8
tick,0x7ffe67f8feb4,220274267,0,0x0,8
tick,0x7ffe67f8feb4,220289602,0,0x0,8
tick,0x7ffe67f8feb4,220305370,0,0x0,8
tick,0x7ffe67f8feb4,220321057,0,0x0,8
tick,0x7ffe67f8feb4,220336621,0,0x0,8
tick,0x7ffe67f8feb4,220352621,0,0x0,8
tick,0x7ffe67f8feb4,220368676,0,0x0,8
tick,0x7ffe67f8feb4,220383638,0,0x0,8
tick,0x7ffe67f8feb4,220399667,0,0x0,8
tick,0x7ffe67f8feb4,220415657,0,0x0,8
tick,0x7ffe67f8feb4,220430604,0,0x0,8
tick,0x7ffe67f8feb4,220446645,0,0x0,8
tick,0x7ffe67f8feb4,220461628,0,0x0,8
tick,0x7ffe67f8feb4,220477612,0,0x0,8
tick,0x7ffe67f8feb4,220493130,0,0x0,8
tick,0x7ffe67f8feb4,220508649,0,0x0,8
tick,0x7ffe67f8feb4,220524667,0,0x0,8
tick,0x7ffe67f8feb4,220540711,0,0x0,8
tick,0x7ffe67f8feb4,220555880,0,0x0,8
tick,0x7ffe67f8feb4,220571601,0,0x0,8
tick,0x7ffe67f8feb4,220587624,0,0x0,8
tick,0x7ffe67f8feb4,220603194,0,0x0,8
tick,0x7ffe67f8feb4,220618744,0,0x0,8
tick,0x7ffe67f8feb4,220634764,0,0x0,8
tick,0x7ffe67f8feb4,220650749,0,0x0,8
tick,0x7ffe67f8feb4,220666804,0,0x0,8
tick,0x7ffe67f8feb4,220682865,0,0x0,8
tick,0x7ffe67f8feb4,220698983,0,0x0,8
tick,0x7ffe67f8feb4,220715167,0,0x0,8
tick,0x7ffe67f8feb4,220730724,0,0x0,8
tick,0x7ffe67f8feb4,220746144,0,0x0,8
tick,0x7ffe67f8feb4,220761742,0,0x0,8
tick,0x7ffe67f8feb4,220777752,0,0x0,8
tick,0x7ffe67f8feb4,220792773,0,0x0,8
tick,0x7ffe67f8feb4,220808595,0,0x0,8
tick,0x7ffe67f8feb4,220824627,0,0x0,8
tick,0x7ffe67f8feb4,220839651,0,0x0,8
tick,0x7ffe67f8feb4,220855375,0,0x0,8
tick,0x7ffe67f8feb4,220870756,0,0x0,8
tick,0x7ffe67f8feb4,220886606,0,0x0,8
tick,0x7ffe67f8feb4,220902637,0,0x0,8
tick,0x7ffe67f8feb4,220917869,0,0x0,8
tick,0x7ffe67f8feb4,220932616,0,0x0,8
tick,0x7ffe67f8feb4,220947637,0,0x0,8
tick,0x7ffe67f8feb4,220963283,0,0x0,8
tick,0x7ffe67f8feb4,220978615,0,0x0,8
tick,0x7ffe67f8feb4,220993641,0,0x0,8
tick,0x7ffe67f8feb4,221009612,0,0x0,8
tick,0x7ffe67f8feb4,221025616,0,0x0,8
tick,0x7ffe67f8feb4,221041593,0,0x0,8
tick,0x7ffe67f8feb4,221057777,0,0x0,8
tick,0x7ffe67f8feb4,221072757,0,0x0,8
tick,0x7ffe67f8feb4,221088647,0,0x0,8
tick,0x7ffe67f8feb4,221104649,0,0x0,8
tick,0x7ffe67f8feb4,221119830,0,0x0,8
tick,0x7ffe67f8feb4,221135639,0,0x0,8
tick,0x7ffe67f8feb4,221150674,0,0x0,8
tick,0x7ffe67f8feb4,221165661,0,0x0,8
tick,0x7ffe67f8feb4,221181132,0,0x0,8
tick,0x7ffe67f8feb4,221196301,0,0x0,8
tick,0x7ffe67f8feb4,221211714,0,0x0,8
tick,0x7ffe67f8feb4,221227732,0,0x0,8
tick,0x7ffe67f8feb4,221242941,0,0x0,8
tick,0x7ffe67f8feb4,221258681,0,0x0,8
tick,0x7ffe67f8feb4,221274191,0,0x0,8
tick,0x7ffe67f8feb4,221289665,0,0x0,8
tick,0x7ffe67f8feb4,221305374,0,0x0,8
tick,0x7ffe67f8feb4,221320669,0,0x0,8
tick,0x7ffe67f8feb4,221336484,0,0x0,8
tick,0x7ffe67f8feb4,221352234,0,0x0,8
tick,0x7ffe67f8feb4,221368222,0,0x0,8
tick,0x7ffe67f8feb4,221384226,0,0x0,8
tick,0x7ffe67f8feb4,221400243,0,0x0,8
tick,0x7ffe67f8feb4,221416381,0,0x0,8
tick,0x7ffe67f8feb4,221431908,0,0x0,8
tick,0x7ffe67f8feb4,221447560,0,0x0,8
tick,0x7ffe67f8feb4,221463544,0,0x0,8
tick,0x7ffe67f8feb4,221479596,0,0x0,8
tick,0x7ffe67f8feb4,221494590,0,0x0,8
tick,0x7ffe67f8feb4,221509768,0,0x0,8
tick,0x7ffe67f8feb4,221525543,0,0x0,8
tick,0x7ffe67f8feb4,221540491,0,0x0,8
tick,0x7ffe67f8feb4,221556351,0,0x0,8
tick,0x7ffe67f8feb4,221571881,0,0x0,8
tick,0x7ffe67f8feb4,221586776,0,0x0,8
tick,0x7ffe67f8feb4,221602632,0,0x0,8
tick,0x7ffe67f8feb4,221618665,0,0x0,8
tick,0x7ffe67f8feb4,221634365,0,0x0,8
tick,0x7ffe67f8feb4,221650455,0,0x0,8
tick,0x7ffe67f8feb4,221665327,0,0x0,8
tick,0x7ffe67f8feb4,221680295,0,0x0,8
tick,0x7ffe67f8feb4,221696310,0,0x0,8
tick,0x7ffe67f8feb4,221712300,0,0x0,8
tick,0x7ffe67f8feb4,221728298,0,0x0,8
tick,0x7ffe67f8feb4,221744290,0,0x0,8
tick,0x7ffe67f8feb4,221759616,0,0x0,8
tick,0x7ffe67f8feb4,221775356,0,0x0,8
tick,0x7ffe67f8feb4,221791302,0,0x0,8
tick,0x7ffe67f8feb4,221807342,0,0x0,8
tick,0x7ffe67f8feb4,221823123,0,0x0,8
tick,0x7ffe67f8feb4,221838604,0,0x0,8
tick,0x7ffe67f8feb4,221854184,0,0x0,8
tick,0x7ffe67f8feb4,221869750,0,0x0,8
tick,0x7ffe67f8feb4,221885350,0,0x0,8
tick,0x7ffe67f8feb4,221901485,0,0x0,8
tick,0x7ffe67f8feb4,221916354,0,0x0,8
tick,0x7ffe67f8feb4,221931362,0,0x0,8
tick,0x7ffe67f8feb4,221946614,0,0x0,8
tick,0x7ffe67f8feb4,221961767,0,0x0,8
tick,0x7ffe67f8feb4,221977352,0,0x0,8
tick,0x7ffe67f8feb4,221993381,0,0x0,8
tick,0x7ffe67f8feb4,222008686,0,0x0,8
tick,0x7ffe67f8feb4,222023972,0,0x0,8
tick,0x7ffe67f8feb4,222039461,0,0x0,8
tick,0x7ffe67f8feb4,222055405,0,0x0,8
tick,0x7ffe67f8feb4,222071003,0,0x0,8
tick,0x7ffe67f8feb4,222086851,0,0x0,8
tick,0x7ffe67f8feb4,222102617,0,0x0,8
tick,0x7ffe67f8feb4,222118601,0,0x0,8
tick,0x7ffe67f8feb4,222134628,0,0x0,8
tick,0x7ffe67f8feb4,222150613,0,0x0,8
tick,0x7ffe67f8feb4,222166721,0,0x0,8
tick,0x7ffe67f8feb4,222181910,0,0x0,8
tick,0x7ffe67f8feb4,222197645,0,0x0,8
tick,0x7ffe67f8feb4,222213687,0,0x0,8
tick,0x7ffe67f8feb4,222229744,0,0x0,8
tick,0x7ffe67f8feb4,222245654,0,0x0,8
tick,0x7ffe67f8feb4,222261739,0,0x0,8
tick,0x7ffe67f8feb4,222278196,0,0x0,8
tick,0x7ffe67f8feb4,222292858,0,0x0,8
tick,0x7ffe67f8feb4,222308603,0,0x0,8
tick,0x7ffe67f8feb4,222323803,0,0x0,8
tick,0x7ffe67f8feb4,222339749,0,0x0,8
tick,0x7ffe67f8feb4,222355520,0,0x0,8
tick,0x7ffe67f8feb4,222371403,0,0x0,8
tick,0x7ffe67f8feb4,222387441,0,0x0,8
tick,0x7ffe67f8feb4,222403528,0,0x0,8
tick,0x7ffe67f8feb4,222419497,0,0x0,8
tick,0x7ffe67f8feb4,222435487,0,0x0,8
tick,0x7ffe67f8feb4,222451701,0,0x0,8
tick,0x7ffe67f8feb4,222468716,0,0x0,8
tick,0x7ffe67f8feb4,222484106,0,0x0,8
tick,0x7ffe67f8feb4,222499432,0,0x0,8
tick,0x7ffe67f8feb4,222515537,0,0x0,8
tick,0x7ffe67f8feb4,222531552,0,0x0,8
tick,0x7ffe67f8feb4,222546443,0,0x0,8
tick,0x7ffe67f8feb4,222561575,0,0x0,8
tick,0x7ffe67f8feb4,222576433,0,0x0,8
tick,0x7ffe67f8feb4,222592457,0,0x0,8
tick,0x7ffe67f8feb4,222608435,0,0x0,8
tick,0x7ffe67f8feb4,222624491,0,0x0,8
tick,0x7ffe67f8feb4,222639454,0,0x0,8
tick,0x7ffe67f8feb4,222655441,0,0x0,8
tick,0x7ffe67f8feb4,222670971,0,0x0,8
tick,0x7ffe67f8feb4,222687194,0,0x0,8
tick,0x7ffe67f8feb4,222703034,0,0x0,8
tick,0x7ffe67f8feb4,222719029,0,0x0,8
tick,0x7ffe67f8feb4,222735428,0,0x0,8
tick,0x7ffe67f8feb4,222751295,0,0x0,8
tick,0x7ffe67f8feb4,222766442,0,0x0,8
tick,0x7ffe67f8feb4,222781753,0,0x0,8
tick,0x7ffe67f8feb4,222797480,0,0x0,8
tick,0x7ffe67f8feb4,222812765,0,0x0,8
tick,0x7ffe67f8feb4,222828513,0,0x0,8
tick,0x7ffe67f8feb4,222843769,0,0x0,8
tick,0x7ffe67f8feb4,222859056,0,0x0,8
tick,0x7ffe67f8feb4,222874550,0,0x0,8
tick,0x7ffe67f8feb4,222889888,0,0x0,8
tick,0x7ffe67f8feb4,222905748,0,0x0,8
tick,0x7ffe67f8feb4,222920818,0,0x0,8
tick,0x7ffe67f8feb4,222936588,0,0x0,8
tick,0x7ffe67f8feb4,222951582,0,0x0,8
tick,0x7ffe67f8feb4,222966591,0,0x0,8
tick,0x7ffe67f8feb4,222982586,0,0x0,8
tick,0x7ffe67f8feb4,222998484,0,0x0,8
tick,0x7ffe67f8feb4,223014508,0,0x0,8
tick,0x7ffe67f8feb4,223030889,0,0x0,8
tick,0x7ffe67f8feb4,223046510,0,0x0,8
tick,0x7ffe67f8feb4,223061776,0,0x0,8
tick,0x7ffe67f8feb4,223077810,0,0x0,8
tick,0x7ffe67f8feb4,223093868,0,0x0,8
tick,0x7ffe67f8feb4,223109447,0,0x0,8
tick,0x7ffe67f8feb4,223124698,0,0x0,8
tick,0x7ffe67f8feb4,223140470,0,0x0,8
tick,0x7ffe67f8feb4,223155645,0,0x0,8
tick,0x7ffe67f8feb4,223171548,0,0x0,8
tick,0x7ffe67f8feb4,223187537,0,0x0,8
tick,0x7ffe67f8feb4,223203531,0,0x0,8
tick,0x7ffe67f8feb4,223219561,0,0x0,8
tick,0x7ffe67f8feb4,223235544,0,0x0,8
tick,0x7ffe67f8feb4,223250793,0,0x0,8
tick,0x7ffe67f8feb4,223266783,0,0x0,8
tick,0x7ffe67f8feb4,223282775,0,0x0,8
tick,0x7ffe67f8feb4,223298588,0,0x0,8
tick,0x7ffe67f8feb4,223313804,0,0x0,8
tick,0x7ffe67f8feb4,223329762,0,0x0,8
tick,0x7ffe67f8feb4,223345228,0,0x0,8
tick,0x7ffe67f8feb4,223360665,0,0x0,8
tick,0x7ffe67f8feb4,223376610,0,0x0,8
tick,0x7ffe67f8feb4,223391753,0,0x0,8
tick,0x7ffe67f8feb4,223407618,0,0x0,8
tick,0x7ffe67f8feb4,223422988,0,0x0,8
tick,0x7ffe67f8feb4,223438636,0,0x0,8
tick,0x7ffe67f8feb4,223454109,0,0x0,8
tick,0x7ffe67f8feb4,223469597,0,0x0,8
tick,0x7ffe67f8feb4,223485627,0,0x0,8
tick,0x7ffe67f8feb4,223501052,0,0x0,8
tick,0x7ffe67f8feb4,223516062,0,0x0,8
tick,0x7ffe67f8feb4,223531934,0,0x0,8
tick,0x7ffe67f8feb4,223547648,0,0x0,8
tick,0x7ffe67f8feb4,223563626,0,0x0,8
tick,0x7ffe67f8feb4,223579661,0,0x0,8
tick,0x7ffe67f8feb4,223596987,0,0x0,8
tick,0x7ffe67f8feb4,223611606,0,0x0,8
tick,0x7ffe67f8feb4,223627615,0,0x0,8
tick,0x7ffe67f8feb4,223643647,0,0x0,8
tick,0x7ffe67f8feb4,223659609,0,0x0,8
tick,0x7ffe67f8feb4,223675619,0,0x0,8
tick,0x7ffe67f8feb4,223690624,0,0x0,8
tick,0x7ffe67f8feb4,223706641,0,0x0,8
tick,0x7ffe67f8feb4,223722684,0,0x0,8
tick,0x7ffe67f8feb4,223738673,0,0x0,8
tick,0x7ffe67f8feb4,223754654,0,0x0,8
tick,0x7ffe67f8feb4,223770646,0,0x0,8
tick,0x7ffe67f8feb4,223786685,0,0x0,8
tick,0x7ffe67f8feb4,223802617,0,0x0,8
tick,0x7ffe67f8feb4,223817886,0,0x0,8
tick,0x7ffe67f8feb4,223832855,0,0x0,8
tick,0x7ffe67f8feb4,223848603,0,0x0,8
tick,0x7ffe67f8feb4,223863736,0,0x0,8
tick,0x7ffe67f8feb4,223879741,0,0x0,8
tick,0x7ffe67f8feb4,223895223,0,0x0,8
tick,0x7ffe67f8feb4,223910761,0,0x0,8
tick,0x7ffe67f8feb4,223926161,0,0x0,8
tick,0x7ffe67f8feb4,223941750,0,0x0,8
tick,0x7ffe67f8feb4,223957761,0,0x0,8
tick,0x7ffe67f8feb4,223973172,0,0x0,8
tick,0x7ffe67f8feb4,223988605,0,0x0,8
tick,0x7ffe67f8feb4,224004154,0,0x0,8
tick,0x7ffe67f8feb4,224019675,0,0x0,8
tick,0x7ffe67f8feb4,224035420,0,0x0,8
tick,0x7ffe67f8feb4,224050211,0,0x0,8
tick,0x7ffe67f8feb4,224065569,0,0x0,8
tick,0x7ffe67f8feb4,224081060,0,0x0,8
tick,0x7ffe67f8feb4,224096400,0,0x0,8
tick,0x7ffe67f8feb4,224111614,0,0x0,8
tick,0x7ffe67f8feb4,224127040,0,0x0,8
tick,0x7ffe67f8feb4,224143372,0,0x0,8
tick,0x7ffe67f8feb4,224158778,0,0x0,8
tick,0x7ffe67f8feb4,224174495,0,0x0,8
tick,0x7ffe67f8feb4,224189832,0,0x0,8
tick,0x7ffe67f8feb4,224205269,0,0x0,8
tick,0x7ffe67f8feb4,224221239,0,0x0,8
tick,0x7ffe67f8feb4,224236594,0,0x0,8
tick,0x7ffe67f8feb4,224252059,0,0x0,8
tick,0x7ffe67f8feb4,224267919,0,0x0,8
tick,0x7ffe67f8feb4,224283329,0,0x0,8
tick,0x7ffe67f8feb4,224298629,0,0x0,8
tick,0x7ffe67f8feb4,224314326,0,0x0,8
tick,0x7ffe67f8feb4,224329677,0,0x0,8
tick,0x7ffe67f8feb4,224345282,0,0x0,8
tick,0x7ffe67f8feb4,224360777,0,0x0,8
tick,0x7ffe67f8feb4,224377021,0,0x0,8
tick,0x7ffe67f8feb4,224391779,0,0x0,8
tick,0x7ffe67f8feb4,224407953,0,0x0,8
tick,0x7ffe67f8feb4,224423540,0,0x0,8
tick,0x7ffe67f8feb4,224439021,0,0x0,8
tick,0x7ffe67f8feb4,224454120,0,0x0,8
tick,0x7ffe67f8feb4,224470303,0,0x0,8
tick,0x7ffe67f8feb4,224485671,0,0x0,8
tick,0x7ffe67f8feb4,224501092,0,0x0,8
tick,0x7ffe67f8feb4,224516822,0,0x0,8
tick,0x7ffe67f8feb4,224532215,0,0x0,8
tick,0x7ffe67f8feb4,224547900,0,0x0,8
tick,0x7ffe67f8feb4,224563155,0,0x0,8
tick,0x7ffe67f8feb4,224578658,0,0x0,8
tick,0x7ffe67f8feb4,224594200,0,0x0,8
tick,0x7ffe67f8feb4,224609602,0,0x0,8
tick,0x7ffe67f8feb4,224625445,0,0x0,8
tick,0x7ffe67f8feb4,224640672,0,0x0,8
tick,0x7ffe67f8feb4,224656865,0,0x0,8
tick,0x7ffe67f8feb4,224672830,0,0x0,8
tick,0x7ffe67f8feb4,224687865,0,0x0,8
tick,0x7ffe67f8feb4,224703775,0,0x0,8
tick,0x7ffe67f8feb4,224719086,0,0x0,8
tick,0x7ffe67f8feb4,224734748,0,0x0,8
tick,0x7ffe67f8feb4,224750745,0,0x0,8
tick,0x7ffe67f8feb4,224766779,0,0x0,8
tick,0x7ffe67f8feb4,224782641,0,0x0,8
tick,0x7ffe67f8feb4,224798646,0,0x0,8
tick,0x7ffe67f8feb4,224814254,0,0x0,8
tick,0x7ffe67f8feb4,224829754,0,0x0,8
tick,0x7ffe67f8feb4,224845753,0,0x0,8
tick,0x7ffe67f8feb4,224861665,0,0x0,8
tick,0x7ffe67f8feb4,224877672,0,0x0,8
tick,0x7ffe67f8feb4,224893682,0,0x0,8
tick,0x7ffe67f8feb4,224913802,0,0x0,8
tick,0x7ffe67f8feb4,224926013,0,0x0,8
tick,0x7ffe67f8feb4,224941708,0,0x0,8
tick,0x7ffe67f8feb4,224968676,0,0x0,8
tick,0x7ffe67f8feb4,224976319,0,0x0,8
tick,0x7ffe67f8feb4,224988268,0,0x0,8
tick,0x7ffe67f8feb4,225004387,0,0x0,8
tick,0x7ffe67f8feb4,225020496,0,0x0,8
tick,0x7ffe67f8feb4,225036366,0,0x0,8
tick,0x7ffe67f8feb4,225052208,0,0x0,8
tick,0x7ffe67f8feb4,225067608,0,0x0,8
tick,0x7ffe67f8feb4,225083513,0,0x0,8
tick,0x7ffe67f8feb4,225099870,0,0x0,8
tick,0x7ffe67f8feb4,225115647,0,0x0,8
tick,0x7ffe67f8feb4,225132989,0,0x0,8
tick,0x7ffe67f8feb4,225149440,0,0x0,8
tick,0x7ffe67f8feb4,225163622,0,0x0,8
tick,0x7ffe67f8feb4,225179551,0,0x0,8
tick,0x7ffe67f8feb4,225195791,0,0x0,8
tick,0x7ffe67f8feb4,225210931,0,0x0,8
tick,0x7ffe67f8feb4,225226721,0,0x0,8
tick,0x7ffe67f8feb4,225241865,0,0x0,8
tick,0x7ffe67f8feb4,225257645,0,0x0,8
tick,0x7ffe67f8feb4,225273682,0,0x0,8
tick,0x7ffe67f8feb4,225289788,0,0x0,8
tick,0x7ffe67f8feb4,225305685,0,0x0,8
tick,0x7ffe67f8feb4,225321601,0,0x0,8
tick,0x7ffe67f8feb4,225337195,0,0x0,8
tick,0x7ffe67f8feb4,225353297,0,0x0,8
tick,0x7ffe67f8feb4,225368623,0,0x0,8
tick,0x7ffe67f8feb4,225383835,0,0x0,8
tick,0x7ffe67f8feb4,225399824,0,0x0,8
tick,0x7ffe67f8feb4,225415831,0,0x0,8
tick,0x7ffe67f8feb4,225431853,0,0x0,8
tick,0x7ffe67f8feb4,225447680,0,0x0,8
tick,0x7ffe67f8feb4,225463640,0,0x0,8
tick,0x7ffe67f8feb4,225479842,0,0x0,8
tick,0x7ffe67f8feb4,225494805,0,0x0,8
tick,0x7ffe67f8feb4,225510827,0,0x0,8
tick,0x7ffe67f8feb4,225526138,0,0x0,8
tick,0x7ffe67f8feb4,225542027,0,0x0,8
tick,0x7ffe67f8feb4,225557612,0,0x0,8
tick,0x7ffe67f8feb4,225573582,0,0x0,8
tick,0x7ffe67f8feb4,225589615,0,0x0,8
tick,0x7ffe67f8feb4,225605607,0,0x0,8
tick,0x7ffe67f8feb4,225620875,0,0x0,8
tick,0x7ffe67f8feb4,225636882,0,0x0,8
tick,0x7ffe67f8feb4,225652599,0,0x0,8
tick,0x7ffe67f8feb4,225668604,0,0x0,8
tick,0x7ffe67f8feb4,225684590,0,0x0,8
tick,0x7ffe67f8feb4,225700580,0,0x0,8
tick,0x7ffe67f8feb4,225716666,0,0x0,8
tick,0x7ffe67f8feb4,225732599,0,0x0,8
tick,0x7ffe67f8feb4,225748585,0,0x0,8
tick,0x7ffe67f8feb4,225763841,0,0x0,8
tick,0x7ffe67f8feb4,225779758,0,0x0,8
tick,0x7ffe67f8feb4,225794897,0,0x0,8
tick,0x7ffe67f8feb4,225810758,0,0x0,8
tick,0x7ffe67f8feb4,225825911,0,0x0,8
tick,0x7ffe67f8feb4,225841738,0,0x0,8
tick,0x7ffe67f8feb4,225857026,0,0x0,8
tick,0x7ffe67f8feb4,225872221,0,0x0,8
tick,0x7ffe67f8feb4,225887619,0,0x0,8
tick,0x7ffe67f8feb4,225902811,0,0x0,8
tick,0x7ffe67f8feb4,225918662,0,0x0,8
tick,0x7ffe67f8feb4,225934216,0,0x0,8
tick,0x7ffe67f8feb4,225949807,0,0x0,8
tick,0x7ffe67f8feb4,225966225,0,0x0,8
tick,0x7ffe67f8feb4,225982077,0,0x0,8
tick,0x7ffe67f8feb4,225997740,0,0x0,8
tick,0x7ffe67f8feb4,226013065,0,0x0,8
tick,0x7ffe67f8feb4,226028676,0,0x0,8
tick,0x7ffe67f8feb4,226044881,0,0x0,8
tick,0x7ffe67f8feb4,226059907,0,0x0,8
tick,0x7ffe67f8feb4,226075767,0,0x0,8
tick,0x7ffe67f8feb4,226090986,0,0x0,8
tick,0x7ffe67f8feb4,226106104,0,0x0,8
tick,0x7ffe67f8feb4,226121445,0,0x0,8
tick,0x7ffe67f8feb4,226136692,0,0x0,8
tick,0x7ffe67f8feb4,226152476,0,0x0,8
tick,0x7ffe67f8feb4,226168282,0,0x0,8
tick,0x7ffe67f8feb4,226183845,0,0x0,8
tick,0x7ffe67f8feb4,226199887,0,0x0,8
tick,0x7ffe67f8feb4,226214951,0,0x0,8
tick,0x7ffe67f8feb4,226229965,0,0x0,8
tick,0x7ffe67f8feb4,226246014,0,0x0,8
tick,0x7ffe67f8feb4,226261991,0,0x0,8
tick,0x7ffe67f8feb4,226277264,0,0x0,8
tick,0x7ffe67f8feb4,226292979,0,0x0,8
tick,0x7ffe67f8feb4,226308798,0,0x0,8
tick,0x7ffe67f8feb4,226325103,0,0x0,8
tick,0x7ffe67f8feb4,226340767,0,0x0,8
tick,0x7ffe67f8feb4,226356848,0,0x0,8
tick,0x7ffe67f8feb4,226372903,0,0x0,8
tick,0x7ffe67f8feb4,226388771,0,0x0,8
tick,0x7ffe67f8feb4,226404792,0,0x0,8
tick,0x7ffe67f8feb4,226420777,0,0x0,8
tick,0x7ffe67f8feb4,226442119,0,0x0,8
tick,0x7ffe67f8feb4,226458303,0,0x0,8
tick,0x7ffe67f8feb4,226468804,0,0x0,8
tick,0x7ffe67f8feb4,226488430,0,0x0,8
tick,0x7ffe67f8feb4,226500827,0,0x0,8
tick,0x7ffe67f8feb4,226516834,0,0x0,8
tick,0x7ffe67f8feb4,226532822,0,0x0,8
tick,0x7ffe67f8feb4,226548789,0,0x0,8
tick,0x7ffe67f8feb4,226564791,0,0x0,8
tick,0x7ffe67f8feb4,226580752,0,0x0,8
tick,0x7ffe67f8feb4,226596373,0,0x0,8
tick,0x7ffe67f8feb4,226611733,0,0x0,8
tick,0x7ffe67f8feb4,226626584,0,0x0,8
tick,0x7ffe67f8feb4,226641617,0,0x0,8
tick,0x7ffe67f8feb4,226657614,0,0x0,8
tick,0x7ffe67f8feb4,226673621,0,0x0,8
tick,0x7ffe67f8feb4,226689616,0,0x0,8
tick,0x7ffe67f8feb4,226705606,0,0x0,8
tick,0x7ffe67f8feb4,226721635,0,0x0,8
tick,0x7ffe67f8feb4,226737598,0,0x0,8
tick,0x7ffe67f8feb4,226752791,0,0x0,8
tick,0x7ffe67f8feb4,226768631,0,0x0,8
tick,0x7ffe67f8feb4,226783754,0,0x0,8
tick,0x7ffe67f8feb4,226799765,0,0x0,8
tick,0x7ffe67f8feb4,226815755,0,0x0,8
tick,0x7ffe67f8feb4,226831783,0,0x0,8
tick,0x7ffe67f8feb4,226847623,0,0x0,8
tick,0x7ffe67f8feb4,226862844,0,0x0,8
tick,0x7ffe67f8feb4,226878610,0,0x0,8
tick,0x7ffe67f8feb4,226893812,0,0x0,8
tick,0x7ffe67f8feb4,226909760,0,0x0,8
tick,0x7ffe67f8feb4,226924807,0,0x0,8
tick,0x7ffe67f8feb4,226939996,0,0x0,8
tick,0x7ffe67f8feb4,226955525,0,0x0,8
tick,0x7ffe67f8feb4,226970592,0,0x0,8
tick,0x7ffe67f8feb4,226985751,0,0x0,8
tick,0x7ffe67f8feb4,227001768,0,0x0,8
tick,0x7ffe67f8feb4,227017604,0,0x0,8
tick,0x7ffe67f8feb4,227032770,0,0x0,8
tick,0x7ffe67f8feb4,227048613,0,0x0,8
tick,0x7ffe67f8feb4,227063762,0,0x0,8
tick,0x7ffe67f8feb4,227079753,0,0x0,8
tick,0x7ffe67f8feb4,227095281,0,0x0,8
tick,0x7ffe67f8feb4,227110687,0,0x0,8
tick,0x7ffe67f8feb4,227126404,0,0x0,8
tick,0x7ffe67f8feb4,227142771,0,0x0,8
tick,0x7ffe67f8feb4,227158570,0,0x0,8
tick,0x7ffe67f8feb4,227173855,0,0x0,8
tick,0x7ffe67f8feb4,227189122,0,0x0,8
tick,0x7ffe67f8feb4,227205039,0,0x0,8
tick,0x7ffe67f8feb4,227221218,0,0x0,8
tick,0x7ffe67f8feb4,227236420,0,0x0,8
tick,0x7ffe67f8feb4,227252063,0,0x0,8
tick,0x7ffe67f8feb4,227267214,0,0x0,8
tick,0x7ffe67f8feb4,227283190,0,0x0,8
tick,0x7ffe67f8feb4,227298780,0,0x0,8
tick,0x7ffe67f8feb4,227314073,0,0x0,8
tick,0x7ffe67f8feb4,227330042,0,0x0,8
tick,0x7ffe67f8feb4,227345421,0,0x0,8
tick,0x7ffe67f8feb4,227360824,0,0x0,8
tick,0x7ffe67f8feb4,227376181,0,0x0,8
tick,0x7ffe67f8feb4,227391627,0,0x0,8
tick,0x7ffe67f8feb4,227407773,0,0x0,8
tick,0x7ffe67f8feb4,227423625,0,0x0,8
tick,0x7ffe67f8feb4,227439852,0,0x0,8
tick,0x7ffe67f8feb4,227455759,0,0x0,8
tick,0x7ffe67f8feb4,227470743,0,0x0,8
tick,0x7ffe67f8feb4,227486611,0,0x0,8
tick,0x7ffe67f8feb4,227501795,0,0x0,8
tick,0x7ffe67f8feb4,227517818,0,0x0,8
tick,0x7ffe67f8feb4,227533764,0,0x0,8
tick,0x7ffe67f8feb4,227549789,0,0x0,8
tick,0x7ffe67f8feb4,227564915,0,0x0,8
tick,0x7ffe67f8feb4,227580793,0,0x0,8
tick,0x7ffe67f8feb4,227596658,0,0x0,8
tick,0x7ffe67f8feb4,227612847,0,0x0,8
tick,0x7ffe67f8feb4,227628621,0,0x0,8
tick,0x7ffe67f8feb4,227644661,0,0x0,8
tick,0x7ffe67f8feb4,227659892,0,0x0,8
tick,0x7ffe67f8feb4,227675302,0,0x0,8
tick,0x7ffe67f8feb4,227691042,0,0x0,8
tick,0x7ffe67f8feb4,227707045,0,0x0,8
tick,0x7ffe67f8feb4,227723045,0,0x0,8
tick,0x7ffe67f8feb4,227738613,0,0x0,8
tick,0x7ffe67f8feb4,227753764,0,0x0,8
tick,0x7ffe67f8feb4,227768766,0,0x0,8
tick,0x7ffe67f8feb4,227784773,0,0x0,8
tick,0x7ffe67f8feb4,227800892,0,0x0,8
tick,0x7ffe67f8feb4,227816631,0,0x0,8
tick,0x7ffe67f8feb4,227832043,0,0x0,8
tick,0x7ffe67f8feb4,227848045,0,0x0,8
tick,0x7ffe67f8feb4,227863359,0,0x0,8
tick,0x7ffe67f8feb4,227879304,0,0x0,8
tick,0x7ffe67f8feb4,227894631,0,0x0,8
tick,0x7ffe67f8feb4,227909772,0,0x0,8
tick,0x7ffe67f8feb4,227925408,0,0x0,8
tick,0x7ffe67f8feb4,227941174,0,0x0,8
tick,0x7ffe67f8feb4,227957197,0,0x0,8
tick,0x7ffe67f8feb4,227973643,0,0x0,8
tick,0x7ffe67f8feb4,227989260,0,0x0,8
tick,0x7ffe67f8feb4,228005091,0,0x0,8
tick,0x7ffe67f8feb4,228021356,0,0x0,8
tick,0x7ffe67f8feb4,228037042,0,0x0,8
tick,0x7ffe67f8feb4,228052979,0,0x0,8
tick,0x7ffe67f8feb4,228068251,0,0x0,8
tick,0x7ffe67f8feb4,228084055,0,0x0,8
tick,0x7ffe67f8feb4,228099986,0,0x0,8
tick,0x7ffe67f8feb4,228115526,0,0x0,8
tick,0x7ffe67f8feb4,228130798,0,0x0,8
tick,0x7ffe67f8feb4,228146832,0,0x0,8
tick,0x7ffe67f8feb4,228163424,0,0x0,8
tick,0x7ffe67f8feb4,228178022,0,0x0,8
tick,0x7ffe67f8feb4,228193500,0,0x0,8
tick,0x7ffe67f8feb4,228208784,0,0x0,8
tick,0x7ffe67f8feb4,228224965,0,0x0,8
tick,0x7ffe67f8feb4,228240948,0,0x0,8
tick,0x7ffe67f8feb4,228257011,0,0x0,8
tick,0x7ffe67f8feb4,228271967,0,0x0,8
tick,0x7ffe67f8feb4,228287063,0,0x0,8
tick,0x7ffe67f8feb4,228302954,0,0x0,8
tick,0x7ffe67f8feb4,228318731,0,0x0,8
tick,0x7ffe67f8feb4,228334436,0,0x0,8
tick,0x7ffe67f8feb4,228350173,0,0x0,8
tick,0x7ffe67f8feb4,228365559,0,0x0,8
tick,0x7ffe67f8feb4,228381321,0,0x0,8
tick,0x7ffe67f8feb4,228396570,0,0x0,8
tick,0x7ffe67f8feb4,228411706,0,0x0,8
tick,0x7ffe67f8feb4,228427944,0,0x0,8
tick,0x7ffe67f8feb4,228443657,0,0x0,8
tick,0x7ffe67f8feb4,228459434,0,0x0,8
tick,0x7ffe67f8feb4,228474831,0,0x0,8
tick,0x7ffe67f8feb4,228489572,0,0x0,8
tick,0x7ffe67f8feb4,228504748,0,0x0,8
tick,0x7ffe67f8feb4,228520069,0,0x0,8
tick,0x7ffe67f8feb4,228535936,0,0x0,8
tick,0x7ffe67f8feb4,228550813,0,0x0,8
tick,0x7ffe67f8feb4,228566345,0,0x0,8
tick,0x7ffe67f8feb4,228582310,0,0x0,8
tick,0x7ffe67f8feb4,228597318,0,0x0,8
tick,0x7ffe67f8feb4,228612665,0,0x0,8
tick,0x7ffe67f8feb4,228628603,0,0x0,8
tick,0x7ffe67f8feb4,228643867,0,0x0,8
tick,0x7ffe67f8feb4,228658914,0,0x0,8
tick,0x7ffe67f8feb4,228674930,0,0x0,8
tick,0x7ffe67f8feb4,228690699,0,0x0,8
tick,0x7ffe67f8feb4,228706657,0,0x0,8
tick,0x7ffe67f8feb4,228722908,0,0x0,8
tick,0x7ffe67f8feb4,228738662,0,0x0,8
tick,0x7ffe67f8feb4,228754166,0,0x0,8
tick,0x7ffe67f8feb4,228769769,0,0x0,8
tick,0x7ffe67f8feb4,228784691,0,0x0,8
tick,0x7ffe67f8feb4,228800349,0,0x0,8
tick,0x7ffe67f8feb4,228816365,0,0x0,8
tick,0x7ffe67f8feb4,228832349,0,0x0,8
tick,0x7ffe67f8feb4,228847663,0,0x0,8
tick,0x7ffe67f8feb4,228863368,0,0x0,8
tick,0x7ffe67f8feb4,228878664,0,0x0,8
tick,0x7ffe67f8feb4,228894057,0,0x0,8
tick,0x7ffe67f8feb4,228909683,0,0x0,8
tick,0x7ffe67f8feb4,228925762,0,0x0,8
tick,0x7ffe67f8feb4,228941758,0,0x0,8
tick,0x7ffe67f8feb4,228957683,0,0x0,8
tick,0x7ffe67f8feb4,228972998,0,0x0,8
tick,0x7ffe67f8feb4,228988680,0,0x0,8
tick,0x7ffe67f8feb4,229003746,0,0x0,8
tick,0x7ffe67f8feb4,229018858,0,0x0,8
tick,0x7ffe67f8feb4,229034593,0,0x0,8
tick,0x7ffe67f8feb4,229049460,0,0x0,8
tick,0x7ffe67f8feb4,229065879,0,0x0,8
tick,0x7ffe67f8feb4,229081047,0,0x0,8
tick,0x7ffe67f8feb4,229096783,0,0x0,8
tick,0x7ffe67f8feb4,229112107,0,0x0,8
tick,0x7ffe67f8feb4,229127714,0,0x0,8
tick,0x7ffe67f8feb4,229143371,0,0x0,8
tick,0x7ffe67f8feb4,229158783,0,0x0,8
tick,0x7ffe67f8feb4,229174226,0,0x0,8
tick,0x7ffe67f8feb4,229189953,0,0x0,8
tick,0x7ffe67f8feb4,229205491,0,0x0,8
tick,0x7ffe67f8feb4,229220869,0,0x0,8
tick,0x7ffe67f8feb4,229236470,0,0x0,8
tick,0x7ffe67f8feb4,229251404,0,0x0,8
tick,0x7ffe67f8feb4,229267550,0,0x0,8
tick,0x7ffe67f8feb4,229282770,0,0x0,8
tick,0x7ffe67f8feb4,229298605,0,0x0,8
tick,0x7ffe67f8feb4,229314145,0,0x0,8
tick,0x7ffe67f8feb4,229329809,0,0x0,8
tick,0x7ffe67f8feb4,229345486,0,0x0,8
tick,0x7ffe67f8feb4,229360761,0,0x0,8
tick,0x7ffe67f8feb4,229376487,0,0x0,8
tick,0x7ffe67f8feb4,229392506,0,0x0,8
tick,0x7ffe67f8feb4,229408479,0,0x0,8
tick,0x7ffe67f8feb4,229424507,0,0x0,8
tick,0x7ffe67f8feb4,229440034,0,0x0,8
tick,0x7ffe67f8feb4,229455012,0,0x0,8
tick,0x7ffe67f8feb4,229470242,0,0x0,8
tick,0x7ffe67f8feb4,229485792,0,0x0,8
tick,0x7ffe67f8feb4,229501055,0,0x0,8
tick,0x7ffe67f8feb4,229516886,0,0x0,8
tick,0x7ffe67f8feb4,229532354,0,0x0,8
tick,0x7ffe67f8feb4,229547776,0,0x0,8
tick,0x7ffe67f8feb4,229563574,0,0x0,8
tick,0x7ffe67f8feb4,229578732,0,0x0,8
tick,0x7ffe67f8feb4,229594761,0,0x0,8
tick,0x7ffe67f8feb4,229610259,0,0x0,8
tick,0x7ffe67f8feb4,229626279,0,0x0,8
tick,0x7ffe67f8feb4,229642273,0,0x0,8
tick,0x7ffe67f8feb4,229657615,0,0x0,8
tick,0x7ffe67f8feb4,229672853,0,0x0,8
tick,0x7ffe67f8feb4,229688676,0,0x0,8
tick,0x7ffe67f8feb4,229704175,0,0x0,8
tick,0x7ffe67f8feb4,229720129,0,0x0,8
tick,0x7ffe67f8feb4,229736110,0,0x0,8
tick,0x7ffe67f8feb4,229752150,0,0x0,8
tick,0x7ffe67f8feb4,229768125,0,0x0,8
tick,0x7ffe67f8feb4,229783798,0,0x0,8
tick,0x7ffe67f8feb4,229799787,0,0x0,8
tick,0x7ffe67f8feb4,229815247,0,0x0,8
tick,0x7ffe67f8feb4,229830985,0,0x0,8
tick,0x7ffe67f8feb4,229846360,0,0x0,8
tick,0x7ffe67f8feb4,229861428,0,0x0,8
tick,0x7ffe67f8feb4,229876650,0,0x0,8
tick,0x7ffe67f8feb4,229891925,0,0x0,8
tick,0x7ffe67f8feb4,229908069,0,0x0,8
tick,0x7ffe67f8feb4,229923687,0,0x0,8
tick,0x7ffe67f8feb4,229939483,0,0x0,8
tick,0x7ffe67f8feb4,229955133,0,0x0,8
tick,0x7ffe67f8feb4,229970769,0,0x0,8
tick,0x7ffe67f8feb4,229985768,0,0x0,8
tick,0x7ffe67f8feb4,230001795,0,0x0,8
tick,0x7ffe67f8feb4,230017621,0,0x0,8
tick,0x7ffe67f8feb4,230032777,0,0x0,8
tick,0x7ffe67f8feb4,230048634,0,0x0,8
tick,0x7ffe67f8feb4,230064168,0,0x0,8
tick,0x7ffe67f8feb4,230079813,0,0x0,8
tick,0x7ffe67f8feb4,230095121,0,0x0,8
tick,0x7ffe67f8feb4,230110773,0,0x0,8
tick,0x7ffe67f8feb4,230125968,0,0x0,8
tick,0x7ffe67f8feb4,230141240,0,0x0,8
tick,0x7ffe67f8feb4,230156727,0,0x0,8
tick,0x7ffe67f8feb4,230172199,0,0x0,8
tick,0x7ffe67f8feb4,230187252,0,0x0,8
tick,0x7ffe67f8feb4,230202622,0,0x0,8
tick,0x7ffe67f8feb4,230217746,0,0x0,8
tick,0x7ffe67f8feb4,230234014,0,0x0,8
tick,0x7ffe67f8feb4,230248708,0,0x0,8
tick,0x7ffe67f8feb4,230264181,0,0x0,8
tick,0x7ffe67f8feb4,230279888,0,0x0,8
tick,0x7ffe67f8feb4,230295140,0,0x0,8
tick,0x7ffe67f8feb4,230310154,0,0x0,8
tick,0x7ffe67f8feb4,230325715,0,0x0,8
tick,0x7ffe67f8feb4,230340743,0,0x0,8
tick,0x7ffe67f8feb4,230357151,0,0x0,8
tick,0x7ffe67f8feb4,230372429,0,0x0,8
tick,0x7ffe67f8feb4,230387716,0,0x0,8
tick,0x7ffe67f8feb4,230403875,0,0x0,8
tick,0x7ffe67f8feb4,230419264,0,0x0,8
tick,0x7ffe67f8feb4,230434690,0,0x0,8
tick,0x7ffe67f8feb4,230450266,0,0x0,8
tick,0x7ffe67f8feb4,230465806,0,0x0,8
tick,0x7ffe67f8feb4,230481609,0,0x0,8
tick,0x7ffe67f8feb4,230497532,0,0x0,8
tick,0x7ffe67f8feb4,230513926,0,0x0,8
tick,0x7ffe67f8feb4,230529859,0,0x0,8
tick,0x7ffe67f8feb4,230545612,0,0x0,8
tick,0x7ffe67f8feb4,230560821,0,0x0,8
tick,0x7ffe67f8feb4,230576027,0,0x0,8
tick,0x7ffe67f8feb4,230591721,0,0x0,8
tick,0x7ffe67f8feb4,230607059,0,0x0,8
tick,0x7ffe67f8feb4,230621924,0,0x0,8
tick,0x7ffe67f8feb4,230636907,0,0x0,8
tick,0x7ffe67f8feb4,230653126,0,0x0,8
tick,0x7ffe67f8feb4,230668191,0,0x0,8
tick,0x7ffe67f8feb4,230683965,0,0x0,8
tick,0x7ffe67f8feb4,230699767,0,0x0,8
tick,0x7ffe67f8feb4,230715901,0,0x0,8
tick,0x7ffe67f8feb4,230732059,0,0x0,8
tick,0x7ffe67f8feb4,230747823,0,0x0,8
tick,0x7ffe67f8feb4,230763824,0,0x0,8
tick,0x7ffe67f8feb4,230779699,0,0x0,8
tick,0x7ffe67f8feb4,230795401,0,0x0,8
tick,0x7ffe67f8feb4,230810684,0,0x0,8
tick,0x7ffe67f8feb4,230826676,0,0x0,8
tick,0x7ffe67f8feb4,230842809,0,0x0,8
tick,0x7ffe67f8feb4,230857925,0,0x0,8
tick,0x7ffe67f8feb4,230873304,0,0x0,8
tick,0x7ffe67f8feb4,230888738,0,0x0,8
tick,0x7ffe67f8feb4,230904378,0,0x0,8
tick,0x7ffe67f8feb4,230919852,0,0x0,8
tick,0x7ffe67f8feb4,230935915,0,0x0,8
tick,0x7ffe67f8feb4,230950836,0,0x0,8
tick,0x7ffe67f8feb4,230966243,0,0x0,8
tick,0x7ffe67f8feb4,230982146,0,0x0,8
tick,0x7ffe67f8feb4,230997121,0,0x0,8
tick,0x7ffe67f8feb4,231013213,0,0x0,8
tick,0x7ffe67f8feb4,231028707,0,0x0,8
tick,0x7ffe67f8feb4,231044133,0,0x0,8
tick,0x7ffe67f8feb4,231059955,0,0x0,8
tick,0x7ffe67f8feb4,231075481,0,0x0,8
tick,0x7ffe67f8feb4,231090970,0,0x0,8
tick,0x7ffe67f8feb4,231106991,0,0x0,8
tick,0x7ffe67f8feb4,231122988,0,0x0,8
tick,0x7ffe67f8feb4,231137944,0,0x0,8
tick,0x7ffe67f8feb4,231154237,0,0x0,8
tick,0x7ffe67f8feb4,231169701,0,0x0,8
tick,0x7ffe67f8feb4,231186014,0,0x0,8
tick,0x7ffe67f8feb4,231200382,0,0x0,8
tick,0x7ffe67f8feb4,231215954,0,0x0,8
tick,0x7ffe67f8feb4,231231988,0,0x0,8
tick,0x7ffe67f8feb4,231247965,0,0x0,8
tick,0x7ffe67f8feb4,231263762,0,0x0,8
tick,0x7ffe67f8feb4,231278780,0,0x0,8
tick,0x7ffe67f8feb4,231294863,0,0x0,8
tick,0x7ffe67f8feb4,231311113,0,0x0,8
tick,0x7ffe67f8feb4,231325795,0,0x0,8
tick,0x7ffe67f8feb4,231341510,0,0x0,8
tick,0x7ffe67f8feb4,231357056,0,0x0,8
tick,0x7ffe67f8feb4,231372535,0,0x0,8
tick,0x7ffe67f8feb4,231387091,0,0x0,8
tick,0x7ffe67f8feb4,231402282,0,0x0,8
tick,0x7ffe67f8feb4,231417733,0,0x0,8
tick,0x7ffe67f8feb4,231432791,0,0x0,8
tick,0x7ffe67f8feb4,231448738,0,0x0,8
tick,0x7ffe67f8feb4,231464740,0,0x0,8
tick,0x7ffe67f8feb4,231479873,0,0x0,8
tick,0x7ffe67f8feb4,231494926,0,0x0,8
tick,0x7ffe67f8feb4,231510914,0,0x0,8
tick,0x7ffe67f8feb4,231526195,0,0x0,8
tick,0x7ffe67f8feb4,231540988,0,0x0,8
tick,0x7ffe67f8feb4,231556352,0,0x0,8
tick,0x7ffe67f8feb4,231571734,0,0x0,8
tick,0x7ffe67f8feb4,231587779,0,0x0,8
tick,0x7ffe67f8feb4,231603197,0,0x0,8
tick,0x7ffe67f8feb4,231618346,0,0x0,8
tick,0x7ffe67f8feb4,231633080,0,0x0,8
tick,0x7ffe67f8feb4,231648729,0,0x0,8
tick,0x7ffe67f8feb4,231664025,0,0x0,8
tick,0x7ffe67f8feb4,231679847,0,0x0,8
tick,0x7ffe67f8feb4,231695105,0,0x0,8
tick,0x7ffe67f8feb4,231710975,0,0x0,8
tick,0x7ffe67f8feb4,231726998,0,0x0,8
tick,0x7ffe67f8feb4,231742999,0,0x0,8
tick,0x7ffe67f8feb4,231758973,0,0x0,8
tick,0x7ffe67f8feb4,231774968,0,0x0,8
tick,0x7ffe67f8feb4,231790780,0,0x0,8
tick,0x7ffe67f8feb4,231806736,0,0x0,8
tick,0x7ffe67f8feb4,231822741,0,0x0,8
tick,0x7ffe67f8feb4,231838660,0,0x0,8
tick,0x7ffe67f8feb4,231854801,0,0x0,8
tick,0x7ffe67f8feb4,231870658,0,0x0,8
tick,0x7ffe67f8feb4,231885657,0,0x0,8
tick,0x7ffe67f8feb4,231901695,0,0x0,8
tick,0x7ffe67f8feb4,231917659,0,0x0,8
tick,0x7ffe67f8feb4,231933679,0,0x0,8
tick,0x7ffe67f8feb4,231949764,0,0x0,8
tick,0x7ffe67f8feb4,231964727,0,0x0,8
tick,0x7ffe67f8feb4,231979755,0,0x0,8
tick,0x7ffe67f8feb4,231995665,0,0x0,8
tick,0x7ffe67f8feb4,232010836,0,0x0,8
tick,0x7ffe67f8feb4,232026953,0,0x0,8
tick,0x7ffe67f8feb4,232043043,0,0x0,8
tick,0x7ffe67f8feb4,232057667,0,0x0,8
tick,0x7ffe67f8feb4,232072776,0,0x0,8
tick,0x7ffe67f8feb4,232088638,0,0x0,8
tick,0x7ffe67f8feb4,232104664,0,0x0,8
tick,0x7ffe67f8feb4,232119784,0,0x0,8
tick,0x7ffe67f8feb4,232135745,0,0x0,8
tick,0x7ffe67f8feb4,232151685,0,0x0,8
tick,0x7ffe67f8feb4,232167726,0,0x0,8
tick,0x7ffe67f8feb4,232182736,0,0x0,8
tick,0x7ffe67f8feb4,232198660,0,0x0,8
tick,0x7ffe67f8feb4,232214030,0,0x0,8
tick,0x7ffe67f8feb4,232229994,0,0x0,8
tick,0x7ffe67f8feb4,232245581,0,0x0,8
tick,0x7ffe67f8feb4,232260908,0,0x0,8
tick,0x7ffe67f8feb4,232276534,0,0x0,8
tick,0x7ffe67f8feb4,232291705,0,0x0,8
tick,0x7ffe67f8feb4,232306680,0,0x0,8
tick,0x7ffe67f8feb4,232321722,0,0x0,8
tick,0x7ffe67f8feb4,232337917,0,0x0,8
tick,0x7ffe67f8feb4,232353930,0,0x0,8
tick,0x7ffe67f8feb4,232368857,0,0x0,8
tick,0x7ffe67f8feb4,232384423,0,0x0,8
tick,0x7ffe67f8feb4,232399827,0,0x0,8
tick,0x7ffe67f8feb4,232414987,0,0x0,8
tick,0x7ffe67f8feb4,232431612,0,0x0,8
tick,0x7ffe67f8feb4,232446978,0,0x0,8
tick,0x7ffe67f8feb4,232462088,0,0x0,8
tick,0x7ffe67f8feb4,232477997,0,0x0,8
tick,0x7ffe67f8feb4,232494004,0,0x0,8
tick,0x7ffe67f8feb4,232508601,0,0x0,8
tick,0x7ffe67f8feb4,232523797,0,0x0,8
tick,0x7ffe67f8feb4,232539152,0,0x0,8
tick,0x7ffe67f8feb4,232554652,0,0x0,8
tick,0x7ffe67f8feb4,232569779,0,0x0,8
tick,0x7ffe67f8feb4,232584996,0,0x0,8
tick,0x7ffe67f8feb4,232600789,0,0x0,8
tick,0x7ffe67f8feb4,232616257,0,0x0,8
tick,0x7ffe67f8feb4,232630905,0,0x0,8
tick,0x7ffe67f8feb4,232646640,0,0x0,8
tick,0x7ffe67f8feb4,232662295,0,0x0,8
tick,0x7ffe67f8feb4,232678356,0,0x0,8
tick,0x7ffe67f8feb4,232694308,0,0x0,8
tick,0x7ffe67f8feb4,232709335,0,0x0,8
tick,0x7ffe67f8feb4,232725594,0,0x0,8
tick,0x7ffe67f8feb4,232741062,0,0x0,8
tick,0x7ffe67f8feb4,232757086,0,0x0,8
tick,0x7ffe67f8feb4,232773070,0,0x0,8
tick,0x7ffe67f8feb4,232789082,0,0x0,8
tick,0x7ffe67f8feb4,232805112,0,0x0,8
tick,0x7ffe67f8feb4,232820614,0,0x0,8
tick,0x7ffe67f8feb4,232836888,0,0x0,8
tick,0x7ffe67f8feb4,232852132,0,0x0,8
tick,0x7ffe67f8feb4,232867840,0,0x0,8
tick,0x7ffe67f8feb4,232883319,0,0x0,8
tick,0x7ffe67f8feb4,232899605,0,0x0,8
tick,0x7ffe67f8feb4,232914974,0,0x0,8
tick,0x7ffe67f8feb4,232931232,0,0x0,8
tick,0x7ffe67f8feb4,232947390,0,0x0,8
tick,0x7ffe67f8feb4,232962497,0,0x0,8
tick,0x7ffe67f8feb4,232978151,0,0x0,8
tick,0x7ffe67f8feb4,232993012,0,0x0,8
tick,0x7ffe67f8feb4,233009050,0,0x0,8
tick,0x7ffe67f8feb4,233025121,0,0x0,8
tick,0x7ffe67f8feb4,233041043,0,0x0,8
tick,0x7ffe67f8feb4,233056190,0,0x0,8
tick,0x7ffe67f8feb4,233071458,0,0x0,8
tick,0x7ffe67f8feb4,233087349,0,0x0,8
tick,0x7ffe67f8feb4,233102532,0,0x0,8
tick,0x7ffe67f8feb4,233117881,0,0x0,8
tick,0x7ffe67f8feb4,233133929,0,0x0,8
tick,0x7ffe67f8feb4,233149557,0,0x0,8
tick,0x7ffe67f8feb4,233165172,0,0x0,8
tick,0x7ffe67f8feb4,233180457,0,0x0,8
tick,0x7ffe67f8feb4,233196478,0,0x0,8
tick,0x7ffe67f8feb4,233211892,0,0x0,8
tick,0x7ffe67f8feb4,233227242,0,0x0,8
tick,0x7ffe67f8feb4,233242899,0,0x0,8
tick,0x7ffe67f8feb4,233258934,0,0x0,8
tick,0x7ffe67f8feb4,233274422,0,0x0,8
tick,0x7ffe67f8feb4,233290074,0,0x0,8
tick,0x7ffe67f8feb4,233305299,0,0x0,8
tick,0x7ffe67f8feb4,233321611,0,0x0,8
tick,0x7ffe67f8feb4,233337137,0,0x0,8
tick,0x7ffe67f8feb4,233353043,0,0x0,8
tick,0x7ffe67f8feb4,233368932,0,0x0,8
tick,0x7ffe67f8feb4,233384702,0,0x0,8
tick,0x7ffe67f8feb4,233400481,0,0x0,8
tick,0x7ffe67f8feb4,233415467,0,0x0,8
tick,0x7ffe67f8feb4,233431467,0,0x0,8
tick,0x7ffe67f8feb4,233446922,0,0x0,8
tick,0x7ffe67f8feb4,233462518,0,0x0,8
tick,0x7ffe67f8feb4,233477877,0,0x0,8
tick,0x7ffe67f8feb4,233493098,0,0x0,8
tick,0x7ffe67f8feb4,233509047,0,0x0,8
tick,0x7ffe67f8feb4,233524796,0,0x0,8
tick,0x7ffe67f8feb4,233540741,0,0x0,8
tick,0x7ffe67f8feb4,233556100,0,0x0,8
tick,0x7ffe67f8feb4,233571237,0,0x0,8
tick,0x7ffe67f8feb4,233586970,0,0x0,8
tick,0x7ffe67f8feb4,233602316,0,0x0,8
tick,0x7ffe67f8feb4,233618254,0,0x0,8
tick,0x7ffe67f8feb4,233633345,0,0x0,8
tick,0x7ffe67f8feb4,233649334,0,0x0,8
tick,0x7ffe67f8feb4,233665461,0,0x0,8
tick,0x7ffe67f8feb4,233680676,0,0x0,8
tick,0x7ffe67f8feb4,233696085,0,0x0,8
tick,0x7ffe67f8feb4,233711614,0,0x0,8
tick,0x7ffe67f8feb4,233728145,0,0x0,8
tick,0x7ffe67f8feb4,233743424,0,0x0,8
tick,0x7ffe67f8feb4,233759421,0,0x0,8
tick,0x7ffe67f8feb4,233775422,0,0x0,8
tick,0x7ffe67f8feb4,233791431,0,0x0,8
tick,0x7ffe67f8feb4,233807431,0,0x0,8
tick,0x7ffe67f8feb4,233823123,0,0x0,8
tick,0x7ffe67f8feb4,233839119,0,0x0,8
tick,0x7ffe67f8feb4,233855162,0,0x0,8
tick,0x7ffe67f8feb4,233871146,0,0x0,8
tick,0x7ffe67f8feb4,233886330,0,0x0,8
tick,0x7ffe67f8feb4,233902366,0,0x0,8
tick,0x7ffe67f8feb4,233918346,0,0x0,8
tick,0x7ffe67f8feb4,233934189,0,0x0,8
tick,0x7ffe67f8feb4,233949672,0,0x0,8
tick,0x7ffe67f8feb4,233964988,0,0x0,8
tick,0x7ffe67f8feb4,233980320,0,0x0,8
tick,0x7ffe67f8feb4,233996290,0,0x0,8
tick,0x7ffe67f8feb4,234012293,0,0x0,8
tick,0x7ffe67f8feb4,234027563,0,0x0,8
tick,0x7ffe67f8feb4,234043078,0,0x0,8
tick,0x7ffe67f8feb4,234059170,0,0x0,8
tick,0x7ffe67f8feb4,234074566,0,0x0,8
tick,0x7ffe67f8feb4,234089921,0,0x0,8
tick,0x7ffe67f8feb4,234105431,0,0x0,8
tick,0x7ffe67f8feb4,234120718,0,0x0,8
tick,0x7ffe67f8feb4,234136075,0,0x0,8
tick,0x7ffe67f8feb4,234151584,0,0x0,8
tick,0x7ffe67f8feb4,234166955,0,0x0,8
tick,0x7ffe67f8feb4,234183117,0,0x0,8
tick,0x7ffe67f8feb4,234198999,0,0x0,8
tick,0x7ffe67f8feb4,234214236,0,0x0,8
tick,0x7ffe67f8feb4,234230251,0,0x0,8
tick,0x7ffe67f8feb4,234246316,0,0x0,8
tick,0x7ffe67f8feb4,234262077,0,0x0,8
tick,0x7ffe67f8feb4,234277912,0,0x0,8
tick,0x7ffe67f8feb4,234293668,0,0x0,8
tick,0x7ffe67f8feb4,234308886,0,0x0,8
tick,0x7ffe67f8feb4,234324497,0,0x0,8
tick,0x7ffe67f8feb4,234339966,0,0x0,8
tick,0x7ffe67f8feb4,234355293,0,0x0,8
tick,0x7ffe67f8feb4,234370310,0,0x0,8
tick,0x7ffe67f8feb4,234385755,0,0x0,8
tick,0x7ffe67f8feb4,234401797,0,0x0,8
tick,0x7ffe67f8feb4,234420990,0,0x0,8
tick,0x7ffe67f8feb4,234433013,0,0x0,8
tick,0x7ffe67f8feb4,234449036,0,0x0,8
tick,0x7ffe67f8feb4,234465007,0,0x0,8
tick,0x7ffe67f8feb4,234481010,0,0x0,8
tick,0x7ffe67f8feb4,234496994,0,0x0,8
tick,0x7ffe67f8feb4,234513001,0,0x0,8
tick,0x7ffe67f8feb4,234528258,0,0x0,8
tick,0x7ffe67f8feb4,234543356,0,0x0,8
tick,0x7ffe67f8feb4,234559220,0,0x0,8
tick,0x7ffe67f8feb4,234574849,0,0x0,8
tick,0x7ffe67f8feb4,234590872,0,0x0,8
tick,0x7ffe67f8feb4,234605864,0,0x0,8
tick,0x7ffe67f8feb4,234621858,0,0x0,8
tick,0x7ffe67f8feb4,234637880,0,0x0,8
tick,0x7ffe67f8feb4,234653847,0,0x0,8
tick,0x7ffe67f8feb4,234669934,0,0x0,8
tick,0x7ffe67f8feb4,234685235,0,0x0,8
tick,0x7ffe67f8feb4,234700939,0,0x0,8
tick,0x7ffe67f8feb4,234716979,0,0x0,8
tick,0x7ffe67f8feb4,234732917,0,0x0,8
tick,0x7ffe67f8feb4,234748919,0,0x0,8
tick,0x7ffe67f8feb4,234764905,0,0x0,8
tick,0x7ffe67f8feb4,234779906,0,0x0,8
tick,0x7ffe67f8feb4,234795912,0,0x0,8
tick,0x7ffe67f8feb4,234811899,0,0x0,8
tick,0x7ffe67f8feb4,234827981,0,0x0,8
tick,0x7ffe67f8feb4,234843163,0,0x0,8
tick,0x7ffe67f8feb4,234859065,0,0x0,8
tick,0x7ffe67f8feb4,234875132,0,0x0,8
tick,0x7ffe67f8feb4,234891367,0,0x0,8
tick,0x7ffe67f8feb4,234907472,0,0x0,8
tick,0x7ffe67f8feb4,234922913,0,0x0,8
tick,0x7ffe67f8feb4,234938088,0,0x0,8
tick,0x7ffe67f8feb4,234954243,0,0x0,8
tick,0x7ffe67f8feb4,234969378,0,0x0,8
tick,0x7ffe67f8feb4,234985394,0,0x0,8
tick,0x7ffe67f8feb4,235001531,0,0x0,8
tick,0x7ffe67f8feb4,235016853,0,0x0,8
tick,0x7ffe67f8feb4,235032264,0,0x0,8
tick,0x7ffe67f8feb4,235047504,0,0x0,8
tick,0x7ffe67f8feb4,235062904,0,0x0,8
tick,0x7ffe67f8feb4,235078438,0,0x0,8
tick,0x7ffe67f8feb4,235097028,0,0x0,8
tick,0x7ffe67f8feb4,235110368,0,0x0,8
tick,0x7ffe67f8feb4,235126364,0,0x0,8
tick,0x7ffe67f8feb4,235142379,0,0x0,8
tick,0x7ffe67f8feb4,235158366,0,0x0,8
tick,0x7ffe67f8feb4,235174395,0,0x0,8
tick,0x7ffe67f8feb4,235189717,0,0x0,8
tick,0x7ffe67f8feb4,235205403,0,0x0,8
tick,0x7ffe67f8feb4,235220662,0,0x0,8
tick,0x7ffe67f8feb4,235236689,0,0x0,8
tick,0x7ffe67f8feb4,235252239,0,0x0,8
tick,0x7ffe67f8feb4,235268184,0,0x0,8
tick,0x7ffe67f8feb4,235283565,0,0x0,8
tick,0x7ffe67f8feb4,235299217,0,0x0,8
tick,0x7ffe67f8feb4,235314950,0,0x0,8
tick,0x7ffe67f8feb4,235330987,0,0x0,8
tick,0x7ffe67f8feb4,235346626,0,0x0,8
tick,0x7ffe67f8feb4,235361756,0,0x0,8
tick,0x7ffe67f8feb4,235377478,0,0x0,8
tick,0x7ffe67f8feb4,235393008,0,0x0,8
tick,0x7ffe67f8feb4,235408276,0,0x0,8
tick,0x7ffe67f8feb4,235424707,0,0x0,8
tick,0x7ffe67f8feb4,235440318,0,0x0,8
tick,0x7ffe67f8feb4,235455868,0,0x0,8
tick,0x7ffe67f8feb4,235471698,0,0x0,8
tick,0x7ffe67f8feb4,235487043,0,0x0,8
tick,0x7ffe67f8feb4,235502654,0,0x0,8
tick,0x7ffe67f8feb4,235517841,0,0x0,8
tick,0x7ffe67f8feb4,235533745,0,0x0,8
tick,0x7ffe67f8feb4,235550046,0,0x0,8
tick,0x7ffe67f8feb4,235565318,0,0x0,8
tick,0x7ffe67f8feb4,235581188,0,0x0,8
tick,0x7ffe67f8feb4,235596352,0,0x0,8
tick,0x7ffe67f8feb4,235611612,0,0x0,8
tick,0x7ffe67f8feb4,235627678,0,0x0,8
tick,0x7ffe67f8feb4,235643235,0,0x0,8
tick,0x7ffe67f8feb4,235658863,0,0x0,8
tick,0x7ffe67f8feb4,235674287,0,0x0,8
tick,0x7ffe67f8feb4,235689786,0,0x0,8
tick,0x7ffe67f8feb4,235704780,0,0x0,8
tick,0x7ffe67f8feb4,235720765,0,0x0,8
tick,0x7ffe67f8feb4,235736563,0,0x0,8
tick,0x7ffe67f8feb4,235753266,0,0x0,8
tick,0x7ffe67f8feb4,235767382,0,0x0,8
tick,0x7ffe67f8feb4,235783263,0,0x0,8
tick,0x7ffe67f8feb4,235799263,0,0x0,8
tick,0x7ffe67f8feb4,235815235,0,0x0,8
tick,0x7ffe67f8feb4,235831246,0,0x0,8
tick,0x7ffe67f8feb4,235847263,0,0x0,8
tick,0x7ffe67f8feb4,235863223,0,0x0,8
tick,0x7ffe67f8feb4,235878298,0,0x0,8
tick,0x7ffe67f8feb4,235894316,0,0x0,8
tick,0x7ffe67f8feb4,235910045,0,0x0,8
tick,0x7ffe67f8feb4,235926034,0,0x0,8
tick,0x7ffe67f8feb4,235942060,0,0x0,8
tick,0x7ffe67f8feb4,235957633,0,0x0,8
tick,0x7ffe67f8feb4,235973448,0,0x0,8
tick,0x7ffe67f8feb4,235989474,0,0x0,8
tick,0x7ffe67f8feb4,236005475,0,0x0,8
tick,0x7ffe67f8feb4,236021458,0,0x0,8
tick,0x7ffe67f8feb4,236037525,0,0x0,8
tick,0x7ffe67f8feb4,236053307,0,0x0,8
tick,0x7ffe67f8feb4,236068117,0,0x0,8
tick,0x7ffe67f8feb4,236083553,0,0x0,8
tick,0x7ffe67f8feb4,236099534,0,0x0,8
tick,0x7ffe67f8feb4,236115522,0,0x0,8
tick,0x7ffe67f8feb4,236131500,0,0x0,8
tick,0x7ffe67f8feb4,236147552,0,0x0,8
tick,0x7ffe67f8feb4,236163088,0,0x0,8
tick,0x7ffe67f8feb4,236178421,0,0x0,8
tick,0x7ffe67f8feb4,236193971,0,0x0,8
tick,0x7ffe67f8feb4,236209302,0,0x0,8
tick,0x7ffe67f8feb4,236224665,0,0x0,8
tick,0x7ffe67f8feb4,236240463,0,0x0,8
tick,0x7ffe67f8feb4,236255745,0,0x0,8
tick,0x7ffe67f8feb4,236271236,0,0x0,8
tick,0x7ffe67f8feb4,236287093,0,0x0,8
tick,0x7ffe67f8feb4,236302590,0,0x0,8
tick,0x7ffe67f8feb4,236318696,0,0x0,8
tick,0x7ffe67f8feb4,236334366,0,0x0,8
tick,0x7ffe67f8feb4,236349674,0,0x0,8
tick,0x7ffe67f8feb4,236365723,0,0x0,8
tick,0x7ffe67f8feb4,236381736,0,0x0,8
tick,0x7ffe67f8feb4,236397560,0,0x0,8
tick,0x7ffe67f8feb4,236412376,0,0x0,8
tick,0x7ffe67f8feb4,236427954,0,0x0,8
tick,0x7ffe67f8feb4,236443477,0,0x0,8
tick,0x7ffe67f8feb4,236459606,0,0x0,8
tick,0x7ffe67f8feb4,236475728,0,0x0,8
tick,0x7ffe67f8feb4,236491556,0,0x0,8
tick,0x7ffe67f8feb4,236507030,0,0x0,8
tick,0x7ffe67f8feb4,236522313,0,0x0,8
tick,0x7ffe67f8feb4,236537840,0,0x0,8
tick,0x7ffe67f8feb4,236553410,0,0x0,8
tick,0x7ffe67f8feb4,236569184,0,0x0,8
tick,0x7ffe67f8feb4,236585236,0,0x0,8
tick,0x7ffe67f8feb4,236601164,0,0x0,8
tick,0x7ffe67f8feb4,236616316,0,0x0,8
tick,0x7ffe67f8feb4,236632335,0,0x0,8
tick,0x7ffe67f8feb4,236647748,0,0x0,8
tick,0x7ffe67f8feb4,236662583,0,0x0,8
tick,0x7ffe67f8feb4,236678630,0,0x0,8
tick,0x7ffe67f8feb4,236694507,0,0x0,8
tick,0x7ffe67f8feb4,236710243,0,0x0,8
tick,0x7ffe67f8feb4,236725382,0,0x0,8
tick,0x7ffe67f8feb4,236741120,0,0x0,8
tick,0x7ffe67f8feb4,236757470,0,0x0,8
tick,0x7ffe67f8feb4,236773396,0,0x0,8
tick,0x7ffe67f8feb4,236788376,0,0x0,8
tick,0x7ffe67f8feb4,236804379,0,0x0,8
tick,0x7ffe67f8feb4,236820355,0,0x0,8
tick,0x7ffe67f8feb4,236836377,0,0x0,8
tick,0x7ffe67f8feb4,236852448,0,0x0,8
tick,0x7ffe67f8feb4,236868262,0,0x0,8
tick,0x7ffe67f8feb4,236884206,0,0x0,8
tick,0x7ffe67f8feb4,236900305,0,0x0,8
tick,0x7ffe67f8feb4,236916031,0,0x0,8
tick,0x7ffe67f8feb4,236931447,0,0x0,8
tick,0x7ffe67f8feb4,236947456,0,0x0,8
tick,0x7ffe67f8feb4,236962873,0,0x0,8
tick,0x7ffe67f8feb4,236978932,0,0x0,8
tick,0x7ffe67f8feb4,236994933,0,0x0,8
tick,0x7ffe67f8feb4,237010939,0,0x0,8
tick,0x7ffe67f8feb4,237026986,0,0x0,8
tick,0x7ffe67f8feb4,237042987,0,0x0,8
tick,0x7ffe67f8feb4,237058919,0,0x0,8
tick,0x7ffe67f8feb4,237074610,0,0x0,8
tick,0x7ffe67f8feb4,237089521,0,0x0,8
tick,0x7ffe67f8feb4,237105551,0,0x0,8
tick,0x7ffe67f8feb4,237120941,0,0x0,8
tick,0x7ffe67f8feb4,237136596,0,0x0,8
tick,0x7ffe67f8feb4,237152620,0,0x0,8
tick,0x7ffe67f8feb4,237168619,0,0x0,8
tick,0x7ffe67f8feb4,237184639,0,0x0,8
tick,0x7ffe67f8feb4,237200161,0,0x0,8
tick,0x7ffe67f8feb4,237216506,0,0x0,8
tick,0x7ffe67f8feb4,237232567,0,0x0,8
tick,0x7ffe67f8feb4,237247513,0,0x0,8
tick,0x7ffe67f8feb4,237262630,0,0x0,8
tick,0x7ffe67f8feb4,237278486,0,0x0,8
tick,0x7ffe67f8feb4,237293507,0,0x0,8
tick,0x7ffe67f8feb4,237308666,0,0x0,8
tick,0x7ffe67f8feb4,237323809,0,0x0,8
tick,0x7ffe67f8feb4,237339816,0,0x0,8
tick,0x7ffe67f8feb4,237355523,0,0x0,8
tick,0x7ffe67f8feb4,237371565,0,0x0,8
tick,0x7ffe67f8feb4,237387007,0,0x0,8
tick,0x7ffe67f8feb4,237402218,0,0x0,8
tick,0x7ffe67f8feb4,237417710,0,0x0,8
tick,0x7ffe67f8feb4,237433701,0,0x0,8
tick,0x7ffe67f8feb4,237450060,0,0x0,8
tick,0x7ffe67f8feb4,237465787,0,0x0,8
tick,0x7ffe67f8feb4,237481869,0,0x0,8
tick,0x7ffe67f8feb4,237496696,0,0x0,8
tick,0x7ffe67f8feb4,237512707,0,0x0,8
tick,0x7ffe67f8feb4,237527974,0,0x0,8
tick,0x7ffe67f8feb4,237543820,0,0x0,8
tick,0x7ffe67f8feb4,237558996,0,0x0,8
tick,0x7ffe67f8feb4,237574976,0,0x0,8
tick,0x7ffe67f8feb4,237590988,0,0x0,8
tick,0x7ffe67f8feb4,237606565,0,0x0,8
tick,0x7ffe67f8feb4,237621741,0,0x0,8
tick,0x7ffe67f8feb4,237636991,0,0x0,8
tick,0x7ffe67f8feb4,237652195,0,0x0,8
tick,0x7ffe67f8feb4,237668329,0,0x0,8
tick,0x7ffe67f8feb4,237684132,0,0x0,8
tick,0x7ffe67f8feb4,237700151,0,0x0,8
tick,0x7ffe67f8feb4,237715445,0,0x0,8
tick,0x7ffe67f8feb4,237732008,0,0x0,8
tick,0x7ffe67f8feb4,237747778,0,0x0,8
tick,0x7ffe67f8feb4,237764246,0,0x0,8
tick,0x7ffe67f8feb4,237780198,0,0x0,8
tick,0x7ffe67f8feb4,237795380,0,0x0,8
tick,0x7ffe67f8feb4,237811193,0,0x0,8
tick,0x7ffe67f8feb4,237827243,0,0x0,8
tick,0x7ffe67f8feb4,237843170,0,0x0,8
tick,0x7ffe67f8feb4,237859183,0,0x0,8
tick,0x7ffe67f8feb4,237874344,0,0x0,8
tick,0x7ffe67f8feb4,237890306,0,0x0,8
tick,0x7ffe67f8feb4,237906362,0,0x0,8
tick,0x7ffe67f8feb4,237921478,0,0x0,8
tick,0x7ffe67f8feb4,237937212,0,0x0,8
tick,0x7ffe67f8feb4,237953217,0,0x0,8
tick,0x7ffe67f8feb4,237968885,0,0x0,8
tick,0x7ffe67f8feb4,237984892,0,0x0,8
tick,0x7ffe67f8feb4,238000751,0,0x0,8
tick,0x7ffe67f8feb4,238016763,0,0x0,8
tick,0x7ffe67f8feb4,238032701,0,0x0,8
tick,0x7ffe67f8feb4,238048676,0,0x0,8
tick,0x7ffe67f8feb4,238064700,0,0x0,8
tick,0x7ffe67f8feb4,238080688,0,0x0,8
tick,0x7ffe67f8feb4,238096694,0,0x0,8
tick,0x7ffe67f8feb4,238112707,0,0x0,8
tick,0x7ffe67f8feb4,238128675,0,0x0,8
tick,0x7ffe67f8feb4,238144664,0,0x0,8
tick,0x7ffe67f8feb4,238160665,0,0x0,8
tick,0x7ffe67f8feb4,238176678,0,0x0,8
tick,0x7ffe67f8feb4,238192674,0,0x0,8
tick,0x7ffe67f8feb4,238208701,0,0x0,8
tick,0x7ffe67f8feb4,238224677,0,0x0,8
tick,0x7ffe67f8feb4,238240733,0,0x0,8
tick,0x7ffe67f8feb4,238256688,0,0x0,8
tick,0x7ffe67f8feb4,238272706,0,0x0,8
tick,0x7ffe67f8feb4,238288718,0,0x0,8
tick,0x7ffe67f8feb4,238304716,0,0x0,8
tick,0x7ffe67f8feb4,238320699,0,0x0,8
tick,0x7ffe67f8feb4,238336704,0,0x0,8
tick,0x7ffe67f8feb4,238352709,0,0x0,8
tick,0x7ffe67f8feb4,238368721,0,0x0,8
tick,0x7ffe67f8feb4,238384715,0,0x0,8
tick,0x7ffe67f8feb4,238400742,0,0x0,8
tick,0x7ffe67f8feb4,238416739,0,0x0,8
tick,0x7ffe67f8feb4,238432703,0,0x0,8
tick,0x7ffe67f8feb4,238448694,0,0x0,8
tick,0x7ffe67f8feb4,238464709,0,0x0,8
tick,0x7ffe67f8feb4,238480715,0,0x0,8
tick,0x7ffe67f8feb4,238496973,0,0x0,8
tick,0x7ffe67f8feb4,238512732,0,0x0,8
tick,0x7ffe67f8feb4,238528748,0,0x0,8
tick,0x7ffe67f8feb4,238544758,0,0x0,8
tick,0x7ffe67f8feb4,238560818,0,0x0,8
tick,0x7ffe67f8feb4,238576806,0,0x0,8
tick,0x7ffe67f8feb4,238592725,0,0x0,8
tick,0x7ffe67f8feb4,238608720,0,0x0,8
tick,0x7ffe67f8feb4,238624719,0,0x0,8
tick,0x7ffe67f8feb4,238640733,0,0x0,8
tick,0x7ffe67f8feb4,238656734,0,0x0,8
tick,0x7ffe67f8feb4,238672702,0,0x0,8
tick,0x7ffe67f8feb4,238688733,0,0x0,8
tick,0x7ffe67f8feb4,238704723,0,0x0,8
tick,0x7ffe67f8feb4,238720719,0,0x0,8
tick,0x7ffe67f8feb4,238736727,0,0x0,8
tick,0x7ffe67f8feb4,238752746,0,0x0,8
tick,0x7ffe67f8feb4,238768775,0,0x0,8
tick,0x7ffe67f8feb4,238784831,0,0x0,8
tick,0x7ffe67f8feb4,238800751,0,0x0,8
tick,0x7ffe67f8feb4,238816772,0,0x0,8
tick,0x7ffe67f8feb4,238833135,0,0x0,8
tick,0x7ffe67f8feb4,238848772,0,0x0,8
tick,0x7ffe67f8feb4,238864742,0,0x0,8
tick,0x7ffe67f8feb4,238880735,0,0x0,8
tick,0x7ffe67f8feb4,238896776,0,0x0,8
tick,0x7ffe67f8feb4,238912733,0,0x0,8
tick,0x7ffe67f8feb4,238927532,0,0x0,8
tick,0x7ffe67f8feb4,238943516,0,0x0,8
tick,0x7ffe67f8feb4,238959561,0,0x0,8
tick,0x7ffe67f8feb4,238974713,0,0x0,8
tick,0x7ffe67f8feb4,238990583,0,0x0,8
tick,0x7ffe67f8feb4,239005790,0,0x0,8
tick,0x7ffe67f8feb4,239021774,0,0x0,8
tick,0x7ffe67f8feb4,239037761,0,0x0,8
tick,0x7ffe67f8feb4,239053319,0,0x0,8
tick,0x7ffe67f8feb4,239068709,0,0x0,8
tick,0x7ffe67f8feb4,239084483,0,0x0,8
tick,0x7ffe67f8feb4,239100538,0,0x0,8
tick,0x7ffe67f8feb4,239115606,0,0x0,8
tick,0x7ffe67f8feb4,239131117,0,0x0,8
tick,0x7ffe67f8feb4,239147213,0,0x0,8
tick,0x7ffe67f8feb4,239162895,0,0x0,8
tick,0x7ffe67f8feb4,239178195,0,0x0,8
tick,0x7ffe67f8feb4,239194454,0,0x0,8
tick,0x7ffe67f8feb4,239210423,0,0x0,8
tick,0x7ffe67f8feb4,239225589,0,0x0,8
tick,0x7ffe67f8feb4,239241111,0,0x0,8
tick,0x7ffe67f8feb4,239256703,0,0x0,8
tick,0x7ffe67f8feb4,239271945,0,0x0,8
tick,0x7ffe67f8feb4,239287416,0,0x0,8
tick,0x7ffe67f8feb4,239302375,0,0x0,8
tick,0x7ffe67f8feb4,239318183,0,0x0,8
tick,0x7ffe67f8feb4,239333598,0,0x0,8
tick,0x7ffe67f8feb4,239348493,0,0x0,8
tick,0x7ffe67f8feb4,239364485,0,0x0,8
tick,0x7ffe67f8feb4,239379558,0,0x0,8
tick,0x7ffe67f8feb4,239395102,0,0x0,8
tick,0x7ffe67f8feb4,239411091,0,0x0,8
tick,0x7ffe67f8feb4,239426397,0,0x0,8
tick,0x7ffe67f8feb4,239441924,0,0x0,8
tick,0x7ffe67f8feb4,239457361,0,0x0,8
tick,0x7ffe67f8feb4,239472665,0,0x0,8
tick,0x7ffe67f8feb4,239487860,0,0x0,8
tick,0x7ffe67f8feb4,239503452,0,0x0,8
tick,0x7ffe67f8feb4,239518941,0,0x0,8
tick,0x7ffe67f8feb4,239535031,0,0x0,8
tick,0x7ffe67f8feb4,239550187,0,0x0,8
tick,0x7ffe67f8feb4,239566096,0,0x0,8
tick,0x7ffe67f8feb4,239581951,0,0x0,8
tick,0x7ffe67f8feb4,239597510,0,0x0,8
tick,0x7ffe67f8feb4,239613414,0,0x0,8
tick,0x7ffe67f8feb4,239629161,0,0x0,8
tick,0x7ffe67f8feb4,239644704,0,0x0,8
tick,0x7ffe67f8feb4,239659918,0,0x0,8
tick,0x7ffe67f8feb4,239675808,0,0x0,8
tick,0x7ffe67f8feb4,239691003,0,0x0,8
tick,0x7ffe67f8feb4,239707175,0,0x0,8
tick,0x7ffe67f8feb4,239722801,0,0x0,8
tick,0x7ffe67f8feb4,239738360,0,0x0,8
tick,0x7ffe67f8feb4,239754672,0,0x0,8
tick,0x7ffe67f8feb4,239770564,0,0x0,8
tick,0x7ffe67f8feb4,239786516,0,0x0,8
tick,0x7ffe67f8feb4,239801579,0,0x0,8
tick,0x7ffe67f8feb4,239817504,0,0x0,8
tick,0x7ffe67f8feb4,239833497,0,0x0,8
tick,0x7ffe67f8feb4,239849527,0,0x0,8
tick,0x7ffe67f8feb4,239865546,0,0x0,8
tick,0x7ffe67f8feb4,239881527,0,0x0,8
tick,0x7ffe67f8feb4,239897521,0,0x0,8
tick,0x7ffe67f8feb4,239912690,0,0x0,8
tick,0x7ffe67f8feb4,239927563,0,0x0,8
tick,0x7ffe67f8feb4,239943623,0,0x0,8
tick,0x7ffe67f8feb4,239958888,0,0x0,8
tick,0x7ffe67f8feb4,239974702,0,0x0,8
tick,0x7ffe67f8feb4,239990684,0,0x0,8
tick,0x7ffe67f8feb4,240007451,0,0x0,8
tick,0x7ffe67f8feb4,240022948,0,0x0,8
tick,0x7ffe67f8feb4,240037775,0,0x0,8
tick,0x7ffe67f8feb4,240053763,0,0x0,8
tick,0x7ffe67f8feb4,240069806,0,0x0,8
tick,0x7ffe67f8feb4,240085802,0,0x0,8
tick,0x7ffe67f8feb4,240102264,0,0x0,8
tick,0x7ffe67f8feb4,240117779,0,0x0,8
tick,0x7ffe67f8feb4,240133794,0,0x0,8
tick,0x7ffe67f8feb4,240149797,0,0x0,8
tick,0x7ffe67f8feb4,240165678,0,0x0,8
tick,0x7ffe67f8feb4,240181740,0,0x0,8
tick,0x7ffe67f8feb4,240197701,0,0x0,8
tick,0x7ffe67f8feb4,240213695,0,0x0,8
tick,0x7ffe67f8feb4,240229699,0,0x0,8
tick,0x7ffe67f8feb4,240245736,0,0x0,8
tick,0x7ffe67f8feb4,240261745,0,0x0,8
tick,0x7ffe67f8feb4,240277747,0,0x0,8
tick,0x7ffe67f8feb4,240293813,0,0x0,8
tick,0x7ffe67f8feb4,240309015,0,0x0,8
tick,0x7ffe67f8feb4,240324897,0,0x0,8
tick,0x7ffe67f8feb4,240340910,0,0x0,8
tick,0x7ffe67f8feb4,240356318,0,0x0,8
tick,0x7ffe67f8feb4,240372073,0,0x0,8
tick,0x7ffe67f8feb4,240387147,0,0x0,8
tick,0x7ffe67f8feb4,240402418,0,0x0,8
tick,0x7ffe67f8feb4,240418366,0,0x0,8
tick,0x7ffe67f8feb4,240433894,0,0x0,8
tick,0x7ffe67f8feb4,240448939,0,0x0,8
tick,0x7ffe67f8feb4,240464348,0,0x0,8
tick,0x7ffe67f8feb4,240479418,0,0x0,8
tick,0x7ffe67f8feb4,240495325,0,0x0,8
tick,0x7ffe67f8feb4,240511216,0,0x0,8
tick,0x7ffe67f8feb4,240526802,0,0x0,8
tick,0x7ffe67f8feb4,240542765,0,0x0,8
tick,0x7ffe67f8feb4,240558808,0,0x0,8
tick,0x7ffe67f8feb4,240574600,0,0x0,8
tick,0x7ffe67f8feb4,240589828,0,0x0,8
tick,0x7ffe67f8feb4,240605196,0,0x0,8
tick,0x7ffe67f8feb4,240620842,0,0x0,8
tick,0x7ffe67f8feb4,240636356,0,0x0,8
tick,0x7ffe67f8feb4,240652410,0,0x0,8
tick,0x7ffe67f8feb4,240668561,0,0x0,8
tick,0x7ffe67f8feb4,240684201,0,0x0,8
tick,0x7ffe67f8feb4,240700181,0,0x0,8
tick,0x7ffe67f8feb4,240716173,0,0x0,8
tick,0x7ffe67f8feb4,240732207,0,0x0,8
tick,0x7ffe67f8feb4,240748170,0,0x0,8
tick,0x7ffe67f8feb4,240763457,0,0x0,8
tick,0x7ffe67f8feb4,240778709,0,0x0,8
tick,0x7ffe67f8feb4,240794702,0,0x0,8
tick,0x7ffe67f8feb4,240810737,0,0x0,8
tick,0x7ffe67f8feb4,240826774,0,0x0,8
tick,0x7ffe67f8feb4,240842172,0,0x0,8
tick,0x7ffe67f8feb4,240857745,0,0x0,8
tick,0x7ffe67f8feb4,240873177,0,0x0,8
tick,0x7ffe67f8feb4,240889176,0,0x0,8
tick,0x7ffe67f8feb4,240905210,0,0x0,8
tick,0x7ffe67f8feb4,240921229,0,0x0,8
tick,0x7ffe67f8feb4,240937249,0,0x0,8
tick,0x7ffe67f8feb4,240953725,0,0x0,8
tick,0x7ffe67f8feb4,240970662,0,0x0,8
tick,0x7ffe67f8feb4,240986226,0,0x0,8
tick,0x7ffe67f8feb4,241001238,0,0x0,8
tick,0x7ffe67f8feb4,241017219,0,0x0,8
tick,0x7ffe67f8feb4,241033193,0,0x0,8
tick,0x7ffe67f8feb4,241049210,0,0x0,8
tick,0x7ffe67f8feb4,241065208,0,0x0,8
tick,0x7ffe67f8feb4,241081257,0,0x0,8
tick,0x7ffe67f8feb4,241096370,0,0x0,8
tick,0x7ffe67f8feb4,241111485,0,0x0,8
tick,0x7ffe67f8feb4,241127191,0,0x0,8
tick,0x7ffe67f8feb4,241142391,0,0x0,8
tick,0x7ffe67f8feb4,241158250,0,0x0,8
tick,0x7ffe67f8feb4,241173697,0,0x0,8
tick,0x7ffe67f8feb4,241189278,0,0x0,8
tick,0x7ffe67f8feb4,241205265,0,0x0,8
tick,0x7ffe67f8feb4,241221248,0,0x0,8
tick,0x7ffe67f8feb4,241237264,0,0x0,8
tick,0x7ffe67f8feb4,241253309,0,0x0,8
tick,0x7ffe67f8feb4,241269492,0,0x0,8
tick,0x7ffe67f8feb4,241286094,0,0x0,8
tick,0x7ffe67f8feb4,241301272,0,0x0,8
tick,0x7ffe67f8feb4,241317525,0,0x0,8
tick,0x7ffe67f8feb4,241333011,0,0x0,8
tick,0x7ffe67f8feb4,241348390,0,0x0,8
tick,0x7ffe67f8feb4,241363894,0,0x0,8
tick,0x7ffe67f8feb4,241380388,0,0x0,8
tick,0x7ffe67f8feb4,241394956,0,0x0,8
tick,0x7ffe67f8feb4,241410111,0,0x0,8
tick,0x7ffe67f8feb4,241426161,0,0x0,8
tick,0x7ffe67f8feb4,241441819,0,0x0,8
tick,0x7ffe67f8feb4,241456441,0,0x0,8
tick,0x7ffe67f8feb4,241472429,0,0x0,8
tick,0x7ffe67f8feb4,241487862,0,0x0,8
tick,0x7ffe67f8feb4,241503889,0,0x0,8
tick,0x7ffe67f8feb4,241519965,0,0x0,8
tick,0x7ffe67f8feb4,241535887,0,0x0,8
tick,0x7ffe67f8feb4,241551298,0,0x0,8
tick,0x7ffe67f8feb4,241566974,0,0x0,8
tick,0x7ffe67f8feb4,241582741,0,0x0,8
tick,0x7ffe67f8feb4,241597921,0,0x0,8
tick,0x7ffe67f8feb4,241613722,0,0x0,8
tick,0x7ffe67f8feb4,241629657,0,0x0,8
tick,0x7ffe67f8feb4,241645413,0,0x0,8
tick,0x7ffe67f8feb4,241660385,0,0x0,8
tick,0x7ffe67f8feb4,241676359,0,0x0,8
tick,0x7ffe67f8feb4,241691330,0,0x0,8
tick,0x7ffe67f8feb4,241706722,0,0x0,8
tick,0x7ffe67f8feb4,241722624,0,0x0,8
tick,0x7ffe67f8feb4,241738376,0,0x0,8
tick,0x7ffe67f8feb4,241754176,0,0x0,8
tick,0x7ffe67f8feb4,241769778,0,0x0,8
tick,0x7ffe67f8feb4,241785365,0,0x0,8
tick,0x7ffe67f8feb4,241801305,0,0x0,8
tick,0x7ffe67f8feb4,241817233,0,0x0,8
tick,0x7ffe67f8feb4,241832238,0,0x0,8
tick,0x7ffe67f8feb4,241848323,0,0x0,8
tick,0x7ffe67f8feb4,241863769,0,0x0,8
tick,0x7ffe67f8feb4,241880023,0,0x0,8
tick,0x7ffe67f8feb4,241895424,0,0x0,8
tick,0x7ffe67f8feb4,241910803,0,0x0,8
tick,0x7ffe67f8feb4,241926771,0,0x0,8
tick,0x7ffe67f8feb4,241942823,0,0x0,8
tick,0x7ffe67f8feb4,241957859,0,0x0,8
tick,0x7ffe67f8feb4,241972933,0,0x0,8
tick,0x7ffe67f8feb4,241988847,0,0x0,8
tick,0x7ffe67f8feb4,242004845,0,0x0,8
tick,0x7ffe67f8feb4,242020886,0,0x0,8
tick,0x7ffe67f8feb4,242036194,0,0x0,8
tick,0x7ffe67f8feb4,242051196,0,0x0,8
tick,0x7ffe67f8feb4,242067199,0,0x0,8
tick,0x7ffe67f8feb4,242082678,0,0x0,8
tick,0x7ffe67f8feb4,242097581,0,0x0,8
tick,0x7ffe67f8feb4,242113131,0,0x0,8
tick,0x7ffe67f8feb4,242128998,0,0x0,8
tick,0x7ffe67f8feb4,242144887,0,0x0,8
tick,0x7ffe67f8feb4,242160271,0,0x0,8
tick,0x7ffe67f8feb4,242176411,0,0x0,8
tick,0x7ffe67f8feb4,242191376,0,0x0,8
tick,0x7ffe67f8feb4,242206894,0,0x0,8
tick,0x7ffe67f8feb4,242222247,0,0x0,8
tick,0x7ffe67f8feb4,242238605,0,0x0,8
tick,0x7ffe67f8feb4,242254959,0,0x0,8
tick,0x7ffe67f8feb4,242270347,0,0x0,8
tick,0x7ffe67f8feb4,242286019,0,0x0,8
tick,0x7ffe67f8feb4,242301663,0,0x0,8
tick,0x7ffe67f8feb4,242316870,0,0x0,8
tick,0x7ffe67f8feb4,242332316,0,0x0,8
tick,0x7ffe67f8feb4,242347519,0,0x0,8
tick,0x7ffe67f8feb4,242363533,0,0x0,8
tick,0x7ffe67f8feb4,242379260,0,0x0,8
tick,0x7ffe67f8feb4,242394956,0,0x0,8
tick,0x7ffe67f8feb4,242410355,0,0x0,8
tick,0x7ffe67f8feb4,242426338,0,0x0,8
tick,0x7ffe67f8feb4,242442291,0,0x0,8
tick,0x7ffe67f8feb4,242458334,0,0x0,8
tick,0x7ffe67f8feb4,242474139,0,0x0,8
tick,0x7ffe67f8feb4,242489723,0,0x0,8
tick,0x7ffe67f8feb4,242505969,0,0x0,8
tick,0x7ffe67f8feb4,242521192,0,0x0,8
tick,0x7ffe67f8feb4,242536911,0,0x0,8
tick,0x7ffe67f8feb4,242552285,0,0x0,8
tick,0x7ffe67f8feb4,242568265,0,0x0,8
tick,0x7ffe67f8feb4,242583981,0,0x0,8
tick,0x7ffe67f8feb4,242599819,0,0x0,8
tick,0x7ffe67f8feb4,242615167,0,0x0,8
tick,0x7ffe67f8feb4,242631352,0,0x0,8
tick,0x7ffe67f8feb4,242647172,0,0x0,8
tick,0x7ffe67f8feb4,242662330,0,0x0,8
tick,0x7ffe67f8feb4,242678358,0,0x0,8
tick,0x7ffe67f8feb4,242694129,0,0x0,8
tick,0x7ffe67f8feb4,242709261,0,0x0,8
tick,0x7ffe67f8feb4,242724728,0,0x0,8
tick,0x7ffe67f8feb4,242739982,0,0x0,8
tick,0x7ffe67f8feb4,242756064,0,0x0,8
tick,0x7ffe67f8feb4,242772132,0,0x0,8
tick,0x7ffe67f8feb4,242788183,0,0x0,8
tick,0x7ffe67f8feb4,242804113,0,0x0,8
tick,0x7ffe67f8feb4,242820224,0,0x0,8
tick,0x7ffe67f8feb4,242836152,0,0x0,8
tick,0x7ffe67f8feb4,242852099,0,0x0,8
tick,0x7ffe67f8feb4,242868102,0,0x0,8
tick,0x7ffe67f8feb4,242884137,0,0x0,8
tick,0x7ffe67f8feb4,242899423,0,0x0,8
tick,0x7ffe67f8feb4,242915075,0,0x0,8
tick,0x7ffe67f8feb4,242930277,0,0x0,8
tick,0x7ffe67f8feb4,242945649,0,0x0,8
tick,0x7ffe67f8feb4,242960674,0,0x0,8
tick,0x7ffe67f8feb4,242976108,0,0x0,8
tick,0x7ffe67f8feb4,242991165,0,0x0,8
tick,0x7ffe67f8feb4,243007189,0,0x0,8
tick,0x7ffe67f8feb4,243022542,0,0x0,8
tick,0x7ffe67f8feb4,243038552,0,0x0,8
tick,0x7ffe67f8feb4,243054600,0,0x0,8
tick,0x7ffe67f8feb4,243070682,0,0x0,8
tick,0x7ffe67f8feb4,243087064,0,0x0,8
tick,0x7ffe67f8feb4,243102365,0,0x0,8
tick,0x7ffe67f8feb4,243117651,0,0x0,8
tick,0x7ffe67f8feb4,243132915,0,0x0,8
tick,0x7ffe67f8feb4,243149108,0,0x0,8
tick,0x7ffe67f8feb4,243165130,0,0x0,8
tick,0x7ffe67f8feb4,243181163,0,0x0,8
tick,0x7ffe67f8feb4,243197289,0,0x0,8
tick,0x7ffe67f8feb4,243213584,0,0x0,8
tick,0x7ffe67f8feb4,243228775,0,0x0,8
tick,0x7ffe67f8feb4,243244914,0,0x0,8
tick,0x7ffe67f8feb4,243260287,0,0x0,8
tick,0x7ffe67f8feb4,243275857,0,0x0,8
tick,0x7ffe67f8feb4,243291264,0,0x0,8
tick,0x7ffe67f8feb4,243306674,0,0x0,8
tick,0x7ffe67f8feb4,243322390,0,0x0,8
tick,0x7ffe67f8feb4,243337907,0,0x0,8
tick,0x7ffe67f8feb4,243353427,0,0x0,8
tick,0x7ffe67f8feb4,243369370,0,0x0,8
tick,0x7ffe67f8feb4,243384852,0,0x0,8
tick,0x7ffe67f8feb4,243400824,0,0x0,8
tick,0x7ffe67f8feb4,243416920,0,0x0,8
tick,0x7ffe67f8feb4,243432386,0,0x0,8
tick,0x7ffe67f8feb4,243448230,0,0x0,8
tick,0x7ffe67f8feb4,243463927,0,0x0,8
tick,0x7ffe67f8feb4,243480075,0,0x0,8
tick,0x7ffe67f8feb4,243495859,0,0x0,8
tick,0x7ffe67f8feb4,243511459,0,0x0,8
tick,0x7ffe67f8feb4,243527409,0,0x0,8
tick,0x7ffe67f8feb4,243543427,0,0x0,8
tick,0x7ffe67f8feb4,243558967,0,0x0,8
tick,0x7ffe67f8feb4,243574870,0,0x0,8
tick,0x7ffe67f8feb4,243589805,0,0x0,8
tick,0x7ffe67f8feb4,243605860,0,0x0,8
tick,0x7ffe67f8feb4,243621349,0,0x0,8
tick,0x7ffe67f8feb4,243637660,0,0x0,8
tick,0x7ffe67f8feb4,243653965,0,0x0,8
tick,0x7ffe67f8feb4,243669573,0,0x0,8
tick,0x7ffe67f8feb4,243685434,0,0x0,8
tick,0x7ffe67f8feb4,243701001,0,0x0,8
tick,0x7ffe67f8feb4,243717084,0,0x0,8
tick,0x7ffe67f8feb4,243732807,0,0x0,8
tick,0x7ffe67f8feb4,243748283,0,0x0,8
tick,0x7ffe67f8feb4,243763998,0,0x0,8
tick,0x7ffe67f8feb4,243779589,0,0x0,8
tick,0x7ffe67f8feb4,243795843,0,0x0,8
tick,0x7ffe67f8feb4,243811767,0,0x0,8
tick,0x7ffe67f8feb4,243827810,0,0x0,8
tick,0x7ffe67f8feb4,243843973,0,0x0,8
tick,0x7ffe67f8feb4,243859139,0,0x0,8
tick,0x7ffe67f8feb4,243875079,0,0x0,8
tick,0x7ffe67f8feb4,243891181,0,0x0,8
tick,0x7ffe67f8feb4,243906914,0,0x0,8
tick,0x7ffe67f8feb4,243922564,0,0x0,8
tick,0x7ffe67f8feb4,243937683,0,0x0,8
tick,0x7ffe67f8feb4,243953229,0,0x0,8
tick,0x7ffe67f8feb4,243969233,0,0x0,8
tick,0x7ffe67f8feb4,243984501,0,0x0,8
tick,0x7ffe67f8feb4,243999897,0,0x0,8
tick,0x7ffe67f8feb4,244016962,0,0x0,8
tick,0x7ffe67f8feb4,244031173,0,0x0,8
tick,0x7ffe67f8feb4,244046723,0,0x0,8
tick,0x7ffe67f8feb4,244062938,0,0x0,8
tick,0x7ffe67f8feb4,244078727,0,0x0,8
tick,0x7ffe67f8feb4,244094304,0,0x0,8
tick,0x7ffe67f8feb4,244110304,0,0x0,8
tick,0x7ffe67f8feb4,244126094,0,0x0,8
tick,0x7ffe67f8feb4,244141995,0,0x0,8
tick,0x7ffe67f8feb4,244157119,0,0x0,8
tick,0x7ffe67f8feb4,244173125,0,0x0,8
tick,0x7ffe67f8feb4,244189071,0,0x0,8
tick,0x7ffe67f8feb4,244204702,0,0x0,8
tick,0x7ffe67f8feb4,244220743,0,0x0,8
tick,0x7ffe67f8feb4,244236651,0,0x0,8
tick,0x7ffe67f8feb4,244252652,0,0x0,8
tick,0x7ffe67f8feb4,244267640,0,0x0,8
tick,0x7ffe67f8feb4,244282784,0,0x0,8
tick,0x7ffe67f8feb4,244297651,0,0x0,8
tick,0x7ffe67f8feb4,244313247,0,0x0,8
tick,0x7ffe67f8feb4,244329282,0,0x0,8
tick,0x7ffe67f8feb4,244344426,0,0x0,8
tick,0x7ffe67f8feb4,244360051,0,0x0,8
tick,0x7ffe67f8feb4,244375630,0,0x0,8
tick,0x7ffe67f8feb4,244391767,0,0x0,8
tick,0x7ffe67f8feb4,244407760,0,0x0,8
tick,0x7ffe67f8feb4,244423726,0,0x0,8
tick,0x7ffe67f8feb4,244439842,0,0x0,8
tick,0x7ffe67f8feb4,244455586,0,0x0,8
tick,0x7ffe67f8feb4,244471553,0,0x0,8
tick,0x7ffe67f8feb4,244486664,0,0x0,8
tick,0x7ffe67f8feb4,244501796,0,0x0,8
tick,0x7ffe67f8feb4,244516454,0,0x0,8
tick,0x7ffe67f8feb4,244531518,0,0x0,8
tick,0x7ffe67f8feb4,244547468,0,0x0,8
tick,0x7ffe67f8feb4,244563186,0,0x0,8
tick,0x7ffe67f8feb4,244579229,0,0x0,8
tick,0x7ffe67f8feb4,244594447,0,0x0,8
tick,0x7ffe67f8feb4,244609576,0,0x0,8
tick,0x7ffe67f8feb4,244625584,0,0x0,8
tick,0x7ffe67f8feb4,244640994,0,0x0,8
tick,0x7ffe67f8feb4,244657014,0,0x0,8
tick,0x7ffe67f8feb4,244673011,0,0x0,8
tick,0x7ffe67f8feb4,244688634,0,0x0,8
tick,0x7ffe67f8feb4,244703448,0,0x0,8
tick,0x7ffe67f8feb4,244718965,0,0x0,8
tick,0x7ffe67f8feb4,244734454,0,0x0,8
tick,0x7ffe67f8feb4,244750352,0,0x0,8
tick,0x7ffe67f8feb4,244766135,0,0x0,8
tick,0x7ffe67f8feb4,244782152,0,0x0,8
tick,0x7ffe67f8feb4,244797174,0,0x0,8
tick,0x7ffe67f8feb4,244813201,0,0x0,8
tick,0x7ffe67f8feb4,244828241,0,0x0,8
tick,0x7ffe67f8feb4,244844248,0,0x0,8
tick,0x7ffe67f8feb4,244860381,0,0x0,8
tick,0x7ffe67f8feb4,244876284,0,0x0,8
tick,0x7ffe67f8feb4,244892147,0,0x0,8
tick,0x7ffe67f8feb4,244908477,0,0x0,8
tick,0x7ffe67f8feb4,244924470,0,0x0,8
tick,0x7ffe67f8feb4,244940401,0,0x0,8
tick,0x7ffe67f8feb4,244955498,0,0x0,8
tick,0x7ffe67f8feb4,244970704,0,0x0,8
tick,0x7ffe67f8feb4,244986149,0,0x0,8
tick,0x7ffe67f8feb4,245000871,0,0x0,8
tick,0x7ffe67f8feb4,245016401,0,0x0,8
tick,0x7ffe67f8feb4,245031722,0,0x0,8
tick,0x7ffe67f8feb4,245047658,0,0x0,8
tick,0x7ffe67f8feb4,245062950,0,0x0,8
tick,0x7ffe67f8feb4,245078429,0,0x0,8
tick,0x7ffe67f8feb4,245093780,0,0x0,8
tick,0x7ffe67f8feb4,245109149,0,0x0,8
tick,0x7ffe67f8feb4,245125761,0,0x0,8
tick,0x7ffe67f8feb4,245140956,0,0x0,8
tick,0x7ffe67f8feb4,245156947,0,0x0,8
tick,0x7ffe67f8feb4,245173152,0,0x0,8
tick,0x7ffe67f8feb4,245188691,0,0x0,8
tick,0x7ffe67f8feb4,245204208,0,0x0,8
tick,0x7ffe67f8feb4,245219363,0,0x0,8
tick,0x7ffe67f8feb4,245234652,0,0x0,8
tick,0x7ffe67f8feb4,245249932,0,0x0,8
tick,0x7ffe67f8feb4,245265336,0,0x0,8
tick,0x7ffe67f8feb4,245280968,0,0x0,8
tick,0x7ffe67f8feb4,245297156,0,0x0,8
tick,0x7ffe67f8feb4,245312731,0,0x0,8
tick,0x7ffe67f8feb4,245328144,0,0x0,8
tick,0x7ffe67f8feb4,245343254,0,0x0,8
tick,0x7ffe67f8feb4,245358630,0,0x0,8
tick,0x7ffe67f8feb4,245374299,0,0x0,8
tick,0x7ffe67f8feb4,245389958,0,0x0,8
tick,0x7ffe67f8feb4,245405576,0,0x0,8
tick,0x7ffe67f8feb4,245421534,0,0x0,8
tick,0x7ffe67f8feb4,245437495,0,0x0,8
tick,0x7ffe67f8feb4,245453552,0,0x0,8
tick,0x7ffe67f8feb4,245469559,0,0x0,8
tick,0x7ffe67f8feb4,245485483,0,0x0,8
tick,0x7ffe67f8feb4,245501379,0,0x0,8
tick,0x7ffe67f8feb4,245517415,0,0x0,8
tick,0x7ffe67f8feb4,245533022,0,0x0,8
tick,0x7ffe67f8feb4,245548175,0,0x0,8
tick,0x7ffe67f8feb4,245564050,0,0x0,8
tick,0x7ffe67f8feb4,245579278,0,0x0,8
tick,0x7ffe67f8feb4,245595257,0,0x0,8
tick,0x7ffe67f8feb4,245610727,0,0x0,8
tick,0x7ffe67f8feb4,245626786,0,0x0,8
tick,0x7ffe67f8feb4,245642888,0,0x0,8
tick,0x7ffe67f8feb4,245658892,0,0x0,8
tick,0x7ffe67f8feb4,245675074,0,0x0,8
tick,0x7ffe67f8feb4,245690529,0,0x0,8
tick,0x7ffe67f8feb4,245706211,0,0x0,8
tick,0x7ffe67f8feb4,245721640,0,0x0,8
tick,0x7ffe67f8feb4,245737288,0,0x0,8
tick,0x7ffe67f8feb4,245753160,0,0x0,8
tick,0x7ffe67f8feb4,245769144,0,0x0,8
tick,0x7ffe67f8feb4,245784518,0,0x0,8
tick,0x7ffe67f8feb4,245800192,0,0x0,8
tick,0x7ffe67f8feb4,245816182,0,0x0,8
tick,0x7ffe67f8feb4,245832173,0,0x0,8
tick,0x7ffe67f8feb4,245848189,0,0x0,8
tick,0x7ffe67f8feb4,245864193,0,0x0,8
tick,0x7ffe67f8feb4,245880196,0,0x0,8
tick,0x7ffe67f8feb4,245896178,0,0x0,8
tick,0x7ffe67f8feb4,245911323,0,0x0,8
tick,0x7ffe67f8feb4,245926656,0,0x0,8
tick,0x7ffe67f8feb4,245942206,0,0x0,8
tick,0x7ffe67f8feb4,245958221,0,0x0,8
tick,0x7ffe67f8feb4,245974292,0,0x0,8
tick,0x7ffe67f8feb4,245990649,0,0x0,8
tick,0x7ffe67f8feb4,246005552,0,0x0,8
tick,0x7ffe67f8feb4,246021249,0,0x0,8
tick,0x7ffe67f8feb4,246036589,0,0x0,8
tick,0x7ffe67f8feb4,246052175,0,0x0,8
tick,0x7ffe67f8feb4,246067547,0,0x0,8
tick,0x7ffe67f8feb4,246083206,0,0x0,8
tick,0x7ffe67f8feb4,246098555,0,0x0,8
tick,0x7ffe67f8feb4,246114522,0,0x0,8
tick,0x7ffe67f8feb4,246130078,0,0x0,8
tick,0x7ffe67f8feb4,246145523,0,0x0,8
tick,0x7ffe67f8feb4,246161540,0,0x0,8
tick,0x7ffe67f8feb4,246177576,0,0x0,8
tick,0x7ffe67f8feb4,246193543,0,0x0,8
tick,0x7ffe67f8feb4,246208608,0,0x0,8
tick,0x7ffe67f8feb4,246225050,0,0x0,8
tick,0x7ffe67f8feb4,246240703,0,0x0,8
tick,0x7ffe67f8feb4,246255515,0,0x0,8
tick,0x7ffe67f8feb4,246271574,0,0x0,8
tick,0x7ffe67f8feb4,246287544,0,0x0,8
tick,0x7ffe67f8feb4,246303545,0,0x0,8
tick,0x7ffe67f8feb4,246319565,0,0x0,8
tick,0x7ffe67f8feb4,246335527,0,0x0,8
tick,0x7ffe67f8feb4,246351161,0,0x0,8
tick,0x7ffe67f8feb4,246366565,0,0x0,8
tick,0x7ffe67f8feb4,246381846,0,0x0,8
tick,0x7ffe67f8feb4,246397566,0,0x0,8
tick,0x7ffe67f8feb4,246413217,0,0x0,8
tick,0x7ffe67f8feb4,246428549,0,0x0,8
tick,0x7ffe67f8feb4,246444556,0,0x0,8
tick,0x7ffe67f8feb4,246460467,0,0x0,8
tick,0x7ffe67f8feb4,246475600,0,0x0,8
tick,0x7ffe67f8feb4,246491582,0,0x0,8
tick,0x7ffe67f8feb4,246507730,0,0x0,8
tick,0x7ffe67f8feb4,246523615,0,0x0,8
tick,0x7ffe67f8feb4,246539574,0,0x0,8
tick,0x7ffe67f8feb4,246555537,0,0x0,8
tick,0x7ffe67f8feb4,246571539,0,0x0,8
tick,0x7ffe67f8feb4,246587581,0,0x0,8
tick,0x7ffe67f8feb4,246603191,0,0x0,8
tick,0x7ffe67f8feb4,246618577,0,0x0,8
tick,0x7ffe67f8feb4,246634519,0,0x0,8
tick,0x7ffe67f8feb4,246650565,0,0x0,8
tick,0x7ffe67f8feb4,246665583,0,0x0,8
tick,0x7ffe67f8feb4,246680566,0,0x0,8
tick,0x7ffe67f8feb4,246696526,0,0x0,8
tick,0x7ffe67f8feb4,246711852,0,0x0,8
tick,0x7ffe67f8feb4,246727572,0,0x0,8
tick,0x7ffe67f8feb4,246743555,0,0x0,8
tick,0x7ffe67f8feb4,246759693,0,0x0,8
tick,0x7ffe67f8feb4,246786713,0,0x0,8
tick,0x7ffe67f8feb4,246793638,0,0x0,8
tick,0x7ffe67f8feb4,246807831,0,0x0,8
tick,0x7ffe67f8feb4,246823377,0,0x0,8
tick,0x7ffe67f8feb4,246839374,0,0x0,8
tick,0x7ffe67f8feb4,246855352,0,0x0,8
tick,0x7ffe67f8feb4,246871449,0,0x0,8
tick,0x7ffe67f8feb4,246887436,0,0x0,8
tick,0x7ffe67f8feb4,246903375,0,0x0,8
tick,0x7ffe67f8feb4,246919370,0,0x0,8
tick,0x7ffe67f8feb4,246934498,0,0x0,8
tick,0x7ffe67f8feb4,246950517,0,0x0,8
tick,0x7ffe67f8feb4,246965659,0,0x0,8
tick,0x7ffe67f8feb4,246980874,0,0x0,8
tick,0x7ffe67f8feb4,246996307,0,0x0,8
tick,0x7ffe67f8feb4,247012128,0,0x0,8
tick,0x7ffe67f8feb4,247027651,0,0x0,8
tick,0x7ffe67f8feb4,247043642,0,0x0,8
tick,0x7ffe67f8feb4,247059633,0,0x0,8
tick,0x7ffe67f8feb4,247075577,0,0x0,8
tick,0x7ffe67f8feb4,247089876,0,0x0,8
tick,0x7ffe67f8feb4,247105549,0,0x0,8
tick,0x7ffe67f8feb4,247121583,0,0x0,8
tick,0x7ffe67f8feb4,247137590,0,0x0,8
tick,0x7ffe67f8feb4,247152706,0,0x0,8
tick,0x7ffe67f8feb4,247168635,0,0x0,8
tick,0x7ffe67f8feb4,247184529,0,0x0,8
tick,0x7ffe67f8feb4,247199831,0,0x0,8
tick,0x7ffe67f8feb4,247215567,0,0x0,8
tick,0x7ffe67f8feb4,247230538,0,0x0,8
tick,0x7ffe67f8feb4,247245566,0,0x0,8
tick,0x7ffe67f8feb4,247261703,0,0x0,8
tick,0x7ffe67f8feb4,247277035,0,0x0,8
tick,0x7ffe67f8feb4,247292977,0,0x0,8
tick,0x7ffe67f8feb4,247308932,0,0x0,8
tick,0x7ffe67f8feb4,247324515,0,0x0,8
tick,0x7ffe67f8feb4,247339940,0,0x0,8
tick,0x7ffe67f8feb4,247355537,0,0x0,8
tick,0x7ffe67f8feb4,247371550,0,0x0,8
tick,0x7ffe67f8feb4,247387605,0,0x0,8
tick,0x7ffe67f8feb4,247402629,0,0x0,8
tick,0x7ffe67f8feb4,247418725,0,0x0,8
tick,0x7ffe67f8feb4,247434559,0,0x0,8
tick,0x7ffe67f8feb4,247449816,0,0x0,8
tick,0x7ffe67f8feb4,247465583,0,0x0,8
tick,0x7ffe67f8feb4,247480866,0,0x0,8
tick,0x7ffe67f8feb4,247495941,0,0x0,8
tick,0x7ffe67f8feb4,247511254,0,0x0,8
tick,0x7ffe67f8feb4,247526281,0,0x0,8
tick,0x7ffe67f8feb4,247541754,0,0x0,8
tick,0x7ffe67f8feb4,247557471,0,0x0,8
tick,0x7ffe67f8feb4,247572748,0,0x0,8
tick,0x7ffe67f8feb4,247587927,0,0x0,8
tick,0x7ffe67f8feb4,247603566,0,0x0,8
tick,0x7ffe67f8feb4,247618621,0,0x0,8
tick,0x7ffe67f8feb4,247633997,0,0x0,8
tick,0x7ffe67f8feb4,247650002,0,0x0,8
tick,0x7ffe67f8feb4,247665605,0,0x0,8
tick,0x7ffe67f8feb4,247681346,0,0x0,8
tick,0x7ffe67f8feb4,247696899,0,0x0,8
tick,0x7ffe67f8feb4,247712710,0,0x0,8
tick,0x7ffe67f8feb4,247728715,0,0x0,8
tick,0x7ffe67f8feb4,247744765,0,0x0,8
tick,0x7ffe67f8feb4,247760736,0,0x0,8
tick,0x7ffe67f8feb4,247776338,0,0x0,8
tick,0x7ffe67f8feb4,247792156,0,0x0,8
tick,0x7ffe67f8feb4,247807280,0,0x0,8
tick,0x7ffe67f8feb4,247822591,0,0x0,8
tick,0x7ffe67f8feb4,247838586,0,0x0,8
tick,0x7ffe67f8feb4,247854622,0,0x0,8
tick,0x7ffe67f8feb4,247870612,0,0x0,8
tick,0x7ffe67f8feb4,247886587,0,0x0,8
tick,0x7ffe67f8feb4,247902677,0,0x0,8
tick,0x7ffe67f8feb4,247918592,0,0x0,8
tick,0x7ffe67f8feb4,247934609,0,0x0,8
tick,0x7ffe67f8feb4,247950605,0,0x0,8
tick,0x7ffe67f8feb4,247966725,0,0x0,8
tick,0x7ffe67f8feb4,247982307,0,0x0,8
tick,0x7ffe67f8feb4,247998317,0,0x0,8
tick,0x7ffe67f8feb4,248013575,0,0x0,8
tick,0x7ffe67f8feb4,248029348,0,0x0,8
tick,0x7ffe67f8feb4,248045295,0,0x0,8
tick,0x7ffe67f8feb4,248061318,0,0x0,8
tick,0x7ffe67f8feb4,248077321,0,0x0,8
tick,0x7ffe67f8feb4,248093324,0,0x0,8
tick,0x7ffe67f8feb4,248109323,0,0x0,8
tick,0x7ffe67f8feb4,248124547,0,0x0,8
tick,0x7ffe67f8feb4,248140127,0,0x0,8
tick,0x7ffe67f8feb4,248155540,0,0x0,8
tick,0x7ffe67f8feb4,248171365,0,0x0,8
tick,0x7ffe67f8feb4,248187351,0,0x0,8
tick,0x7ffe67f8feb4,248203355,0,0x0,8
tick,0x7ffe67f8feb4,248219321,0,0x0,8
tick,0x7ffe67f8feb4,248235404,0,0x0,8
tick,0x7ffe67f8feb4,248251445,0,0x0,8
tick,0x7ffe67f8feb4,248267314,0,0x0,8
tick,0x7ffe67f8feb4,248283302,0,0x0,8
tick,0x7ffe67f8feb4,248299456,0,0x0,8
tick,0x7ffe67f8feb4,248315334,0,0x0,8
tick,0x7ffe67f8feb4,248331307,0,0x0,8
tick,0x7ffe67f8feb4,248346324,0,0x0,8
tick,0x7ffe67f8feb4,248362309,0,0x0,8
tick,0x7ffe67f8feb4,248378328,0,0x0,8
tick,0x7ffe67f8feb4,248394353,0,0x0,8
tick,0x7ffe67f8feb4,248410312,0,0x0,8
tick,0x7ffe67f8feb4,248426342,0,0x0,8
tick,0x7ffe67f8feb4,248442353,0,0x0,8
tick,0x7ffe67f8feb4,248457381,0,0x0,8
tick,0x7ffe67f8feb4,248473347,0,0x0,8
tick,0x7ffe67f8feb4,248489347,0,0x0,8
tick,0x7ffe67f8feb4,248504567,0,0x0,8
tick,0x7ffe67f8feb4,248520591,0,0x0,8
tick,0x7ffe67f8feb4,248536682,0,0x0,8
tick,0x7ffe67f8feb4,248552385,0,0x0,8
tick,0x7ffe67f8feb4,248568367,0,0x0,8
tick,0x7ffe67f8feb4,248583570,0,0x0,8
tick,0x7ffe67f8feb4,248599386,0,0x0,8
tick,0x7ffe67f8feb4,248614547,0,0x0,8
tick,0x7ffe67f8feb4,248630411,0,0x0,8
tick,0x7ffe67f8feb4,248645682,0,0x0,8
tick,0x7ffe67f8feb4,248661420,0,0x0,8
tick,0x7ffe67f8feb4,248677461,0,0x0,8
tick,0x7ffe67f8feb4,248692663,0,0x0,8
tick,0x7ffe67f8feb4,248707427,0,0x0,8
tick,0x7ffe67f8feb4,248723510,0,0x0,8
tick,0x7ffe67f8feb4,248739419,0,0x0,8
tick,0x7ffe67f8feb4,248754567,0,0x0,8
tick,0x7ffe67f8feb4,248769554,0,0x0,8
tick,0x7ffe67f8feb4,248784774,0,0x0,8
tick,0x7ffe67f8feb4,248800637,0,0x0,8
tick,0x7ffe67f8feb4,248816694,0,0x0,8
tick,0x7ffe67f8feb4,248832491,0,0x0,8
tick,0x7ffe67f8feb4,248848453,0,0x0,8
tick,0x7ffe67f8feb4,248864452,0,0x0,8
tick,0x7ffe67f8feb4,248880456,0,0x0,8
tick,0x7ffe67f8feb4,248896522,0,0x0,8
tick,0x7ffe67f8feb4,248913091,0,0x0,8
tick,0x7ffe67f8feb4,248928479,0,0x0,8
tick,0x7ffe67f8feb4,248944447,0,0x0,8
tick,0x7ffe67f8feb4,248960895,0,0x0,8
tick,0x7ffe67f8feb4,248975476,0,0x0,8
tick,0x7ffe67f8feb4,248991435,0,0x0,8
tick,0x7ffe67f8feb4,249007532,0,0x0,8
tick,0x7ffe67f8feb4,249023475,0,0x0,8
tick,0x7ffe67f8feb4,249039466,0,0x0,8
tick,0x7ffe67f8feb4,249055653,0,0x0,8
tick,0x7ffe67f8feb4,249070604,0,0x0,8
tick,0x7ffe67f8feb4,249086558,0,0x0,8
tick,0x7ffe67f8feb4,249101742,0,0x0,8
tick,0x7ffe67f8feb4,249117485,0,0x0,8
tick,0x7ffe67f8feb4,249133524,0,0x0,8
tick,0x7ffe67f8feb4,249149481,0,0x0,8
tick,0x7ffe67f8feb4,249165464,0,0x0,8
tick,0x7ffe67f8feb4,249181342,0,0x0,8
tick,0x7ffe67f8feb4,249197404,0,0x0,8
tick,0x7ffe67f8feb4,249212600,0,0x0,8
tick,0x7ffe67f8feb4,249228531,0,0x0,8
tick,0x7ffe67f8feb4,249244390,0,0x0,8
tick,0x7ffe67f8feb4,249260558,0,0x0,8
tick,0x7ffe67f8feb4,249276381,0,0x0,8
tick,0x7ffe67f8feb4,249292386,0,0x0,8
tick,0x7ffe67f8feb4,249308424,0,0x0,8
tick,0x7ffe67f8feb4,249324487,0,0x0,8
tick,0x7ffe67f8feb4,249340495,0,0x0,8
tick,0x7ffe67f8feb4,249356542,0,0x0,8
tick,0x7ffe67f8feb4,249372488,0,0x0,8
tick,0x7ffe67f8feb4,249388510,0,0x0,8
tick,0x7ffe67f8feb4,249404627,0,0x0,8
tick,0x7ffe67f8feb4,249420294,0,0x0,8
tick,0x7ffe67f8feb4,249435563,0,0x0,8
tick,0x7ffe67f8feb4,249451519,0,0x0,8
tick,0x7ffe67f8feb4,249467521,0,0x0,8
tick,0x7ffe67f8feb4,249483513,0,0x0,8
tick,0x7ffe67f8feb4,249498569,0,0x0,8
tick,0x7ffe67f8feb4,249514534,0,0x0,8
tick,0x7ffe67f8feb4,249530640,0,0x0,8
tick,0x7ffe67f8feb4,249546562,0,0x0,8
tick,0x7ffe67f8feb4,249562542,0,0x0,8
tick,0x7ffe67f8feb4,249578960,0,0x0,8
tick,0x7ffe67f8feb4,249594516,0,0x0,8
tick,0x7ffe67f8feb4,249610665,0,0x0,8
tick,0x7ffe67f8feb4,249625771,0,0x0,8
tick,0x7ffe67f8feb4,249641335,0,0x0,8
tick,0x7ffe67f8feb4,249656542,0,0x0,8
tick,0x7ffe67f8feb4,249671669,0,0x0,8
tick,0x7ffe67f8feb4,249687575,0,0x0,8
tick,0x7ffe67f8feb4,249703043,0,0x0,8
tick,0x7ffe67f8feb4,249718588,0,0x0,8
tick,0x7ffe67f8feb4,249734535,0,0x0,8
tick,0x7ffe67f8feb4,249749984,0,0x0,8
tick,0x7ffe67f8feb4,249765267,0,0x0,8
tick,0x7ffe67f8feb4,249780614,0,0x0,8
tick,0x7ffe67f8feb4,249796544,0,0x0,8
tick,0x7ffe67f8feb4,249811566,0,0x0,8
tick,0x7ffe67f8feb4,249827549,0,0x0,8
tick,0x7ffe67f8feb4,249842971,0,0x0,8
tick,0x7ffe67f8feb4,249858961,0,0x0,8
tick,0x7ffe67f8feb4,249874998,0,0x0,8
tick,0x7ffe67f8feb4,249890977,0,0x0,8
tick,0x7ffe67f8feb4,249906035,0,0x0,8
tick,0x7ffe67f8feb4,249921958,0,0x0,8
tick,0x7ffe67f8feb4,249938039,0,0x0,8
tick,0x7ffe67f8feb4,249953981,0,0x0,8
tick,0x7ffe67f8feb4,249969974,0,0x0,8
tick,0x7ffe67f8feb4,249985326,0,0x0,8
tick,0x7ffe67f8feb4,250000550,0,0x0,8
tick,0x7ffe67f8feb4,250016612,0,0x0,8
tick,0x7ffe67f8feb4,250032442,0,0x0,8
tick,0x7ffe67f8feb4,250047775,0,0x0,8
tick,0x7ffe67f8feb4,250063581,0,0x0,8
tick,0x7ffe67f8feb4,250079564,0,0x0,8
tick,0x7ffe67f8feb4,250096334,0,0x0,8
tick,0x7ffe67f8feb4,250110539,0,0x0,8
tick,0x7ffe67f8feb4,250125699,0,0x0,8
tick,0x7ffe67f8feb4,250141706,0,0x0,8
tick,0x7ffe67f8feb4,250168278,0,0x0,8
tick,0x7ffe67f8feb4,250173703,0,0x0,8
tick,0x7ffe67f8feb4,250189886,0,0x0,8
tick,0x7ffe67f8feb4,250208606,0,0x0,8
tick,0x7ffe67f8feb4,250221805,0,0x0,8
tick,0x7ffe67f8feb4,250237841,0,0x0,8
tick,0x7ffe67f8feb4,250253159,0,0x0,8
tick,0x7ffe67f8feb4,250269203,0,0x0,8
tick,0x7ffe67f8feb4,250284528,0,0x0,8
tick,0x7ffe67f8feb4,250300208,0,0x0,8
tick,0x7ffe67f8feb4,250315625,0,0x0,8
tick,0x7ffe67f8feb4,250331842,0,0x0,8
tick,0x7ffe67f8feb4,250347674,0,0x0,8
tick,0x7ffe67f8feb4,250363662,0,0x0,8
tick,0x7ffe67f8feb4,250379671,0,0x0,8
tick,0x7ffe67f8feb4,250395858,0,0x0,8
tick,0x7ffe67f8feb4,250410625,0,0x0,8
tick,0x7ffe67f8feb4,250426223,0,0x0,8
tick,0x7ffe67f8feb4,250441679,0,0x0,8
tick,0x7ffe67f8feb4,250457152,0,0x0,8
tick,0x7ffe67f8feb4,250472671,0,0x0,8
tick,0x7ffe67f8feb4,250487637,0,0x0,8
tick,0x7ffe67f8feb4,250502771,0,0x0,8
tick,0x7ffe67f8feb4,250518540,0,0x0,8
tick,0x7ffe67f8feb4,250534522,0,0x0,8
tick,0x7ffe67f8feb4,250550027,0,0x0,8
tick,0x7ffe67f8feb4,250565773,0,0x0,8
tick,0x7ffe67f8feb4,250581706,0,0x0,8
tick,0x7ffe67f8feb4,250597533,0,0x0,8
tick,0x7ffe67f8feb4,250612756,0,0x0,8
tick,0x7ffe67f8feb4,250628734,0,0x0,8
tick,0x7ffe67f8feb4,250644518,0,0x0,8
tick,0x7ffe67f8feb4,250659684,0,0x0,8
tick,0x7ffe67f8feb4,250675654,0,0x0,8
tick,0x7ffe67f8feb4,250691668,0,0x0,8
tick,0x7ffe67f8feb4,250707665,0,0x0,8
tick,0x7ffe67f8feb4,250722854,0,0x0,8
tick,0x7ffe67f8feb4,250738824,0,0x0,8
tick,0x7ffe67f8feb4,250754548,0,0x0,8
tick,0x7ffe67f8feb4,250769830,0,0x0,8
tick,0x7ffe67f8feb4,250785499,0,0x0,8
tick,0x7ffe67f8feb4,250801140,0,0x0,8
tick,0x7ffe67f8feb4,250816130,0,0x0,8
tick,0x7ffe67f8feb4,250832158,0,0x0,8
tick,0x7ffe67f8feb4,250847674,0,0x0,8
tick,0x7ffe67f8feb4,250863575,0,0x0,8
tick,0x7ffe67f8feb4,250879659,0,0x0,8
tick,0x7ffe67f8feb4,250895562,0,0x0,8
tick,0x7ffe67f8feb4,250911859,0,0x0,8
tick,0x7ffe67f8feb4,250926535,0,0x0,8
tick,0x7ffe67f8feb4,250942457,0,0x0,8
tick,0x7ffe67f8feb4,250958469,0,0x0,8
tick,0x7ffe67f8feb4,250973478,0,0x0,8
tick,0x7ffe67f8feb4,250988498,0,0x0,8
tick,0x7ffe67f8feb4,251004517,0,0x0,8
tick,0x7ffe67f8feb4,251019557,0,0x0,8
tick,0x7ffe67f8feb4,251034711,0,0x0,8
tick,0x7ffe67f8feb4,251050198,0,0x0,8
tick,0x7ffe67f8feb4,251065562,0,0x0,8
tick,0x7ffe67f8feb4,251080790,0,0x0,8
tick,0x7ffe67f8feb4,251096588,0,0x0,8
tick,0x7ffe67f8feb4,251112636,0,0x0,8
tick,0x7ffe67f8feb4,251128774,0,0x0,8
tick,0x7ffe67f8feb4,251144514,0,0x0,8
tick,0x7ffe67f8feb4,251160525,0,0x0,8
tick,0x7ffe67f8feb4,251176570,0,0x0,8
tick,0x7ffe67f8feb4,251191579,0,0x0,8
tick,0x7ffe67f8feb4,251207521,0,0x0,8
tick,0x7ffe67f8feb4,251223529,0,0x0,8
tick,0x7ffe67f8feb4,251238856,0,0x0,8
tick,0x7ffe67f8feb4,251254510,0,0x0,8
tick,0x7ffe67f8feb4,251270540,0,0x0,8
tick,0x7ffe67f8feb4,251285664,0,0x0,8
tick,0x7ffe67f8feb4,251301528,0,0x0,8
tick,0x7ffe67f8feb4,251317618,0,0x0,8
tick,0x7ffe67f8feb4,251332973,0,0x0,8
tick,0x7ffe67f8feb4,251348678,0,0x0,8
tick,0x7ffe67f8feb4,251364832,0,0x0,8
tick,0x7ffe67f8feb4,251380768,0,0x0,8
tick,0x7ffe67f8feb4,251396781,0,0x0,8
tick,0x7ffe67f8feb4,251412798,0,0x0,8
tick,0x7ffe67f8feb4,251428041,0,0x0,8
tick,0x7ffe67f8feb4,251443644,0,0x0,8
tick,0x7ffe67f8feb4,251459178,0,0x0,8
tick,0x7ffe67f8feb4,251475078,0,0x0,8
tick,0x7ffe67f8feb4,251490768,0,0x0,8
tick,0x7ffe67f8feb4,251505950,0,0x0,8
tick,0x7ffe67f8feb4,251521843,0,0x0,8
tick,0x7ffe67f8feb4,251536675,0,0x0,8
tick,0x7ffe67f8feb4,251552930,0,0x0,8
tick,0x7ffe67f8feb4,251568905,0,0x0,8
tick,0x7ffe67f8feb4,251584589,0,0x0,8
tick,0x7ffe67f8feb4,251599990,0,0x0,8
tick,0x7ffe67f8feb4,251615812,0,0x0,8
tick,0x7ffe67f8feb4,251631652,0,0x0,8
tick,0x7ffe67f8feb4,251647019,0,0x0,8
tick,0x7ffe67f8feb4,251662428,0,0x0,8
tick,0x7ffe67f8feb4,251678252,0,0x0,8
tick,0x7ffe67f8feb4,251693726,0,0x0,8
tick,0x7ffe67f8feb4,251709403,0,0x0,8
tick,0x7ffe67f8feb4,251724670,0,0x0,8
tick,0x7ffe67f8feb4,251739567,0,0x0,8
tick,0x7ffe67f8feb4,251754941,0,0x0,8
tick,0x7ffe67f8feb4,251770537,0,0x0,8
tick,0x7ffe67f8feb4,251785707,0,0x0,8
tick,0x7ffe67f8feb4,251801016,0,0x0,8
tick,0x7ffe67f8feb4,251816814,0,0x0,8
tick,0x7ffe67f8feb4,251833075,0,0x0,8
tick,0x7ffe67f8feb4,251848033,0,0x0,8
tick,0x7ffe67f8feb4,251863915,0,0x0,8
tick,0x7ffe67f8feb4,251879980,0,0x0,8
tick,0x7ffe67f8feb4,251895939,0,0x0,8
tick,0x7ffe67f8feb4,251910924,0,0x0,8
tick,0x7ffe67f8feb4,251926675,0,0x0,8
tick,0x7ffe67f8feb4,251942253,0,0x0,8
tick,0x7ffe67f8feb4,251957222,0,0x0,8
tick,0x7ffe67f8feb4,251972507,0,0x0,8
tick,0x7ffe67f8feb4,251987401,0,0x0,8
tick,0x7ffe67f8feb4,252003464,0,0x0,8
tick,0x7ffe67f8feb4,252019678,0,0x0,8
tick,0x7ffe67f8feb4,252034637,0,0x0,8
tick,0x7ffe67f8feb4,252049527,0,0x0,8
tick,0x7ffe67f8feb4,252065140,0,0x0,8
tick,0x7ffe67f8feb4,252080116,0,0x0,8
tick,0x7ffe67f8feb4,252095765,0,0x0,8
tick,0x7ffe67f8feb4,252110938,0,0x0,8
tick,0x7ffe67f8feb4,252125884,0,0x0,8
tick,0x7ffe67f8feb4,252141598,0,0x0,8
tick,0x7ffe67f8feb4,252156992,0,0x0,8
tick,0x7ffe67f8feb4,252172191,0,0x0,8
tick,0x7ffe67f8feb4,252187921,0,0x0,8
tick,0x7ffe67f8feb4,252203451,0,0x0,8
tick,0x7ffe67f8feb4,252218993,0,0x0,8
tick,0x7ffe67f8feb4,252234776,0,0x0,8
tick,0x7ffe67f8feb4,252250057,0,0x0,8
tick,0x7ffe67f8feb4,252265570,0,0x0,8
tick,0x7ffe67f8feb4,252281621,0,0x0,8
tick,0x7ffe67f8feb4,252297666,0,0x0,8
tick,0x7ffe67f8feb4,252312959,0,0x0,8
tick,0x7ffe67f8feb4,252328744,0,0x0,8
tick,0x7ffe67f8feb4,252344716,0,0x0,8
tick,0x7ffe67f8feb4,252360326,0,0x0,8
tick,0x7ffe67f8feb4,252375664,0,0x0,8
tick,0x7ffe67f8feb4,252390609,0,0x0,8
tick,0x7ffe67f8feb4,252405748,0,0x0,8
tick,0x7ffe67f8feb4,252421134,0,0x0,8
tick,0x7ffe67f8feb4,252436748,0,0x0,8
tick,0x7ffe67f8feb4,252451874,0,0x0,8
tick,0x7ffe67f8feb4,252467841,0,0x0,8
tick,0x7ffe67f8feb4,252483523,0,0x0,8
tick,0x7ffe67f8feb4,252498877,0,0x0,8
tick,0x7ffe67f8feb4,252515070,0,0x0,8
tick,0x7ffe67f8feb4,252530718,0,0x0,8
tick,0x7ffe67f8feb4,252545713,0,0x0,8
tick,0x7ffe67f8feb4,252560936,0,0x0,8
tick,0x7ffe67f8feb4,252576792,0,0x0,8
tick,0x7ffe67f8feb4,252592283,0,0x0,8
tick,0x7ffe67f8feb4,252607950,0,0x0,8
tick,0x7ffe67f8feb4,252623603,0,0x0,8
tick,0x7ffe67f8feb4,252638683,0,0x0,8
tick,0x7ffe67f8feb4,252654021,0,0x0,8
tick,0x7ffe67f8feb4,252669174,0,0x0,8
tick,0x7ffe67f8feb4,252684985,0,0x0,8
tick,0x7ffe67f8feb4,252700171,0,0x0,8
tick,0x7ffe67f8feb4,252715650,0,0x0,8
tick,0x7ffe67f8feb4,252731656,0,0x0,8
tick,0x7ffe67f8feb4,252747400,0,0x0,8
tick,0x7ffe67f8feb4,252762809,0,0x0,8
tick,0x7ffe67f8feb4,252778638,0,0x0,8
tick,0x7ffe67f8feb4,252794065,0,0x0,8
tick,0x7ffe67f8feb4,252809173,0,0x0,8
tick,0x7ffe67f8feb4,252824742,0,0x0,8
tick,0x7ffe67f8feb4,252840205,0,0x0,8
tick,0x7ffe67f8feb4,252856108,0,0x0,8
tick,0x7ffe67f8feb4,252872051,0,0x0,8
tick,0x7ffe67f8feb4,252888027,0,0x0,8
tick,0x7ffe67f8feb4,252904005,0,0x0,8
tick,0x7ffe67f8feb4,252920015,0,0x0,8
tick,0x7ffe67f8feb4,252935612,0,0x0,8
tick,0x7ffe67f8feb4,252951728,0,0x0,8
tick,0x7ffe67f8feb4,252966735,0,0x0,8
tick,0x7ffe67f8feb4,252981937,0,0x0,8
tick,0x7ffe67f8feb4,252997587,0,0x0,8
tick,0x7ffe67f8feb4,253012464,0,0x0,8
tick,0x7ffe67f8feb4,253028339,0,0x0,8
tick,0x7ffe67f8feb4,253044085,0,0x0,8
tick,0x7ffe67f8feb4,253059910,0,0x0,8
tick,0x7ffe67f8feb4,253074894,0,0x0,8
tick,0x7ffe67f8feb4,253090385,0,0x0,8
tick,0x7ffe67f8feb4,253106045,0,0x0,8
tick,0x7ffe67f8feb4,253121578,0,0x0,8
tick,0x7ffe67f8feb4,253136885,0,0x0,8
tick,0x7ffe67f8feb4,253153330,0,0x0,8
tick,0x7ffe67f8feb4,253169499,0,0x0,8
tick,0x7ffe67f8feb4,253184710,0,0x0,8
tick,0x7ffe67f8feb4,253200764,0,0x0,8
tick,0x7ffe67f8feb4,253216282,0,0x0,8
tick,0x7ffe67f8feb4,253232307,0,0x0,8
tick,0x7ffe67f8feb4,253247984,0,0x0,8
tick,0x7ffe67f8feb4,253262683,0,0x0,8
tick,0x7ffe67f8feb4,253278610,0,0x0,8
tick,0x7ffe67f8feb4,253294615,0,0x0,8
tick,0x7ffe67f8feb4,253310618,0,0x0,8
tick,0x7ffe67f8feb4,253326708,0,0x0,8
tick,0x7ffe67f8feb4,253342636,0,0x0,8
tick,0x7ffe67f8feb4,253358248,0,0x0,8
tick,0x7ffe67f8feb4,253373595,0,0x0,8
tick,0x7ffe67f8feb4,253388739,0,0x0,8
tick,0x7ffe67f8feb4,253404666,0,0x0,8
tick,0x7ffe67f8feb4,253419800,0,0x0,8
tick,0x7ffe67f8feb4,253435731,0,0x0,8
tick,0x7ffe67f8feb4,253451026,0,0x0,8
tick,0x7ffe67f8feb4,253466888,0,0x0,8
tick,0x7ffe67f8feb4,253482698,0,0x0,8
tick,0x7ffe67f8feb4,253498119,0,0x0,8
tick,0x7ffe67f8feb4,253513581,0,0x0,8
tick,0x7ffe67f8feb4,253529240,0,0x0,8
tick,0x7ffe67f8feb4,253544687,0,0x0,8
tick,0x7ffe67f8feb4,253560515,0,0x0,8
tick,0x7ffe67f8feb4,253576042,0,0x0,8
tick,0x7ffe67f8feb4,253591714,0,0x0,8
tick,0x7ffe67f8feb4,253607199,0,0x0,8
tick,0x7ffe67f8feb4,253622359,0,0x0,8
tick,0x7ffe67f8feb4,253638276,0,0x0,8
tick,0x7ffe67f8feb4,253653698,0,0x0,8
tick,0x7ffe67f8feb4,253668778,0,0x0,8
tick,0x7ffe67f8feb4,253684721,0,0x0,8
tick,0x7ffe67f8feb4,253700461,0,0x0,8
tick,0x7ffe67f8feb4,253715406,0,0x0,8
tick,0x7ffe67f8feb4,253731296,0,0x0,8
tick,0x7ffe67f8feb4,253746789,0,0x0,8
tick,0x7ffe67f8feb4,253762155,0,0x0,8
tick,0x7ffe67f8feb4,253777856,0,0x0,8
tick,0x7ffe67f8feb4,253793648,0,0x0,8
tick,0x7ffe67f8feb4,253809003,0,0x0,8
tick,0x7ffe67f8feb4,253824727,0,0x0,8
tick,0x7ffe67f8feb4,253839948,0,0x0,8
tick,0x7ffe67f8feb4,253855884,0,0x0,8
tick,0x7ffe67f8feb4,253871921,0,0x0,8
tick,0x7ffe67f8feb4,253887764,0,0x0,8
tick,0x7ffe67f8feb4,253903662,0,0x0,8
tick,0x7ffe67f8feb4,253919649,0,0x0,8
tick,0x7ffe67f8feb4,253935587,0,0x0,8
tick,0x7ffe67f8feb4,253951230,0,0x0,8
tick,0x7ffe67f8feb4,253966684,0,0x0,8
tick,0x7ffe67f8feb4,253981766,0,0x0,8
tick,0x7ffe67f8feb4,253996950,0,0x0,8
tick,0x7ffe67f8feb4,254012378,0,0x0,8
tick,0x7ffe67f8feb4,254027271,0,0x0,8
tick,0x7ffe67f8feb4,254042746,0,0x0,8
tick,0x7ffe67f8feb4,254058582,0,0x0,8
tick,0x7ffe67f8feb4,254074031,0,0x0,8
tick,0x7ffe67f8feb4,254090082,0,0x0,8
tick,0x7ffe67f8feb4,254105686,0,0x0,8
tick,0x7ffe67f8feb4,254121204,0,0x0,8
tick,0x7ffe67f8feb4,254136464,0,0x0,8
tick,0x7ffe67f8feb4,254152055,0,0x0,8
tick,0x7ffe67f8feb4,254167253,0,0x0,8
tick,0x7ffe67f8feb4,254183313,0,0x0,8
tick,0x7ffe67f8feb4,254198599,0,0x0,8
tick,0x7ffe67f8feb4,254213904,0,0x0,8
tick,0x7ffe67f8feb4,254228814,0,0x0,8
tick,0x7ffe67f8feb4,254244759,0,0x0,8
tick,0x7ffe67f8feb4,254260434,0,0x0,8
tick,0x7ffe67f8feb4,254276068,0,0x0,8
tick,0x7ffe67f8feb4,254291548,0,0x0,8
tick,0x7ffe67f8feb4,254307272,0,0x0,8
tick,0x7ffe67f8feb4,254322395,0,0x0,8
tick,0x7ffe67f8feb4,254338496,0,0x0,8
tick,0x7ffe67f8feb4,254353830,0,0x0,8
tick,0x7ffe67f8feb4,254369139,0,0x0,8
tick,0x7ffe67f8feb4,254384719,0,0x0,8
tick,0x7ffe67f8feb4,254400280,0,0x0,8
tick,0x7ffe67f8feb4,254416250,0,0x0,8
tick,0x7ffe67f8feb4,254432097,0,0x0,8
tick,0x7ffe67f8feb4,254447362,0,0x0,8
tick,0x7ffe67f8feb4,254463372,0,0x0,8
tick,0x7ffe67f8feb4,254478985,0,0x0,8
tick,0x7ffe67f8feb4,254494890,0,0x0,8
tick,0x7ffe67f8feb4,254510453,0,0x0,8
tick,0x7ffe67f8feb4,254526110,0,0x0,8
tick,0x7ffe67f8feb4,254542080,0,0x0,8
tick,0x7ffe67f8feb4,254558183,0,0x0,8
tick,0x7ffe67f8feb4,254573729,0,0x0,8
tick,0x7ffe67f8feb4,254589336,0,0x0,8
tick,0x7ffe67f8feb4,254604791,0,0x0,8
tick,0x7ffe67f8feb4,254620580,0,0x0,8
tick,0x7ffe67f8feb4,254636342,0,0x0,8
tick,0x7ffe67f8feb4,254651388,0,0x0,8
tick,0x7ffe67f8feb4,254667478,0,0x0,8
tick,0x7ffe67f8feb4,254683457,0,0x0,8
tick,0x7ffe67f8feb4,254699150,0,0x0,8
tick,0x7ffe67f8feb4,254714784,0,0x0,8
tick,0x7ffe67f8feb4,254730706,0,0x0,8
tick,0x7ffe67f8feb4,254746680,0,0x0,8
tick,0x7ffe67f8feb4,254762709,0,0x0,8
tick,0x7ffe67f8feb4,254778375,0,0x0,8
tick,0x7ffe67f8feb4,254793714,0,0x0,8
tick,0x7ffe67f8feb4,254809736,0,0x0,8
tick,0x7ffe67f8feb4,254824843,0,0x0,8
tick,0x7ffe67f8feb4,254840519,0,0x0,8
tick,0x7ffe67f8feb4,254855631,0,0x0,8
tick,0x7ffe67f8feb4,254870874,0,0x0,8
tick,0x7ffe67f8feb4,254886783,0,0x0,8
tick,0x7ffe67f8feb4,254902784,0,0x0,8
tick,0x7ffe67f8feb4,254918739,0,0x0,8
tick,0x7ffe67f8feb4,254934744,0,0x0,8
tick,0x7ffe67f8feb4,254950778,0,0x0,8
tick,0x7ffe67f8feb4,254966775,0,0x0,8
tick,0x7ffe67f8feb4,254982419,0,0x0,8
tick,0x7ffe67f8feb4,254997833,0,0x0,8
tick,0x7ffe67f8feb4,255013681,0,0x0,8
tick,0x7ffe67f8feb4,255029178,0,0x0,8
tick,0x7ffe67f8feb4,255044936,0,0x0,8
tick,0x7ffe67f8feb4,255060870,0,0x0,8
tick,0x7ffe67f8feb4,255075737,0,0x0,8
tick,0x7ffe67f8feb4,255091795,0,0x0,8
tick,0x7ffe67f8feb4,255107574,0,0x0,8
tick,0x7ffe67f8feb4,255123833,0,0x0,8
tick,0x7ffe67f8feb4,255139529,0,0x0,8
tick,0x7ffe67f8feb4,255154747,0,0x0,8
tick,0x7ffe67f8feb4,255169951,0,0x0,8
tick,0x7ffe67f8feb4,255185765,0,0x0,8
tick,0x7ffe67f8feb4,255200885,0,0x0,8
tick,0x7ffe67f8feb4,255216064,0,0x0,8
tick,0x7ffe67f8feb4,255231083,0,0x0,8
tick,0x7ffe67f8feb4,255246060,0,0x0,8
tick,0x7ffe67f8feb4,255262388,0,0x0,8
tick,0x7ffe67f8feb4,255277512,0,0x0,8
tick,0x7ffe67f8feb4,255292606,0,0x0,8
tick,0x7ffe67f8feb4,255308330,0,0x0,8
tick,0x7ffe67f8feb4,255323904,0,0x0,8
tick,0x7ffe67f8feb4,255339229,0,0x0,8
tick,0x7ffe67f8feb4,255354944,0,0x0,8
tick,0x7ffe67f8feb4,255369844,0,0x0,8
tick,0x7ffe67f8feb4,255385099,0,0x0,8
tick,0x7ffe67f8feb4,255401111,0,0x0,8
tick,0x7ffe67f8feb4,255416666,0,0x0,8
tick,0x7ffe67f8feb4,255432174,0,0x0,8
tick,0x7ffe67f8feb4,255447825,0,0x0,8
tick,0x7ffe67f8feb4,255463199,0,0x0,8
tick,0x7ffe67f8feb4,255478382,0,0x0,8
tick,0x7ffe67f8feb4,255493765,0,0x0,8
tick,0x7ffe67f8feb4,255508831,0,0x0,8
tick,0x7ffe67f8feb4,255524875,0,0x0,8
tick,0x7ffe67f8feb4,255540783,0,0x0,8
tick,0x7ffe67f8feb4,255556737,0,0x0,8
tick,0x7ffe67f8feb4,255572980,0,0x0,8
tick,0x7ffe67f8feb4,255589008,0,0x0,8
tick,0x7ffe67f8feb4,255604742,0,0x0,8
tick,0x7ffe67f8feb4,255619987,0,0x0,8
tick,0x7ffe67f8feb4,255635704,0,0x0,8
tick,0x7ffe67f8feb4,255651701,0,0x0,8
tick,0x7ffe67f8feb4,255667724,0,0x0,8
tick,0x7ffe67f8feb4,255683388,0,0x0,8
tick,0x7ffe67f8feb4,255698959,0,0x0,8
tick,0x7ffe67f8feb4,255715313,0,0x0,8
tick,0x7ffe67f8feb4,255730618,0,0x0,8
tick,0x7ffe67f8feb4,255745782,0,0x0,8
tick,0x7ffe67f8feb4,255762250,0,0x0,8
tick,0x7ffe67f8feb4,255777884,0,0x0,8
tick,0x7ffe67f8feb4,255793797,0,0x0,8
tick,0x7ffe67f8feb4,255809145,0,0x0,8
tick,0x7ffe67f8feb4,255824703,0,0x0,8
tick,0x7ffe67f8feb4,255840541,0,0x0,8
tick,0x7ffe67f8feb4,255855747,0,0x0,8
tick,0x7ffe67f8feb4,255871163,0,0x0,8
tick,0x7ffe67f8feb4,255886262,0,0x0,8
tick,0x7ffe67f8feb4,255902326,0,0x0,8
tick,0x7ffe67f8feb4,255918193,0,0x0,8
tick,0x7ffe67f8feb4,255934192,0,0x0,8
tick,0x7ffe67f8feb4,255950199,0,0x0,8
tick,0x7ffe67f8feb4,255965658,0,0x0,8
tick,0x7ffe67f8feb4,255982167,0,0x0,8
tick,0x7ffe67f8feb4,255997823,0,0x0,8
tick,0x7ffe67f8feb4,256013149,0,0x0,8
tick,0x7ffe67f8feb4,256029094,0,0x0,8
tick,0x7ffe67f8feb4,256045034,0,0x0,8
tick,0x7ffe67f8feb4,256060333,0,0x0,8
tick,0x7ffe67f8feb4,256075669,0,0x0,8
tick,0x7ffe67f8feb4,256091118,0,0x0,8
tick,0x7ffe67f8feb4,256107160,0,0x0,8
tick,0x7ffe67f8feb4,256122219,0,0x0,8
tick,0x7ffe67f8feb4,256137612,0,0x0,8
tick,0x7ffe67f8feb4,256152861,0,0x0,8
tick,0x7ffe67f8feb4,256168922,0,0x0,8
tick,0x7ffe67f8feb4,256184905,0,0x0,8
tick,0x7ffe67f8feb4,256200388,0,0x0,8
tick,0x7ffe67f8feb4,256215762,0,0x0,8
tick,0x7ffe67f8feb4,256231607,0,0x0,8
tick,0x7ffe67f8feb4,256247331,0,0x0,8
tick,0x7ffe67f8feb4,256262927,0,0x0,8
tick,0x7ffe67f8feb4,256278731,0,0x0,8
tick,0x7ffe67f8feb4,256294924,0,0x0,8
tick,0x7ffe67f8feb4,256309947,0,0x0,8
tick,0x7ffe67f8feb4,256325669,0,0x0,8
tick,0x7ffe67f8feb4,256341048,0,0x0,8
tick,0x7ffe67f8feb4,256356001,0,0x0,8
tick,0x7ffe67f8feb4,256370980,0,0x0,8
tick,0x7ffe67f8feb4,256386433,0,0x0,8
tick,0x7ffe67f8feb4,256402321,0,0x0,8
tick,0x7ffe67f8feb4,256418352,0,0x0,8
tick,0x7ffe67f8feb4,256433625,0,0x0,8
tick,0x7ffe67f8feb4,256448794,0,0x0,8
tick,0x7ffe67f8feb4,256464624,0,0x0,8
tick,0x7ffe67f8feb4,256480676,0,0x0,8
tick,0x7ffe67f8feb4,256496628,0,0x0,8
tick,0x7ffe67f8feb4,256512658,0,0x0,8
tick,0x7ffe67f8feb4,256527658,0,0x0,8
tick,0x7ffe67f8feb4,256543634,0,0x0,8
tick,0x7ffe67f8feb4,256559642,0,0x0,8
tick,0x7ffe67f8feb4,256575639,0,0x0,8
tick,0x7ffe67f8feb4,256590627,0,0x0,8
tick,0x7ffe67f8feb4,256606659,0,0x0,8
tick,0x7ffe67f8feb4,256621665,0,0x0,8
tick,0x7ffe67f8feb4,256637648,0,0x0,8
tick,0x7ffe67f8feb4,256653651,0,0x0,8
tick,0x7ffe67f8feb4,256669657,0,0x0,8
tick,0x7ffe67f8feb4,256685544,0,0x0,8
tick,0x7ffe67f8feb4,256701580,0,0x0,8
tick,0x7ffe67f8feb4,256717580,0,0x0,8
tick,0x7ffe67f8feb4,256733561,0,0x0,8
tick,0x7ffe67f8feb4,256749618,0,0x0,8
tick,0x7ffe67f8feb4,256765594,0,0x0,8
tick,0x7ffe67f8feb4,256781607,0,0x0,8
tick,0x7ffe67f8feb4,256796779,0,0x0,8
tick,0x7ffe67f8feb4,256811925,0,0x0,8
tick,0x7ffe67f8feb4,256828034,0,0x0,8
tick,0x7ffe67f8feb4,256843370,0,0x0,8
tick,0x7ffe67f8feb4,256859256,0,0x0,8
tick,0x7ffe67f8feb4,256874969,0,0x0,8
tick,0x7ffe67f8feb4,256890956,0,0x0,8
tick,0x7ffe67f8feb4,256906076,0,0x0,8
tick,0x7ffe67f8feb4,256921998,0,0x0,8
tick,0x7ffe67f8feb4,256937952,0,0x0,8
tick,0x7ffe67f8feb4,256953943,0,0x0,8
tick,0x7ffe67f8feb4,256969737,0,0x0,8
tick,0x7ffe67f8feb4,256985542,0,0x0,8
tick,0x7ffe67f8feb4,257000807,0,0x0,8
tick,0x7ffe67f8feb4,257016857,0,0x0,8
tick,0x7ffe67f8feb4,257033081,0,0x0,8
tick,0x7ffe67f8feb4,257048852,0,0x0,8
tick,0x7ffe67f8feb4,257064838,0,0x0,8
tick,0x7ffe67f8feb4,257079977,0,0x0,8
tick,0x7ffe67f8feb4,257095636,0,0x0,8
tick,0x7ffe67f8feb4,257111023,0,0x0,8
tick,0x7ffe67f8feb4,257126812,0,0x0,8
tick,0x7ffe67f8feb4,257143093,0,0x0,8
tick,0x7ffe67f8feb4,257159128,0,0x0,8
tick,0x7ffe67f8feb4,257174694,0,0x0,8
tick,0x7ffe67f8feb4,257190808,0,0x0,8
tick,0x7ffe67f8feb4,257205909,0,0x0,8
tick,0x7ffe67f8feb4,257221945,0,0x0,8
tick,0x7ffe67f8feb4,257237262,0,0x0,8
tick,0x7ffe67f8feb4,257253013,0,0x0,8
tick,0x7ffe67f8feb4,257268850,0,0x0,8
tick,0x7ffe67f8feb4,257284178,0,0x0,8
tick,0x7ffe67f8feb4,257299168,0,0x0,8
tick,0x7ffe67f8feb4,257314660,0,0x0,8
tick,0x7ffe67f8feb4,257330312,0,0x0,8
tick,0x7ffe67f8feb4,257345482,0,0x0,8
tick,0x7ffe67f8feb4,257360903,0,0x0,8
tick,0x7ffe67f8feb4,257376052,0,0x0,8
tick,0x7ffe67f8feb4,257391846,0,0x0,8
tick,0x7ffe67f8feb4,257407147,0,0x0,8
tick,0x7ffe67f8feb4,257422808,0,0x0,8
tick,0x7ffe67f8feb4,257438064,0,0x0,8
tick,0x7ffe67f8feb4,257454133,0,0x0,8
tick,0x7ffe67f8feb4,257470143,0,0x0,8
tick,0x7ffe67f8feb4,257485656,0,0x0,8
tick,0x7ffe67f8feb4,257501639,0,0x0,8
tick,0x7ffe67f8feb4,257516624,0,0x0,8
tick,0x7ffe67f8feb4,257532063,0,0x0,8
tick,0x7ffe67f8feb4,257548013,0,0x0,8
tick,0x7ffe67f8feb4,257563367,0,0x0,8
tick,0x7ffe67f8feb4,257578344,0,0x0,8
tick,0x7ffe67f8feb4,257593790,0,0x0,8
tick,0x7ffe67f8feb4,257608892,0,0x0,8
tick,0x7ffe67f8feb4,257624788,0,0x0,8
tick,0x7ffe67f8feb4,257640864,0,0x0,8
tick,0x7ffe67f8feb4,257656023,0,0x0,8
tick,0x7ffe67f8feb4,257672062,0,0x0,8
tick,0x7ffe67f8feb4,257687651,0,0x0,8
tick,0x7ffe67f8feb4,257703432,0,0x0,8
tick,0x7ffe67f8feb4,257718992,0,0x0,8
tick,0x7ffe67f8feb4,257735294,0,0x0,8
tick,0x7ffe67f8feb4,257750863,0,0x0,8
tick,0x7ffe67f8feb4,257767185,0,0x0,8
tick,0x7ffe67f8feb4,257782909,0,0x0,8
tick,0x7ffe67f8feb4,257798188,0,0x0,8
tick,0x7ffe67f8feb4,257813385,0,0x0,8
tick,0x7ffe67f8feb4,257829547,0,0x0,8
tick,0x7ffe67f8feb4,257844691,0,0x0,8
tick,0x7ffe67f8feb4,257860007,0,0x0,8
tick,0x7ffe67f8feb4,257875802,0,0x0,8
tick,0x7ffe67f8feb4,257890958,0,0x0,8
tick,0x7ffe67f8feb4,257905944,0,0x0,8
tick,0x7ffe67f8feb4,257921268,0,0x0,8
tick,0x7ffe67f8feb4,257937255,0,0x0,8
tick,0x7ffe67f8feb4,257953234,0,0x0,8
tick,0x7ffe67f8feb4,257969295,0,0x0,8
tick,0x7ffe67f8feb4,257984261,0,0x0,8
tick,0x7ffe67f8feb4,258000666,0,0x0,8
tick,0x7ffe67f8feb4,258015526,0,0x0,8
tick,0x7ffe67f8feb4,258030815,0,0x0,8
tick,0x7ffe67f8feb4,258046757,0,0x0,8
tick,0x7ffe67f8feb4,258062817,0,0x0,8
tick,0x7ffe67f8feb4,258078816,0,0x0,8
tick,0x7ffe67f8feb4,258094802,0,0x0,8
tick,0x7ffe67f8feb4,258110415,0,0x0,8
tick,0x7ffe67f8feb4,258126130,0,0x0,8
tick,0x7ffe67f8feb4,258141908,0,0x0,8
tick,0x7ffe67f8feb4,258157254,0,0x0,8
tick,0x7ffe67f8feb4,258172396,0,0x0,8
tick,0x7ffe67f8feb4,258187031,0,0x0,8
tick,0x7ffe67f8feb4,258202157,0,0x0,8
tick,0x7ffe67f8feb4,258217338,0,0x0,8
tick,0x7ffe67f8feb4,258232809,0,0x0,8
tick,0x7ffe67f8feb4,258249204,0,0x0,8
tick,0x7ffe67f8feb4,258265200,0,0x0,8
tick,0x7ffe67f8feb4,258280913,0,0x0,8
tick,0x7ffe67f8feb4,258297119,0,0x0,8
tick,0x7ffe67f8feb4,258312935,0,0x0,8
tick,0x7ffe67f8feb4,258328645,0,0x0,8
tick,0x7ffe67f8feb4,258344338,0,0x0,8
tick,0x7ffe67f8feb4,258359961,0,0x0,8
tick,0x7ffe67f8feb4,258376148,0,0x0,8
tick,0x7ffe67f8feb4,258391695,0,0x0,8
tick,0x7ffe67f8feb4,258407181,0,0x0,8
tick,0x7ffe67f8feb4,258422820,0,0x0,8
tick,0x7ffe67f8feb4,258438465,0,0x0,8
tick,0x7ffe67f8feb4,258454411,0,0x0,8
tick,0x7ffe67f8feb4,258469954,0,0x0,8
tick,0x7ffe67f8feb4,258486105,0,0x0,8
tick,0x7ffe67f8feb4,258501208,0,0x0,8
tick,0x7ffe67f8feb4,258517472,0,0x0,8
tick,0x7ffe67f8feb4,258532673,0,0x0,8
tick,0x7ffe67f8feb4,258547720,0,0x0,8
tick,0x7ffe67f8feb4,258563038,0,0x0,8
tick,0x7ffe67f8feb4,258577917,0,0x0,8
tick,0x7ffe67f8feb4,258593320,0,0x0,8
tick,0x7ffe67f8feb4,258608384,0,0x0,8
tick,0x7ffe67f8feb4,258624249,0,0x0,8
tick,0x7ffe67f8feb4,258640147,0,0x0,8
tick,0x7ffe67f8feb4,258655370,0,0x0,8
tick,0x7ffe67f8feb4,258671466,0,0x0,8
tick,0x7ffe67f8feb4,258687079,0,0x0,8
tick,0x7ffe67f8feb4,258702971,0,0x0,8
tick,0x7ffe67f8feb4,258718466,0,0x0,8
tick,0x7ffe67f8feb4,258734284,0,0x0,8
tick,0x7ffe67f8feb4,258750182,0,0x0,8
tick,0x7ffe67f8feb4,258765675,0,0x0,8
tick,0x7ffe67f8feb4,258781475,0,0x0,8
tick,0x7ffe67f8feb4,258797222,0,0x0,8
tick,0x7ffe67f8feb4,258813234,0,0x0,8
tick,0x7ffe67f8feb4,258828955,0,0x0,8
tick,0x7ffe67f8feb4,258844934,0,0x0,8
tick,0x7ffe67f8feb4,258860987,0,0x0,8
tick,0x7ffe67f8feb4,258876757,0,0x0,8
tick,0x7ffe67f8feb4,258892564,0,0x0,8
tick,0x7ffe67f8feb4,258908620,0,0x0,8
tick,0x7ffe67f8feb4,258923962,0,0x0,8
tick,0x7ffe67f8feb4,258939952,0,0x0,8
tick,0x7ffe67f8feb4,258955947,0,0x0,8
tick,0x7ffe67f8feb4,258971945,0,0x0,8
tick,0x7ffe67f8feb4,258987920,0,0x0,8
tick,0x7ffe67f8feb4,259003930,0,0x0,8
tick,0x7ffe67f8feb4,259019840,0,0x0,8
tick,0x7ffe67f8feb4,259035267,0,0x0,8
tick,0x7ffe67f8feb4,259050843,0,0x0,8
tick,0x7ffe67f8feb4,259066187,0,0x0,8
tick,0x7ffe67f8feb4,259081702,0,0x0,8
tick,0x7ffe67f8feb4,259097880,0,0x0,8
tick,0x7ffe67f8feb4,259113319,0,0x0,8
tick,0x7ffe67f8feb4,259129333,0,0x0,8
tick,0x7ffe67f8feb4,259144860,0,0x0,8
tick,0x7ffe67f8feb4,259160279,0,0x0,8
tick,0x7ffe67f8feb4,259175450,0,0x0,8
tick,0x7ffe67f8feb4,259191282,0,0x0,8
tick,0x7ffe67f8feb4,259207507,0,0x0,8
tick,0x7ffe67f8feb4,259222284,0,0x0,8
tick,0x7ffe67f8feb4,259238345,0,0x0,8
tick,0x7ffe67f8feb4,259253692,0,0x0,8
tick,0x7ffe67f8feb4,259268839,0,0x0,8
tick,0x7ffe67f8feb4,259284196,0,0x0,8
tick,0x7ffe67f8feb4,259299693,0,0x0,8
tick,0x7ffe67f8feb4,259315774,0,0x0,8
tick,0x7ffe67f8feb4,259331888,0,0x0,8
tick,0x7ffe67f8feb4,259347421,0,0x0,8
tick,0x7ffe67f8feb4,259362950,0,0x0,8
tick,0x7ffe67f8feb4,259378676,0,0x0,8
tick,0x7ffe67f8feb4,259395039,0,0x0,8
tick,0x7ffe67f8feb4,259410349,0,0x0,8
tick,0x7ffe67f8feb4,259426007,0,0x0,8
tick,0x7ffe67f8feb4,259441248,0,0x0,8
tick,0x7ffe67f8feb4,259456296,0,0x0,8
tick,0x7ffe67f8feb4,259471935,0,0x0,8
tick,0x7ffe67f8feb4,259487684,0,0x0,8
tick,0x7ffe67f8feb4,259503785,0,0x0,8
tick,0x7ffe67f8feb4,259519048,0,0x0,8
tick,0x7ffe67f8feb4,259535255,0,0x0,8
tick,0x7ffe67f8feb4,259551283,0,0x0,8
tick,0x7ffe67f8feb4,259566720,0,0x0,8
tick,0x7ffe67f8feb4,259582233,0,0x0,8
tick,0x7ffe67f8feb4,259598178,0,0x0,8
tick,0x7ffe67f8feb4,259613737,0,0x0,8
tick,0x7ffe67f8feb4,259629927,0,0x0,8
tick,0x7ffe67f8feb4,259645631,0,0x0,8
tick,0x7ffe67f8feb4,259661606,0,0x0,8
tick,0x7ffe67f8feb4,259676947,0,0x0,8
tick,0x7ffe67f8feb4,259693150,0,0x0,8
tick,0x7ffe67f8feb4,259708676,0,0x0,8
tick,0x7ffe67f8feb4,259724374,0,0x0,8
tick,0x7ffe67f8feb4,259739474,0,0x0,8
tick,0x7ffe67f8feb4,259755547,0,0x0,8
tick,0x7ffe67f8feb4,259770984,0,0x0,8
tick,0x7ffe67f8feb4,259786347,0,0x0,8
tick,0x7ffe67f8feb4,259801826,0,0x0,8
tick,0x7ffe67f8feb4,259817237,0,0x0,8
tick,0x7ffe67f8feb4,259833057,0,0x0,8
tick,0x7ffe67f8feb4,259849104,0,0x0,8
tick,0x7ffe67f8feb4,259865461,0,0x0,8
tick,0x7ffe67f8feb4,259881298,0,0x0,8
tick,0x7ffe67f8feb4,259897378,0,0x0,8
tick,0x7ffe67f8feb4,259912648,0,0x0,8
tick,0x7ffe67f8feb4,259927833,0,0x0,8
tick,0x7ffe67f8feb4,259943019,0,0x0,8
tick,0x7ffe67f8feb4,259958766,0,0x0,8
tick,0x7ffe67f8feb4,259974777,0,0x0,8
tick,0x7ffe67f8feb4,259990340,0,0x0,8
tick,0x7ffe67f8feb4,260006369,0,0x0,8
tick,0x7ffe67f8feb4,260021617,0,0x0,8
tick,0x7ffe67f8feb4,260036898,0,0x0,8
tick,0x7ffe67f8feb4,260052362,0,0x0,8
tick,0x7ffe67f8feb4,260068412,0,0x0,8
tick,0x7ffe67f8feb4,260083839,0,0x0,8
tick,0x7ffe67f8feb4,260099112,0,0x0,8
tick,0x7ffe67f8feb4,260115366,0,0x0,8
tick,0x7ffe67f8feb4,260130801,0,0x0,8
tick,0x7ffe67f8feb4,260146469,0,0x0,8
tick,0x7ffe67f8feb4,260162772,0,0x0,8
tick,0x7ffe67f8feb4,260178026,0,0x0,8
tick,0x7ffe67f8feb4,260193776,0,0x0,8
tick,0x7ffe67f8feb4,260208867,0,0x0,8
tick,0x7ffe67f8feb4,260224623,0,0x0,8
tick,0x7ffe67f8feb4,260240609,0,0x0,8
tick,0x7ffe67f8feb4,260256610,0,0x0,8
tick,0x7ffe67f8feb4,260272670,0,0x0,8
tick,0x7ffe67f8feb4,260288052,0,0x0,8
tick,0x7ffe67f8feb4,260303964,0,0x0,8
tick,0x7ffe67f8feb4,260320088,0,0x0,8
tick,0x7ffe67f8feb4,260335327,0,0x0,8
tick,0x7ffe67f8feb4,260351086,0,0x0,8
tick,0x7ffe67f8feb4,260366522,0,0x0,8
tick,0x7ffe67f8feb4,260381636,0,0x0,8
tick,0x7ffe67f8feb4,260397176,0,0x0,8
tick,0x7ffe67f8feb4,260412604,0,0x0,8
tick,0x7ffe67f8feb4,260427421,0,0x0,8
tick,0x7ffe67f8feb4,260442649,0,0x0,8
tick,0x7ffe67f8feb4,260457860,0,0x0,8
tick,0x7ffe67f8feb4,260472923,0,0x0,8
tick,0x7ffe67f8feb4,260489368,0,0x0,8
tick,0x7ffe67f8feb4,260505121,0,0x0,8
tick,0x7ffe67f8feb4,260520403,0,0x0,8
tick,0x7ffe67f8feb4,260535956,0,0x0,8
tick,0x7ffe67f8feb4,260551144,0,0x0,8
tick,0x7ffe67f8feb4,260566362,0,0x0,8
tick,0x7ffe67f8feb4,260581383,0,0x0,8
tick,0x7ffe67f8feb4,260596829,0,0x0,8
tick,0x7ffe67f8feb4,260611850,0,0x0,8
tick,0x7ffe67f8feb4,260626899,0,0x0,8
tick,0x7ffe67f8feb4,260642707,0,0x0,8
tick,0x7ffe67f8feb4,260658230,0,0x0,8
tick,0x7ffe67f8feb4,260673413,0,0x0,8
tick,0x7ffe67f8feb4,260689454,0,0x0,8
tick,0x7ffe67f8feb4,260705040,0,0x0,8
tick,0x7ffe67f8feb4,260720014,0,0x0,8
tick,0x7ffe67f8feb4,260735257,0,0x0,8
tick,0x7ffe67f8feb4,260750374,0,0x0,8
tick,0x7ffe67f8feb4,260766576,0,0x0,8
tick,0x7ffe67f8feb4,260782098,0,0x0,8
tick,0x7ffe67f8feb4,260797650,0,0x0,8
tick,0x7ffe67f8feb4,260812992,0,0x0,8
tick,0x7ffe67f8feb4,260829132,0,0x0,8
tick,0x7ffe67f8feb4,260844746,0,0x0,8
tick,0x7ffe67f8feb4,260859879,0,0x0,8
tick,0x7ffe67f8feb4,260874881,0,0x0,8
tick,0x7ffe67f8feb4,260889902,0,0x0,8
tick,0x7ffe67f8feb4,260905316,0,0x0,8
tick,0x7ffe67f8feb4,260921384,0,0x0,8
tick,0x7ffe67f8feb4,260936447,0,0x0,8
tick,0x7ffe67f8feb4,260952443,0,0x0,8
tick,0x7ffe67f8feb4,260967438,0,0x0,8
tick,0x7ffe67f8feb4,260982613,0,0x0,8
tick,0x7ffe67f8feb4,260998676,0,0x0,8
tick,0x7ffe67f8feb4,261013652,0,0x0,8
tick,0x7ffe67f8feb4,261028475,0,0x0,8
tick,0x7ffe67f8feb4,261044461,0,0x0,8
tick,0x7ffe67f8feb4,261059747,0,0x0,8
tick,0x7ffe67f8feb4,261075339,0,0x0,8
tick,0x7ffe67f8feb4,261091085,0,0x0,8
tick,0x7ffe67f8feb4,261106910,0,0x0,8
tick,0x7ffe67f8feb4,261123061,0,0x0,8
tick,0x7ffe67f8feb4,261138194,0,0x0,8
tick,0x7ffe67f8feb4,261153756,0,0x0,8
tick,0x7ffe67f8feb4,261169765,0,0x0,8
tick,0x7ffe67f8feb4,261185780,0,0x0,8
tick,0x7ffe67f8feb4,261201847,0,0x0,8
tick,0x7ffe67f8feb4,261217755,0,0x0,8
tick,0x7ffe67f8feb4,261233185,0,0x0,8
tick,0x7ffe67f8feb4,261248271,0,0x0,8
tick,0x7ffe67f8feb4,261264134,0,0x0,8
tick,0x7ffe67f8feb4,261279286,0,0x0,8
tick,0x7ffe67f8feb4,261295113,0,0x0,8
tick,0x7ffe67f8feb4,261310281,0,0x0,8
tick,0x7ffe67f8feb4,261326269,0,0x0,8
tick,0x7ffe67f8feb4,261342292,0,0x0,8
tick,0x7ffe67f8feb4,261358280,0,0x0,8
tick,0x7ffe67f8feb4,261374310,0,0x0,8
tick,0x7ffe67f8feb4,261390442,0,0x0,8
tick,0x7ffe67f8feb4,261406848,0,0x0,8
tick,0x7ffe67f8feb4,261421973,0,0x0,8
tick,0x7ffe67f8feb4,261437982,0,0x0,8
tick,0x7ffe67f8feb4,261453303,0,0x0,8
tick,0x7ffe67f8feb4,261469001,0,0x0,8
tick,0x7ffe67f8feb4,261485017,0,0x0,8
tick,0x7ffe67f8feb4,261500279,0,0x0,8
tick,0x7ffe67f8feb4,261516355,0,0x0,8
tick,0x7ffe67f8feb4,261533852,0,0x0,8
tick,0x7ffe67f8feb4,261547337,0,0x0,8
tick,0x7ffe67f8feb4,261562486,0,0x0,8
tick,0x7ffe67f8feb4,261578345,0,0x0,8
tick,0x7ffe67f8feb4,261594045,0,0x0,8
tick,0x7ffe67f8feb4,261609325,0,0x0,8
tick,0x7ffe67f8feb4,261624371,0,0x0,8
tick,0x7ffe67f8feb4,261640072,0,0x0,8
tick,0x7ffe67f8feb4,261654245,0,0x0,8
tick,0x7ffe67f8feb4,261670338,0,0x0,8
tick,0x7ffe67f8feb4,261686221,0,0x0,8
tick,0x7ffe67f8feb4,261701329,0,0x0,8
tick,0x7ffe67f8feb4,261717346,0,0x0,8
tick,0x7ffe67f8feb4,261733341,0,0x0,8
tick,0x7ffe67f8feb4,261748354,0,0x0,8
tick,0x7ffe67f8feb4,261763802,0,0x0,8
tick,0x7ffe67f8feb4,261779391,0,0x0,8
tick,0x7ffe67f8feb4,261794442,0,0x0,8
tick,0x7ffe67f8feb4,261810069,0,0x0,8
tick,0x7ffe67f8feb4,261826093,0,0x0,8
tick,0x7ffe67f8feb4,261841472,0,0x0,8
tick,0x7ffe67f8feb4,261857732,0,0x0,8
tick,0x7ffe67f8feb4,261873618,0,0x0,8
tick,0x7ffe67f8feb4,261888428,0,0x0,8
tick,0x7ffe67f8feb4,261903564,0,0x0,8
tick,0x7ffe67f8feb4,261918740,0,0x0,8
tick,0x7ffe67f8feb4,261934584,0,0x0,8
tick,0x7ffe67f8feb4,261949758,0,0x0,8
tick,0x7ffe67f8feb4,261965736,0,0x0,8
tick,0x7ffe67f8feb4,261981716,0,0x0,8
tick,0x7ffe67f8feb4,261997746,0,0x0,8
tick,0x7ffe67f8feb4,262013739,0,0x0,8
tick,0x7ffe67f8feb4,262028730,0,0x0,8
tick,0x7ffe67f8feb4,262044716,0,0x0,8
tick,0x7ffe67f8feb4,262059724,0,0x0,8
tick,0x7ffe67f8feb4,262076355,0,0x0,8
tick,0x7ffe67f8feb4,262092067,0,0x0,8
tick,0x7ffe67f8feb4,262109093,0,0x0,8
tick,0x7ffe67f8feb4,262124806,0,0x0,8
tick,0x7ffe67f8feb4,262138989,0,0x0,8
tick,0x7ffe67f8feb4,262154949,0,0x0,8
tick,0x7ffe67f8feb4,262170489,0,0x0,8
tick,0x7ffe67f8feb4,262185978,0,0x0,8
tick,0x7ffe67f8feb4,262200995,0,0x0,8
tick,0x7ffe67f8feb4,262215997,0,0x0,8
tick,0x7ffe67f8feb4,262231000,0,0x0,8
tick,0x7ffe67f8feb4,262246121,0,0x0,8
tick,0x7ffe67f8feb4,262261836,0,0x0,8
tick,0x7ffe67f8feb4,262277189,0,0x0,8
tick,0x7ffe67f8feb4,262293165,0,0x0,8
tick,0x7ffe67f8feb4,262309176,0,0x0,8
tick,0x7ffe67f8feb4,262324900,0,0x0,8
tick,0x7ffe67f8feb4,262340313,0,0x0,8
tick,0x7ffe67f8feb4,262354933,0,0x0,8
tick,0x7ffe67f8feb4,262369884,0,0x0,8
tick,0x7ffe67f8feb4,262385164,0,0x0,8
tick,0x7ffe67f8feb4,262400535,0,0x0,8
tick,0x7ffe67f8feb4,262416131,0,0x0,8
tick,0x7ffe67f8feb4,262431522,0,0x0,8
tick,0x7ffe67f8feb4,262447500,0,0x0,8
tick,0x7ffe67f8feb4,262462779,0,0x0,8
tick,0x7ffe67f8feb4,262478493,0,0x0,8
tick,0x7ffe67f8feb4,262493970,0,0x0,8
tick,0x7ffe67f8feb4,262509557,0,0x0,8
tick,0x7ffe67f8feb4,262525589,0,0x0,8
tick,0x7ffe67f8feb4,262540773,0,0x0,8
tick,0x7ffe67f8feb4,262555983,0,0x0,8
tick,0x7ffe67f8feb4,262571308,0,0x0,8
tick,0x7ffe67f8feb4,262586974,0,0x0,8
tick,0x7ffe67f8feb4,262601639,0,0x0,8
tick,0x7ffe67f8feb4,262617001,0,0x0,8
tick,0x7ffe67f8feb4,262632907,0,0x0,8
tick,0x7ffe67f8feb4,262648554,0,0x0,8
tick,0x7ffe67f8feb4,262663687,0,0x0,8
tick,0x7ffe67f8feb4,262679716,0,0x0,8
tick,0x7ffe67f8feb4,262695644,0,0x0,8
tick,0x7ffe67f8feb4,262711295,0,0x0,8
tick,0x7ffe67f8feb4,262727158,0,0x0,8
tick,0x7ffe67f8feb4,262742418,0,0x0,8
tick,0x7ffe67f8feb4,262758049,0,0x0,8
tick,0x7ffe67f8feb4,262774124,0,0x0,8
tick,0x7ffe67f8feb4,262789753,0,0x0,8
tick,0x7ffe67f8feb4,262805020,0,0x0,8
tick,0x7ffe67f8feb4,262820272,0,0x0,8
tick,0x7ffe67f8feb4,262836041,0,0x0,8
tick,0x7ffe67f8feb4,262852262,0,0x0,8
tick,0x7ffe67f8feb4,262867889,0,0x0,8
tick,0x7ffe67f8feb4,262884235,0,0x0,8
tick,0x7ffe67f8feb4,262899897,0,0x0,8
tick,0x7ffe67f8feb4,262915816,0,0x0,8
tick,0x7ffe67f8feb4,262931942,0,0x0,8
tick,0x7ffe67f8feb4,262946481,0,0x0,8
tick,0x7ffe67f8feb4,262961845,0,0x0,8
tick,0x7ffe67f8feb4,262977879,0,0x0,8
tick,0x7ffe67f8feb4,262993881,0,0x0,8
tick,0x7ffe67f8feb4,263009814,0,0x0,8
tick,0x7ffe67f8feb4,263025887,0,0x0,8
tick,0x7ffe67f8feb4,263041837,0,0x0,8
tick,0x7ffe67f8feb4,263058016,0,0x0,8
tick,0x7ffe67f8feb4,263074206,0,0x0,8
tick,0x7ffe67f8feb4,263089862,0,0x0,8
tick,0x7ffe67f8feb4,263105843,0,0x0,8
tick,0x7ffe67f8feb4,263121127,0,0x0,8
tick,0x7ffe67f8feb4,263137122,0,0x0,8
tick,0x7ffe67f8feb4,263152271,0,0x0,8
tick,0x7ffe67f8feb4,263168359,0,0x0,8
tick,0x7ffe67f8feb4,263184016,0,0x0,8
tick,0x7ffe67f8feb4,263199442,0,0x0,8
tick,0x7ffe67f8feb4,263214604,0,0x0,8
tick,0x7ffe67f8feb4,263230558,0,0x0,8
tick,0x7ffe67f8feb4,263246408,0,0x0,8
tick,0x7ffe67f8feb4,263262210,0,0x0,8
tick,0x7ffe67f8feb4,263278424,0,0x0,8
tick,0x7ffe67f8feb4,263293396,0,0x0,8
tick,0x7ffe67f8feb4,263309206,0,0x0,8
tick,0x7ffe67f8feb4,263324840,0,0x0,8
tick,0x7ffe67f8feb4,263340121,0,0x0,8
tick,0x7ffe67f8feb4,263355743,0,0x0,8
tick,0x7ffe67f8feb4,263371846,0,0x0,8
tick,0x7ffe67f8feb4,263387714,0,0x0,8
tick,0x7ffe67f8feb4,263403067,0,0x0,8
tick,0x7ffe67f8feb4,263418178,0,0x0,8
tick,0x7ffe67f8feb4,263434058,0,0x0,8
tick,0x7ffe67f8feb4,263449188,0,0x0,8
tick,0x7ffe67f8feb4,263464095,0,0x0,8
tick,0x7ffe67f8feb4,263479990,0,0x0,8
tick,0x7ffe67f8feb4,263496076,0,0x0,8
tick,0x7ffe67f8feb4,263512031,0,0x0,8
tick,0x7ffe67f8feb4,263527841,0,0x0,8
tick,0x7ffe67f8feb4,263543721,0,0x0,8
tick,0x7ffe67f8feb4,263559733,0,0x0,8
tick,0x7ffe67f8feb4,263575690,0,0x0,8
tick,0x7ffe67f8feb4,263591633,0,0x0,8
tick,0x7ffe67f8feb4,263606142,0,0x0,8
tick,0x7ffe67f8feb4,263621699,0,0x0,8
tick,0x7ffe67f8feb4,263637012,0,0x0,8
tick,0x7ffe67f8feb4,263652941,0,0x0,8
tick,0x7ffe67f8feb4,263667993,0,0x0,8
tick,0x7ffe67f8feb4,263683627,0,0x0,8
tick,0x7ffe67f8feb4,263699020,0,0x0,8
tick,0x7ffe67f8feb4,263714986,0,0x0,8
tick,0x7ffe67f8feb4,263730324,0,0x0,8
tick,0x7ffe67f8feb4,263745995,0,0x0,8
tick,0x7ffe67f8feb4,263762035,0,0x0,8
tick,0x7ffe67f8feb4,263777041,0,0x0,8
tick,0x7ffe67f8feb4,263793014,0,0x0,8
tick,0x7ffe67f8feb4,263808154,0,0x0,8
tick,0x7ffe67f8feb4,263823984,0,0x0,8
tick,0x7ffe67f8feb4,263840001,0,0x0,8
tick,0x7ffe67f8feb4,263855242,0,0x0,8
tick,0x7ffe67f8feb4,263871025,0,0x0,8
tick,0x7ffe67f8feb4,263886964,0,0x0,8
tick,0x7ffe67f8feb4,263902991,0,0x0,8
tick,0x7ffe67f8feb4,263919010,0,0x0,8
tick,0x7ffe67f8feb4,263934702,0,0x0,8
tick,0x7ffe67f8feb4,263950698,0,0x0,8
tick,0x7ffe67f8feb4,263966135,0,0x0,8
tick,0x7ffe67f8feb4,263982124,0,0x0,8
tick,0x7ffe67f8feb4,263998119,0,0x0,8
tick,0x7ffe67f8feb4,264014120,0,0x0,8
tick,0x7ffe67f8feb4,264030133,0,0x0,8
tick,0x7ffe67f8feb4,264046125,0,0x0,8
tick,0x7ffe67f8feb4,264062119,0,0x0,8
tick,0x7ffe67f8feb4,264078124,0,0x0,8
tick,0x7ffe67f8feb4,264094143,0,0x0,8
tick,0x7ffe67f8feb4,264110230,0,0x0,8
tick,0x7ffe67f8feb4,264126009,0,0x0,8
tick,0x7ffe67f8feb4,264142047,0,0x0,8
tick,0x7ffe67f8feb4,264157744,0,0x0,8
tick,0x7ffe67f8feb4,264174006,0,0x0,8
tick,0x7ffe67f8feb4,264189747,0,0x0,8
tick,0x7ffe67f8feb4,264204967,0,0x0,8
tick,0x7ffe67f8feb4,264220976,0,0x0,8
tick,0x7ffe67f8feb4,264236138,0,0x0,8
tick,0x7ffe67f8feb4,264251285,0,0x0,8
tick,0x7ffe67f8feb4,264266760,0,0x0,8
tick,0x7ffe67f8feb4,264282337,0,0x0,8
tick,0x7ffe67f8feb4,264297790,0,0x0,8
tick,0x7ffe67f8feb4,264312979,0,0x0,8
tick,0x7ffe67f8feb4,264328987,0,0x0,8
tick,0x7ffe67f8feb4,264344780,0,0x0,8
tick,0x7ffe67f8feb4,264360767,0,0x0,8
tick,0x7ffe67f8feb4,264375971,0,0x0,8
tick,0x7ffe67f8feb4,264392616,0,0x0,8
tick,0x7ffe67f8feb4,264407808,0,0x0,8
tick,0x7ffe67f8feb4,264423774,0,0x0,8
tick,0x7ffe67f8feb4,264439820,0,0x0,8
tick,0x7ffe67f8feb4,264454978,0,0x0,8
tick,0x7ffe67f8feb4,264470784,0,0x0,8
tick,0x7ffe67f8feb4,264485991,0,0x0,8
tick,0x7ffe67f8feb4,264501140,0,0x0,8
tick,0x7ffe67f8feb4,264517024,0,0x0,8
tick,0x7ffe67f8feb4,264532629,0,0x0,8
tick,0x7ffe67f8feb4,264547804,0,0x0,8
tick,0x7ffe67f8feb4,264563234,0,0x0,8
tick,0x7ffe67f8feb4,264578846,0,0x0,8
tick,0x7ffe67f8feb4,264594836,0,0x0,8
tick,0x7ffe67f8feb4,264610041,0,0x0,8
tick,0x7ffe67f8feb4,264625054,0,0x0,8
tick,0x7ffe67f8feb4,264640980,0,0x0,8
tick,0x7ffe67f8feb4,264657009,0,0x0,8
tick,0x7ffe67f8feb4,264673016,0,0x0,8
tick,0x7ffe67f8feb4,264689012,0,0x0,8
tick,0x7ffe67f8feb4,264704989,0,0x0,8
tick,0x7ffe67f8feb4,264720984,0,0x0,8
tick,0x7ffe67f8feb4,264736998,0,0x0,8
tick,0x7ffe67f8feb4,264752984,0,0x0,8
tick,0x7ffe67f8feb4,264768981,0,0x0,8
tick,0x7ffe67f8feb4,264785016,0,0x0,8
tick,0x7ffe67f8feb4,264800997,0,0x0,8
tick,0x7ffe67f8feb4,264817057,0,0x0,8
tick,0x7ffe67f8feb4,264831998,0,0x0,8
tick,0x7ffe67f8feb4,264848025,0,0x0,8
tick,0x7ffe67f8feb4,264864014,0,0x0,8
tick,0x7ffe67f8feb4,264880008,0,0x0,8
tick,0x7ffe67f8feb4,264896002,0,0x0,8
tick,0x7ffe67f8feb4,264911015,0,0x0,8
tick,0x7ffe67f8feb4,264927068,0,0x0,8
tick,0x7ffe67f8feb4,264943069,0,0x0,8
tick,0x7ffe67f8feb4,264959298,0,0x0,8
tick,0x7ffe67f8feb4,264975198,0,0x0,8
tick,0x7ffe67f8feb4,264991043,0,0x0,8
tick,0x7ffe67f8feb4,265007155,0,0x0,8
tick,0x7ffe67f8feb4,265023049,0,0x0,8
tick,0x7ffe67f8feb4,265039044,0,0x0,8
tick,0x7ffe67f8feb4,265055212,0,0x0,8
tick,0x7ffe67f8feb4,265070047,0,0x0,8
tick,0x7ffe67f8feb4,265085031,0,0x0,8
tick,0x7ffe67f8feb4,265101094,0,0x0,8
tick,0x7ffe67f8feb4,265117045,0,0x0,8
tick,0x7ffe67f8feb4,265132823,0,0x0,8
tick,0x7ffe67f8feb4,265148113,0,0x0,8
tick,0x7ffe67f8feb4,265164115,0,0x0,8
tick,0x7ffe67f8feb4,265180106,0,0x0,8
tick,0x7ffe67f8feb4,265196277,0,0x0,8
tick,0x7ffe67f8feb4,265212155,0,0x0,8
tick,0x7ffe67f8feb4,265228127,0,0x0,8
tick,0x7ffe67f8feb4,265244140,0,0x0,8
tick,0x7ffe67f8feb4,265260119,0,0x0,8
tick,0x7ffe67f8feb4,265276368,0,0x0,8
tick,0x7ffe67f8feb4,265292176,0,0x0,8
tick,0x7ffe67f8feb4,265308165,0,0x0,8
tick,0x7ffe67f8feb4,265323313,0,0x0,8
tick,0x7ffe67f8feb4,265339161,0,0x0,8
tick,0x7ffe67f8feb4,265353979,0,0x0,8
tick,0x7ffe67f8feb4,265369122,0,0x0,8
tick,0x7ffe67f8feb4,265383989,0,0x0,8
tick,0x7ffe67f8feb4,265399168,0,0x0,8
tick,0x7ffe67f8feb4,265415189,0,0x0,8
tick,0x7ffe67f8feb4,265430964,0,0x0,8
tick,0x7ffe67f8feb4,265446145,0,0x0,8
tick,0x7ffe67f8feb4,265462170,0,0x0,8
tick,0x7ffe67f8feb4,265478141,0,0x0,8
tick,0x7ffe67f8feb4,265494169,0,0x0,8
tick,0x7ffe67f8feb4,265510218,0,0x0,8
tick,0x7ffe67f8feb4,265526050,0,0x0,8
tick,0x7ffe67f8feb4,265541200,0,0x0,8
tick,0x7ffe67f8feb4,265557271,0,0x0,8
tick,0x7ffe67f8feb4,265573117,0,0x0,8
tick,0x7ffe67f8feb4,265588253,0,0x0,8
tick,0x7ffe67f8feb4,265604038,0,0x0,8
tick,0x7ffe67f8feb4,265619651,0,0x0,8
tick,0x7ffe67f8feb4,265635254,0,0x0,8
tick,0x7ffe67f8feb4,265650542,0,0x0,8
tick,0x7ffe67f8feb4,265666034,0,0x0,8
tick,0x7ffe67f8feb4,265681443,0,0x0,8
tick,0x7ffe67f8feb4,265697200,0,0x0,8
tick,0x7ffe67f8feb4,265713476,0,0x0,8
tick,0x7ffe67f8feb4,265728770,0,0x0,8
tick,0x7ffe67f8feb4,265744802,0,0x0,8
tick,0x7ffe67f8feb4,265761350,0,0x0,8
tick,0x7ffe67f8feb4,265776172,0,0x0,8
tick,0x7ffe67f8feb4,265791349,0,0x0,8
tick,0x7ffe67f8feb4,265807421,0,0x0,8
tick,0x7ffe67f8feb4,265823501,0,0x0,8
tick,0x7ffe67f8feb4,265838225,0,0x0,8
tick,0x7ffe67f8feb4,265853987,0,0x0,8
tick,0x7ffe67f8feb4,265869262,0,0x0,8
tick,0x7ffe67f8feb4,265885049,0,0x0,8
tick,0x7ffe67f8feb4,265900325,0,0x0,8
tick,0x7ffe67f8feb4,265915364,0,0x0,8
tick,0x7ffe67f8feb4,265931378,0,0x0,8
tick,0x7ffe67f8feb4,265947250,0,0x0,8
tick,0x7ffe67f8feb4,265962455,0,0x0,8
tick,0x7ffe67f8feb4,265978201,0,0x0,8
tick,0x7ffe67f8feb4,265994266,0,0x0,8
tick,0x7ffe67f8feb4,266009153,0,0x0,8
tick,0x7ffe67f8feb4,266025212,0,0x0,8
tick,0x7ffe67f8feb4,266041178,0,0x0,8
tick,0x7ffe67f8feb4,266057166,0,0x0,8
tick,0x7ffe67f8feb4,266073160,0,0x0,8
tick,0x7ffe67f8feb4,266089143,0,0x0,8
tick,0x7ffe67f8feb4,266104990,0,0x0,8
tick,0x7ffe67f8feb4,266120154,0,0x0,8
tick,0x7ffe67f8feb4,266136133,0,0x0,8
tick,0x7ffe67f8feb4,266151177,0,0x0,8
tick,0x7ffe67f8feb4,266167159,0,0x0,8
tick,0x7ffe67f8feb4,266183137,0,0x0,8
tick,0x7ffe67f8feb4,266199092,0,0x0,8
tick,0x7ffe67f8feb4,266215033,0,0x0,8
tick,0x7ffe67f8feb4,266231034,0,0x0,8
tick,0x7ffe67f8feb4,266247005,0,0x0,8
tick,0x7ffe67f8feb4,266263012,0,0x0,8
tick,0x7ffe67f8feb4,266279026,0,0x0,8
tick,0x7ffe67f8feb4,266295047,0,0x0,8
tick,0x7ffe67f8feb4,266311125,0,0x0,8
tick,0x7ffe67f8feb4,266327658,0,0x0,8
tick,0x7ffe67f8feb4,266342311,0,0x0,8
tick,0x7ffe67f8feb4,266358142,0,0x0,8
tick,0x7ffe67f8feb4,266374012,0,0x0,8
tick,0x7ffe67f8feb4,266389201,0,0x0,8
tick,0x7ffe67f8feb4,266404991,0,0x0,8
tick,0x7ffe67f8feb4,266420191,0,0x0,8
tick,0x7ffe67f8feb4,266436031,0,0x0,8
tick,0x7ffe67f8feb4,266451165,0,0x0,8
tick,0x7ffe67f8feb4,266467053,0,0x0,8
tick,0x7ffe67f8feb4,266482563,0,0x0,8
tick,0x7ffe67f8feb4,266498013,0,0x0,8
tick,0x7ffe67f8feb4,266513228,0,0x0,8
tick,0x7ffe67f8feb4,266528256,0,0x0,8
tick,0x7ffe67f8feb4,266544298,0,0x0,8
tick,0x7ffe67f8feb4,266559223,0,0x0,8
tick,0x7ffe67f8feb4,266574996,0,0x0,8
tick,0x7ffe67f8feb4,266590210,0,0x0,8
tick,0x7ffe67f8feb4,266606166,0,0x0,8
tick,0x7ffe67f8feb4,266622024,0,0x0,8
tick,0x7ffe67f8feb4,266637175,0,0x0,8
tick,0x7ffe67f8feb4,266653003,0,0x0,8
tick,0x7ffe67f8feb4,266668959,0,0x0,8
tick,0x7ffe67f8feb4,266685008,0,0x0,8
tick,0x7ffe67f8feb4,266700974,0,0x0,8
tick,0x7ffe67f8feb4,266716027,0,0x0,8
tick,0x7ffe67f8feb4,266731983,0,0x0,8
tick,0x7ffe67f8feb4,266748088,0,0x0,8
tick,0x7ffe67f8feb4,266763013,0,0x0,8
tick,0x7ffe67f8feb4,266779040,0,0x0,8
tick,0x7ffe67f8feb4,266795057,0,0x0,8
tick,0x7ffe67f8feb4,266810353,0,0x0,8
tick,0x7ffe67f8feb4,266826188,0,0x0,8
tick,0x7ffe67f8feb4,266841833,0,0x0,8
tick,0x7ffe67f8feb4,266857652,0,0x0,8
tick,0x7ffe67f8feb4,266873057,0,0x0,8
tick,0x7ffe67f8feb4,266888787,0,0x0,8
tick,0x7ffe67f8feb4,266904268,0,0x0,8
tick,0x7ffe67f8feb4,266920002,0,0x0,8
tick,0x7ffe67f8feb4,266935306,0,0x0,8
tick,0x7ffe67f8feb4,266950841,0,0x0,8
tick,0x7ffe67f8feb4,266966127,0,0x0,8
tick,0x7ffe67f8feb4,266981172,0,0x0,8
tick,0x7ffe67f8feb4,266997171,0,0x0,8
tick,0x7ffe67f8feb4,267013155,0,0x0,8
tick,0x7ffe67f8feb4,267028161,0,0x0,8
tick,0x7ffe67f8feb4,267044146,0,0x0,8
tick,0x7ffe67f8feb4,267060186,0,0x0,8
tick,0x7ffe67f8feb4,267076139,0,0x0,8
tick,0x7ffe67f8feb4,267092098,0,0x0,8
tick,0x7ffe67f8feb4,267108128,0,0x0,8
tick,0x7ffe67f8feb4,267124015,0,0x0,8
tick,0x7ffe67f8feb4,267139159,0,0x0,8
tick,0x7ffe67f8feb4,267155071,0,0x0,8
tick,0x7ffe67f8feb4,267171032,0,0x0,8
tick,0x7ffe67f8feb4,267187149,0,0x0,8
tick,0x7ffe67f8feb4,267202296,0,0x0,8
tick,0x7ffe67f8feb4,267218213,0,0x0,8
tick,0x7ffe67f8feb4,267233791,0,0x0,8
tick,0x7ffe67f8feb4,267249231,0,0x0,8
tick,0x7ffe67f8feb4,267264633,0,0x0,8
tick,0x7ffe67f8feb4,267280652,0,0x0,8
tick,0x7ffe67f8feb4,267296053,0,0x0,8
tick,0x7ffe67f8feb4,267311784,0,0x0,8
tick,0x7ffe67f8feb4,267327752,0,0x0,8
tick,0x7ffe67f8feb4,267343692,0,0x0,8
tick,0x7ffe67f8feb4,267359410,0,0x0,8
tick,0x7ffe67f8feb4,267375268,0,0x0,8
tick,0x7ffe67f8feb4,267390794,0,0x0,8
tick,0x7ffe67f8feb4,267406052,0,0x0,8
tick,0x7ffe67f8feb4,267421683,0,0x0,8
tick,0x7ffe67f8feb4,267437519,0,0x0,8
tick,0x7ffe67f8feb4,267453161,0,0x0,8
tick,0x7ffe67f8feb4,267468536,0,0x0,8
tick,0x7ffe67f8feb4,267483744,0,0x0,8
tick,0x7ffe67f8feb4,267499088,0,0x0,8
tick,0x7ffe67f8feb4,267514515,0,0x0,8
tick,0x7ffe67f8feb4,267530272,0,0x0,8
tick,0x7ffe67f8feb4,267546195,0,0x0,8
tick,0x7ffe67f8feb4,267561954,0,0x0,8
tick,0x7ffe67f8feb4,267577088,0,0x0,8
tick,0x7ffe67f8feb4,267592569,0,0x0,8
tick,0x7ffe67f8feb4,267608390,0,0x0,8
tick,0x7ffe67f8feb4,267623787,0,0x0,8
tick,0x7ffe67f8feb4,267639596,0,0x0,8
tick,0x7ffe67f8feb4,267655253,0,0x0,8
tick,0x7ffe67f8feb4,267670520,0,0x0,8
tick,0x7ffe67f8feb4,267686077,0,0x0,8
tick,0x7ffe67f8feb4,267702037,0,0x0,8
tick,0x7ffe67f8feb4,267718027,0,0x0,8
tick,0x7ffe67f8feb4,267733918,0,0x0,8
tick,0x7ffe67f8feb4,267749016,0,0x0,8
tick,0x7ffe67f8feb4,267765043,0,0x0,8
tick,0x7ffe67f8feb4,267781085,0,0x0,8
tick,0x7ffe67f8feb4,267797083,0,0x0,8
tick,0x7ffe67f8feb4,267813068,0,0x0,8
tick,0x7ffe67f8feb4,267829162,0,0x0,8
tick,0x7ffe67f8feb4,267844373,0,0x0,8
tick,0x7ffe67f8feb4,267860359,0,0x0,8
tick,0x7ffe67f8feb4,267875010,0,0x0,8
tick,0x7ffe67f8feb4,267890300,0,0x0,8
tick,0x7ffe67f8feb4,267906448,0,0x0,8
tick,0x7ffe67f8feb4,267921628,0,0x0,8
tick,0x7ffe67f8feb4,267937425,0,0x0,8
tick,0x7ffe67f8feb4,267952476,0,0x0,8
tick,0x7ffe67f8feb4,267967521,0,0x0,8
tick,0x7ffe67f8feb4,267983364,0,0x0,8
tick,0x7ffe67f8feb4,267999343,0,0x0,8
tick,0x7ffe67f8feb4,268015376,0,0x0,8
tick,0x7ffe67f8feb4,268031350,0,0x0,8
tick,0x7ffe67f8feb4,268047364,0,0x0,8
tick,0x7ffe67f8feb4,268062841,0,0x0,8
tick,0x7ffe67f8feb4,268078333,0,0x0,8
tick,0x7ffe67f8feb4,268093624,0,0x0,8
tick,0x7ffe67f8feb4,268109653,0,0x0,8
tick,0x7ffe67f8feb4,268124989,0,0x0,8
tick,0x7ffe67f8feb4,268140180,0,0x0,8
tick,0x7ffe67f8feb4,268156032,0,0x0,8
tick,0x7ffe67f8feb4,268171128,0,0x0,8
tick,0x7ffe67f8feb4,268187189,0,0x0,8
tick,0x7ffe67f8feb4,268202709,0,0x0,8
tick,0x7ffe67f8feb4,268218678,0,0x0,8
tick,0x7ffe67f8feb4,268234048,0,0x0,8
tick,0x7ffe67f8feb4,268249397,0,0x0,8
tick,0x7ffe67f8feb4,268265370,0,0x0,8
tick,0x7ffe67f8feb4,268281371,0,0x0,8
tick,0x7ffe67f8feb4,268297388,0,0x0,8
tick,0x7ffe67f8feb4,268313373,0,0x0,8
tick,0x7ffe67f8feb4,268329575,0,0x0,8
tick,0x7ffe67f8feb4,268345020,0,0x0,8
tick,0x7ffe67f8feb4,268361014,0,0x0,8
tick,0x7ffe67f8feb4,268376134,0,0x0,8
tick,0x7ffe67f8feb4,268391725,0,0x0,8
tick,0x7ffe67f8feb4,268407051,0,0x0,8
tick,0x7ffe67f8feb4,268422396,0,0x0,8
tick,0x7ffe67f8feb4,268438055,0,0x0,8
tick,0x7ffe67f8feb4,268453081,0,0x0,8
tick,0x7ffe67f8feb4,268469079,0,0x0,8
tick,0x7ffe67f8feb4,268483936,0,0x0,8
tick,0x7ffe67f8feb4,268499065,0,0x0,8
tick,0x7ffe67f8feb4,268514114,0,0x0,8
tick,0x7ffe67f8feb4,268529767,0,0x0,8
tick,0x7ffe67f8feb4,268544018,0,0x0,8
tick,0x7ffe67f8feb4,268559159,0,0x0,8
tick,0x7ffe67f8feb4,268574409,0,0x0,8
tick,0x7ffe67f8feb4,268590409,0,0x0,8
tick,0x7ffe67f8feb4,268606413,0,0x0,8
tick,0x7ffe67f8feb4,268622408,0,0x0,8
tick,0x7ffe67f8feb4,268638154,0,0x0,8
tick,0x7ffe67f8feb4,268653422,0,0x0,8
tick,0x7ffe67f8feb4,268669182,0,0x0,8
tick,0x7ffe67f8feb4,268685096,0,0x0,8
tick,0x7ffe67f8feb4,268701082,0,0x0,8
tick,0x7ffe67f8feb4,268717025,0,0x0,8
tick,0x7ffe67f8feb4,268732249,0,0x0,8
tick,0x7ffe67f8feb4,268748046,0,0x0,8
tick,0x7ffe67f8feb4,268764318,0,0x0,8
tick,0x7ffe67f8feb4,268779057,0,0x0,8
tick,0x7ffe67f8feb4,268795044,0,0x0,8
tick,0x7ffe67f8feb4,268811006,0,0x0,8
tick,0x7ffe67f8feb4,268826153,0,0x0,8
tick,0x7ffe67f8feb4,268842048,0,0x0,8
tick,0x7ffe67f8feb4,268857559,0,0x0,8
tick,0x7ffe67f8feb4,268872729,0,0x0,8
tick,0x7ffe67f8feb4,268887870,0,0x0,8
tick,0x7ffe67f8feb4,268903046,0,0x0,8
tick,0x7ffe67f8feb4,268918575,0,0x0,8
tick,0x7ffe67f8feb4,268934034,0,0x0,8
tick,0x7ffe67f8feb4,268950058,0,0x0,8
tick,0x7ffe67f8feb4,268966014,0,0x0,8
tick,0x7ffe67f8feb4,268982008,0,0x0,8
tick,0x7ffe67f8feb4,268998111,0,0x0,8
tick,0x7ffe67f8feb4,269014018,0,0x0,8
tick,0x7ffe67f8feb4,269030100,0,0x0,8
tick,0x7ffe67f8feb4,269045018,0,0x0,8
tick,0x7ffe67f8feb4,269061010,0,0x0,8
tick,0x7ffe67f8feb4,269077042,0,0x0,8
tick,0x7ffe67f8feb4,269093098,0,0x0,8
tick,0x7ffe67f8feb4,269109046,0,0x0,8
tick,0x7ffe67f8feb4,269125009,0,0x0,8
tick,0x7ffe67f8feb4,269141057,0,0x0,8
tick,0x7ffe67f8feb4,269157031,0,0x0,8
tick,0x7ffe67f8feb4,269173066,0,0x0,8
tick,0x7ffe67f8feb4,269189051,0,0x0,8
tick,0x7ffe67f8feb4,269205036,0,0x0,8
tick,0x7ffe67f8feb4,269220150,0,0x0,8
tick,0x7ffe67f8feb4,269236170,0,0x0,8
tick,0x7ffe67f8feb4,269252157,0,0x0,8
tick,0x7ffe67f8feb4,269268166,0,0x0,8
tick,0x7ffe67f8feb4,269283371,0,0x0,8
tick,0x7ffe67f8feb4,269299141,0,0x0,8
tick,0x7ffe67f8feb4,269315177,0,0x0,8
tick,0x7ffe67f8feb4,269331184,0,0x0,8
tick,0x7ffe67f8feb4,269346435,0,0x0,8
tick,0x7ffe67f8feb4,269362458,0,0x0,8
tick,0x7ffe67f8feb4,269378534,0,0x0,8
tick,0x7ffe67f8feb4,269393739,0,0x0,8
tick,0x7ffe67f8feb4,269409490,0,0x0,8
tick,0x7ffe67f8feb4,269425057,0,0x0,8
tick,0x7ffe67f8feb4,269440306,0,0x0,8
tick,0x7ffe67f8feb4,269455943,0,0x0,8
tick,0x7ffe67f8feb4,269471539,0,0x0,8
tick,0x7ffe67f8feb4,269487072,0,0x0,8
tick,0x7ffe67f8feb4,269502434,0,0x0,8
tick,0x7ffe67f8feb4,269518182,0,0x0,8
tick,0x7ffe67f8feb4,269533994,0,0x0,8
tick,0x7ffe67f8feb4,269550103,0,0x0,8
tick,0x7ffe67f8feb4,269566336,0,0x0,8
tick,0x7ffe67f8feb4,269582334,0,0x0,8
tick,0x7ffe67f8feb4,269596921,0,0x0,8
tick,0x7ffe67f8feb4,269612878,0,0x0,8
tick,0x7ffe67f8feb4,269628867,0,0x0,8
tick,0x7ffe67f8feb4,269645552,0,0x0,8
tick,0x7ffe67f8feb4,269660306,0,0x0,8
tick,0x7ffe67f8feb4,269675827,0,0x0,8
tick,0x7ffe67f8feb4,269691114,0,0x0,8
tick,0x7ffe67f8feb4,269707157,0,0x0,8
tick,0x7ffe67f8feb4,269722930,0,0x0,8
tick,0x7ffe67f8feb4,269737913,0,0x0,8
tick,0x7ffe67f8feb4,269753086,0,0x0,8
tick,0x7ffe67f8feb4,269768969,0,0x0,8
tick,0x7ffe67f8feb4,269784850,0,0x0,8
tick,0x7ffe67f8feb4,269802012,0,0x0,8
tick,0x7ffe67f8feb4,269816042,0,0x0,8
tick,0x7ffe67f8feb4,269832098,0,0x0,8
tick,0x7ffe67f8feb4,269849224,0,0x0,8
tick,0x7ffe67f8feb4,269864335,0,0x0,8
tick,0x7ffe67f8feb4,269879163,0,0x0,8
tick,0x7ffe67f8feb4,269895040,0,0x0,8
tick,0x7ffe67f8feb4,269911045,0,0x0,8
tick,0x7ffe67f8feb4,269926161,0,0x0,8
tick,0x7ffe67f8feb4,269941238,0,0x0,8
tick,0x7ffe67f8feb4,269957167,0,0x0,8
tick,0x7ffe67f8feb4,269972860,0,0x0,8
tick,0x7ffe67f8feb4,269988867,0,0x0,8
tick,0x7ffe67f8feb4,270004021,0,0x0,8
tick,0x7ffe67f8feb4,270020015,0,0x0,8
tick,0x7ffe67f8feb4,270036055,0,0x0,8
tick,0x7ffe67f8feb4,270052040,0,0x0,8
tick,0x7ffe67f8feb4,270068001,0,0x0,8
tick,0x7ffe67f8feb4,270084117,0,0x0,8
tick,0x7ffe67f8feb4,270100080,0,0x0,8
tick,0x7ffe67f8feb4,270116232,0,0x0,8
tick,0x7ffe67f8feb4,270132194,0,0x0,8
tick,0x7ffe67f8feb4,270147153,0,0x0,8
tick,0x7ffe67f8feb4,270163170,0,0x0,8
tick,0x7ffe67f8feb4,270179177,0,0x0,8
tick,0x7ffe67f8feb4,270194998,0,0x0,8
tick,0x7ffe67f8feb4,270211028,0,0x0,8
tick,0x7ffe67f8feb4,270226169,0,0x0,8
tick,0x7ffe67f8feb4,270241175,0,0x0,8
tick,0x7ffe67f8feb4,270257158,0,0x0,8
tick,0x7ffe67f8feb4,270273033,0,0x0,8
tick,0x7ffe67f8feb4,270289058,0,0x0,8
tick,0x7ffe67f8feb4,270305027,0,0x0,8
tick,0x7ffe67f8feb4,270321029,0,0x0,8
tick,0x7ffe67f8feb4,270336166,0,0x0,8
tick,0x7ffe67f8feb4,270352191,0,0x0,8
tick,0x7ffe67f8feb4,270368306,0,0x0,8
tick,0x7ffe67f8feb4,270384223,0,0x0,8
tick,0x7ffe67f8feb4,270400299,0,0x0,8
tick,0x7ffe67f8feb4,270417062,0,0x0,8
tick,0x7ffe67f8feb4,270431653,0,0x0,8
tick,0x7ffe67f8feb4,270447289,0,0x0,8
tick,0x7ffe67f8feb4,270462190,0,0x0,8
tick,0x7ffe67f8feb4,270478171,0,0x0,8
tick,0x7ffe67f8feb4,270494186,0,0x0,8
tick,0x7ffe67f8feb4,270539537,0,0x0,8
tick,0x7ffe67f8feb4,270540424,0,0x0,8
tick,0x7ffe67f8feb4,270556739,0,0x0,8
tick,0x7ffe67f8feb4,270578273,0,0x0,8
tick,0x7ffe67f8feb4,270588112,0,0x0,8
tick,0x7ffe67f8feb4,270603607,0,0x0,8
tick,0x7ffe67f8feb4,270619139,0,0x0,8
tick,0x7ffe67f8feb4,270634571,0,0x0,8
tick,0x7ffe67f8feb4,270650204,0,0x0,8
tick,0x7ffe67f8feb4,270666256,0,0x0,8
tick,0x7ffe67f8feb4,270682193,0,0x0,8
tick,0x7ffe67f8feb4,270698825,0,0x0,8
tick,0x7ffe67f8feb4,270714176,0,0x0,8
tick,0x7ffe67f8feb4,270730165,0,0x0,8
tick,0x7ffe67f8feb4,270746174,0,0x0,8
tick,0x7ffe67f8feb4,270762193,0,0x0,8
tick,0x7ffe67f8feb4,270778212,0,0x0,8
tick,0x7ffe67f8feb4,270794181,0,0x0,8
tick,0x7ffe67f8feb4,270810178,0,0x0,8
tick,0x7ffe67f8feb4,270826171,0,0x0,8
tick,0x7ffe67f8feb4,270841202,0,0x0,8
tick,0x7ffe67f8feb4,270857147,0,0x0,8
tick,0x7ffe67f8feb4,270872602,0,0x0,8
tick,0x7ffe67f8feb4,270888203,0,0x0,8
tick,0x7ffe67f8feb4,270903743,0,0x0,8
tick,0x7ffe67f8feb4,270919595,0,0x0,8
tick,0x7ffe67f8feb4,270935606,0,0x0,8
tick,0x7ffe67f8feb4,270951930,0,0x0,8
tick,0x7ffe67f8feb4,270967752,0,0x0,8
tick,0x7ffe67f8feb4,270983252,0,0x0,8
tick,0x7ffe67f8feb4,270997980,0,0x0,8
tick,0x7ffe67f8feb4,271013166,0,0x0,8
tick,0x7ffe67f8feb4,271029158,0,0x0,8
tick,0x7ffe67f8feb4,271043965,0,0x0,8
tick,0x7ffe67f8feb4,271059986,0,0x0,8
tick,0x7ffe67f8feb4,271075056,0,0x0,8
tick,0x7ffe67f8feb4,271090183,0,0x0,8
tick,0x7ffe67f8feb4,271106036,0,0x0,8
tick,0x7ffe67f8feb4,271121198,0,0x0,8
tick,0x7ffe67f8feb4,271137201,0,0x0,8
tick,0x7ffe67f8feb4,271153101,0,0x0,8
tick,0x7ffe67f8feb4,271169040,0,0x0,8
tick,0x7ffe67f8feb4,271184804,0,0x0,8
tick,0x7ffe67f8feb4,271200025,0,0x0,8
tick,0x7ffe67f8feb4,271215872,0,0x0,8
tick,0x7ffe67f8feb4,271231812,0,0x0,8
tick,0x7ffe67f8feb4,271247809,0,0x0,8
tick,0x7ffe67f8feb4,271262813,0,0x0,8
tick,0x7ffe67f8feb4,271278807,0,0x0,8
tick,0x7ffe67f8feb4,271293820,0,0x0,8
tick,0x7ffe67f8feb4,271309066,0,0x0,8
tick,0x7ffe67f8feb4,271324384,0,0x0,8
tick,0x7ffe67f8feb4,271340391,0,0x0,8
tick,0x7ffe67f8feb4,271356408,0,0x0,8
tick,0x7ffe67f8feb4,271371536,0,0x0,8
tick,0x7ffe67f8feb4,271387436,0,0x0,8
tick,0x7ffe67f8feb4,271403690,0,0x0,8
tick,0x7ffe67f8feb4,271418483,0,0x0,8
tick,0x7ffe67f8feb4,271434434,0,0x0,8
tick,0x7ffe67f8feb4,271449932,0,0x0,8
tick,0x7ffe67f8feb4,271465927,0,0x0,8
tick,0x7ffe67f8feb4,271481845,0,0x0,8
tick,0x7ffe67f8feb4,271497851,0,0x0,8
tick,0x7ffe67f8feb4,271513819,0,0x0,8
tick,0x7ffe67f8feb4,271529739,0,0x0,8
tick,0x7ffe67f8feb4,271544834,0,0x0,8
tick,0x7ffe67f8feb4,271560821,0,0x0,8
tick,0x7ffe67f8feb4,271576994,0,0x0,8
tick,0x7ffe67f8feb4,271596846,0,0x0,8
tick,0x7ffe67f8feb4,271608884,0,0x0,8
tick,0x7ffe67f8feb4,271624843,0,0x0,8
tick,0x7ffe67f8feb4,271641000,0,0x0,8
tick,0x7ffe67f8feb4,271655962,0,0x0,8
tick,0x7ffe67f8feb4,271671428,0,0x0,8
tick,0x7ffe67f8feb4,271687435,0,0x0,8
tick,0x7ffe67f8feb4,271702091,0,0x0,8
tick,0x7ffe67f8feb4,271718186,0,0x0,8
tick,0x7ffe67f8feb4,271734199,0,0x0,8
tick,0x7ffe67f8feb4,271748824,0,0x0,8
tick,0x7ffe67f8feb4,271764836,0,0x0,8
tick,0x7ffe67f8feb4,271780219,0,0x0,8
tick,0x7ffe67f8feb4,271796183,0,0x0,8
tick,0x7ffe67f8feb4,271811980,0,0x0,8
tick,0x7ffe67f8feb4,271827786,0,0x0,8
tick,0x7ffe67f8feb4,271842754,0,0x0,8
tick,0x7ffe67f8feb4,271858797,0,0x0,8
tick,0x7ffe67f8feb4,271874274,0,0x0,8
tick,0x7ffe67f8feb4,271890311,0,0x0,8
tick,0x7ffe67f8feb4,271906354,0,0x0,8
tick,0x7ffe67f8feb4,271921433,0,0x0,8
tick,0x7ffe67f8feb4,271936819,0,0x0,8
tick,0x7ffe67f8feb4,271951778,0,0x0,8
tick,0x7ffe67f8feb4,271968414,0,0x0,8
tick,0x7ffe67f8feb4,271983889,0,0x0,8
tick,0x7ffe67f8feb4,271998887,0,0x0,8
tick,0x7ffe67f8feb4,272014902,0,0x0,8
tick,0x7ffe67f8feb4,272030902,0,0x0,8
tick,0x7ffe67f8feb4,272046957,0,0x0,8
tick,0x7ffe67f8feb4,272062931,0,0x0,8
tick,0x7ffe67f8feb4,272077944,0,0x0,8
tick,0x7ffe67f8feb4,272092946,0,0x0,8
tick,0x7ffe67f8feb4,272108966,0,0x0,8
tick,0x7ffe67f8feb4,272124990,0,0x0,8
tick,0x7ffe67f8feb4,272140461,0,0x0,8
tick,0x7ffe67f8feb4,272155792,0,0x0,8
tick,0x7ffe67f8feb4,272170834,0,0x0,8
tick,0x7ffe67f8feb4,272186194,0,0x0,8
tick,0x7ffe67f8feb4,272202715,0,0x0,8
tick,0x7ffe67f8feb4,272217615,0,0x0,8
tick,0x7ffe67f8feb4,272239424,0,0x0,8
tick,0x7ffe67f8feb4,272253877,0,0x0,8
tick,0x7ffe67f8feb4,272265076,0,0x0,8
tick,0x7ffe67f8feb4,272278459,0,0x0,8
tick,0x7ffe67f8feb4,272294551,0,0x0,8
tick,0x7ffe67f8feb4,272308477,0,0x0,8
tick,0x7ffe67f8feb4,272324549,0,0x0,8
tick,0x7ffe67f8feb4,272340531,0,0x0,8
tick,0x7ffe67f8feb4,272355937,0,0x0,8
tick,0x7ffe67f8feb4,272371959,0,0x0,8
tick,0x7ffe67f8feb4,272387968,0,0x0,8
tick,0x7ffe67f8feb4,272404017,0,0x0,8
tick,0x7ffe67f8feb4,272420762,0,0x0,8
tick,0x7ffe67f8feb4,272435992,0,0x0,8
tick,0x7ffe67f8feb4,272453967,0,0x0,8
tick,0x7ffe67f8feb4,272467942,0,0x0,8
tick,0x7ffe67f8feb4,272484019,0,0x0,8
tick,0x7ffe67f8feb4,272504815,0,0x0,8
tick,0x7ffe67f8feb4,272515982,0,0x0,8
tick,0x7ffe67f8feb4,272532035,0,0x0,8
tick,0x7ffe67f8feb4,272546956,0,0x0,8
tick,0x7ffe67f8feb4,272562387,0,0x0,8
tick,0x7ffe67f8feb4,272578390,0,0x0,8
tick,0x7ffe67f8feb4,272594410,0,0x0,8
tick,0x7ffe67f8feb4,272610390,0,0x0,8
tick,0x7ffe67f8feb4,272626414,0,0x0,8
tick,0x7ffe67f8feb4,272641442,0,0x0,8
tick,0x7ffe67f8feb4,272657466,0,0x0,8
tick,0x7ffe67f8feb4,272673445,0,0x0,8
tick,0x7ffe67f8feb4,272689402,0,0x0,8
tick,0x7ffe67f8feb4,272705425,0,0x0,8
tick,0x7ffe67f8feb4,272721453,0,0x0,8
tick,0x7ffe67f8feb4,272737415,0,0x0,8
tick,0x7ffe67f8feb4,272753447,0,0x0,8
tick,0x7ffe67f8feb4,272769453,0,0x0,8
tick,0x7ffe67f8feb4,272785483,0,0x0,8
tick,0x7ffe67f8feb4,272801478,0,0x0,8
tick,0x7ffe67f8feb4,272817476,0,0x0,8
tick,0x7ffe67f8feb4,272833441,0,0x0,8
tick,0x7ffe67f8feb4,272849583,0,0x0,8
tick,0x7ffe67f8feb4,272865033,0,0x0,8
tick,0x7ffe67f8feb4,272880191,0,0x0,8
tick,0x7ffe67f8feb4,272896044,0,0x0,8
tick,0x7ffe67f8feb4,272911314,0,0x0,8
tick,0x7ffe67f8feb4,272927519,0,0x0,8
tick,0x7ffe67f8feb4,272943336,0,0x0,8
tick,0x7ffe67f8feb4,272959322,0,0x0,8
tick,0x7ffe67f8feb4,272975316,0,0x0,8
tick,0x7ffe67f8feb4,272990525,0,0x0,8
tick,0x7ffe67f8feb4,273006345,0,0x0,8
tick,0x7ffe67f8feb4,273022124,0,0x0,8
tick,0x7ffe67f8feb4,273038250,0,0x0,8
tick,0x7ffe67f8feb4,273063229,0,0x0,8
tick,0x7ffe67f8feb4,273070191,0,0x0,8
tick,0x7ffe67f8feb4,273086398,0,0x0,8
tick,0x7ffe67f8feb4,273102025,0,0x0,8
tick,0x7ffe67f8feb4,273117620,0,0x0,8
tick,0x7ffe67f8feb4,273132042,0,0x0,8
tick,0x7ffe67f8feb4,273148117,0,0x0,8
tick,0x7ffe67f8feb4,273164006,0,0x0,8
tick,0x7ffe67f8feb4,273180037,0,0x0,8
tick,0x7ffe67f8feb4,273196096,0,0x0,8
tick,0x7ffe67f8feb4,273211180,0,0x0,8
tick,0x7ffe67f8feb4,273227190,0,0x0,8
tick,0x7ffe67f8feb4,273243469,0,0x0,8
tick,0x7ffe67f8feb4,273258887,0,0x0,8
tick,0x7ffe67f8feb4,273274046,0,0x0,8
tick,0x7ffe67f8feb4,273289879,0,0x0,8
tick,0x7ffe67f8feb4,273305030,0,0x0,8
tick,0x7ffe67f8feb4,273320239,0,0x0,8
tick,0x7ffe67f8feb4,273336076,0,0x0,8
tick,0x7ffe67f8feb4,273351871,0,0x0,8
tick,0x7ffe67f8feb4,273366608,0,0x0,8
tick,0x7ffe67f8feb4,273381744,0,0x0,8
tick,0x7ffe67f8feb4,273396836,0,0x0,8
tick,0x7ffe67f8feb4,273411919,0,0x0,8
tick,0x7ffe67f8feb4,273426950,0,0x0,8
tick,0x7ffe67f8feb4,273442103,0,0x0,8
tick,0x7ffe67f8feb4,273458330,0,0x0,8
tick,0x7ffe67f8feb4,273473034,0,0x0,8
tick,0x7ffe67f8feb4,273489017,0,0x0,8
tick,0x7ffe67f8feb4,273505211,0,0x0,8
tick,0x7ffe67f8feb4,273520142,0,0x0,8
tick,0x7ffe67f8feb4,273535077,0,0x0,8
tick,0x7ffe67f8feb4,273551456,0,0x0,8
tick,0x7ffe67f8feb4,273566062,0,0x0,8
tick,0x7ffe67f8feb4,273581214,0,0x0,8
tick,0x7ffe67f8feb4,273597222,0,0x0,8
tick,0x7ffe67f8feb4,273613171,0,0x0,8
tick,0x7ffe67f8feb4,273628711,0,0x0,8
tick,0x7ffe67f8feb4,273644743,0,0x0,8
tick,0x7ffe67f8feb4,273660777,0,0x0,8
tick,0x7ffe67f8feb4,273675709,0,0x0,8
tick,0x7ffe67f8feb4,273691721,0,0x0,8
tick,0x7ffe67f8feb4,273707743,0,0x0,8
tick,0x7ffe67f8feb4,273723078,0,0x0,8
tick,0x7ffe67f8feb4,273739116,0,0x0,8
tick,0x7ffe67f8feb4,273755069,0,0x0,8
tick,0x7ffe67f8feb4,273771104,0,0x0,8
tick,0x7ffe67f8feb4,273787240,0,0x0,8
tick,0x7ffe67f8feb4,273802488,0,0x0,8
tick,0x7ffe67f8feb4,273818457,0,0x0,8
tick,0x7ffe67f8feb4,273834544,0,0x0,8
tick,0x7ffe67f8feb4,273850453,0,0x0,8
tick,0x7ffe67f8feb4,273866044,0,0x0,8
tick,0x7ffe67f8feb4,273882069,0,0x0,8
tick,0x7ffe67f8feb4,273898085,0,0x0,8
tick,0x7ffe67f8feb4,273913742,0,0x0,8
tick,0x7ffe67f8feb4,273929849,0,0x0,8
tick,0x7ffe67f8feb4,273945088,0,0x0,8
tick,0x7ffe67f8feb4,273960857,0,0x0,8
tick,0x7ffe67f8feb4,273976067,0,0x0,8
tick,0x7ffe67f8feb4,273992158,0,0x0,8
tick,0x7ffe67f8feb4,274008157,0,0x0,8
tick,0x7ffe67f8feb4,274023041,0,0x0,8
tick,0x7ffe67f8feb4,274038974,0,0x0,8
tick,0x7ffe67f8feb4,274055031,0,0x0,8
tick,0x7ffe67f8feb4,274071015,0,0x0,8
tick,0x7ffe67f8feb4,274086191,0,0x0,8
tick,0x7ffe67f8feb4,274102006,0,0x0,8
tick,0x7ffe67f8feb4,274116999,0,0x0,8
tick,0x7ffe67f8feb4,274133120,0,0x0,8
tick,0x7ffe67f8feb4,274149122,0,0x0,8
tick,0x7ffe67f8feb4,274165083,0,0x0,8
tick,0x7ffe67f8feb4,274180301,0,0x0,8
tick,0x7ffe67f8feb4,274196059,0,0x0,8
tick,0x7ffe67f8feb4,274211267,0,0x0,8
tick,0x7ffe67f8feb4,274227426,0,0x0,8
tick,0x7ffe67f8feb4,274242928,0,0x0,8
tick,0x7ffe67f8feb4,274258902,0,0x0,8
tick,0x7ffe67f8feb4,274274321,0,0x0,8
tick,0x7ffe67f8feb4,274289253,0,0x0,8
tick,0x7ffe67f8feb4,274305206,0,0x0,8
tick,0x7ffe67f8feb4,274321113,0,0x0,8
tick,0x7ffe67f8feb4,274336295,0,0x0,8
tick,0x7ffe67f8feb4,274352305,0,0x0,8
tick,0x7ffe67f8feb4,274368622,0,0x0,8
tick,0x7ffe67f8feb4,274384296,0,0x0,8
tick,0x7ffe67f8feb4,274399380,0,0x0,8
tick,0x7ffe67f8feb4,274415034,0,0x0,8
tick,0x7ffe67f8feb4,274430398,0,0x0,8
tick,0x7ffe67f8feb4,274446072,0,0x0,8
tick,0x7ffe67f8feb4,274462108,0,0x0,8
tick,0x7ffe67f8feb4,274478150,0,0x0,8
tick,0x7ffe67f8feb4,274493416,0,0x0,8
tick,0x7ffe67f8feb4,274508553,0,0x0,8
tick,0x7ffe67f8feb4,274524083,0,0x0,8
tick,0x7ffe67f8feb4,274539036,0,0x0,8
tick,0x7ffe67f8feb4,274554240,0,0x0,8
tick,0x7ffe67f8feb4,274570122,0,0x0,8
tick,0x7ffe67f8feb4,274585821,0,0x0,8
tick,0x7ffe67f8feb4,274601592,0,0x0,8
tick,0x7ffe67f8feb4,274617265,0,0x0,8
tick,0x7ffe67f8feb4,274633191,0,0x0,8
tick,0x7ffe67f8feb4,274649183,0,0x0,8
tick,0x7ffe67f8feb4,274664454,0,0x0,8
tick,0x7ffe67f8feb4,274680527,0,0x0,8
tick,0x7ffe67f8feb4,274696182,0,0x0,8
tick,0x7ffe67f8feb4,274711357,0,0x0,8
tick,0x7ffe67f8feb4,274727372,0,0x0,8
tick,0x7ffe67f8feb4,274743261,0,0x0,8
tick,0x7ffe67f8feb4,274758475,0,0x0,8
tick,0x7ffe67f8feb4,274774302,0,0x0,8
tick,0x7ffe67f8feb4,274790311,0,0x0,8
tick,0x7ffe67f8feb4,274806271,0,0x0,8
tick,0x7ffe67f8feb4,274821839,0,0x0,8
tick,0x7ffe67f8feb4,274837230,0,0x0,8
tick,0x7ffe67f8feb4,274853202,0,0x0,8
tick,0x7ffe67f8feb4,274869198,0,0x0,8
tick,0x7ffe67f8feb4,274884103,0,0x0,8
tick,0x7ffe67f8feb4,274900206,0,0x0,8
tick,0x7ffe67f8feb4,274916097,0,0x0,8
tick,0x7ffe67f8feb4,274931247,0,0x0,8
tick,0x7ffe67f8feb4,274947162,0,0x0,8
tick,0x7ffe67f8feb4,274962254,0,0x0,8
tick,0x7ffe67f8feb4,274978272,0,0x0,8
tick,0x7ffe67f8feb4,274994373,0,0x0,8
tick,0x7ffe67f8feb4,275010429,0,0x0,8
tick,0x7ffe67f8feb4,275025438,0,0x0,8
tick,0x7ffe67f8feb4,275041286,0,0x0,8
tick,0x7ffe67f8feb4,275057348,0,0x0,8
tick,0x7ffe67f8feb4,275073315,0,0x0,8
tick,0x7ffe67f8feb4,275089290,0,0x0,8
tick,0x7ffe67f8feb4,275105285,0,0x0,8
tick,0x7ffe67f8feb4,275121341,0,0x0,8
tick,0x7ffe67f8feb4,275137249,0,0x0,8
tick,0x7ffe67f8feb4,275153257,0,0x0,8
tick,0x7ffe67f8feb4,275168655,0,0x0,8
tick,0x7ffe67f8feb4,275184039,0,0x0,8
tick,0x7ffe67f8feb4,275200048,0,0x0,8
tick,0x7ffe67f8feb4,275215253,0,0x0,8
tick,0x7ffe67f8feb4,275231122,0,0x0,8
tick,0x7ffe67f8feb4,275247318,0,0x0,8
tick,0x7ffe67f8feb4,275263211,0,0x0,8
tick,0x7ffe67f8feb4,275279290,0,0x0,8
tick,0x7ffe67f8feb4,275295221,0,0x0,8
tick,0x7ffe67f8feb4,275310680,0,0x0,8
tick,0x7ffe67f8feb4,275326226,0,0x0,8
tick,0x7ffe67f8feb4,275341794,0,0x0,8
tick,0x7ffe67f8feb4,275357844,0,0x0,8
tick,0x7ffe67f8feb4,275374100,0,0x0,8
tick,0x7ffe67f8feb4,275390212,0,0x0,8
tick,0x7ffe67f8feb4,275406142,0,0x0,8
tick,0x7ffe67f8feb4,275422121,0,0x0,8
tick,0x7ffe67f8feb4,275438237,0,0x0,8
tick,0x7ffe67f8feb4,275453410,0,0x0,8
tick,0x7ffe67f8feb4,275468588,0,0x0,8
tick,0x7ffe67f8feb4,275484626,0,0x0,8
tick,0x7ffe67f8feb4,275500590,0,0x0,8
tick,0x7ffe67f8feb4,275516628,0,0x0,8
tick,0x7ffe67f8feb4,275532580,0,0x0,8
tick,0x7ffe67f8feb4,275548635,0,0x0,8
tick,0x7ffe67f8feb4,275564100,0,0x0,8
tick,0x7ffe67f8feb4,275579693,0,0x0,8
tick,0x7ffe67f8feb4,275595144,0,0x0,8
tick,0x7ffe67f8feb4,275610247,0,0x0,8
tick,0x7ffe67f8feb4,275626101,0,0x0,8
tick,0x7ffe67f8feb4,275641254,0,0x0,8
tick,0x7ffe67f8feb4,275657356,0,0x0,8
tick,0x7ffe67f8feb4,275672951,0,0x0,8
tick,0x7ffe67f8feb4,275688895,0,0x0,8
tick,0x7ffe67f8feb4,275704380,0,0x0,8
tick,0x7ffe67f8feb4,275719982,0,0x0,8
tick,0x7ffe67f8feb4,275735178,0,0x0,8
tick,0x7ffe67f8feb4,275751051,0,0x0,8
tick,0x7ffe67f8feb4,275766232,0,0x0,8
tick,0x7ffe67f8feb4,275781643,0,0x0,8
tick,0x7ffe67f8feb4,275797597,0,0x0,8
tick,0x7ffe67f8feb4,275812787,0,0x0,8
tick,0x7ffe67f8feb4,275829200,0,0x0,8
tick,0x7ffe67f8feb4,275844638,0,0x0,8
tick,0x7ffe67f8feb4,275860701,0,0x0,8
tick,0x7ffe67f8feb4,275876095,0,0x0,8
tick,0x7ffe67f8feb4,275891901,0,0x0,8
tick,0x7ffe67f8feb4,275907575,0,0x0,8
tick,0x7ffe67f8feb4,275923240,0,0x0,8
tick,0x7ffe67f8feb4,275938614,0,0x0,8
tick,0x7ffe67f8feb4,275953429,0,0x0,8
tick,0x7ffe67f8feb4,275968633,0,0x0,8
tick,0x7ffe67f8feb4,275984139,0,0x0,8
tick,0x7ffe67f8feb4,276000052,0,0x0,8
tick,0x7ffe67f8feb4,276015097,0,0x0,8
tick,0x7ffe67f8feb4,276031079,0,0x0,8
tick,0x7ffe67f8feb4,276047088,0,0x0,8
tick,0x7ffe67f8feb4,276063105,0,0x0,8
tick,0x7ffe67f8feb4,276079105,0,0x0,8
tick,0x7ffe67f8feb4,276094080,0,0x0,8
tick,0x7ffe67f8feb4,276109093,0,0x0,8
tick,0x7ffe67f8feb4,276125460,0,0x0,8
tick,0x7ffe67f8feb4,276141117,0,0x0,8
tick,0x7ffe67f8feb4,276157031,0,0x0,8
tick,0x7ffe67f8feb4,276172510,0,0x0,8
tick,0x7ffe67f8feb4,276188039,0,0x0,8
tick,0x7ffe67f8feb4,276203867,0,0x0,8
tick,0x7ffe67f8feb4,276219055,0,0x0,8
tick,0x7ffe67f8feb4,276235030,0,0x0,8
tick,0x7ffe67f8feb4,276250148,0,0x0,8
tick,0x7ffe67f8feb4,276265686,0,0x0,8
tick,0x7ffe67f8feb4,276281574,0,0x0,8
tick,0x7ffe67f8feb4,276297619,0,0x0,8
tick,0x7ffe67f8feb4,276313604,0,0x0,8
tick,0x7ffe67f8feb4,276328627,0,0x0,8
tick,0x7ffe67f8feb4,276344033,0,0x0,8
tick,0x7ffe67f8feb4,276360121,0,0x0,8
tick,0x7ffe67f8feb4,276375239,0,0x0,8
tick,0x7ffe67f8feb4,276391087,0,0x0,8
tick,0x7ffe67f8feb4,276406240,0,0x0,8
tick,0x7ffe67f8feb4,276423334,0,0x0,8
tick,0x7ffe67f8feb4,276437546,0,0x0,8
tick,0x7ffe67f8feb4,276453164,0,0x0,8
tick,0x7ffe67f8feb4,276469203,0,0x0,8
tick,0x7ffe67f8feb4,276485062,0,0x0,8
tick,0x7ffe67f8feb4,276501034,0,0x0,8
tick,0x7ffe67f8feb4,276517026,0,0x0,8
tick,0x7ffe67f8feb4,276532104,0,0x0,8
tick,0x7ffe67f8feb4,276548038,0,0x0,8
tick,0x7ffe67f8feb4,276564050,0,0x0,8
tick,0x7ffe67f8feb4,276580040,0,0x0,8
tick,0x7ffe67f8feb4,276596066,0,0x0,8
tick,0x7ffe67f8feb4,276611452,0,0x0,8
tick,0x7ffe67f8feb4,276627085,0,0x0,8
tick,0x7ffe67f8feb4,276642487,0,0x0,8
tick,0x7ffe67f8feb4,276658769,0,0x0,8
tick,0x7ffe67f8feb4,276674308,0,0x0,8
tick,0x7ffe67f8feb4,276690482,0,0x0,8
tick,0x7ffe67f8feb4,276705799,0,0x0,8
tick,0x7ffe67f8feb4,276721269,0,0x0,8
tick,0x7ffe67f8feb4,276736221,0,0x0,8
tick,0x7ffe67f8feb4,276751592,0,0x0,8
tick,0x7ffe67f8feb4,276767617,0,0x0,8
tick,0x7ffe67f8feb4,276783656,0,0x0,8
tick,0x7ffe67f8feb4,276799638,0,0x0,8
tick,0x7ffe67f8feb4,276815042,0,0x0,8
tick,0x7ffe67f8feb4,276830269,0,0x0,8
tick,0x7ffe67f8feb4,276846035,0,0x0,8
tick,0x7ffe67f8feb4,276862043,0,0x0,8
tick,0x7ffe67f8feb4,276878070,0,0x0,8
tick,0x7ffe67f8feb4,276894069,0,0x0,8
tick,0x7ffe67f8feb4,276910058,0,0x0,8
tick,0x7ffe67f8feb4,276925237,0,0x0,8
tick,0x7ffe67f8feb4,276940993,0,0x0,8
tick,0x7ffe67f8feb4,276957183,0,0x0,8
tick,0x7ffe67f8feb4,276973040,0,0x0,8
tick,0x7ffe67f8feb4,276988631,0,0x0,8
tick,0x7ffe67f8feb4,277004115,0,0x0,8
tick,0x7ffe67f8feb4,277019745,0,0x0,8
tick,0x7ffe67f8feb4,277035220,0,0x0,8
tick,0x7ffe67f8feb4,277051222,0,0x0,8
tick,0x7ffe67f8feb4,277067196,0,0x0,8
tick,0x7ffe67f8feb4,277083153,0,0x0,8
tick,0x7ffe67f8feb4,277099209,0,0x0,8
tick,0x7ffe67f8feb4,277115061,0,0x0,8
tick,0x7ffe67f8feb4,277130858,0,0x0,8
tick,0x7ffe67f8feb4,277146040,0,0x0,8
tick,0x7ffe67f8feb4,277161239,0,0x0,8
tick,0x7ffe67f8feb4,277177069,0,0x0,8
tick,0x7ffe67f8feb4,277192993,0,0x0,8
tick,0x7ffe67f8feb4,277208113,0,0x0,8
tick,0x7ffe67f8feb4,277223590,0,0x0,8
tick,0x7ffe67f8feb4,277239767,0,0x0,8
tick,0x7ffe67f8feb4,277255118,0,0x0,8
tick,0x7ffe67f8feb4,277270588,0,0x0,8
tick,0x7ffe67f8feb4,277286262,0,0x0,8
tick,0x7ffe67f8feb4,277301656,0,0x0,8
tick,0x7ffe67f8feb4,277316286,0,0x0,8
tick,0x7ffe67f8feb4,277331678,0,0x0,8
tick,0x7ffe67f8feb4,277347707,0,0x0,8
tick,0x7ffe67f8feb4,277363135,0,0x0,8
tick,0x7ffe67f8feb4,277378738,0,0x0,8
tick,0x7ffe67f8feb4,277394303,0,0x0,8
tick,0x7ffe67f8feb4,277410098,0,0x0,8
tick,0x7ffe67f8feb4,277425065,0,0x0,8
tick,0x7ffe67f8feb4,277441681,0,0x0,8
tick,0x7ffe67f8feb4,277455688,0,0x0,8
tick,0x7ffe67f8feb4,277472031,0,0x0,8
tick,0x7ffe67f8feb4,277486715,0,0x0,8
tick,0x7ffe67f8feb4,277502925,0,0x0,8
tick,0x7ffe67f8feb4,277517697,0,0x0,8
tick,0x7ffe67f8feb4,277532782,0,0x0,8
tick,0x7ffe67f8feb4,277548267,0,0x0,8
tick,0x7ffe67f8feb4,277563327,0,0x0,8
tick,0x7ffe67f8feb4,277579345,0,0x0,8
tick,0x7ffe67f8feb4,277595070,0,0x0,8
tick,0x7ffe67f8feb4,277610296,0,0x0,8
tick,0x7ffe67f8feb4,277626055,0,0x0,8
tick,0x7ffe67f8feb4,277641637,0,0x0,8
tick,0x7ffe67f8feb4,277657768,0,0x0,8
tick,0x7ffe67f8feb4,277673641,0,0x0,8
tick,0x7ffe67f8feb4,277689682,0,0x0,8
tick,0x7ffe67f8feb4,277705643,0,0x0,8
tick,0x7ffe67f8feb4,277721645,0,0x0,8
tick,0x7ffe67f8feb4,277737654,0,0x0,8
tick,0x7ffe67f8feb4,277753148,0,0x0,8
tick,0x7ffe67f8feb4,277769144,0,0x0,8
tick,0x7ffe67f8feb4,277785157,0,0x0,8
tick,0x7ffe67f8feb4,277801251,0,0x0,8
tick,0x7ffe67f8feb4,277817163,0,0x0,8
tick,0x7ffe67f8feb4,277833160,0,0x0,8
tick,0x7ffe67f8feb4,277849259,0,0x0,8
tick,0x7ffe67f8feb4,277865154,0,0x0,8
tick,0x7ffe67f8feb4,277881175,0,0x0,8
tick,0x7ffe67f8feb4,277897314,0,0x0,8
tick,0x7ffe67f8feb4,277912424,0,0x0,8
tick,0x7ffe67f8feb4,277928163,0,0x0,8
tick,0x7ffe67f8feb4,277943938,0,0x0,8
tick,0x7ffe67f8feb4,277959181,0,0x0,8
tick,0x7ffe67f8feb4,277975224,0,0x0,8
tick,0x7ffe67f8feb4,277990366,0,0x0,8
tick,0x7ffe67f8feb4,278005732,0,0x0,8
tick,0x7ffe67f8feb4,278021205,0,0x0,8
tick,0x7ffe67f8feb4,278037201,0,0x0,8
tick,0x7ffe67f8feb4,278053286,0,0x0,8
tick,0x7ffe67f8feb4,278069211,0,0x0,8
tick,0x7ffe67f8feb4,278085301,0,0x0,8
tick,0x7ffe67f8feb4,278100209,0,0x0,8
tick,0x7ffe67f8feb4,278116029,0,0x0,8
tick,0x7ffe67f8feb4,278131225,0,0x0,8
tick,0x7ffe67f8feb4,278147228,0,0x0,8
tick,0x7ffe67f8feb4,278162416,0,0x0,8
tick,0x7ffe67f8feb4,278178234,0,0x0,8
tick,0x7ffe67f8feb4,278194027,0,0x0,8
tick,0x7ffe67f8feb4,278209259,0,0x0,8
tick,0x7ffe67f8feb4,278225235,0,0x0,8
tick,0x7ffe67f8feb4,278241188,0,0x0,8
tick,0x7ffe67f8feb4,278256914,0,0x0,8
tick,0x7ffe67f8feb4,278272168,0,0x0,8
tick,0x7ffe67f8feb4,278287997,0,0x0,8
tick,0x7ffe67f8feb4,278303221,0,0x0,8
tick,0x7ffe67f8feb4,278319202,0,0x0,8
tick,0x7ffe67f8feb4,278335015,0,0x0,8
tick,0x7ffe67f8feb4,278350566,0,0x0,8
tick,0x7ffe67f8feb4,278366045,0,0x0,8
tick,0x7ffe67f8feb4,278382044,0,0x0,8
tick,0x7ffe67f8feb4,278398064,0,0x0,8
tick,0x7ffe67f8feb4,278413086,0,0x0,8
tick,0x7ffe67f8feb4,278429054,0,0x0,8
tick,0x7ffe67f8feb4,278445041,0,0x0,8
tick,0x7ffe67f8feb4,278461174,0,0x0,8
tick,0x7ffe67f8feb4,278477185,0,0x0,8
tick,0x7ffe67f8feb4,278492555,0,0x0,8
tick,0x7ffe67f8feb4,278508221,0,0x0,8
tick,0x7ffe67f8feb4,278524169,0,0x0,8
tick,0x7ffe67f8feb4,278539569,0,0x0,8
tick,0x7ffe67f8feb4,278555091,0,0x0,8
tick,0x7ffe67f8feb4,278570756,0,0x0,8
tick,0x7ffe67f8feb4,278586050,0,0x0,8
tick,0x7ffe67f8feb4,278601538,0,0x0,8
tick,0x7ffe67f8feb4,278617235,0,0x0,8
tick,0x7ffe67f8feb4,278632674,0,0x0,8
tick,0x7ffe67f8feb4,278648500,0,0x0,8
tick,0x7ffe67f8feb4,278664566,0,0x0,8
tick,0x7ffe67f8feb4,278680409,0,0x0,8
tick,0x7ffe67f8feb4,278695735,0,0x0,8
tick,0x7ffe67f8feb4,278711640,0,0x0,8
tick,0x7ffe67f8feb4,278727622,0,0x0,8
tick,0x7ffe67f8feb4,278742917,0,0x0,8
tick,0x7ffe67f8feb4,278758436,0,0x0,8
tick,0x7ffe67f8feb4,278774473,0,0x0,8
tick,0x7ffe67f8feb4,278790536,0,0x0,8
tick,0x7ffe67f8feb4,278806391,0,0x0,8
tick,0x7ffe67f8feb4,278822242,0,0x0,8
tick,0x7ffe67f8feb4,278838038,0,0x0,8
tick,0x7ffe67f8feb4,278853552,0,0x0,8
tick,0x7ffe67f8feb4,278868698,0,0x0,8
tick,0x7ffe67f8feb4,278884569,0,0x0,8
tick,0x7ffe67f8feb4,278900223,0,0x0,8
tick,0x7ffe67f8feb4,278915619,0,0x0,8
tick,0x7ffe67f8feb4,278930999,0,0x0,8
tick,0x7ffe67f8feb4,278946054,0,0x0,8
tick,0x7ffe67f8feb4,278961650,0,0x0,8
tick,0x7ffe67f8feb4,278976927,0,0x0,8
tick,0x7ffe67f8feb4,278991943,0,0x0,8
tick,0x7ffe67f8feb4,279007929,0,0x0,8
tick,0x7ffe67f8feb4,279023249,0,0x0,8
tick,0x7ffe67f8feb4,279038123,0,0x0,8
tick,0x7ffe67f8feb4,279054113,0,0x0,8
tick,0x7ffe67f8feb4,279070076,0,0x0,8
tick,0x7ffe67f8feb4,279086092,0,0x0,8
tick,0x7ffe67f8feb4,279102097,0,0x0,8
tick,0x7ffe67f8feb4,279118090,0,0x0,8
tick,0x7ffe67f8feb4,279134145,0,0x0,8
tick,0x7ffe67f8feb4,279150129,0,0x0,8
tick,0x7ffe67f8feb4,279165036,0,0x0,8
tick,0x7ffe67f8feb4,279180225,0,0x0,8
tick,0x7ffe67f8feb4,279196214,0,0x0,8
tick,0x7ffe67f8feb4,279211235,0,0x0,8
tick,0x7ffe67f8feb4,279227110,0,0x0,8
tick,0x7ffe67f8feb4,279242273,0,0x0,8
tick,0x7ffe67f8feb4,279258172,0,0x0,8
tick,0x7ffe67f8feb4,279273672,0,0x0,8
tick,0x7ffe67f8feb4,279288823,0,0x0,8
tick,0x7ffe67f8feb4,279304900,0,0x0,8
tick,0x7ffe67f8feb4,279320938,0,0x0,8
tick,0x7ffe67f8feb4,279336087,0,0x0,8
tick,0x7ffe67f8feb4,279352135,0,0x0,8
tick,0x7ffe67f8feb4,279368125,0,0x0,8
tick,0x7ffe67f8feb4,279383973,0,0x0,8
tick,0x7ffe67f8feb4,279400270,0,0x0,8
tick,0x7ffe67f8feb4,279415718,0,0x0,8
tick,0x7ffe67f8feb4,279431773,0,0x0,8
tick,0x7ffe67f8feb4,279447384,0,0x0,8
tick,0x7ffe67f8feb4,279463583,0,0x0,8
tick,0x7ffe67f8feb4,279478588,0,0x0,8
tick,0x7ffe67f8feb4,279494332,0,0x0,8
tick,0x7ffe67f8feb4,279509847,0,0x0,8
tick,0x7ffe67f8feb4,279525420,0,0x0,8
tick,0x7ffe67f8feb4,279540869,0,0x0,8
tick,0x7ffe67f8feb4,279557318,0,0x0,8
tick,0x7ffe67f8feb4,279572883,0,0x0,8
tick,0x7ffe67f8feb4,279588922,0,0x0,8
tick,0x7ffe67f8feb4,279604050,0,0x0,8
tick,0x7ffe67f8feb4,279619952,0,0x0,8
tick,0x7ffe67f8feb4,279635362,0,0x0,8
tick,0x7ffe67f8feb4,279651025,0,0x0,8
tick,0x7ffe67f8feb4,279666257,0,0x0,8
tick,0x7ffe67f8feb4,279681634,0,0x0,8
tick,0x7ffe67f8feb4,279697484,0,0x0,8
tick,0x7ffe67f8feb4,279712924,0,0x0,8
tick,0x7ffe67f8feb4,279728152,0,0x0,8
tick,0x7ffe67f8feb4,279744183,0,0x0,8
tick,0x7ffe67f8feb4,279759570,0,0x0,8
tick,0x7ffe67f8feb4,279775504,0,0x0,8
tick,0x7ffe67f8feb4,279791181,0,0x0,8
tick,0x7ffe67f8feb4,279807755,0,0x0,8
tick,0x7ffe67f8feb4,279823212,0,0x0,8
tick,0x7ffe67f8feb4,279839212,0,0x0,8
tick,0x7ffe67f8feb4,279855326,0,0x0,8
tick,0x7ffe67f8feb4,279871246,0,0x0,8
tick,0x7ffe67f8feb4,279887340,0,0x0,8
tick,0x7ffe67f8feb4,279902976,0,0x0,8
tick,0x7ffe67f8feb4,279919024,0,0x0,8
tick,0x7ffe67f8feb4,279934485,0,0x0,8
tick,0x7ffe67f8feb4,279950451,0,0x0,8
tick,0x7ffe67f8feb4,279966092,0,0x0,8
tick,0x7ffe67f8feb4,279982164,0,0x0,8
tick,0x7ffe67f8feb4,279997957,0,0x0,8
tick,0x7ffe67f8feb4,280014162,0,0x0,8
tick,0x7ffe67f8feb4,280029027,0,0x0,8
tick,0x7ffe67f8feb4,280044300,0,0x0,8
tick,0x7ffe67f8feb4,280060282,0,0x0,8
tick,0x7ffe67f8feb4,280076250,0,0x0,8
tick,0x7ffe67f8feb4,280092266,0,0x0,8
tick,0x7ffe67f8feb4,280108270,0,0x0,8
tick,0x7ffe67f8feb4,280124066,0,0x0,8
tick,0x7ffe67f8feb4,280139280,0,0x0,8
tick,0x7ffe67f8feb4,280155110,0,0x0,8
tick,0x7ffe67f8feb4,280171037,0,0x0,8
tick,0x7ffe67f8feb4,280186154,0,0x0,8
tick,0x7ffe67f8feb4,280201373,0,0x0,8
tick,0x7ffe67f8feb4,280217212,0,0x0,8
tick,0x7ffe67f8feb4,280233183,0,0x0,8
tick,0x7ffe67f8feb4,280249173,0,0x0,8
tick,0x7ffe67f8feb4,280265061,0,0x0,8
tick,0x7ffe67f8feb4,280280202,0,0x0,8
tick,0x7ffe67f8feb4,280296106,0,0x0,8
tick,0x7ffe67f8feb4,280312173,0,0x0,8
tick,0x7ffe67f8feb4,280328201,0,0x0,8
tick,0x7ffe67f8feb4,280344206,0,0x0,8
tick,0x7ffe67f8feb4,280360191,0,0x0,8
tick,0x7ffe67f8feb4,280376097,0,0x0,8
tick,0x7ffe67f8feb4,280392124,0,0x0,8
tick,0x7ffe67f8feb4,280408225,0,0x0,8
tick,0x7ffe67f8feb4,280423500,0,0x0,8
tick,0x7ffe67f8feb4,280438716,0,0x0,8
tick,0x7ffe67f8feb4,280454351,0,0x0,8
tick,0x7ffe67f8feb4,280469268,0,0x0,8
tick,0x7ffe67f8feb4,280485133,0,0x0,8
tick,0x7ffe67f8feb4,280500586,0,0x0,8
tick,0x7ffe67f8feb4,280516117,0,0x0,8
tick,0x7ffe67f8feb4,280532165,0,0x0,8
tick,0x7ffe67f8feb4,280547308,0,0x0,8
tick,0x7ffe67f8feb4,280563005,0,0x0,8
tick,0x7ffe67f8feb4,280577988,0,0x0,8
tick,0x7ffe67f8feb4,280593690,0,0x0,8
tick,0x7ffe67f8feb4,280609716,0,0x0,8
tick,0x7ffe67f8feb4,280625111,0,0x0,8
tick,0x7ffe67f8feb4,280641481,0,0x0,8
tick,0x7ffe67f8feb4,280656861,0,0x0,8
tick,0x7ffe67f8feb4,280672790,0,0x0,8
tick,0x7ffe67f8feb4,280688770,0,0x0,8
tick,0x7ffe67f8feb4,280704413,0,0x0,8
tick,0x7ffe67f8feb4,280719583,0,0x0,8
tick,0x7ffe67f8feb4,280735098,0,0x0,8
tick,0x7ffe67f8feb4,280751385,0,0x0,8
tick,0x7ffe67f8feb4,280767429,0,0x0,8
tick,0x7ffe67f8feb4,280782358,0,0x0,8
tick,0x7ffe67f8feb4,280797577,0,0x0,8
tick,0x7ffe67f8feb4,280813766,0,0x0,8
tick,0x7ffe67f8feb4,280829290,0,0x0,8
tick,0x7ffe67f8feb4,280844949,0,0x0,8
tick,0x7ffe67f8feb4,280860982,0,0x0,8
tick,0x7ffe67f8feb4,280876671,0,0x0,8
tick,0x7ffe67f8feb4,280892382,0,0x0,8
tick,0x7ffe67f8feb4,280908932,0,0x0,8
tick,0x7ffe67f8feb4,280923968,0,0x0,8
tick,0x7ffe67f8feb4,280940094,0,0x0,8
tick,0x7ffe67f8feb4,280956304,0,0x0,8
tick,0x7ffe67f8feb4,280971929,0,0x0,8
tick,0x7ffe67f8feb4,280986890,0,0x0,8
tick,0x7ffe67f8feb4,281002399,0,0x0,8
tick,0x7ffe67f8feb4,281018358,0,0x0,8
tick,0x7ffe67f8feb4,281033937,0,0x0,8
tick,0x7ffe67f8feb4,281048766,0,0x0,8
tick,0x7ffe67f8feb4,281064564,0,0x0,8
tick,0x7ffe67f8feb4,281080529,0,0x0,8
tick,0x7ffe67f8feb4,281096581,0,0x0,8
tick,0x7ffe67f8feb4,281112548,0,0x0,8
tick,0x7ffe67f8feb4,281128592,0,0x0,8
tick,0x7ffe67f8feb4,281144182,0,0x0,8
tick,0x7ffe67f8feb4,281160159,0,0x0,8
tick,0x7ffe67f8feb4,281176353,0,0x0,8
tick,0x7ffe67f8feb4,281192352,0,0x0,8
tick,0x7ffe67f8feb4,281208147,0,0x0,8
tick,0x7ffe67f8feb4,281224137,0,0x0,8
tick,0x7ffe67f8feb4,281240145,0,0x0,8
tick,0x7ffe67f8feb4,281256155,0,0x0,8
tick,0x7ffe67f8feb4,281272154,0,0x0,8
tick,0x7ffe67f8feb4,281288160,0,0x0,8
tick,0x7ffe67f8feb4,281304152,0,0x0,8
tick,0x7ffe67f8feb4,281320173,0,0x0,8
tick,0x7ffe67f8feb4,281336152,0,0x0,8
tick,0x7ffe67f8feb4,281352196,0,0x0,8
tick,0x7ffe67f8feb4,281368210,0,0x0,8
tick,0x7ffe67f8feb4,281384189,0,0x0,8
tick,0x7ffe67f8feb4,281399384,0,0x0,8
tick,0x7ffe67f8feb4,281415284,0,0x0,8
tick,0x7ffe67f8feb4,281430472,0,0x0,8
tick,0x7ffe67f8feb4,281446052,0,0x0,8
tick,0x7ffe67f8feb4,281461808,0,0x0,8
tick,0x7ffe67f8feb4,281477509,0,0x0,8
tick,0x7ffe67f8feb4,281492851,0,0x0,8
tick,0x7ffe67f8feb4,281508002,0,0x0,8
tick,0x7ffe67f8feb4,281523410,0,0x0,8
tick,0x7ffe67f8feb4,281539077,0,0x0,8
tick,0x7ffe67f8feb4,281554710,0,0x0,8
tick,0x7ffe67f8feb4,281570607,0,0x0,8
tick,0x7ffe67f8feb4,281586286,0,0x0,8
tick,0x7ffe67f8feb4,281602313,0,0x0,8
tick,0x7ffe67f8feb4,281618379,0,0x0,8
tick,0x7ffe67f8feb4,281633943,0,0x0,8
tick,0x7ffe67f8feb4,281649472,0,0x0,8
tick,0x7ffe67f8feb4,281665657,0,0x0,8
tick,0x7ffe67f8feb4,281681371,0,0x0,8
tick,0x7ffe67f8feb4,281697123,0,0x0,8
tick,0x7ffe67f8feb4,281713066,0,0x0,8
tick,0x7ffe67f8feb4,281728287,0,0x0,8
tick,0x7ffe67f8feb4,281744296,0,0x0,8
tick,0x7ffe67f8feb4,281759268,0,0x0,8
tick,0x7ffe67f8feb4,281775077,0,0x0,8
tick,0x7ffe67f8feb4,281790792,0,0x0,8
tick,0x7ffe67f8feb4,281806196,0,0x0,8
tick,0x7ffe67f8feb4,281821451,0,0x0,8
tick,0x7ffe67f8feb4,281837465,0,0x0,8
tick,0x7ffe67f8feb4,281852934,0,0x0,8
tick,0x7ffe67f8feb4,281869086,0,0x0,8
tick,0x7ffe67f8feb4,281885419,0,0x0,8
tick,0x7ffe67f8feb4,281900083,0,0x0,8
tick,0x7ffe67f8feb4,281915462,0,0x0,8
tick,0x7ffe67f8feb4,281931465,0,0x0,8
tick,0x7ffe67f8feb4,281947295,0,0x0,8
tick,0x7ffe67f8feb4,281962675,0,0x0,8
tick,0x7ffe67f8feb4,281978602,0,0x0,8
tick,0x7ffe67f8feb4,281994619,0,0x0,8
tick,0x7ffe67f8feb4,282009550,0,0x0,8
tick,0x7ffe67f8feb4,282024631,0,0x0,8
tick,0x7ffe67f8feb4,282040692,0,0x0,8
tick,0x7ffe67f8feb4,282056275,0,0x0,8
tick,0x7ffe67f8feb4,282072046,0,0x0,8
tick,0x7ffe67f8feb4,282088061,0,0x0,8
tick,0x7ffe67f8feb4,282103983,0,0x0,8
tick,0x7ffe67f8feb4,282120126,0,0x0,8
tick,0x7ffe67f8feb4,282135994,0,0x0,8
tick,0x7ffe67f8feb4,282151005,0,0x0,8
tick,0x7ffe67f8feb4,282166999,0,0x0,8
tick,0x7ffe67f8feb4,282183002,0,0x0,8
tick,0x7ffe67f8feb4,282199006,0,0x0,8
tick,0x7ffe67f8feb4,282214013,0,0x0,8
tick,0x7ffe67f8feb4,282229014,0,0x0,8
tick,0x7ffe67f8feb4,282244014,0,0x0,8
tick,0x7ffe67f8feb4,282259651,0,0x0,8
tick,0x7ffe67f8feb4,282275808,0,0x0,8
tick,0x7ffe67f8feb4,282291745,0,0x0,8
tick,0x7ffe67f8feb4,282306745,0,0x0,8
tick,0x7ffe67f8feb4,282321740,0,0x0,8
tick,0x7ffe67f8feb4,282337803,0,0x0,8
tick,0x7ffe67f8feb4,282352757,0,0x0,8
tick,0x7ffe67f8feb4,282367801,0,0x0,8
tick,0x7ffe67f8feb4,282383122,0,0x0,8
tick,0x7ffe67f8feb4,282399178,0,0x0,8
tick,0x7ffe67f8feb4,282414743,0,0x0,8
tick,0x7ffe67f8feb4,282430031,0,0x0,8
tick,0x7ffe67f8feb4,282446094,0,0x0,8
tick,0x7ffe67f8feb4,282461324,0,0x0,8
tick,0x7ffe67f8feb4,282476667,0,0x0,8
tick,0x7ffe67f8feb4,282491962,0,0x0,8
tick,0x7ffe67f8feb4,282507608,0,0x0,8
tick,0x7ffe67f8feb4,282522844,0,0x0,8
tick,0x7ffe67f8feb4,282537749,0,0x0,8
tick,0x7ffe67f8feb4,282553202,0,0x0,8
tick,0x7ffe67f8feb4,282568661,0,0x0,8
tick,0x7ffe67f8feb4,282584056,0,0x0,8
tick,0x7ffe67f8feb4,282599706,0,0x0,8
tick,0x7ffe67f8feb4,282615379,0,0x0,8
tick,0x7ffe67f8feb4,282630620,0,0x0,8
tick,0x7ffe67f8feb4,282646605,0,0x0,8
tick,0x7ffe67f8feb4,282662653,0,0x0,8
tick,0x7ffe67f8feb4,282677904,0,0x0,8
tick,0x7ffe67f8feb4,282694290,0,0x0,8
tick,0x7ffe67f8feb4,282709720,0,0x0,8
tick,0x7ffe67f8feb4,282724643,0,0x0,8
tick,0x7ffe67f8feb4,282739877,0,0x0,8
tick,0x7ffe67f8feb4,282755710,0,0x0,8
tick,0x7ffe67f8feb4,282771715,0,0x0,8
tick,0x7ffe67f8feb4,282787710,0,0x0,8
tick,0x7ffe67f8feb4,282803608,0,0x0,8
tick,0x7ffe67f8feb4,282819596,0,0x0,8
tick,0x7ffe67f8feb4,282834980,0,0x0,8
tick,0x7ffe67f8feb4,282850144,0,0x0,8
tick,0x7ffe67f8feb4,282865640,0,0x0,8
tick,0x7ffe67f8feb4,282880720,0,0x0,8
tick,0x7ffe67f8feb4,282896656,0,0x0,8
tick,0x7ffe67f8feb4,282912612,0,0x0,8
tick,0x7ffe67f8feb4,282928639,0,0x0,8
tick,0x7ffe67f8feb4,282944642,0,0x0,8
tick,0x7ffe67f8feb4,282960048,0,0x0,8
tick,0x7ffe67f8feb4,282975485,0,0x0,8
tick,0x7ffe67f8feb4,282990933,0,0x0,8
tick,0x7ffe67f8feb4,283006925,0,0x0,8
tick,0x7ffe67f8feb4,283022062,0,0x0,8
tick,0x7ffe67f8feb4,283037979,0,0x0,8
tick,0x7ffe67f8feb4,283053986,0,0x0,8
tick,0x7ffe67f8feb4,283069170,0,0x0,8
tick,0x7ffe67f8feb4,283085154,0,0x0,8
tick,0x7ffe67f8feb4,283101145,0,0x0,8
tick,0x7ffe67f8feb4,283117130,0,0x0,8
tick,0x7ffe67f8feb4,283133142,0,0x0,8
tick,0x7ffe67f8feb4,283149187,0,0x0,8
tick,0x7ffe67f8feb4,283164622,0,0x0,8
tick,0x7ffe67f8feb4,283180195,0,0x0,8
tick,0x7ffe67f8feb4,283196214,0,0x0,8
tick,0x7ffe67f8feb4,283211932,0,0x0,8
tick,0x7ffe67f8feb4,283227636,0,0x0,8
tick,0x7ffe67f8feb4,283243663,0,0x0,8
tick,0x7ffe67f8feb4,283259660,0,0x0,8
tick,0x7ffe67f8feb4,283275007,0,0x0,8
tick,0x7ffe67f8feb4,283290807,0,0x0,8
tick,0x7ffe67f8feb4,283305904,0,0x0,8
tick,0x7ffe67f8feb4,283321300,0,0x0,8
tick,0x7ffe67f8feb4,283336346,0,0x0,8
tick,0x7ffe67f8feb4,283352178,0,0x0,8
tick,0x7ffe67f8feb4,283368162,0,0x0,8
tick,0x7ffe67f8feb4,283384226,0,0x0,8
tick,0x7ffe67f8feb4,283399700,0,0x0,8
tick,0x7ffe67f8feb4,283415680,0,0x0,8
tick,0x7ffe67f8feb4,283431053,0,0x0,8
tick,0x7ffe67f8feb4,283446496,0,0x0,8
tick,0x7ffe67f8feb4,283462540,0,0x0,8
tick,0x7ffe67f8feb4,283478593,0,0x0,8
tick,0x7ffe67f8feb4,283494506,0,0x0,8
tick,0x7ffe67f8feb4,283509241,0,0x0,8
tick,0x7ffe67f8feb4,283524738,0,0x0,8
tick,0x7ffe67f8feb4,283540079,0,0x0,8
tick,0x7ffe67f8feb4,283555907,0,0x0,8
tick,0x7ffe67f8feb4,283570916,0,0x0,8
tick,0x7ffe67f8feb4,283586801,0,0x0,8
tick,0x7ffe67f8feb4,283601974,0,0x0,8
tick,0x7ffe67f8feb4,283618383,0,0x0,8
tick,0x7ffe67f8feb4,283634101,0,0x0,8
tick,0x7ffe67f8feb4,283650360,0,0x0,8
tick,0x7ffe67f8feb4,283666370,0,0x0,8
tick,0x7ffe67f8feb4,283681568,0,0x0,8
tick,0x7ffe67f8feb4,283696502,0,0x0,8
tick,0x7ffe67f8feb4,283712643,0,0x0,8
tick,0x7ffe67f8feb4,283727903,0,0x0,8
tick,0x7ffe67f8feb4,283743258,0,0x0,8
tick,0x7ffe67f8feb4,283758226,0,0x0,8
tick,0x7ffe67f8feb4,283774001,0,0x0,8
tick,0x7ffe67f8feb4,283789304,0,0x0,8
tick,0x7ffe67f8feb4,283804995,0,0x0,8
tick,0x7ffe67f8feb4,283820955,0,0x0,8
tick,0x7ffe67f8feb4,283836048,0,0x0,8
tick,0x7ffe67f8feb4,283852083,0,0x0,8
tick,0x7ffe67f8feb4,283867963,0,0x0,8
tick,0x7ffe67f8feb4,283883746,0,0x0,8
tick,0x7ffe67f8feb4,283899487,0,0x0,8
tick,0x7ffe67f8feb4,283914661,0,0x0,8
tick,0x7ffe67f8feb4,283930684,0,0x0,8
tick,0x7ffe67f8feb4,283945982,0,0x0,8
tick,0x7ffe67f8feb4,283961934,0,0x0,8
tick,0x7ffe67f8feb4,283977061,0,0x0,8
tick,0x7ffe67f8feb4,283992218,0,0x0,8
tick,0x7ffe67f8feb4,284008411,0,0x0,8
tick,0x7ffe67f8feb4,284024381,0,0x0,8
tick,0x7ffe67f8feb4,284039300,0,0x0,8
tick,0x7ffe67f8feb4,284055205,0,0x0,8
tick,0x7ffe67f8feb4,284071110,0,0x0,8
tick,0x7ffe67f8feb4,284087065,0,0x0,8
tick,0x7ffe67f8feb4,284103069,0,0x0,8
tick,0x7ffe67f8feb4,284119042,0,0x0,8
tick,0x7ffe67f8feb4,284135033,0,0x0,8
tick,0x7ffe67f8feb4,284150644,0,0x0,8
tick,0x7ffe67f8feb4,284166210,0,0x0,8
tick,0x7ffe67f8feb4,284181889,0,0x0,8
tick,0x7ffe67f8feb4,284197709,0,0x0,8
tick,0x7ffe67f8feb4,284213287,0,0x0,8
tick,0x7ffe67f8feb4,284229404,0,0x0,8
tick,0x7ffe67f8feb4,284244625,0,0x0,8
tick,0x7ffe67f8feb4,284260316,0,0x0,8
tick,0x7ffe67f8feb4,284275525,0,0x0,8
tick,0x7ffe67f8feb4,284291161,0,0x0,8
tick,0x7ffe67f8feb4,284306414,0,0x0,8
tick,0x7ffe67f8feb4,284322275,0,0x0,8
tick,0x7ffe67f8feb4,284337710,0,0x0,8
tick,0x7ffe67f8feb4,284352994,0,0x0,8
tick,0x7ffe67f8feb4,284368361,0,0x0,8
tick,0x7ffe67f8feb4,284384315,0,0x0,8
tick,0x7ffe67f8feb4,284399287,0,0x0,8
tick,0x7ffe67f8feb4,284414939,0,0x0,8
tick,0x7ffe67f8feb4,284430226,0,0x0,8
tick,0x7ffe67f8feb4,284445667,0,0x0,8
tick,0x7ffe67f8feb4,284461664,0,0x0,8
tick,0x7ffe67f8feb4,284477462,0,0x0,8
tick,0x7ffe67f8feb4,284493169,0,0x0,8
tick,0x7ffe67f8feb4,284509202,0,0x0,8
tick,0x7ffe67f8feb4,284524889,0,0x0,8
tick,0x7ffe67f8feb4,284539855,0,0x0,8
tick,0x7ffe67f8feb4,284555928,0,0x0,8
tick,0x7ffe67f8feb4,284571136,0,0x0,8
tick,0x7ffe67f8feb4,284586614,0,0x0,8
tick,0x7ffe67f8feb4,284602866,0,0x0,8
tick,0x7ffe67f8feb4,284618173,0,0x0,8
tick,0x7ffe67f8feb4,284633571,0,0x0,8
tick,0x7ffe67f8feb4,284649365,0,0x0,8
tick,0x7ffe67f8feb4,284665459,0,0x0,8
tick,0x7ffe67f8feb4,284681458,0,0x0,8
tick,0x7ffe67f8feb4,284697425,0,0x0,8
tick,0x7ffe67f8feb4,284712545,0,0x0,8
tick,0x7ffe67f8feb4,284727968,0,0x0,8
tick,0x7ffe67f8feb4,284743466,0,0x0,8
tick,0x7ffe67f8feb4,284758482,0,0x0,8
tick,0x7ffe67f8feb4,284774582,0,0x0,8
tick,0x7ffe67f8feb4,284789570,0,0x0,8
tick,0x7ffe67f8feb4,284805743,0,0x0,8
tick,0x7ffe67f8feb4,284821691,0,0x0,8
tick,0x7ffe67f8feb4,284837302,0,0x0,8
tick,0x7ffe67f8feb4,284852926,0,0x0,8
tick,0x7ffe67f8feb4,284868347,0,0x0,8
tick,0x7ffe67f8feb4,284883796,0,0x0,8
tick,0x7ffe67f8feb4,284899408,0,0x0,8
tick,0x7ffe67f8feb4,284915368,0,0x0,8
tick,0x7ffe67f8feb4,284931026,0,0x0,8
tick,0x7ffe67f8feb4,284947004,0,0x0,8
tick,0x7ffe67f8feb4,284962986,0,0x0,8
tick,0x7ffe67f8feb4,284978550,0,0x0,8
tick,0x7ffe67f8feb4,284994630,0,0x0,8
tick,0x7ffe67f8feb4,285010120,0,0x0,8
tick,0x7ffe67f8feb4,285025955,0,0x0,8
tick,0x7ffe67f8feb4,285041975,0,0x0,8
tick,0x7ffe67f8feb4,285057943,0,0x0,8
tick,0x7ffe67f8feb4,285074094,0,0x0,8
tick,0x7ffe67f8feb4,285088905,0,0x0,8
tick,0x7ffe67f8feb4,285104889,0,0x0,8
tick,0x7ffe67f8feb4,285120901,0,0x0,8
tick,0x7ffe67f8feb4,285135942,0,0x0,8
tick,0x7ffe67f8feb4,285151967,0,0x0,8
tick,0x7ffe67f8feb4,285167956,0,0x0,8
tick,0x7ffe67f8feb4,285183332,0,0x0,8
tick,0x7ffe67f8feb4,285199336,0,0x0,8
tick,0x7ffe67f8feb4,285214933,0,0x0,8
tick,0x7ffe67f8feb4,285230937,0,0x0,8
tick,0x7ffe67f8feb4,285246311,0,0x0,8
tick,0x7ffe67f8feb4,285261518,0,0x0,8
tick,0x7ffe67f8feb4,285276696,0,0x0,8
tick,0x7ffe67f8feb4,285291663,0,0x0,8
tick,0x7ffe67f8feb4,285306724,0,0x0,8
tick,0x7ffe67f8feb4,285323022,0,0x0,8
tick,0x7ffe67f8feb4,285339154,0,0x0,8
tick,0x7ffe67f8feb4,285354897,0,0x0,8
tick,0x7ffe67f8feb4,285370180,0,0x0,8
tick,0x7ffe67f8feb4,285386008,0,0x0,8
tick,0x7ffe67f8feb4,285401071,0,0x0,8
tick,0x7ffe67f8feb4,285416830,0,0x0,8
tick,0x7ffe67f8feb4,285432477,0,0x0,8
tick,0x7ffe67f8feb4,285448416,0,0x0,8
tick,0x7ffe67f8feb4,285464478,0,0x0,8
tick,0x7ffe67f8feb4,285479638,0,0x0,8
tick,0x7ffe67f8feb4,285495837,0,0x0,8
tick,0x7ffe67f8feb4,285511412,0,0x0,8
tick,0x7ffe67f8feb4,285527115,0,0x0,8
tick,0x7ffe67f8feb4,285543135,0,0x0,8
tick,0x7ffe67f8feb4,285558223,0,0x0,8
tick,0x7ffe67f8feb4,285573867,0,0x0,8
tick,0x7ffe67f8feb4,285589398,0,0x0,8
tick,0x7ffe67f8feb4,285605592,0,0x0,8
tick,0x7ffe67f8feb4,285621339,0,0x0,8
tick,0x7ffe67f8feb4,285636789,0,0x0,8
tick,0x7ffe67f8feb4,285652940,0,0x0,8
tick,0x7ffe67f8feb4,285668724,0,0x0,8
tick,0x7ffe67f8feb4,285684475,0,0x0,8
tick,0x7ffe67f8feb4,285699810,0,0x0,8
tick,0x7ffe67f8feb4,285715471,0,0x0,8
tick,0x7ffe67f8feb4,285731473,0,0x0,8
tick,0x7ffe67f8feb4,285746972,0,0x0,8
tick,0x7ffe67f8feb4,285762013,0,0x0,8
tick,0x7ffe67f8feb4,285778012,0,0x0,8
tick,0x7ffe67f8feb4,285793372,0,0x0,8
tick,0x7ffe67f8feb4,285808909,0,0x0,8
tick,0x7ffe67f8feb4,285824089,0,0x0,8
tick,0x7ffe67f8feb4,285839636,0,0x0,8
tick,0x7ffe67f8feb4,285855573,0,0x0,8
tick,0x7ffe67f8feb4,285870909,0,0x0,8
tick,0x7ffe67f8feb4,285886214,0,0x0,8
tick,0x7ffe67f8feb4,285901197,0,0x0,8
tick,0x7ffe67f8feb4,285916636,0,0x0,8
tick,0x7ffe67f8feb4,285931998,0,0x0,8
tick,0x7ffe67f8feb4,285947394,0,0x0,8
tick,0x7ffe67f8feb4,285962811,0,0x0,8
tick,0x7ffe67f8feb4,285978740,0,0x0,8
tick,0x7ffe67f8feb4,285994445,0,0x0,8
tick,0x7ffe67f8feb4,286010073,0,0x0,8
tick,0x7ffe67f8feb4,286025557,0,0x0,8
tick,0x7ffe67f8feb4,286041033,0,0x0,8
tick,0x7ffe67f8feb4,286056544,0,0x0,8
tick,0x7ffe67f8feb4,286072724,0,0x0,8
tick,0x7ffe67f8feb4,286087719,0,0x0,8
tick,0x7ffe67f8feb4,286103497,0,0x0,8
tick,0x7ffe67f8feb4,286119499,0,0x0,8
tick,0x7ffe67f8feb4,286135504,0,0x0,8
tick,0x7ffe67f8feb4,286151497,0,0x0,8
tick,0x7ffe67f8feb4,286167552,0,0x0,8
tick,0x7ffe67f8feb4,286182824,0,0x0,8
tick,0x7ffe67f8feb4,286198809,0,0x0,8
tick,0x7ffe67f8feb4,286214866,0,0x0,8
tick,0x7ffe67f8feb4,286230594,0,0x0,8
tick,0x7ffe67f8feb4,286245633,0,0x0,8
tick,0x7ffe67f8feb4,286261213,0,0x0,8
tick,0x7ffe67f8feb4,286276537,0,0x0,8
tick,0x7ffe67f8feb4,286292071,0,0x0,8
tick,0x7ffe67f8feb4,286308138,0,0x0,8
tick,0x7ffe67f8feb4,286324150,0,0x0,8
tick,0x7ffe67f8feb4,286339340,0,0x0,8
tick,0x7ffe67f8feb4,286355528,0,0x0,8
tick,0x7ffe67f8feb4,286371204,0,0x0,8
tick,0x7ffe67f8feb4,286387283,0,0x0,8
tick,0x7ffe67f8feb4,286402827,0,0x0,8
tick,0x7ffe67f8feb4,286418272,0,0x0,8
tick,0x7ffe67f8feb4,286432945,0,0x0,8
tick,0x7ffe67f8feb4,286449325,0,0x0,8
tick,0x7ffe67f8feb4,286465610,0,0x0,8
tick,0x7ffe67f8feb4,286481041,0,0x0,8
tick,0x7ffe67f8feb4,286496948,0,0x0,8
tick,0x7ffe67f8feb4,286512565,0,0x0,8
tick,0x7ffe67f8feb4,286528589,0,0x0,8
tick,0x7ffe67f8feb4,286545012,0,0x0,8
tick,0x7ffe67f8feb4,286560968,0,0x0,8
tick,0x7ffe67f8feb4,286576436,0,0x0,8
tick,0x7ffe67f8feb4,286592180,0,0x0,8
tick,0x7ffe67f8feb4,286607997,0,0x0,8
tick,0x7ffe67f8feb4,286623684,0,0x0,8
tick,0x7ffe67f8feb4,286638911,0,0x0,8
tick,0x7ffe67f8feb4,286654848,0,0x0,8
tick,0x7ffe67f8feb4,286671156,0,0x0,8
tick,0x7ffe67f8feb4,286686082,0,0x0,8
tick,0x7ffe67f8feb4,286701268,0,0x0,8
tick,0x7ffe67f8feb4,286717265,0,0x0,8
tick,0x7ffe67f8feb4,286733272,0,0x0,8
tick,0x7ffe67f8feb4,286749290,0,0x0,8
tick,0x7ffe67f8feb4,286765269,0,0x0,8
tick,0x7ffe67f8feb4,286780907,0,0x0,8
tick,0x7ffe67f8feb4,286796113,0,0x0,8
tick,0x7ffe67f8feb4,286811574,0,0x0,8
tick,0x7ffe67f8feb4,286827672,0,0x0,8
tick,0x7ffe67f8feb4,286843451,0,0x0,8
tick,0x7ffe67f8feb4,286859288,0,0x0,8
tick,0x7ffe67f8feb4,286875319,0,0x0,8
tick,0x7ffe67f8feb4,286890620,0,0x0,8
tick,0x7ffe67f8feb4,286907190,0,0x0,8
tick,0x7ffe67f8feb4,286923065,0,0x0,8
tick,0x7ffe67f8feb4,286938999,0,0x0,8
tick,0x7ffe67f8feb4,286954791,0,0x0,8
tick,0x7ffe67f8feb4,286970865,0,0x0,8
tick,0x7ffe67f8feb4,286985769,0,0x0,8
tick,0x7ffe67f8feb4,287002042,0,0x0,8
tick,0x7ffe67f8feb4,287017656,0,0x0,8
tick,0x7ffe67f8feb4,287032646,0,0x0,8
tick,0x7ffe67f8feb4,287048004,0,0x0,8
tick,0x7ffe67f8feb4,287063814,0,0x0,8
tick,0x7ffe67f8feb4,287079025,0,0x0,8
tick,0x7ffe67f8feb4,287094621,0,0x0,8
tick,0x7ffe67f8feb4,287110597,0,0x0,8
tick,0x7ffe67f8feb4,287126614,0,0x0,8
tick,0x7ffe67f8feb4,287142611,0,0x0,8
tick,0x7ffe67f8feb4,287158602,0,0x0,8
tick,0x7ffe67f8feb4,287174604,0,0x0,8
tick,0x7ffe67f8feb4,287190578,0,0x0,8
tick,0x7ffe67f8feb4,287206191,0,0x0,8
tick,0x7ffe67f8feb4,287221315,0,0x0,8
tick,0x7ffe67f8feb4,287236634,0,0x0,8
tick,0x7ffe67f8feb4,287252500,0,0x0,8
tick,0x7ffe67f8feb4,287268398,0,0x0,8
tick,0x7ffe67f8feb4,287284222,0,0x0,8
tick,0x7ffe67f8feb4,287299347,0,0x0,8
tick,0x7ffe67f8feb4,287314777,0,0x0,8
tick,0x7ffe67f8feb4,287330399,0,0x0,8
tick,0x7ffe67f8feb4,287345547,0,0x0,8
tick,0x7ffe67f8feb4,287360665,0,0x0,8
tick,0x7ffe67f8feb4,287377023,0,0x0,8
tick,0x7ffe67f8feb4,287392682,0,0x0,8
tick,0x7ffe67f8feb4,287407983,0,0x0,8
tick,0x7ffe67f8feb4,287423144,0,0x0,8
tick,0x7ffe67f8feb4,287438244,0,0x0,8
tick,0x7ffe67f8feb4,287454293,0,0x0,8
tick,0x7ffe67f8feb4,287469408,0,0x0,8
tick,0x7ffe67f8feb4,287485605,0,0x0,8
tick,0x7ffe67f8feb4,287501288,0,0x0,8
tick,0x7ffe67f8feb4,287517254,0,0x0,8
tick,0x7ffe67f8feb4,287532262,0,0x0,8
tick,0x7ffe67f8feb4,287548281,0,0x0,8
tick,0x7ffe67f8feb4,287563929,0,0x0,8
tick,0x7ffe67f8feb4,287579586,0,0x0,8
tick,0x7ffe67f8feb4,287595565,0,0x0,8
tick,0x7ffe67f8feb4,287611547,0,0x0,8
tick,0x7ffe67f8feb4,287626848,0,0x0,8
tick,0x7ffe67f8feb4,287642293,0,0x0,8
tick,0x7ffe67f8feb4,287657575,0,0x0,8
tick,0x7ffe67f8feb4,287673120,0,0x0,8
tick,0x7ffe67f8feb4,287689088,0,0x0,8
tick,0x7ffe67f8feb4,287704642,0,0x0,8
tick,0x7ffe67f8feb4,287719871,0,0x0,8
tick,0x7ffe67f8feb4,287736182,0,0x0,8
tick,0x7ffe67f8feb4,287751910,0,0x0,8
tick,0x7ffe67f8feb4,287767944,0,0x0,8
tick,0x7ffe67f8feb4,287783163,0,0x0,8
tick,0x7ffe67f8feb4,287798624,0,0x0,8
tick,0x7ffe67f8feb4,287813914,0,0x0,8
tick,0x7ffe67f8feb4,287829469,0,0x0,8
tick,0x7ffe67f8feb4,287845501,0,0x0,8
tick,0x7ffe67f8feb4,287861088,0,0x0,8
tick,0x7ffe67f8feb4,287877187,0,0x0,8
tick,0x7ffe67f8feb4,287893056,0,0x0,8
tick,0x7ffe67f8feb4,287909363,0,0x0,8
tick,0x7ffe67f8feb4,287925190,0,0x0,8
tick,0x7ffe67f8feb4,287940728,0,0x0,8
tick,0x7ffe67f8feb4,287956289,0,0x0,8
tick,0x7ffe67f8feb4,287971622,0,0x0,8
tick,0x7ffe67f8feb4,287987845,0,0x0,8
tick,0x7ffe67f8feb4,288003743,0,0x0,8
tick,0x7ffe67f8feb4,288019685,0,0x0,8
tick,0x7ffe67f8feb4,288034676,0,0x0,8
tick,0x7ffe67f8feb4,288050537,0,0x0,8
tick,0x7ffe67f8feb4,288065953,0,0x0,8
tick,0x7ffe67f8feb4,288081266,0,0x0,8
tick,0x7ffe67f8feb4,288097543,0,0x0,8
tick,0x7ffe67f8feb4,288112712,0,0x0,8
tick,0x7ffe67f8feb4,288128465,0,0x0,8
tick,0x7ffe67f8feb4,288144447,0,0x0,8
tick,0x7ffe67f8feb4,288160466,0,0x0,8
tick,0x7ffe67f8feb4,288176455,0,0x0,8
tick,0x7ffe67f8feb4,288192469,0,0x0,8
tick,0x7ffe67f8feb4,288208482,0,0x0,8
tick,0x7ffe67f8feb4,288224486,0,0x0,8
tick,0x7ffe67f8feb4,288240496,0,0x0,8
tick,0x7ffe67f8feb4,288256477,0,0x0,8
tick,0x7ffe67f8feb4,288271976,0,0x0,8
tick,0x7ffe67f8feb4,288288084,0,0x0,8
tick,0x7ffe67f8feb4,288303690,0,0x0,8
tick,0x7ffe67f8feb4,288319370,0,0x0,8
tick,0x7ffe67f8feb4,288335053,0,0x0,8
tick,0x7ffe67f8feb4,288350394,0,0x0,8
tick,0x7ffe67f8feb4,288365929,0,0x0,8
tick,0x7ffe67f8feb4,288381385,0,0x0,8
tick,0x7ffe67f8feb4,288397567,0,0x0,8
tick,0x7ffe67f8feb4,288413486,0,0x0,8
tick,0x7ffe67f8feb4,288429062,0,0x0,8
tick,0x7ffe67f8feb4,288445091,0,0x0,8
tick,0x7ffe67f8feb4,288460466,0,0x0,8
tick,0x7ffe67f8feb4,288475542,0,0x0,8
tick,0x7ffe67f8feb4,288490934,0,0x0,8
tick,0x7ffe67f8feb4,288506651,0,0x0,8
tick,0x7ffe67f8feb4,288521857,0,0x0,8
tick,0x7ffe67f8feb4,288537010,0,0x0,8
tick,0x7ffe67f8feb4,288552940,0,0x0,8
tick,0x7ffe67f8feb4,288568973,0,0x0,8
tick,0x7ffe67f8feb4,288584589,0,0x0,8
tick,0x7ffe67f8feb4,288599608,0,0x0,8
tick,0x7ffe67f8feb4,288615253,0,0x0,8
tick,0x7ffe67f8feb4,288631485,0,0x0,8
tick,0x7ffe67f8feb4,288646711,0,0x0,8
tick,0x7ffe67f8feb4,288662067,0,0x0,8
tick,0x7ffe67f8feb4,288678374,0,0x0,8
tick,0x7ffe67f8feb4,288694384,0,0x0,8
tick,0x7ffe67f8feb4,288710033,0,0x0,8
tick,0x7ffe67f8feb4,288724757,0,0x0,8
tick,0x7ffe67f8feb4,288741188,0,0x0,8
tick,0x7ffe67f8feb4,288757175,0,0x0,8
tick,0x7ffe67f8feb4,288772202,0,0x0,8
tick,0x7ffe67f8feb4,288788131,0,0x0,8
tick,0x7ffe67f8feb4,288804087,0,0x0,8
tick,0x7ffe67f8feb4,288819513,0,0x0,8
tick,0x7ffe67f8feb4,288834872,0,0x0,8
tick,0x7ffe67f8feb4,288850176,0,0x0,8
tick,0x7ffe67f8feb4,288865818,0,0x0,8
tick,0x7ffe67f8feb4,288881914,0,0x0,8
tick,0x7ffe67f8feb4,288897680,0,0x0,8
tick,0x7ffe67f8feb4,288913568,0,0x0,8
tick,0x7ffe67f8feb4,288929763,0,0x0,8
tick,0x7ffe67f8feb4,288945128,0,0x0,8
tick,0x7ffe67f8feb4,288961021,0,0x0,8
tick,0x7ffe67f8feb4,288976663,0,0x0,8
tick,0x7ffe67f8feb4,288992097,0,0x0,8
tick,0x7ffe67f8feb4,289007566,0,0x0,8
tick,0x7ffe67f8feb4,289023805,0,0x0,8
tick,0x7ffe67f8feb4,289039781,0,0x0,8
tick,0x7ffe67f8feb4,289055058,0,0x0,8
tick,0x7ffe67f8feb4,289070712,0,0x0,8
tick,0x7ffe67f8feb4,289085914,0,0x0,8
tick,0x7ffe67f8feb4,289101891,0,0x0,8
tick,0x7ffe67f8feb4,289117849,0,0x0,8
tick,0x7ffe67f8feb4,289133839,0,0x0,8
tick,0x7ffe67f8feb4,289149885,0,0x0,8
tick,0x7ffe67f8feb4,289165844,0,0x0,8
tick,0x7ffe67f8feb4,289181848,0,0x0,8
tick,0x7ffe67f8feb4,289197899,0,0x0,8
tick,0x7ffe67f8feb4,289213972,0,0x0,8
tick,0x7ffe67f8feb4,289229278,0,0x0,8
tick,0x7ffe67f8feb4,289244808,0,0x0,8
tick,0x7ffe67f8feb4,289260320,0,0x0,8
tick,0x7ffe67f8feb4,289276341,0,0x0,8
tick,0x7ffe67f8feb4,289291873,0,0x0,8
tick,0x7ffe67f8feb4,289307998,0,0x0,8
tick,0x7ffe67f8feb4,289323296,0,0x0,8
tick,0x7ffe67f8feb4,289339115,0,0x0,8
tick,0x7ffe67f8feb4,289355128,0,0x0,8
tick,0x7ffe67f8feb4,289371097,0,0x0,8
tick,0x7ffe67f8feb4,289387085,0,0x0,8
tick,0x7ffe67f8feb4,289403087,0,0x0,8
tick,0x7ffe67f8feb4,289419163,0,0x0,8
tick,0x7ffe67f8feb4,289435088,0,0x0,8
tick,0x7ffe67f8feb4,289451102,0,0x0,8
tick,0x7ffe67f8feb4,289467207,0,0x0,8
tick,0x7ffe67f8feb4,289483103,0,0x0,8
tick,0x7ffe67f8feb4,289499107,0,0x0,8
tick,0x7ffe67f8feb4,289515106,0,0x0,8
tick,0x7ffe67f8feb4,289531103,0,0x0,8
tick,0x7ffe67f8feb4,289547121,0,0x0,8
tick,0x7ffe67f8feb4,289563128,0,0x0,8
tick,0x7ffe67f8feb4,289579116,0,0x0,8
tick,0x7ffe67f8feb4,289595132,0,0x0,8
tick,0x7ffe67f8feb4,289611111,0,0x0,8
tick,0x7ffe67f8feb4,289627114,0,0x0,8
tick,0x7ffe67f8feb4,289643132,0,0x0,8
tick,0x7ffe67f8feb4,289659148,0,0x0,8
tick,0x7ffe67f8feb4,289674341,0,0x0,8
tick,0x7ffe67f8feb4,289690169,0,0x0,8
tick,0x7ffe67f8feb4,289705755,0,0x0,8
tick,0x7ffe67f8feb4,289721563,0,0x0,8
tick,0x7ffe67f8feb4,289737727,0,0x0,8
tick,0x7ffe67f8feb4,289753283,0,0x0,8
tick,0x7ffe67f8feb4,289768848,0,0x0,8
tick,0x7ffe67f8feb4,289784830,0,0x0,8
tick,0x7ffe67f8feb4,289800272,0,0x0,8
tick,0x7ffe67f8feb4,289815671,0,0x0,8
tick,0x7ffe67f8feb4,289831193,0,0x0,8
tick,0x7ffe67f8feb4,289847088,0,0x0,8
tick,0x7ffe67f8feb4,289862153,0,0x0,8
tick,0x7ffe67f8feb4,289877425,0,0x0,8
tick,0x7ffe67f8feb4,289892974,0,0x0,8
tick,0x7ffe67f8feb4,289908859,0,0x0,8
tick,0x7ffe67f8feb4,289924683,0,0x0,8
tick,0x7ffe67f8feb4,289939841,0,0x0,8
tick,0x7ffe67f8feb4,289955787,0,0x0,8
tick,0x7ffe67f8feb4,289971624,0,0x0,8
tick,0x7ffe67f8feb4,289986508,0,0x0,8
tick,0x7ffe67f8feb4,290002522,0,0x0,8
tick,0x7ffe67f8feb4,290018602,0,0x0,8
tick,0x7ffe67f8feb4,290033853,0,0x0,8
tick,0x7ffe67f8feb4,290049408,0,0x0,8
tick,0x7ffe67f8feb4,290065712,0,0x0,8
tick,0x7ffe67f8feb4,290081429,0,0x0,8
tick,0x7ffe67f8feb4,290097593,0,0x0,8
tick,0x7ffe67f8feb4,290113162,0,0x0,8
tick,0x7ffe67f8feb4,290129041,0,0x0,8
tick,0x7ffe67f8feb4,290145029,0,0x0,8
tick,0x7ffe67f8feb4,290161041,0,0x0,8
tick,0x7ffe67f8feb4,290177034,0,0x0,8
tick,0x7ffe67f8feb4,290193065,0,0x0,8
tick,0x7ffe67f8feb4,290208537,0,0x0,8
tick,0x7ffe67f8feb4,290224090,0,0x0,8
tick,0x7ffe67f8feb4,290239758,0,0x0,8
tick,0x7ffe67f8feb4,290255540,0,0x0,8
tick,0x7ffe67f8feb4,290271561,0,0x0,8
tick,0x7ffe67f8feb4,290287314,0,0x0,8
tick,0x7ffe67f8feb4,290302588,0,0x0,8
tick,0x7ffe67f8feb4,290317950,0,0x0,8
tick,0x7ffe67f8feb4,290333120,0,0x0,8
tick,0x7ffe67f8feb4,290348737,0,0x0,8
tick,0x7ffe67f8feb4,290364187,0,0x0,8
tick,0x7ffe67f8feb4,290379496,0,0x0,8
tick,0x7ffe67f8feb4,290395550,0,0x0,8
tick,0x7ffe67f8feb4,290411333,0,0x0,8
tick,0x7ffe67f8feb4,290427104,0,0x0,8
tick,0x7ffe67f8feb4,290441998,0,0x0,8
tick,0x7ffe67f8feb4,290457290,0,0x0,8
tick,0x7ffe67f8feb4,290472355,0,0x0,8
tick,0x7ffe67f8feb4,290487863,0,0x0,8
tick,0x7ffe67f8feb4,290503292,0,0x0,8
tick,0x7ffe67f8feb4,290518594,0,0x0,8
tick,0x7ffe67f8feb4,290534661,0,0x0,8
tick,0x7ffe67f8feb4,290550666,0,0x0,8
tick,0x7ffe67f8feb4,290566380,0,0x0,8
tick,0x7ffe67f8feb4,290581961,0,0x0,8
tick,0x7ffe67f8feb4,290597454,0,0x0,8
tick,0x7ffe67f8feb4,290612375,0,0x0,8
tick,0x7ffe67f8feb4,290627753,0,0x0,8
tick,0x7ffe67f8feb4,290642943,0,0x0,8
tick,0x7ffe67f8feb4,290659024,0,0x0,8
tick,0x7ffe67f8feb4,290675037,0,0x0,8
tick,0x7ffe67f8feb4,290691019,0,0x0,8
tick,0x7ffe67f8feb4,290707017,0,0x0,8
tick,0x7ffe67f8feb4,290723067,0,0x0,8
tick,0x7ffe67f8feb4,290739174,0,0x0,8
tick,0x7ffe67f8feb4,290754810,0,0x0,8
tick,0x7ffe67f8feb4,290770827,0,0x0,8
tick,0x7ffe67f8feb4,290786164,0,0x0,8
tick,0x7ffe67f8feb4,290801745,0,0x0,8
tick,0x7ffe67f8feb4,290816787,0,0x0,8
tick,0x7ffe67f8feb4,290832257,0,0x0,8
tick,0x7ffe67f8feb4,290848301,0,0x0,8
tick,0x7ffe67f8feb4,290863938,0,0x0,8
tick,0x7ffe67f8feb4,290879392,0,0x0,8
tick,0x7ffe67f8feb4,290894428,0,0x0,8
tick,0x7ffe67f8feb4,290910220,0,0x0,8
tick,0x7ffe67f8feb4,290925018,0,0x0,8
tick,0x7ffe67f8feb4,290940259,0,0x0,8
tick,0x7ffe67f8feb4,290955651,0,0x0,8
tick,0x7ffe67f8feb4,290970739,0,0x0,8
tick,0x7ffe67f8feb4,290987085,0,0x0,8
tick,0x7ffe67f8feb4,291002568,0,0x0,8
tick,0x7ffe67f8feb4,291018558,0,0x0,8
tick,0x7ffe67f8feb4,291033808,0,0x0,8
tick,0x7ffe67f8feb4,291050052,0,0x0,8
tick,0x7ffe67f8feb4,291065024,0,0x0,8
tick,0x7ffe67f8feb4,291080680,0,0x0,8
tick,0x7ffe67f8feb4,291095857,0,0x0,8
tick,0x7ffe67f8feb4,291111320,0,0x0,8
tick,0x7ffe67f8feb4,291127078,0,0x0,8
tick,0x7ffe67f8feb4,291142997,0,0x0,8
tick,0x7ffe67f8feb4,291158997,0,0x0,8
tick,0x7ffe67f8feb4,291174003,0,0x0,8
tick,0x7ffe67f8feb4,291190028,0,0x0,8
tick,0x7ffe67f8feb4,291206079,0,0x0,8
tick,0x7ffe67f8feb4,291222049,0,0x0,8
tick,0x7ffe67f8feb4,291237201,0,0x0,8
tick,0x7ffe67f8feb4,291252459,0,0x0,8
tick,0x7ffe67f8feb4,291267624,0,0x0,8
tick,0x7ffe67f8feb4,291283183,0,0x0,8
tick,0x7ffe67f8feb4,291298366,0,0x0,8
tick,0x7ffe67f8feb4,291314662,0,0x0,8
tick,0x7ffe67f8feb4,291329209,0,0x0,8
tick,0x7ffe67f8feb4,291344744,0,0x0,8
tick,0x7ffe67f8feb4,291360051,0,0x0,8
tick,0x7ffe67f8feb4,291376244,0,0x0,8
tick,0x7ffe67f8feb4,291391713,0,0x0,8
tick,0x7ffe67f8feb4,291407822,0,0x0,8
tick,0x7ffe67f8feb4,291423206,0,0x0,8
tick,0x7ffe67f8feb4,291439043,0,0x0,8
tick,0x7ffe67f8feb4,291454943,0,0x0,8
tick,0x7ffe67f8feb4,291470939,0,0x0,8
tick,0x7ffe67f8feb4,291486946,0,0x0,8
tick,0x7ffe67f8feb4,291502732,0,0x0,8
tick,0x7ffe67f8feb4,291519008,0,0x0,8
tick,0x7ffe67f8feb4,291534305,0,0x0,8
tick,0x7ffe67f8feb4,291550058,0,0x0,8
tick,0x7ffe67f8feb4,291565241,0,0x0,8
tick,0x7ffe67f8feb4,291580778,0,0x0,8
tick,0x7ffe67f8feb4,291596508,0,0x0,8
tick,0x7ffe67f8feb4,291612153,0,0x0,8
tick,0x7ffe67f8feb4,291627856,0,0x0,8
tick,0x7ffe67f8feb4,291643361,0,0x0,8
tick,0x7ffe67f8feb4,291658680,0,0x0,8
tick,0x7ffe67f8feb4,291674146,0,0x0,8
tick,0x7ffe67f8feb4,291689580,0,0x0,8
tick,0x7ffe67f8feb4,291705450,0,0x0,8
tick,0x7ffe67f8feb4,291721452,0,0x0,8
tick,0x7ffe67f8feb4,291737540,0,0x0,8
tick,0x7ffe67f8feb4,291752894,0,0x0,8
tick,0x7ffe67f8feb4,291768031,0,0x0,8
tick,0x7ffe67f8feb4,291783636,0,0x0,8
tick,0x7ffe67f8feb4,291799657,0,0x0,8
tick,0x7ffe67f8feb4,291815142,0,0x0,8
tick,0x7ffe67f8feb4,291830828,0,0x0,8
tick,0x7ffe67f8feb4,291846802,0,0x0,8
tick,0x7ffe67f8feb4,291862385,0,0x0,8
tick,0x7ffe67f8feb4,291877580,0,0x0,8
tick,0x7ffe67f8feb4,291893324,0,0x0,8
tick,0x7ffe67f8feb4,291908898,0,0x0,8
tick,0x7ffe67f8feb4,291924886,0,0x0,8
tick,0x7ffe67f8feb4,291940935,0,0x0,8
tick,0x7ffe67f8feb4,291956494,0,0x0,8
tick,0x7ffe67f8feb4,291972142,0,0x0,8
tick,0x7ffe67f8feb4,291988446,0,0x0,8
tick,0x7ffe67f8feb4,292004852,0,0x0,8
tick,0x7ffe67f8feb4,292020000,0,0x0,8
tick,0x7ffe67f8feb4,292035459,0,0x0,8
tick,0x7ffe67f8feb4,292050806,0,0x0,8
tick,0x7ffe67f8feb4,292066966,0,0x0,8
tick,0x7ffe67f8feb4,292082520,0,0x0,8
tick,0x7ffe67f8feb4,292097713,0,0x0,8
tick,0x7ffe67f8feb4,292112909,0,0x0,8
tick,0x7ffe67f8feb4,292129036,0,0x0,8
tick,0x7ffe67f8feb4,292144888,0,0x0,8
tick,0x7ffe67f8feb4,292160647,0,0x0,8
tick,0x7ffe67f8feb4,292176657,0,0x0,8
tick,0x7ffe67f8feb4,292191645,0,0x0,8
tick,0x7ffe67f8feb4,292207646,0,0x0,8
tick,0x7ffe67f8feb4,292223694,0,0x0,8
tick,0x7ffe67f8feb4,292239661,0,0x0,8
tick,0x7ffe67f8feb4,292255279,0,0x0,8
tick,0x7ffe67f8feb4,292270970,0,0x0,8
tick,0x7ffe67f8feb4,292286307,0,0x0,8
tick,0x7ffe67f8feb4,292301687,0,0x0,8
tick,0x7ffe67f8feb4,292317579,0,0x0,8
tick,0x7ffe67f8feb4,292333011,0,0x0,8
tick,0x7ffe67f8feb4,292348334,0,0x0,8
tick,0x7ffe67f8feb4,292363812,0,0x0,8
tick,0x7ffe67f8feb4,292379570,0,0x0,8
tick,0x7ffe67f8feb4,292395462,0,0x0,8
tick,0x7ffe67f8feb4,292411942,0,0x0,8
tick,0x7ffe67f8feb4,292427222,0,0x0,8
tick,0x7ffe67f8feb4,292443134,0,0x0,8
tick,0x7ffe67f8feb4,292457840,0,0x0,8
tick,0x7ffe67f8feb4,292473852,0,0x0,8
tick,0x7ffe67f8feb4,292489857,0,0x0,8
tick,0x7ffe67f8feb4,292505588,0,0x0,8
tick,0x7ffe67f8feb4,292521587,0,0x0,8
tick,0x7ffe67f8feb4,292537016,0,0x0,8
tick,0x7ffe67f8feb4,292552340,0,0x0,8
tick,0x7ffe67f8feb4,292568202,0,0x0,8
tick,0x7ffe67f8feb4,292583730,0,0x0,8
tick,0x7ffe67f8feb4,292599621,0,0x0,8
tick,0x7ffe67f8feb4,292616119,0,0x0,8
tick,0x7ffe67f8feb4,292631779,0,0x0,8
tick,0x7ffe67f8feb4,292647340,0,0x0,8
tick,0x7ffe67f8feb4,292663110,0,0x0,8
tick,0x7ffe67f8feb4,292678913,0,0x0,8
tick,0x7ffe67f8feb4,292695012,0,0x0,8
tick,0x7ffe67f8feb4,292710249,0,0x0,8
tick,0x7ffe67f8feb4,292725457,0,0x0,8
tick,0x7ffe67f8feb4,292740842,0,0x0,8
tick,0x7ffe67f8feb4,292756199,0,0x0,8
tick,0x7ffe67f8feb4,292772218,0,0x0,8
tick,0x7ffe67f8feb4,292788494,0,0x0,8
tick,0x7ffe67f8feb4,292804207,0,0x0,8
tick,0x7ffe67f8feb4,292819320,0,0x0,8
tick,0x7ffe67f8feb4,292834928,0,0x0,8
tick,0x7ffe67f8feb4,292850506,0,0x0,8
tick,0x7ffe67f8feb4,292866106,0,0x0,8
tick,0x7ffe67f8feb4,292881192,0,0x0,8
tick,0x7ffe67f8feb4,292897252,0,0x0,8
tick,0x7ffe67f8feb4,292912617,0,0x0,8
tick,0x7ffe67f8feb4,292927744,0,0x0,8
tick,0x7ffe67f8feb4,292943371,0,0x0,8
tick,0x7ffe67f8feb4,292958613,0,0x0,8
tick,0x7ffe67f8feb4,292974196,0,0x0,8
tick,0x7ffe67f8feb4,292990389,0,0x0,8
tick,0x7ffe67f8feb4,293005819,0,0x0,8
tick,0x7ffe67f8feb4,293021069,0,0x0,8
tick,0x7ffe67f8feb4,293036385,0,0x0,8
tick,0x7ffe67f8feb4,293051887,0,0x0,8
tick,0x7ffe67f8feb4,293067709,0,0x0,8
tick,0x7ffe67f8feb4,293083177,0,0x0,8
tick,0x7ffe67f8feb4,293098955,0,0x0,8
tick,0x7ffe67f8feb4,293114605,0,0x0,8
tick,0x7ffe67f8feb4,293130155,0,0x0,8
tick,0x7ffe67f8feb4,293146273,0,0x0,8
tick,0x7ffe67f8feb4,293162049,0,0x0,8
tick,0x7ffe67f8feb4,293178171,0,0x0,8
tick,0x7ffe67f8feb4,293194035,0,0x0,8
tick,0x7ffe67f8feb4,293209699,0,0x0,8
tick,0x7ffe67f8feb4,293225451,0,0x0,8
tick,0x7ffe67f8feb4,293240768,0,0x0,8
tick,0x7ffe67f8feb4,293256783,0,0x0,8
tick,0x7ffe67f8feb4,293271990,0,0x0,8
tick,0x7ffe67f8feb4,293287618,0,0x0,8
tick,0x7ffe67f8feb4,293303060,0,0x0,8
tick,0x7ffe67f8feb4,293319331,0,0x0,8
tick,0x7ffe67f8feb4,293334148,0,0x0,8
tick,0x7ffe67f8feb4,293349546,0,0x0,8
tick,0x7ffe67f8feb4,293365729,0,0x0,8
tick,0x7ffe67f8feb4,293381806,0,0x0,8
tick,0x7ffe67f8feb4,293397140,0,0x0,8
tick,0x7ffe67f8feb4,293412109,0,0x0,8
tick,0x7ffe67f8feb4,293427393,0,0x0,8
tick,0x7ffe67f8feb4,293443339,0,0x0,8
tick,0x7ffe67f8feb4,293459171,0,0x0,8
tick,0x7ffe67f8feb4,293474478,0,0x0,8
tick,0x7ffe67f8feb4,293490341,0,0x0,8
tick,0x7ffe67f8feb4,293505563,0,0x0,8
tick,0x7ffe67f8feb4,293521005,0,0x0,8
tick,0x7ffe67f8feb4,293537648,0,0x0,8
tick,0x7ffe67f8feb4,293552571,0,0x0,8
tick,0x7ffe67f8feb4,293568581,0,0x0,8
tick,0x7ffe67f8feb4,293584057,0,0x0,8
tick,0x7ffe67f8feb4,293600358,0,0x0,8
tick,0x7ffe67f8feb4,293616512,0,0x0,8
tick,0x7ffe67f8feb4,293632518,0,0x0,8
tick,0x7ffe67f8feb4,293647882,0,0x0,8
tick,0x7ffe67f8feb4,293663645,0,0x0,8
tick,0x7ffe67f8feb4,293679653,0,0x0,8
tick,0x7ffe67f8feb4,293695692,0,0x0,8
tick,0x7ffe67f8feb4,293711681,0,0x0,8
tick,0x7ffe67f8feb4,293727670,0,0x0,8
tick,0x7ffe67f8feb4,293743646,0,0x0,8
tick,0x7ffe67f8feb4,293758857,0,0x0,8
tick,0x7ffe67f8feb4,293774970,0,0x0,8
tick,0x7ffe67f8feb4,293790301,0,0x0,8
tick,0x7ffe67f8feb4,293806322,0,0x0,8
tick,0x7ffe67f8feb4,293822380,0,0x0,8
tick,0x7ffe67f8feb4,293838108,0,0x0,8
tick,0x7ffe67f8feb4,293853525,0,0x0,8
tick,0x7ffe67f8feb4,293868872,0,0x0,8
tick,0x7ffe67f8feb4,293884644,0,0x0,8
tick,0x7ffe67f8feb4,293900156,0,0x0,8
tick,0x7ffe67f8feb4,293915183,0,0x0,8
tick,0x7ffe67f8feb4,293931214,0,0x0,8
tick,0x7ffe67f8feb4,293946817,0,0x0,8
tick,0x7ffe67f8feb4,293961955,0,0x0,8
tick,0x7ffe67f8feb4,293977506,0,0x0,8
tick,0x7ffe67f8feb4,293993220,0,0x0,8
tick,0x7ffe67f8feb4,294009263,0,0x0,8
tick,0x7ffe67f8feb4,294024481,0,0x0,8
tick,0x7ffe67f8feb4,294039856,0,0x0,8
tick,0x7ffe67f8feb4,294055382,0,0x0,8
tick,0x7ffe67f8feb4,294071251,0,0x0,8
tick,0x7ffe67f8feb4,294087088,0,0x0,8
tick,0x7ffe67f8feb4,294102868,0,0x0,8
tick,0x7ffe67f8feb4,294118894,0,0x0,8
tick,0x7ffe67f8feb4,294134264,0,0x0,8
tick,0x7ffe67f8feb4,294150010,0,0x0,8
tick,0x7ffe67f8feb4,294166006,0,0x0,8
tick,0x7ffe67f8feb4,294182005,0,0x0,8
tick,0x7ffe67f8feb4,294198039,0,0x0,8
tick,0x7ffe67f8feb4,294214088,0,0x0,8
tick,0x7ffe67f8feb4,294229221,0,0x0,8
tick,0x7ffe67f8feb4,294245298,0,0x0,8
tick,0x7ffe67f8feb4,294261603,0,0x0,8
tick,0x7ffe67f8feb4,294276864,0,0x0,8
tick,0x7ffe67f8feb4,294292674,0,0x0,8
tick,0x7ffe67f8feb4,294307924,0,0x0,8
tick,0x7ffe67f8feb4,294323375,0,0x0,8
tick,0x7ffe67f8feb4,294338691,0,0x0,8
tick,0x7ffe67f8feb4,294354519,0,0x0,8
tick,0x7ffe67f8feb4,294369630,0,0x0,8
tick,0x7ffe67f8feb4,294385184,0,0x0,8
tick,0x7ffe67f8feb4,294400985,0,0x0,8
tick,0x7ffe67f8feb4,294416572,0,0x0,8
tick,0x7ffe67f8feb4,294432362,0,0x0,8
tick,0x7ffe67f8feb4,294448447,0,0x0,8
tick,0x7ffe67f8feb4,294464976,0,0x0,8
tick,0x7ffe67f8feb4,294480354,0,0x0,8
tick,0x7ffe67f8feb4,294496766,0,0x0,8
tick,0x7ffe67f8feb4,294511851,0,0x0,8
tick,0x7ffe67f8feb4,294527762,0,0x0,8
tick,0x7ffe67f8feb4,294543219,0,0x0,8
tick,0x7ffe67f8feb4,294559338,0,0x0,8
tick,0x7ffe67f8feb4,294574486,0,0x0,8
tick,0x7ffe67f8feb4,294590384,0,0x0,8
tick,0x7ffe67f8feb4,294605966,0,0x0,8
tick,0x7ffe67f8feb4,294621577,0,0x0,8
tick,0x7ffe67f8feb4,294637592,0,0x0,8
tick,0x7ffe67f8feb4,294653463,0,0x0,8
tick,0x7ffe67f8feb4,294668430,0,0x0,8
tick,0x7ffe67f8feb4,294683978,0,0x0,8
tick,0x7ffe67f8feb4,294699132,0,0x0,8
tick,0x7ffe67f8feb4,294714729,0,0x0,8
tick,0x7ffe67f8feb4,294730102,0,0x0,8
tick,0x7ffe67f8feb4,294745562,0,0x0,8
tick,0x7ffe67f8feb4,294760346,0,0x0,8
tick,0x7ffe67f8feb4,294775968,0,0x0,8
tick,0x7ffe67f8feb4,294792186,0,0x0,8
tick,0x7ffe67f8feb4,294807531,0,0x0,8
tick,0x7ffe67f8feb4,294822915,0,0x0,8
tick,0x7ffe67f8feb4,294838205,0,0x0,8
tick,0x7ffe67f8feb4,294854058,0,0x0,8
tick,0x7ffe67f8feb4,294869382,0,0x0,8
tick,0x7ffe67f8feb4,294885220,0,0x0,8
tick,0x7ffe67f8feb4,294901196,0,0x0,8
tick,0x7ffe67f8feb4,294916580,0,0x0,8
tick,0x7ffe67f8feb4,294932381,0,0x0,8
tick,0x7ffe67f8feb4,294948710,0,0x0,8
tick,0x7ffe67f8feb4,294964050,0,0x0,8
tick,0x7ffe67f8feb4,294979259,0,0x0,8
tick,0x7ffe67f8feb4,294994435,0,0x0,8
tick,0x7ffe67f8feb4,295009684,0,0x0,8
tick,0x7ffe67f8feb4,295025473,0,0x0,8
tick,0x7ffe67f8feb4,295040513,0,0x0,8
tick,0x7ffe67f8feb4,295056493,0,0x0,8
tick,0x7ffe67f8feb4,295072291,0,0x0,8
tick,0x7ffe67f8feb4,295088753,0,0x0,8
tick,0x7ffe67f8feb4,295103687,0,0x0,8
tick,0x7ffe67f8feb4,295118888,0,0x0,8
tick,0x7ffe67f8feb4,295135101,0,0x0,8
tick,0x7ffe67f8feb4,295151076,0,0x0,8
tick,0x7ffe67f8feb4,295167053,0,0x0,8
tick,0x7ffe67f8feb4,295183062,0,0x0,8
tick,0x7ffe67f8feb4,295199162,0,0x0,8
tick,0x7ffe67f8feb4,295214570,0,0x0,8
tick,0x7ffe67f8feb4,295229713,0,0x0,8
tick,0x7ffe67f8feb4,295246022,0,0x0,8
tick,0x7ffe67f8feb4,295262028,0,0x0,8
tick,0x7ffe67f8feb4,295277245,0,0x0,8
tick,0x7ffe67f8feb4,295293292,0,0x0,8
tick,0x7ffe67f8feb4,295309378,0,0x0,8
tick,0x7ffe67f8feb4,295325441,0,0x0,8
tick,0x7ffe67f8feb4,295340770,0,0x0,8
tick,0x7ffe67f8feb4,295356280,0,0x0,8
tick,0x7ffe67f8feb4,295371342,0,0x0,8
tick,0x7ffe67f8feb4,295387388,0,0x0,8
tick,0x7ffe67f8feb4,295402598,0,0x0,8
tick,0x7ffe67f8feb4,295417757,0,0x0,8
tick,0x7ffe67f8feb4,295433223,0,0x0,8
tick,0x7ffe67f8feb4,295448550,0,0x0,8
tick,0x7ffe67f8feb4,295464672,0,0x0,8
tick,0x7ffe67f8feb4,295480142,0,0x0,8
tick,0x7ffe67f8feb4,295496090,0,0x0,8
tick,0x7ffe67f8feb4,295511294,0,0x0,8
tick,0x7ffe67f8feb4,295527384,0,0x0,8
tick,0x7ffe67f8feb4,295543338,0,0x0,8
tick,0x7ffe67f8feb4,295558101,0,0x0,8
tick,0x7ffe67f8feb4,295573617,0,0x0,8
tick,0x7ffe67f8feb4,295589394,0,0x0,8
tick,0x7ffe67f8feb4,295604864,0,0x0,8
tick,0x7ffe67f8feb4,295620487,0,0x0,8
tick,0x7ffe67f8feb4,295636540,0,0x0,8
tick,0x7ffe67f8feb4,295652389,0,0x0,8
tick,0x7ffe67f8feb4,295668374,0,0x0,8
tick,0x7ffe67f8feb4,295683794,0,0x0,8
tick,0x7ffe67f8feb4,295699510,0,0x0,8
tick,0x7ffe67f8feb4,295714614,0,0x0,8
tick,0x7ffe67f8feb4,295730129,0,0x0,8
tick,0x7ffe67f8feb4,295746237,0,0x0,8
tick,0x7ffe67f8feb4,295761593,0,0x0,8
tick,0x7ffe67f8feb4,295776710,0,0x0,8
tick,0x7ffe67f8feb4,295791618,0,0x0,8
tick,0x7ffe67f8feb4,295807696,0,0x0,8
tick,0x7ffe67f8feb4,295823512,0,0x0,8
tick,0x7ffe67f8feb4,295838854,0,0x0,8
tick,0x7ffe67f8feb4,295854436,0,0x0,8
tick,0x7ffe67f8feb4,295870084,0,0x0,8
tick,0x7ffe67f8feb4,295885437,0,0x0,8
tick,0x7ffe67f8feb4,295900787,0,0x0,8
tick,0x7ffe67f8feb4,295916860,0,0x0,8
tick,0x7ffe67f8feb4,295932843,0,0x0,8
tick,0x7ffe67f8feb4,295948278,0,0x0,8
tick,0x7ffe67f8feb4,295964555,0,0x0,8
tick,0x7ffe67f8feb4,295979424,0,0x0,8
tick,0x7ffe67f8feb4,295994987,0,0x0,8
tick,0x7ffe67f8feb4,296010106,0,0x0,8
tick,0x7ffe67f8feb4,296026120,0,0x0,8
tick,0x7ffe67f8feb4,296041495,0,0x0,8
tick,0x7ffe67f8feb4,296057539,0,0x0,8
tick,0x7ffe67f8feb4,296073107,0,0x0,8
tick,0x7ffe67f8feb4,296089098,0,0x0,8
tick,0x7ffe67f8feb4,296104747,0,0x0,8
tick,0x7ffe67f8feb4,296119868,0,0x0,8
tick,0x7ffe67f8feb4,296135445,0,0x0,8
tick,0x7ffe67f8feb4,296150202,0,0x0,8
tick,0x7ffe67f8feb4,296166194,0,0x0,8
tick,0x7ffe67f8feb4,296182196,0,0x0,8
tick,0x7ffe67f8feb4,296198193,0,0x0,8
tick,0x7ffe67f8feb4,296214229,0,0x0,8
tick,0x7ffe67f8feb4,296229538,0,0x0,8
tick,0x7ffe67f8feb4,296245012,0,0x0,8
tick,0x7ffe67f8feb4,296260411,0,0x0,8
tick,0x7ffe67f8feb4,296276129,0,0x0,8
tick,0x7ffe67f8feb4,296292140,0,0x0,8
tick,0x7ffe67f8feb4,296307539,0,0x0,8
tick,0x7ffe67f8feb4,296322903,0,0x0,8
tick,0x7ffe67f8feb4,296337804,0,0x0,8
tick,0x7ffe67f8feb4,296353217,0,0x0,8
tick,0x7ffe67f8feb4,296369084,0,0x0,8
tick,0x7ffe67f8feb4,296384301,0,0x0,8
tick,0x7ffe67f8feb4,296399694,0,0x0,8
tick,0x7ffe67f8feb4,296415222,0,0x0,8
tick,0x7ffe67f8feb4,296431047,0,0x0,8
tick,0x7ffe67f8feb4,296447255,0,0x0,8
tick,0x7ffe67f8feb4,296462415,0,0x0,8
tick,0x7ffe67f8feb4,296478274,0,0x0,8
tick,0x7ffe67f8feb4,296493511,0,0x0,8
tick,0x7ffe67f8feb4,296508672,0,0x0,8
tick,0x7ffe67f8feb4,296524114,0,0x0,8
tick,0x7ffe67f8feb4,296540008,0,0x0,8
tick,0x7ffe67f8feb4,296555646,0,0x0,8
tick,0x7ffe67f8feb4,296571265,0,0x0,8
tick,0x7ffe67f8feb4,296586673,0,0x0,8
tick,0x7ffe67f8feb4,296602150,0,0x0,8
tick,0x7ffe67f8feb4,296617334,0,0x0,8
tick,0x7ffe67f8feb4,296632803,0,0x0,8
tick,0x7ffe67f8feb4,296648900,0,0x0,8
tick,0x7ffe67f8feb4,296664857,0,0x0,8
tick,0x7ffe67f8feb4,296681098,0,0x0,8
tick,0x7ffe67f8feb4,296697216,0,0x0,8
tick,0x7ffe67f8feb4,296712835,0,0x0,8
tick,0x7ffe67f8feb4,296728773,0,0x0,8
tick,0x7ffe67f8feb4,296744687,0,0x0,8
tick,0x7ffe67f8feb4,296760591,0,0x0,8
tick,0x7ffe67f8feb4,296775975,0,0x0,8
tick,0x7ffe67f8feb4,296791638,0,0x0,8
tick,0x7ffe67f8feb4,296806550,0,0x0,8
tick,0x7ffe67f8feb4,296822064,0,0x0,8
tick,0x7ffe67f8feb4,296837349,0,0x0,8
tick,0x7ffe67f8feb4,296852949,0,0x0,8
tick,0x7ffe67f8feb4,296868693,0,0x0,8
tick,0x7ffe67f8feb4,296884668,0,0x0,8
tick,0x7ffe67f8feb4,296899841,0,0x0,8
tick,0x7ffe67f8feb4,296915585,0,0x0,8
tick,0x7ffe67f8feb4,296931482,0,0x0,8
tick,0x7ffe67f8feb4,296947569,0,0x0,8
tick,0x7ffe67f8feb4,296963777,0,0x0,8
tick,0x7ffe67f8feb4,296979406,0,0x0,8
tick,0x7ffe67f8feb4,296994556,0,0x0,8
tick,0x7ffe67f8feb4,297010386,0,0x0,8
tick,0x7ffe67f8feb4,297026118,0,0x0,8
tick,0x7ffe67f8feb4,297041722,0,0x0,8
tick,0x7ffe67f8feb4,297057471,0,0x0,8
tick,0x7ffe67f8feb4,297073172,0,0x0,8
tick,0x7ffe67f8feb4,297088362,0,0x0,8
tick,0x7ffe67f8feb4,297104075,0,0x0,8
tick,0x7ffe67f8feb4,297119330,0,0x0,8
tick,0x7ffe67f8feb4,297134721,0,0x0,8
tick,0x7ffe67f8feb4,297150891,0,0x0,8
tick,0x7ffe67f8feb4,297165827,0,0x0,8
tick,0x7ffe67f8feb4,297181814,0,0x0,8
tick,0x7ffe67f8feb4,297197816,0,0x0,8
tick,0x7ffe67f8feb4,297213881,0,0x0,8
tick,0x7ffe67f8feb4,297229902,0,0x0,8
tick,0x7ffe67f8feb4,297245876,0,0x0,8
tick,0x7ffe67f8feb4,297261335,0,0x0,8
tick,0x7ffe67f8feb4,297277020,0,0x0,8
tick,0x7ffe67f8feb4,297292699,0,0x0,8
tick,0x7ffe67f8feb4,297308713,0,0x0,8
tick,0x7ffe67f8feb4,297324224,0,0x0,8
tick,0x7ffe67f8feb4,297339616,0,0x0,8
tick,0x7ffe67f8feb4,297355317,0,0x0,8
tick,0x7ffe67f8feb4,297370975,0,0x0,8
tick,0x7ffe67f8feb4,297387139,0,0x0,8
tick,0x7ffe67f8feb4,297402898,0,0x0,8
tick,0x7ffe67f8feb4,297417968,0,0x0,8
tick,0x7ffe67f8feb4,297433771,0,0x0,8
tick,0x7ffe67f8feb4,297449858,0,0x0,8
tick,0x7ffe67f8feb4,297465282,0,0x0,8
tick,0x7ffe67f8feb4,297480817,0,0x0,8
tick,0x7ffe67f8feb4,297496820,0,0x0,8
tick,0x7ffe67f8feb4,297512526,0,0x0,8
tick,0x7ffe67f8feb4,297528093,0,0x0,8
tick,0x7ffe67f8feb4,297543350,0,0x0,8
tick,0x7ffe67f8feb4,297558658,0,0x0,8
tick,0x7ffe67f8feb4,297574372,0,0x0,8
tick,0x7ffe67f8feb4,297590530,0,0x0,8
tick,0x7ffe67f8feb4,297606756,0,0x0,8
tick,0x7ffe67f8feb4,297622763,0,0x0,8
tick,0x7ffe67f8feb4,297638697,0,0x0,8
tick,0x7ffe67f8feb4,297654725,0,0x0,8
tick,0x7ffe67f8feb4,297670715,0,0x0,8
tick,0x7ffe67f8feb4,297686752,0,0x0,8
tick,0x7ffe67f8feb4,297702739,0,0x0,8
tick,0x7ffe67f8feb4,297718722,0,0x0,8
tick,0x7ffe67f8feb4,297734721,0,0x0,8
tick,0x7ffe67f8feb4,297750731,0,0x0,8
tick,0x7ffe67f8feb4,297766738,0,0x0,8
tick,0x7ffe67f8feb4,297782220,0,0x0,8
tick,0x7ffe67f8feb4,297797716,0,0x0,8
tick,0x7ffe67f8feb4,297813743,0,0x0,8
tick,0x7ffe67f8feb4,297829775,0,0x0,8
tick,0x7ffe67f8feb4,297845191,0,0x0,8
tick,0x7ffe67f8feb4,297860924,0,0x0,8
tick,0x7ffe67f8feb4,297876579,0,0x0,8
tick,0x7ffe67f8feb4,297892153,0,0x0,8
tick,0x7ffe67f8feb4,297907990,0,0x0,8
tick,0x7ffe67f8feb4,297923458,0,0x0,8
tick,0x7ffe67f8feb4,297938672,0,0x0,8
tick,0x7ffe67f8feb4,297954326,0,0x0,8
tick,0x7ffe67f8feb4,297970299,0,0x0,8
tick,0x7ffe67f8feb4,297986548,0,0x0,8
tick,0x7ffe67f8feb4,298002257,0,0x0,8
tick,0x7ffe67f8feb4,298017845,0,0x0,8
tick,0x7ffe67f8feb4,298033025,0,0x0,8
tick,0x7ffe67f8feb4,298048442,0,0x0,8
tick,0x7ffe67f8feb4,298064065,0,0x0,8
tick,0x7ffe67f8feb4,298079649,0,0x0,8
tick,0x7ffe67f8feb4,298095615,0,0x0,8
tick,0x7ffe67f8feb4,298111546,0,0x0,8
tick,0x7ffe67f8feb4,298127927,0,0x0,8
tick,0x7ffe67f8feb4,298143909,0,0x0,8
tick,0x7ffe67f8feb4,298159487,0,0x0,8
tick,0x7ffe67f8feb4,298174361,0,0x0,8
tick,0x7ffe67f8feb4,298190375,0,0x0,8
tick,0x7ffe67f8feb4,298206334,0,0x0,8
tick,0x7ffe67f8feb4,298222350,0,0x0,8
tick,0x7ffe67f8feb4,298238336,0,0x0,8
tick,0x7ffe67f8feb4,298254367,0,0x0,8
tick,0x7ffe67f8feb4,298269992,0,0x0,8
tick,0x7ffe67f8feb4,298285884,0,0x0,8
tick,0x7ffe67f8feb4,298301456,0,0x0,8
tick,0x7ffe67f8feb4,298316724,0,0x0,8
tick,0x7ffe67f8feb4,298332532,0,0x0,8
tick,0x7ffe67f8feb4,298348500,0,0x0,8
tick,0x7ffe67f8feb4,298364566,0,0x0,8
tick,0x7ffe67f8feb4,298379963,0,0x0,8
tick,0x7ffe67f8feb4,298395712,0,0x0,8
tick,0x7ffe67f8feb4,298411582,0,0x0,8
tick,0x7ffe67f8feb4,298427594,0,0x0,8
tick,0x7ffe67f8feb4,298442942,0,0x0,8
tick,0x7ffe67f8feb4,298458106,0,0x0,8
tick,0x7ffe67f8feb4,298473544,0,0x0,8
tick,0x7ffe67f8feb4,298488442,0,0x0,8
tick,0x7ffe67f8feb4,298504044,0,0x0,8
tick,0x7ffe67f8feb4,298519635,0,0x0,8
tick,0x7ffe67f8feb4,298535246,0,0x0,8
tick,0x7ffe67f8feb4,298550801,0,0x0,8
tick,0x7ffe67f8feb4,298566764,0,0x0,8
tick,0x7ffe67f8feb4,298582089,0,0x0,8
tick,0x7ffe67f8feb4,298597401,0,0x0,8
tick,0x7ffe67f8feb4,298612905,0,0x0,8
tick,0x7ffe67f8feb4,298628095,0,0x0,8
tick,0x7ffe67f8feb4,298643577,0,0x0,8
tick,0x7ffe67f8feb4,298659379,0,0x0,8
tick,0x7ffe67f8feb4,298674512,0,0x0,8
tick,0x7ffe67f8feb4,298690168,0,0x0,8
tick,0x7ffe67f8feb4,298705435,0,0x0,8
tick,0x7ffe67f8feb4,298721112,0,0x0,8
tick,0x7ffe67f8feb4,298736567,0,0x0,8
tick,0x7ffe67f8feb4,298752549,0,0x0,8
tick,0x7ffe67f8feb4,298768305,0,0x0,8
tick,0x7ffe67f8feb4,298784084,0,0x0,8
tick,0x7ffe67f8feb4,298799374,0,0x0,8
tick,0x7ffe67f8feb4,298815320,0,0x0,8
tick,0x7ffe67f8feb4,298830579,0,0x0,8
tick,0x7ffe67f8feb4,298845938,0,0x0,8
tick,0x7ffe67f8feb4,298862016,0,0x0,8
tick,0x7ffe67f8feb4,298877938,0,0x0,8
tick,0x7ffe67f8feb4,298893359,0,0x0,8
tick,0x7ffe67f8feb4,298908776,0,0x0,8
tick,0x7ffe67f8feb4,298924481,0,0x0,8
tick,0x7ffe67f8feb4,298940587,0,0x0,8
tick,0x7ffe67f8feb4,298956776,0,0x0,8
tick,0x7ffe67f8feb4,298972614,0,0x0,8
tick,0x7ffe67f8feb4,298988558,0,0x0,8
tick,0x7ffe67f8feb4,299004017,0,0x0,8
tick,0x7ffe67f8feb4,299020075,0,0x0,8
tick,0x7ffe67f8feb4,299036241,0,0x0,8
tick,0x7ffe67f8feb4,299051458,0,0x0,8
tick,0x7ffe67f8feb4,299066666,0,0x0,8
tick,0x7ffe67f8feb4,299082510,0,0x0,8
tick,0x7ffe67f8feb4,299098515,0,0x0,8
tick,0x7ffe67f8feb4,299114087,0,0x0,8
tick,0x7ffe67f8feb4,299129674,0,0x0,8
tick,0x7ffe67f8feb4,299145307,0,0x0,8
tick,0x7ffe67f8feb4,299160591,0,0x0,8
tick,0x7ffe67f8feb4,299176540,0,0x0,8
tick,0x7ffe67f8feb4,299192532,0,0x0,8
tick,0x7ffe67f8feb4,299208541,0,0x0,8
tick,0x7ffe67f8feb4,299224054,0,0x0,8
tick,0x7ffe67f8feb4,299239563,0,0x0,8
tick,0x7ffe67f8feb4,299255575,0,0x0,8
tick,0x7ffe67f8feb4,299271628,0,0x0,8
tick,0x7ffe67f8feb4,299287704,0,0x0,8
tick,0x7ffe67f8feb4,299303875,0,0x0,8
tick,0x7ffe67f8feb4,299319028,0,0x0,8
tick,0x7ffe67f8feb4,299334736,0,0x0,8
tick,0x7ffe67f8feb4,299350427,0,0x0,8
tick,0x7ffe67f8feb4,299366203,0,0x0,8
tick,0x7ffe67f8feb4,299381849,0,0x0,8
tick,0x7ffe67f8feb4,299397332,0,0x0,8
tick,0x7ffe67f8feb4,299412888,0,0x0,8
tick,0x7ffe67f8feb4,299428713,0,0x0,8
tick,0x7ffe67f8feb4,299444203,0,0x0,8
tick,0x7ffe67f8feb4,299460286,0,0x0,8
tick,0x7ffe67f8feb4,299475785,0,0x0,8
tick,0x7ffe67f8feb4,299491739,0,0x0,8
tick,0x7ffe67f8feb4,299507675,0,0x0,8
tick,0x7ffe67f8feb4,299523056,0,0x0,8
tick,0x7ffe67f8feb4,299537911,0,0x0,8
tick,0x7ffe67f8feb4,299554020,0,0x0,8
tick,0x7ffe67f8feb4,299568887,0,0x0,8
tick,0x7ffe67f8feb4,299585202,0,0x0,8
tick,0x7ffe67f8feb4,299600822,0,0x0,8
tick,0x7ffe67f8feb4,299616653,0,0x0,8
tick,0x7ffe67f8feb4,299631898,0,0x0,8
tick,0x7ffe67f8feb4,299647554,0,0x0,8
tick,0x7ffe67f8feb4,299662865,0,0x0,8
tick,0x7ffe67f8feb4,299678478,0,0x0,8
tick,0x7ffe67f8feb4,299694275,0,0x0,8
tick,0x7ffe67f8feb4,299709597,0,0x0,8
tick,0x7ffe67f8feb4,299725141,0,0x0,8
tick,0x7ffe67f8feb4,299741213,0,0x0,8
tick,0x7ffe67f8feb4,299756213,0,0x0,8
tick,0x7ffe67f8feb4,299772201,0,0x0,8
tick,0x7ffe67f8feb4,299787894,0,0x0,8
tick,0x7ffe67f8feb4,299803370,0,0x0,8
tick,0x7ffe67f8feb4,299818761,0,0x0,8
tick,0x7ffe67f8feb4,299834285,0,0x0,8
tick,0x7ffe67f8feb4,299850313,0,0x0,8
tick,0x7ffe67f8feb4,299866524,0,0x0,8
tick,0x7ffe67f8feb4,299882296,0,0x0,8
tick,0x7ffe67f8feb4,299897571,0,0x0,8
tick,0x7ffe67f8feb4,299913441,0,0x0,8
tick,0x7ffe67f8feb4,299928745,0,0x0,8
tick,0x7ffe67f8feb4,299944641,0,0x0,8
tick,0x7ffe67f8feb4,299960086,0,0x0,8
tick,0x7ffe67f8feb4,299975258,0,0x0,8
tick,0x7ffe67f8feb4,299991308,0,0x0,8
tick,0x7ffe67f8feb4,300006879,0,0x0,8
tick,0x7ffe67f8feb4,300022188,0,0x0,8
tick,0x7ffe67f8feb4,300038101,0,0x0,8
tick,0x7ffe67f8feb4,300053285,0,0x0,8
tick,0x7ffe67f8feb4,300068478,0,0x0,8
tick,0x7ffe67f8feb4,300084763,0,0x0,8
tick,0x7ffe67f8feb4,300099860,0,0x0,8
tick,0x7ffe67f8feb4,300115767,0,0x0,8
tick,0x7ffe67f8feb4,300131559,0,0x0,8
tick,0x7ffe67f8feb4,300146832,0,0x0,8
tick,0x7ffe67f8feb4,300162660,0,0x0,8
tick,0x7ffe67f8feb4,300177732,0,0x0,8
tick,0x7ffe67f8feb4,300192592,0,0x0,8
tick,0x7ffe67f8feb4,300208603,0,0x0,8
tick,0x7ffe67f8feb4,300224271,0,0x0,8
tick,0x7ffe67f8feb4,300240251,0,0x0,8
tick,0x7ffe67f8feb4,300256569,0,0x0,8
tick,0x7ffe67f8feb4,300271863,0,0x0,8
tick,0x7ffe67f8feb4,300286879,0,0x0,8
tick,0x7ffe67f8feb4,300302416,0,0x0,8
tick,0x7ffe67f8feb4,300317590,0,0x0,8
tick,0x7ffe67f8feb4,300333609,0,0x0,8
tick,0x7ffe67f8feb4,300349259,0,0x0,8
tick,0x7ffe67f8feb4,300365009,0,0x0,8
tick,0x7ffe67f8feb4,300380144,0,0x0,8
tick,0x7ffe67f8feb4,300396141,0,0x0,8
tick,0x7ffe67f8feb4,300411576,0,0x0,8
tick,0x7ffe67f8feb4,300426901,0,0x0,8
tick,0x7ffe67f8feb4,300442731,0,0x0,8
tick,0x7ffe67f8feb4,300458246,0,0x0,8
tick,0x7ffe67f8feb4,300473889,0,0x0,8
tick,0x7ffe67f8feb4,300489552,0,0x0,8
tick,0x7ffe67f8feb4,300504805,0,0x0,8
tick,0x7ffe67f8feb4,300521098,0,0x0,8
tick,0x7ffe67f8feb4,300536759,0,0x0,8
tick,0x7ffe67f8feb4,300552067,0,0x0,8
tick,0x7ffe67f8feb4,300567858,0,0x0,8
tick,0x7ffe67f8feb4,300583592,0,0x0,8
tick,0x7ffe67f8feb4,300598849,0,0x0,8
tick,0x7ffe67f8feb4,300614390,0,0x0,8
tick,0x7ffe67f8feb4,300629779,0,0x0,8
tick,0x7ffe67f8feb4,300645379,0,0x0,8
tick,0x7ffe67f8feb4,300660993,0,0x0,8
tick,0x7ffe67f8feb4,300676498,0,0x0,8
tick,0x7ffe67f8feb4,300692596,0,0x0,8
tick,0x7ffe67f8feb4,300707487,0,0x0,8
tick,0x7ffe67f8feb4,300723439,0,0x0,8
tick,0x7ffe67f8feb4,300739621,0,0x0,8
tick,0x7ffe67f8feb4,300755159,0,0x0,8
tick,0x7ffe67f8feb4,300770745,0,0x0,8
tick,0x7ffe67f8feb4,300786120,0,0x0,8
tick,0x7ffe67f8feb4,300801979,0,0x0,8
tick,0x7ffe67f8feb4,300818050,0,0x0,8
tick,0x7ffe67f8feb4,300834301,0,0x0,8
tick,0x7ffe67f8feb4,300850191,0,0x0,8
tick,0x7ffe67f8feb4,300865294,0,0x0,8
tick,0x7ffe67f8feb4,300881407,0,0x0,8
tick,0x7ffe67f8feb4,300896893,0,0x0,8
tick,0x7ffe67f8feb4,300912183,0,0x0,8
tick,0x7ffe67f8feb4,300927425,0,0x0,8
tick,0x7ffe67f8feb4,300942725,0,0x0,8
tick,0x7ffe67f8feb4,300958115,0,0x0,8
tick,0x7ffe67f8feb4,300973970,0,0x0,8
tick,0x7ffe67f8feb4,300989285,0,0x0,8
tick,0x7ffe67f8feb4,301005253,0,0x0,8
tick,0x7ffe67f8feb4,301020206,0,0x0,8
tick,0x7ffe67f8feb4,301036593,0,0x0,8
tick,0x7ffe67f8feb4,301051956,0,0x0,8
tick,0x7ffe67f8feb4,301066953,0,0x0,8
tick,0x7ffe67f8feb4,301081803,0,0x0,8
tick,0x7ffe67f8feb4,301097540,0,0x0,8
tick,0x7ffe67f8feb4,301113551,0,0x0,8
tick,0x7ffe67f8feb4,301129147,0,0x0,8
tick,0x7ffe67f8feb4,301144685,0,0x0,8
tick,0x7ffe67f8feb4,301160451,0,0x0,8
tick,0x7ffe67f8feb4,301176086,0,0x0,8
tick,0x7ffe67f8feb4,301191871,0,0x0,8
tick,0x7ffe67f8feb4,301207792,0,0x0,8
tick,0x7ffe67f8feb4,301222779,0,0x0,8
tick,0x7ffe67f8feb4,301238776,0,0x0,8
tick,0x7ffe67f8feb4,301254200,0,0x0,8
tick,0x7ffe67f8feb4,301269525,0,0x0,8
tick,0x7ffe67f8feb4,301285306,0,0x0,8
tick,0x7ffe67f8feb4,301300732,0,0x0,8
tick,0x7ffe67f8feb4,301316692,0,0x0,8
tick,0x7ffe67f8feb4,301332096,0,0x0,8
tick,0x7ffe67f8feb4,301347256,0,0x0,8
tick,0x7ffe67f8feb4,301362380,0,0x0,8
tick,0x7ffe67f8feb4,301378123,0,0x0,8
tick,0x7ffe67f8feb4,301394271,0,0x0,8
tick,0x7ffe67f8feb4,301410064,0,0x0,8
tick,0x7ffe67f8feb4,301425575,0,0x0,8
tick,0x7ffe67f8feb4,301441032,0,0x0,8
tick,0x7ffe67f8feb4,301456700,0,0x0,8
tick,0x7ffe67f8feb4,301471974,0,0x0,8
tick,0x7ffe67f8feb4,301487014,0,0x0,8
tick,0x7ffe67f8feb4,301503200,0,0x0,8
tick,0x7ffe67f8feb4,301519312,0,0x0,8
tick,0x7ffe67f8feb4,301534698,0,0x0,8
tick,0x7ffe67f8feb4,301549817,0,0x0,8
tick,0x7ffe67f8feb4,301565704,0,0x0,8
tick,0x7ffe67f8feb4,301581703,0,0x0,8
tick,0x7ffe67f8feb4,301597079,0,0x0,8
tick,0x7ffe67f8feb4,301612628,0,0x0,8
tick,0x7ffe67f8feb4,301628393,0,0x0,8
tick,0x7ffe67f8feb4,301643847,0,0x0,8
tick,0x7ffe67f8feb4,301659673,0,0x0,8
tick,0x7ffe67f8feb4,301674932,0,0x0,8
tick,0x7ffe67f8feb4,301690298,0,0x0,8
tick,0x7ffe67f8feb4,301705282,0,0x0,8
tick,0x7ffe67f8feb4,301720413,0,0x0,8
tick,0x7ffe67f8feb4,301736403,0,0x0,8
tick,0x7ffe67f8feb4,301751611,0,0x0,8
tick,0x7ffe67f8feb4,301766721,0,0x0,8
tick,0x7ffe67f8feb4,301782539,0,0x0,8
tick,0x7ffe67f8feb4,301798537,0,0x0,8
tick,0x7ffe67f8feb4,301813976,0,0x0,8
tick,0x7ffe67f8feb4,301829406,0,0x0,8
tick,0x7ffe67f8feb4,301844880,0,0x0,8
tick,0x7ffe67f8feb4,301867780,0,0x0,8
tick,0x7ffe67f8feb4,301876830,0,0x0,8
tick,0x7ffe67f8feb4,301891785,0,0x0,8
tick,0x7ffe67f8feb4,301907889,0,0x0,8
tick,0x7ffe67f8feb4,301923801,0,0x0,8
tick,0x7ffe67f8feb4,301939790,0,0x0,8
tick,0x7ffe67f8feb4,301955637,0,0x0,8
tick,0x7ffe67f8feb4,301971687,0,0x0,8
tick,0x7ffe67f8feb4,301987627,0,0x0,8
tick,0x7ffe67f8feb4,302003121,0,0x0,8
tick,0x7ffe67f8feb4,302018408,0,0x0,8
tick,0x7ffe67f8feb4,302034056,0,0x0,8
tick,0x7ffe67f8feb4,302050102,0,0x0,8
tick,0x7ffe67f8feb4,302066326,0,0x0,8
tick,0x7ffe67f8feb4,302082141,0,0x0,8
tick,0x7ffe67f8feb4,302098193,0,0x0,8
tick,0x7ffe67f8feb4,302113287,0,0x0,8
tick,0x7ffe67f8feb4,302128388,0,0x0,8
tick,0x7ffe67f8feb4,302143787,0,0x0,8
tick,0x7ffe67f8feb4,302158753,0,0x0,8
tick,0x7ffe67f8feb4,302174873,0,0x0,8
tick,0x7ffe67f8feb4,302189853,0,0x0,8
tick,0x7ffe67f8feb4,302205067,0,0x0,8
tick,0x7ffe67f8feb4,302221058,0,0x0,8
tick,0x7ffe67f8feb4,302237042,0,0x0,8
tick,0x7ffe67f8feb4,302252511,0,0x0,8
tick,0x7ffe67f8feb4,302268086,0,0x0,8
tick,0x7ffe67f8feb4,302284064,0,0x0,8
tick,0x7ffe67f8feb4,302300065,0,0x0,8
tick,0x7ffe67f8feb4,302316111,0,0x0,8
tick,0x7ffe67f8feb4,302331182,0,0x0,8
tick,0x7ffe67f8feb4,302347199,0,0x0,8
tick,0x7ffe67f8feb4,302361891,0,0x0,8
tick,0x7ffe67f8feb4,302377208,0,0x0,8
tick,0x7ffe67f8feb4,302392699,0,0x0,8
tick,0x7ffe67f8feb4,302408392,0,0x0,8
tick,0x7ffe67f8feb4,302424306,0,0x0,8
tick,0x7ffe67f8feb4,302439459,0,0x0,8
tick,0x7ffe67f8feb4,302455333,0,0x0,8
tick,0x7ffe67f8feb4,302470506,0,0x0,8
tick,0x7ffe67f8feb4,302486359,0,0x0,8
tick,0x7ffe67f8feb4,302501890,0,0x0,8
tick,0x7ffe67f8feb4,302517143,0,0x0,8
tick,0x7ffe67f8feb4,302532690,0,0x0,8
tick,0x7ffe67f8feb4,302548213,0,0x0,8
tick,0x7ffe67f8feb4,302563580,0,0x0,8
tick,0x7ffe67f8feb4,302578911,0,0x0,8
tick,0x7ffe67f8feb4,302594441,0,0x0,8
tick,0x7ffe67f8feb4,302609512,0,0x0,8
tick,0x7ffe67f8feb4,302625205,0,0x0,8
tick,0x7ffe67f8feb4,302641110,0,0x0,8
tick,0x7ffe67f8feb4,302656578,0,0x0,8
tick,0x7ffe67f8feb4,302672299,0,0x0,8
tick,0x7ffe67f8feb4,302687744,0,0x0,8
tick,0x7ffe67f8feb4,302703417,0,0x0,8
tick,0x7ffe67f8feb4,302719205,0,0x0,8
tick,0x7ffe67f8feb4,302735131,0,0x0,8
tick,0x7ffe67f8feb4,302750172,0,0x0,8
tick,0x7ffe67f8feb4,302766429,0,0x0,8
tick,0x7ffe67f8feb4,302781587,0,0x0,8
tick,0x7ffe67f8feb4,302797664,0,0x0,8
tick,0x7ffe67f8feb4,302813206,0,0x0,8
tick,0x7ffe67f8feb4,302828915,0,0x0,8
tick,0x7ffe67f8feb4,302844801,0,0x0,8
tick,0x7ffe67f8feb4,302860299,0,0x0,8
tick,0x7ffe67f8feb4,302875799,0,0x0,8
tick,0x7ffe67f8feb4,302891458,0,0x0,8
tick,0x7ffe67f8feb4,302907425,0,0x0,8
tick,0x7ffe67f8feb4,302922982,0,0x0,8
tick,0x7ffe67f8feb4,302938885,0,0x0,8
tick,0x7ffe67f8feb4,302954514,0,0x0,8
tick,0x7ffe67f8feb4,302969947,0,0x0,8
tick,0x7ffe67f8feb4,302985098,0,0x0,8
tick,0x7ffe67f8feb4,303000914,0,0x0,8
tick,0x7ffe67f8feb4,303016476,0,0x0,8
tick,0x7ffe67f8feb4,303031979,0,0x0,8
tick,0x7ffe67f8feb4,303048096,0,0x0,8
tick,0x7ffe67f8feb4,303064060,0,0x0,8
tick,0x7ffe67f8feb4,303079226,0,0x0,8
tick,0x7ffe67f8feb4,303095441,0,0x0,8
tick,0x7ffe67f8feb4,303111273,0,0x0,8
tick,0x7ffe67f8feb4,303126681,0,0x0,8
tick,0x7ffe67f8feb4,303142206,0,0x0,8
tick,0x7ffe67f8feb4,303157458,0,0x0,8
tick,0x7ffe67f8feb4,303173191,0,0x0,8
tick,0x7ffe67f8feb4,303188212,0,0x0,8
tick,0x7ffe67f8feb4,303203880,0,0x0,8
tick,0x7ffe67f8feb4,303219790,0,0x0,8
tick,0x7ffe67f8feb4,303235772,0,0x0,8
tick,0x7ffe67f8feb4,303251799,0,0x0,8
tick,0x7ffe67f8feb4,303267796,0,0x0,8
tick,0x7ffe67f8feb4,303282876,0,0x0,8
tick,0x7ffe67f8feb4,303298895,0,0x0,8
tick,0x7ffe67f8feb4,303314932,0,0x0,8
tick,0x7ffe67f8feb4,303330387,0,0x0,8
tick,0x7ffe67f8feb4,303346090,0,0x0,8
tick,0x7ffe67f8feb4,303361758,0,0x0,8
tick,0x7ffe67f8feb4,303377646,0,0x0,8
tick,0x7ffe67f8feb4,303392794,0,0x0,8
tick,0x7ffe67f8feb4,303408668,0,0x0,8
tick,0x7ffe67f8feb4,303423815,0,0x0,8
tick,0x7ffe67f8feb4,303439165,0,0x0,8
tick,0x7ffe67f8feb4,303454949,0,0x0,8
tick,0x7ffe67f8feb4,303471225,0,0x0,8
tick,0x7ffe67f8feb4,303486784,0,0x0,8
tick,0x7ffe67f8feb4,303503186,0,0x0,8
tick,0x7ffe67f8feb4,303519321,0,0x0,8
tick,0x7ffe67f8feb4,303535000,0,0x0,8
tick,0x7ffe67f8feb4,303550412,0,0x0,8
tick,0x7ffe67f8feb4,303566147,0,0x0,8
tick,0x7ffe67f8feb4,303581482,0,0x0,8
tick,0x7ffe67f8feb4,303597451,0,0x0,8
tick,0x7ffe67f8feb4,303612943,0,0x0,8
tick,0x7ffe67f8feb4,303627956,0,0x0,8
tick,0x7ffe67f8feb4,303643490,0,0x0,8
tick,0x7ffe67f8feb4,303658944,0,0x0,8
tick,0x7ffe67f8feb4,303674361,0,0x0,8
tick,0x7ffe67f8feb4,303689961,0,0x0,8
tick,0x7ffe67f8feb4,303705424,0,0x0,8
tick,0x7ffe67f8feb4,303720681,0,0x0,8
tick,0x7ffe67f8feb4,303736255,0,0x0,8
tick,0x7ffe67f8feb4,303751626,0,0x0,8
tick,0x7ffe67f8feb4,303767126,0,0x0,8
tick,0x7ffe67f8feb4,303782251,0,0x0,8
tick,0x7ffe67f8feb4,303797268,0,0x0,8
tick,0x7ffe67f8feb4,303813064,0,0x0,8
tick,0x7ffe67f8feb4,303829386,0,0x0,8
tick,0x7ffe67f8feb4,303844672,0,0x0,8
tick,0x7ffe67f8feb4,303860526,0,0x0,8
tick,0x7ffe67f8feb4,303876546,0,0x0,8
tick,0x7ffe67f8feb4,303892715,0,0x0,8
tick,0x7ffe67f8feb4,303908719,0,0x0,8
tick,0x7ffe67f8feb4,303925220,0,0x0,8
tick,0x7ffe67f8feb4,303940761,0,0x0,8
tick,0x7ffe67f8feb4,303955913,0,0x0,8
tick,0x7ffe67f8feb4,303971380,0,0x0,8
tick,0x7ffe67f8feb4,303987102,0,0x0,8
tick,0x7ffe67f8feb4,304002815,0,0x0,8
tick,0x7ffe67f8feb4,304018167,0,0x0,8
tick,0x7ffe67f8feb4,304034183,0,0x0,8
tick,0x7ffe67f8feb4,304050187,0,0x0,8
tick,0x7ffe67f8feb4,304065563,0,0x0,8
tick,0x7ffe67f8feb4,304081558,0,0x0,8
tick,0x7ffe67f8feb4,304096701,0,0x0,8
tick,0x7ffe67f8feb4,304111907,0,0x0,8
tick,0x7ffe67f8feb4,304127738,0,0x0,8
tick,0x7ffe67f8feb4,304143002,0,0x0,8
tick,0x7ffe67f8feb4,304158030,0,0x0,8
tick,0x7ffe67f8feb4,304173444,0,0x0,8
tick,0x7ffe67f8feb4,304188574,0,0x0,8
tick,0x7ffe67f8feb4,304204413,0,0x0,8
tick,0x7ffe67f8feb4,304220186,0,0x0,8
tick,0x7ffe67f8feb4,304236136,0,0x0,8
tick,0x7ffe67f8feb4,304251142,0,0x0,8
tick,0x7ffe67f8feb4,304266161,0,0x0,8
tick,0x7ffe67f8feb4,304281773,0,0x0,8
tick,0x7ffe67f8feb4,304297468,0,0x0,8
tick,0x7ffe67f8feb4,304313023,0,0x0,8
tick,0x7ffe67f8feb4,304328074,0,0x0,8
tick,0x7ffe67f8feb4,304343283,0,0x0,8
tick,0x7ffe67f8feb4,304359177,0,0x0,8
tick,0x7ffe67f8feb4,304374620,0,0x0,8
tick,0x7ffe67f8feb4,304390166,0,0x0,8
tick,0x7ffe67f8feb4,304405426,0,0x0,8
tick,0x7ffe67f8feb4,304421216,0,0x0,8
tick,0x7ffe67f8feb4,304437142,0,0x0,8
tick,0x7ffe67f8feb4,304453222,0,0x0,8
tick,0x7ffe67f8feb4,304468976,0,0x0,8
tick,0x7ffe67f8feb4,304484388,0,0x0,8
tick,0x7ffe67f8feb4,304500198,0,0x0,8
tick,0x7ffe67f8feb4,304515439,0,0x0,8
tick,0x7ffe67f8feb4,304531272,0,0x0,8
tick,0x7ffe67f8feb4,304547055,0,0x0,8
tick,0x7ffe67f8feb4,304562688,0,0x0,8
tick,0x7ffe67f8feb4,304578916,0,0x0,8
tick,0x7ffe67f8feb4,304595095,0,0x0,8
tick,0x7ffe67f8feb4,304609728,0,0x0,8
tick,0x7ffe67f8feb4,304626297,0,0x0,8
tick,0x7ffe67f8feb4,304641699,0,0x0,8
tick,0x7ffe67f8feb4,304657325,0,0x0,8
tick,0x7ffe67f8feb4,304673139,0,0x0,8
tick,0x7ffe67f8feb4,304688134,0,0x0,8
tick,0x7ffe67f8feb4,304704038,0,0x0,8
tick,0x7ffe67f8feb4,304719563,0,0x0,8
tick,0x7ffe67f8feb4,304734929,0,0x0,8
tick,0x7ffe67f8feb4,304750631,0,0x0,8
tick,0x7ffe67f8feb4,304765922,0,0x0,8
tick,0x7ffe67f8feb4,304781729,0,0x0,8
tick,0x7ffe67f8feb4,304796857,0,0x0,8
tick,0x7ffe67f8feb4,304812132,0,0x0,8
tick,0x7ffe67f8feb4,304827721,0,0x0,8
tick,0x7ffe67f8feb4,304843327,0,0x0,8
tick,0x7ffe67f8feb4,304859114,0,0x0,8
tick,0x7ffe67f8feb4,304874741,0,0x0,8
tick,0x7ffe67f8feb4,304890276,0,0x0,8
tick,0x7ffe67f8feb4,304906556,0,0x0,8
tick,0x7ffe67f8feb4,304920852,0,0x0,8
tick,0x7ffe67f8feb4,304937186,0,0x0,8
tick,0x7ffe67f8feb4,304952577,0,0x0,8
tick,0x7ffe67f8feb4,304968116,0,0x0,8
tick,0x7ffe67f8feb4,304984129,0,0x0,8
tick,0x7ffe67f8feb4,304999765,0,0x0,8
tick,0x7ffe67f8feb4,305014814,0,0x0,8
tick,0x7ffe67f8feb4,305030361,0,0x0,8
tick,0x7ffe67f8feb4,305045556,0,0x0,8
tick,0x7ffe67f8feb4,305061259,0,0x0,8
tick,0x7ffe67f8feb4,305076681,0,0x0,8
tick,0x7ffe67f8feb4,305091757,0,0x0,8
tick,0x7ffe67f8feb4,305107737,0,0x0,8
tick,0x7ffe67f8feb4,305123284,0,0x0,8
tick,0x7ffe67f8feb4,305139140,0,0x0,8
tick,0x7ffe67f8feb4,305154919,0,0x0,8
tick,0x7ffe67f8feb4,305170510,0,0x0,8
tick,0x7ffe67f8feb4,305186779,0,0x0,8
tick,0x7ffe67f8feb4,305202092,0,0x0,8
tick,0x7ffe67f8feb4,305217783,0,0x0,8
tick,0x7ffe67f8feb4,305233402,0,0x0,8
tick,0x7ffe67f8feb4,305249289,0,0x0,8
tick,0x7ffe67f8feb4,305265275,0,0x0,8
tick,0x7ffe67f8feb4,305281313,0,0x0,8
tick,0x7ffe67f8feb4,305297355,0,0x0,8
tick,0x7ffe67f8feb4,305312429,0,0x0,8
tick,0x7ffe67f8feb4,305328427,0,0x0,8
tick,0x7ffe67f8feb4,305344648,0,0x0,8
tick,0x7ffe67f8feb4,305360101,0,0x0,8
tick,0x7ffe67f8feb4,305375974,0,0x0,8
tick,0x7ffe67f8feb4,305390931,0,0x0,8
tick,0x7ffe67f8feb4,305406172,0,0x0,8
tick,0x7ffe67f8feb4,305421930,0,0x0,8
tick,0x7ffe67f8feb4,305437205,0,0x0,8
tick,0x7ffe67f8feb4,305452550,0,0x0,8
tick,0x7ffe67f8feb4,305468645,0,0x0,8
tick,0x7ffe67f8feb4,305484658,0,0x0,8
tick,0x7ffe67f8feb4,305500023,0,0x0,8
tick,0x7ffe67f8feb4,305515847,0,0x0,8
tick,0x7ffe67f8feb4,305532054,0,0x0,8
tick,0x7ffe67f8feb4,305548022,0,0x0,8
tick,0x7ffe67f8feb4,305563312,0,0x0,8
tick,0x7ffe67f8feb4,305579287,0,0x0,8
tick,0x7ffe67f8feb4,305595002,0,0x0,8
tick,0x7ffe67f8feb4,305610364,0,0x0,8
tick,0x7ffe67f8feb4,305625988,0,0x0,8
tick,0x7ffe67f8feb4,305641387,0,0x0,8
tick,0x7ffe67f8feb4,305657448,0,0x0,8
tick,0x7ffe67f8feb4,305673011,0,0x0,8
tick,0x7ffe67f8feb4,305688434,0,0x0,8
tick,0x7ffe67f8feb4,305704169,0,0x0,8
tick,0x7ffe67f8feb4,305719549,0,0x0,8
tick,0x7ffe67f8feb4,305735460,0,0x0,8
tick,0x7ffe67f8feb4,305751099,0,0x0,8
tick,0x7ffe67f8feb4,305767092,0,0x0,8
tick,0x7ffe67f8feb4,305782846,0,0x0,8
tick,0x7ffe67f8feb4,305798848,0,0x0,8
tick,0x7ffe67f8feb4,305814828,0,0x0,8
tick,0x7ffe67f8feb4,305830873,0,0x0,8
tick,0x7ffe67f8feb4,305846887,0,0x0,8
tick,0x7ffe67f8feb4,305862832,0,0x0,8
tick,0x7ffe67f8feb4,305878860,0,0x0,8
tick,0x7ffe67f8feb4,305894849,0,0x0,8
tick,0x7ffe67f8feb4,305910854,0,0x0,8
tick,0x7ffe67f8feb4,305926851,0,0x0,8
tick,0x7ffe67f8feb4,305943164,0,0x0,8
tick,0x7ffe67f8feb4,305958868,0,0x0,8
tick,0x7ffe67f8feb4,305974062,0,0x0,8
tick,0x7ffe67f8feb4,305989887,0,0x0,8
tick,0x7ffe67f8feb4,306005869,0,0x0,8
tick,0x7ffe67f8feb4,306021064,0,0x0,8
tick,0x7ffe67f8feb4,306036897,0,0x0,8
tick,0x7ffe67f8feb4,306052065,0,0x0,8
tick,0x7ffe67f8feb4,306068088,0,0x0,8
tick,0x7ffe67f8feb4,306084086,0,0x0,8
tick,0x7ffe67f8feb4,306100290,0,0x0,8
tick,0x7ffe67f8feb4,306116075,0,0x0,8
tick,0x7ffe67f8feb4,306132107,0,0x0,8
tick,0x7ffe67f8feb4,306146946,0,0x0,8
tick,0x7ffe67f8feb4,306162085,0,0x0,8
tick,0x7ffe67f8feb4,306177968,0,0x0,8
tick,0x7ffe67f8feb4,306193804,0,0x0,8
tick,0x7ffe67f8feb4,306209837,0,0x0,8
tick,0x7ffe67f8feb4,306225917,0,0x0,8
tick,0x7ffe67f8feb4,306241803,0,0x0,8
tick,0x7ffe67f8feb4,306257783,0,0x0,8
tick,0x7ffe67f8feb4,306273804,0,0x0,8
tick,0x7ffe67f8feb4,306289805,0,0x0,8
tick,0x7ffe67f8feb4,306305828,0,0x0,8
tick,0x7ffe67f8feb4,306321810,0,0x0,8
tick,0x7ffe67f8feb4,306337892,0,0x0,8
tick,0x7ffe67f8feb4,306353322,0,0x0,8
tick,0x7ffe67f8feb4,306369284,0,0x0,8
tick,0x7ffe67f8feb4,306385265,0,0x0,8
tick,0x7ffe67f8feb4,306400591,0,0x0,8
tick,0x7ffe67f8feb4,306416298,0,0x0,8
tick,0x7ffe67f8feb4,306432323,0,0x0,8
tick,0x7ffe67f8feb4,306448367,0,0x0,8
tick,0x7ffe67f8feb4,306464420,0,0x0,8
tick,0x7ffe67f8feb4,306480339,0,0x0,8
tick,0x7ffe67f8feb4,306495722,0,0x0,8
tick,0x7ffe67f8feb4,306510863,0,0x0,8
tick,0x7ffe67f8feb4,306526531,0,0x0,8
tick,0x7ffe67f8feb4,306541672,0,0x0,8
tick,0x7ffe67f8feb4,306557695,0,0x0,8
tick,0x7ffe67f8feb4,306573169,0,0x0,8
tick,0x7ffe67f8feb4,306588868,0,0x0,8
tick,0x7ffe67f8feb4,306604738,0,0x0,8
tick,0x7ffe67f8feb4,306620716,0,0x0,8
tick,0x7ffe67f8feb4,306636726,0,0x0,8
tick,0x7ffe67f8feb4,306652167,0,0x0,8
tick,0x7ffe67f8feb4,306667752,0,0x0,8
tick,0x7ffe67f8feb4,306682903,0,0x0,8
tick,0x7ffe67f8feb4,306698942,0,0x0,8
tick,0x7ffe67f8feb4,306714920,0,0x0,8
tick,0x7ffe67f8feb4,306730769,0,0x0,8
tick,0x7ffe67f8feb4,306745949,0,0x0,8
tick,0x7ffe67f8feb4,306761870,0,0x0,8
tick,0x7ffe67f8feb4,306777593,0,0x0,8
tick,0x7ffe67f8feb4,306793672,0,0x0,8
tick,0x7ffe67f8feb4,306809343,0,0x0,8
tick,0x7ffe67f8feb4,306825329,0,0x0,8
tick,0x7ffe67f8feb4,306840663,0,0x0,8
tick,0x7ffe67f8feb4,306856266,0,0x0,8
tick,0x7ffe67f8feb4,306871399,0,0x0,8
tick,0x7ffe67f8feb4,306887555,0,0x0,8
tick,0x7ffe67f8feb4,306903449,0,0x0,8
tick,0x7ffe67f8feb4,306918829,0,0x0,8
tick,0x7ffe67f8feb4,306934558,0,0x0,8
tick,0x7ffe67f8feb4,306950217,0,0x0,8
tick,0x7ffe67f8feb4,306965518,0,0x0,8
tick,0x7ffe67f8feb4,306980785,0,0x0,8
tick,0x7ffe67f8feb4,306995781,0,0x0,8
tick,0x7ffe67f8feb4,307011204,0,0x0,8
tick,0x7ffe67f8feb4,307026643,0,0x0,8
tick,0x7ffe67f8feb4,307042019,0,0x0,8
tick,0x7ffe67f8feb4,307057176,0,0x0,8
tick,0x7ffe67f8feb4,307072965,0,0x0,8
tick,0x7ffe67f8feb4,307088209,0,0x0,8
tick,0x7ffe67f8feb4,307103580,0,0x0,8
tick,0x7ffe67f8feb4,307119608,0,0x0,8
tick,0x7ffe67f8feb4,307134954,0,0x0,8
tick,0x7ffe67f8feb4,307150989,0,0x0,8
tick,0x7ffe67f8feb4,307166093,0,0x0,8
tick,0x7ffe67f8feb4,307181285,0,0x0,8
tick,0x7ffe67f8feb4,307196520,0,0x0,8
tick,0x7ffe67f8feb4,307212412,0,0x0,8
tick,0x7ffe67f8feb4,307228262,0,0x0,8
tick,0x7ffe67f8feb4,307244220,0,0x0,8
tick,0x7ffe67f8feb4,307260189,0,0x0,8
tick,0x7ffe67f8feb4,307276182,0,0x0,8
tick,0x7ffe67f8feb4,307291918,0,0x0,8
tick,0x7ffe67f8feb4,307307268,0,0x0,8
tick,0x7ffe67f8feb4,307323304,0,0x0,8
tick,0x7ffe67f8feb4,307339339,0,0x0,8
tick,0x7ffe67f8feb4,307354825,0,0x0,8
tick,0x7ffe67f8feb4,307370695,0,0x0,8
tick,0x7ffe67f8feb4,307386664,0,0x0,8
tick,0x7ffe67f8feb4,307402035,0,0x0,8
tick,0x7ffe67f8feb4,307417430,0,0x0,8
tick,0x7ffe67f8feb4,307433094,0,0x0,8
tick,0x7ffe67f8feb4,307449050,0,0x0,8
tick,0x7ffe67f8feb4,307464354,0,0x0,8
tick,0x7ffe67f8feb4,307479663,0,0x0,8
tick,0x7ffe67f8feb4,307495281,0,0x0,8
tick,0x7ffe67f8feb4,307510339,0,0x0,8
tick,0x7ffe67f8feb4,307526586,0,0x0,8
tick,0x7ffe67f8feb4,307542594,0,0x0,8
tick,0x7ffe67f8feb4,307557749,0,0x0,8
tick,0x7ffe67f8feb4,307573813,0,0x0,8
tick,0x7ffe67f8feb4,307589369,0,0x0,8
tick,0x7ffe67f8feb4,307605625,0,0x0,8
tick,0x7ffe67f8feb4,307620720,0,0x0,8
tick,0x7ffe67f8feb4,307636404,0,0x0,8
tick,0x7ffe67f8feb4,307651673,0,0x0,8
tick,0x7ffe67f8feb4,307667020,0,0x0,8
tick,0x7ffe67f8feb4,307682732,0,0x0,8
tick,0x7ffe67f8feb4,307697998,0,0x0,8
tick,0x7ffe67f8feb4,307713341,0,0x0,8
tick,0x7ffe67f8feb4,307729001,0,0x0,8
tick,0x7ffe67f8feb4,307744660,0,0x0,8
tick,0x7ffe67f8feb4,307759849,0,0x0,8
tick,0x7ffe67f8feb4,307776244,0,0x0,8
tick,0x7ffe67f8feb4,307791569,0,0x0,8
tick,0x7ffe67f8feb4,307807442,0,0x0,8
tick,0x7ffe67f8feb4,307822740,0,0x0,8
tick,0x7ffe67f8feb4,307838715,0,0x0,8
tick,0x7ffe67f8feb4,307854734,0,0x0,8
tick,0x7ffe67f8feb4,307869958,0,0x0,8
tick,0x7ffe67f8feb4,307885167,0,0x0,8
tick,0x7ffe67f8feb4,307900357,0,0x0,8
tick,0x7ffe67f8feb4,307916360,0,0x0,8
tick,0x7ffe67f8feb4,307932370,0,0x0,8
tick,0x7ffe67f8feb4,307947847,0,0x0,8
tick,0x7ffe67f8feb4,307963080,0,0x0,8
tick,0x7ffe67f8feb4,307977958,0,0x0,8
tick,0x7ffe67f8feb4,307994037,0,0x0,8
tick,0x7ffe67f8feb4,308009160,0,0x0,8
tick,0x7ffe67f8feb4,308025063,0,0x0,8
tick,0x7ffe67f8feb4,308040097,0,0x0,8
tick,0x7ffe67f8feb4,308055922,0,0x0,8
tick,0x7ffe67f8feb4,308071953,0,0x0,8
tick,0x7ffe67f8feb4,308088041,0,0x0,8
tick,0x7ffe67f8feb4,308104092,0,0x0,8
tick,0x7ffe67f8feb4,308120133,0,0x0,8
tick,0x7ffe67f8feb4,308136120,0,0x0,8
tick,0x7ffe67f8feb4,308151891,0,0x0,8
tick,0x7ffe67f8feb4,308167896,0,0x0,8
tick,0x7ffe67f8feb4,308183424,0,0x0,8
tick,0x7ffe67f8feb4,308199280,0,0x0,8
tick,0x7ffe67f8feb4,308214907,0,0x0,8
tick,0x7ffe67f8feb4,308230574,0,0x0,8
tick,0x7ffe67f8feb4,308246521,0,0x0,8
tick,0x7ffe67f8feb4,308262495,0,0x0,8
tick,0x7ffe67f8feb4,308278472,0,0x0,8
tick,0x7ffe67f8feb4,308294485,0,0x0,8
tick,0x7ffe67f8feb4,308310509,0,0x0,8
tick,0x7ffe67f8feb4,308326512,0,0x0,8
tick,0x7ffe67f8feb4,308342315,0,0x0,8
tick,0x7ffe67f8feb4,308357505,0,0x0,8
tick,0x7ffe67f8feb4,308372839,0,0x0,8
tick,0x7ffe67f8feb4,308388140,0,0x0,8
tick,0x7ffe67f8feb4,308404173,0,0x0,8
tick,0x7ffe67f8feb4,308419459,0,0x0,8
tick,0x7ffe67f8feb4,308435251,0,0x0,8
tick,0x7ffe67f8feb4,308450799,0,0x0,8
tick,0x7ffe67f8feb4,308465980,0,0x0,8
tick,0x7ffe67f8feb4,308481492,0,0x0,8
tick,0x7ffe67f8feb4,308496926,0,0x0,8
tick,0x7ffe67f8feb4,308511874,0,0x0,8
tick,0x7ffe67f8feb4,308527803,0,0x0,8
tick,0x7ffe67f8feb4,308542844,0,0x0,8
tick,0x7ffe67f8feb4,308558084,0,0x0,8
tick,0x7ffe67f8feb4,308574126,0,0x0,8
tick,0x7ffe67f8feb4,308589364,0,0x0,8
tick,0x7ffe67f8feb4,308605346,0,0x0,8
tick,0x7ffe67f8feb4,308621369,0,0x0,8
tick,0x7ffe67f8feb4,308637381,0,0x0,8
tick,0x7ffe67f8feb4,308652915,0,0x0,8
tick,0x7ffe67f8feb4,308668639,0,0x0,8
tick,0x7ffe67f8feb4,308684321,0,0x0,8
tick,0x7ffe67f8feb4,308700549,0,0x0,8
tick,0x7ffe67f8feb4,308715508,0,0x0,8
tick,0x7ffe67f8feb4,308730887,0,0x0,8
tick,0x7ffe67f8feb4,308746975,0,0x0,8
tick,0x7ffe67f8feb4,308762571,0,0x0,8
tick,0x7ffe67f8feb4,308778067,0,0x0,8
tick,0x7ffe67f8feb4,308793662,0,0x0,8
tick,0x7ffe67f8feb4,308808986,0,0x0,8
tick,0x7ffe67f8feb4,308825023,0,0x0,8
tick,0x7ffe67f8feb4,308840166,0,0x0,8
tick,0x7ffe67f8feb4,308856291,0,0x0,8
tick,0x7ffe67f8feb4,308872079,0,0x0,8
tick,0x7ffe67f8feb4,308887710,0,0x0,8
tick,0x7ffe67f8feb4,308903751,0,0x0,8
tick,0x7ffe67f8feb4,308918717,0,0x0,8
tick,0x7ffe67f8feb4,308934260,0,0x0,8
tick,0x7ffe67f8feb4,308949030,0,0x0,8
tick,0x7ffe67f8feb4,308964694,0,0x0,8
tick,0x7ffe67f8feb4,308980564,0,0x0,8
tick,0x7ffe67f8feb4,308996182,0,0x0,8
tick,0x7ffe67f8feb4,309011420,0,0x0,8
tick,0x7ffe67f8feb4,309027001,0,0x0,8
tick,0x7ffe67f8feb4,309042975,0,0x0,8
tick,0x7ffe67f8feb4,309057843,0,0x0,8
tick,0x7ffe67f8feb4,309073084,0,0x0,8
tick,0x7ffe67f8feb4,309088850,0,0x0,8
tick,0x7ffe67f8feb4,309104876,0,0x0,8
tick,0x7ffe67f8feb4,309120243,0,0x0,8
tick,0x7ffe67f8feb4,309135694,0,0x0,8
tick,0x7ffe67f8feb4,309151223,0,0x0,8
tick,0x7ffe67f8feb4,309167256,0,0x0,8
tick,0x7ffe67f8feb4,309182853,0,0x0,8
tick,0x7ffe67f8feb4,309198289,0,0x0,8
tick,0x7ffe67f8feb4,309214384,0,0x0,8
tick,0x7ffe67f8feb4,309229548,0,0x0,8
tick,0x7ffe67f8feb4,309245015,0,0x0,8
tick,0x7ffe67f8feb4,309261143,0,0x0,8
tick,0x7ffe67f8feb4,309276063,0,0x0,8
tick,0x7ffe67f8feb4,309292015,0,0x0,8
tick,0x7ffe67f8feb4,309307987,0,0x0,8
tick,0x7ffe67f8feb4,309323209,0,0x0,8
tick,0x7ffe67f8feb4,309338995,0,0x0,8
tick,0x7ffe67f8feb4,309355047,0,0x0,8
tick,0x7ffe67f8feb4,309371081,0,0x0,8
tick,0x7ffe67f8feb4,309386592,0,0x0,8
tick,0x7ffe67f8feb4,309402522,0,0x0,8
tick,0x7ffe67f8feb4,309418023,0,0x0,8
tick,0x7ffe67f8feb4,309433076,0,0x0,8
tick,0x7ffe67f8feb4,309448826,0,0x0,8
tick,0x7ffe67f8feb4,309464132,0,0x0,8
tick,0x7ffe67f8feb4,309479823,0,0x0,8
tick,0x7ffe67f8feb4,309495661,0,0x0,8
tick,0x7ffe67f8feb4,309510875,0,0x0,8
tick,0x7ffe67f8feb4,309526630,0,0x0,8
tick,0x7ffe67f8feb4,309542801,0,0x0,8
tick,0x7ffe67f8feb4,309558256,0,0x0,8
tick,0x7ffe67f8feb4,309574538,0,0x0,8
tick,0x7ffe67f8feb4,309589838,0,0x0,8
tick,0x7ffe67f8feb4,309605854,0,0x0,8
tick,0x7ffe67f8feb4,309621843,0,0x0,8
tick,0x7ffe67f8feb4,309637723,0,0x0,8
tick,0x7ffe67f8feb4,309652893,0,0x0,8
tick,0x7ffe67f8feb4,309667730,0,0x0,8
tick,0x7ffe67f8feb4,309683680,0,0x0,8
tick,0x7ffe67f8feb4,309699589,0,0x0,8
tick,0x7ffe67f8feb4,309715254,0,0x0,8
tick,0x7ffe67f8feb4,309730504,0,0x0,8
tick,0x7ffe67f8feb4,309745838,0,0x0,8
tick,0x7ffe67f8feb4,309761093,0,0x0,8
tick,0x7ffe67f8feb4,309776506,0,0x0,8
tick,0x7ffe67f8feb4,309791347,0,0x0,8
tick,0x7ffe67f8feb4,309806491,0,0x0,8
tick,0x7ffe67f8feb4,309822523,0,0x0,8
tick,0x7ffe67f8feb4,309837957,0,0x0,8
tick,0x7ffe67f8feb4,309853426,0,0x0,8
tick,0x7ffe67f8feb4,309868706,0,0x0,8
tick,0x7ffe67f8feb4,309884472,0,0x0,8
tick,0x7ffe67f8feb4,309900510,0,0x0,8
tick,0x7ffe67f8feb4,309915714,0,0x0,8
tick,0x7ffe67f8feb4,309931426,0,0x0,8
tick,0x7ffe67f8feb4,309947386,0,0x0,8
tick,0x7ffe67f8feb4,309962945,0,0x0,8
tick,0x7ffe67f8feb4,309978661,0,0x0,8
tick,0x7ffe67f8feb4,309993684,0,0x0,8
tick,0x7ffe67f8feb4,310009041,0,0x0,8
tick,0x7ffe67f8feb4,310025221,0,0x0,8
tick,0x7ffe67f8feb4,310040724,0,0x0,8
tick,0x7ffe67f8feb4,310055735,0,0x0,8
tick,0x7ffe67f8feb4,310071587,0,0x0,8
tick,0x7ffe67f8feb4,310086706,0,0x0,8
tick,0x7ffe67f8feb4,310101903,0,0x0,8
tick,0x7ffe67f8feb4,310118066,0,0x0,8
tick,0x7ffe67f8feb4,310133549,0,0x0,8
tick,0x7ffe67f8feb4,310149041,0,0x0,8
tick,0x7ffe67f8feb4,310165070,0,0x0,8
tick,0x7ffe67f8feb4,310180019,0,0x0,8
tick,0x7ffe67f8feb4,310195978,0,0x0,8
tick,0x7ffe67f8feb4,310212054,0,0x0,8
tick,0x7ffe67f8feb4,310227355,0,0x0,8
tick,0x7ffe67f8feb4,310242993,0,0x0,8
tick,0x7ffe67f8feb4,310258566,0,0x0,8
tick,0x7ffe67f8feb4,310274494,0,0x0,8
tick,0x7ffe67f8feb4,310290525,0,0x0,8
tick,0x7ffe67f8feb4,310306520,0,0x0,8
tick,0x7ffe67f8feb4,310322522,0,0x0,8
tick,0x7ffe67f8feb4,310338084,0,0x0,8
tick,0x7ffe67f8feb4,310353606,0,0x0,8
tick,0x7ffe67f8feb4,310368909,0,0x0,8
tick,0x7ffe67f8feb4,310384509,0,0x0,8
tick,0x7ffe67f8feb4,310400128,0,0x0,8
tick,0x7ffe67f8feb4,310415321,0,0x0,8
tick,0x7ffe67f8feb4,310430711,0,0x0,8
tick,0x7ffe67f8feb4,310446778,0,0x0,8
tick,0x7ffe67f8feb4,310462815,0,0x0,8
tick,0x7ffe67f8feb4,310478690,0,0x0,8
tick,0x7ffe67f8feb4,310493737,0,0x0,8
tick,0x7ffe67f8feb4,310508717,0,0x0,8
tick,0x7ffe67f8feb4,310524595,0,0x0,8
tick,0x7ffe67f8feb4,310540289,0,0x0,8
tick,0x7ffe67f8feb4,310555936,0,0x0,8
tick,0x7ffe67f8feb4,310571644,0,0x0,8
tick,0x7ffe67f8feb4,310586629,0,0x0,8
tick,0x7ffe67f8feb4,310608735,0,0x0,8
tick,0x7ffe67f8feb4,310618629,0,0x0,8
tick,0x7ffe67f8feb4,310637860,0,0x0,8
tick,0x7ffe67f8feb4,310650960,0,0x0,8
tick,0x7ffe67f8feb4,310666149,0,0x0,8
tick,0x7ffe67f8feb4,310681496,0,0x0,8
tick,0x7ffe67f8feb4,310696996,0,0x0,8
tick,0x7ffe67f8feb4,310711993,0,0x0,8
tick,0x7ffe67f8feb4,310727274,0,0x0,8
tick,0x7ffe67f8feb4,310742504,0,0x0,8
tick,0x7ffe67f8feb4,310758510,0,0x0,8
tick,0x7ffe67f8feb4,310773838,0,0x0,8
tick,0x7ffe67f8feb4,310790118,0,0x0,8
tick,0x7ffe67f8feb4,310805827,0,0x0,8
tick,0x7ffe67f8feb4,310822027,0,0x0,8
tick,0x7ffe67f8feb4,310837789,0,0x0,8
tick,0x7ffe67f8feb4,310853788,0,0x0,8
tick,0x7ffe67f8feb4,310869767,0,0x0,8
tick,0x7ffe67f8feb4,310885548,0,0x0,8
tick,0x7ffe67f8feb4,310900794,0,0x0,8
tick,0x7ffe67f8feb4,310916852,0,0x0,8
tick,0x7ffe67f8feb4,310932846,0,0x0,8
tick,0x7ffe67f8feb4,310948810,0,0x0,8
tick,0x7ffe67f8feb4,310964806,0,0x0,8
tick,0x7ffe67f8feb4,310980866,0,0x0,8
tick,0x7ffe67f8feb4,310996813,0,0x0,8
tick,0x7ffe67f8feb4,311012853,0,0x0,8
tick,0x7ffe67f8feb4,311028824,0,0x0,8
tick,0x7ffe67f8feb4,311044825,0,0x0,8
tick,0x7ffe67f8feb4,311060863,0,0x0,8
tick,0x7ffe67f8feb4,311076823,0,0x0,8
tick,0x7ffe67f8feb4,311092826,0,0x0,8
tick,0x7ffe67f8feb4,311108835,0,0x0,8
tick,0x7ffe67f8feb4,311124842,0,0x0,8
tick,0x7ffe67f8feb4,311140848,0,0x0,8
tick,0x7ffe67f8feb4,311156877,0,0x0,8
tick,0x7ffe67f8feb4,311172864,0,0x0,8
tick,0x7ffe67f8feb4,311188875,0,0x0,8
tick,0x7ffe67f8feb4,311204848,0,0x0,8
tick,0x7ffe67f8feb4,311220829,0,0x0,8
tick,0x7ffe67f8feb4,311236851,0,0x0,8
tick,0x7ffe67f8feb4,311252854,0,0x0,8
tick,0x7ffe67f8feb4,311268909,0,0x0,8
tick,0x7ffe67f8feb4,311284861,0,0x0,8
tick,0x7ffe67f8feb4,311300879,0,0x0,8
tick,0x7ffe67f8feb4,311316916,0,0x0,8
tick,0x7ffe67f8feb4,311332871,0,0x0,8
tick,0x7ffe67f8feb4,311348906,0,0x0,8
tick,0x7ffe67f8feb4,311364544,0,0x0,8
tick,0x7ffe67f8feb4,311379887,0,0x0,8
tick,0x7ffe67f8feb4,311395910,0,0x0,8
tick,0x7ffe67f8feb4,311410883,0,0x0,8
tick,0x7ffe67f8feb4,311426891,0,0x0,8
tick,0x7ffe67f8feb4,311442924,0,0x0,8
tick,0x7ffe67f8feb4,311458899,0,0x0,8
tick,0x7ffe67f8feb4,311474808,0,0x0,8
tick,0x7ffe67f8feb4,311490271,0,0x0,8
tick,0x7ffe67f8feb4,311505680,0,0x0,8
tick,0x7ffe67f8feb4,311520967,0,0x0,8
tick,0x7ffe67f8feb4,311536148,0,0x0,8
tick,0x7ffe67f8feb4,311551334,0,0x0,8
tick,0x7ffe67f8feb4,311566653,0,0x0,8
tick,0x7ffe67f8feb4,311581733,0,0x0,8
tick,0x7ffe67f8feb4,311597201,0,0x0,8
tick,0x7ffe67f8feb4,311612994,0,0x0,8
tick,0x7ffe67f8feb4,311628359,0,0x0,8
tick,0x7ffe67f8feb4,311644411,0,0x0,8
tick,0x7ffe67f8feb4,311659528,0,0x0,8
tick,0x7ffe67f8feb4,311674777,0,0x0,8
tick,0x7ffe67f8feb4,311690791,0,0x0,8
tick,0x7ffe67f8feb4,311706240,0,0x0,8
tick,0x7ffe67f8feb4,311721634,0,0x0,8
tick,0x7ffe67f8feb4,311736749,0,0x0,8
tick,0x7ffe67f8feb4,311752292,0,0x0,8
tick,0x7ffe67f8feb4,311767478,0,0x0,8
tick,0x7ffe67f8feb4,311782982,0,0x0,8
tick,0x7ffe67f8feb4,311798688,0,0x0,8
tick,0x7ffe67f8feb4,311814661,0,0x0,8
tick,0x7ffe67f8feb4,311830795,0,0x0,8
tick,0x7ffe67f8feb4,311845822,0,0x0,8
tick,0x7ffe67f8feb4,311861919,0,0x0,8
tick,0x7ffe67f8feb4,311877933,0,0x0,8
tick,0x7ffe67f8feb4,311893290,0,0x0,8
tick,0x7ffe67f8feb4,311908785,0,0x0,8
tick,0x7ffe67f8feb4,311925334,0,0x0,8
tick,0x7ffe67f8feb4,311941111,0,0x0,8
tick,0x7ffe67f8feb4,311956832,0,0x0,8
tick,0x7ffe67f8feb4,311972335,0,0x0,8
tick,0x7ffe67f8feb4,311987602,0,0x0,8
tick,0x7ffe67f8feb4,312003470,0,0x0,8
tick,0x7ffe67f8feb4,312018907,0,0x0,8
tick,0x7ffe67f8feb4,312034237,0,0x0,8
tick,0x7ffe67f8feb4,312050417,0,0x0,8
tick,0x7ffe67f8feb4,312066028,0,0x0,8
tick,0x7ffe67f8feb4,312081938,0,0x0,8
tick,0x7ffe67f8feb4,312097859,0,0x0,8
tick,0x7ffe67f8feb4,312114143,0,0x0,8
tick,0x7ffe67f8feb4,312128918,0,0x0,8
tick,0x7ffe67f8feb4,312144870,0,0x0,8
tick,0x7ffe67f8feb4,312160055,0,0x0,8
tick,0x7ffe67f8feb4,312175247,0,0x0,8
tick,0x7ffe67f8feb4,312191292,0,0x0,8
tick,0x7ffe67f8feb4,312206464,0,0x0,8
tick,0x7ffe67f8feb4,312222197,0,0x0,8
tick,0x7ffe67f8feb4,312238183,0,0x0,8
tick,0x7ffe67f8feb4,312253622,0,0x0,8
tick,0x7ffe67f8feb4,312269007,0,0x0,8
tick,0x7ffe67f8feb4,312284084,0,0x0,8
tick,0x7ffe67f8feb4,312299841,0,0x0,8
tick,0x7ffe67f8feb4,312315846,0,0x0,8
tick,0x7ffe67f8feb4,312330830,0,0x0,8
tick,0x7ffe67f8feb4,312345884,0,0x0,8
tick,0x7ffe67f8feb4,312361233,0,0x0,8
tick,0x7ffe67f8feb4,312377252,0,0x0,8
tick,0x7ffe67f8feb4,312393181,0,0x0,8
tick,0x7ffe67f8feb4,312409037,0,0x0,8
tick,0x7ffe67f8feb4,312424832,0,0x0,8
tick,0x7ffe67f8feb4,312440495,0,0x0,8
tick,0x7ffe67f8feb4,312456446,0,0x0,8
tick,0x7ffe67f8feb4,312471382,0,0x0,8
tick,0x7ffe67f8feb4,312487501,0,0x0,8
tick,0x7ffe67f8feb4,312503008,0,0x0,8
tick,0x7ffe67f8feb4,312518692,0,0x0,8
tick,0x7ffe67f8feb4,312534261,0,0x0,8
tick,0x7ffe67f8feb4,312550037,0,0x0,8
tick,0x7ffe67f8feb4,312565448,0,0x0,8
tick,0x7ffe67f8feb4,312580519,0,0x0,8
tick,0x7ffe67f8feb4,312595984,0,0x0,8
tick,0x7ffe67f8feb4,312611840,0,0x0,8
tick,0x7ffe67f8feb4,312627375,0,0x0,8
tick,0x7ffe67f8feb4,312642562,0,0x0,8
tick,0x7ffe67f8feb4,312658795,0,0x0,8
tick,0x7ffe67f8feb4,312674166,0,0x0,8
tick,0x7ffe67f8feb4,312689103,0,0x0,8
tick,0x7ffe67f8feb4,312704585,0,0x0,8
tick,0x7ffe67f8feb4,312720731,0,0x0,8
tick,0x7ffe67f8feb4,312735765,0,0x0,8
tick,0x7ffe67f8feb4,312751506,0,0x0,8
tick,0x7ffe67f8feb4,312767003,0,0x0,8
tick,0x7ffe67f8feb4,312782477,0,0x0,8
tick,0x7ffe67f8feb4,312798299,0,0x0,8
tick,0x7ffe67f8feb4,312814064,0,0x0,8
tick,0x7ffe67f8feb4,312829502,0,0x0,8
tick,0x7ffe67f8feb4,312845163,0,0x0,8
tick,0x7ffe67f8feb4,312860360,0,0x0,8
tick,0x7ffe67f8feb4,312876016,0,0x0,8
tick,0x7ffe67f8feb4,312892070,0,0x0,8
tick,0x7ffe67f8feb4,312907956,0,0x0,8
tick,0x7ffe67f8feb4,312923519,0,0x0,8
tick,0x7ffe67f8feb4,312938915,0,0x0,8
tick,0x7ffe67f8feb4,312954419,0,0x0,8
tick,0x7ffe67f8feb4,312970301,0,0x0,8
tick,0x7ffe67f8feb4,312985977,0,0x0,8
tick,0x7ffe67f8feb4,313001839,0,0x0,8
tick,0x7ffe67f8feb4,313017712,0,0x0,8
tick,0x7ffe67f8feb4,313032979,0,0x0,8
tick,0x7ffe67f8feb4,313048525,0,0x0,8
tick,0x7ffe67f8feb4,313064435,0,0x0,8
tick,0x7ffe67f8feb4,313079967,0,0x0,8
tick,0x7ffe67f8feb4,313095819,0,0x0,8
tick,0x7ffe67f8feb4,313111075,0,0x0,8
tick,0x7ffe67f8feb4,313126217,0,0x0,8
tick,0x7ffe67f8feb4,313142268,0,0x0,8
tick,0x7ffe67f8feb4,313157621,0,0x0,8
tick,0x7ffe67f8feb4,313173198,0,0x0,8
tick,0x7ffe67f8feb4,313188388,0,0x0,8
tick,0x7ffe67f8feb4,313203814,0,0x0,8
tick,0x7ffe67f8feb4,313219308,0,0x0,8
tick,0x7ffe67f8feb4,313235420,0,0x0,8
tick,0x7ffe67f8feb4,313250820,0,0x0,8
tick,0x7ffe67f8feb4,313265824,0,0x0,8
tick,0x7ffe67f8feb4,313281223,0,0x0,8
tick,0x7ffe67f8feb4,313296196,0,0x0,8
tick,0x7ffe67f8feb4,313312200,0,0x0,8
tick,0x7ffe67f8feb4,313328156,0,0x0,8
tick,0x7ffe67f8feb4,313344146,0,0x0,8
tick,0x7ffe67f8feb4,313360188,0,0x0,8
tick,0x7ffe67f8feb4,313375264,0,0x0,8
tick,0x7ffe67f8feb4,313390914,0,0x0,8
tick,0x7ffe67f8feb4,313406305,0,0x0,8
tick,0x7ffe67f8feb4,313421437,0,0x0,8
tick,0x7ffe67f8feb4,313437338,0,0x0,8
tick,0x7ffe67f8feb4,313452757,0,0x0,8
tick,0x7ffe67f8feb4,313468788,0,0x0,8
tick,0x7ffe67f8feb4,313484999,0,0x0,8
tick,0x7ffe67f8feb4,313500266,0,0x0,8
tick,0x7ffe67f8feb4,313515477,0,0x0,8
tick,0x7ffe67f8feb4,313531020,0,0x0,8
tick,0x7ffe67f8feb4,313546940,0,0x0,8
tick,0x7ffe67f8feb4,313562687,0,0x0,8
tick,0x7ffe67f8feb4,313578794,0,0x0,8
tick,0x7ffe67f8feb4,313594527,0,0x0,8
tick,0x7ffe67f8feb4,313609665,0,0x0,8
tick,0x7ffe67f8feb4,313625104,0,0x0,8
tick,0x7ffe67f8feb4,313640011,0,0x0,8
tick,0x7ffe67f8feb4,313655488,0,0x0,8
tick,0x7ffe67f8feb4,313671526,0,0x0,8
tick,0x7ffe67f8feb4,313687620,0,0x0,8
tick,0x7ffe67f8feb4,313702796,0,0x0,8
tick,0x7ffe67f8feb4,313718899,0,0x0,8
tick,0x7ffe67f8feb4,313734457,0,0x0,8
tick,0x7ffe67f8feb4,313749749,0,0x0,8
tick,0x7ffe67f8feb4,313765174,0,0x0,8
tick,0x7ffe67f8feb4,313780905,0,0x0,8
tick,0x7ffe67f8feb4,313796541,0,0x0,8
tick,0x7ffe67f8feb4,313811838,0,0x0,8
tick,0x7ffe67f8feb4,313827008,0,0x0,8
tick,0x7ffe67f8feb4,313842974,0,0x0,8
tick,0x7ffe67f8feb4,313858231,0,0x0,8
tick,0x7ffe67f8feb4,313873568,0,0x0,8
tick,0x7ffe67f8feb4,313889073,0,0x0,8
tick,0x7ffe67f8feb4,313904508,0,0x0,8
tick,0x7ffe67f8feb4,313920006,0,0x0,8
tick,0x7ffe67f8feb4,313935419,0,0x0,8
tick,0x7ffe67f8feb4,313950543,0,0x0,8
tick,0x7ffe67f8feb4,313966759,0,0x0,8
tick,0x7ffe67f8feb4,313982535,0,0x0,8
tick,0x7ffe67f8feb4,313998546,0,0x0,8
tick,0x7ffe67f8feb4,314014538,0,0x0,8
tick,0x7ffe67f8feb4,314030536,0,0x0,8
tick,0x7ffe67f8feb4,314046552,0,0x0,8
tick,0x7ffe67f8feb4,314062530,0,0x0,8
tick,0x7ffe67f8feb4,314077540,0,0x0,8
tick,0x7ffe67f8feb4,314093535,0,0x0,8
tick,0x7ffe67f8feb4,314109543,0,0x0,8
tick,0x7ffe67f8feb4,314124912,0,0x0,8
tick,0x7ffe67f8feb4,314140179,0,0x0,8
tick,0x7ffe67f8feb4,314156243,0,0x0,8
tick,0x7ffe67f8feb4,314171784,0,0x0,8
tick,0x7ffe67f8feb4,314187838,0,0x0,8
tick,0x7ffe67f8feb4,314203458,0,0x0,8
tick,0x7ffe67f8feb4,314218944,0,0x0,8
tick,0x7ffe67f8feb4,314234327,0,0x0,8
tick,0x7ffe67f8feb4,314249247,0,0x0,8
tick,0x7ffe67f8feb4,314264936,0,0x0,8
tick,0x7ffe67f8feb4,314280929,0,0x0,8
tick,0x7ffe67f8feb4,314296464,0,0x0,8
tick,0x7ffe67f8feb4,314312029,0,0x0,8
tick,0x7ffe67f8feb4,314328042,0,0x0,8
tick,0x7ffe67f8feb4,314344050,0,0x0,8
tick,0x7ffe67f8feb4,314360007,0,0x0,8
tick,0x7ffe67f8feb4,314375996,0,0x0,8
tick,0x7ffe67f8feb4,314391355,0,0x0,8
tick,0x7ffe67f8feb4,314407324,0,0x0,8
tick,0x7ffe67f8feb4,314422789,0,0x0,8
tick,0x7ffe67f8feb4,314437960,0,0x0,8
tick,0x7ffe67f8feb4,314453415,0,0x0,8
tick,0x7ffe67f8feb4,314468743,0,0x0,8
tick,0x7ffe67f8feb4,314483895,0,0x0,8
tick,0x7ffe67f8feb4,314499836,0,0x0,8
tick,0x7ffe67f8feb4,314515076,0,0x0,8
tick,0x7ffe67f8feb4,314530762,0,0x0,8
tick,0x7ffe67f8feb4,314545559,0,0x0,8
tick,0x7ffe67f8feb4,314561590,0,0x0,8
tick,0x7ffe67f8feb4,314576683,0,0x0,8
tick,0x7ffe67f8feb4,314592797,0,0x0,8
tick,0x7ffe67f8feb4,314608318,0,0x0,8
tick,0x7ffe67f8feb4,314624438,0,0x0,8
tick,0x7ffe67f8feb4,314639570,0,0x0,8
tick,0x7ffe67f8feb4,314655095,0,0x0,8
tick,0x7ffe67f8feb4,314670754,0,0x0,8
tick,0x7ffe67f8feb4,314686484,0,0x0,8
tick,0x7ffe67f8feb4,314702202,0,0x0,8
tick,0x7ffe67f8feb4,314718051,0,0x0,8
tick,0x7ffe67f8feb4,314732835,0,0x0,8
tick,0x7ffe67f8feb4,314748819,0,0x0,8
tick,0x7ffe67f8feb4,314764028,0,0x0,8
tick,0x7ffe67f8feb4,314778820,0,0x0,8
tick,0x7ffe67f8feb4,314794816,0,0x0,8
tick,0x7ffe67f8feb4,314810912,0,0x0,8
tick,0x7ffe67f8feb4,314826873,0,0x0,8
tick,0x7ffe67f8feb4,314842548,0,0x0,8
tick,0x7ffe67f8feb4,314857862,0,0x0,8
tick,0x7ffe67f8feb4,314873145,0,0x0,8
tick,0x7ffe67f8feb4,314888803,0,0x0,8
tick,0x7ffe67f8feb4,314904772,0,0x0,8
tick,0x7ffe67f8feb4,314919808,0,0x0,8
tick,0x7ffe67f8feb4,314934818,0,0x0,8
tick,0x7ffe67f8feb4,314950812,0,0x0,8
tick,0x7ffe67f8feb4,314966816,0,0x0,8
tick,0x7ffe67f8feb4,314982792,0,0x0,8
tick,0x7ffe67f8feb4,314998799,0,0x0,8
tick,0x7ffe67f8feb4,315014786,0,0x0,8
tick,0x7ffe67f8feb4,315029892,0,0x0,8
tick,0x7ffe67f8feb4,315045039,0,0x0,8
tick,0x7ffe67f8feb4,315060861,0,0x0,8
tick,0x7ffe67f8feb4,315076830,0,0x0,8
tick,0x7ffe67f8feb4,315092380,0,0x0,8
tick,0x7ffe67f8feb4,315107417,0,0x0,8
tick,0x7ffe67f8feb4,315122926,0,0x0,8
tick,0x7ffe67f8feb4,315138669,0,0x0,8
tick,0x7ffe67f8feb4,315153952,0,0x0,8
tick,0x7ffe67f8feb4,315170175,0,0x0,8
tick,0x7ffe67f8feb4,315186266,0,0x0,8
tick,0x7ffe67f8feb4,315201426,0,0x0,8
tick,0x7ffe67f8feb4,315216871,0,0x0,8
tick,0x7ffe67f8feb4,315231658,0,0x0,8
tick,0x7ffe67f8feb4,315247032,0,0x0,8
tick,0x7ffe67f8feb4,315263063,0,0x0,8
tick,0x7ffe67f8feb4,315279358,0,0x0,8
tick,0x7ffe67f8feb4,315295152,0,0x0,8
tick,0x7ffe67f8feb4,315310770,0,0x0,8
tick,0x7ffe67f8feb4,315326290,0,0x0,8
tick,0x7ffe67f8feb4,315341648,0,0x0,8
tick,0x7ffe67f8feb4,315356685,0,0x0,8
tick,0x7ffe67f8feb4,315372662,0,0x0,8
tick,0x7ffe67f8feb4,315388656,0,0x0,8
tick,0x7ffe67f8feb4,315404666,0,0x0,8
tick,0x7ffe67f8feb4,315419682,0,0x0,8
tick,0x7ffe67f8feb4,315435746,0,0x0,8
tick,0x7ffe67f8feb4,315450765,0,0x0,8
tick,0x7ffe67f8feb4,315466012,0,0x0,8
tick,0x7ffe67f8feb4,315481230,0,0x0,8
tick,0x7ffe67f8feb4,315497281,0,0x0,8
tick,0x7ffe67f8feb4,315513279,0,0x0,8
tick,0x7ffe67f8feb4,315528479,0,0x0,8
tick,0x7ffe67f8feb4,315544522,0,0x0,8
tick,0x7ffe67f8feb4,315559812,0,0x0,8
tick,0x7ffe67f8feb4,315575965,0,0x0,8
tick,0x7ffe67f8feb4,315591918,0,0x0,8
tick,0x7ffe67f8feb4,315606976,0,0x0,8
tick,0x7ffe67f8feb4,315622832,0,0x0,8
tick,0x7ffe67f8feb4,315638585,0,0x0,8
tick,0x7ffe67f8feb4,315654686,0,0x0,8
tick,0x7ffe67f8feb4,315670396,0,0x0,8
tick,0x7ffe67f8feb4,315686099,0,0x0,8
tick,0x7ffe67f8feb4,315702325,0,0x0,8
tick,0x7ffe67f8feb4,315717741,0,0x0,8
tick,0x7ffe67f8feb4,315734239,0,0x0,8
tick,0x7ffe67f8feb4,315749502,0,0x0,8
tick,0x7ffe67f8feb4,315765302,0,0x0,8
tick,0x7ffe67f8feb4,315780739,0,0x0,8
tick,0x7ffe67f8feb4,315795693,0,0x0,8
tick,0x7ffe67f8feb4,315811723,0,0x0,8
tick,0x7ffe67f8feb4,315826995,0,0x0,8
tick,0x7ffe67f8feb4,315842899,0,0x0,8
tick,0x7ffe67f8feb4,315858829,0,0x0,8
tick,0x7ffe67f8feb4,315874362,0,0x0,8
tick,0x7ffe67f8feb4,315889682,0,0x0,8
tick,0x7ffe67f8feb4,315904742,0,0x0,8
tick,0x7ffe67f8feb4,315920137,0,0x0,8
tick,0x7ffe67f8feb4,315935564,0,0x0,8
tick,0x7ffe67f8feb4,315950992,0,0x0,8
tick,0x7ffe67f8feb4,315966313,0,0x0,8
tick,0x7ffe67f8feb4,315981866,0,0x0,8
tick,0x7ffe67f8feb4,315997689,0,0x0,8
tick,0x7ffe67f8feb4,316013222,0,0x0,8
tick,0x7ffe67f8feb4,316028599,0,0x0,8
tick,0x7ffe67f8feb4,316043837,0,0x0,8
tick,0x7ffe67f8feb4,316058886,0,0x0,8
tick,0x7ffe67f8feb4,316074404,0,0x0,8
tick,0x7ffe67f8feb4,316089924,0,0x0,8
tick,0x7ffe67f8feb4,316104987,0,0x0,8
tick,0x7ffe67f8feb4,316120220,0,0x0,8
tick,0x7ffe67f8feb4,316136453,0,0x0,8
tick,0x7ffe67f8feb4,316151745,0,0x0,8
tick,0x7ffe67f8feb4,316170372,0,0x0,8
tick,0x7ffe67f8feb4,316182604,0,0x0,8
tick,0x7ffe67f8feb4,316197999,0,0x0,8
tick,0x7ffe67f8feb4,316213053,0,0x0,8
tick,0x7ffe67f8feb4,316228380,0,0x0,8
tick,0x7ffe67f8feb4,316244264,0,0x0,8
tick,0x7ffe67f8feb4,316259346,0,0x0,8
tick,0x7ffe67f8feb4,316275367,0,0x0,8
tick,0x7ffe67f8feb4,316290776,0,0x0,8
tick,0x7ffe67f8feb4,316306730,0,0x0,8
tick,0x7ffe67f8feb4,316322732,0,0x0,8
tick,0x7ffe67f8feb4,316338755,0,0x0,8
tick,0x7ffe67f8feb4,316355020,0,0x0,8
tick,0x7ffe67f8feb4,316370728,0,0x0,8
tick,0x7ffe67f8feb4,316386702,0,0x0,8
tick,0x7ffe67f8feb4,316402713,0,0x0,8
tick,0x7ffe67f8feb4,316418738,0,0x0,8
tick,0x7ffe67f8feb4,316434776,0,0x0,8
tick,0x7ffe67f8feb4,316450818,0,0x0,8
tick,0x7ffe67f8feb4,316466828,0,0x0,8
tick,0x7ffe67f8feb4,316482854,0,0x0,8
tick,0x7ffe67f8feb4,316498862,0,0x0,8
tick,0x7ffe67f8feb4,316514738,0,0x0,8
tick,0x7ffe67f8feb4,316530427,0,0x0,8
tick,0x7ffe67f8feb4,316546417,0,0x0,8
tick,0x7ffe67f8feb4,316562401,0,0x0,8
tick,0x7ffe67f8feb4,316578267,0,0x0,8
tick,0x7ffe67f8feb4,316594182,0,0x0,8
tick,0x7ffe67f8feb4,316609455,0,0x0,8
tick,0x7ffe67f8feb4,316625081,0,0x0,8
tick,0x7ffe67f8feb4,316640412,0,0x0,8
tick,0x7ffe67f8feb4,316655432,0,0x0,8
tick,0x7ffe67f8feb4,316670846,0,0x0,8
tick,0x7ffe67f8feb4,316685487,0,0x0,8
tick,0x7ffe67f8feb4,316701812,0,0x0,8
tick,0x7ffe67f8feb4,316717200,0,0x0,8
tick,0x7ffe67f8feb4,316732545,0,0x0,8
tick,0x7ffe67f8feb4,316747702,0,0x0,8
tick,0x7ffe67f8feb4,316763586,0,0x0,8
tick,0x7ffe67f8feb4,316778924,0,0x0,8
tick,0x7ffe67f8feb4,316795014,0,0x0,8
tick,0x7ffe67f8feb4,316810459,0,0x0,8
tick,0x7ffe67f8feb4,316825851,0,0x0,8
tick,0x7ffe67f8feb4,316841312,0,0x0,8
tick,0x7ffe67f8feb4,316856527,0,0x0,8
tick,0x7ffe67f8feb4,316872182,0,0x0,8
tick,0x7ffe67f8feb4,316888234,0,0x0,8
tick,0x7ffe67f8feb4,316904506,0,0x0,8
tick,0x7ffe67f8feb4,316919417,0,0x0,8
tick,0x7ffe67f8feb4,316935468,0,0x0,8
tick,0x7ffe67f8feb4,316951408,0,0x0,8
tick,0x7ffe67f8feb4,316967115,0,0x0,8
tick,0x7ffe67f8feb4,316982993,0,0x0,8
tick,0x7ffe67f8feb4,316998137,0,0x0,8
tick,0x7ffe67f8feb4,317013187,0,0x0,8
tick,0x7ffe67f8feb4,317029161,0,0x0,8
tick,0x7ffe67f8feb4,317044683,0,0x0,8
tick,0x7ffe67f8feb4,317060582,0,0x0,8
tick,0x7ffe67f8feb4,317075864,0,0x0,8
tick,0x7ffe67f8feb4,317091514,0,0x0,8
tick,0x7ffe67f8feb4,317107446,0,0x0,8
tick,0x7ffe67f8feb4,317122478,0,0x0,8
tick,0x7ffe67f8feb4,317137954,0,0x0,8
tick,0x7ffe67f8feb4,317153303,0,0x0,8
tick,0x7ffe67f8feb4,317169102,0,0x0,8
tick,0x7ffe67f8feb4,317184671,0,0x0,8
tick,0x7ffe67f8feb4,317200938,0,0x0,8
tick,0x7ffe67f8feb4,317216932,0,0x0,8
tick,0x7ffe67f8feb4,317233003,0,0x0,8
tick,0x7ffe67f8feb4,317247713,0,0x0,8
tick,0x7ffe67f8feb4,317263083,0,0x0,8
tick,0x7ffe67f8feb4,317279113,0,0x0,8
tick,0x7ffe67f8feb4,317295029,0,0x0,8
tick,0x7ffe67f8feb4,317310052,0,0x0,8
tick,0x7ffe67f8feb4,317325333,0,0x0,8
tick,0x7ffe67f8feb4,317341240,0,0x0,8
tick,0x7ffe67f8feb4,317356821,0,0x0,8
tick,0x7ffe67f8feb4,317371511,0,0x0,8
tick,0x7ffe67f8feb4,317387560,0,0x0,8
tick,0x7ffe67f8feb4,317403538,0,0x0,8
tick,0x7ffe67f8feb4,317419529,0,0x0,8
tick,0x7ffe67f8feb4,317435152,0,0x0,8
tick,0x7ffe67f8feb4,317450542,0,0x0,8
tick,0x7ffe67f8feb4,317466598,0,0x0,8
tick,0x7ffe67f8feb4,317481559,0,0x0,8
tick,0x7ffe67f8feb4,317497597,0,0x0,8
tick,0x7ffe67f8feb4,317512952,0,0x0,8
tick,0x7ffe67f8feb4,317528451,0,0x0,8
tick,0x7ffe67f8feb4,317543648,0,0x0,8
tick,0x7ffe67f8feb4,317559802,0,0x0,8
tick,0x7ffe67f8feb4,317575247,0,0x0,8
tick,0x7ffe67f8feb4,317589931,0,0x0,8
tick,0x7ffe67f8feb4,317605262,0,0x0,8
tick,0x7ffe67f8feb4,317620379,0,0x0,8
tick,0x7ffe67f8feb4,317636131,0,0x0,8
tick,0x7ffe67f8feb4,317652261,0,0x0,8
tick,0x7ffe67f8feb4,317667302,0,0x0,8
tick,0x7ffe67f8feb4,317682357,0,0x0,8
tick,0x7ffe67f8feb4,317698287,0,0x0,8
tick,0x7ffe67f8feb4,317714309,0,0x0,8
tick,0x7ffe67f8feb4,317730370,0,0x0,8
tick,0x7ffe67f8feb4,317745596,0,0x0,8
tick,0x7ffe67f8feb4,317761239,0,0x0,8
tick,0x7ffe67f8feb4,317776436,0,0x0,8
tick,0x7ffe67f8feb4,317792204,0,0x0,8
tick,0x7ffe67f8feb4,317808039,0,0x0,8
tick,0x7ffe67f8feb4,317823124,0,0x0,8
tick,0x7ffe67f8feb4,317838872,0,0x0,8
tick,0x7ffe67f8feb4,317854851,0,0x0,8
tick,0x7ffe67f8feb4,317870239,0,0x0,8
tick,0x7ffe67f8feb4,317886068,0,0x0,8
tick,0x7ffe67f8feb4,317901571,0,0x0,8
tick,0x7ffe67f8feb4,317917405,0,0x0,8
tick,0x7ffe67f8feb4,317933336,0,0x0,8
tick,0x7ffe67f8feb4,317949451,0,0x0,8
tick,0x7ffe67f8feb4,317965185,0,0x0,8
tick,0x7ffe67f8feb4,317981191,0,0x0,8
tick,0x7ffe67f8feb4,317996203,0,0x0,8
tick,0x7ffe67f8feb4,318011709,0,0x0,8
tick,0x7ffe67f8feb4,318027546,0,0x0,8
tick,0x7ffe67f8feb4,318043129,0,0x0,8
tick,0x7ffe67f8feb4,318059072,0,0x0,8
tick,0x7ffe67f8feb4,318075350,0,0x0,8
tick,0x7ffe67f8feb4,318090715,0,0x0,8
tick,0x7ffe67f8feb4,318105399,0,0x0,8
tick,0x7ffe67f8feb4,318121265,0,0x0,8
tick,0x7ffe67f8feb4,318136299,0,0x0,8
tick,0x7ffe67f8feb4,318152638,0,0x0,8
tick,0x7ffe67f8feb4,318167751,0,0x0,8
tick,0x7ffe67f8feb4,318183630,0,0x0,8
tick,0x7ffe67f8feb4,318199061,0,0x0,8
tick,0x7ffe67f8feb4,318214990,0,0x0,8
tick,0x7ffe67f8feb4,318230293,0,0x0,8
tick,0x7ffe67f8feb4,318245898,0,0x0,8
tick,0x7ffe67f8feb4,318261369,0,0x0,8
tick,0x7ffe67f8feb4,318277213,0,0x0,8
tick,0x7ffe67f8feb4,318292587,0,0x0,8
tick,0x7ffe67f8feb4,318307421,0,0x0,8
tick,0x7ffe67f8feb4,318322576,0,0x0,8
tick,0x7ffe67f8feb4,318338381,0,0x0,8
tick,0x7ffe67f8feb4,318353833,0,0x0,8
tick,0x7ffe67f8feb4,318369646,0,0x0,8
tick,0x7ffe67f8feb4,318385661,0,0x0,8
tick,0x7ffe67f8feb4,318401630,0,0x0,8
tick,0x7ffe67f8feb4,318417632,0,0x0,8
tick,0x7ffe67f8feb4,318433685,0,0x0,8
tick,0x7ffe67f8feb4,318449678,0,0x0,8
tick,0x7ffe67f8feb4,318465718,0,0x0,8
tick,0x7ffe67f8feb4,318480730,0,0x0,8
tick,0x7ffe67f8feb4,318495961,0,0x0,8
tick,0x7ffe67f8feb4,318511010,0,0x0,8
tick,0x7ffe67f8feb4,318527071,0,0x0,8
tick,0x7ffe67f8feb4,318542615,0,0x0,8
tick,0x7ffe67f8feb4,318557110,0,0x0,8
tick,0x7ffe67f8feb4,318573057,0,0x0,8
tick,0x7ffe67f8feb4,318588182,0,0x0,8
tick,0x7ffe67f8feb4,318603713,0,0x0,8
tick,0x7ffe67f8feb4,318618743,0,0x0,8
tick,0x7ffe67f8feb4,318634486,0,0x0,8
tick,0x7ffe67f8feb4,318649825,0,0x0,8
tick,0x7ffe67f8feb4,318665873,0,0x0,8
tick,0x7ffe67f8feb4,318681122,0,0x0,8
tick,0x7ffe67f8feb4,318696849,0,0x0,8
tick,0x7ffe67f8feb4,318712904,0,0x0,8
tick,0x7ffe67f8feb4,318728294,0,0x0,8
tick,0x7ffe67f8feb4,318743942,0,0x0,8
tick,0x7ffe67f8feb4,318760134,0,0x0,8
tick,0x7ffe67f8feb4,318775831,0,0x0,8
tick,0x7ffe67f8feb4,318791908,0,0x0,8
tick,0x7ffe67f8feb4,318807685,0,0x0,8
tick,0x7ffe67f8feb4,318822717,0,0x0,8
tick,0x7ffe67f8feb4,318838223,0,0x0,8
tick,0x7ffe67f8feb4,318853859,0,0x0,8
tick,0x7ffe67f8feb4,318868844,0,0x0,8
tick,0x7ffe67f8feb4,318885065,0,0x0,8
tick,0x7ffe67f8feb4,318900678,0,0x0,8
tick,0x7ffe67f8feb4,318916283,0,0x0,8
tick,0x7ffe67f8feb4,318931718,0,0x0,8
tick,0x7ffe67f8feb4,318947663,0,0x0,8
tick,0x7ffe67f8feb4,318963733,0,0x0,8
tick,0x7ffe67f8feb4,318979299,0,0x0,8
tick,0x7ffe67f8feb4,318995459,0,0x0,8
tick,0x7ffe67f8feb4,319010920,0,0x0,8
tick,0x7ffe67f8feb4,319026752,0,0x0,8
tick,0x7ffe67f8feb4,319041730,0,0x0,8
tick,0x7ffe67f8feb4,319056997,0,0x0,8
tick,0x7ffe67f8feb4,319072773,0,0x0,8
tick,0x7ffe67f8feb4,319087869,0,0x0,8
tick,0x7ffe67f8feb4,319103329,0,0x0,8
tick,0x7ffe67f8feb4,319118699,0,0x0,8
tick,0x7ffe67f8feb4,319133957,0,0x0,8
tick,0x7ffe67f8feb4,319149799,0,0x0,8
tick,0x7ffe67f8feb4,319165795,0,0x0,8
tick,0x7ffe67f8feb4,319181843,0,0x0,8
tick,0x7ffe67f8feb4,319197049,0,0x0,8
tick,0x7ffe67f8feb4,319212780,0,0x0,8
tick,0x7ffe67f8feb4,319228378,0,0x0,8
tick,0x7ffe67f8feb4,319244309,0,0x0,8
tick,0x7ffe67f8feb4,319260094,0,0x0,8
tick,0x7ffe67f8feb4,319275745,0,0x0,8
tick,0x7ffe67f8feb4,319291254,0,0x0,8
tick,0x7ffe67f8feb4,319307283,0,0x0,8
tick,0x7ffe67f8feb4,319322814,0,0x0,8
tick,0x7ffe67f8feb4,319338058,0,0x0,8
tick,0x7ffe67f8feb4,319353421,0,0x0,8
tick,0x7ffe67f8feb4,319368456,0,0x0,8
tick,0x7ffe67f8feb4,319384378,0,0x0,8
tick,0x7ffe67f8feb4,319400402,0,0x0,8
tick,0x7ffe67f8feb4,319416369,0,0x0,8
tick,0x7ffe67f8feb4,319432349,0,0x0,8
tick,0x7ffe67f8feb4,319448390,0,0x0,8
tick,0x7ffe67f8feb4,319463665,0,0x0,8
tick,0x7ffe67f8feb4,319478919,0,0x0,8
tick,0x7ffe67f8feb4,319494893,0,0x0,8
tick,0x7ffe67f8feb4,319510040,0,0x0,8
tick,0x7ffe67f8feb4,319524944,0,0x0,8
tick,0x7ffe67f8feb4,319540147,0,0x0,8
tick,0x7ffe67f8feb4,319555976,0,0x0,8
tick,0x7ffe67f8feb4,319571125,0,0x0,8
tick,0x7ffe67f8feb4,319586898,0,0x0,8
tick,0x7ffe67f8feb4,319602382,0,0x0,8
tick,0x7ffe67f8feb4,319617521,0,0x0,8
tick,0x7ffe67f8feb4,319633276,0,0x0,8
tick,0x7ffe67f8feb4,319648909,0,0x0,8
tick,0x7ffe67f8feb4,319664303,0,0x0,8
tick,0x7ffe67f8feb4,319679416,0,0x0,8
tick,0x7ffe67f8feb4,319695459,0,0x0,8
tick,0x7ffe67f8feb4,319711511,0,0x0,8
tick,0x7ffe67f8feb4,319726753,0,0x0,8
tick,0x7ffe67f8feb4,319742535,0,0x0,8
tick,0x7ffe67f8feb4,319758590,0,0x0,8
tick,0x7ffe67f8feb4,319774128,0,0x0,8
tick,0x7ffe67f8feb4,319790112,0,0x0,8
tick,0x7ffe67f8feb4,319806370,0,0x0,8
tick,0x7ffe67f8feb4,319821475,0,0x0,8
tick,0x7ffe67f8feb4,319836567,0,0x0,8
tick,0x7ffe67f8feb4,319852126,0,0x0,8
tick,0x7ffe67f8feb4,319868012,0,0x0,8
tick,0x7ffe67f8feb4,319883986,0,0x0,8
tick,0x7ffe67f8feb4,319898893,0,0x0,8
tick,0x7ffe67f8feb4,319914968,0,0x0,8
tick,0x7ffe67f8feb4,319930638,0,0x0,8
tick,0x7ffe67f8feb4,319945880,0,0x0,8
tick,0x7ffe67f8feb4,319961986,0,0x0,8
tick,0x7ffe67f8feb4,319977163,0,0x0,8
tick,0x7ffe67f8feb4,319992899,0,0x0,8
tick,0x7ffe67f8feb4,320008750,0,0x0,8
tick,0x7ffe67f8feb4,320024461,0,0x0,8
tick,0x7ffe67f8feb4,320040481,0,0x0,8
tick,0x7ffe67f8feb4,320056340,0,0x0,8
tick,0x7ffe67f8feb4,320071863,0,0x0,8
tick,0x7ffe67f8feb4,320087916,0,0x0,8
tick,0x7ffe67f8feb4,320103805,0,0x0,8
tick,0x7ffe67f8feb4,320118994,0,0x0,8
tick,0x7ffe67f8feb4,320135006,0,0x0,8
tick,0x7ffe67f8feb4,320150424,0,0x0,8
tick,0x7ffe67f8feb4,320165658,0,0x0,8
tick,0x7ffe67f8feb4,320181132,0,0x0,8
tick,0x7ffe67f8feb4,320196577,0,0x0,8
tick,0x7ffe67f8feb4,320212672,0,0x0,8
tick,0x7ffe67f8feb4,320228082,0,0x0,8
tick,0x7ffe67f8feb4,320243596,0,0x0,8
tick,0x7ffe67f8feb4,320259214,0,0x0,8
tick,0x7ffe67f8feb4,320275153,0,0x0,8
tick,0x7ffe67f8feb4,320290555,0,0x0,8
tick,0x7ffe67f8feb4,320305526,0,0x0,8
tick,0x7ffe67f8feb4,320320852,0,0x0,8
tick,0x7ffe67f8feb4,320336675,0,0x0,8
tick,0x7ffe67f8feb4,320352609,0,0x0,8
tick,0x7ffe67f8feb4,320367655,0,0x0,8
tick,0x7ffe67f8feb4,320382834,0,0x0,8
tick,0x7ffe67f8feb4,320398845,0,0x0,8
tick,0x7ffe67f8feb4,320414816,0,0x0,8
tick,0x7ffe67f8feb4,320429827,0,0x0,8
tick,0x7ffe67f8feb4,320445843,0,0x0,8
tick,0x7ffe67f8feb4,320461554,0,0x0,8
tick,0x7ffe67f8feb4,320476863,0,0x0,8
tick,0x7ffe67f8feb4,320491983,0,0x0,8
tick,0x7ffe67f8feb4,320507948,0,0x0,8
tick,0x7ffe67f8feb4,320523985,0,0x0,8
tick,0x7ffe67f8feb4,320540008,0,0x0,8
tick,0x7ffe67f8feb4,320556029,0,0x0,8
tick,0x7ffe67f8feb4,320572314,0,0x0,8
tick,0x7ffe67f8feb4,320587495,0,0x0,8
tick,0x7ffe67f8feb4,320602661,0,0x0,8
tick,0x7ffe67f8feb4,320618458,0,0x0,8
tick,0x7ffe67f8feb4,320634047,0,0x0,8
tick,0x7ffe67f8feb4,320649228,0,0x0,8
tick,0x7ffe67f8feb4,320665242,0,0x0,8
tick,0x7ffe67f8feb4,320681120,0,0x0,8
tick,0x7ffe67f8feb4,320696611,0,0x0,8
tick,0x7ffe67f8feb4,320712395,0,0x0,8
tick,0x7ffe67f8feb4,320728844,0,0x0,8
tick,0x7ffe67f8feb4,320744446,0,0x0,8
tick,0x7ffe67f8feb4,320759637,0,0x0,8
tick,0x7ffe67f8feb4,320774852,0,0x0,8
tick,0x7ffe67f8feb4,320791037,0,0x0,8
tick,0x7ffe67f8feb4,320807177,0,0x0,8
tick,0x7ffe67f8feb4,320822134,0,0x0,8
tick,0x7ffe67f8feb4,320837535,0,0x0,8
tick,0x7ffe67f8feb4,320853355,0,0x0,8
tick,0x7ffe67f8feb4,320868048,0,0x0,8
tick,0x7ffe67f8feb4,320884046,0,0x0,8
tick,0x7ffe67f8feb4,320900079,0,0x0,8
tick,0x7ffe67f8feb4,320915504,0,0x0,8
tick,0x7ffe67f8feb4,320930943,0,0x0,8
tick,0x7ffe67f8feb4,320946419,0,0x0,8
tick,0x7ffe67f8feb4,320961885,0,0x0,8
tick,0x7ffe67f8feb4,320977991,0,0x0,8
tick,0x7ffe67f8feb4,320993398,0,0x0,8
tick,0x7ffe67f8feb4,321009275,0,0x0,8
tick,0x7ffe67f8feb4,321025042,0,0x0,8
tick,0x7ffe67f8feb4,321039687,0,0x0,8
tick,0x7ffe67f8feb4,321055683,0,0x0,8
tick,0x7ffe67f8feb4,321071555,0,0x0,8
tick,0x7ffe67f8feb4,321086984,0,0x0,8
tick,0x7ffe67f8feb4,321102195,0,0x0,8
tick,0x7ffe67f8feb4,321118269,0,0x0,8
tick,0x7ffe67f8feb4,321133233,0,0x0,8
tick,0x7ffe67f8feb4,321148150,0,0x0,8
tick,0x7ffe67f8feb4,321164194,0,0x0,8
tick,0x7ffe67f8feb4,321179485,0,0x0,8
tick,0x7ffe67f8feb4,321195048,0,0x0,8
tick,0x7ffe67f8feb4,321209902,0,0x0,8
tick,0x7ffe67f8feb4,321225245,0,0x0,8
tick,0x7ffe67f8feb4,321240820,0,0x0,8
tick,0x7ffe67f8feb4,321255839,0,0x0,8
tick,0x7ffe67f8feb4,321271899,0,0x0,8
tick,0x7ffe67f8feb4,321287874,0,0x0,8
tick,0x7ffe67f8feb4,321304196,0,0x0,8
tick,0x7ffe67f8feb4,321320101,0,0x0,8
tick,0x7ffe67f8feb4,321336121,0,0x0,8
tick,0x7ffe67f8feb4,321352154,0,0x0,8
tick,0x7ffe67f8feb4,321368209,0,0x0,8
tick,0x7ffe67f8feb4,321384248,0,0x0,8
tick,0x7ffe67f8feb4,321400277,0,0x0,8
tick,0x7ffe67f8feb4,321416223,0,0x0,8
tick,0x7ffe67f8feb4,321432270,0,0x0,8
tick,0x7ffe67f8feb4,321448182,0,0x0,8
tick,0x7ffe67f8feb4,321464180,0,0x0,8
tick,0x7ffe67f8feb4,321479491,0,0x0,8
tick,0x7ffe67f8feb4,321495079,0,0x0,8
tick,0x7ffe67f8feb4,321510460,0,0x0,8
tick,0x7ffe67f8feb4,321526364,0,0x0,8
tick,0x7ffe67f8feb4,321541837,0,0x0,8
tick,0x7ffe67f8feb4,321557876,0,0x0,8
tick,0x7ffe67f8feb4,321573437,0,0x0,8
tick,0x7ffe67f8feb4,321588946,0,0x0,8
tick,0x7ffe67f8feb4,321604118,0,0x0,8
tick,0x7ffe67f8feb4,321619945,0,0x0,8
tick,0x7ffe67f8feb4,321635954,0,0x0,8
tick,0x7ffe67f8feb4,321651462,0,0x0,8
tick,0x7ffe67f8feb4,321667134,0,0x0,8
tick,0x7ffe67f8feb4,321682714,0,0x0,8
tick,0x7ffe67f8feb4,321698329,0,0x0,8
tick,0x7ffe67f8feb4,321713936,0,0x0,8
tick,0x7ffe67f8feb4,321730041,0,0x0,8
tick,0x7ffe67f8feb4,321746288,0,0x0,8
tick,0x7ffe67f8feb4,321761491,0,0x0,8
tick,0x7ffe67f8feb4,321777597,0,0x0,8
tick,0x7ffe67f8feb4,321792895,0,0x0,8
tick,0x7ffe67f8feb4,321808086,0,0x0,8
tick,0x7ffe67f8feb4,321823830,0,0x0,8
tick,0x7ffe67f8feb4,321839111,0,0x0,8
tick,0x7ffe67f8feb4,321854875,0,0x0,8
tick,0x7ffe67f8feb4,321870073,0,0x0,8
tick,0x7ffe67f8feb4,321886120,0,0x0,8
tick,0x7ffe67f8feb4,321902048,0,0x0,8
tick,0x7ffe67f8feb4,321917662,0,0x0,8
tick,0x7ffe67f8feb4,321933119,0,0x0,8
tick,0x7ffe67f8feb4,321948977,0,0x0,8
tick,0x7ffe67f8feb4,321963839,0,0x0,8
tick,0x7ffe67f8feb4,321979832,0,0x0,8
tick,0x7ffe67f8feb4,321994735,0,0x0,8
tick,0x7ffe67f8feb4,322010154,0,0x0,8
tick,0x7ffe67f8feb4,322025687,0,0x0,8
tick,0x7ffe67f8feb4,322041717,0,0x0,8
tick,0x7ffe67f8feb4,322056915,0,0x0,8
tick,0x7ffe67f8feb4,322072735,0,0x0,8
tick,0x7ffe67f8feb4,322088529,0,0x0,8
tick,0x7ffe67f8feb4,322104344,0,0x0,8
tick,0x7ffe67f8feb4,322119709,0,0x0,8
tick,0x7ffe67f8feb4,322134713,0,0x0,8
tick,0x7ffe67f8feb4,322150752,0,0x0,8
tick,0x7ffe67f8feb4,322166615,0,0x0,8
tick,0x7ffe67f8feb4,322182624,0,0x0,8
tick,0x7ffe67f8feb4,322198609,0,0x0,8
tick,0x7ffe67f8feb4,322214623,0,0x0,8
tick,0x7ffe67f8feb4,322230619,0,0x0,8
tick,0x7ffe67f8feb4,322245641,0,0x0,8
tick,0x7ffe67f8feb4,322261611,0,0x0,8
tick,0x7ffe67f8feb4,322277625,0,0x0,8
tick,0x7ffe67f8feb4,322293628,0,0x0,8
tick,0x7ffe67f8feb4,322309631,0,0x0,8
tick,0x7ffe67f8feb4,322325648,0,0x0,8
tick,0x7ffe67f8feb4,322340645,0,0x0,8
tick,0x7ffe67f8feb4,322356113,0,0x0,8
tick,0x7ffe67f8feb4,322371794,0,0x0,8
tick,0x7ffe67f8feb4,322387796,0,0x0,8
tick,0x7ffe67f8feb4,322403365,0,0x0,8
tick,0x7ffe67f8feb4,322419354,0,0x0,8
tick,0x7ffe67f8feb4,322435343,0,0x0,8
tick,0x7ffe67f8feb4,322451384,0,0x0,8
tick,0x7ffe67f8feb4,322467341,0,0x0,8
tick,0x7ffe67f8feb4,322482532,0,0x0,8
tick,0x7ffe67f8feb4,322498508,0,0x0,8
tick,0x7ffe67f8feb4,322513779,0,0x0,8
tick,0x7ffe67f8feb4,322529401,0,0x0,8
tick,0x7ffe67f8feb4,322544848,0,0x0,8
tick,0x7ffe67f8feb4,322561003,0,0x0,8
tick,0x7ffe67f8feb4,322576720,0,0x0,8
tick,0x7ffe67f8feb4,322592737,0,0x0,8
tick,0x7ffe67f8feb4,322608762,0,0x0,8
tick,0x7ffe67f8feb4,322624284,0,0x0,8
tick,0x7ffe67f8feb4,322640303,0,0x0,8
tick,0x7ffe67f8feb4,322655955,0,0x0,8
tick,0x7ffe67f8feb4,322671290,0,0x0,8
tick,0x7ffe67f8feb4,322687284,0,0x0,8
tick,0x7ffe67f8feb4,322702767,0,0x0,8
tick,0x7ffe67f8feb4,322718129,0,0x0,8
tick,0x7ffe67f8feb4,322734009,0,0x0,8
tick,0x7ffe67f8feb4,322749837,0,0x0,8
tick,0x7ffe67f8feb4,322765579,0,0x0,8
tick,0x7ffe67f8feb4,322781162,0,0x0,8
tick,0x7ffe67f8feb4,322796806,0,0x0,8
tick,0x7ffe67f8feb4,322812811,0,0x0,8
tick,0x7ffe67f8feb4,322828048,0,0x0,8
tick,0x7ffe67f8feb4,322844350,0,0x0,8
tick,0x7ffe67f8feb4,322859676,0,0x0,8
tick,0x7ffe67f8feb4,322875128,0,0x0,8
tick,0x7ffe67f8feb4,322890400,0,0x0,8
tick,0x7ffe67f8feb4,322905502,0,0x0,8
tick,0x7ffe67f8feb4,322921330,0,0x0,8
tick,0x7ffe67f8feb4,322936725,0,0x0,8
tick,0x7ffe67f8feb4,322952747,0,0x0,8
tick,0x7ffe67f8feb4,322968452,0,0x0,8
tick,0x7ffe67f8feb4,322983973,0,0x0,8
tick,0x7ffe67f8feb4,322999454,0,0x0,8
tick,0x7ffe67f8feb4,323014930,0,0x0,8
tick,0x7ffe67f8feb4,323030352,0,0x0,8
tick,0x7ffe67f8feb4,323045581,0,0x0,8
tick,0x7ffe67f8feb4,323061284,0,0x0,8
tick,0x7ffe67f8feb4,323076222,0,0x0,8
tick,0x7ffe67f8feb4,323091767,0,0x0,8
tick,0x7ffe67f8feb4,323106905,0,0x0,8
tick,0x7ffe67f8feb4,323122260,0,0x0,8
tick,0x7ffe67f8feb4,323137244,0,0x0,8
tick,0x7ffe67f8feb4,323153305,0,0x0,8
tick,0x7ffe67f8feb4,323169277,0,0x0,8
tick,0x7ffe67f8feb4,323185787,0,0x0,8
tick,0x7ffe67f8feb4,323201451,0,0x0,8
tick,0x7ffe67f8feb4,323217121,0,0x0,8
tick,0x7ffe67f8feb4,323232686,0,0x0,8
tick,0x7ffe67f8feb4,323247730,0,0x0,8
tick,0x7ffe67f8feb4,323263216,0,0x0,8
tick,0x7ffe67f8feb4,323278957,0,0x0,8
tick,0x7ffe67f8feb4,323295386,0,0x0,8
tick,0x7ffe67f8feb4,323311270,0,0x0,8
tick,0x7ffe67f8feb4,323327073,0,0x0,8
tick,0x7ffe67f8feb4,323342649,0,0x0,8
tick,0x7ffe67f8feb4,323372415,0,0x0,8
tick,0x7ffe67f8feb4,323387819,0,0x0,8
tick,0x7ffe67f8feb4,323390592,0,0x0,8
tick,0x7ffe67f8feb4,323417262,0,0x0,8
tick,0x7ffe67f8feb4,323422587,0,0x0,8
tick,0x7ffe67f8feb4,323438806,0,0x0,8
tick,0x7ffe67f8feb4,323454584,0,0x0,8
tick,0x7ffe67f8feb4,323470777,0,0x0,8
tick,0x7ffe67f8feb4,323486582,0,0x0,8
tick,0x7ffe67f8feb4,323502618,0,0x0,8
tick,0x7ffe67f8feb4,323518601,0,0x0,8
tick,0x7ffe67f8feb4,323534547,0,0x0,8
tick,0x7ffe67f8feb4,323549637,0,0x0,8
tick,0x7ffe67f8feb4,323564916,0,0x0,8
tick,0x7ffe67f8feb4,323580662,0,0x0,8
tick,0x7ffe67f8feb4,323596708,0,0x0,8
tick,0x7ffe67f8feb4,323612698,0,0x0,8
tick,0x7ffe67f8feb4,323628690,0,0x0,8
tick,0x7ffe67f8feb4,323644755,0,0x0,8
tick,0x7ffe67f8feb4,323659879,0,0x0,8
tick,0x7ffe67f8feb4,323675130,0,0x0,8
tick,0x7ffe67f8feb4,323690344,0,0x0,8
tick,0x7ffe67f8feb4,323706036,0,0x0,8
tick,0x7ffe67f8feb4,323722265,0,0x0,8
tick,0x7ffe67f8feb4,323738012,0,0x0,8
tick,0x7ffe67f8feb4,323753940,0,0x0,8
tick,0x7ffe67f8feb4,323769324,0,0x0,8
tick,0x7ffe67f8feb4,323784921,0,0x0,8
tick,0x7ffe67f8feb4,323799590,0,0x0,8
tick,0x7ffe67f8feb4,323815070,0,0x0,8
tick,0x7ffe67f8feb4,323830508,0,0x0,8
tick,0x7ffe67f8feb4,323846582,0,0x0,8
tick,0x7ffe67f8feb4,323862189,0,0x0,8
tick,0x7ffe67f8feb4,323877368,0,0x0,8
tick,0x7ffe67f8feb4,323892743,0,0x0,8
tick,0x7ffe67f8feb4,323908051,0,0x0,8
tick,0x7ffe67f8feb4,323924489,0,0x0,8
tick,0x7ffe67f8feb4,323939980,0,0x0,8
tick,0x7ffe67f8feb4,323955139,0,0x0,8
tick,0x7ffe67f8feb4,323970809,0,0x0,8
tick,0x7ffe67f8feb4,323987368,0,0x0,8
tick,0x7ffe67f8feb4,324003147,0,0x0,8
tick,0x7ffe67f8feb4,324018403,0,0x0,8
tick,0x7ffe67f8feb4,324034136,0,0x0,8
tick,0x7ffe67f8feb4,324049487,0,0x0,8
tick,0x7ffe67f8feb4,324064817,0,0x0,8
tick,0x7ffe67f8feb4,324080838,0,0x0,8
tick,0x7ffe67f8feb4,324096869,0,0x0,8
tick,0x7ffe67f8feb4,324112818,0,0x0,8
tick,0x7ffe67f8feb4,324128114,0,0x0,8
tick,0x7ffe67f8feb4,324144094,0,0x0,8
tick,0x7ffe67f8feb4,324159132,0,0x0,8
tick,0x7ffe67f8feb4,324174765,0,0x0,8
tick,0x7ffe67f8feb4,324189568,0,0x0,8
tick,0x7ffe67f8feb4,324205715,0,0x0,8
tick,0x7ffe67f8feb4,324220707,0,0x0,8
tick,0x7ffe67f8feb4,324236704,0,0x0,8
tick,0x7ffe67f8feb4,324252054,0,0x0,8
tick,0x7ffe67f8feb4,324267792,0,0x0,8
tick,0x7ffe67f8feb4,324283087,0,0x0,8
tick,0x7ffe67f8feb4,324299121,0,0x0,8
tick,0x7ffe67f8feb4,324314911,0,0x0,8
tick,0x7ffe67f8feb4,324330024,0,0x0,8
tick,0x7ffe67f8feb4,324346212,0,0x0,8
tick,0x7ffe67f8feb4,324361798,0,0x0,8
tick,0x7ffe67f8feb4,324377183,0,0x0,8
tick,0x7ffe67f8feb4,324393122,0,0x0,8
tick,0x7ffe67f8feb4,324409130,0,0x0,8
tick,0x7ffe67f8feb4,324425094,0,0x0,8
tick,0x7ffe67f8feb4,324441104,0,0x0,8
tick,0x7ffe67f8feb4,324457085,0,0x0,8
tick,0x7ffe67f8feb4,324473102,0,0x0,8
tick,0x7ffe67f8feb4,324489091,0,0x0,8
tick,0x7ffe67f8feb4,324505104,0,0x0,8
tick,0x7ffe67f8feb4,324520934,0,0x0,8
tick,0x7ffe67f8feb4,324536644,0,0x0,8
tick,0x7ffe67f8feb4,324552098,0,0x0,8
tick,0x7ffe67f8feb4,324567741,0,0x0,8
tick,0x7ffe67f8feb4,324583102,0,0x0,8
tick,0x7ffe67f8feb4,324598304,0,0x0,8
tick,0x7ffe67f8feb4,324613543,0,0x0,8
tick,0x7ffe67f8feb4,324629041,0,0x0,8
tick,0x7ffe67f8feb4,324644093,0,0x0,8
tick,0x7ffe67f8feb4,324659093,0,0x0,8
tick,0x7ffe67f8feb4,324674613,0,0x0,8
tick,0x7ffe67f8feb4,324690218,0,0x0,8
tick,0x7ffe67f8feb4,324705418,0,0x0,8
tick,0x7ffe67f8feb4,324720227,0,0x0,8
tick,0x7ffe67f8feb4,324735802,0,0x0,8
tick,0x7ffe67f8feb4,324751419,0,0x0,8
tick,0x7ffe67f8feb4,324766968,0,0x0,8
tick,0x7ffe67f8feb4,324782824,0,0x0,8
tick,0x7ffe67f8feb4,324798433,0,0x0,8
tick,0x7ffe67f8feb4,324813587,0,0x0,8
tick,0x7ffe67f8feb4,324829416,0,0x0,8
tick,0x7ffe67f8feb4,324845078,0,0x0,8
tick,0x7ffe67f8feb4,324860453,0,0x0,8
tick,0x7ffe67f8feb4,324876421,0,0x0,8
tick,0x7ffe67f8feb4,324891951,0,0x0,8
tick,0x7ffe67f8feb4,324907581,0,0x0,8
tick,0x7ffe67f8feb4,324923043,0,0x0,8
tick,0x7ffe67f8feb4,324939134,0,0x0,8
tick,0x7ffe67f8feb4,324954484,0,0x0,8
tick,0x7ffe67f8feb4,324970067,0,0x0,8
tick,0x7ffe67f8feb4,324986393,0,0x0,8
tick,0x7ffe67f8feb4,325001979,0,0x0,8
tick,0x7ffe67f8feb4,325017809,0,0x0,8
tick,0x7ffe67f8feb4,325033049,0,0x0,8
tick,0x7ffe67f8feb4,325048958,0,0x0,8
tick,0x7ffe67f8feb4,325065013,0,0x0,8
tick,0x7ffe67f8feb4,325080247,0,0x0,8
tick,0x7ffe67f8feb4,325095734,0,0x0,8
tick,0x7ffe67f8feb4,325111198,0,0x0,8
tick,0x7ffe67f8feb4,325126731,0,0x0,8
tick,0x7ffe67f8feb4,325142680,0,0x0,8
tick,0x7ffe67f8feb4,325158169,0,0x0,8
tick,0x7ffe67f8feb4,325173591,0,0x0,8
tick,0x7ffe67f8feb4,325189076,0,0x0,8
tick,0x7ffe67f8feb4,325203931,0,0x0,8
tick,0x7ffe67f8feb4,325219423,0,0x0,8
tick,0x7ffe67f8feb4,325234677,0,0x0,8
tick,0x7ffe67f8feb4,325249816,0,0x0,8
tick,0x7ffe67f8feb4,325265802,0,0x0,8
tick,0x7ffe67f8feb4,325281558,0,0x0,8
tick,0x7ffe67f8feb4,325296844,0,0x0,8
tick,0x7ffe67f8feb4,325312351,0,0x0,8
tick,0x7ffe67f8feb4,325327525,0,0x0,8
tick,0x7ffe67f8feb4,325343366,0,0x0,8
tick,0x7ffe67f8feb4,325358723,0,0x0,8
tick,0x7ffe67f8feb4,325373653,0,0x0,8
tick,0x7ffe67f8feb4,325389585,0,0x0,8
tick,0x7ffe67f8feb4,325404965,0,0x0,8
tick,0x7ffe67f8feb4,325420523,0,0x0,8
tick,0x7ffe67f8feb4,325436389,0,0x0,8
tick,0x7ffe67f8feb4,325451496,0,0x0,8
tick,0x7ffe67f8feb4,325467286,0,0x0,8
tick,0x7ffe67f8feb4,325482689,0,0x0,8
tick,0x7ffe67f8feb4,325498304,0,0x0,8
tick,0x7ffe67f8feb4,325513893,0,0x0,8
tick,0x7ffe67f8feb4,325529913,0,0x0,8
tick,0x7ffe67f8feb4,325545915,0,0x0,8
tick,0x7ffe67f8feb4,325561949,0,0x0,8
tick,0x7ffe67f8feb4,325577896,0,0x0,8
tick,0x7ffe67f8feb4,325593956,0,0x0,8
tick,0x7ffe67f8feb4,325610024,0,0x0,8
tick,0x7ffe67f8feb4,325626194,0,0x0,8
tick,0x7ffe67f8feb4,325642011,0,0x0,8
tick,0x7ffe67f8feb4,325657307,0,0x0,8
tick,0x7ffe67f8feb4,325672558,0,0x0,8
tick,0x7ffe67f8feb4,325688618,0,0x0,8
tick,0x7ffe67f8feb4,325703825,0,0x0,8
tick,0x7ffe67f8feb4,325718967,0,0x0,8
tick,0x7ffe67f8feb4,325735085,0,0x0,8
tick,0x7ffe67f8feb4,325750472,0,0x0,8
tick,0x7ffe67f8feb4,325766081,0,0x0,8
tick,0x7ffe67f8feb4,325781955,0,0x0,8
tick,0x7ffe67f8feb4,325797590,0,0x0,8
tick,0x7ffe67f8feb4,325813093,0,0x0,8
tick,0x7ffe67f8feb4,325829180,0,0x0,8
tick,0x7ffe67f8feb4,325844809,0,0x0,8
tick,0x7ffe67f8feb4,325860210,0,0x0,8
tick,0x7ffe67f8feb4,325875942,0,0x0,8
tick,0x7ffe67f8feb4,325891818,0,0x0,8
tick,0x7ffe67f8feb4,325907180,0,0x0,8
tick,0x7ffe67f8feb4,325922615,0,0x0,8
tick,0x7ffe67f8feb4,325937947,0,0x0,8
tick,0x7ffe67f8feb4,325953461,0,0x0,8
tick,0x7ffe67f8feb4,325968680,0,0x0,8
tick,0x7ffe67f8feb4,325983881,0,0x0,8
tick,0x7ffe67f8feb4,325999577,0,0x0,8
tick,0x7ffe67f8feb4,326014665,0,0x0,8
tick,0x7ffe67f8feb4,326030158,0,0x0,8
tick,0x7ffe67f8feb4,326045672,0,0x0,8
tick,0x7ffe67f8feb4,326061317,0,0x0,8
tick,0x7ffe67f8feb4,326077408,0,0x0,8
tick,0x7ffe67f8feb4,326092763,0,0x0,8
tick,0x7ffe67f8feb4,326108792,0,0x0,8
tick,0x7ffe67f8feb4,326123984,0,0x0,8
tick,0x7ffe67f8feb4,326139199,0,0x0,8
tick,0x7ffe67f8feb4,326155233,0,0x0,8
tick,0x7ffe67f8feb4,326170713,0,0x0,8
tick,0x7ffe67f8feb4,326186727,0,0x0,8
tick,0x7ffe67f8feb4,326202083,0,0x0,8
tick,0x7ffe67f8feb4,326218293,0,0x0,8
tick,0x7ffe67f8feb4,326233815,0,0x0,8
tick,0x7ffe67f8feb4,326250096,0,0x0,8
tick,0x7ffe67f8feb4,326265800,0,0x0,8
tick,0x7ffe67f8feb4,326280852,0,0x0,8
tick,0x7ffe67f8feb4,326296211,0,0x0,8
tick,0x7ffe67f8feb4,326311858,0,0x0,8
tick,0x7ffe67f8feb4,326327727,0,0x0,8
tick,0x7ffe67f8feb4,326344008,0,0x0,8
tick,0x7ffe67f8feb4,326359857,0,0x0,8
tick,0x7ffe67f8feb4,326375320,0,0x0,8
tick,0x7ffe67f8feb4,326391046,0,0x0,8
tick,0x7ffe67f8feb4,326406244,0,0x0,8
tick,0x7ffe67f8feb4,326422213,0,0x0,8
tick,0x7ffe67f8feb4,326438158,0,0x0,8
tick,0x7ffe67f8feb4,326454177,0,0x0,8
tick,0x7ffe67f8feb4,326470128,0,0x0,8
tick,0x7ffe67f8feb4,326486150,0,0x0,8
tick,0x7ffe67f8feb4,326502194,0,0x0,8
tick,0x7ffe67f8feb4,326518350,0,0x0,8
tick,0x7ffe67f8feb4,326534465,0,0x0,8
tick,0x7ffe67f8feb4,326549983,0,0x0,8
tick,0x7ffe67f8feb4,326566210,0,0x0,8
tick,0x7ffe67f8feb4,326581673,0,0x0,8
tick,0x7ffe67f8feb4,326597698,0,0x0,8
tick,0x7ffe67f8feb4,326613478,0,0x0,8
tick,0x7ffe67f8feb4,326629218,0,0x0,8
tick,0x7ffe67f8feb4,326644559,0,0x0,8
tick,0x7ffe67f8feb4,326660354,0,0x0,8
tick,0x7ffe67f8feb4,326675529,0,0x0,8
tick,0x7ffe67f8feb4,326691173,0,0x0,8
tick,0x7ffe67f8feb4,326707130,0,0x0,8
tick,0x7ffe67f8feb4,326723592,0,0x0,8
tick,0x7ffe67f8feb4,326738578,0,0x0,8
tick,0x7ffe67f8feb4,326753947,0,0x0,8
tick,0x7ffe67f8feb4,326769930,0,0x0,8
tick,0x7ffe67f8feb4,326785274,0,0x0,8
tick,0x7ffe67f8feb4,326801752,0,0x0,8
tick,0x7ffe67f8feb4,326817071,0,0x0,8
tick,0x7ffe67f8feb4,326832748,0,0x0,8
tick,0x7ffe67f8feb4,326848382,0,0x0,8
tick,0x7ffe67f8feb4,326863875,0,0x0,8
tick,0x7ffe67f8feb4,326879089,0,0x0,8
tick,0x7ffe67f8feb4,326894748,0,0x0,8
tick,0x7ffe67f8feb4,326910906,0,0x0,8
tick,0x7ffe67f8feb4,326926833,0,0x0,8
tick,0x7ffe67f8feb4,326941983,0,0x0,8
tick,0x7ffe67f8feb4,326957518,0,0x0,8
tick,0x7ffe67f8feb4,326973232,0,0x0,8
tick,0x7ffe67f8feb4,326989664,0,0x0,8
tick,0x7ffe67f8feb4,327006045,0,0x0,8
tick,0x7ffe67f8feb4,327021797,0,0x0,8
tick,0x7ffe67f8feb4,327036964,0,0x0,8
tick,0x7ffe67f8feb4,327052797,0,0x0,8
tick,0x7ffe67f8feb4,327068216,0,0x0,8
tick,0x7ffe67f8feb4,327084636,0,0x0,8
tick,0x7ffe67f8feb4,327100536,0,0x0,8
tick,0x7ffe67f8feb4,327115819,0,0x0,8
tick,0x7ffe67f8feb4,327130907,0,0x0,8
tick,0x7ffe67f8feb4,327146098,0,0x0,8
tick,0x7ffe67f8feb4,327162115,0,0x0,8
tick,0x7ffe67f8feb4,327178146,0,0x0,8
tick,0x7ffe67f8feb4,327193582,0,0x0,8
tick,0x7ffe67f8feb4,327208746,0,0x0,8
tick,0x7ffe67f8feb4,327224354,0,0x0,8
tick,0x7ffe67f8feb4,327239694,0,0x0,8
tick,0x7ffe67f8feb4,327255214,0,0x0,8
tick,0x7ffe67f8feb4,327270908,0,0x0,8
tick,0x7ffe67f8feb4,327286269,0,0x0,8
tick,0x7ffe67f8feb4,327301300,0,0x0,8
tick,0x7ffe67f8feb4,327317064,0,0x0,8
tick,0x7ffe67f8feb4,327332249,0,0x0,8
tick,0x7ffe67f8feb4,327347432,0,0x0,8
tick,0x7ffe67f8feb4,327363505,0,0x0,8
tick,0x7ffe67f8feb4,327378568,0,0x0,8
tick,0x7ffe67f8feb4,327398143,0,0x0,8
tick,0x7ffe67f8feb4,327410750,0,0x0,8
tick,0x7ffe67f8feb4,327427063,0,0x0,8
tick,0x7ffe67f8feb4,327442763,0,0x0,8
tick,0x7ffe67f8feb4,327458522,0,0x0,8
tick,0x7ffe67f8feb4,327474749,0,0x0,8
tick,0x7ffe67f8feb4,327490557,0,0x0,8
tick,0x7ffe67f8feb4,327506282,0,0x0,8
tick,0x7ffe67f8feb4,327522882,0,0x0,8
tick,0x7ffe67f8feb4,327537280,0,0x0,8
tick,0x7ffe67f8feb4,327552828,0,0x0,8
tick,0x7ffe67f8feb4,327568122,0,0x0,8
tick,0x7ffe67f8feb4,327583454,0,0x0,8
tick,0x7ffe67f8feb4,327598811,0,0x0,8
tick,0x7ffe67f8feb4,327614647,0,0x0,8
tick,0x7ffe67f8feb4,327630636,0,0x0,8
tick,0x7ffe67f8feb4,327645993,0,0x0,8
tick,0x7ffe67f8feb4,327660967,0,0x0,8
tick,0x7ffe67f8feb4,327676996,0,0x0,8
tick,0x7ffe67f8feb4,327693065,0,0x0,8
tick,0x7ffe67f8feb4,327708556,0,0x0,8
tick,0x7ffe67f8feb4,327724540,0,0x0,8
tick,0x7ffe67f8feb4,327740598,0,0x0,8
tick,0x7ffe67f8feb4,327755916,0,0x0,8
tick,0x7ffe67f8feb4,327771437,0,0x0,8
tick,0x7ffe67f8feb4,327787613,0,0x0,8
tick,0x7ffe67f8feb4,327803184,0,0x0,8
tick,0x7ffe67f8feb4,327818578,0,0x0,8
tick,0x7ffe67f8feb4,327834783,0,0x0,8
tick,0x7ffe67f8feb4,327850357,0,0x0,8
tick,0x7ffe67f8feb4,327866516,0,0x0,8
tick,0x7ffe67f8feb4,327882507,0,0x0,8
tick,0x7ffe67f8feb4,327897514,0,0x0,8
tick,0x7ffe67f8feb4,327912703,0,0x0,8
tick,0x7ffe67f8feb4,327928524,0,0x0,8
tick,0x7ffe67f8feb4,327944138,0,0x0,8
tick,0x7ffe67f8feb4,327960014,0,0x0,8
tick,0x7ffe67f8feb4,327976037,0,0x0,8
tick,0x7ffe67f8feb4,327991228,0,0x0,8
tick,0x7ffe67f8feb4,328007061,0,0x0,8
tick,0x7ffe67f8feb4,328022772,0,0x0,8
tick,0x7ffe67f8feb4,328037742,0,0x0,8
tick,0x7ffe67f8feb4,328053152,0,0x0,8
tick,0x7ffe67f8feb4,328069125,0,0x0,8
tick,0x7ffe67f8feb4,328085523,0,0x0,8
tick,0x7ffe67f8feb4,328100868,0,0x0,8
tick,0x7ffe67f8feb4,328116355,0,0x0,8
tick,0x7ffe67f8feb4,328131782,0,0x0,8
tick,0x7ffe67f8feb4,328147030,0,0x0,8
tick,0x7ffe67f8feb4,328162450,0,0x0,8
tick,0x7ffe67f8feb4,328177668,0,0x0,8
tick,0x7ffe67f8feb4,328193044,0,0x0,8
tick,0x7ffe67f8feb4,328208172,0,0x0,8
tick,0x7ffe67f8feb4,328224098,0,0x0,8
tick,0x7ffe67f8feb4,328239313,0,0x0,8
tick,0x7ffe67f8feb4,328255631,0,0x0,8
tick,0x7ffe67f8feb4,328271633,0,0x0,8
tick,0x7ffe67f8feb4,328287026,0,0x0,8
tick,0x7ffe67f8feb4,328302789,0,0x0,8
tick,0x7ffe67f8feb4,328318712,0,0x0,8
tick,0x7ffe67f8feb4,328334031,0,0x0,8
tick,0x7ffe67f8feb4,328349120,0,0x0,8
tick,0x7ffe67f8feb4,328364840,0,0x0,8
tick,0x7ffe67f8feb4,328380837,0,0x0,8
tick,0x7ffe67f8feb4,328397115,0,0x0,8
tick,0x7ffe67f8feb4,328411872,0,0x0,8
tick,0x7ffe67f8feb4,328427882,0,0x0,8
tick,0x7ffe67f8feb4,328443549,0,0x0,8
tick,0x7ffe67f8feb4,328459704,0,0x0,8
tick,0x7ffe67f8feb4,328475538,0,0x0,8
tick,0x7ffe67f8feb4,328491559,0,0x0,8
tick,0x7ffe67f8feb4,328507246,0,0x0,8
tick,0x7ffe67f8feb4,328523165,0,0x0,8
tick,0x7ffe67f8feb4,328538145,0,0x0,8
tick,0x7ffe67f8feb4,328553461,0,0x0,8
tick,0x7ffe67f8feb4,328568587,0,0x0,8
tick,0x7ffe67f8feb4,328584074,0,0x0,8
tick,0x7ffe67f8feb4,328599387,0,0x0,8
tick,0x7ffe67f8feb4,328615310,0,0x0,8
tick,0x7ffe67f8feb4,328630797,0,0x0,8
tick,0x7ffe67f8feb4,328646565,0,0x0,8
tick,0x7ffe67f8feb4,328662750,0,0x0,8
tick,0x7ffe67f8feb4,328677817,0,0x0,8
tick,0x7ffe67f8feb4,328693280,0,0x0,8
tick,0x7ffe67f8feb4,328709325,0,0x0,8
tick,0x7ffe67f8feb4,328725262,0,0x0,8
tick,0x7ffe67f8feb4,328741289,0,0x0,8
tick,0x7ffe67f8feb4,328756741,0,0x0,8
tick,0x7ffe67f8feb4,328772023,0,0x0,8
tick,0x7ffe67f8feb4,328786988,0,0x0,8
tick,0x7ffe67f8feb4,328802146,0,0x0,8
tick,0x7ffe67f8feb4,328817215,0,0x0,8
tick,0x7ffe67f8feb4,328832713,0,0x0,8
tick,0x7ffe67f8feb4,328848354,0,0x0,8
tick,0x7ffe67f8feb4,328864172,0,0x0,8
tick,0x7ffe67f8feb4,328880174,0,0x0,8
tick,0x7ffe67f8feb4,328895860,0,0x0,8
tick,0x7ffe67f8feb4,328911189,0,0x0,8
tick,0x7ffe67f8feb4,328926386,0,0x0,8
tick,0x7ffe67f8feb4,328942393,0,0x0,8
tick,0x7ffe67f8feb4,328957801,0,0x0,8
tick,0x7ffe67f8feb4,328973278,0,0x0,8
tick,0x7ffe67f8feb4,328989264,0,0x0,8
tick,0x7ffe67f8feb4,329005108,0,0x0,8
tick,0x7ffe67f8feb4,329021207,0,0x0,8
tick,0x7ffe67f8feb4,329036516,0,0x0,8
tick,0x7ffe67f8feb4,329051689,0,0x0,8
tick,0x7ffe67f8feb4,329067105,0,0x0,8
tick,0x7ffe67f8feb4,329082453,0,0x0,8
tick,0x7ffe67f8feb4,329097641,0,0x0,8
tick,0x7ffe67f8feb4,329113717,0,0x0,8
tick,0x7ffe67f8feb4,329129614,0,0x0,8
tick,0x7ffe67f8feb4,329145670,0,0x0,8
tick,0x7ffe67f8feb4,329161305,0,0x0,8
tick,0x7ffe67f8feb4,329176348,0,0x0,8
tick,0x7ffe67f8feb4,329191947,0,0x0,8
tick,0x7ffe67f8feb4,329207529,0,0x0,8
tick,0x7ffe67f8feb4,329222895,0,0x0,8
tick,0x7ffe67f8feb4,329238405,0,0x0,8
tick,0x7ffe67f8feb4,329254428,0,0x0,8
tick,0x7ffe67f8feb4,329269762,0,0x0,8
tick,0x7ffe67f8feb4,329285700,0,0x0,8
tick,0x7ffe67f8feb4,329300652,0,0x0,8
tick,0x7ffe67f8feb4,329316892,0,0x0,8
tick,0x7ffe67f8feb4,329332212,0,0x0,8
tick,0x7ffe67f8feb4,329347703,0,0x0,8
tick,0x7ffe67f8feb4,329363155,0,0x0,8
tick,0x7ffe67f8feb4,329378653,0,0x0,8
tick,0x7ffe67f8feb4,329393776,0,0x0,8
tick,0x7ffe67f8feb4,329408979,0,0x0,8
tick,0x7ffe67f8feb4,329425407,0,0x0,8
tick,0x7ffe67f8feb4,329440980,0,0x0,8
tick,0x7ffe67f8feb4,329457079,0,0x0,8
tick,0x7ffe67f8feb4,329472916,0,0x0,8
tick,0x7ffe67f8feb4,329488923,0,0x0,8
tick,0x7ffe67f8feb4,329503923,0,0x0,8
tick,0x7ffe67f8feb4,329520005,0,0x0,8
tick,0x7ffe67f8feb4,329536081,0,0x0,8
tick,0x7ffe67f8feb4,329552058,0,0x0,8
tick,0x7ffe67f8feb4,329567062,0,0x0,8
tick,0x7ffe67f8feb4,329582823,0,0x0,8
tick,0x7ffe67f8feb4,329598006,0,0x0,8
tick,0x7ffe67f8feb4,329613347,0,0x0,8
tick,0x7ffe67f8feb4,329628837,0,0x0,8
tick,0x7ffe67f8feb4,329643990,0,0x0,8
tick,0x7ffe67f8feb4,329659408,0,0x0,8
tick,0x7ffe67f8feb4,329675768,0,0x0,8
tick,0x7ffe67f8feb4,329691782,0,0x0,8
tick,0x7ffe67f8feb4,329707190,0,0x0,8
tick,0x7ffe67f8feb4,329722851,0,0x0,8
tick,0x7ffe67f8feb4,329738458,0,0x0,8
tick,0x7ffe67f8feb4,329754212,0,0x0,8
tick,0x7ffe67f8feb4,329770220,0,0x0,8
tick,0x7ffe67f8feb4,329785799,0,0x0,8
tick,0x7ffe67f8feb4,329801103,0,0x0,8
tick,0x7ffe67f8feb4,329816901,0,0x0,8
tick,0x7ffe67f8feb4,329832640,0,0x0,8
tick,0x7ffe67f8feb4,329848036,0,0x0,8
tick,0x7ffe67f8feb4,329863813,0,0x0,8
tick,0x7ffe67f8feb4,329879935,0,0x0,8
tick,0x7ffe67f8feb4,329895658,0,0x0,8
tick,0x7ffe67f8feb4,329910792,0,0x0,8
tick,0x7ffe67f8feb4,329926068,0,0x0,8
tick,0x7ffe67f8feb4,329941441,0,0x0,8
tick,0x7ffe67f8feb4,329957144,0,0x0,8
tick,0x7ffe67f8feb4,329972204,0,0x0,8
tick,0x7ffe67f8feb4,329987913,0,0x0,8
tick,0x7ffe67f8feb4,330003315,0,0x0,8
tick,0x7ffe67f8feb4,330019249,0,0x0,8
tick,0x7ffe67f8feb4,330035269,0,0x0,8
tick,0x7ffe67f8feb4,330051302,0,0x0,8
tick,0x7ffe67f8feb4,330066784,0,0x0,8
tick,0x7ffe67f8feb4,330082249,0,0x0,8
tick,0x7ffe67f8feb4,330100459,0,0x0,8
tick,0x7ffe67f8feb4,330115873,0,0x0,8
tick,0x7ffe67f8feb4,330131222,0,0x0,8
tick,0x7ffe67f8feb4,330146785,0,0x0,8
tick,0x7ffe67f8feb4,330162630,0,0x0,8
tick,0x7ffe67f8feb4,330178252,0,0x0,8
tick,0x7ffe67f8feb4,330193739,0,0x0,8
tick,0x7ffe67f8feb4,330209813,0,0x0,8
tick,0x7ffe67f8feb4,330225830,0,0x0,8
tick,0x7ffe67f8feb4,330241163,0,0x0,8
tick,0x7ffe67f8feb4,330257309,0,0x0,8
tick,0x7ffe67f8feb4,330273184,0,0x0,8
tick,0x7ffe67f8feb4,330288460,0,0x0,8
tick,0x7ffe67f8feb4,330304440,0,0x0,8
tick,0x7ffe67f8feb4,330320406,0,0x0,8
tick,0x7ffe67f8feb4,330336455,0,0x0,8
tick,0x7ffe67f8feb4,330352408,0,0x0,8
tick,0x7ffe67f8feb4,330368412,0,0x0,8
tick,0x7ffe67f8feb4,330384415,0,0x0,8
tick,0x7ffe67f8feb4,330400418,0,0x0,8
tick,0x7ffe67f8feb4,330416413,0,0x0,8
tick,0x7ffe67f8feb4,330432430,0,0x0,8
tick,0x7ffe67f8feb4,330448425,0,0x0,8
tick,0x7ffe67f8feb4,330464419,0,0x0,8
tick,0x7ffe67f8feb4,330480416,0,0x0,8
tick,0x7ffe67f8feb4,330496429,0,0x0,8
tick,0x7ffe67f8feb4,330512460,0,0x0,8
tick,0x7ffe67f8feb4,330528440,0,0x0,8
tick,0x7ffe67f8feb4,330544459,0,0x0,8
tick,0x7ffe67f8feb4,330560072,0,0x0,8
tick,0x7ffe67f8feb4,330576016,0,0x0,8
tick,0x7ffe67f8feb4,330591381,0,0x0,8
tick,0x7ffe67f8feb4,330606802,0,0x0,8
tick,0x7ffe67f8feb4,330621966,0,0x0,8
tick,0x7ffe67f8feb4,330637890,0,0x0,8
tick,0x7ffe67f8feb4,330653952,0,0x0,8
tick,0x7ffe67f8feb4,330669988,0,0x0,8
tick,0x7ffe67f8feb4,330686235,0,0x0,8
tick,0x7ffe67f8feb4,330701475,0,0x0,8
tick,0x7ffe67f8feb4,330717493,0,0x0,8
tick,0x7ffe67f8feb4,330733023,0,0x0,8
tick,0x7ffe67f8feb4,330748970,0,0x0,8
tick,0x7ffe67f8feb4,330764351,0,0x0,8
tick,0x7ffe67f8feb4,330779845,0,0x0,8
tick,0x7ffe67f8feb4,330795878,0,0x0,8
tick,0x7ffe67f8feb4,330812125,0,0x0,8
tick,0x7ffe67f8feb4,330827561,0,0x0,8
tick,0x7ffe67f8feb4,330843299,0,0x0,8
tick,0x7ffe67f8feb4,330858665,0,0x0,8
tick,0x7ffe67f8feb4,330874636,0,0x0,8
tick,0x7ffe67f8feb4,330890366,0,0x0,8
tick,0x7ffe67f8feb4,330905325,0,0x0,8
tick,0x7ffe67f8feb4,330920558,0,0x0,8
tick,0x7ffe67f8feb4,330936614,0,0x0,8
tick,0x7ffe67f8feb4,330951556,0,0x0,8
tick,0x7ffe67f8feb4,330967539,0,0x0,8
tick,0x7ffe67f8feb4,330983491,0,0x0,8
tick,0x7ffe67f8feb4,330998767,0,0x0,8
tick,0x7ffe67f8feb4,331014313,0,0x0,8
tick,0x7ffe67f8feb4,331029789,0,0x0,8
tick,0x7ffe67f8feb4,331045953,0,0x0,8
tick,0x7ffe67f8feb4,331060915,0,0x0,8
tick,0x7ffe67f8feb4,331077303,0,0x0,8
tick,0x7ffe67f8feb4,331092711,0,0x0,8
tick,0x7ffe67f8feb4,331108417,0,0x0,8
tick,0x7ffe67f8feb4,331123878,0,0x0,8
tick,0x7ffe67f8feb4,331139336,0,0x0,8
tick,0x7ffe67f8feb4,331155718,0,0x0,8
tick,0x7ffe67f8feb4,331171044,0,0x0,8
tick,0x7ffe67f8feb4,331186517,0,0x0,8
tick,0x7ffe67f8feb4,331202233,0,0x0,8
tick,0x7ffe67f8feb4,331217931,0,0x0,8
tick,0x7ffe67f8feb4,331233094,0,0x0,8
tick,0x7ffe67f8feb4,331248702,0,0x0,8
tick,0x7ffe67f8feb4,331264672,0,0x0,8
tick,0x7ffe67f8feb4,331279885,0,0x0,8
tick,0x7ffe67f8feb4,331295112,0,0x0,8
tick,0x7ffe67f8feb4,331310798,0,0x0,8
tick,0x7ffe67f8feb4,331327266,0,0x0,8
tick,0x7ffe67f8feb4,331342645,0,0x0,8
tick,0x7ffe67f8feb4,331357702,0,0x0,8
tick,0x7ffe67f8feb4,331373505,0,0x0,8
tick,0x7ffe67f8feb4,331389192,0,0x0,8
tick,0x7ffe67f8feb4,331404635,0,0x0,8
tick,0x7ffe67f8feb4,331420400,0,0x0,8
tick,0x7ffe67f8feb4,331435520,0,0x0,8
tick,0x7ffe67f8feb4,331450948,0,0x0,8
tick,0x7ffe67f8feb4,331466691,0,0x0,8
tick,0x7ffe67f8feb4,331482853,0,0x0,8
tick,0x7ffe67f8feb4,331498598,0,0x0,8
tick,0x7ffe67f8feb4,331513631,0,0x0,8
tick,0x7ffe67f8feb4,331529632,0,0x0,8
tick,0x7ffe67f8feb4,331545636,0,0x0,8
tick,0x7ffe67f8feb4,331561295,0,0x0,8
tick,0x7ffe67f8feb4,331576996,0,0x0,8
tick,0x7ffe67f8feb4,331593000,0,0x0,8
tick,0x7ffe67f8feb4,331608218,0,0x0,8
tick,0x7ffe67f8feb4,331623378,0,0x0,8
tick,0x7ffe67f8feb4,331639322,0,0x0,8
tick,0x7ffe67f8feb4,331655357,0,0x0,8
tick,0x7ffe67f8feb4,331670714,0,0x0,8
tick,0x7ffe67f8feb4,331686462,0,0x0,8
tick,0x7ffe67f8feb4,331702097,0,0x0,8
tick,0x7ffe67f8feb4,331716946,0,0x0,8
tick,0x7ffe67f8feb4,331732286,0,0x0,8
tick,0x7ffe67f8feb4,331748144,0,0x0,8
tick,0x7ffe67f8feb4,331764205,0,0x0,8
tick,0x7ffe67f8feb4,331779341,0,0x0,8
tick,0x7ffe67f8feb4,331795141,0,0x0,8
tick,0x7ffe67f8feb4,331810606,0,0x0,8
tick,0x7ffe67f8feb4,331825717,0,0x0,8
tick,0x7ffe67f8feb4,331841211,0,0x0,8
tick,0x7ffe67f8feb4,331856599,0,0x0,8
tick,0x7ffe67f8feb4,331872102,0,0x0,8
tick,0x7ffe67f8feb4,331887641,0,0x0,8
tick,0x7ffe67f8feb4,331902736,0,0x0,8
tick,0x7ffe67f8feb4,331918812,0,0x0,8
tick,0x7ffe67f8feb4,331935173,0,0x0,8
tick,0x7ffe67f8feb4,331950611,0,0x0,8
tick,0x7ffe67f8feb4,331966419,0,0x0,8
tick,0x7ffe67f8feb4,331982159,0,0x0,8
tick,0x7ffe67f8feb4,331997494,0,0x0,8
tick,0x7ffe67f8feb4,332013207,0,0x0,8
tick,0x7ffe67f8feb4,332028521,0,0x0,8
tick,0x7ffe67f8feb4,332044509,0,0x0,8
tick,0x7ffe67f8feb4,332059731,0,0x0,8
tick,0x7ffe67f8feb4,332075889,0,0x0,8
tick,0x7ffe67f8feb4,332090905,0,0x0,8
tick,0x7ffe67f8feb4,332106741,0,0x0,8
tick,0x7ffe67f8feb4,332122256,0,0x0,8
tick,0x7ffe67f8feb4,332137750,0,0x0,8
tick,0x7ffe67f8feb4,332152965,0,0x0,8
tick,0x7ffe67f8feb4,332168094,0,0x0,8
tick,0x7ffe67f8feb4,332184067,0,0x0,8
tick,0x7ffe67f8feb4,332200078,0,0x0,8
tick,0x7ffe67f8feb4,332215752,0,0x0,8
tick,0x7ffe67f8feb4,332231755,0,0x0,8
tick,0x7ffe67f8feb4,332246764,0,0x0,8
tick,0x7ffe67f8feb4,332262657,0,0x0,8
tick,0x7ffe67f8feb4,332278652,0,0x0,8
tick,0x7ffe67f8feb4,332293627,0,0x0,8
tick,0x7ffe67f8feb4,332309060,0,0x0,8
tick,0x7ffe67f8feb4,332325071,0,0x0,8
tick,0x7ffe67f8feb4,332340145,0,0x0,8
tick,0x7ffe67f8feb4,332356006,0,0x0,8
tick,0x7ffe67f8feb4,332372042,0,0x0,8
tick,0x7ffe67f8feb4,332388074,0,0x0,8
tick,0x7ffe67f8feb4,332404006,0,0x0,8
tick,0x7ffe67f8feb4,332419146,0,0x0,8
tick,0x7ffe67f8feb4,332435083,0,0x0,8
tick,0x7ffe67f8feb4,332451107,0,0x0,8
tick,0x7ffe67f8feb4,332467073,0,0x0,8
tick,0x7ffe67f8feb4,332483071,0,0x0,8
tick,0x7ffe67f8feb4,332499078,0,0x0,8
tick,0x7ffe67f8feb4,332515110,0,0x0,8
tick,0x7ffe67f8feb4,332531099,0,0x0,8
tick,0x7ffe67f8feb4,332546235,0,0x0,8
tick,0x7ffe67f8feb4,332562087,0,0x0,8
tick,0x7ffe67f8feb4,332578107,0,0x0,8
tick,0x7ffe67f8feb4,332594191,0,0x0,8
tick,0x7ffe67f8feb4,332610285,0,0x0,8
tick,0x7ffe67f8feb4,332625985,0,0x0,8
tick,0x7ffe67f8feb4,332641128,0,0x0,8
tick,0x7ffe67f8feb4,332656875,0,0x0,8
tick,0x7ffe67f8feb4,332672115,0,0x0,8
tick,0x7ffe67f8feb4,332688104,0,0x0,8
tick,0x7ffe67f8feb4,332704124,0,0x0,8
tick,0x7ffe67f8feb4,332720120,0,0x0,8
tick,0x7ffe67f8feb4,332736129,0,0x0,8
tick,0x7ffe67f8feb4,332752144,0,0x0,8
tick,0x7ffe67f8feb4,332768133,0,0x0,8
tick,0x7ffe67f8feb4,332784134,0,0x0,8
tick,0x7ffe67f8feb4,332800137,0,0x0,8
tick,0x7ffe67f8feb4,332816145,0,0x0,8
tick,0x7ffe67f8feb4,332832170,0,0x0,8
tick,0x7ffe67f8feb4,332848195,0,0x0,8
tick,0x7ffe67f8feb4,332863746,0,0x0,8
tick,0x7ffe67f8feb4,332879095,0,0x0,8
tick,0x7ffe67f8feb4,332895131,0,0x0,8
tick,0x7ffe67f8feb4,332924431,0,0x0,8
tick,0x7ffe67f8feb4,332928569,0,0x0,8
tick,0x7ffe67f8feb4,332942368,0,0x0,8
tick,0x7ffe67f8feb4,332958429,0,0x0,8
tick,0x7ffe67f8feb4,332974395,0,0x0,8
tick,0x7ffe67f8feb4,332990401,0,0x0,8
tick,0x7ffe67f8feb4,333006391,0,0x0,8
tick,0x7ffe67f8feb4,333022476,0,0x0,8
tick,0x7ffe67f8feb4,333038433,0,0x0,8
tick,0x7ffe67f8feb4,333054411,0,0x0,8
tick,0x7ffe67f8feb4,333070443,0,0x0,8
tick,0x7ffe67f8feb4,333086431,0,0x0,8
tick,0x7ffe67f8feb4,333101902,0,0x0,8
tick,0x7ffe67f8feb4,333117472,0,0x0,8
tick,0x7ffe67f8feb4,333133346,0,0x0,8
tick,0x7ffe67f8feb4,333148495,0,0x0,8
tick,0x7ffe67f8feb4,333164476,0,0x0,8
tick,0x7ffe67f8feb4,333180497,0,0x0,8
tick,0x7ffe67f8feb4,333196539,0,0x0,8
tick,0x7ffe67f8feb4,333212776,0,0x0,8
tick,0x7ffe67f8feb4,333228532,0,0x0,8
tick,0x7ffe67f8feb4,333244686,0,0x0,8
tick,0x7ffe67f8feb4,333260175,0,0x0,8
tick,0x7ffe67f8feb4,333276152,0,0x0,8
tick,0x7ffe67f8feb4,333292207,0,0x0,8
tick,0x7ffe67f8feb4,333308206,0,0x0,8
tick,0x7ffe67f8feb4,333324108,0,0x0,8
tick,0x7ffe67f8feb4,333339306,0,0x0,8
tick,0x7ffe67f8feb4,333355169,0,0x0,8
tick,0x7ffe67f8feb4,333370295,0,0x0,8
tick,0x7ffe67f8feb4,333386132,0,0x0,8
tick,0x7ffe67f8feb4,333401249,0,0x0,8
tick,0x7ffe67f8feb4,333417148,0,0x0,8
tick,0x7ffe67f8feb4,333433159,0,0x0,8
tick,0x7ffe67f8feb4,333449162,0,0x0,8
tick,0x7ffe67f8feb4,333465175,0,0x0,8
tick,0x7ffe67f8feb4,333481161,0,0x0,8
tick,0x7ffe67f8feb4,333496587,0,0x0,8
tick,0x7ffe67f8feb4,333512303,0,0x0,8
tick,0x7ffe67f8feb4,333528614,0,0x0,8
tick,0x7ffe67f8feb4,333544246,0,0x0,8
tick,0x7ffe67f8feb4,333560225,0,0x0,8
tick,0x7ffe67f8feb4,333576230,0,0x0,8
tick,0x7ffe67f8feb4,333592251,0,0x0,8
tick,0x7ffe67f8feb4,333608243,0,0x0,8
tick,0x7ffe67f8feb4,333624252,0,0x0,8
tick,0x7ffe67f8feb4,333640257,0,0x0,8
tick,0x7ffe67f8feb4,333656253,0,0x0,8
tick,0x7ffe67f8feb4,333672263,0,0x0,8
tick,0x7ffe67f8feb4,333688302,0,0x0,8
tick,0x7ffe67f8feb4,333703250,0,0x0,8
tick,0x7ffe67f8feb4,333719276,0,0x0,8
tick,0x7ffe67f8feb4,333734962,0,0x0,8
tick,0x7ffe67f8feb4,333750439,0,0x0,8
tick,0x7ffe67f8feb4,333765537,0,0x0,8
tick,0x7ffe67f8feb4,333781294,0,0x0,8
tick,0x7ffe67f8feb4,333797278,0,0x0,8
tick,0x7ffe67f8feb4,333813295,0,0x0,8
tick,0x7ffe67f8feb4,333829305,0,0x0,8
tick,0x7ffe67f8feb4,333844161,0,0x0,8
tick,0x7ffe67f8feb4,333859318,0,0x0,8
tick,0x7ffe67f8feb4,333875160,0,0x0,8
tick,0x7ffe67f8feb4,333890333,0,0x0,8
tick,0x7ffe67f8feb4,333906215,0,0x0,8
tick,0x7ffe67f8feb4,333921796,0,0x0,8
tick,0x7ffe67f8feb4,333937238,0,0x0,8
tick,0x7ffe67f8feb4,333953328,0,0x0,8
tick,0x7ffe67f8feb4,333969258,0,0x0,8
tick,0x7ffe67f8feb4,333984928,0,0x0,8
tick,0x7ffe67f8feb4,334000310,0,0x0,8
tick,0x7ffe67f8feb4,334016167,0,0x0,8
tick,0x7ffe67f8feb4,334031326,0,0x0,8
tick,0x7ffe67f8feb4,334047199,0,0x0,8
tick,0x7ffe67f8feb4,334062875,0,0x0,8
tick,0x7ffe67f8feb4,334078105,0,0x0,8
tick,0x7ffe67f8feb4,334093904,0,0x0,8
tick,0x7ffe67f8feb4,334109733,0,0x0,8
tick,0x7ffe67f8feb4,334125649,0,0x0,8
tick,0x7ffe67f8feb4,334141213,0,0x0,8
tick,0x7ffe67f8feb4,334156903,0,0x0,8
tick,0x7ffe67f8feb4,334172596,0,0x0,8
tick,0x7ffe67f8feb4,334187980,0,0x0,8
tick,0x7ffe67f8feb4,334203967,0,0x0,8
tick,0x7ffe67f8feb4,334219874,0,0x0,8
tick,0x7ffe67f8feb4,334235402,0,0x0,8
tick,0x7ffe67f8feb4,334250704,0,0x0,8
tick,0x7ffe67f8feb4,334266103,0,0x0,8
tick,0x7ffe67f8feb4,334281748,0,0x0,8
tick,0x7ffe67f8feb4,334297731,0,0x0,8
tick,0x7ffe67f8feb4,334313113,0,0x0,8
tick,0x7ffe67f8feb4,334328122,0,0x0,8
tick,0x7ffe67f8feb4,334343492,0,0x0,8
tick,0x7ffe67f8feb4,334358278,0,0x0,8
tick,0x7ffe67f8feb4,334373792,0,0x0,8
tick,0x7ffe67f8feb4,334390097,0,0x0,8
tick,0x7ffe67f8feb4,334405096,0,0x0,8
tick,0x7ffe67f8feb4,334420720,0,0x0,8
tick,0x7ffe67f8feb4,334436491,0,0x0,8
tick,0x7ffe67f8feb4,334452425,0,0x0,8
tick,0x7ffe67f8feb4,334468199,0,0x0,8
tick,0x7ffe67f8feb4,334484133,0,0x0,8
tick,0x7ffe67f8feb4,334500118,0,0x0,8
tick,0x7ffe67f8feb4,334516118,0,0x0,8
tick,0x7ffe67f8feb4,334532141,0,0x0,8
tick,0x7ffe67f8feb4,334548155,0,0x0,8
tick,0x7ffe67f8feb4,334564239,0,0x0,8
tick,0x7ffe67f8feb4,334580395,0,0x0,8
tick,0x7ffe67f8feb4,334595552,0,0x0,8
tick,0x7ffe67f8feb4,334611030,0,0x0,8
tick,0x7ffe67f8feb4,334627062,0,0x0,8
tick,0x7ffe67f8feb4,334642888,0,0x0,8
tick,0x7ffe67f8feb4,334658907,0,0x0,8
tick,0x7ffe67f8feb4,334674185,0,0x0,8
tick,0x7ffe67f8feb4,334689744,0,0x0,8
tick,0x7ffe67f8feb4,334705179,0,0x0,8
tick,0x7ffe67f8feb4,334721219,0,0x0,8
tick,0x7ffe67f8feb4,334736735,0,0x0,8
tick,0x7ffe67f8feb4,334751947,0,0x0,8
tick,0x7ffe67f8feb4,334767982,0,0x0,8
tick,0x7ffe67f8feb4,334783124,0,0x0,8
tick,0x7ffe67f8feb4,334798934,0,0x0,8
tick,0x7ffe67f8feb4,334814567,0,0x0,8
tick,0x7ffe67f8feb4,334830323,0,0x0,8
tick,0x7ffe67f8feb4,334846083,0,0x0,8
tick,0x7ffe67f8feb4,334861487,0,0x0,8
tick,0x7ffe67f8feb4,334876620,0,0x0,8
tick,0x7ffe67f8feb4,334891627,0,0x0,8
tick,0x7ffe67f8feb4,334907649,0,0x0,8
tick,0x7ffe67f8feb4,334923447,0,0x0,8
tick,0x7ffe67f8feb4,334938655,0,0x0,8
tick,0x7ffe67f8feb4,334954133,0,0x0,8
tick,0x7ffe67f8feb4,334969117,0,0x0,8
tick,0x7ffe67f8feb4,334984485,0,0x0,8
tick,0x7ffe67f8feb4,335000478,0,0x0,8
tick,0x7ffe67f8feb4,335016176,0,0x0,8
tick,0x7ffe67f8feb4,335032163,0,0x0,8
tick,0x7ffe67f8feb4,335048172,0,0x0,8
tick,0x7ffe67f8feb4,335063864,0,0x0,8
tick,0x7ffe67f8feb4,335079399,0,0x0,8
tick,0x7ffe67f8feb4,335094642,0,0x0,8
tick,0x7ffe67f8feb4,335110229,0,0x0,8
tick,0x7ffe67f8feb4,335125489,0,0x0,8
tick,0x7ffe67f8feb4,335141496,0,0x0,8
tick,0x7ffe67f8feb4,335156496,0,0x0,8
tick,0x7ffe67f8feb4,335172147,0,0x0,8
tick,0x7ffe67f8feb4,335188219,0,0x0,8
tick,0x7ffe67f8feb4,335203532,0,0x0,8
tick,0x7ffe67f8feb4,335219485,0,0x0,8
tick,0x7ffe67f8feb4,335234814,0,0x0,8
tick,0x7ffe67f8feb4,335250574,0,0x0,8
tick,0x7ffe67f8feb4,335266341,0,0x0,8
tick,0x7ffe67f8feb4,335282527,0,0x0,8
tick,0x7ffe67f8feb4,335297447,0,0x0,8
tick,0x7ffe67f8feb4,335312838,0,0x0,8
tick,0x7ffe67f8feb4,335327883,0,0x0,8
tick,0x7ffe67f8feb4,335343508,0,0x0,8
tick,0x7ffe67f8feb4,335359248,0,0x0,8
tick,0x7ffe67f8feb4,335374729,0,0x0,8
tick,0x7ffe67f8feb4,335390208,0,0x0,8
tick,0x7ffe67f8feb4,335405975,0,0x0,8
tick,0x7ffe67f8feb4,335421067,0,0x0,8
tick,0x7ffe67f8feb4,335436779,0,0x0,8
tick,0x7ffe67f8feb4,335452383,0,0x0,8
tick,0x7ffe67f8feb4,335467853,0,0x0,8
tick,0x7ffe67f8feb4,335482980,0,0x0,8
tick,0x7ffe67f8feb4,335498956,0,0x0,8
tick,0x7ffe67f8feb4,335514976,0,0x0,8
tick,0x7ffe67f8feb4,335530986,0,0x0,8
tick,0x7ffe67f8feb4,335546998,0,0x0,8
tick,0x7ffe67f8feb4,335561997,0,0x0,8
tick,0x7ffe67f8feb4,335577977,0,0x0,8
tick,0x7ffe67f8feb4,335593807,0,0x0,8
tick,0x7ffe67f8feb4,335609794,0,0x0,8
tick,0x7ffe67f8feb4,335625777,0,0x0,8
tick,0x7ffe67f8feb4,335641775,0,0x0,8
tick,0x7ffe67f8feb4,335657794,0,0x0,8
tick,0x7ffe67f8feb4,335673443,0,0x0,8
tick,0x7ffe67f8feb4,335688832,0,0x0,8
tick,0x7ffe67f8feb4,335704873,0,0x0,8
tick,0x7ffe67f8feb4,335720023,0,0x0,8
tick,0x7ffe67f8feb4,335735217,0,0x0,8
tick,0x7ffe67f8feb4,335750046,0,0x0,8
tick,0x7ffe67f8feb4,335765578,0,0x0,8
tick,0x7ffe67f8feb4,335780944,0,0x0,8
tick,0x7ffe67f8feb4,335796969,0,0x0,8
tick,0x7ffe67f8feb4,335811913,0,0x0,8
tick,0x7ffe67f8feb4,335827964,0,0x0,8
tick,0x7ffe67f8feb4,335844203,0,0x0,8
tick,0x7ffe67f8feb4,335860110,0,0x0,8
tick,0x7ffe67f8feb4,335875625,0,0x0,8
tick,0x7ffe67f8feb4,335890672,0,0x0,8
tick,0x7ffe67f8feb4,335906015,0,0x0,8
tick,0x7ffe67f8feb4,335923074,0,0x0,8
tick,0x7ffe67f8feb4,335937633,0,0x0,8
tick,0x7ffe67f8feb4,335953297,0,0x0,8
tick,0x7ffe67f8feb4,335968710,0,0x0,8
tick,0x7ffe67f8feb4,335984817,0,0x0,8
tick,0x7ffe67f8feb4,336000686,0,0x0,8
tick,0x7ffe67f8feb4,336016693,0,0x0,8
tick,0x7ffe67f8feb4,336032671,0,0x0,8
tick,0x7ffe67f8feb4,336048701,0,0x0,8
tick,0x7ffe67f8feb4,336064643,0,0x0,8
tick,0x7ffe67f8feb4,336080888,0,0x0,8
tick,0x7ffe67f8feb4,336096621,0,0x0,8
tick,0x7ffe67f8feb4,336112635,0,0x0,8
tick,0x7ffe67f8feb4,336128773,0,0x0,8
tick,0x7ffe67f8feb4,336144630,0,0x0,8
tick,0x7ffe67f8feb4,336160622,0,0x0,8
tick,0x7ffe67f8feb4,336176643,0,0x0,8
tick,0x7ffe67f8feb4,336192663,0,0x0,8
tick,0x7ffe67f8feb4,336208009,0,0x0,8
tick,0x7ffe67f8feb4,336223671,0,0x0,8
tick,0x7ffe67f8feb4,336239042,0,0x0,8
tick,0x7ffe67f8feb4,336254699,0,0x0,8
tick,0x7ffe67f8feb4,336270718,0,0x0,8
tick,0x7ffe67f8feb4,336286418,0,0x0,8
tick,0x7ffe67f8feb4,336301684,0,0x0,8
tick,0x7ffe67f8feb4,336317688,0,0x0,8
tick,0x7ffe67f8feb4,336333430,0,0x0,8
tick,0x7ffe67f8feb4,336348673,0,0x0,8
tick,0x7ffe67f8feb4,336364834,0,0x0,8
tick,0x7ffe67f8feb4,336380682,0,0x0,8
tick,0x7ffe67f8feb4,336395677,0,0x0,8
tick,0x7ffe67f8feb4,336410695,0,0x0,8
tick,0x7ffe67f8feb4,336426647,0,0x0,8
tick,0x7ffe67f8feb4,336441705,0,0x0,8
tick,0x7ffe67f8feb4,336457682,0,0x0,8
tick,0x7ffe67f8feb4,336473688,0,0x0,8
tick,0x7ffe67f8feb4,336489731,0,0x0,8
tick,0x7ffe67f8feb4,336505707,0,0x0,8
tick,0x7ffe67f8feb4,336521704,0,0x0,8
tick,0x7ffe67f8feb4,336536705,0,0x0,8
tick,0x7ffe67f8feb4,336552714,0,0x0,8
tick,0x7ffe67f8feb4,336568920,0,0x0,8
tick,0x7ffe67f8feb4,336584743,0,0x0,8
tick,0x7ffe67f8feb4,336600785,0,0x0,8
tick,0x7ffe67f8feb4,336616625,0,0x0,8
tick,0x7ffe67f8feb4,336632067,0,0x0,8
tick,0x7ffe67f8feb4,336647791,0,0x0,8
tick,0x7ffe67f8feb4,336663644,0,0x0,8
tick,0x7ffe67f8feb4,336678662,0,0x0,8
tick,0x7ffe67f8feb4,336693931,0,0x0,8
tick,0x7ffe67f8feb4,336709872,0,0x0,8
tick,0x7ffe67f8feb4,336725877,0,0x0,8
tick,0x7ffe67f8feb4,336741884,0,0x0,8
tick,0x7ffe67f8feb4,336757907,0,0x0,8
tick,0x7ffe67f8feb4,336773951,0,0x0,8
tick,0x7ffe67f8feb4,336790048,0,0x0,8
tick,0x7ffe67f8feb4,336805833,0,0x0,8
tick,0x7ffe67f8feb4,336821069,0,0x0,8
tick,0x7ffe67f8feb4,336837006,0,0x0,8
tick,0x7ffe67f8feb4,336852464,0,0x0,8
tick,0x7ffe67f8feb4,336868307,0,0x0,8
tick,0x7ffe67f8feb4,336883566,0,0x0,8
tick,0x7ffe67f8feb4,336899587,0,0x0,8
tick,0x7ffe67f8feb4,336915526,0,0x0,8
tick,0x7ffe67f8feb4,336930782,0,0x0,8
tick,0x7ffe67f8feb4,336946317,0,0x0,8
tick,0x7ffe67f8feb4,336961967,0,0x0,8
tick,0x7ffe67f8feb4,336977840,0,0x0,8
tick,0x7ffe67f8feb4,336993361,0,0x0,8
tick,0x7ffe67f8feb4,337008981,0,0x0,8
tick,0x7ffe67f8feb4,337024763,0,0x0,8
tick,0x7ffe67f8feb4,337040710,0,0x0,8
tick,0x7ffe67f8feb4,337055865,0,0x0,8
tick,0x7ffe67f8feb4,337072283,0,0x0,8
tick,0x7ffe67f8feb4,337087090,0,0x0,8
tick,0x7ffe67f8feb4,337102464,0,0x0,8
tick,0x7ffe67f8feb4,337117540,0,0x0,8
tick,0x7ffe67f8feb4,337132716,0,0x0,8
tick,0x7ffe67f8feb4,337148536,0,0x0,8
tick,0x7ffe67f8feb4,337164254,0,0x0,8
tick,0x7ffe67f8feb4,337179679,0,0x0,8
tick,0x7ffe67f8feb4,337195041,0,0x0,8
tick,0x7ffe67f8feb4,337210588,0,0x0,8
tick,0x7ffe67f8feb4,337225804,0,0x0,8
tick,0x7ffe67f8feb4,337241319,0,0x0,8
tick,0x7ffe67f8feb4,337256948,0,0x0,8
tick,0x7ffe67f8feb4,337272339,0,0x0,8
tick,0x7ffe67f8feb4,337287451,0,0x0,8
tick,0x7ffe67f8feb4,337303053,0,0x0,8
tick,0x7ffe67f8feb4,337318953,0,0x0,8
tick,0x7ffe67f8feb4,337334097,0,0x0,8
tick,0x7ffe67f8feb4,337349963,0,0x0,8
tick,0x7ffe67f8feb4,337365619,0,0x0,8
tick,0x7ffe67f8feb4,337381331,0,0x0,8
tick,0x7ffe67f8feb4,337397502,0,0x0,8
tick,0x7ffe67f8feb4,337412846,0,0x0,8
tick,0x7ffe67f8feb4,337428180,0,0x0,8
tick,0x7ffe67f8feb4,337443930,0,0x0,8
tick,0x7ffe67f8feb4,337459092,0,0x0,8
tick,0x7ffe67f8feb4,337474477,0,0x0,8
tick,0x7ffe67f8feb4,337490510,0,0x0,8
tick,0x7ffe67f8feb4,337506440,0,0x0,8
tick,0x7ffe67f8feb4,337522344,0,0x0,8
tick,0x7ffe67f8feb4,337538303,0,0x0,8
tick,0x7ffe67f8feb4,337554301,0,0x0,8
tick,0x7ffe67f8feb4,337570288,0,0x0,8
tick,0x7ffe67f8feb4,337586293,0,0x0,8
tick,0x7ffe67f8feb4,337601769,0,0x0,8
tick,0x7ffe67f8feb4,337617419,0,0x0,8
tick,0x7ffe67f8feb4,337633450,0,0x0,8
tick,0x7ffe67f8feb4,337648752,0,0x0,8
tick,0x7ffe67f8feb4,337664150,0,0x0,8
tick,0x7ffe67f8feb4,337680138,0,0x0,8
tick,0x7ffe67f8feb4,337696102,0,0x0,8
tick,0x7ffe67f8feb4,337711285,0,0x0,8
tick,0x7ffe67f8feb4,337727708,0,0x0,8
tick,0x7ffe67f8feb4,337742950,0,0x0,8
tick,0x7ffe67f8feb4,337758248,0,0x0,8
tick,0x7ffe67f8feb4,337775537,0,0x0,8
tick,0x7ffe67f8feb4,337790336,0,0x0,8
tick,0x7ffe67f8feb4,337806388,0,0x0,8
tick,0x7ffe67f8feb4,337822010,0,0x0,8
tick,0x7ffe67f8feb4,337837939,0,0x0,8
tick,0x7ffe67f8feb4,337853240,0,0x0,8
tick,0x7ffe67f8feb4,337869052,0,0x0,8
tick,0x7ffe67f8feb4,337885036,0,0x0,8
tick,0x7ffe67f8feb4,337900481,0,0x0,8
tick,0x7ffe67f8feb4,337916488,0,0x0,8
tick,0x7ffe67f8feb4,337932528,0,0x0,8
tick,0x7ffe67f8feb4,337948419,0,0x0,8
tick,0x7ffe67f8feb4,337964024,0,0x0,8
tick,0x7ffe67f8feb4,337979622,0,0x0,8
tick,0x7ffe67f8feb4,337995078,0,0x0,8
tick,0x7ffe67f8feb4,338010708,0,0x0,8
tick,0x7ffe67f8feb4,338026978,0,0x0,8
tick,0x7ffe67f8feb4,338042231,0,0x0,8
tick,0x7ffe67f8feb4,338057618,0,0x0,8
tick,0x7ffe67f8feb4,338073658,0,0x0,8
tick,0x7ffe67f8feb4,338089342,0,0x0,8
tick,0x7ffe67f8feb4,338104914,0,0x0,8
tick,0x7ffe67f8feb4,338120355,0,0x0,8
tick,0x7ffe67f8feb4,338136386,0,0x0,8
tick,0x7ffe67f8feb4,338152632,0,0x0,8
tick,0x7ffe67f8feb4,338168012,0,0x0,8
tick,0x7ffe67f8feb4,338184015,0,0x0,8
tick,0x7ffe67f8feb4,338199315,0,0x0,8
tick,0x7ffe67f8feb4,338215506,0,0x0,8
tick,0x7ffe67f8feb4,338231456,0,0x0,8
tick,0x7ffe67f8feb4,338247466,0,0x0,8
tick,0x7ffe67f8feb4,338262997,0,0x0,8
tick,0x7ffe67f8feb4,338278850,0,0x0,8
tick,0x7ffe67f8feb4,338294146,0,0x0,8
tick,0x7ffe67f8feb4,338309958,0,0x0,8
tick,0x7ffe67f8feb4,338325408,0,0x0,8
tick,0x7ffe67f8feb4,338340476,0,0x0,8
tick,0x7ffe67f8feb4,338356421,0,0x0,8
tick,0x7ffe67f8feb4,338371984,0,0x0,8
tick,0x7ffe67f8feb4,338387310,0,0x0,8
tick,0x7ffe67f8feb4,338403119,0,0x0,8
tick,0x7ffe67f8feb4,338418917,0,0x0,8
tick,0x7ffe67f8feb4,338434913,0,0x0,8
tick,0x7ffe67f8feb4,338450940,0,0x0,8
tick,0x7ffe67f8feb4,338466486,0,0x0,8
tick,0x7ffe67f8feb4,338482022,0,0x0,8
tick,0x7ffe67f8feb4,338497670,0,0x0,8
tick,0x7ffe67f8feb4,338513630,0,0x0,8
tick,0x7ffe67f8feb4,338529654,0,0x0,8
tick,0x7ffe67f8feb4,338545635,0,0x0,8
tick,0x7ffe67f8feb4,338561664,0,0x0,8
tick,0x7ffe67f8feb4,338577654,0,0x0,8
tick,0x7ffe67f8feb4,338593638,0,0x0,8
tick,0x7ffe67f8feb4,338609648,0,0x0,8
tick,0x7ffe67f8feb4,338625666,0,0x0,8
tick,0x7ffe67f8feb4,338641657,0,0x0,8
tick,0x7ffe67f8feb4,338657654,0,0x0,8
tick,0x7ffe67f8feb4,338673650,0,0x0,8
tick,0x7ffe67f8feb4,338689683,0,0x0,8
tick,0x7ffe67f8feb4,338704831,0,0x0,8
tick,0x7ffe67f8feb4,338720820,0,0x0,8
tick,0x7ffe67f8feb4,338736823,0,0x0,8
tick,0x7ffe67f8feb4,338752846,0,0x0,8
tick,0x7ffe67f8feb4,338768517,0,0x0,8
tick,0x7ffe67f8feb4,338784201,0,0x0,8
tick,0x7ffe67f8feb4,338799563,0,0x0,8
tick,0x7ffe67f8feb4,338815592,0,0x0,8
tick,0x7ffe67f8feb4,338831238,0,0x0,8
tick,0x7ffe67f8feb4,338846931,0,0x0,8
tick,0x7ffe67f8feb4,338862919,0,0x0,8
tick,0x7ffe67f8feb4,338878900,0,0x0,8
tick,0x7ffe67f8feb4,338894910,0,0x0,8
tick,0x7ffe67f8feb4,338910983,0,0x0,8
tick,0x7ffe67f8feb4,338926924,0,0x0,8
tick,0x7ffe67f8feb4,338942066,0,0x0,8
tick,0x7ffe67f8feb4,338957266,0,0x0,8
tick,0x7ffe67f8feb4,338973151,0,0x0,8
tick,0x7ffe67f8feb4,338988338,0,0x0,8
tick,0x7ffe67f8feb4,339003555,0,0x0,8
tick,0x7ffe67f8feb4,339019026,0,0x0,8
tick,0x7ffe67f8feb4,339035168,0,0x0,8
tick,0x7ffe67f8feb4,339050668,0,0x0,8
tick,0x7ffe67f8feb4,339067181,0,0x0,8
tick,0x7ffe67f8feb4,339083099,0,0x0,8
tick,0x7ffe67f8feb4,339098754,0,0x0,8
tick,0x7ffe67f8feb4,339114616,0,0x0,8
tick,0x7ffe67f8feb4,339130686,0,0x0,8
tick,0x7ffe67f8feb4,339146647,0,0x0,8
tick,0x7ffe67f8feb4,339162269,0,0x0,8
tick,0x7ffe67f8feb4,339178260,0,0x0,8
tick,0x7ffe67f8feb4,339194638,0,0x0,8
tick,0x7ffe67f8feb4,339209945,0,0x0,8
tick,0x7ffe67f8feb4,339225769,0,0x0,8
tick,0x7ffe67f8feb4,339241329,0,0x0,8
tick,0x7ffe67f8feb4,339256911,0,0x0,8
tick,0x7ffe67f8feb4,339272453,0,0x0,8
tick,0x7ffe67f8feb4,339287557,0,0x0,8
tick,0x7ffe67f8feb4,339303074,0,0x0,8
tick,0x7ffe67f8feb4,339318692,0,0x0,8
tick,0x7ffe67f8feb4,339333753,0,0x0,8
tick,0x7ffe67f8feb4,339349204,0,0x0,8
tick,0x7ffe67f8feb4,339364468,0,0x0,8
tick,0x7ffe67f8feb4,339380287,0,0x0,8
tick,0x7ffe67f8feb4,339395123,0,0x0,8
tick,0x7ffe67f8feb4,339411147,0,0x0,8
tick,0x7ffe67f8feb4,339427143,0,0x0,8
tick,0x7ffe67f8feb4,339443135,0,0x0,8
tick,0x7ffe67f8feb4,339459146,0,0x0,8
tick,0x7ffe67f8feb4,339475235,0,0x0,8
tick,0x7ffe67f8feb4,339491143,0,0x0,8
tick,0x7ffe67f8feb4,339506134,0,0x0,8
tick,0x7ffe67f8feb4,339522149,0,0x0,8
tick,0x7ffe67f8feb4,339538154,0,0x0,8
tick,0x7ffe67f8feb4,339554159,0,0x0,8
tick,0x7ffe67f8feb4,339569976,0,0x0,8
tick,0x7ffe67f8feb4,339585148,0,0x0,8
tick,0x7ffe67f8feb4,339601153,0,0x0,8
tick,0x7ffe67f8feb4,339617377,0,0x0,8
tick,0x7ffe67f8feb4,339633158,0,0x0,8
tick,0x7ffe67f8feb4,339649167,0,0x0,8
tick,0x7ffe67f8feb4,339665171,0,0x0,8
tick,0x7ffe67f8feb4,339681181,0,0x0,8
tick,0x7ffe67f8feb4,339697226,0,0x0,8
tick,0x7ffe67f8feb4,339713191,0,0x0,8
tick,0x7ffe67f8feb4,339729185,0,0x0,8
tick,0x7ffe67f8feb4,339745205,0,0x0,8
tick,0x7ffe67f8feb4,339761191,0,0x0,8
tick,0x7ffe67f8feb4,339777206,0,0x0,8
tick,0x7ffe67f8feb4,339793189,0,0x0,8
tick,0x7ffe67f8feb4,339809239,0,0x0,8
tick,0x7ffe67f8feb4,339825189,0,0x0,8
tick,0x7ffe67f8feb4,339841217,0,0x0,8
tick,0x7ffe67f8feb4,339856567,0,0x0,8
tick,0x7ffe67f8feb4,339871700,0,0x0,8
tick,0x7ffe67f8feb4,339887568,0,0x0,8
tick,0x7ffe67f8feb4,339903643,0,0x0,8
tick,0x7ffe67f8feb4,339919620,0,0x0,8
tick,0x7ffe67f8feb4,339935604,0,0x0,8
tick,0x7ffe67f8feb4,339951538,0,0x0,8
tick,0x7ffe67f8feb4,339966523,0,0x0,8
tick,0x7ffe67f8feb4,339981901,0,0x0,8
tick,0x7ffe67f8feb4,339997876,0,0x0,8
tick,0x7ffe67f8feb4,340013098,0,0x0,8
tick,0x7ffe67f8feb4,340029166,0,0x0,8
tick,0x7ffe67f8feb4,340044537,0,0x0,8
tick,0x7ffe67f8feb4,340060207,0,0x0,8
tick,0x7ffe67f8feb4,340076230,0,0x0,8
tick,0x7ffe67f8feb4,340092289,0,0x0,8
tick,0x7ffe67f8feb4,340108252,0,0x0,8
tick,0x7ffe67f8feb4,340125567,0,0x0,8
tick,0x7ffe67f8feb4,340140251,0,0x0,8
tick,0x7ffe67f8feb4,340156101,0,0x0,8
tick,0x7ffe67f8feb4,340172097,0,0x0,8
tick,0x7ffe67f8feb4,340188141,0,0x0,8
tick,0x7ffe67f8feb4,340204142,0,0x0,8
tick,0x7ffe67f8feb4,340220246,0,0x0,8
tick,0x7ffe67f8feb4,340236542,0,0x0,8
tick,0x7ffe67f8feb4,340252297,0,0x0,8
tick,0x7ffe67f8feb4,340267469,0,0x0,8
tick,0x7ffe67f8feb4,340283269,0,0x0,8
tick,0x7ffe67f8feb4,340299287,0,0x0,8
tick,0x7ffe67f8feb4,340314877,0,0x0,8
tick,0x7ffe67f8feb4,340330311,0,0x0,8
tick,0x7ffe67f8feb4,340346313,0,0x0,8
tick,0x7ffe67f8feb4,340361843,0,0x0,8
tick,0x7ffe67f8feb4,340377437,0,0x0,8
tick,0x7ffe67f8feb4,340392507,0,0x0,8
tick,0x7ffe67f8feb4,340408358,0,0x0,8
tick,0x7ffe67f8feb4,340423995,0,0x0,8
tick,0x7ffe67f8feb4,340439592,0,0x0,8
tick,0x7ffe67f8feb4,340455345,0,0x0,8
tick,0x7ffe67f8feb4,340471375,0,0x0,8
tick,0x7ffe67f8feb4,340487405,0,0x0,8
tick,0x7ffe67f8feb4,340503384,0,0x0,8
tick,0x7ffe67f8feb4,340519442,0,0x0,8
tick,0x7ffe67f8feb4,340535479,0,0x0,8
tick,0x7ffe67f8feb4,340551308,0,0x0,8
tick,0x7ffe67f8feb4,340567295,0,0x0,8
tick,0x7ffe67f8feb4,340583325,0,0x0,8
tick,0x7ffe67f8feb4,340599357,0,0x0,8
tick,0x7ffe67f8feb4,340615315,0,0x0,8
tick,0x7ffe67f8feb4,340630272,0,0x0,8
tick,0x7ffe67f8feb4,340646220,0,0x0,8
tick,0x7ffe67f8feb4,340662231,0,0x0,8
tick,0x7ffe67f8feb4,340678235,0,0x0,8
tick,0x7ffe67f8feb4,340694297,0,0x0,8
tick,0x7ffe67f8feb4,340709463,0,0x0,8
tick,0x7ffe67f8feb4,340725305,0,0x0,8
tick,0x7ffe67f8feb4,340741297,0,0x0,8
tick,0x7ffe67f8feb4,340757319,0,0x0,8
tick,0x7ffe67f8feb4,340773328,0,0x0,8
tick,0x7ffe67f8feb4,340789310,0,0x0,8
tick,0x7ffe67f8feb4,340805326,0,0x0,8
tick,0x7ffe67f8feb4,340821409,0,0x0,8
tick,0x7ffe67f8feb4,340837378,0,0x0,8
tick,0x7ffe67f8feb4,340854386,0,0x0,8
tick,0x7ffe67f8feb4,340869541,0,0x0,8
tick,0x7ffe67f8feb4,340885992,0,0x0,8
tick,0x7ffe67f8feb4,340900367,0,0x0,8
tick,0x7ffe67f8feb4,340916365,0,0x0,8
tick,0x7ffe67f8feb4,340932364,0,0x0,8
tick,0x7ffe67f8feb4,340948366,0,0x0,8
tick,0x7ffe67f8feb4,340964370,0,0x0,8
tick,0x7ffe67f8feb4,340980371,0,0x0,8
tick,0x7ffe67f8feb4,340996397,0,0x0,8
tick,0x7ffe67f8feb4,341012396,0,0x0,8
tick,0x7ffe67f8feb4,341028332,0,0x0,8
tick,0x7ffe67f8feb4,341043970,0,0x0,8
tick,0x7ffe67f8feb4,341059344,0,0x0,8
tick,0x7ffe67f8feb4,341074900,0,0x0,8
tick,0x7ffe67f8feb4,341090390,0,0x0,8
tick,0x7ffe67f8feb4,341106407,0,0x0,8
tick,0x7ffe67f8feb4,341122222,0,0x0,8
tick,0x7ffe67f8feb4,341138302,0,0x0,8
tick,0x7ffe67f8feb4,341154224,0,0x0,8
tick,0x7ffe67f8feb4,341169298,0,0x0,8
tick,0x7ffe67f8feb4,341184428,0,0x0,8
tick,0x7ffe67f8feb4,341200400,0,0x0,8
tick,0x7ffe67f8feb4,341216363,0,0x0,8
tick,0x7ffe67f8feb4,341231621,0,0x0,8
tick,0x7ffe67f8feb4,341247485,0,0x0,8
tick,0x7ffe67f8feb4,341263486,0,0x0,8
tick,0x7ffe67f8feb4,341279477,0,0x0,8
tick,0x7ffe67f8feb4,341294760,0,0x0,8
tick,0x7ffe67f8feb4,341310460,0,0x0,8
tick,0x7ffe67f8feb4,341326531,0,0x0,8
tick,0x7ffe67f8feb4,341342101,0,0x0,8
tick,0x7ffe67f8feb4,341357271,0,0x0,8
tick,0x7ffe67f8feb4,341373002,0,0x0,8
tick,0x7ffe67f8feb4,341388878,0,0x0,8
tick,0x7ffe67f8feb4,341404951,0,0x0,8
tick,0x7ffe67f8feb4,341420285,0,0x0,8
tick,0x7ffe67f8feb4,341436006,0,0x0,8
tick,0x7ffe67f8feb4,341451732,0,0x0,8
tick,0x7ffe67f8feb4,341467097,0,0x0,8
tick,0x7ffe67f8feb4,341482813,0,0x0,8
tick,0x7ffe67f8feb4,341497983,0,0x0,8
tick,0x7ffe67f8feb4,341513605,0,0x0,8
tick,0x7ffe67f8feb4,341529509,0,0x0,8
tick,0x7ffe67f8feb4,341545474,0,0x0,8
tick,0x7ffe67f8feb4,341561468,0,0x0,8
tick,0x7ffe67f8feb4,341577468,0,0x0,8
tick,0x7ffe67f8feb4,341593467,0,0x0,8
tick,0x7ffe67f8feb4,341609481,0,0x0,8
tick,0x7ffe67f8feb4,341625481,0,0x0,8
tick,0x7ffe67f8feb4,341641502,0,0x0,8
tick,0x7ffe67f8feb4,341657470,0,0x0,8
tick,0x7ffe67f8feb4,341673385,0,0x0,8
tick,0x7ffe67f8feb4,341688415,0,0x0,8
tick,0x7ffe67f8feb4,341704384,0,0x0,8
tick,0x7ffe67f8feb4,341720402,0,0x0,8
tick,0x7ffe67f8feb4,341735513,0,0x0,8
tick,0x7ffe67f8feb4,341750656,0,0x0,8
tick,0x7ffe67f8feb4,341765803,0,0x0,8
tick,0x7ffe67f8feb4,341781506,0,0x0,8
tick,0x7ffe67f8feb4,341797511,0,0x0,8
tick,0x7ffe67f8feb4,341812791,0,0x0,8
tick,0x7ffe67f8feb4,341828507,0,0x0,8
tick,0x7ffe67f8feb4,341844023,0,0x0,8
tick,0x7ffe67f8feb4,341859500,0,0x0,8
tick,0x7ffe67f8feb4,341875505,0,0x0,8
tick,0x7ffe67f8feb4,341891106,0,0x0,8
tick,0x7ffe67f8feb4,341906524,0,0x0,8
tick,0x7ffe67f8feb4,341921696,0,0x0,8
tick,0x7ffe67f8feb4,341937518,0,0x0,8
tick,0x7ffe67f8feb4,341953549,0,0x0,8
tick,0x7ffe67f8feb4,341969653,0,0x0,8
tick,0x7ffe67f8feb4,341985515,0,0x0,8
tick,0x7ffe67f8feb4,342001521,0,0x0,8
tick,0x7ffe67f8feb4,342017445,0,0x0,8
tick,0x7ffe67f8feb4,342032488,0,0x0,8
tick,0x7ffe67f8feb4,342048555,0,0x0,8
tick,0x7ffe67f8feb4,342064117,0,0x0,8
tick,0x7ffe67f8feb4,342079036,0,0x0,8
tick,0x7ffe67f8feb4,342094438,0,0x0,8
tick,0x7ffe67f8feb4,342109469,0,0x0,8
tick,0x7ffe67f8feb4,342125339,0,0x0,8
tick,0x7ffe67f8feb4,342140699,0,0x0,8
tick,0x7ffe67f8feb4,342155937,0,0x0,8
tick,0x7ffe67f8feb4,342171276,0,0x0,8
tick,0x7ffe67f8feb4,342186731,0,0x0,8
tick,0x7ffe67f8feb4,342202155,0,0x0,8
tick,0x7ffe67f8feb4,342217789,0,0x0,8
tick,0x7ffe67f8feb4,342232945,0,0x0,8
tick,0x7ffe67f8feb4,342248140,0,0x0,8
tick,0x7ffe67f8feb4,342263683,0,0x0,8
tick,0x7ffe67f8feb4,342279687,0,0x0,8
tick,0x7ffe67f8feb4,342296111,0,0x0,8
tick,0x7ffe67f8feb4,342311814,0,0x0,8
tick,0x7ffe67f8feb4,342327389,0,0x0,8
tick,0x7ffe67f8feb4,342342812,0,0x0,8
tick,0x7ffe67f8feb4,342358873,0,0x0,8
tick,0x7ffe67f8feb4,342374604,0,0x0,8
tick,0x7ffe67f8feb4,342389937,0,0x0,8
tick,0x7ffe67f8feb4,342406148,0,0x0,8
tick,0x7ffe67f8feb4,342421945,0,0x0,8
tick,0x7ffe67f8feb4,342437983,0,0x0,8
tick,0x7ffe67f8feb4,342453111,0,0x0,8
tick,0x7ffe67f8feb4,342468328,0,0x0,8
tick,0x7ffe67f8feb4,342483488,0,0x0,8
tick,0x7ffe67f8feb4,342499230,0,0x0,8
tick,0x7ffe67f8feb4,342514464,0,0x0,8
tick,0x7ffe67f8feb4,342529344,0,0x0,8
tick,0x7ffe67f8feb4,342544793,0,0x0,8
tick,0x7ffe67f8feb4,342559759,0,0x0,8
tick,0x7ffe67f8feb4,342575766,0,0x0,8
tick,0x7ffe67f8feb4,342591805,0,0x0,8
tick,0x7ffe67f8feb4,342607935,0,0x0,8
tick,0x7ffe67f8feb4,342623580,0,0x0,8
tick,0x7ffe67f8feb4,342638886,0,0x0,8
tick,0x7ffe67f8feb4,342654924,0,0x0,8
tick,0x7ffe67f8feb4,342670909,0,0x0,8
tick,0x7ffe67f8feb4,342686418,0,0x0,8
tick,0x7ffe67f8feb4,342702687,0,0x0,8
tick,0x7ffe67f8feb4,342718108,0,0x0,8
tick,0x7ffe67f8feb4,342733572,0,0x0,8
tick,0x7ffe67f8feb4,342751077,0,0x0,8
tick,0x7ffe67f8feb4,342767749,0,0x0,8
tick,0x7ffe67f8feb4,342780794,0,0x0,8
tick,0x7ffe67f8feb4,342796517,0,0x0,8
tick,0x7ffe67f8feb4,342812255,0,0x0,8
tick,0x7ffe67f8feb4,342827537,0,0x0,8
tick,0x7ffe67f8feb4,342843525,0,0x0,8
tick,0x7ffe67f8feb4,342858632,0,0x0,8
tick,0x7ffe67f8feb4,342874737,0,0x0,8
tick,0x7ffe67f8feb4,342890725,0,0x0,8
tick,0x7ffe67f8feb4,342906746,0,0x0,8
tick,0x7ffe67f8feb4,342922695,0,0x0,8
tick,0x7ffe67f8feb4,342938722,0,0x0,8
tick,0x7ffe67f8feb4,342954829,0,0x0,8
tick,0x7ffe67f8feb4,342971009,0,0x0,8
tick,0x7ffe67f8feb4,342986457,0,0x0,8
tick,0x7ffe67f8feb4,343002451,0,0x0,8
tick,0x7ffe67f8feb4,343018500,0,0x0,8
tick,0x7ffe67f8feb4,343033682,0,0x0,8
tick,0x7ffe67f8feb4,343049675,0,0x0,8
tick,0x7ffe67f8feb4,343065680,0,0x0,8
tick,0x7ffe67f8feb4,343081706,0,0x0,8
tick,0x7ffe67f8feb4,343097700,0,0x0,8
tick,0x7ffe67f8feb4,343113707,0,0x0,8
tick,0x7ffe67f8feb4,343129734,0,0x0,8
tick,0x7ffe67f8feb4,343145695,0,0x0,8
tick,0x7ffe67f8feb4,343161711,0,0x0,8
tick,0x7ffe67f8feb4,343177705,0,0x0,8
tick,0x7ffe67f8feb4,343193703,0,0x0,8
tick,0x7ffe67f8feb4,343209715,0,0x0,8
tick,0x7ffe67f8feb4,343225724,0,0x0,8
tick,0x7ffe67f8feb4,343241464,0,0x0,8
tick,0x7ffe67f8feb4,343256735,0,0x0,8
tick,0x7ffe67f8feb4,343272705,0,0x0,8
tick,0x7ffe67f8feb4,343288765,0,0x0,8
tick,0x7ffe67f8feb4,343303780,0,0x0,8
tick,0x7ffe67f8feb4,343319606,0,0x0,8
tick,0x7ffe67f8feb4,343334879,0,0x0,8
tick,0x7ffe67f8feb4,343349799,0,0x0,8
tick,0x7ffe67f8feb4,343365596,0,0x0,8
tick,0x7ffe67f8feb4,343381741,0,0x0,8
tick,0x7ffe67f8feb4,343397457,0,0x0,8
tick,0x7ffe67f8feb4,343412770,0,0x0,8
tick,0x7ffe67f8feb4,343427954,0,0x0,8
tick,0x7ffe67f8feb4,343443781,0,0x0,8
tick,0x7ffe67f8feb4,343459759,0,0x0,8
tick,0x7ffe67f8feb4,343475326,0,0x0,8
tick,0x7ffe67f8feb4,343491083,0,0x0,8
tick,0x7ffe67f8feb4,343506766,0,0x0,8
tick,0x7ffe67f8feb4,343522379,0,0x0,8
tick,0x7ffe67f8feb4,343537155,0,0x0,8
tick,0x7ffe67f8feb4,343552644,0,0x0,8
tick,0x7ffe67f8feb4,343568641,0,0x0,8
tick,0x7ffe67f8feb4,343584632,0,0x0,8
tick,0x7ffe67f8feb4,343600661,0,0x0,8
tick,0x7ffe67f8feb4,343616631,0,0x0,8
tick,0x7ffe67f8feb4,343631834,0,0x0,8
tick,0x7ffe67f8feb4,343647761,0,0x0,8
tick,0x7ffe67f8feb4,343663815,0,0x0,8
tick,0x7ffe67f8feb4,343679816,0,0x0,8
tick,0x7ffe67f8feb4,343695379,0,0x0,8
tick,0x7ffe67f8feb4,343711111,0,0x0,8
tick,0x7ffe67f8feb4,343726864,0,0x0,8
tick,0x7ffe67f8feb4,343742429,0,0x0,8
tick,0x7ffe67f8feb4,343758104,0,0x0,8
tick,0x7ffe67f8feb4,343773335,0,0x0,8
tick,0x7ffe67f8feb4,343788538,0,0x0,8
tick,0x7ffe67f8feb4,343804414,0,0x0,8
tick,0x7ffe67f8feb4,343819566,0,0x0,8
tick,0x7ffe67f8feb4,343835549,0,0x0,8
tick,0x7ffe67f8feb4,343851599,0,0x0,8
tick,0x7ffe67f8feb4,343867662,0,0x0,8
tick,0x7ffe67f8feb4,343883871,0,0x0,8
tick,0x7ffe67f8feb4,343898824,0,0x0,8
tick,0x7ffe67f8feb4,343914016,0,0x0,8
tick,0x7ffe67f8feb4,343929180,0,0x0,8
tick,0x7ffe67f8feb4,343945343,0,0x0,8
tick,0x7ffe67f8feb4,343961466,0,0x0,8
tick,0x7ffe67f8feb4,343977216,0,0x0,8
tick,0x7ffe67f8feb4,343992794,0,0x0,8
tick,0x7ffe67f8feb4,344008252,0,0x0,8
tick,0x7ffe67f8feb4,344023184,0,0x0,8
tick,0x7ffe67f8feb4,344038990,0,0x0,8
tick,0x7ffe67f8feb4,344055550,0,0x0,8
tick,0x7ffe67f8feb4,344071274,0,0x0,8
tick,0x7ffe67f8feb4,344087135,0,0x0,8
tick,0x7ffe67f8feb4,344102940,0,0x0,8
tick,0x7ffe67f8feb4,344118272,0,0x0,8
tick,0x7ffe67f8feb4,344134500,0,0x0,8
tick,0x7ffe67f8feb4,344150347,0,0x0,8
tick,0x7ffe67f8feb4,344165969,0,0x0,8
tick,0x7ffe67f8feb4,344181353,0,0x0,8
tick,0x7ffe67f8feb4,344197373,0,0x0,8
tick,0x7ffe67f8feb4,344212767,0,0x0,8
tick,0x7ffe67f8feb4,344228021,0,0x0,8
tick,0x7ffe67f8feb4,344243952,0,0x0,8
tick,0x7ffe67f8feb4,344259632,0,0x0,8
tick,0x7ffe67f8feb4,344275655,0,0x0,8
tick,0x7ffe67f8feb4,344290839,0,0x0,8
tick,0x7ffe67f8feb4,344305919,0,0x0,8
tick,0x7ffe67f8feb4,344321510,0,0x0,8
tick,0x7ffe67f8feb4,344336736,0,0x0,8
tick,0x7ffe67f8feb4,344352458,0,0x0,8
tick,0x7ffe67f8feb4,344368482,0,0x0,8
tick,0x7ffe67f8feb4,344384489,0,0x0,8
tick,0x7ffe67f8feb4,344400483,0,0x0,8
tick,0x7ffe67f8feb4,344416025,0,0x0,8
tick,0x7ffe67f8feb4,344431912,0,0x0,8
tick,0x7ffe67f8feb4,344447009,0,0x0,8
tick,0x7ffe67f8feb4,344461793,0,0x0,8
tick,0x7ffe67f8feb4,344477238,0,0x0,8
tick,0x7ffe67f8feb4,344491919,0,0x0,8
tick,0x7ffe67f8feb4,344507978,0,0x0,8
tick,0x7ffe67f8feb4,344523417,0,0x0,8
tick,0x7ffe67f8feb4,344539203,0,0x0,8
tick,0x7ffe67f8feb4,344554273,0,0x0,8
tick,0x7ffe67f8feb4,344570197,0,0x0,8
tick,0x7ffe67f8feb4,344586167,0,0x0,8
tick,0x7ffe67f8feb4,344602167,0,0x0,8
tick,0x7ffe67f8feb4,344617191,0,0x0,8
tick,0x7ffe67f8feb4,344633214,0,0x0,8
tick,0x7ffe67f8feb4,344649292,0,0x0,8
tick,0x7ffe67f8feb4,344665293,0,0x0,8
tick,0x7ffe67f8feb4,344680427,0,0x0,8
tick,0x7ffe67f8feb4,344696588,0,0x0,8
tick,0x7ffe67f8feb4,344712149,0,0x0,8
tick,0x7ffe67f8feb4,344727670,0,0x0,8
tick,0x7ffe67f8feb4,344743228,0,0x0,8
tick,0x7ffe67f8feb4,344758250,0,0x0,8
tick,0x7ffe67f8feb4,344773708,0,0x0,8
tick,0x7ffe67f8feb4,344789082,0,0x0,8
tick,0x7ffe67f8feb4,344804285,0,0x0,8
tick,0x7ffe67f8feb4,344820232,0,0x0,8
tick,0x7ffe67f8feb4,344835606,0,0x0,8
tick,0x7ffe67f8feb4,344851555,0,0x0,8
tick,0x7ffe67f8feb4,344866723,0,0x0,8
tick,0x7ffe67f8feb4,344882180,0,0x0,8
tick,0x7ffe67f8feb4,344896999,0,0x0,8
tick,0x7ffe67f8feb4,344912491,0,0x0,8
tick,0x7ffe67f8feb4,344927723,0,0x0,8
tick,0x7ffe67f8feb4,344943481,0,0x0,8
tick,0x7ffe67f8feb4,344959617,0,0x0,8
tick,0x7ffe67f8feb4,344976031,0,0x0,8
tick,0x7ffe67f8feb4,344991957,0,0x0,8
tick,0x7ffe67f8feb4,345007235,0,0x0,8
tick,0x7ffe67f8feb4,345023145,0,0x0,8
tick,0x7ffe67f8feb4,345040096,0,0x0,8
tick,0x7ffe67f8feb4,345060462,0,0x0,8
tick,0x7ffe67f8feb4,345069795,0,0x0,8
tick,0x7ffe67f8feb4,345085004,0,0x0,8
tick,0x7ffe67f8feb4,345103752,0,0x0,8
tick,0x7ffe67f8feb4,345120571,0,0x0,8
tick,0x7ffe67f8feb4,345132094,0,0x0,8
tick,0x7ffe67f8feb4,345146837,0,0x0,8
tick,0x7ffe67f8feb4,345161825,0,0x0,8
tick,0x7ffe67f8feb4,345177810,0,0x0,8
tick,0x7ffe67f8feb4,345193804,0,0x0,8
tick,0x7ffe67f8feb4,345209332,0,0x0,8
tick,0x7ffe67f8feb4,345225009,0,0x0,8
tick,0x7ffe67f8feb4,345240677,0,0x0,8
tick,0x7ffe67f8feb4,345256126,0,0x0,8
tick,0x7ffe67f8feb4,345272050,0,0x0,8
tick,0x7ffe67f8feb4,345288070,0,0x0,8
tick,0x7ffe67f8feb4,345304075,0,0x0,8
tick,0x7ffe67f8feb4,345319097,0,0x0,8
tick,0x7ffe67f8feb4,345334345,0,0x0,8
tick,0x7ffe67f8feb4,345349778,0,0x0,8
tick,0x7ffe67f8feb4,345365737,0,0x0,8
tick,0x7ffe67f8feb4,345380931,0,0x0,8
tick,0x7ffe67f8feb4,345397235,0,0x0,8
tick,0x7ffe67f8feb4,345412407,0,0x0,8
tick,0x7ffe67f8feb4,345427932,0,0x0,8
tick,0x7ffe67f8feb4,345443935,0,0x0,8
tick,0x7ffe67f8feb4,345459610,0,0x0,8
tick,0x7ffe67f8feb4,345474928,0,0x0,8
tick,0x7ffe67f8feb4,345491026,0,0x0,8
tick,0x7ffe67f8feb4,345506951,0,0x0,8
tick,0x7ffe67f8feb4,345521838,0,0x0,8
tick,0x7ffe67f8feb4,345537833,0,0x0,8
tick,0x7ffe67f8feb4,345553522,0,0x0,8
tick,0x7ffe67f8feb4,345569254,0,0x0,8
tick,0x7ffe67f8feb4,345585238,0,0x0,8
tick,0x7ffe67f8feb4,345601257,0,0x0,8
tick,0x7ffe67f8feb4,345617254,0,0x0,8
tick,0x7ffe67f8feb4,345632246,0,0x0,8
tick,0x7ffe67f8feb4,345647786,0,0x0,8
tick,0x7ffe67f8feb4,345663785,0,0x0,8
tick,0x7ffe67f8feb4,345679843,0,0x0,8
tick,0x7ffe67f8feb4,345695416,0,0x0,8
tick,0x7ffe67f8feb4,345710892,0,0x0,8
tick,0x7ffe67f8feb4,345726865,0,0x0,8
tick,0x7ffe67f8feb4,345742851,0,0x0,8
tick,0x7ffe67f8feb4,345758685,0,0x0,8
tick,0x7ffe67f8feb4,345774121,0,0x0,8
tick,0x7ffe67f8feb4,345790119,0,0x0,8
tick,0x7ffe67f8feb4,345805424,0,0x0,8
tick,0x7ffe67f8feb4,345821031,0,0x0,8
tick,0x7ffe67f8feb4,345836766,0,0x0,8
tick,0x7ffe67f8feb4,345852372,0,0x0,8
tick,0x7ffe67f8feb4,345868385,0,0x0,8
tick,0x7ffe67f8feb4,345883795,0,0x0,8
tick,0x7ffe67f8feb4,345899235,0,0x0,8
tick,0x7ffe67f8feb4,345915253,0,0x0,8
tick,0x7ffe67f8feb4,345930802,0,0x0,8
tick,0x7ffe67f8feb4,345946463,0,0x0,8
tick,0x7ffe67f8feb4,345961701,0,0x0,8
tick,0x7ffe67f8feb4,345977805,0,0x0,8
tick,0x7ffe67f8feb4,345993335,0,0x0,8
tick,0x7ffe67f8feb4,346008260,0,0x0,8
tick,0x7ffe67f8feb4,346024148,0,0x0,8
tick,0x7ffe67f8feb4,346040100,0,0x0,8
tick,0x7ffe67f8feb4,346056146,0,0x0,8
tick,0x7ffe67f8feb4,346071516,0,0x0,8
tick,0x7ffe67f8feb4,346087201,0,0x0,8
tick,0x7ffe67f8feb4,346102762,0,0x0,8
tick,0x7ffe67f8feb4,346118314,0,0x0,8
tick,0x7ffe67f8feb4,346134164,0,0x0,8
tick,0x7ffe67f8feb4,346149700,0,0x0,8
tick,0x7ffe67f8feb4,346165631,0,0x0,8
tick,0x7ffe67f8feb4,346181934,0,0x0,8
tick,0x7ffe67f8feb4,346197165,0,0x0,8
tick,0x7ffe67f8feb4,346212690,0,0x0,8
tick,0x7ffe67f8feb4,346228467,0,0x0,8
tick,0x7ffe67f8feb4,346243478,0,0x0,8
tick,0x7ffe67f8feb4,346259438,0,0x0,8
tick,0x7ffe67f8feb4,346275160,0,0x0,8
tick,0x7ffe67f8feb4,346290739,0,0x0,8
tick,0x7ffe67f8feb4,346305386,0,0x0,8
tick,0x7ffe67f8feb4,346320409,0,0x0,8
tick,0x7ffe67f8feb4,346336423,0,0x0,8
tick,0x7ffe67f8feb4,346351963,0,0x0,8
tick,0x7ffe67f8feb4,346366863,0,0x0,8
tick,0x7ffe67f8feb4,346382575,0,0x0,8
tick,0x7ffe67f8feb4,346398199,0,0x0,8
tick,0x7ffe67f8feb4,346414463,0,0x0,8
tick,0x7ffe67f8feb4,346429979,0,0x0,8
tick,0x7ffe67f8feb4,346445230,0,0x0,8
tick,0x7ffe67f8feb4,346461005,0,0x0,8
tick,0x7ffe67f8feb4,346477362,0,0x0,8
tick,0x7ffe67f8feb4,346492869,0,0x0,8
tick,0x7ffe67f8feb4,346508349,0,0x0,8
tick,0x7ffe67f8feb4,346524433,0,0x0,8
tick,0x7ffe67f8feb4,346540635,0,0x0,8
tick,0x7ffe67f8feb4,346556357,0,0x0,8
tick,0x7ffe67f8feb4,346572252,0,0x0,8
tick,0x7ffe67f8feb4,346588305,0,0x0,8
tick,0x7ffe67f8feb4,346604006,0,0x0,8
tick,0x7ffe67f8feb4,346619990,0,0x0,8
tick,0x7ffe67f8feb4,346635980,0,0x0,8
tick,0x7ffe67f8feb4,346651989,0,0x0,8
tick,0x7ffe67f8feb4,346668020,0,0x0,8
tick,0x7ffe67f8feb4,346683006,0,0x0,8
tick,0x7ffe67f8feb4,346699035,0,0x0,8
tick,0x7ffe67f8feb4,346715040,0,0x0,8
tick,0x7ffe67f8feb4,346731029,0,0x0,8
tick,0x7ffe67f8feb4,346747015,0,0x0,8
tick,0x7ffe67f8feb4,346763007,0,0x0,8
tick,0x7ffe67f8feb4,346779033,0,0x0,8
tick,0x7ffe67f8feb4,346795026,0,0x0,8
tick,0x7ffe67f8feb4,346810693,0,0x0,8
tick,0x7ffe67f8feb4,346826003,0,0x0,8
tick,0x7ffe67f8feb4,346842015,0,0x0,8
tick,0x7ffe67f8feb4,346858031,0,0x0,8
tick,0x7ffe67f8feb4,346874063,0,0x0,8
tick,0x7ffe67f8feb4,346890049,0,0x0,8
tick,0x7ffe67f8feb4,346906062,0,0x0,8
tick,0x7ffe67f8feb4,346921215,0,0x0,8
tick,0x7ffe67f8feb4,346937100,0,0x0,8
tick,0x7ffe67f8feb4,346952429,0,0x0,8
tick,0x7ffe67f8feb4,346967609,0,0x0,8
tick,0x7ffe67f8feb4,346983021,0,0x0,8
tick,0x7ffe67f8feb4,346999124,0,0x0,8
tick,0x7ffe67f8feb4,347014369,0,0x0,8
tick,0x7ffe67f8feb4,347029946,0,0x0,8
tick,0x7ffe67f8feb4,347045937,0,0x0,8
tick,0x7ffe67f8feb4,347061050,0,0x0,8
tick,0x7ffe67f8feb4,347076922,0,0x0,8
tick,0x7ffe67f8feb4,347092517,0,0x0,8
tick,0x7ffe67f8feb4,347108042,0,0x0,8
tick,0x7ffe67f8feb4,347123948,0,0x0,8
tick,0x7ffe67f8feb4,347139287,0,0x0,8
tick,0x7ffe67f8feb4,347155595,0,0x0,8
tick,0x7ffe67f8feb4,347171009,0,0x0,8
tick,0x7ffe67f8feb4,347186730,0,0x0,8
tick,0x7ffe67f8feb4,347202576,0,0x0,8
tick,0x7ffe67f8feb4,347217710,0,0x0,8
tick,0x7ffe67f8feb4,347233342,0,0x0,8
tick,0x7ffe67f8feb4,347249303,0,0x0,8
tick,0x7ffe67f8feb4,347265407,0,0x0,8
tick,0x7ffe67f8feb4,347280936,0,0x0,8
tick,0x7ffe67f8feb4,347296687,0,0x0,8
tick,0x7ffe67f8feb4,347312464,0,0x0,8
tick,0x7ffe67f8feb4,347327685,0,0x0,8
tick,0x7ffe67f8feb4,347343820,0,0x0,8
tick,0x7ffe67f8feb4,347359682,0,0x0,8
tick,0x7ffe67f8feb4,347375111,0,0x0,8
tick,0x7ffe67f8feb4,347390845,0,0x0,8
tick,0x7ffe67f8feb4,347407136,0,0x0,8
tick,0x7ffe67f8feb4,347422928,0,0x0,8
tick,0x7ffe67f8feb4,347438252,0,0x0,8
tick,0x7ffe67f8feb4,347453775,0,0x0,8
tick,0x7ffe67f8feb4,347469463,0,0x0,8
tick,0x7ffe67f8feb4,347485635,0,0x0,8
tick,0x7ffe67f8feb4,347501139,0,0x0,8
tick,0x7ffe67f8feb4,347516704,0,0x0,8
tick,0x7ffe67f8feb4,347532111,0,0x0,8
tick,0x7ffe67f8feb4,347547341,0,0x0,8
tick,0x7ffe67f8feb4,347563303,0,0x0,8
tick,0x7ffe67f8feb4,347579059,0,0x0,8
tick,0x7ffe67f8feb4,347593870,0,0x0,8
tick,0x7ffe67f8feb4,347609841,0,0x0,8
tick,0x7ffe67f8feb4,347625853,0,0x0,8
tick,0x7ffe67f8feb4,347641891,0,0x0,8
tick,0x7ffe67f8feb4,347657899,0,0x0,8
tick,0x7ffe67f8feb4,347673998,0,0x0,8
tick,0x7ffe67f8feb4,347690024,0,0x0,8
tick,0x7ffe67f8feb4,347705415,0,0x0,8
tick,0x7ffe67f8feb4,347720945,0,0x0,8
tick,0x7ffe67f8feb4,347736603,0,0x0,8
tick,0x7ffe67f8feb4,347752093,0,0x0,8
tick,0x7ffe67f8feb4,347767480,0,0x0,8
tick,0x7ffe67f8feb4,347783339,0,0x0,8
tick,0x7ffe67f8feb4,347798534,0,0x0,8
tick,0x7ffe67f8feb4,347814891,0,0x0,8
tick,0x7ffe67f8feb4,347830774,0,0x0,8
tick,0x7ffe67f8feb4,347845924,0,0x0,8
tick,0x7ffe67f8feb4,347861755,0,0x0,8
tick,0x7ffe67f8feb4,347877125,0,0x0,8
tick,0x7ffe67f8feb4,347892578,0,0x0,8
tick,0x7ffe67f8feb4,347908482,0,0x0,8
tick,0x7ffe67f8feb4,347923810,0,0x0,8
tick,0x7ffe67f8feb4,347938913,0,0x0,8
tick,0x7ffe67f8feb4,347954537,0,0x0,8
tick,0x7ffe67f8feb4,347969901,0,0x0,8
tick,0x7ffe67f8feb4,347985101,0,0x0,8
tick,0x7ffe67f8feb4,348001080,0,0x0,8
tick,0x7ffe67f8feb4,348016952,0,0x0,8
tick,0x7ffe67f8feb4,348032811,0,0x0,8
tick,0x7ffe67f8feb4,348048386,0,0x0,8
tick,0x7ffe67f8feb4,348063675,0,0x0,8
tick,0x7ffe67f8feb4,348079676,0,0x0,8
tick,0x7ffe67f8feb4,348094988,0,0x0,8
tick,0x7ffe67f8feb4,348110972,0,0x0,8
tick,0x7ffe67f8feb4,348126299,0,0x0,8
tick,0x7ffe67f8feb4,348142177,0,0x0,8
tick,0x7ffe67f8feb4,348157644,0,0x0,8
tick,0x7ffe67f8feb4,348173388,0,0x0,8
tick,0x7ffe67f8feb4,348189086,0,0x0,8
tick,0x7ffe67f8feb4,348204753,0,0x0,8
tick,0x7ffe67f8feb4,348220094,0,0x0,8
tick,0x7ffe67f8feb4,348235701,0,0x0,8
tick,0x7ffe67f8feb4,348251209,0,0x0,8
tick,0x7ffe67f8feb4,348267261,0,0x0,8
tick,0x7ffe67f8feb4,348283236,0,0x0,8
tick,0x7ffe67f8feb4,348298928,0,0x0,8
tick,0x7ffe67f8feb4,348314443,0,0x0,8
tick,0x7ffe67f8feb4,348329238,0,0x0,8
tick,0x7ffe67f8feb4,348345513,0,0x0,8
tick,0x7ffe67f8feb4,348360790,0,0x0,8
tick,0x7ffe67f8feb4,348376831,0,0x0,8
tick,0x7ffe67f8feb4,348392641,0,0x0,8
tick,0x7ffe67f8feb4,348407458,0,0x0,8
tick,0x7ffe67f8feb4,348423250,0,0x0,8
tick,0x7ffe67f8feb4,348439432,0,0x0,8
tick,0x7ffe67f8feb4,348455572,0,0x0,8
tick,0x7ffe67f8feb4,348471142,0,0x0,8
tick,0x7ffe67f8feb4,348487224,0,0x0,8
tick,0x7ffe67f8feb4,348502953,0,0x0,8
tick,0x7ffe67f8feb4,348519380,0,0x0,8
tick,0x7ffe67f8feb4,348534412,0,0x0,8
tick,0x7ffe67f8feb4,348549938,0,0x0,8
tick,0x7ffe67f8feb4,348565159,0,0x0,8
tick,0x7ffe67f8feb4,348580349,0,0x0,8
tick,0x7ffe67f8feb4,348596369,0,0x0,8
tick,0x7ffe67f8feb4,348612381,0,0x0,8
tick,0x7ffe67f8feb4,348628346,0,0x0,8
tick,0x7ffe67f8feb4,348644386,0,0x0,8
tick,0x7ffe67f8feb4,348660412,0,0x0,8
tick,0x7ffe67f8feb4,348675601,0,0x0,8
tick,0x7ffe67f8feb4,348690765,0,0x0,8
tick,0x7ffe67f8feb4,348706207,0,0x0,8
tick,0x7ffe67f8feb4,348721541,0,0x0,8
tick,0x7ffe67f8feb4,348736804,0,0x0,8
tick,0x7ffe67f8feb4,348752506,0,0x0,8
tick,0x7ffe67f8feb4,348768159,0,0x0,8
tick,0x7ffe67f8feb4,348784155,0,0x0,8
tick,0x7ffe67f8feb4,348799642,0,0x0,8
tick,0x7ffe67f8feb4,348815497,0,0x0,8
tick,0x7ffe67f8feb4,348830837,0,0x0,8
tick,0x7ffe67f8feb4,348846258,0,0x0,8
tick,0x7ffe67f8feb4,348862247,0,0x0,8
tick,0x7ffe67f8feb4,348878067,0,0x0,8
tick,0x7ffe67f8feb4,348893357,0,0x0,8
tick,0x7ffe67f8feb4,348909451,0,0x0,8
tick,0x7ffe67f8feb4,348924869,0,0x0,8
tick,0x7ffe67f8feb4,348941159,0,0x0,8
tick,0x7ffe67f8feb4,348956117,0,0x0,8
tick,0x7ffe67f8feb4,348971602,0,0x0,8
tick,0x7ffe67f8feb4,348986538,0,0x0,8
tick,0x7ffe67f8feb4,349001995,0,0x0,8
tick,0x7ffe67f8feb4,349017123,0,0x0,8
tick,0x7ffe67f8feb4,349033052,0,0x0,8
tick,0x7ffe67f8feb4,349049003,0,0x0,8
tick,0x7ffe67f8feb4,349064502,0,0x0,8
tick,0x7ffe67f8feb4,349079571,0,0x0,8
tick,0x7ffe67f8feb4,349094740,0,0x0,8
tick,0x7ffe67f8feb4,349110200,0,0x0,8
tick,0x7ffe67f8feb4,349125493,0,0x0,8
tick,0x7ffe67f8feb4,349140920,0,0x0,8
tick,0x7ffe67f8feb4,349155944,0,0x0,8
tick,0x7ffe67f8feb4,349171397,0,0x0,8
tick,0x7ffe67f8feb4,349186585,0,0x0,8
tick,0x7ffe67f8feb4,349202506,0,0x0,8
tick,0x7ffe67f8feb4,349218208,0,0x0,8
tick,0x7ffe67f8feb4,349233673,0,0x0,8
tick,0x7ffe67f8feb4,349248518,0,0x0,8
tick,0x7ffe67f8feb4,349264110,0,0x0,8
tick,0x7ffe67f8feb4,349280354,0,0x0,8
tick,0x7ffe67f8feb4,349296211,0,0x0,8
tick,0x7ffe67f8feb4,349312163,0,0x0,8
tick,0x7ffe67f8feb4,349327500,0,0x0,8
tick,0x7ffe67f8feb4,349342720,0,0x0,8
tick,0x7ffe67f8feb4,349358764,0,0x0,8
tick,0x7ffe67f8feb4,349374332,0,0x0,8
tick,0x7ffe67f8feb4,349389745,0,0x0,8
tick,0x7ffe67f8feb4,349405703,0,0x0,8
tick,0x7ffe67f8feb4,349420856,0,0x0,8
tick,0x7ffe67f8feb4,349437015,0,0x0,8
tick,0x7ffe67f8feb4,349452529,0,0x0,8
tick,0x7ffe67f8feb4,349467780,0,0x0,8
tick,0x7ffe67f8feb4,349482987,0,0x0,8
tick,0x7ffe67f8feb4,349498201,0,0x0,8
tick,0x7ffe67f8feb4,349514051,0,0x0,8
tick,0x7ffe67f8feb4,349529725,0,0x0,8
tick,0x7ffe67f8feb4,349545393,0,0x0,8
tick,0x7ffe67f8feb4,349560973,0,0x0,8
tick,0x7ffe67f8feb4,349576384,0,0x0,8
tick,0x7ffe67f8feb4,349591980,0,0x0,8
tick,0x7ffe67f8feb4,349607742,0,0x0,8
tick,0x7ffe67f8feb4,349623722,0,0x0,8
tick,0x7ffe67f8feb4,349639720,0,0x0,8
tick,0x7ffe67f8feb4,349655722,0,0x0,8
tick,0x7ffe67f8feb4,349670762,0,0x0,8
tick,0x7ffe67f8feb4,349686764,0,0x0,8
tick,0x7ffe67f8feb4,349702722,0,0x0,8
tick,0x7ffe67f8feb4,349718740,0,0x0,8
tick,0x7ffe67f8feb4,349734791,0,0x0,8
tick,0x7ffe67f8feb4,349750802,0,0x0,8
tick,0x7ffe67f8feb4,349766793,0,0x0,8
tick,0x7ffe67f8feb4,349782829,0,0x0,8
tick,0x7ffe67f8feb4,349798852,0,0x0,8
tick,0x7ffe67f8feb4,349814852,0,0x0,8
tick,0x7ffe67f8feb4,349830889,0,0x0,8
tick,0x7ffe67f8feb4,349846887,0,0x0,8
tick,0x7ffe67f8feb4,349863004,0,0x0,8
tick,0x7ffe67f8feb4,349878391,0,0x0,8
tick,0x7ffe67f8feb4,349893853,0,0x0,8
tick,0x7ffe67f8feb4,349909476,0,0x0,8
tick,0x7ffe67f8feb4,349925493,0,0x0,8
tick,0x7ffe67f8feb4,349941262,0,0x0,8
tick,0x7ffe67f8feb4,349956311,0,0x0,8
tick,0x7ffe67f8feb4,349971508,0,0x0,8
tick,0x7ffe67f8feb4,349987434,0,0x0,8
tick,0x7ffe67f8feb4,350002595,0,0x0,8
tick,0x7ffe67f8feb4,350017720,0,0x0,8
tick,0x7ffe67f8feb4,350032894,0,0x0,8
tick,0x7ffe67f8feb4,350048030,0,0x0,8
tick,0x7ffe67f8feb4,350063906,0,0x0,8
tick,0x7ffe67f8feb4,350079643,0,0x0,8
tick,0x7ffe67f8feb4,350096183,0,0x0,8
tick,0x7ffe67f8feb4,350111635,0,0x0,8
tick,0x7ffe67f8feb4,350126988,0,0x0,8
tick,0x7ffe67f8feb4,350142811,0,0x0,8
tick,0x7ffe67f8feb4,350158610,0,0x0,8
tick,0x7ffe67f8feb4,350174387,0,0x0,8
tick,0x7ffe67f8feb4,350190340,0,0x0,8
tick,0x7ffe67f8feb4,350205784,0,0x0,8
tick,0x7ffe67f8feb4,350221046,0,0x0,8
tick,0x7ffe67f8feb4,350236661,0,0x0,8
tick,0x7ffe67f8feb4,350251877,0,0x0,8
tick,0x7ffe67f8feb4,350266979,0,0x0,8
tick,0x7ffe67f8feb4,350282570,0,0x0,8
tick,0x7ffe67f8feb4,350297907,0,0x0,8
tick,0x7ffe67f8feb4,350313635,0,0x0,8
tick,0x7ffe67f8feb4,350329664,0,0x0,8
tick,0x7ffe67f8feb4,350344825,0,0x0,8
tick,0x7ffe67f8feb4,350360609,0,0x0,8
tick,0x7ffe67f8feb4,350376156,0,0x0,8
tick,0x7ffe67f8feb4,350391619,0,0x0,8
tick,0x7ffe67f8feb4,350407834,0,0x0,8
tick,0x7ffe67f8feb4,350423178,0,0x0,8
tick,0x7ffe67f8feb4,350438818,0,0x0,8
tick,0x7ffe67f8feb4,350454976,0,0x0,8
tick,0x7ffe67f8feb4,350470299,0,0x0,8
tick,0x7ffe67f8feb4,350486507,0,0x0,8
tick,0x7ffe67f8feb4,350502564,0,0x0,8
tick,0x7ffe67f8feb4,350518647,0,0x0,8
tick,0x7ffe67f8feb4,350533777,0,0x0,8
tick,0x7ffe67f8feb4,350550071,0,0x0,8
tick,0x7ffe67f8feb4,350565286,0,0x0,8
tick,0x7ffe67f8feb4,350581161,0,0x0,8
tick,0x7ffe67f8feb4,350597203,0,0x0,8
tick,0x7ffe67f8feb4,350613129,0,0x0,8
tick,0x7ffe67f8feb4,350629125,0,0x0,8
tick,0x7ffe67f8feb4,350645105,0,0x0,8
tick,0x7ffe67f8feb4,350661117,0,0x0,8
tick,0x7ffe67f8feb4,350677155,0,0x0,8
tick,0x7ffe67f8feb4,350693184,0,0x0,8
tick,0x7ffe67f8feb4,350709197,0,0x0,8
tick,0x7ffe67f8feb4,350724466,0,0x0,8
tick,0x7ffe67f8feb4,350739767,0,0x0,8
tick,0x7ffe67f8feb4,350754864,0,0x0,8
tick,0x7ffe67f8feb4,350770227,0,0x0,8
tick,0x7ffe67f8feb4,350785679,0,0x0,8
tick,0x7ffe67f8feb4,350800998,0,0x0,8
tick,0x7ffe67f8feb4,350816409,0,0x0,8
tick,0x7ffe67f8feb4,350832642,0,0x0,8
tick,0x7ffe67f8feb4,350848238,0,0x0,8
tick,0x7ffe67f8feb4,350863484,0,0x0,8
tick,0x7ffe67f8feb4,350879566,0,0x0,8
tick,0x7ffe67f8feb4,350894969,0,0x0,8
tick,0x7ffe67f8feb4,350910240,0,0x0,8
tick,0x7ffe67f8feb4,350926525,0,0x0,8
tick,0x7ffe67f8feb4,350941658,0,0x0,8
tick,0x7ffe67f8feb4,350957271,0,0x0,8
tick,0x7ffe67f8feb4,350972879,0,0x0,8
tick,0x7ffe67f8feb4,350988380,0,0x0,8
tick,0x7ffe67f8feb4,351003839,0,0x0,8
tick,0x7ffe67f8feb4,351019188,0,0x0,8
tick,0x7ffe67f8feb4,351034337,0,0x0,8
tick,0x7ffe67f8feb4,351050207,0,0x0,8
tick,0x7ffe67f8feb4,351065561,0,0x0,8
tick,0x7ffe67f8feb4,351080307,0,0x0,8
tick,0x7ffe67f8feb4,351095918,0,0x0,8
tick,0x7ffe67f8feb4,351111765,0,0x0,8
tick,0x7ffe67f8feb4,351127228,0,0x0,8
tick,0x7ffe67f8feb4,351142778,0,0x0,8
tick,0x7ffe67f8feb4,351158365,0,0x0,8
tick,0x7ffe67f8feb4,351174791,0,0x0,8
tick,0x7ffe67f8feb4,351189989,0,0x0,8
tick,0x7ffe67f8feb4,351205495,0,0x0,8
tick,0x7ffe67f8feb4,351221020,0,0x0,8
tick,0x7ffe67f8feb4,351236790,0,0x0,8
tick,0x7ffe67f8feb4,351252324,0,0x0,8
tick,0x7ffe67f8feb4,351268298,0,0x0,8
tick,0x7ffe67f8feb4,351284179,0,0x0,8
tick,0x7ffe67f8feb4,351299563,0,0x0,8
tick,0x7ffe67f8feb4,351315026,0,0x0,8
tick,0x7ffe67f8feb4,351330564,0,0x0,8
tick,0x7ffe67f8feb4,351346074,0,0x0,8
tick,0x7ffe67f8feb4,351361054,0,0x0,8
tick,0x7ffe67f8feb4,351376687,0,0x0,8
tick,0x7ffe67f8feb4,351392912,0,0x0,8
tick,0x7ffe67f8feb4,351408354,0,0x0,8
tick,0x7ffe67f8feb4,351423725,0,0x0,8
tick,0x7ffe67f8feb4,351439415,0,0x0,8
tick,0x7ffe67f8feb4,351454495,0,0x0,8
tick,0x7ffe67f8feb4,351469890,0,0x0,8
tick,0x7ffe67f8feb4,351485738,0,0x0,8
tick,0x7ffe67f8feb4,351501918,0,0x0,8
tick,0x7ffe67f8feb4,351517778,0,0x0,8
tick,0x7ffe67f8feb4,351533332,0,0x0,8
tick,0x7ffe67f8feb4,351549200,0,0x0,8
tick,0x7ffe67f8feb4,351565150,0,0x0,8
tick,0x7ffe67f8feb4,351580058,0,0x0,8
tick,0x7ffe67f8feb4,351595655,0,0x0,8
tick,0x7ffe67f8feb4,351611500,0,0x0,8
tick,0x7ffe67f8feb4,351627433,0,0x0,8
tick,0x7ffe67f8feb4,351643420,0,0x0,8
tick,0x7ffe67f8feb4,351659456,0,0x0,8
tick,0x7ffe67f8feb4,351675194,0,0x0,8
tick,0x7ffe67f8feb4,351691235,0,0x0,8
tick,0x7ffe67f8feb4,351707225,0,0x0,8
tick,0x7ffe67f8feb4,351723232,0,0x0,8
tick,0x7ffe67f8feb4,351737807,0,0x0,8
tick,0x7ffe67f8feb4,351753585,0,0x0,8
tick,0x7ffe67f8feb4,351769022,0,0x0,8
tick,0x7ffe67f8feb4,351784840,0,0x0,8
tick,0x7ffe67f8feb4,351800931,0,0x0,8
tick,0x7ffe67f8feb4,351816191,0,0x0,8
tick,0x7ffe67f8feb4,351832224,0,0x0,8
tick,0x7ffe67f8feb4,351847980,0,0x0,8
tick,0x7ffe67f8feb4,351863131,0,0x0,8
tick,0x7ffe67f8feb4,351878274,0,0x0,8
tick,0x7ffe67f8feb4,351893869,0,0x0,8
tick,0x7ffe67f8feb4,351908784,0,0x0,8
tick,0x7ffe67f8feb4,351924454,0,0x0,8
tick,0x7ffe67f8feb4,351940242,0,0x0,8
tick,0x7ffe67f8feb4,351955603,0,0x0,8
tick,0x7ffe67f8feb4,351971740,0,0x0,8
tick,0x7ffe67f8feb4,351986750,0,0x0,8
tick,0x7ffe67f8feb4,352002332,0,0x0,8
tick,0x7ffe67f8feb4,352017596,0,0x0,8
tick,0x7ffe67f8feb4,352032789,0,0x0,8
tick,0x7ffe67f8feb4,352048816,0,0x0,8
tick,0x7ffe67f8feb4,352063984,0,0x0,8
tick,0x7ffe67f8feb4,352080033,0,0x0,8
tick,0x7ffe67f8feb4,352095238,0,0x0,8
tick,0x7ffe67f8feb4,352110787,0,0x0,8
tick,0x7ffe67f8feb4,352126121,0,0x0,8
tick,0x7ffe67f8feb4,352141891,0,0x0,8
tick,0x7ffe67f8feb4,352157885,0,0x0,8
tick,0x7ffe67f8feb4,352173400,0,0x0,8
tick,0x7ffe67f8feb4,352188708,0,0x0,8
tick,0x7ffe67f8feb4,352204112,0,0x0,8
tick,0x7ffe67f8feb4,352220351,0,0x0,8
tick,0x7ffe67f8feb4,352235515,0,0x0,8
tick,0x7ffe67f8feb4,352251273,0,0x0,8
tick,0x7ffe67f8feb4,352266041,0,0x0,8
tick,0x7ffe67f8feb4,352281830,0,0x0,8
tick,0x7ffe67f8feb4,352297179,0,0x0,8
tick,0x7ffe67f8feb4,352312969,0,0x0,8
tick,0x7ffe67f8feb4,352329032,0,0x0,8
tick,0x7ffe67f8feb4,352345373,0,0x0,8
tick,0x7ffe67f8feb4,352360644,0,0x0,8
tick,0x7ffe67f8feb4,352376091,0,0x0,8
tick,0x7ffe67f8feb4,352391953,0,0x0,8
tick,0x7ffe67f8feb4,352407602,0,0x0,8
tick,0x7ffe67f8feb4,352423202,0,0x0,8
tick,0x7ffe67f8feb4,352438638,0,0x0,8
tick,0x7ffe67f8feb4,352454091,0,0x0,8
tick,0x7ffe67f8feb4,352470092,0,0x0,8
tick,0x7ffe67f8feb4,352485127,0,0x0,8
tick,0x7ffe67f8feb4,352501128,0,0x0,8
tick,0x7ffe67f8feb4,352517188,0,0x0,8
tick,0x7ffe67f8feb4,352533272,0,0x0,8
tick,0x7ffe67f8feb4,352548248,0,0x0,8
tick,0x7ffe67f8feb4,352563338,0,0x0,8
tick,0x7ffe67f8feb4,352579456,0,0x0,8
tick,0x7ffe67f8feb4,352595540,0,0x0,8
tick,0x7ffe67f8feb4,352611311,0,0x0,8
tick,0x7ffe67f8feb4,352626956,0,0x0,8
tick,0x7ffe67f8feb4,352642001,0,0x0,8
tick,0x7ffe67f8feb4,352656937,0,0x0,8
tick,0x7ffe67f8feb4,352672931,0,0x0,8
tick,0x7ffe67f8feb4,352688918,0,0x0,8
tick,0x7ffe67f8feb4,352704302,0,0x0,8
tick,0x7ffe67f8feb4,352719729,0,0x0,8
tick,0x7ffe67f8feb4,352735385,0,0x0,8
tick,0x7ffe67f8feb4,352750991,0,0x0,8
tick,0x7ffe67f8feb4,352767053,0,0x0,8
tick,0x7ffe67f8feb4,352783053,0,0x0,8
tick,0x7ffe67f8feb4,352798229,0,0x0,8
tick,0x7ffe67f8feb4,352813756,0,0x0,8
tick,0x7ffe67f8feb4,352829076,0,0x0,8
tick,0x7ffe67f8feb4,352844860,0,0x0,8
tick,0x7ffe67f8feb4,352860131,0,0x0,8
tick,0x7ffe67f8feb4,352876063,0,0x0,8
tick,0x7ffe67f8feb4,352891207,0,0x0,8
tick,0x7ffe67f8feb4,352907408,0,0x0,8
tick,0x7ffe67f8feb4,352923044,0,0x0,8
tick,0x7ffe67f8feb4,352938328,0,0x0,8
tick,0x7ffe67f8feb4,352953803,0,0x0,8
tick,0x7ffe67f8feb4,352968759,0,0x0,8
tick,0x7ffe67f8feb4,352983959,0,0x0,8
tick,0x7ffe67f8feb4,352999286,0,0x0,8
tick,0x7ffe67f8feb4,353015230,0,0x0,8
tick,0x7ffe67f8feb4,353031032,0,0x0,8
tick,0x7ffe67f8feb4,353046007,0,0x0,8
tick,0x7ffe67f8feb4,353062069,0,0x0,8
tick,0x7ffe67f8feb4,353077329,0,0x0,8
tick,0x7ffe67f8feb4,353093163,0,0x0,8
tick,0x7ffe67f8feb4,353109104,0,0x0,8
tick,0x7ffe67f8feb4,353124976,0,0x0,8
tick,0x7ffe67f8feb4,353140183,0,0x0,8
tick,0x7ffe67f8feb4,353155421,0,0x0,8
tick,0x7ffe67f8feb4,353171093,0,0x0,8
tick,0x7ffe67f8feb4,353190453,0,0x0,8
tick,0x7ffe67f8feb4,353205925,0,0x0,8
tick,0x7ffe67f8feb4,353221269,0,0x0,8
tick,0x7ffe67f8feb4,353236539,0,0x0,8
tick,0x7ffe67f8feb4,353252479,0,0x0,8
tick,0x7ffe67f8feb4,353268173,0,0x0,8
tick,0x7ffe67f8feb4,353283517,0,0x0,8
tick,0x7ffe67f8feb4,353299122,0,0x0,8
tick,0x7ffe67f8feb4,353314667,0,0x0,8
tick,0x7ffe67f8feb4,353329597,0,0x0,8
tick,0x7ffe67f8feb4,353345922,0,0x0,8
tick,0x7ffe67f8feb4,353360914,0,0x0,8
tick,0x7ffe67f8feb4,353377098,0,0x0,8
tick,0x7ffe67f8feb4,353392116,0,0x0,8
tick,0x7ffe67f8feb4,353408324,0,0x0,8
tick,0x7ffe67f8feb4,353424004,0,0x0,8
tick,0x7ffe67f8feb4,353439071,0,0x0,8
tick,0x7ffe67f8feb4,353454819,0,0x0,8
tick,0x7ffe67f8feb4,353470545,0,0x0,8
tick,0x7ffe67f8feb4,353485909,0,0x0,8
tick,0x7ffe67f8feb4,353501266,0,0x0,8
tick,0x7ffe67f8feb4,353516969,0,0x0,8
tick,0x7ffe67f8feb4,353532193,0,0x0,8
tick,0x7ffe67f8feb4,353548199,0,0x0,8
tick,0x7ffe67f8feb4,353563670,0,0x0,8
tick,0x7ffe67f8feb4,353579531,0,0x0,8
tick,0x7ffe67f8feb4,353595345,0,0x0,8
tick,0x7ffe67f8feb4,353610464,0,0x0,8
tick,0x7ffe67f8feb4,353626044,0,0x0,8
tick,0x7ffe67f8feb4,353641212,0,0x0,8
tick,0x7ffe67f8feb4,353657138,0,0x0,8
tick,0x7ffe67f8feb4,353673116,0,0x0,8
tick,0x7ffe67f8feb4,353689116,0,0x0,8
tick,0x7ffe67f8feb4,353705118,0,0x0,8
tick,0x7ffe67f8feb4,353721121,0,0x0,8
tick,0x7ffe67f8feb4,353737142,0,0x0,8
tick,0x7ffe67f8feb4,353753177,0,0x0,8
tick,0x7ffe67f8feb4,353769229,0,0x0,8
tick,0x7ffe67f8feb4,353784702,0,0x0,8
tick,0x7ffe67f8feb4,353800782,0,0x0,8
tick,0x7ffe67f8feb4,353815944,0,0x0,8
tick,0x7ffe67f8feb4,353831725,0,0x0,8
tick,0x7ffe67f8feb4,353847626,0,0x0,8
tick,0x7ffe67f8feb4,353863245,0,0x0,8
tick,0x7ffe67f8feb4,353878523,0,0x0,8
tick,0x7ffe67f8feb4,353894231,0,0x0,8
tick,0x7ffe67f8feb4,353909462,0,0x0,8
tick,0x7ffe67f8feb4,353925688,0,0x0,8
tick,0x7ffe67f8feb4,353941055,0,0x0,8
tick,0x7ffe67f8feb4,353957112,0,0x0,8
tick,0x7ffe67f8feb4,353972270,0,0x0,8
tick,0x7ffe67f8feb4,353988352,0,0x0,8
tick,0x7ffe67f8feb4,354003962,0,0x0,8
tick,0x7ffe67f8feb4,354019367,0,0x0,8
tick,0x7ffe67f8feb4,354035240,0,0x0,8
tick,0x7ffe67f8feb4,354050674,0,0x0,8
tick,0x7ffe67f8feb4,354066277,0,0x0,8
tick,0x7ffe67f8feb4,354081772,0,0x0,8
tick,0x7ffe67f8feb4,354097408,0,0x0,8
tick,0x7ffe67f8feb4,354112835,0,0x0,8
tick,0x7ffe67f8feb4,354128032,0,0x0,8
tick,0x7ffe67f8feb4,354143450,0,0x0,8
tick,0x7ffe67f8feb4,354159853,0,0x0,8
tick,0x7ffe67f8feb4,354175705,0,0x0,8
tick,0x7ffe67f8feb4,354190949,0,0x0,8
tick,0x7ffe67f8feb4,354206686,0,0x0,8
tick,0x7ffe67f8feb4,354222489,0,0x0,8
tick,0x7ffe67f8feb4,354238266,0,0x0,8
tick,0x7ffe67f8feb4,354253354,0,0x0,8
tick,0x7ffe67f8feb4,354269171,0,0x0,8
tick,0x7ffe67f8feb4,354284509,0,0x0,8
tick,0x7ffe67f8feb4,354300590,0,0x0,8
tick,0x7ffe67f8feb4,354315571,0,0x0,8
tick,0x7ffe67f8feb4,354331332,0,0x0,8
tick,0x7ffe67f8feb4,354347360,0,0x0,8
tick,0x7ffe67f8feb4,354362625,0,0x0,8
tick,0x7ffe67f8feb4,354378643,0,0x0,8
tick,0x7ffe67f8feb4,354394567,0,0x0,8
tick,0x7ffe67f8feb4,354410422,0,0x0,8
tick,0x7ffe67f8feb4,354425418,0,0x0,8
tick,0x7ffe67f8feb4,354441408,0,0x0,8
tick,0x7ffe67f8feb4,354457420,0,0x0,8
tick,0x7ffe67f8feb4,354472795,0,0x0,8
tick,0x7ffe67f8feb4,354488027,0,0x0,8
tick,0x7ffe67f8feb4,354504433,0,0x0,8
tick,0x7ffe67f8feb4,354520400,0,0x0,8
tick,0x7ffe67f8feb4,354536237,0,0x0,8
tick,0x7ffe67f8feb4,354551441,0,0x0,8
tick,0x7ffe67f8feb4,354567435,0,0x0,8
tick,0x7ffe67f8feb4,354583320,0,0x0,8
tick,0x7ffe67f8feb4,354598619,0,0x0,8
tick,0x7ffe67f8feb4,354614231,0,0x0,8
tick,0x7ffe67f8feb4,354629385,0,0x0,8
tick,0x7ffe67f8feb4,354645431,0,0x0,8
tick,0x7ffe67f8feb4,354661366,0,0x0,8
tick,0x7ffe67f8feb4,354677333,0,0x0,8
tick,0x7ffe67f8feb4,354693336,0,0x0,8
tick,0x7ffe67f8feb4,354709375,0,0x0,8
tick,0x7ffe67f8feb4,354725335,0,0x0,8
tick,0x7ffe67f8feb4,354741354,0,0x0,8
tick,0x7ffe67f8feb4,354757384,0,0x0,8
tick,0x7ffe67f8feb4,354772907,0,0x0,8
tick,0x7ffe67f8feb4,354788208,0,0x0,8
tick,0x7ffe67f8feb4,354803892,0,0x0,8
tick,0x7ffe67f8feb4,354818998,0,0x0,8
tick,0x7ffe67f8feb4,354834070,0,0x0,8
tick,0x7ffe67f8feb4,354849794,0,0x0,8
tick,0x7ffe67f8feb4,354865894,0,0x0,8
tick,0x7ffe67f8feb4,354881837,0,0x0,8
tick,0x7ffe67f8feb4,354897988,0,0x0,8
tick,0x7ffe67f8feb4,354913808,0,0x0,8
tick,0x7ffe67f8feb4,354929820,0,0x0,8
tick,0x7ffe67f8feb4,354945810,0,0x0,8
tick,0x7ffe67f8feb4,354961809,0,0x0,8
tick,0x7ffe67f8feb4,354977823,0,0x0,8
tick,0x7ffe67f8feb4,354993810,0,0x0,8
tick,0x7ffe67f8feb4,355009814,0,0x0,8
tick,0x7ffe67f8feb4,355025371,0,0x0,8
tick,0x7ffe67f8feb4,355041370,0,0x0,8
tick,0x7ffe67f8feb4,355057400,0,0x0,8
tick,0x7ffe67f8feb4,355073387,0,0x0,8
tick,0x7ffe67f8feb4,355089375,0,0x0,8
tick,0x7ffe67f8feb4,355105383,0,0x0,8
tick,0x7ffe67f8feb4,355120797,0,0x0,8
tick,0x7ffe67f8feb4,355135960,0,0x0,8
tick,0x7ffe67f8feb4,355152012,0,0x0,8
tick,0x7ffe67f8feb4,355167417,0,0x0,8
tick,0x7ffe67f8feb4,355183089,0,0x0,8
tick,0x7ffe67f8feb4,355197833,0,0x0,8
tick,0x7ffe67f8feb4,355213310,0,0x0,8
tick,0x7ffe67f8feb4,355228940,0,0x0,8
tick,0x7ffe67f8feb4,355244380,0,0x0,8
tick,0x7ffe67f8feb4,355260129,0,0x0,8
tick,0x7ffe67f8feb4,355275497,0,0x0,8
tick,0x7ffe67f8feb4,355290669,0,0x0,8
tick,0x7ffe67f8feb4,355306219,0,0x0,8
tick,0x7ffe67f8feb4,355321414,0,0x0,8
tick,0x7ffe67f8feb4,355336999,0,0x0,8
tick,0x7ffe67f8feb4,355353139,0,0x0,8
tick,0x7ffe67f8feb4,355368625,0,0x0,8
tick,0x7ffe67f8feb4,355383826,0,0x0,8
tick,0x7ffe67f8feb4,355399124,0,0x0,8
tick,0x7ffe67f8feb4,355415277,0,0x0,8
tick,0x7ffe67f8feb4,355430907,0,0x0,8
tick,0x7ffe67f8feb4,355446591,0,0x0,8
tick,0x7ffe67f8feb4,355462594,0,0x0,8
tick,0x7ffe67f8feb4,355477844,0,0x0,8
tick,0x7ffe67f8feb4,355493325,0,0x0,8
tick,0x7ffe67f8feb4,355508682,0,0x0,8
tick,0x7ffe67f8feb4,355524498,0,0x0,8
tick,0x7ffe67f8feb4,355540202,0,0x0,8
tick,0x7ffe67f8feb4,355555855,0,0x0,8
tick,0x7ffe67f8feb4,355570928,0,0x0,8
tick,0x7ffe67f8feb4,355587164,0,0x0,8
tick,0x7ffe67f8feb4,355602754,0,0x0,8
tick,0x7ffe67f8feb4,355619132,0,0x0,8
tick,0x7ffe67f8feb4,355634736,0,0x0,8
tick,0x7ffe67f8feb4,355650156,0,0x0,8
tick,0x7ffe67f8feb4,355666145,0,0x0,8
tick,0x7ffe67f8feb4,355682131,0,0x0,8
tick,0x7ffe67f8feb4,355698148,0,0x0,8
tick,0x7ffe67f8feb4,355713651,0,0x0,8
tick,0x7ffe67f8feb4,355729207,0,0x0,8
tick,0x7ffe67f8feb4,355744670,0,0x0,8
tick,0x7ffe67f8feb4,355760195,0,0x0,8
tick,0x7ffe67f8feb4,355776238,0,0x0,8
tick,0x7ffe67f8feb4,355791489,0,0x0,8
tick,0x7ffe67f8feb4,355807528,0,0x0,8
tick,0x7ffe67f8feb4,355823790,0,0x0,8
tick,0x7ffe67f8feb4,355839697,0,0x0,8
tick,0x7ffe67f8feb4,355855728,0,0x0,8
tick,0x7ffe67f8feb4,355870991,0,0x0,8
tick,0x7ffe67f8feb4,355886977,0,0x0,8
tick,0x7ffe67f8feb4,355902434,0,0x0,8
tick,0x7ffe67f8feb4,355917866,0,0x0,8
tick,0x7ffe67f8feb4,355933839,0,0x0,8
tick,0x7ffe67f8feb4,355949018,0,0x0,8
tick,0x7ffe67f8feb4,355964611,0,0x0,8
tick,0x7ffe67f8feb4,355980550,0,0x0,8
tick,0x7ffe67f8feb4,355995840,0,0x0,8
tick,0x7ffe67f8feb4,356011459,0,0x0,8
tick,0x7ffe67f8feb4,356026826,0,0x0,8
tick,0x7ffe67f8feb4,356042732,0,0x0,8
tick,0x7ffe67f8feb4,356057234,0,0x0,8
tick,0x7ffe67f8feb4,356073104,0,0x0,8
tick,0x7ffe67f8feb4,356088618,0,0x0,8
tick,0x7ffe67f8feb4,356104955,0,0x0,8
tick,0x7ffe67f8feb4,356120754,0,0x0,8
tick,0x7ffe67f8feb4,356135757,0,0x0,8
tick,0x7ffe67f8feb4,356151714,0,0x0,8
tick,0x7ffe67f8feb4,356167415,0,0x0,8
tick,0x7ffe67f8feb4,356182920,0,0x0,8
tick,0x7ffe67f8feb4,356199361,0,0x0,8
tick,0x7ffe67f8feb4,356214495,0,0x0,8
tick,0x7ffe67f8feb4,356229950,0,0x0,8
tick,0x7ffe67f8feb4,356245349,0,0x0,8
tick,0x7ffe67f8feb4,356260751,0,0x0,8
tick,0x7ffe67f8feb4,356276660,0,0x0,8
tick,0x7ffe67f8feb4,356292388,0,0x0,8
tick,0x7ffe67f8feb4,356308374,0,0x0,8
tick,0x7ffe67f8feb4,356323540,0,0x0,8
tick,0x7ffe67f8feb4,356338565,0,0x0,8
tick,0x7ffe67f8feb4,356353791,0,0x0,8
tick,0x7ffe67f8feb4,356369943,0,0x0,8
tick,0x7ffe67f8feb4,356385968,0,0x0,8
tick,0x7ffe67f8feb4,356402011,0,0x0,8
tick,0x7ffe67f8feb4,356417963,0,0x0,8
tick,0x7ffe67f8feb4,356433322,0,0x0,8
tick,0x7ffe67f8feb4,356448394,0,0x0,8
tick,0x7ffe67f8feb4,356463948,0,0x0,8
tick,0x7ffe67f8feb4,356479117,0,0x0,8
tick,0x7ffe67f8feb4,356495427,0,0x0,8
tick,0x7ffe67f8feb4,356510932,0,0x0,8
tick,0x7ffe67f8feb4,356525946,0,0x0,8
tick,0x7ffe67f8feb4,356541269,0,0x0,8
tick,0x7ffe67f8feb4,356556949,0,0x0,8
tick,0x7ffe67f8feb4,356572211,0,0x0,8
tick,0x7ffe67f8feb4,356587388,0,0x0,8
tick,0x7ffe67f8feb4,356603231,0,0x0,8
tick,0x7ffe67f8feb4,356619295,0,0x0,8
tick,0x7ffe67f8feb4,356634300,0,0x0,8
tick,0x7ffe67f8feb4,356650262,0,0x0,8
tick,0x7ffe67f8feb4,356665310,0,0x0,8
tick,0x7ffe67f8feb4,356680332,0,0x0,8
tick,0x7ffe67f8feb4,356696316,0,0x0,8
tick,0x7ffe67f8feb4,356712323,0,0x0,8
tick,0x7ffe67f8feb4,356728343,0,0x0,8
tick,0x7ffe67f8feb4,356743565,0,0x0,8
tick,0x7ffe67f8feb4,356758791,0,0x0,8
tick,0x7ffe67f8feb4,356775018,0,0x0,8
tick,0x7ffe67f8feb4,356790241,0,0x0,8
tick,0x7ffe67f8feb4,356805851,0,0x0,8
tick,0x7ffe67f8feb4,356821872,0,0x0,8
tick,0x7ffe67f8feb4,356837067,0,0x0,8
tick,0x7ffe67f8feb4,356852247,0,0x0,8
tick,0x7ffe67f8feb4,356867694,0,0x0,8
tick,0x7ffe67f8feb4,356882993,0,0x0,8
tick,0x7ffe67f8feb4,356898163,0,0x0,8
tick,0x7ffe67f8feb4,356913374,0,0x0,8
tick,0x7ffe67f8feb4,356928732,0,0x0,8
tick,0x7ffe67f8feb4,356944228,0,0x0,8
tick,0x7ffe67f8feb4,356959990,0,0x0,8
tick,0x7ffe67f8feb4,356975982,0,0x0,8
tick,0x7ffe67f8feb4,356991799,0,0x0,8
tick,0x7ffe67f8feb4,357007853,0,0x0,8
tick,0x7ffe67f8feb4,357023480,0,0x0,8
tick,0x7ffe67f8feb4,357039490,0,0x0,8
tick,0x7ffe67f8feb4,357055004,0,0x0,8
tick,0x7ffe67f8feb4,357071011,0,0x0,8
tick,0x7ffe67f8feb4,357087149,0,0x0,8
tick,0x7ffe67f8feb4,357102054,0,0x0,8
tick,0x7ffe67f8feb4,357117520,0,0x0,8
tick,0x7ffe67f8feb4,357132585,0,0x0,8
tick,0x7ffe67f8feb4,357147753,0,0x0,8
tick,0x7ffe67f8feb4,357163145,0,0x0,8
tick,0x7ffe67f8feb4,357178304,0,0x0,8
tick,0x7ffe67f8feb4,357194510,0,0x0,8
tick,0x7ffe67f8feb4,357210318,0,0x0,8
tick,0x7ffe67f8feb4,357226175,0,0x0,8
tick,0x7ffe67f8feb4,357241604,0,0x0,8
tick,0x7ffe67f8feb4,357256896,0,0x0,8
tick,0x7ffe67f8feb4,357272498,0,0x0,8
tick,0x7ffe67f8feb4,357287300,0,0x0,8
tick,0x7ffe67f8feb4,357302729,0,0x0,8
tick,0x7ffe67f8feb4,357319556,0,0x0,8
tick,0x7ffe67f8feb4,357333849,0,0x0,8
tick,0x7ffe67f8feb4,357349887,0,0x0,8
tick,0x7ffe67f8feb4,357365569,0,0x0,8
tick,0x7ffe67f8feb4,357381104,0,0x0,8
tick,0x7ffe67f8feb4,357397164,0,0x0,8
tick,0x7ffe67f8feb4,357412405,0,0x0,8
tick,0x7ffe67f8feb4,357427637,0,0x0,8
tick,0x7ffe67f8feb4,357443103,0,0x0,8
tick,0x7ffe67f8feb4,357459090,0,0x0,8
tick,0x7ffe67f8feb4,357475124,0,0x0,8
tick,0x7ffe67f8feb4,357490482,0,0x0,8
tick,0x7ffe67f8feb4,357505054,0,0x0,8
tick,0x7ffe67f8feb4,357521173,0,0x0,8
tick,0x7ffe67f8feb4,357537031,0,0x0,8
tick,0x7ffe67f8feb4,357552490,0,0x0,8
tick,0x7ffe67f8feb4,357567931,0,0x0,8
tick,0x7ffe67f8feb4,357583453,0,0x0,8
tick,0x7ffe67f8feb4,357599296,0,0x0,8
tick,0x7ffe67f8feb4,357614537,0,0x0,8
tick,0x7ffe67f8feb4,357630106,0,0x0,8
tick,0x7ffe67f8feb4,357646112,0,0x0,8
tick,0x7ffe67f8feb4,357661600,0,0x0,8
tick,0x7ffe67f8feb4,357676894,0,0x0,8
tick,0x7ffe67f8feb4,357692903,0,0x0,8
tick,0x7ffe67f8feb4,357708884,0,0x0,8
tick,0x7ffe67f8feb4,357724997,0,0x0,8
tick,0x7ffe67f8feb4,357740181,0,0x0,8
tick,0x7ffe67f8feb4,357756240,0,0x0,8
tick,0x7ffe67f8feb4,357772271,0,0x0,8
tick,0x7ffe67f8feb4,357788276,0,0x0,8
tick,0x7ffe67f8feb4,357804540,0,0x0,8
tick,0x7ffe67f8feb4,357820321,0,0x0,8
tick,0x7ffe67f8feb4,357835822,0,0x0,8
tick,0x7ffe67f8feb4,357851058,0,0x0,8
tick,0x7ffe67f8feb4,357866109,0,0x0,8
tick,0x7ffe67f8feb4,357881625,0,0x0,8
tick,0x7ffe67f8feb4,357896801,0,0x0,8
tick,0x7ffe67f8feb4,357911821,0,0x0,8
tick,0x7ffe67f8feb4,357927641,0,0x0,8
tick,0x7ffe67f8feb4,357943714,0,0x0,8
tick,0x7ffe67f8feb4,357959033,0,0x0,8
tick,0x7ffe67f8feb4,357974896,0,0x0,8
tick,0x7ffe67f8feb4,357989786,0,0x0,8
tick,0x7ffe67f8feb4,358004885,0,0x0,8
tick,0x7ffe67f8feb4,358020284,0,0x0,8
tick,0x7ffe67f8feb4,358035267,0,0x0,8
tick,0x7ffe67f8feb4,358050872,0,0x0,8
tick,0x7ffe67f8feb4,358066113,0,0x0,8
tick,0x7ffe67f8feb4,358081536,0,0x0,8
tick,0x7ffe67f8feb4,358096801,0,0x0,8
tick,0x7ffe67f8feb4,358112388,0,0x0,8
tick,0x7ffe67f8feb4,358127393,0,0x0,8
tick,0x7ffe67f8feb4,358142818,0,0x0,8
tick,0x7ffe67f8feb4,358157726,0,0x0,8
tick,0x7ffe67f8feb4,358173694,0,0x0,8
tick,0x7ffe67f8feb4,358189345,0,0x0,8
tick,0x7ffe67f8feb4,358204932,0,0x0,8
tick,0x7ffe67f8feb4,358221036,0,0x0,8
tick,0x7ffe67f8feb4,358236397,0,0x0,8
tick,0x7ffe67f8feb4,358252019,0,0x0,8
tick,0x7ffe67f8feb4,358268012,0,0x0,8
tick,0x7ffe67f8feb4,358283273,0,0x0,8
tick,0x7ffe67f8feb4,358299012,0,0x0,8
tick,0x7ffe67f8feb4,358314247,0,0x0,8
tick,0x7ffe67f8feb4,358329533,0,0x0,8
tick,0x7ffe67f8feb4,358345279,0,0x0,8
tick,0x7ffe67f8feb4,358361061,0,0x0,8
tick,0x7ffe67f8feb4,358376909,0,0x0,8
tick,0x7ffe67f8feb4,358392749,0,0x0,8
tick,0x7ffe67f8feb4,358407757,0,0x0,8
tick,0x7ffe67f8feb4,358423883,0,0x0,8
tick,0x7ffe67f8feb4,358439089,0,0x0,8
tick,0x7ffe67f8feb4,358455020,0,0x0,8
tick,0x7ffe67f8feb4,358471025,0,0x0,8
tick,0x7ffe67f8feb4,358485970,0,0x0,8
tick,0x7ffe67f8feb4,358501905,0,0x0,8
tick,0x7ffe67f8feb4,358517048,0,0x0,8
tick,0x7ffe67f8feb4,358532047,0,0x0,8
tick,0x7ffe67f8feb4,358548213,0,0x0,8
tick,0x7ffe67f8feb4,358564023,0,0x0,8
tick,0x7ffe67f8feb4,358580040,0,0x0,8
tick,0x7ffe67f8feb4,358596039,0,0x0,8
tick,0x7ffe67f8feb4,358612046,0,0x0,8
tick,0x7ffe67f8feb4,358627066,0,0x0,8
tick,0x7ffe67f8feb4,358642070,0,0x0,8
tick,0x7ffe67f8feb4,358658258,0,0x0,8
tick,0x7ffe67f8feb4,358674099,0,0x0,8
tick,0x7ffe67f8feb4,358690062,0,0x0,8
tick,0x7ffe67f8feb4,358706059,0,0x0,8
tick,0x7ffe67f8feb4,358722241,0,0x0,8
tick,0x7ffe67f8feb4,358738051,0,0x0,8
tick,0x7ffe67f8feb4,358754060,0,0x0,8
tick,0x7ffe67f8feb4,358770258,0,0x0,8
tick,0x7ffe67f8feb4,358785080,0,0x0,8
tick,0x7ffe67f8feb4,358801088,0,0x0,8
tick,0x7ffe67f8feb4,358816922,0,0x0,8
tick,0x7ffe67f8feb4,358832191,0,0x0,8
tick,0x7ffe67f8feb4,358848079,0,0x0,8
tick,0x7ffe67f8feb4,358863990,0,0x0,8
tick,0x7ffe67f8feb4,358879936,0,0x0,8
tick,0x7ffe67f8feb4,358895939,0,0x0,8
tick,0x7ffe67f8feb4,358910985,0,0x0,8
tick,0x7ffe67f8feb4,358926100,0,0x0,8
tick,0x7ffe67f8feb4,358942091,0,0x0,8
tick,0x7ffe67f8feb4,358958128,0,0x0,8
tick,0x7ffe67f8feb4,358973977,0,0x0,8
tick,0x7ffe67f8feb4,358989352,0,0x0,8
tick,0x7ffe67f8feb4,359005296,0,0x0,8
tick,0x7ffe67f8feb4,359021150,0,0x0,8
tick,0x7ffe67f8feb4,359037197,0,0x0,8
tick,0x7ffe67f8feb4,359053126,0,0x0,8
tick,0x7ffe67f8feb4,359069106,0,0x0,8
tick,0x7ffe67f8feb4,359084464,0,0x0,8
tick,0x7ffe67f8feb4,359100153,0,0x0,8
tick,0x7ffe67f8feb4,359115131,0,0x0,8
tick,0x7ffe67f8feb4,359130353,0,0x0,8
tick,0x7ffe67f8feb4,359146308,0,0x0,8
tick,0x7ffe67f8feb4,359162294,0,0x0,8
tick,0x7ffe67f8feb4,359177524,0,0x0,8
tick,0x7ffe67f8feb4,359193387,0,0x0,8
tick,0x7ffe67f8feb4,359208837,0,0x0,8
tick,0x7ffe67f8feb4,359224355,0,0x0,8
tick,0x7ffe67f8feb4,359239774,0,0x0,8
tick,0x7ffe67f8feb4,359255384,0,0x0,8
tick,0x7ffe67f8feb4,359270809,0,0x0,8
tick,0x7ffe67f8feb4,359286297,0,0x0,8
tick,0x7ffe67f8feb4,359302174,0,0x0,8
tick,0x7ffe67f8feb4,359318092,0,0x0,8
tick,0x7ffe67f8feb4,359334084,0,0x0,8
tick,0x7ffe67f8feb4,359350116,0,0x0,8
tick,0x7ffe67f8feb4,359366171,0,0x0,8
tick,0x7ffe67f8feb4,359381916,0,0x0,8
tick,0x7ffe67f8feb4,359397521,0,0x0,8
tick,0x7ffe67f8feb4,359414055,0,0x0,8
tick,0x7ffe67f8feb4,359432926,0,0x0,8
tick,0x7ffe67f8feb4,359445387,0,0x0,8
tick,0x7ffe67f8feb4,359461195,0,0x0,8
tick,0x7ffe67f8feb4,359477261,0,0x0,8
tick,0x7ffe67f8feb4,359493201,0,0x0,8
tick,0x7ffe67f8feb4,359509220,0,0x0,8
tick,0x7ffe67f8feb4,359525253,0,0x0,8
tick,0x7ffe67f8feb4,359541124,0,0x0,8
tick,0x7ffe67f8feb4,359556173,0,0x0,8
tick,0x7ffe67f8feb4,359572391,0,0x0,8
tick,0x7ffe67f8feb4,359588179,0,0x0,8
tick,0x7ffe67f8feb4,359603274,0,0x0,8
tick,0x7ffe67f8feb4,359619286,0,0x0,8
tick,0x7ffe67f8feb4,359635323,0,0x0,8
tick,0x7ffe67f8feb4,359651322,0,0x0,8
tick,0x7ffe67f8feb4,359667352,0,0x0,8
tick,0x7ffe67f8feb4,359683337,0,0x0,8
tick,0x7ffe67f8feb4,359699334,0,0x0,8
tick,0x7ffe67f8feb4,359715388,0,0x0,8
tick,0x7ffe67f8feb4,359731337,0,0x0,8
tick,0x7ffe67f8feb4,359746333,0,0x0,8
tick,0x7ffe67f8feb4,359762333,0,0x0,8
tick,0x7ffe67f8feb4,359778371,0,0x0,8
tick,0x7ffe67f8feb4,359793884,0,0x0,8
tick,0x7ffe67f8feb4,359809400,0,0x0,8
tick,0x7ffe67f8feb4,359825226,0,0x0,8
tick,0x7ffe67f8feb4,359841238,0,0x0,8
tick,0x7ffe67f8feb4,359857285,0,0x0,8
tick,0x7ffe67f8feb4,359873251,0,0x0,8
tick,0x7ffe67f8feb4,359889332,0,0x0,8
tick,0x7ffe67f8feb4,359905598,0,0x0,8
tick,0x7ffe67f8feb4,359923155,0,0x0,8
tick,0x7ffe67f8feb4,359937167,0,0x0,8
tick,0x7ffe67f8feb4,359953175,0,0x0,8
tick,0x7ffe67f8feb4,359969175,0,0x0,8
tick,0x7ffe67f8feb4,359985195,0,0x0,8
tick,0x7ffe67f8feb4,360001219,0,0x0,8
tick,0x7ffe67f8feb4,360017115,0,0x0,8
tick,0x7ffe67f8feb4,360032128,0,0x0,8
tick,0x7ffe67f8feb4,360048132,0,0x0,8
tick,0x7ffe67f8feb4,360063176,0,0x0,8
tick,0x7ffe67f8feb4,360079262,0,0x0,8
tick,0x7ffe67f8feb4,360094629,0,0x0,8
tick,0x7ffe67f8feb4,360110277,0,0x0,8
tick,0x7ffe67f8feb4,360126282,0,0x0,8
tick,0x7ffe67f8feb4,360142363,0,0x0,8
tick,0x7ffe67f8feb4,360158280,0,0x0,8
tick,0x7ffe67f8feb4,360174278,0,0x0,8
tick,0x7ffe67f8feb4,360190308,0,0x0,8
tick,0x7ffe67f8feb4,360206656,0,0x0,8
tick,0x7ffe67f8feb4,360222309,0,0x0,8
tick,0x7ffe67f8feb4,360238326,0,0x0,8
tick,0x7ffe67f8feb4,360253337,0,0x0,8
tick,0x7ffe67f8feb4,360269145,0,0x0,8
tick,0x7ffe67f8feb4,360284308,0,0x0,8
tick,0x7ffe67f8feb4,360300300,0,0x0,8
tick,0x7ffe67f8feb4,360316359,0,0x0,8
tick,0x7ffe67f8feb4,360331488,0,0x0,8
tick,0x7ffe67f8feb4,360346836,0,0x0,8
tick,0x7ffe67f8feb4,360362135,0,0x0,8
tick,0x7ffe67f8feb4,360377646,0,0x0,8
tick,0x7ffe67f8feb4,360393358,0,0x0,8
tick,0x7ffe67f8feb4,360409331,0,0x0,8
tick,0x7ffe67f8feb4,360424712,0,0x0,8
tick,0x7ffe67f8feb4,360440377,0,0x0,8
tick,0x7ffe67f8feb4,360456347,0,0x0,8
tick,0x7ffe67f8feb4,360471677,0,0x0,8
tick,0x7ffe67f8feb4,360486390,0,0x0,8
tick,0x7ffe67f8feb4,360501554,0,0x0,8
tick,0x7ffe67f8feb4,360517544,0,0x0,8
tick,0x7ffe67f8feb4,360533766,0,0x0,8
tick,0x7ffe67f8feb4,360548813,0,0x0,8
tick,0x7ffe67f8feb4,360565107,0,0x0,8
tick,0x7ffe67f8feb4,360580841,0,0x0,8
tick,0x7ffe67f8feb4,360596096,0,0x0,8
tick,0x7ffe67f8feb4,360611216,0,0x0,8
tick,0x7ffe67f8feb4,360627264,0,0x0,8
tick,0x7ffe67f8feb4,360643169,0,0x0,8
tick,0x7ffe67f8feb4,360659158,0,0x0,8
tick,0x7ffe67f8feb4,360675229,0,0x0,8
tick,0x7ffe67f8feb4,360691220,0,0x0,8
tick,0x7ffe67f8feb4,360707284,0,0x0,8
tick,0x7ffe67f8feb4,360723319,0,0x0,8
tick,0x7ffe67f8feb4,360739240,0,0x0,8
tick,0x7ffe67f8feb4,360755813,0,0x0,8
tick,0x7ffe67f8feb4,360771249,0,0x0,8
tick,0x7ffe67f8feb4,360787286,0,0x0,8
tick,0x7ffe67f8feb4,360803591,0,0x0,8
tick,0x7ffe67f8feb4,360819259,0,0x0,8
tick,0x7ffe67f8feb4,360834398,0,0x0,8
tick,0x7ffe67f8feb4,360850617,0,0x0,8
tick,0x7ffe67f8feb4,360865590,0,0x0,8
tick,0x7ffe67f8feb4,360881395,0,0x0,8
tick,0x7ffe67f8feb4,360897409,0,0x0,8
tick,0x7ffe67f8feb4,360912725,0,0x0,8
tick,0x7ffe67f8feb4,360927985,0,0x0,8
tick,0x7ffe67f8feb4,360943014,0,0x0,8
tick,0x7ffe67f8feb4,360958397,0,0x0,8
tick,0x7ffe67f8feb4,360974401,0,0x0,8
tick,0x7ffe67f8feb4,360990477,0,0x0,8
tick,0x7ffe67f8feb4,361006562,0,0x0,8
tick,0x7ffe67f8feb4,361022398,0,0x0,8
tick,0x7ffe67f8feb4,361038414,0,0x0,8
tick,0x7ffe67f8feb4,361054221,0,0x0,8
tick,0x7ffe67f8feb4,361070235,0,0x0,8
tick,0x7ffe67f8feb4,361086237,0,0x0,8
tick,0x7ffe67f8feb4,361101494,0,0x0,8
tick,0x7ffe67f8feb4,361117532,0,0x0,8
tick,0x7ffe67f8feb4,361132723,0,0x0,8
tick,0x7ffe67f8feb4,361148222,0,0x0,8
tick,0x7ffe67f8feb4,361163402,0,0x0,8
tick,0x7ffe67f8feb4,361179211,0,0x0,8
tick,0x7ffe67f8feb4,361194215,0,0x0,8
tick,0x7ffe67f8feb4,361209312,0,0x0,8
tick,0x7ffe67f8feb4,361224921,0,0x0,8
tick,0x7ffe67f8feb4,361240060,0,0x0,8
tick,0x7ffe67f8feb4,361255638,0,0x0,8
tick,0x7ffe67f8feb4,361271208,0,0x0,8
tick,0x7ffe67f8feb4,361286471,0,0x0,8
tick,0x7ffe67f8feb4,361301689,0,0x0,8
tick,0x7ffe67f8feb4,361317362,0,0x0,8
tick,0x7ffe67f8feb4,361333097,0,0x0,8
tick,0x7ffe67f8feb4,361348516,0,0x0,8
tick,0x7ffe67f8feb4,361364011,0,0x0,8
tick,0x7ffe67f8feb4,361379113,0,0x0,8
tick,0x7ffe67f8feb4,361394138,0,0x0,8
tick,0x7ffe67f8feb4,361410023,0,0x0,8
tick,0x7ffe67f8feb4,361426031,0,0x0,8
tick,0x7ffe67f8feb4,361442000,0,0x0,8
tick,0x7ffe67f8feb4,361458093,0,0x0,8
tick,0x7ffe67f8feb4,361474031,0,0x0,8
tick,0x7ffe67f8feb4,361489678,0,0x0,8
tick,0x7ffe67f8feb4,361505037,0,0x0,8
tick,0x7ffe67f8feb4,361520756,0,0x0,8
tick,0x7ffe67f8feb4,361536121,0,0x0,8
tick,0x7ffe67f8feb4,361551873,0,0x0,8
tick,0x7ffe67f8feb4,361567580,0,0x0,8
tick,0x7ffe67f8feb4,361583247,0,0x0,8
tick,0x7ffe67f8feb4,361598660,0,0x0,8
tick,0x7ffe67f8feb4,361614699,0,0x0,8
tick,0x7ffe67f8feb4,361630540,0,0x0,8
tick,0x7ffe67f8feb4,361647237,0,0x0,8
tick,0x7ffe67f8feb4,361662429,0,0x0,8
tick,0x7ffe67f8feb4,361678425,0,0x0,8
tick,0x7ffe67f8feb4,361694617,0,0x0,8
tick,0x7ffe67f8feb4,361710456,0,0x0,8
tick,0x7ffe67f8feb4,361725597,0,0x0,8
tick,0x7ffe67f8feb4,361741816,0,0x0,8
tick,0x7ffe67f8feb4,361757570,0,0x0,8
tick,0x7ffe67f8feb4,361773585,0,0x0,8
tick,0x7ffe67f8feb4,361789581,0,0x0,8
tick,0x7ffe67f8feb4,361805194,0,0x0,8
tick,0x7ffe67f8feb4,361821263,0,0x0,8
tick,0x7ffe67f8feb4,361837345,0,0x0,8
tick,0x7ffe67f8feb4,361853280,0,0x0,8
tick,0x7ffe67f8feb4,361868322,0,0x0,8
tick,0x7ffe67f8feb4,361883718,0,0x0,8
tick,0x7ffe67f8feb4,361899038,0,0x0,8
tick,0x7ffe67f8feb4,361914728,0,0x0,8
tick,0x7ffe67f8feb4,361930265,0,0x0,8
tick,0x7ffe67f8feb4,361945281,0,0x0,8
tick,0x7ffe67f8feb4,361961312,0,0x0,8
tick,0x7ffe67f8feb4,361978156,0,0x0,8
tick,0x7ffe67f8feb4,361996211,0,0x0,8
tick,0x7ffe67f8feb4,362008894,0,0x0,8
tick,0x7ffe67f8feb4,362024866,0,0x0,8
tick,0x7ffe67f8feb4,362040826,0,0x0,8
tick,0x7ffe67f8feb4,362056603,0,0x0,8
tick,0x7ffe67f8feb4,362072606,0,0x0,8
tick,0x7ffe67f8feb4,362088594,0,0x0,8
tick,0x7ffe67f8feb4,362104548,0,0x0,8
tick,0x7ffe67f8feb4,362119638,0,0x0,8
tick,0x7ffe67f8feb4,362135356,0,0x0,8
tick,0x7ffe67f8feb4,362150592,0,0x0,8
tick,0x7ffe67f8feb4,362166587,0,0x0,8
tick,0x7ffe67f8feb4,362182570,0,0x0,8
tick,0x7ffe67f8feb4,362198605,0,0x0,8
tick,0x7ffe67f8feb4,362214623,0,0x0,8
tick,0x7ffe67f8feb4,362230278,0,0x0,8
tick,0x7ffe67f8feb4,362245588,0,0x0,8
tick,0x7ffe67f8feb4,362261591,0,0x0,8
tick,0x7ffe67f8feb4,362277629,0,0x0,8
tick,0x7ffe67f8feb4,362293630,0,0x0,8
tick,0x7ffe67f8feb4,362309607,0,0x0,8
tick,0x7ffe67f8feb4,362325626,0,0x0,8
tick,0x7ffe67f8feb4,362341669,0,0x0,8
tick,0x7ffe67f8feb4,362357630,0,0x0,8
tick,0x7ffe67f8feb4,362373211,0,0x0,8
tick,0x7ffe67f8feb4,362388644,0,0x0,8
tick,0x7ffe67f8feb4,362404644,0,0x0,8
tick,0x7ffe67f8feb4,362420686,0,0x0,8
tick,0x7ffe67f8feb4,362436612,0,0x0,8
tick,0x7ffe67f8feb4,362452618,0,0x0,8
tick,0x7ffe67f8feb4,362468638,0,0x0,8
tick,0x7ffe67f8feb4,362484717,0,0x0,8
tick,0x7ffe67f8feb4,362500697,0,0x0,8
tick,0x7ffe67f8feb4,362516603,0,0x0,8
tick,0x7ffe67f8feb4,362532625,0,0x0,8
tick,0x7ffe67f8feb4,362548618,0,0x0,8
tick,0x7ffe67f8feb4,362564635,0,0x0,8
tick,0x7ffe67f8feb4,362580748,0,0x0,8
tick,0x7ffe67f8feb4,362596511,0,0x0,8
tick,0x7ffe67f8feb4,362611641,0,0x0,8
tick,0x7ffe67f8feb4,362627586,0,0x0,8
tick,0x7ffe67f8feb4,362643540,0,0x0,8
tick,0x7ffe67f8feb4,362659542,0,0x0,8
tick,0x7ffe67f8feb4,362675610,0,0x0,8
tick,0x7ffe67f8feb4,362691659,0,0x0,8
tick,0x7ffe67f8feb4,362707397,0,0x0,8
tick,0x7ffe67f8feb4,362722945,0,0x0,8
tick,0x7ffe67f8feb4,362738955,0,0x0,8
tick,0x7ffe67f8feb4,362754548,0,0x0,8
tick,0x7ffe67f8feb4,362770525,0,0x0,8
tick,0x7ffe67f8feb4,362786513,0,0x0,8
tick,0x7ffe67f8feb4,362801513,0,0x0,8
tick,0x7ffe67f8feb4,362817501,0,0x0,8
tick,0x7ffe67f8feb4,362833533,0,0x0,8
tick,0x7ffe67f8feb4,362849552,0,0x0,8
tick,0x7ffe67f8feb4,362865627,0,0x0,8
tick,0x7ffe67f8feb4,362880744,0,0x0,8
tick,0x7ffe67f8feb4,362895948,0,0x0,8
tick,0x7ffe67f8feb4,362911228,0,0x0,8
tick,0x7ffe67f8feb4,362927079,0,0x0,8
tick,0x7ffe67f8feb4,362943039,0,0x0,8
tick,0x7ffe67f8feb4,362958531,0,0x0,8
tick,0x7ffe67f8feb4,362974203,0,0x0,8
tick,0x7ffe67f8feb4,362988780,0,0x0,8
tick,0x7ffe67f8feb4,363005026,0,0x0,8
tick,0x7ffe67f8feb4,363020748,0,0x0,8
tick,0x7ffe67f8feb4,363036718,0,0x0,8
tick,0x7ffe67f8feb4,363052725,0,0x0,8
tick,0x7ffe67f8feb4,363068745,0,0x0,8
tick,0x7ffe67f8feb4,363084785,0,0x0,8
tick,0x7ffe67f8feb4,363100799,0,0x0,8
tick,0x7ffe67f8feb4,363116888,0,0x0,8
tick,0x7ffe67f8feb4,363132731,0,0x0,8
tick,0x7ffe67f8feb4,363148738,0,0x0,8
tick,0x7ffe67f8feb4,363164705,0,0x0,8
tick,0x7ffe67f8feb4,363180749,0,0x0,8
tick,0x7ffe67f8feb4,363195930,0,0x0,8
tick,0x7ffe67f8feb4,363211754,0,0x0,8
tick,0x7ffe67f8feb4,363227754,0,0x0,8
tick,0x7ffe67f8feb4,363243737,0,0x0,8
tick,0x7ffe67f8feb4,363259800,0,0x0,8
tick,0x7ffe67f8feb4,363275840,0,0x0,8
tick,0x7ffe67f8feb4,363291946,0,0x0,8
tick,0x7ffe67f8feb4,363307948,0,0x0,8
tick,0x7ffe67f8feb4,363323392,0,0x0,8
tick,0x7ffe67f8feb4,363338672,0,0x0,8
tick,0x7ffe67f8feb4,363354146,0,0x0,8
tick,0x7ffe67f8feb4,363369943,0,0x0,8
tick,0x7ffe67f8feb4,363384904,0,0x0,8
tick,0x7ffe67f8feb4,363400832,0,0x0,8
tick,0x7ffe67f8feb4,363416561,0,0x0,8
tick,0x7ffe67f8feb4,363431583,0,0x0,8
tick,0x7ffe67f8feb4,363447654,0,0x0,8
tick,0x7ffe67f8feb4,363463649,0,0x0,8
tick,0x7ffe67f8feb4,363478583,0,0x0,8
tick,0x7ffe67f8feb4,363494441,0,0x0,8
tick,0x7ffe67f8feb4,363509871,0,0x0,8
tick,0x7ffe67f8feb4,363525893,0,0x0,8
tick,0x7ffe67f8feb4,363541520,0,0x0,8
tick,0x7ffe67f8feb4,363557437,0,0x0,8
tick,0x7ffe67f8feb4,363573259,0,0x0,8
tick,0x7ffe67f8feb4,363588094,0,0x0,8
tick,0x7ffe67f8feb4,363603413,0,0x0,8
tick,0x7ffe67f8feb4,363618756,0,0x0,8
tick,0x7ffe67f8feb4,363634277,0,0x0,8
tick,0x7ffe67f8feb4,363649567,0,0x0,8
tick,0x7ffe67f8feb4,363665628,0,0x0,8
tick,0x7ffe67f8feb4,363681654,0,0x0,8
tick,0x7ffe67f8feb4,363697015,0,0x0,8
tick,0x7ffe67f8feb4,363712808,0,0x0,8
tick,0x7ffe67f8feb4,363728642,0,0x0,8
tick,0x7ffe67f8feb4,363743956,0,0x0,8
tick,0x7ffe67f8feb4,363759954,0,0x0,8
tick,0x7ffe67f8feb4,363775923,0,0x0,8
tick,0x7ffe67f8feb4,363791934,0,0x0,8
tick,0x7ffe67f8feb4,363807966,0,0x0,8
tick,0x7ffe67f8feb4,363823016,0,0x0,8
tick,0x7ffe67f8feb4,363839128,0,0x0,8
tick,0x7ffe67f8feb4,363855108,0,0x0,8
tick,0x7ffe67f8feb4,363870505,0,0x0,8
tick,0x7ffe67f8feb4,363886419,0,0x0,8
tick,0x7ffe67f8feb4,363901741,0,0x0,8
tick,0x7ffe67f8feb4,363916754,0,0x0,8
tick,0x7ffe67f8feb4,363931906,0,0x0,8
tick,0x7ffe67f8feb4,363947455,0,0x0,8
tick,0x7ffe67f8feb4,363963579,0,0x0,8
tick,0x7ffe67f8feb4,363979183,0,0x0,8
tick,0x7ffe67f8feb4,363994437,0,0x0,8
tick,0x7ffe67f8feb4,364010317,0,0x0,8
tick,0x7ffe67f8feb4,364026259,0,0x0,8
tick,0x7ffe67f8feb4,364041731,0,0x0,8
tick,0x7ffe67f8feb4,364057858,0,0x0,8
tick,0x7ffe67f8feb4,364073202,0,0x0,8
tick,0x7ffe67f8feb4,364088250,0,0x0,8
tick,0x7ffe67f8feb4,364103581,0,0x0,8
tick,0x7ffe67f8feb4,364118821,0,0x0,8
tick,0x7ffe67f8feb4,364133943,0,0x0,8
tick,0x7ffe67f8feb4,364150004,0,0x0,8
tick,0x7ffe67f8feb4,364165017,0,0x0,8
tick,0x7ffe67f8feb4,364180549,0,0x0,8
tick,0x7ffe67f8feb4,364196293,0,0x0,8
tick,0x7ffe67f8feb4,364212008,0,0x0,8
tick,0x7ffe67f8feb4,364227089,0,0x0,8
tick,0x7ffe67f8feb4,364243100,0,0x0,8
tick,0x7ffe67f8feb4,364259132,0,0x0,8
tick,0x7ffe67f8feb4,364274586,0,0x0,8
tick,0x7ffe67f8feb4,364290149,0,0x0,8
tick,0x7ffe67f8feb4,364305393,0,0x0,8
tick,0x7ffe67f8feb4,364320576,0,0x0,8
tick,0x7ffe67f8feb4,364335668,0,0x0,8
tick,0x7ffe67f8feb4,364350907,0,0x0,8
tick,0x7ffe67f8feb4,364366691,0,0x0,8
tick,0x7ffe67f8feb4,364381608,0,0x0,8
tick,0x7ffe67f8feb4,364396942,0,0x0,8
tick,0x7ffe67f8feb4,364412867,0,0x0,8
tick,0x7ffe67f8feb4,364427952,0,0x0,8
tick,0x7ffe67f8feb4,364443710,0,0x0,8
tick,0x7ffe67f8feb4,364459962,0,0x0,8
tick,0x7ffe67f8feb4,364475799,0,0x0,8
tick,0x7ffe67f8feb4,364491018,0,0x0,8
tick,0x7ffe67f8feb4,364506341,0,0x0,8
tick,0x7ffe67f8feb4,364521288,0,0x0,8
tick,0x7ffe67f8feb4,364537432,0,0x0,8
tick,0x7ffe67f8feb4,364552488,0,0x0,8
tick,0x7ffe67f8feb4,364568225,0,0x0,8
tick,0x7ffe67f8feb4,364584140,0,0x0,8
tick,0x7ffe67f8feb4,364599926,0,0x0,8
tick,0x7ffe67f8feb4,364614922,0,0x0,8
tick,0x7ffe67f8feb4,364630610,0,0x0,8
tick,0x7ffe67f8feb4,364645926,0,0x0,8
tick,0x7ffe67f8feb4,364661241,0,0x0,8
tick,0x7ffe67f8feb4,364676951,0,0x0,8
tick,0x7ffe67f8feb4,364692595,0,0x0,8
tick,0x7ffe67f8feb4,364707545,0,0x0,8
tick,0x7ffe67f8feb4,364723360,0,0x0,8
tick,0x7ffe67f8feb4,364738401,0,0x0,8
tick,0x7ffe67f8feb4,364753893,0,0x0,8
tick,0x7ffe67f8feb4,364769631,0,0x0,8
tick,0x7ffe67f8feb4,364785622,0,0x0,8
tick,0x7ffe67f8feb4,364801641,0,0x0,8
tick,0x7ffe67f8feb4,364817675,0,0x0,8
tick,0x7ffe67f8feb4,364832705,0,0x0,8
tick,0x7ffe67f8feb4,364848742,0,0x0,8
tick,0x7ffe67f8feb4,364864384,0,0x0,8
tick,0x7ffe67f8feb4,364880082,0,0x0,8
tick,0x7ffe67f8feb4,364895762,0,0x0,8
tick,0x7ffe67f8feb4,364911410,0,0x0,8
tick,0x7ffe67f8feb4,364927456,0,0x0,8
tick,0x7ffe67f8feb4,364943057,0,0x0,8
tick,0x7ffe67f8feb4,364958878,0,0x0,8
tick,0x7ffe67f8feb4,364974938,0,0x0,8
tick,0x7ffe67f8feb4,364990725,0,0x0,8
tick,0x7ffe67f8feb4,365007201,0,0x0,8
tick,0x7ffe67f8feb4,365022828,0,0x0,8
tick,0x7ffe67f8feb4,365038782,0,0x0,8
tick,0x7ffe67f8feb4,365054845,0,0x0,8
tick,0x7ffe67f8feb4,365070076,0,0x0,8
tick,0x7ffe67f8feb4,365085450,0,0x0,8
tick,0x7ffe67f8feb4,365101450,0,0x0,8
tick,0x7ffe67f8feb4,365118646,0,0x0,8
tick,0x7ffe67f8feb4,365133241,0,0x0,8
tick,0x7ffe67f8feb4,365148223,0,0x0,8
tick,0x7ffe67f8feb4,365164206,0,0x0,8
tick,0x7ffe67f8feb4,365180197,0,0x0,8
tick,0x7ffe67f8feb4,365196254,0,0x0,8
tick,0x7ffe67f8feb4,365212507,0,0x0,8
tick,0x7ffe67f8feb4,365228264,0,0x0,8
tick,0x7ffe67f8feb4,365244319,0,0x0,8
tick,0x7ffe67f8feb4,365260330,0,0x0,8
tick,0x7ffe67f8feb4,365275850,0,0x0,8
tick,0x7ffe67f8feb4,365291214,0,0x0,8
tick,0x7ffe67f8feb4,365306482,0,0x0,8
tick,0x7ffe67f8feb4,365322644,0,0x0,8
tick,0x7ffe67f8feb4,365338194,0,0x0,8
tick,0x7ffe67f8feb4,365353396,0,0x0,8
tick,0x7ffe67f8feb4,365368475,0,0x0,8
tick,0x7ffe67f8feb4,365384035,0,0x0,8
tick,0x7ffe67f8feb4,365400029,0,0x0,8
tick,0x7ffe67f8feb4,365415768,0,0x0,8
tick,0x7ffe67f8feb4,365431305,0,0x0,8
tick,0x7ffe67f8feb4,365446479,0,0x0,8
tick,0x7ffe67f8feb4,365462467,0,0x0,8
tick,0x7ffe67f8feb4,365478134,0,0x0,8
tick,0x7ffe67f8feb4,365493565,0,0x0,8
tick,0x7ffe67f8feb4,365508985,0,0x0,8
tick,0x7ffe67f8feb4,365524788,0,0x0,8
tick,0x7ffe67f8feb4,365541104,0,0x0,8
tick,0x7ffe67f8feb4,365556635,0,0x0,8
tick,0x7ffe67f8feb4,365572053,0,0x0,8
tick,0x7ffe67f8feb4,365588231,0,0x0,8
tick,0x7ffe67f8feb4,365604383,0,0x0,8
tick,0x7ffe67f8feb4,365619535,0,0x0,8
tick,0x7ffe67f8feb4,365635275,0,0x0,8
tick,0x7ffe67f8feb4,365650263,0,0x0,8
tick,0x7ffe67f8feb4,365666276,0,0x0,8
tick,0x7ffe67f8feb4,365682240,0,0x0,8
tick,0x7ffe67f8feb4,365697455,0,0x0,8
tick,0x7ffe67f8feb4,365713256,0,0x0,8
tick,0x7ffe67f8feb4,365728462,0,0x0,8
tick,0x7ffe67f8feb4,365744464,0,0x0,8
tick,0x7ffe67f8feb4,365760025,0,0x0,8
tick,0x7ffe67f8feb4,365775248,0,0x0,8
tick,0x7ffe67f8feb4,365791492,0,0x0,8
tick,0x7ffe67f8feb4,365807231,0,0x0,8
tick,0x7ffe67f8feb4,365823215,0,0x0,8
tick,0x7ffe67f8feb4,365839271,0,0x0,8
tick,0x7ffe67f8feb4,365855323,0,0x0,8
tick,0x7ffe67f8feb4,365870496,0,0x0,8
tick,0x7ffe67f8feb4,365886414,0,0x0,8
tick,0x7ffe67f8feb4,365901581,0,0x0,8
tick,0x7ffe67f8feb4,365916767,0,0x0,8
tick,0x7ffe67f8feb4,365932285,0,0x0,8
tick,0x7ffe67f8feb4,365948293,0,0x0,8
tick,0x7ffe67f8feb4,365964269,0,0x0,8
tick,0x7ffe67f8feb4,365979923,0,0x0,8
tick,0x7ffe67f8feb4,365994782,0,0x0,8
tick,0x7ffe67f8feb4,366010505,0,0x0,8
tick,0x7ffe67f8feb4,366025538,0,0x0,8
tick,0x7ffe67f8feb4,366041270,0,0x0,8
tick,0x7ffe67f8feb4,366057444,0,0x0,8
tick,0x7ffe67f8feb4,366072931,0,0x0,8
tick,0x7ffe67f8feb4,366088189,0,0x0,8
tick,0x7ffe67f8feb4,366104190,0,0x0,8
tick,0x7ffe67f8feb4,366119576,0,0x0,8
tick,0x7ffe67f8feb4,366135148,0,0x0,8
tick,0x7ffe67f8feb4,366150398,0,0x0,8
tick,0x7ffe67f8feb4,366166386,0,0x0,8
tick,0x7ffe67f8feb4,366181625,0,0x0,8
tick,0x7ffe67f8feb4,366197613,0,0x0,8
tick,0x7ffe67f8feb4,366213736,0,0x0,8
tick,0x7ffe67f8feb4,366228972,0,0x0,8
tick,0x7ffe67f8feb4,366244993,0,0x0,8
tick,0x7ffe67f8feb4,366260634,0,0x0,8
tick,0x7ffe67f8feb4,366276190,0,0x0,8
tick,0x7ffe67f8feb4,366291777,0,0x0,8
tick,0x7ffe67f8feb4,366306965,0,0x0,8
tick,0x7ffe67f8feb4,366322252,0,0x0,8
tick,0x7ffe67f8feb4,366337705,0,0x0,8
tick,0x7ffe67f8feb4,366353040,0,0x0,8
tick,0x7ffe67f8feb4,366368507,0,0x0,8
tick,0x7ffe67f8feb4,366384759,0,0x0,8
tick,0x7ffe67f8feb4,366399998,0,0x0,8
tick,0x7ffe67f8feb4,366415761,0,0x0,8
tick,0x7ffe67f8feb4,366430823,0,0x0,8
tick,0x7ffe67f8feb4,366446490,0,0x0,8
tick,0x7ffe67f8feb4,366462424,0,0x0,8
tick,0x7ffe67f8feb4,366478526,0,0x0,8
tick,0x7ffe67f8feb4,366494452,0,0x0,8
tick,0x7ffe67f8feb4,366509907,0,0x0,8
tick,0x7ffe67f8feb4,366526110,0,0x0,8
tick,0x7ffe67f8feb4,366541453,0,0x0,8
tick,0x7ffe67f8feb4,366557142,0,0x0,8
tick,0x7ffe67f8feb4,366573238,0,0x0,8
tick,0x7ffe67f8feb4,366588447,0,0x0,8
tick,0x7ffe67f8feb4,366603683,0,0x0,8
tick,0x7ffe67f8feb4,366619117,0,0x0,8
tick,0x7ffe67f8feb4,366634801,0,0x0,8
tick,0x7ffe67f8feb4,366650216,0,0x0,8
tick,0x7ffe67f8feb4,366666092,0,0x0,8
tick,0x7ffe67f8feb4,366681206,0,0x0,8
tick,0x7ffe67f8feb4,366696778,0,0x0,8
tick,0x7ffe67f8feb4,366712568,0,0x0,8
tick,0x7ffe67f8feb4,366728700,0,0x0,8
tick,0x7ffe67f8feb4,366743992,0,0x0,8
tick,0x7ffe67f8feb4,366760039,0,0x0,8
tick,0x7ffe67f8feb4,366775130,0,0x0,8
tick,0x7ffe67f8feb4,366791102,0,0x0,8
tick,0x7ffe67f8feb4,366806895,0,0x0,8
tick,0x7ffe67f8feb4,366822871,0,0x0,8
tick,0x7ffe67f8feb4,366838885,0,0x0,8
tick,0x7ffe67f8feb4,366854272,0,0x0,8
tick,0x7ffe67f8feb4,366870294,0,0x0,8
tick,0x7ffe67f8feb4,366885328,0,0x0,8
tick,0x7ffe67f8feb4,366900829,0,0x0,8
tick,0x7ffe67f8feb4,366916793,0,0x0,8
tick,0x7ffe67f8feb4,366931820,0,0x0,8
tick,0x7ffe67f8feb4,366947804,0,0x0,8
tick,0x7ffe67f8feb4,366963839,0,0x0,8
tick,0x7ffe67f8feb4,366979851,0,0x0,8
tick,0x7ffe67f8feb4,366995193,0,0x0,8
tick,0x7ffe67f8feb4,367011023,0,0x0,8
tick,0x7ffe67f8feb4,367026457,0,0x0,8
tick,0x7ffe67f8feb4,367041620,0,0x0,8
tick,0x7ffe67f8feb4,367057036,0,0x0,8
tick,0x7ffe67f8feb4,367072600,0,0x0,8
tick,0x7ffe67f8feb4,367088632,0,0x0,8
tick,0x7ffe67f8feb4,367104042,0,0x0,8
tick,0x7ffe67f8feb4,367119766,0,0x0,8
tick,0x7ffe67f8feb4,367135815,0,0x0,8
tick,0x7ffe67f8feb4,367151151,0,0x0,8
tick,0x7ffe67f8feb4,367166419,0,0x0,8
tick,0x7ffe67f8feb4,367182621,0,0x0,8
tick,0x7ffe67f8feb4,367197757,0,0x0,8
tick,0x7ffe67f8feb4,367212835,0,0x0,8
tick,0x7ffe67f8feb4,367228198,0,0x0,8
tick,0x7ffe67f8feb4,367243970,0,0x0,8
tick,0x7ffe67f8feb4,367259870,0,0x0,8
tick,0x7ffe67f8feb4,367275772,0,0x0,8
tick,0x7ffe67f8feb4,367291604,0,0x0,8
tick,0x7ffe67f8feb4,367306959,0,0x0,8
tick,0x7ffe67f8feb4,367321911,0,0x0,8
tick,0x7ffe67f8feb4,367337623,0,0x0,8
tick,0x7ffe67f8feb4,367353117,0,0x0,8
tick,0x7ffe67f8feb4,367368263,0,0x0,8
tick,0x7ffe67f8feb4,367384155,0,0x0,8
tick,0x7ffe67f8feb4,367400068,0,0x0,8
tick,0x7ffe67f8feb4,367416100,0,0x0,8
tick,0x7ffe67f8feb4,367432184,0,0x0,8
tick,0x7ffe67f8feb4,367447404,0,0x0,8
tick,0x7ffe67f8feb4,367463116,0,0x0,8
tick,0x7ffe67f8feb4,367479157,0,0x0,8
tick,0x7ffe67f8feb4,367495259,0,0x0,8
tick,0x7ffe67f8feb4,367511056,0,0x0,8
tick,0x7ffe67f8feb4,367527113,0,0x0,8
tick,0x7ffe67f8feb4,367542997,0,0x0,8
tick,0x7ffe67f8feb4,367558984,0,0x0,8
tick,0x7ffe67f8feb4,367575069,0,0x0,8
tick,0x7ffe67f8feb4,367591003,0,0x0,8
tick,0x7ffe67f8feb4,367607018,0,0x0,8
tick,0x7ffe67f8feb4,367623030,0,0x0,8
tick,0x7ffe67f8feb4,367639042,0,0x0,8
tick,0x7ffe67f8feb4,367654568,0,0x0,8
tick,0x7ffe67f8feb4,367670584,0,0x0,8
tick,0x7ffe67f8feb4,367686589,0,0x0,8
tick,0x7ffe67f8feb4,367702594,0,0x0,8
tick,0x7ffe67f8feb4,367718706,0,0x0,8
tick,0x7ffe67f8feb4,367733965,0,0x0,8
tick,0x7ffe67f8feb4,367749140,0,0x0,8
tick,0x7ffe67f8feb4,367764278,0,0x0,8
tick,0x7ffe67f8feb4,367779965,0,0x0,8
tick,0x7ffe67f8feb4,367795966,0,0x0,8
tick,0x7ffe67f8feb4,367811906,0,0x0,8
tick,0x7ffe67f8feb4,367827929,0,0x0,8
tick,0x7ffe67f8feb4,367843929,0,0x0,8
tick,0x7ffe67f8feb4,367859990,0,0x0,8
tick,0x7ffe67f8feb4,367876011,0,0x0,8
tick,0x7ffe67f8feb4,367892090,0,0x0,8
tick,0x7ffe67f8feb4,367907340,0,0x0,8
tick,0x7ffe67f8feb4,367922761,0,0x0,8
tick,0x7ffe67f8feb4,367937900,0,0x0,8
tick,0x7ffe67f8feb4,367954025,0,0x0,8
tick,0x7ffe67f8feb4,367969157,0,0x0,8
tick,0x7ffe67f8feb4,367983941,0,0x0,8
tick,0x7ffe67f8feb4,368000008,0,0x0,8
tick,0x7ffe67f8feb4,368015984,0,0x0,8
tick,0x7ffe67f8feb4,368031838,0,0x0,8
tick,0x7ffe67f8feb4,368046812,0,0x0,8
tick,0x7ffe67f8feb4,368062810,0,0x0,8
tick,0x7ffe67f8feb4,368078802,0,0x0,8
tick,0x7ffe67f8feb4,368093822,0,0x0,8
tick,0x7ffe67f8feb4,368109811,0,0x0,8
tick,0x7ffe67f8feb4,368125830,0,0x0,8
tick,0x7ffe67f8feb4,368141866,0,0x0,8
tick,0x7ffe67f8feb4,368156991,0,0x0,8
tick,0x7ffe67f8feb4,368172986,0,0x0,8
tick,0x7ffe67f8feb4,368189266,0,0x0,8
tick,0x7ffe67f8feb4,368205304,0,0x0,8
tick,0x7ffe67f8feb4,368220267,0,0x0,8
tick,0x7ffe67f8feb4,368236204,0,0x0,8
tick,0x7ffe67f8feb4,368251694,0,0x0,8
tick,0x7ffe67f8feb4,368266908,0,0x0,8
tick,0x7ffe67f8feb4,368282110,0,0x0,8
tick,0x7ffe67f8feb4,368297423,0,0x0,8
tick,0x7ffe67f8feb4,368313198,0,0x0,8
tick,0x7ffe67f8feb4,368328996,0,0x0,8
tick,0x7ffe67f8feb4,368343948,0,0x0,8
tick,0x7ffe67f8feb4,368358963,0,0x0,8
tick,0x7ffe67f8feb4,368374978,0,0x0,8
tick,0x7ffe67f8feb4,368390528,0,0x0,8
tick,0x7ffe67f8feb4,368405994,0,0x0,8
tick,0x7ffe67f8feb4,368421208,0,0x0,8
tick,0x7ffe67f8feb4,368437197,0,0x0,8
tick,0x7ffe67f8feb4,368452556,0,0x0,8
tick,0x7ffe67f8feb4,368468433,0,0x0,8
tick,0x7ffe67f8feb4,368484494,0,0x0,8
tick,0x7ffe67f8feb4,368500374,0,0x0,8
tick,0x7ffe67f8feb4,368516470,0,0x0,8
tick,0x7ffe67f8feb4,368532387,0,0x0,8
tick,0x7ffe67f8feb4,368548372,0,0x0,8
tick,0x7ffe67f8feb4,368564377,0,0x0,8
tick,0x7ffe67f8feb4,368580365,0,0x0,8
tick,0x7ffe67f8feb4,368596411,0,0x0,8
tick,0x7ffe67f8feb4,368612974,0,0x0,8
tick,0x7ffe67f8feb4,368628383,0,0x0,8
tick,0x7ffe67f8feb4,368644363,0,0x0,8
tick,0x7ffe67f8feb4,368660375,0,0x0,8
tick,0x7ffe67f8feb4,368675920,0,0x0,8
tick,0x7ffe67f8feb4,368691806,0,0x0,8
tick,0x7ffe67f8feb4,368707836,0,0x0,8
tick,0x7ffe67f8feb4,368723871,0,0x0,8
tick,0x7ffe67f8feb4,368739857,0,0x0,8
tick,0x7ffe67f8feb4,368755422,0,0x0,8
tick,0x7ffe67f8feb4,368770888,0,0x0,8
tick,0x7ffe67f8feb4,368786438,0,0x0,8
tick,0x7ffe67f8feb4,368802399,0,0x0,8
tick,0x7ffe67f8feb4,368818378,0,0x0,8
tick,0x7ffe67f8feb4,368834368,0,0x0,8
tick,0x7ffe67f8feb4,368850374,0,0x0,8
tick,0x7ffe67f8feb4,368866396,0,0x0,8
tick,0x7ffe67f8feb4,368882424,0,0x0,8
tick,0x7ffe67f8feb4,368898419,0,0x0,8
tick,0x7ffe67f8feb4,368914417,0,0x0,8
tick,0x7ffe67f8feb4,368929819,0,0x0,8
tick,0x7ffe67f8feb4,368945466,0,0x0,8
tick,0x7ffe67f8feb4,368961102,0,0x0,8
tick,0x7ffe67f8feb4,368976911,0,0x0,8
tick,0x7ffe67f8feb4,368991991,0,0x0,8
tick,0x7ffe67f8feb4,369007901,0,0x0,8
tick,0x7ffe67f8feb4,369023053,0,0x0,8
tick,0x7ffe67f8feb4,369038200,0,0x0,8
tick,0x7ffe67f8feb4,369054151,0,0x0,8
tick,0x7ffe67f8feb4,369070233,0,0x0,8
tick,0x7ffe67f8feb4,369086202,0,0x0,8
tick,0x7ffe67f8feb4,369101617,0,0x0,8
tick,0x7ffe67f8feb4,369116777,0,0x0,8
tick,0x7ffe67f8feb4,369132813,0,0x0,8
tick,0x7ffe67f8feb4,369148457,0,0x0,8
tick,0x7ffe67f8feb4,369163840,0,0x0,8
tick,0x7ffe67f8feb4,369179862,0,0x0,8
tick,0x7ffe67f8feb4,369196174,0,0x0,8
tick,0x7ffe67f8feb4,369211835,0,0x0,8
tick,0x7ffe67f8feb4,369226836,0,0x0,8
tick,0x7ffe67f8feb4,369242159,0,0x0,8
tick,0x7ffe67f8feb4,369257789,0,0x0,8
tick,0x7ffe67f8feb4,369273575,0,0x0,8
tick,0x7ffe67f8feb4,369289371,0,0x0,8
tick,0x7ffe67f8feb4,369305868,0,0x0,8
tick,0x7ffe67f8feb4,369320843,0,0x0,8
tick,0x7ffe67f8feb4,369336800,0,0x0,8
tick,0x7ffe67f8feb4,369352774,0,0x0,8
tick,0x7ffe67f8feb4,369368831,0,0x0,8
tick,0x7ffe67f8feb4,369384815,0,0x0,8
tick,0x7ffe67f8feb4,369400898,0,0x0,8
tick,0x7ffe67f8feb4,369416984,0,0x0,8
tick,0x7ffe67f8feb4,369432783,0,0x0,8
tick,0x7ffe67f8feb4,369448422,0,0x0,8
tick,0x7ffe67f8feb4,369464005,0,0x0,8
tick,0x7ffe67f8feb4,369479277,0,0x0,8
tick,0x7ffe67f8feb4,369495689,0,0x0,8
tick,0x7ffe67f8feb4,369511013,0,0x0,8
tick,0x7ffe67f8feb4,369527209,0,0x0,8
tick,0x7ffe67f8feb4,369542310,0,0x0,8
tick,0x7ffe67f8feb4,369557606,0,0x0,8
tick,0x7ffe67f8feb4,369573949,0,0x0,8
tick,0x7ffe67f8feb4,369589058,0,0x0,8
tick,0x7ffe67f8feb4,369605480,0,0x0,8
tick,0x7ffe67f8feb4,369621692,0,0x0,8
tick,0x7ffe67f8feb4,369636378,0,0x0,8
tick,0x7ffe67f8feb4,369651601,0,0x0,8
tick,0x7ffe67f8feb4,369667680,0,0x0,8
tick,0x7ffe67f8feb4,369683078,0,0x0,8
tick,0x7ffe67f8feb4,369698508,0,0x0,8
tick,0x7ffe67f8feb4,369713732,0,0x0,8
tick,0x7ffe67f8feb4,369728878,0,0x0,8
tick,0x7ffe67f8feb4,369744755,0,0x0,8
tick,0x7ffe67f8feb4,369760785,0,0x0,8
tick,0x7ffe67f8feb4,369776749,0,0x0,8
tick,0x7ffe67f8feb4,369791836,0,0x0,8
tick,0x7ffe67f8feb4,369807776,0,0x0,8
tick,0x7ffe67f8feb4,369823772,0,0x0,8
tick,0x7ffe67f8feb4,369839767,0,0x0,8
tick,0x7ffe67f8feb4,369855790,0,0x0,8
tick,0x7ffe67f8feb4,369871789,0,0x0,8
tick,0x7ffe67f8feb4,369887876,0,0x0,8
tick,0x7ffe67f8feb4,369903849,0,0x0,8
tick,0x7ffe67f8feb4,369919021,0,0x0,8
tick,0x7ffe67f8feb4,369935146,0,0x0,8
tick,0x7ffe67f8feb4,369951196,0,0x0,8
tick,0x7ffe67f8feb4,369966496,0,0x0,8
tick,0x7ffe67f8feb4,369982495,0,0x0,8
tick,0x7ffe67f8feb4,369998169,0,0x0,8
tick,0x7ffe67f8feb4,370013711,0,0x0,8
tick,0x7ffe67f8feb4,370029706,0,0x0,8
tick,0x7ffe67f8feb4,370045279,0,0x0,8
tick,0x7ffe67f8feb4,370060388,0,0x0,8
tick,0x7ffe67f8feb4,370076070,0,0x0,8
tick,0x7ffe67f8feb4,370091913,0,0x0,8
tick,0x7ffe67f8feb4,370107809,0,0x0,8
tick,0x7ffe67f8feb4,370123815,0,0x0,8
tick,0x7ffe67f8feb4,370139083,0,0x0,8
tick,0x7ffe67f8feb4,370154514,0,0x0,8
tick,0x7ffe67f8feb4,370170260,0,0x0,8
tick,0x7ffe67f8feb4,370185805,0,0x0,8
tick,0x7ffe67f8feb4,370201060,0,0x0,8
tick,0x7ffe67f8feb4,370216806,0,0x0,8
tick,0x7ffe67f8feb4,370232822,0,0x0,8
tick,0x7ffe67f8feb4,370248824,0,0x0,8
tick,0x7ffe67f8feb4,370264832,0,0x0,8
tick,0x7ffe67f8feb4,370280848,0,0x0,8
tick,0x7ffe67f8feb4,370296683,0,0x0,8
tick,0x7ffe67f8feb4,370311832,0,0x0,8
tick,0x7ffe67f8feb4,370327699,0,0x0,8
tick,0x7ffe67f8feb4,370342825,0,0x0,8
tick,0x7ffe67f8feb4,370358826,0,0x0,8
tick,0x7ffe67f8feb4,370374823,0,0x0,8
tick,0x7ffe67f8feb4,370390814,0,0x0,8
tick,0x7ffe67f8feb4,370406834,0,0x0,8
tick,0x7ffe67f8feb4,370422862,0,0x0,8
tick,0x7ffe67f8feb4,370438841,0,0x0,8
tick,0x7ffe67f8feb4,370453849,0,0x0,8
tick,0x7ffe67f8feb4,370469859,0,0x0,8
tick,0x7ffe67f8feb4,370485846,0,0x0,8
tick,0x7ffe67f8feb4,370501101,0,0x0,8
tick,0x7ffe67f8feb4,370516359,0,0x0,8
tick,0x7ffe67f8feb4,370532438,0,0x0,8
tick,0x7ffe67f8feb4,370548162,0,0x0,8
tick,0x7ffe67f8feb4,370563753,0,0x0,8
tick,0x7ffe67f8feb4,370579610,0,0x0,8
tick,0x7ffe67f8feb4,370595027,0,0x0,8
tick,0x7ffe67f8feb4,370610313,0,0x0,8
tick,0x7ffe67f8feb4,370626461,0,0x0,8
tick,0x7ffe67f8feb4,370641971,0,0x0,8
tick,0x7ffe67f8feb4,370657596,0,0x0,8
tick,0x7ffe67f8feb4,370672761,0,0x0,8
tick,0x7ffe67f8feb4,370687996,0,0x0,8
tick,0x7ffe67f8feb4,370703964,0,0x0,8
tick,0x7ffe67f8feb4,370719966,0,0x0,8
tick,0x7ffe67f8feb4,370735470,0,0x0,8
tick,0x7ffe67f8feb4,370750616,0,0x0,8
tick,0x7ffe67f8feb4,370766505,0,0x0,8
tick,0x7ffe67f8feb4,370781992,0,0x0,8
tick,0x7ffe67f8feb4,370797736,0,0x0,8
tick,0x7ffe67f8feb4,370813076,0,0x0,8
tick,0x7ffe67f8feb4,370828694,0,0x0,8
tick,0x7ffe67f8feb4,370844696,0,0x0,8
tick,0x7ffe67f8feb4,370860722,0,0x0,8
tick,0x7ffe67f8feb4,370875843,0,0x0,8
tick,0x7ffe67f8feb4,370891853,0,0x0,8
tick,0x7ffe67f8feb4,370907444,0,0x0,8
tick,0x7ffe67f8feb4,370923399,0,0x0,8
tick,0x7ffe67f8feb4,370939408,0,0x0,8
tick,0x7ffe67f8feb4,370954819,0,0x0,8
tick,0x7ffe67f8feb4,370970512,0,0x0,8
tick,0x7ffe67f8feb4,370986185,0,0x0,8
tick,0x7ffe67f8feb4,371001473,0,0x0,8
tick,0x7ffe67f8feb4,371016624,0,0x0,8
tick,0x7ffe67f8feb4,371031890,0,0x0,8
tick,0x7ffe67f8feb4,371047078,0,0x0,8
tick,0x7ffe67f8feb4,371063041,0,0x0,8
tick,0x7ffe67f8feb4,371078169,0,0x0,8
tick,0x7ffe67f8feb4,371093650,0,0x0,8
tick,0x7ffe67f8feb4,371109008,0,0x0,8
tick,0x7ffe67f8feb4,371125062,0,0x0,8
tick,0x7ffe67f8feb4,371141251,0,0x0,8
tick,0x7ffe67f8feb4,371156313,0,0x0,8
tick,0x7ffe67f8feb4,371172333,0,0x0,8
tick,0x7ffe67f8feb4,371188076,0,0x0,8
tick,0x7ffe67f8feb4,371204067,0,0x0,8
tick,0x7ffe67f8feb4,371220064,0,0x0,8
tick,0x7ffe67f8feb4,371236065,0,0x0,8
tick,0x7ffe67f8feb4,371252071,0,0x0,8
tick,0x7ffe67f8feb4,371268112,0,0x0,8
tick,0x7ffe67f8feb4,371284062,0,0x0,8
tick,0x7ffe67f8feb4,371300089,0,0x0,8
tick,0x7ffe67f8feb4,371316097,0,0x0,8
tick,0x7ffe67f8feb4,371332044,0,0x0,8
tick,0x7ffe67f8feb4,371347813,0,0x0,8
tick,0x7ffe67f8feb4,371363804,0,0x0,8
tick,0x7ffe67f8feb4,371379782,0,0x0,8
tick,0x7ffe67f8feb4,371394808,0,0x0,8
tick,0x7ffe67f8feb4,371409785,0,0x0,8
tick,0x7ffe67f8feb4,371425791,0,0x0,8
tick,0x7ffe67f8feb4,371441809,0,0x0,8
tick,0x7ffe67f8feb4,371457793,0,0x0,8
tick,0x7ffe67f8feb4,371473783,0,0x0,8
tick,0x7ffe67f8feb4,371489776,0,0x0,8
tick,0x7ffe67f8feb4,371505794,0,0x0,8
tick,0x7ffe67f8feb4,371521954,0,0x0,8
tick,0x7ffe67f8feb4,371537833,0,0x0,8
tick,0x7ffe67f8feb4,371553804,0,0x0,8
tick,0x7ffe67f8feb4,371569796,0,0x0,8
tick,0x7ffe67f8feb4,371585801,0,0x0,8
tick,0x7ffe67f8feb4,371601794,0,0x0,8
tick,0x7ffe67f8feb4,371617797,0,0x0,8
tick,0x7ffe67f8feb4,371633790,0,0x0,8
tick,0x7ffe67f8feb4,371649797,0,0x0,8
tick,0x7ffe67f8feb4,371665777,0,0x0,8
tick,0x7ffe67f8feb4,371681816,0,0x0,8
tick,0x7ffe67f8feb4,371697793,0,0x0,8
tick,0x7ffe67f8feb4,371713805,0,0x0,8
tick,0x7ffe67f8feb4,371729825,0,0x0,8
tick,0x7ffe67f8feb4,371745859,0,0x0,8
tick,0x7ffe67f8feb4,371760989,0,0x0,8
tick,0x7ffe67f8feb4,371776608,0,0x0,8
tick,0x7ffe67f8feb4,371792645,0,0x0,8
tick,0x7ffe67f8feb4,371808609,0,0x0,8
tick,0x7ffe67f8feb4,371824609,0,0x0,8
tick,0x7ffe67f8feb4,371840591,0,0x0,8
tick,0x7ffe67f8feb4,371856606,0,0x0,8
tick,0x7ffe67f8feb4,371872601,0,0x0,8
tick,0x7ffe67f8feb4,371888603,0,0x0,8
tick,0x7ffe67f8feb4,371904658,0,0x0,8
tick,0x7ffe67f8feb4,371920470,0,0x0,8
tick,0x7ffe67f8feb4,371936138,0,0x0,8
tick,0x7ffe67f8feb4,371951819,0,0x0,8
tick,0x7ffe67f8feb4,371967537,0,0x0,8
tick,0x7ffe67f8feb4,371982991,0,0x0,8
tick,0x7ffe67f8feb4,371999064,0,0x0,8
tick,0x7ffe67f8feb4,372015027,0,0x0,8
tick,0x7ffe67f8feb4,372030144,0,0x0,8
tick,0x7ffe67f8feb4,372045356,0,0x0,8
tick,0x7ffe67f8feb4,372061137,0,0x0,8
tick,0x7ffe67f8feb4,372076369,0,0x0,8
tick,0x7ffe67f8feb4,372092149,0,0x0,8
tick,0x7ffe67f8feb4,372108306,0,0x0,8
tick,0x7ffe67f8feb4,372123552,0,0x0,8
tick,0x7ffe67f8feb4,372139190,0,0x0,8
tick,0x7ffe67f8feb4,372154646,0,0x0,8
tick,0x7ffe67f8feb4,372170132,0,0x0,8
tick,0x7ffe67f8feb4,372185855,0,0x0,8
tick,0x7ffe67f8feb4,372201929,0,0x0,8
tick,0x7ffe67f8feb4,372217880,0,0x0,8
tick,0x7ffe67f8feb4,372233631,0,0x0,8
tick,0x7ffe67f8feb4,372249021,0,0x0,8
tick,0x7ffe67f8feb4,372264398,0,0x0,8
tick,0x7ffe67f8feb4,372279986,0,0x0,8
tick,0x7ffe67f8feb4,372295401,0,0x0,8
tick,0x7ffe67f8feb4,372310743,0,0x0,8
tick,0x7ffe67f8feb4,372326551,0,0x0,8
tick,0x7ffe67f8feb4,372341980,0,0x0,8
tick,0x7ffe67f8feb4,372358028,0,0x0,8
tick,0x7ffe67f8feb4,372373585,0,0x0,8
tick,0x7ffe67f8feb4,372389508,0,0x0,8
tick,0x7ffe67f8feb4,372405461,0,0x0,8
tick,0x7ffe67f8feb4,372420813,0,0x0,8
tick,0x7ffe67f8feb4,372436621,0,0x0,8
tick,0x7ffe67f8feb4,372452765,0,0x0,8
tick,0x7ffe67f8feb4,372467710,0,0x0,8
tick,0x7ffe67f8feb4,372482880,0,0x0,8
tick,0x7ffe67f8feb4,372498656,0,0x0,8
tick,0x7ffe67f8feb4,372513920,0,0x0,8
tick,0x7ffe67f8feb4,372529403,0,0x0,8
tick,0x7ffe67f8feb4,372544830,0,0x0,8
tick,0x7ffe67f8feb4,372560175,0,0x0,8
tick,0x7ffe67f8feb4,372575988,0,0x0,8
tick,0x7ffe67f8feb4,372591280,0,0x0,8
tick,0x7ffe67f8feb4,372607268,0,0x0,8
tick,0x7ffe67f8feb4,372622511,0,0x0,8
tick,0x7ffe67f8feb4,372638216,0,0x0,8
tick,0x7ffe67f8feb4,372654195,0,0x0,8
tick,0x7ffe67f8feb4,372670204,0,0x0,8
tick,0x7ffe67f8feb4,372686292,0,0x0,8
tick,0x7ffe67f8feb4,372701473,0,0x0,8
tick,0x7ffe67f8feb4,372716618,0,0x0,8
tick,0x7ffe67f8feb4,372731918,0,0x0,8
tick,0x7ffe67f8feb4,372748015,0,0x0,8
tick,0x7ffe67f8feb4,372763616,0,0x0,8
tick,0x7ffe67f8feb4,372779272,0,0x0,8
tick,0x7ffe67f8feb4,372794724,0,0x0,8
tick,0x7ffe67f8feb4,372809534,0,0x0,8
tick,0x7ffe67f8feb4,372825528,0,0x0,8
tick,0x7ffe67f8feb4,372841520,0,0x0,8
tick,0x7ffe67f8feb4,372857521,0,0x0,8
tick,0x7ffe67f8feb4,372873496,0,0x0,8
tick,0x7ffe67f8feb4,372888660,0,0x0,8
tick,0x7ffe67f8feb4,372903884,0,0x0,8
tick,0x7ffe67f8feb4,372919388,0,0x0,8
tick,0x7ffe67f8feb4,372934377,0,0x0,8
tick,0x7ffe67f8feb4,372949635,0,0x0,8
tick,0x7ffe67f8feb4,372965185,0,0x0,8
tick,0x7ffe67f8feb4,372980219,0,0x0,8
tick,0x7ffe67f8feb4,372996329,0,0x0,8
tick,0x7ffe67f8feb4,373011541,0,0x0,8
tick,0x7ffe67f8feb4,373027183,0,0x0,8
tick,0x7ffe67f8feb4,373042857,0,0x0,8
tick,0x7ffe67f8feb4,373058443,0,0x0,8
tick,0x7ffe67f8feb4,373073788,0,0x0,8
tick,0x7ffe67f8feb4,373089316,0,0x0,8
tick,0x7ffe67f8feb4,373104723,0,0x0,8
tick,0x7ffe67f8feb4,373120698,0,0x0,8
tick,0x7ffe67f8feb4,373136642,0,0x0,8
tick,0x7ffe67f8feb4,373152738,0,0x0,8
tick,0x7ffe67f8feb4,373168102,0,0x0,8
tick,0x7ffe67f8feb4,373183336,0,0x0,8
tick,0x7ffe67f8feb4,373198665,0,0x0,8
tick,0x7ffe67f8feb4,373214642,0,0x0,8
tick,0x7ffe67f8feb4,373230665,0,0x0,8
tick,0x7ffe67f8feb4,373246441,0,0x0,8
tick,0x7ffe67f8feb4,373261622,0,0x0,8
tick,0x7ffe67f8feb4,373276814,0,0x0,8
tick,0x7ffe67f8feb4,373293034,0,0x0,8
tick,0x7ffe67f8feb4,373308447,0,0x0,8
tick,0x7ffe67f8feb4,373323825,0,0x0,8
tick,0x7ffe67f8feb4,373339635,0,0x0,8
tick,0x7ffe67f8feb4,373355990,0,0x0,8
tick,0x7ffe67f8feb4,373372001,0,0x0,8
tick,0x7ffe67f8feb4,373387816,0,0x0,8
tick,0x7ffe67f8feb4,373403288,0,0x0,8
tick,0x7ffe67f8feb4,373419299,0,0x0,8
tick,0x7ffe67f8feb4,373434625,0,0x0,8
tick,0x7ffe67f8feb4,373449814,0,0x0,8
tick,0x7ffe67f8feb4,373464841,0,0x0,8
tick,0x7ffe67f8feb4,373480886,0,0x0,8
tick,0x7ffe67f8feb4,373495717,0,0x0,8
tick,0x7ffe67f8feb4,373511743,0,0x0,8
tick,0x7ffe67f8feb4,373527436,0,0x0,8
tick,0x7ffe67f8feb4,373543428,0,0x0,8
tick,0x7ffe67f8feb4,373559627,0,0x0,8
tick,0x7ffe67f8feb4,373575362,0,0x0,8
tick,0x7ffe67f8feb4,373590888,0,0x0,8
tick,0x7ffe67f8feb4,373606368,0,0x0,8
tick,0x7ffe67f8feb4,373622403,0,0x0,8
tick,0x7ffe67f8feb4,373638460,0,0x0,8
tick,0x7ffe67f8feb4,373654561,0,0x0,8
tick,0x7ffe67f8feb4,373670529,0,0x0,8
tick,0x7ffe67f8feb4,373686207,0,0x0,8
tick,0x7ffe67f8feb4,373701974,0,0x0,8
tick,0x7ffe67f8feb4,373716932,0,0x0,8
tick,0x7ffe67f8feb4,373732881,0,0x0,8
tick,0x7ffe67f8feb4,373748695,0,0x0,8
tick,0x7ffe67f8feb4,373764940,0,0x0,8
tick,0x7ffe67f8feb4,373780181,0,0x0,8
tick,0x7ffe67f8feb4,373795730,0,0x0,8
tick,0x7ffe67f8feb4,373810545,0,0x0,8
tick,0x7ffe67f8feb4,373826526,0,0x0,8
tick,0x7ffe67f8feb4,373842531,0,0x0,8
tick,0x7ffe67f8feb4,373858504,0,0x0,8
tick,0x7ffe67f8feb4,373874496,0,0x0,8
tick,0x7ffe67f8feb4,373890497,0,0x0,8
tick,0x7ffe67f8feb4,373906049,0,0x0,8
tick,0x7ffe67f8feb4,373921764,0,0x0,8
tick,0x7ffe67f8feb4,373937585,0,0x0,8
tick,0x7ffe67f8feb4,373953152,0,0x0,8
tick,0x7ffe67f8feb4,373968338,0,0x0,8
tick,0x7ffe67f8feb4,373983781,0,0x0,8
tick,0x7ffe67f8feb4,373999294,0,0x0,8
tick,0x7ffe67f8feb4,374014462,0,0x0,8
tick,0x7ffe67f8feb4,374029981,0,0x0,8
tick,0x7ffe67f8feb4,374046288,0,0x0,8
tick,0x7ffe67f8feb4,374062453,0,0x0,8
tick,0x7ffe67f8feb4,374077741,0,0x0,8
tick,0x7ffe67f8feb4,374094002,0,0x0,8
tick,0x7ffe67f8feb4,374110039,0,0x0,8
tick,0x7ffe67f8feb4,374125456,0,0x0,8
tick,0x7ffe67f8feb4,374141646,0,0x0,8
tick,0x7ffe67f8feb4,374157652,0,0x0,8
tick,0x7ffe67f8feb4,374172991,0,0x0,8
tick,0x7ffe67f8feb4,374188850,0,0x0,8
tick,0x7ffe67f8feb4,374204177,0,0x0,8
tick,0x7ffe67f8feb4,374220173,0,0x0,8
tick,0x7ffe67f8feb4,374235725,0,0x0,8
tick,0x7ffe67f8feb4,374250822,0,0x0,8
tick,0x7ffe67f8feb4,374267042,0,0x0,8
tick,0x7ffe67f8feb4,374282670,0,0x0,8
tick,0x7ffe67f8feb4,374298561,0,0x0,8
tick,0x7ffe67f8feb4,374314161,0,0x0,8
tick,0x7ffe67f8feb4,374330255,0,0x0,8
tick,0x7ffe67f8feb4,374345444,0,0x0,8
tick,0x7ffe67f8feb4,374360685,0,0x0,8
tick,0x7ffe67f8feb4,374376065,0,0x0,8
tick,0x7ffe67f8feb4,374391208,0,0x0,8
tick,0x7ffe67f8feb4,374407227,0,0x0,8
tick,0x7ffe67f8feb4,374422312,0,0x0,8
tick,0x7ffe67f8feb4,374438315,0,0x0,8
tick,0x7ffe67f8feb4,374454564,0,0x0,8
tick,0x7ffe67f8feb4,374470378,0,0x0,8
tick,0x7ffe67f8feb4,374485534,0,0x0,8
tick,0x7ffe67f8feb4,374501238,0,0x0,8
tick,0x7ffe67f8feb4,374516052,0,0x0,8
tick,0x7ffe67f8feb4,374531880,0,0x0,8
tick,0x7ffe67f8feb4,374547498,0,0x0,8
tick,0x7ffe67f8feb4,374563267,0,0x0,8
tick,0x7ffe67f8feb4,374578936,0,0x0,8
tick,0x7ffe67f8feb4,374595314,0,0x0,8
tick,0x7ffe67f8feb4,374610145,0,0x0,8
tick,0x7ffe67f8feb4,374625364,0,0x0,8
tick,0x7ffe67f8feb4,374641110,0,0x0,8
tick,0x7ffe67f8feb4,374656229,0,0x0,8
tick,0x7ffe67f8feb4,374671415,0,0x0,8
tick,0x7ffe67f8feb4,374687836,0,0x0,8
tick,0x7ffe67f8feb4,374703055,0,0x0,8
tick,0x7ffe67f8feb4,374718944,0,0x0,8
tick,0x7ffe67f8feb4,374734593,0,0x0,8
tick,0x7ffe67f8feb4,374749531,0,0x0,8
tick,0x7ffe67f8feb4,374765065,0,0x0,8
tick,0x7ffe67f8feb4,374781061,0,0x0,8
tick,0x7ffe67f8feb4,374797221,0,0x0,8
tick,0x7ffe67f8feb4,374812692,0,0x0,8
tick,0x7ffe67f8feb4,374828702,0,0x0,8
tick,0x7ffe67f8feb4,374844644,0,0x0,8
tick,0x7ffe67f8feb4,374860671,0,0x0,8
tick,0x7ffe67f8feb4,374876675,0,0x0,8
tick,0x7ffe67f8feb4,374892759,0,0x0,8
tick,0x7ffe67f8feb4,374908804,0,0x0,8
tick,0x7ffe67f8feb4,374924459,0,0x0,8
tick,0x7ffe67f8feb4,374940192,0,0x0,8
tick,0x7ffe67f8feb4,374955811,0,0x0,8
tick,0x7ffe67f8feb4,374971578,0,0x0,8
tick,0x7ffe67f8feb4,374986961,0,0x0,8
tick,0x7ffe67f8feb4,375002296,0,0x0,8
tick,0x7ffe67f8feb4,375017884,0,0x0,8
tick,0x7ffe67f8feb4,375032609,0,0x0,8
tick,0x7ffe67f8feb4,375048341,0,0x0,8
tick,0x7ffe67f8feb4,375063623,0,0x0,8
tick,0x7ffe67f8feb4,375079436,0,0x0,8
tick,0x7ffe67f8feb4,375094597,0,0x0,8
tick,0x7ffe67f8feb4,375110476,0,0x0,8
tick,0x7ffe67f8feb4,375125424,0,0x0,8
tick,0x7ffe67f8feb4,375141395,0,0x0,8
tick,0x7ffe67f8feb4,375156706,0,0x0,8
tick,0x7ffe67f8feb4,375172755,0,0x0,8
tick,0x7ffe67f8feb4,375188590,0,0x0,8
tick,0x7ffe67f8feb4,375203679,0,0x0,8
tick,0x7ffe67f8feb4,375219704,0,0x0,8
tick,0x7ffe67f8feb4,375235565,0,0x0,8
tick,0x7ffe67f8feb4,375251561,0,0x0,8
tick,0x7ffe67f8feb4,375267577,0,0x0,8
tick,0x7ffe67f8feb4,375282598,0,0x0,8
tick,0x7ffe67f8feb4,375298586,0,0x0,8
tick,0x7ffe67f8feb4,375314614,0,0x0,8
tick,0x7ffe67f8feb4,375330593,0,0x0,8
tick,0x7ffe67f8feb4,375346602,0,0x0,8
tick,0x7ffe67f8feb4,375361859,0,0x0,8
tick,0x7ffe67f8feb4,375377600,0,0x0,8
tick,0x7ffe67f8feb4,375393094,0,0x0,8
tick,0x7ffe67f8feb4,375408595,0,0x0,8
tick,0x7ffe67f8feb4,375424605,0,0x0,8
tick,0x7ffe67f8feb4,375440613,0,0x0,8
tick,0x7ffe67f8feb4,375456601,0,0x0,8
tick,0x7ffe67f8feb4,375472613,0,0x0,8
tick,0x7ffe67f8feb4,375488623,0,0x0,8
tick,0x7ffe67f8feb4,375504683,0,0x0,8
tick,0x7ffe67f8feb4,375520677,0,0x0,8
tick,0x7ffe67f8feb4,375536891,0,0x0,8
tick,0x7ffe67f8feb4,375552619,0,0x0,8
tick,0x7ffe67f8feb4,375568627,0,0x0,8
tick,0x7ffe67f8feb4,375584584,0,0x0,8
tick,0x7ffe67f8feb4,375599767,0,0x0,8
tick,0x7ffe67f8feb4,375615836,0,0x0,8
tick,0x7ffe67f8feb4,375630865,0,0x0,8
tick,0x7ffe67f8feb4,375646725,0,0x0,8
tick,0x7ffe67f8feb4,375662727,0,0x0,8
tick,0x7ffe67f8feb4,375678726,0,0x0,8
tick,0x7ffe67f8feb4,375694626,0,0x0,8
tick,0x7ffe67f8feb4,375709755,0,0x0,8
tick,0x7ffe67f8feb4,375725661,0,0x0,8
tick,0x7ffe67f8feb4,375740794,0,0x0,8
tick,0x7ffe67f8feb4,375758505,0,0x0,8
tick,0x7ffe67f8feb4,375772990,0,0x0,8
tick,0x7ffe67f8feb4,375788650,0,0x0,8
tick,0x7ffe67f8feb4,375804757,0,0x0,8
tick,0x7ffe67f8feb4,375821719,0,0x0,8
tick,0x7ffe67f8feb4,375836649,0,0x0,8
tick,0x7ffe67f8feb4,375852651,0,0x0,8
tick,0x7ffe67f8feb4,375868712,0,0x0,8
tick,0x7ffe67f8feb4,375884656,0,0x0,8
tick,0x7ffe67f8feb4,375900749,0,0x0,8
tick,0x7ffe67f8feb4,375916637,0,0x0,8
tick,0x7ffe67f8feb4,375932646,0,0x0,8
tick,0x7ffe67f8feb4,375948261,0,0x0,8
tick,0x7ffe67f8feb4,375964246,0,0x0,8
tick,0x7ffe67f8feb4,375979971,0,0x0,8
tick,0x7ffe67f8feb4,375995936,0,0x0,8
tick,0x7ffe67f8feb4,376012356,0,0x0,8
tick,0x7ffe67f8feb4,376027827,0,0x0,8
tick,0x7ffe67f8feb4,376043391,0,0x0,8
tick,0x7ffe67f8feb4,376058639,0,0x0,8
tick,0x7ffe67f8feb4,376073880,0,0x0,8
tick,0x7ffe67f8feb4,376089957,0,0x0,8
tick,0x7ffe67f8feb4,376105844,0,0x0,8
tick,0x7ffe67f8feb4,376121902,0,0x0,8
tick,0x7ffe67f8feb4,376138046,0,0x0,8
tick,0x7ffe67f8feb4,376152991,0,0x0,8
tick,0x7ffe67f8feb4,376168593,0,0x0,8
tick,0x7ffe67f8feb4,376183814,0,0x0,8
tick,0x7ffe67f8feb4,376199642,0,0x0,8
tick,0x7ffe67f8feb4,376214836,0,0x0,8
tick,0x7ffe67f8feb4,376230599,0,0x0,8
tick,0x7ffe67f8feb4,376245972,0,0x0,8
tick,0x7ffe67f8feb4,376261805,0,0x0,8
tick,0x7ffe67f8feb4,376277803,0,0x0,8
tick,0x7ffe67f8feb4,376293513,0,0x0,8
tick,0x7ffe67f8feb4,376308815,0,0x0,8
tick,0x7ffe67f8feb4,376324823,0,0x0,8
tick,0x7ffe67f8feb4,376340830,0,0x0,8
tick,0x7ffe67f8feb4,376356877,0,0x0,8
tick,0x7ffe67f8feb4,376372825,0,0x0,8
tick,0x7ffe67f8feb4,376389020,0,0x0,8
tick,0x7ffe67f8feb4,376405670,0,0x0,8
tick,0x7ffe67f8feb4,376420994,0,0x0,8
tick,0x7ffe67f8feb4,376436830,0,0x0,8
tick,0x7ffe67f8feb4,376452003,0,0x0,8
tick,0x7ffe67f8feb4,376467962,0,0x0,8
tick,0x7ffe67f8feb4,376483821,0,0x0,8
tick,0x7ffe67f8feb4,376499622,0,0x0,8
tick,0x7ffe67f8feb4,376515612,0,0x0,8
tick,0x7ffe67f8feb4,376530807,0,0x0,8
tick,0x7ffe67f8feb4,376546223,0,0x0,8
tick,0x7ffe67f8feb4,376561802,0,0x0,8
tick,0x7ffe67f8feb4,376577314,0,0x0,8
tick,0x7ffe67f8feb4,376592968,0,0x0,8
tick,0x7ffe67f8feb4,376608649,0,0x0,8
tick,0x7ffe67f8feb4,376624635,0,0x0,8
tick,0x7ffe67f8feb4,376639633,0,0x0,8
tick,0x7ffe67f8feb4,376655642,0,0x0,8
tick,0x7ffe67f8feb4,376670659,0,0x0,8
tick,0x7ffe67f8feb4,376685772,0,0x0,8
tick,0x7ffe67f8feb4,376701802,0,0x0,8
tick,0x7ffe67f8feb4,376717798,0,0x0,8
tick,0x7ffe67f8feb4,376733021,0,0x0,8
tick,0x7ffe67f8feb4,376748613,0,0x0,8
tick,0x7ffe67f8feb4,376763804,0,0x0,8
tick,0x7ffe67f8feb4,376779154,0,0x0,8
tick,0x7ffe67f8feb4,376794801,0,0x0,8
tick,0x7ffe67f8feb4,376809840,0,0x0,8
tick,0x7ffe67f8feb4,376825388,0,0x0,8
tick,0x7ffe67f8feb4,376841325,0,0x0,8
tick,0x7ffe67f8feb4,376857333,0,0x0,8
tick,0x7ffe67f8feb4,376873318,0,0x0,8
tick,0x7ffe67f8feb4,376889318,0,0x0,8
tick,0x7ffe67f8feb4,376905344,0,0x0,8
tick,0x7ffe67f8feb4,376920636,0,0x0,8
tick,0x7ffe67f8feb4,376935572,0,0x0,8
tick,0x7ffe67f8feb4,376950805,0,0x0,8
tick,0x7ffe67f8feb4,376966854,0,0x0,8
tick,0x7ffe67f8feb4,376982837,0,0x0,8
tick,0x7ffe67f8feb4,376998663,0,0x0,8
tick,0x7ffe67f8feb4,377013830,0,0x0,8
tick,0x7ffe67f8feb4,377029638,0,0x0,8
tick,0x7ffe67f8feb4,377044828,0,0x0,8
tick,0x7ffe67f8feb4,377060687,0,0x0,8
tick,0x7ffe67f8feb4,377075939,0,0x0,8
tick,0x7ffe67f8feb4,377091831,0,0x0,8
tick,0x7ffe67f8feb4,377106935,0,0x0,8
tick,0x7ffe67f8feb4,377122956,0,0x0,8
tick,0x7ffe67f8feb4,377138485,0,0x0,8
tick,0x7ffe67f8feb4,377154068,0,0x0,8
tick,0x7ffe67f8feb4,377169664,0,0x0,8
tick,0x7ffe67f8feb4,377185276,0,0x0,8
tick,0x7ffe67f8feb4,377200671,0,0x0,8
tick,0x7ffe67f8feb4,377216510,0,0x0,8
tick,0x7ffe67f8feb4,377231871,0,0x0,8
tick,0x7ffe67f8feb4,377247579,0,0x0,8
tick,0x7ffe67f8feb4,377263093,0,0x0,8
tick,0x7ffe67f8feb4,377278699,0,0x0,8
tick,0x7ffe67f8feb4,377293985,0,0x0,8
tick,0x7ffe67f8feb4,377309681,0,0x0,8
tick,0x7ffe67f8feb4,377325257,0,0x0,8
tick,0x7ffe67f8feb4,377340670,0,0x0,8
tick,0x7ffe67f8feb4,377356466,0,0x0,8
tick,0x7ffe67f8feb4,377372005,0,0x0,8
tick,0x7ffe67f8feb4,377387334,0,0x0,8
tick,0x7ffe67f8feb4,377402889,0,0x0,8
tick,0x7ffe67f8feb4,377418740,0,0x0,8
tick,0x7ffe67f8feb4,377434020,0,0x0,8
tick,0x7ffe67f8feb4,377449707,0,0x0,8
tick,0x7ffe67f8feb4,377465760,0,0x0,8
tick,0x7ffe67f8feb4,377480896,0,0x0,8
tick,0x7ffe67f8feb4,377496545,0,0x0,8
tick,0x7ffe67f8feb4,377511869,0,0x0,8
tick,0x7ffe67f8feb4,377527415,0,0x0,8
tick,0x7ffe67f8feb4,377542737,0,0x0,8
tick,0x7ffe67f8feb4,377558480,0,0x0,8
tick,0x7ffe67f8feb4,377580404,0,0x0,8
tick,0x7ffe67f8feb4,377590133,0,0x0,8
tick,0x7ffe67f8feb4,377606471,0,0x0,8
tick,0x7ffe67f8feb4,377623192,0,0x0,8
tick,0x7ffe67f8feb4,377638116,0,0x0,8
tick,0x7ffe67f8feb4,377654078,0,0x0,8
tick,0x7ffe67f8feb4,377670145,0,0x0,8
tick,0x7ffe67f8feb4,377685345,0,0x0,8
tick,0x7ffe67f8feb4,377701590,0,0x0,8
tick,0x7ffe67f8feb4,377717482,0,0x0,8
tick,0x7ffe67f8feb4,377732310,0,0x0,8
tick,0x7ffe67f8feb4,377748592,0,0x0,8
tick,0x7ffe67f8feb4,377764313,0,0x0,8
tick,0x7ffe67f8feb4,377779657,0,0x0,8
tick,0x7ffe67f8feb4,377795662,0,0x0,8
tick,0x7ffe67f8feb4,377810792,0,0x0,8
tick,0x7ffe67f8feb4,377826324,0,0x0,8
tick,0x7ffe67f8feb4,377842357,0,0x0,8
tick,0x7ffe67f8feb4,377857350,0,0x0,8
tick,0x7ffe67f8feb4,377872391,0,0x0,8
tick,0x7ffe67f8feb4,377888336,0,0x0,8
tick,0x7ffe67f8feb4,377903893,0,0x0,8
tick,0x7ffe67f8feb4,377919650,0,0x0,8
tick,0x7ffe67f8feb4,377934790,0,0x0,8
tick,0x7ffe67f8feb4,377950693,0,0x0,8
tick,0x7ffe67f8feb4,377966684,0,0x0,8
tick,0x7ffe67f8feb4,377982160,0,0x0,8
tick,0x7ffe67f8feb4,377997716,0,0x0,8
tick,0x7ffe67f8feb4,378013050,0,0x0,8
tick,0x7ffe67f8feb4,378029069,0,0x0,8
tick,0x7ffe67f8feb4,378045018,0,0x0,8
tick,0x7ffe67f8feb4,378060836,0,0x0,8
tick,0x7ffe67f8feb4,378076632,0,0x0,8
tick,0x7ffe67f8feb4,378092234,0,0x0,8
tick,0x7ffe67f8feb4,378107532,0,0x0,8
tick,0x7ffe67f8feb4,378123628,0,0x0,8
tick,0x7ffe67f8feb4,378139521,0,0x0,8
tick,0x7ffe67f8feb4,378154879,0,0x0,8
tick,0x7ffe67f8feb4,378170895,0,0x0,8
tick,0x7ffe67f8feb4,378186892,0,0x0,8
tick,0x7ffe67f8feb4,378202085,0,0x0,8
tick,0x7ffe67f8feb4,378217911,0,0x0,8
tick,0x7ffe67f8feb4,378233179,0,0x0,8
tick,0x7ffe67f8feb4,378249102,0,0x0,8
tick,0x7ffe67f8feb4,378265074,0,0x0,8
tick,0x7ffe67f8feb4,378281043,0,0x0,8
tick,0x7ffe67f8feb4,378297039,0,0x0,8
tick,0x7ffe67f8feb4,378313069,0,0x0,8
tick,0x7ffe67f8feb4,378329077,0,0x0,8
tick,0x7ffe67f8feb4,378344210,0,0x0,8
tick,0x7ffe67f8feb4,378360059,0,0x0,8
tick,0x7ffe67f8feb4,378376065,0,0x0,8
tick,0x7ffe67f8feb4,378391572,0,0x0,8
tick,0x7ffe67f8feb4,378407126,0,0x0,8
tick,0x7ffe67f8feb4,378423077,0,0x0,8
tick,0x7ffe67f8feb4,378439084,0,0x0,8
tick,0x7ffe67f8feb4,378455065,0,0x0,8
tick,0x7ffe67f8feb4,378471071,0,0x0,8
tick,0x7ffe67f8feb4,378487094,0,0x0,8
tick,0x7ffe67f8feb4,378503079,0,0x0,8
tick,0x7ffe67f8feb4,378519071,0,0x0,8
tick,0x7ffe67f8feb4,378535068,0,0x0,8
tick,0x7ffe67f8feb4,378551069,0,0x0,8
tick,0x7ffe67f8feb4,378567083,0,0x0,8
tick,0x7ffe67f8feb4,378583082,0,0x0,8
tick,0x7ffe67f8feb4,378599104,0,0x0,8
tick,0x7ffe67f8feb4,378615112,0,0x0,8
tick,0x7ffe67f8feb4,378631078,0,0x0,8
tick,0x7ffe67f8feb4,378647090,0,0x0,8
tick,0x7ffe67f8feb4,378663088,0,0x0,8
tick,0x7ffe67f8feb4,378679116,0,0x0,8
tick,0x7ffe67f8feb4,378695101,0,0x0,8
tick,0x7ffe67f8feb4,378711112,0,0x0,8
tick,0x7ffe67f8feb4,378727098,0,0x0,8
tick,0x7ffe67f8feb4,378743113,0,0x0,8
tick,0x7ffe67f8feb4,378759100,0,0x0,8
tick,0x7ffe67f8feb4,378775102,0,0x0,8
tick,0x7ffe67f8feb4,378791191,0,0x0,8
tick,0x7ffe67f8feb4,378807345,0,0x0,8
tick,0x7ffe67f8feb4,378823365,0,0x0,8
tick,0x7ffe67f8feb4,378839134,0,0x0,8
tick,0x7ffe67f8feb4,378855124,0,0x0,8
tick,0x7ffe67f8feb4,378871119,0,0x0,8
tick,0x7ffe67f8feb4,378887124,0,0x0,8
tick,0x7ffe67f8feb4,378903148,0,0x0,8
tick,0x7ffe67f8feb4,378919148,0,0x0,8
tick,0x7ffe67f8feb4,378935126,0,0x0,8
tick,0x7ffe67f8feb4,378950167,0,0x0,8
tick,0x7ffe67f8feb4,378966153,0,0x0,8
tick,0x7ffe67f8feb4,378981407,0,0x0,8
tick,0x7ffe67f8feb4,378997289,0,0x0,8
tick,0x7ffe67f8feb4,379012899,0,0x0,8
tick,0x7ffe67f8feb4,379028295,0,0x0,8
tick,0x7ffe67f8feb4,379043626,0,0x0,8
tick,0x7ffe67f8feb4,379059594,0,0x0,8
tick,0x7ffe67f8feb4,379075563,0,0x0,8
tick,0x7ffe67f8feb4,379091651,0,0x0,8
tick,0x7ffe67f8feb4,379107081,0,0x0,8
tick,0x7ffe67f8feb4,379122325,0,0x0,8
tick,0x7ffe67f8feb4,379137880,0,0x0,8
tick,0x7ffe67f8feb4,379153599,0,0x0,8
tick,0x7ffe67f8feb4,379169467,0,0x0,8
tick,0x7ffe67f8feb4,379185729,0,0x0,8
tick,0x7ffe67f8feb4,379201600,0,0x0,8
tick,0x7ffe67f8feb4,379216907,0,0x0,8
tick,0x7ffe67f8feb4,379232791,0,0x0,8
tick,0x7ffe67f8feb4,379248221,0,0x0,8
tick,0x7ffe67f8feb4,379264623,0,0x0,8
tick,0x7ffe67f8feb4,379280657,0,0x0,8
tick,0x7ffe67f8feb4,379295908,0,0x0,8
tick,0x7ffe67f8feb4,379311315,0,0x0,8
tick,0x7ffe67f8feb4,379327262,0,0x0,8
tick,0x7ffe67f8feb4,379343030,0,0x0,8
tick,0x7ffe67f8feb4,379359022,0,0x0,8
tick,0x7ffe67f8feb4,379375041,0,0x0,8
tick,0x7ffe67f8feb4,379391037,0,0x0,8
tick,0x7ffe67f8feb4,379407158,0,0x0,8
tick,0x7ffe67f8feb4,379423044,0,0x0,8
tick,0x7ffe67f8feb4,379439043,0,0x0,8
tick,0x7ffe67f8feb4,379455054,0,0x0,8
tick,0x7ffe67f8feb4,379471048,0,0x0,8
tick,0x7ffe67f8feb4,379486866,0,0x0,8
tick,0x7ffe67f8feb4,379502897,0,0x0,8
tick,0x7ffe67f8feb4,379519343,0,0x0,8
tick,0x7ffe67f8feb4,379534863,0,0x0,8
tick,0x7ffe67f8feb4,379550051,0,0x0,8
tick,0x7ffe67f8feb4,379565939,0,0x0,8
tick,0x7ffe67f8feb4,379581125,0,0x0,8
tick,0x7ffe67f8feb4,379596868,0,0x0,8
tick,0x7ffe67f8feb4,379612920,0,0x0,8
tick,0x7ffe67f8feb4,379628031,0,0x0,8
tick,0x7ffe67f8feb4,379643937,0,0x0,8
tick,0x7ffe67f8feb4,379659539,0,0x0,8
tick,0x7ffe67f8feb4,379675624,0,0x0,8
tick,0x7ffe67f8feb4,379691597,0,0x0,8
tick,0x7ffe67f8feb4,379707126,0,0x0,8
tick,0x7ffe67f8feb4,379722701,0,0x0,8
tick,0x7ffe67f8feb4,379737983,0,0x0,8
tick,0x7ffe67f8feb4,379753459,0,0x0,8
tick,0x7ffe67f8feb4,379768917,0,0x0,8
tick,0x7ffe67f8feb4,379784931,0,0x0,8
tick,0x7ffe67f8feb4,379799944,0,0x0,8
tick,0x7ffe67f8feb4,379815006,0,0x0,8
tick,0x7ffe67f8feb4,379830402,0,0x0,8
tick,0x7ffe67f8feb4,379846597,0,0x0,8
tick,0x7ffe67f8feb4,379862760,0,0x0,8
tick,0x7ffe67f8feb4,379878538,0,0x0,8
tick,0x7ffe67f8feb4,379894507,0,0x0,8
tick,0x7ffe67f8feb4,379910544,0,0x0,8
tick,0x7ffe67f8feb4,379926760,0,0x0,8
tick,0x7ffe67f8feb4,379942553,0,0x0,8
tick,0x7ffe67f8feb4,379958470,0,0x0,8
tick,0x7ffe67f8feb4,379973955,0,0x0,8
tick,0x7ffe67f8feb4,379990223,0,0x0,8
tick,0x7ffe67f8feb4,380005605,0,0x0,8
tick,0x7ffe67f8feb4,380021378,0,0x0,8
tick,0x7ffe67f8feb4,380036786,0,0x0,8
tick,0x7ffe67f8feb4,380053241,0,0x0,8
tick,0x7ffe67f8feb4,380069271,0,0x0,8
tick,0x7ffe67f8feb4,380084605,0,0x0,8
tick,0x7ffe67f8feb4,380100118,0,0x0,8
tick,0x7ffe67f8feb4,380115769,0,0x0,8
tick,0x7ffe67f8feb4,380131521,0,0x0,8
tick,0x7ffe67f8feb4,380146659,0,0x0,8
tick,0x7ffe67f8feb4,380162425,0,0x0,8
tick,0x7ffe67f8feb4,380177802,0,0x0,8
tick,0x7ffe67f8feb4,380193835,0,0x0,8
tick,0x7ffe67f8feb4,380209288,0,0x0,8
tick,0x7ffe67f8feb4,380225058,0,0x0,8
tick,0x7ffe67f8feb4,380240527,0,0x0,8
tick,0x7ffe67f8feb4,380257039,0,0x0,8
tick,0x7ffe67f8feb4,380272717,0,0x0,8
tick,0x7ffe67f8feb4,380288705,0,0x0,8
tick,0x7ffe67f8feb4,380304018,0,0x0,8
tick,0x7ffe67f8feb4,380319198,0,0x0,8
tick,0x7ffe67f8feb4,380334476,0,0x0,8
tick,0x7ffe67f8feb4,380350063,0,0x0,8
tick,0x7ffe67f8feb4,380365429,0,0x0,8
tick,0x7ffe67f8feb4,380381110,0,0x0,8
tick,0x7ffe67f8feb4,380397592,0,0x0,8
tick,0x7ffe67f8feb4,380413128,0,0x0,8
tick,0x7ffe67f8feb4,380428910,0,0x0,8
tick,0x7ffe67f8feb4,380444887,0,0x0,8
tick,0x7ffe67f8feb4,380460390,0,0x0,8
tick,0x7ffe67f8feb4,380475859,0,0x0,8
tick,0x7ffe67f8feb4,380491018,0,0x0,8
tick,0x7ffe67f8feb4,380506527,0,0x0,8
tick,0x7ffe67f8feb4,380521700,0,0x0,8
tick,0x7ffe67f8feb4,380537698,0,0x0,8
tick,0x7ffe67f8feb4,380552483,0,0x0,8
tick,0x7ffe67f8feb4,380568449,0,0x0,8
tick,0x7ffe67f8feb4,380583968,0,0x0,8
tick,0x7ffe67f8feb4,380599373,0,0x0,8
tick,0x7ffe67f8feb4,380614765,0,0x0,8
tick,0x7ffe67f8feb4,380630008,0,0x0,8
tick,0x7ffe67f8feb4,380645283,0,0x0,8
tick,0x7ffe67f8feb4,380661057,0,0x0,8
tick,0x7ffe67f8feb4,380677035,0,0x0,8
tick,0x7ffe67f8feb4,380693044,0,0x0,8
tick,0x7ffe67f8feb4,380708427,0,0x0,8
tick,0x7ffe67f8feb4,380723951,0,0x0,8
tick,0x7ffe67f8feb4,380738852,0,0x0,8
tick,0x7ffe67f8feb4,380754879,0,0x0,8
tick,0x7ffe67f8feb4,380770296,0,0x0,8
tick,0x7ffe67f8feb4,380785854,0,0x0,8
tick,0x7ffe67f8feb4,380801125,0,0x0,8
tick,0x7ffe67f8feb4,380817182,0,0x0,8
tick,0x7ffe67f8feb4,380832985,0,0x0,8
tick,0x7ffe67f8feb4,380848916,0,0x0,8
tick,0x7ffe67f8feb4,380863911,0,0x0,8
tick,0x7ffe67f8feb4,380879922,0,0x0,8
tick,0x7ffe67f8feb4,380895984,0,0x0,8
tick,0x7ffe67f8feb4,380910951,0,0x0,8
tick,0x7ffe67f8feb4,380925914,0,0x0,8
tick,0x7ffe67f8feb4,380941488,0,0x0,8
tick,0x7ffe67f8feb4,380956885,0,0x0,8
tick,0x7ffe67f8feb4,380972432,0,0x0,8
tick,0x7ffe67f8feb4,380988492,0,0x0,8
tick,0x7ffe67f8feb4,381005458,0,0x0,8
tick,0x7ffe67f8feb4,381020885,0,0x0,8
tick,0x7ffe67f8feb4,381036480,0,0x0,8
tick,0x7ffe67f8feb4,381052434,0,0x0,8
tick,0x7ffe67f8feb4,381068452,0,0x0,8
tick,0x7ffe67f8feb4,381084051,0,0x0,8
tick,0x7ffe67f8feb4,381099427,0,0x0,8
tick,0x7ffe67f8feb4,381114930,0,0x0,8
tick,0x7ffe67f8feb4,381129814,0,0x0,8
tick,0x7ffe67f8feb4,381145652,0,0x0,8
tick,0x7ffe67f8feb4,381161715,0,0x0,8
tick,0x7ffe67f8feb4,381177674,0,0x0,8
tick,0x7ffe67f8feb4,381192658,0,0x0,8
tick,0x7ffe67f8feb4,381208684,0,0x0,8
tick,0x7ffe67f8feb4,381224867,0,0x0,8
tick,0x7ffe67f8feb4,381240964,0,0x0,8
tick,0x7ffe67f8feb4,381256624,0,0x0,8
tick,0x7ffe67f8feb4,381272635,0,0x0,8
tick,0x7ffe67f8feb4,381288897,0,0x0,8
tick,0x7ffe67f8feb4,381304725,0,0x0,8
tick,0x7ffe67f8feb4,381320631,0,0x0,8
tick,0x7ffe67f8feb4,381336679,0,0x0,8
tick,0x7ffe67f8feb4,381352627,0,0x0,8
tick,0x7ffe67f8feb4,381368622,0,0x0,8
tick,0x7ffe67f8feb4,381384642,0,0x0,8
tick,0x7ffe67f8feb4,381400691,0,0x0,8
tick,0x7ffe67f8feb4,381416641,0,0x0,8
tick,0x7ffe67f8feb4,381432716,0,0x0,8
tick,0x7ffe67f8feb4,381448632,0,0x0,8
tick,0x7ffe67f8feb4,381464634,0,0x0,8
tick,0x7ffe67f8feb4,381480645,0,0x0,8
tick,0x7ffe67f8feb4,381496650,0,0x0,8
tick,0x7ffe67f8feb4,381512656,0,0x0,8
tick,0x7ffe67f8feb4,381528679,0,0x0,8
tick,0x7ffe67f8feb4,381544650,0,0x0,8
tick,0x7ffe67f8feb4,381559696,0,0x0,8
tick,0x7ffe67f8feb4,381574649,0,0x0,8
tick,0x7ffe67f8feb4,381590643,0,0x0,8
tick,0x7ffe67f8feb4,381606663,0,0x0,8
tick,0x7ffe67f8feb4,381621661,0,0x0,8
tick,0x7ffe67f8feb4,381637651,0,0x0,8
tick,0x7ffe67f8feb4,381653665,0,0x0,8
tick,0x7ffe67f8feb4,381669670,0,0x0,8
tick,0x7ffe67f8feb4,381685666,0,0x0,8
tick,0x7ffe67f8feb4,381700646,0,0x0,8
tick,0x7ffe67f8feb4,381716737,0,0x0,8
tick,0x7ffe67f8feb4,381732688,0,0x0,8
tick,0x7ffe67f8feb4,381748656,0,0x0,8
tick,0x7ffe67f8feb4,381764768,0,0x0,8
tick,0x7ffe67f8feb4,381780655,0,0x0,8
tick,0x7ffe67f8feb4,381796669,0,0x0,8
tick,0x7ffe67f8feb4,381812659,0,0x0,8
tick,0x7ffe67f8feb4,381828660,0,0x0,8
tick,0x7ffe67f8feb4,381844669,0,0x0,8
tick,0x7ffe67f8feb4,381860698,0,0x0,8
tick,0x7ffe67f8feb4,381876674,0,0x0,8
tick,0x7ffe67f8feb4,381892675,0,0x0,8
tick,0x7ffe67f8feb4,381908676,0,0x0,8
tick,0x7ffe67f8feb4,381923682,0,0x0,8
tick,0x7ffe67f8feb4,381939536,0,0x0,8
tick,0x7ffe67f8feb4,381954826,0,0x0,8
tick,0x7ffe67f8feb4,381970790,0,0x0,8
tick,0x7ffe67f8feb4,381985838,0,0x0,8
tick,0x7ffe67f8feb4,382001299,0,0x0,8
tick,0x7ffe67f8feb4,382016608,0,0x0,8
tick,0x7ffe67f8feb4,382032346,0,0x0,8
tick,0x7ffe67f8feb4,382047568,0,0x0,8
tick,0x7ffe67f8feb4,382062908,0,0x0,8
tick,0x7ffe67f8feb4,382078583,0,0x0,8
tick,0x7ffe67f8feb4,382094284,0,0x0,8
tick,0x7ffe67f8feb4,382110121,0,0x0,8
tick,0x7ffe67f8feb4,382124907,0,0x0,8
tick,0x7ffe67f8feb4,382140851,0,0x0,8
tick,0x7ffe67f8feb4,382156056,0,0x0,8
tick,0x7ffe67f8feb4,382170630,0,0x0,8
tick,0x7ffe67f8feb4,382185850,0,0x0,8
tick,0x7ffe67f8feb4,382201143,0,0x0,8
tick,0x7ffe67f8feb4,382215852,0,0x0,8
tick,0x7ffe67f8feb4,382231675,0,0x0,8
tick,0x7ffe67f8feb4,382247682,0,0x0,8
tick,0x7ffe67f8feb4,382263113,0,0x0,8
tick,0x7ffe67f8feb4,382278628,0,0x0,8
tick,0x7ffe67f8feb4,382293603,0,0x0,8
tick,0x7ffe67f8feb4,382309607,0,0x0,8
tick,0x7ffe67f8feb4,382324688,0,0x0,8
tick,0x7ffe67f8feb4,382340671,0,0x0,8
tick,0x7ffe67f8feb4,382355884,0,0x0,8
tick,0x7ffe67f8feb4,382370888,0,0x0,8
tick,0x7ffe67f8feb4,382386899,0,0x0,8
tick,0x7ffe67f8feb4,382402404,0,0x0,8
tick,0x7ffe67f8feb4,382417928,0,0x0,8
tick,0x7ffe67f8feb4,382433898,0,0x0,8
tick,0x7ffe67f8feb4,382449891,0,0x0,8
tick,0x7ffe67f8feb4,382465898,0,0x0,8
tick,0x7ffe67f8feb4,382481906,0,0x0,8
tick,0x7ffe67f8feb4,382497897,0,0x0,8
tick,0x7ffe67f8feb4,382513899,0,0x0,8
tick,0x7ffe67f8feb4,382532979,0,0x0,8
tick,0x7ffe67f8feb4,382545345,0,0x0,8
tick,0x7ffe67f8feb4,382562577,0,0x0,8
tick,0x7ffe67f8feb4,382576164,0,0x0,8
tick,0x7ffe67f8feb4,382591141,0,0x0,8
tick,0x7ffe67f8feb4,382607134,0,0x0,8
tick,0x7ffe67f8feb4,382623120,0,0x0,8
tick,0x7ffe67f8feb4,382638140,0,0x0,8
tick,0x7ffe67f8feb4,382653314,0,0x0,8
tick,0x7ffe67f8feb4,382669158,0,0x0,8
tick,0x7ffe67f8feb4,382684864,0,0x0,8
tick,0x7ffe67f8feb4,382701080,0,0x0,8
tick,0x7ffe67f8feb4,382715857,0,0x0,8
tick,0x7ffe67f8feb4,382730835,0,0x0,8
tick,0x7ffe67f8feb4,382746862,0,0x0,8
tick,0x7ffe67f8feb4,382762831,0,0x0,8
tick,0x7ffe67f8feb4,382780278,0,0x0,8
tick,0x7ffe67f8feb4,382795299,0,0x0,8
tick,0x7ffe67f8feb4,382809868,0,0x0,8
tick,0x7ffe67f8feb4,382824879,0,0x0,8
tick,0x7ffe67f8feb4,382840903,0,0x0,8
tick,0x7ffe67f8feb4,382856971,0,0x0,8
tick,0x7ffe67f8feb4,382872849,0,0x0,8
tick,0x7ffe67f8feb4,382888975,0,0x0,8
tick,0x7ffe67f8feb4,382905295,0,0x0,8
tick,0x7ffe67f8feb4,382920894,0,0x0,8
tick,0x7ffe67f8feb4,382936009,0,0x0,8
tick,0x7ffe67f8feb4,382952005,0,0x0,8
tick,0x7ffe67f8feb4,382968011,0,0x0,8
tick,0x7ffe67f8feb4,382983764,0,0x0,8
tick,0x7ffe67f8feb4,382999059,0,0x0,8
tick,0x7ffe67f8feb4,383014831,0,0x0,8
tick,0x7ffe67f8feb4,383030882,0,0x0,8
tick,0x7ffe67f8feb4,383046855,0,0x0,8
tick,0x7ffe67f8feb4,383062850,0,0x0,8
tick,0x7ffe67f8feb4,383078929,0,0x0,8
tick,0x7ffe67f8feb4,383095013,0,0x0,8
tick,0x7ffe67f8feb4,383110910,0,0x0,8
tick,0x7ffe67f8feb4,383125883,0,0x0,8
tick,0x7ffe67f8feb4,383141871,0,0x0,8
tick,0x7ffe67f8feb4,383157877,0,0x0,8
tick,0x7ffe67f8feb4,383173863,0,0x0,8
tick,0x7ffe67f8feb4,383188978,0,0x0,8
tick,0x7ffe67f8feb4,383204690,0,0x0,8
tick,0x7ffe67f8feb4,383219791,0,0x0,8
tick,0x7ffe67f8feb4,383235793,0,0x0,8
tick,0x7ffe67f8feb4,383251780,0,0x0,8
tick,0x7ffe67f8feb4,383269135,0,0x0,8
tick,0x7ffe67f8feb4,383283792,0,0x0,8
tick,0x7ffe67f8feb4,383299808,0,0x0,8
tick,0x7ffe67f8feb4,383315795,0,0x0,8
tick,0x7ffe67f8feb4,383330817,0,0x0,8
tick,0x7ffe67f8feb4,383346783,0,0x0,8
tick,0x7ffe67f8feb4,383362820,0,0x0,8
tick,0x7ffe67f8feb4,383378825,0,0x0,8
tick,0x7ffe67f8feb4,383394886,0,0x0,8
tick,0x7ffe67f8feb4,383411136,0,0x0,8
tick,0x7ffe67f8feb4,383426478,0,0x0,8
tick,0x7ffe67f8feb4,383441863,0,0x0,8
tick,0x7ffe67f8feb4,383457447,0,0x0,8
tick,0x7ffe67f8feb4,383473442,0,0x0,8
tick,0x7ffe67f8feb4,383489451,0,0x0,8
tick,0x7ffe67f8feb4,383505649,0,0x0,8
tick,0x7ffe67f8feb4,383521470,0,0x0,8
tick,0x7ffe67f8feb4,383537527,0,0x0,8
tick,0x7ffe67f8feb4,383552835,0,0x0,8
tick,0x7ffe67f8feb4,383568476,0,0x0,8
tick,0x7ffe67f8feb4,383584119,0,0x0,8
tick,0x7ffe67f8feb4,383600010,0,0x0,8
tick,0x7ffe67f8feb4,383614793,0,0x0,8
tick,0x7ffe67f8feb4,383629848,0,0x0,8
tick,0x7ffe67f8feb4,383645797,0,0x0,8
tick,0x7ffe67f8feb4,383661856,0,0x0,8
tick,0x7ffe67f8feb4,383678312,0,0x0,8
tick,0x7ffe67f8feb4,383693129,0,0x0,8
tick,0x7ffe67f8feb4,383708851,0,0x0,8
tick,0x7ffe67f8feb4,383724854,0,0x0,8
tick,0x7ffe67f8feb4,383740872,0,0x0,8
tick,0x7ffe67f8feb4,383756742,0,0x0,8
tick,0x7ffe67f8feb4,383772789,0,0x0,8
tick,0x7ffe67f8feb4,383788771,0,0x0,8
tick,0x7ffe67f8feb4,383804407,0,0x0,8
tick,0x7ffe67f8feb4,383820235,0,0x0,8
tick,0x7ffe67f8feb4,383836239,0,0x0,8
tick,0x7ffe67f8feb4,383852271,0,0x0,8
tick,0x7ffe67f8feb4,383867457,0,0x0,8
tick,0x7ffe67f8feb4,383883272,0,0x0,8
tick,0x7ffe67f8feb4,383899245,0,0x0,8
tick,0x7ffe67f8feb4,383915240,0,0x0,8
tick,0x7ffe67f8feb4,383931294,0,0x0,8
tick,0x7ffe67f8feb4,383947243,0,0x0,8
tick,0x7ffe67f8feb4,383963246,0,0x0,8
tick,0x7ffe67f8feb4,383979270,0,0x0,8
tick,0x7ffe67f8feb4,383994951,0,0x0,8
tick,0x7ffe67f8feb4,384010896,0,0x0,8
tick,0x7ffe67f8feb4,384026479,0,0x0,8
tick,0x7ffe67f8feb4,384042491,0,0x0,8
tick,0x7ffe67f8feb4,384058493,0,0x0,8
tick,0x7ffe67f8feb4,384074662,0,0x0,8
tick,0x7ffe67f8feb4,384090510,0,0x0,8
tick,0x7ffe67f8feb4,384106508,0,0x0,8
tick,0x7ffe67f8feb4,384124347,0,0x0,8
tick,0x7ffe67f8feb4,384138921,0,0x0,8
tick,0x7ffe67f8feb4,384154519,0,0x0,8
tick,0x7ffe67f8feb4,384171614,0,0x0,8
tick,0x7ffe67f8feb4,384185879,0,0x0,8
tick,0x7ffe67f8feb4,384201040,0,0x0,8
tick,0x7ffe67f8feb4,384216611,0,0x0,8
tick,0x7ffe67f8feb4,384232032,0,0x0,8
tick,0x7ffe67f8feb4,384248048,0,0x0,8
tick,0x7ffe67f8feb4,384264046,0,0x0,8
tick,0x7ffe67f8feb4,384280052,0,0x0,8
tick,0x7ffe67f8feb4,384295460,0,0x0,8
tick,0x7ffe67f8feb4,384311291,0,0x0,8
tick,0x7ffe67f8feb4,384327281,0,0x0,8
tick,0x7ffe67f8feb4,384342353,0,0x0,8
tick,0x7ffe67f8feb4,384358296,0,0x0,8
tick,0x7ffe67f8feb4,384374214,0,0x0,8
tick,0x7ffe67f8feb4,384390203,0,0x0,8
tick,0x7ffe67f8feb4,384406250,0,0x0,8
tick,0x7ffe67f8feb4,384422184,0,0x0,8
tick,0x7ffe67f8feb4,384438201,0,0x0,8
tick,0x7ffe67f8feb4,384454207,0,0x0,8
tick,0x7ffe67f8feb4,384470217,0,0x0,8
tick,0x7ffe67f8feb4,384485984,0,0x0,8
tick,0x7ffe67f8feb4,384502008,0,0x0,8
tick,0x7ffe67f8feb4,384517202,0,0x0,8
tick,0x7ffe67f8feb4,384531957,0,0x0,8
tick,0x7ffe67f8feb4,384547244,0,0x0,8
tick,0x7ffe67f8feb4,384563275,0,0x0,8
tick,0x7ffe67f8feb4,384578023,0,0x0,8
tick,0x7ffe67f8feb4,384593248,0,0x0,8
tick,0x7ffe67f8feb4,384609007,0,0x0,8
tick,0x7ffe67f8feb4,384624993,0,0x0,8
tick,0x7ffe67f8feb4,384640992,0,0x0,8
tick,0x7ffe67f8feb4,384657008,0,0x0,8
tick,0x7ffe67f8feb4,384672965,0,0x0,8
tick,0x7ffe67f8feb4,384688996,0,0x0,8
tick,0x7ffe67f8feb4,384705020,0,0x0,8
tick,0x7ffe67f8feb4,384721030,0,0x0,8
tick,0x7ffe67f8feb4,384736363,0,0x0,8
tick,0x7ffe67f8feb4,384752003,0,0x0,8
tick,0x7ffe67f8feb4,384767020,0,0x0,8
tick,0x7ffe67f8feb4,384782280,0,0x0,8
tick,0x7ffe67f8feb4,384798050,0,0x0,8
tick,0x7ffe67f8feb4,384814120,0,0x0,8
tick,0x7ffe67f8feb4,384829377,0,0x0,8
tick,0x7ffe67f8feb4,384844202,0,0x0,8
tick,0x7ffe67f8feb4,384860071,0,0x0,8
tick,0x7ffe67f8feb4,384875196,0,0x0,8
tick,0x7ffe67f8feb4,384890921,0,0x0,8
tick,0x7ffe67f8feb4,384906083,0,0x0,8
tick,0x7ffe67f8feb4,384921083,0,0x0,8
tick,0x7ffe67f8feb4,384935847,0,0x0,8
tick,0x7ffe67f8feb4,384951092,0,0x0,8
tick,0x7ffe67f8feb4,384966635,0,0x0,8
tick,0x7ffe67f8feb4,384982136,0,0x0,8
tick,0x7ffe67f8feb4,384998114,0,0x0,8
tick,0x7ffe67f8feb4,385014156,0,0x0,8
tick,0x7ffe67f8feb4,385030171,0,0x0,8
tick,0x7ffe67f8feb4,385045917,0,0x0,8
tick,0x7ffe67f8feb4,385061078,0,0x0,8
tick,0x7ffe67f8feb4,385077099,0,0x0,8
tick,0x7ffe67f8feb4,385093103,0,0x0,8
tick,0x7ffe67f8feb4,385108098,0,0x0,8
tick,0x7ffe67f8feb4,385124145,0,0x0,8
tick,0x7ffe67f8feb4,385139430,0,0x0,8
tick,0x7ffe67f8feb4,385155063,0,0x0,8
tick,0x7ffe67f8feb4,385170586,0,0x0,8
tick,0x7ffe67f8feb4,385186883,0,0x0,8
tick,0x7ffe67f8feb4,385202156,0,0x0,8
tick,0x7ffe67f8feb4,385217595,0,0x0,8
tick,0x7ffe67f8feb4,385233374,0,0x0,8
tick,0x7ffe67f8feb4,385249392,0,0x0,8
tick,0x7ffe67f8feb4,385265480,0,0x0,8
tick,0x7ffe67f8feb4,385281435,0,0x0,8
tick,0x7ffe67f8feb4,385297569,0,0x0,8
tick,0x7ffe67f8feb4,385313340,0,0x0,8
tick,0x7ffe67f8feb4,385328499,0,0x0,8
tick,0x7ffe67f8feb4,385343657,0,0x0,8
tick,0x7ffe67f8feb4,385359426,0,0x0,8
tick,0x7ffe67f8feb4,385374892,0,0x0,8
tick,0x7ffe67f8feb4,385390165,0,0x0,8
tick,0x7ffe67f8feb4,385405891,0,0x0,8
tick,0x7ffe67f8feb4,385420889,0,0x0,8
tick,0x7ffe67f8feb4,385436205,0,0x0,8
tick,0x7ffe67f8feb4,385452589,0,0x0,8
tick,0x7ffe67f8feb4,385467733,0,0x0,8
tick,0x7ffe67f8feb4,385483183,0,0x0,8
tick,0x7ffe67f8feb4,385499257,0,0x0,8
tick,0x7ffe67f8feb4,385515146,0,0x0,8
tick,0x7ffe67f8feb4,385531188,0,0x0,8
tick,0x7ffe67f8feb4,385546171,0,0x0,8
tick,0x7ffe67f8feb4,385562175,0,0x0,8
tick,0x7ffe67f8feb4,385577173,0,0x0,8
tick,0x7ffe67f8feb4,385593191,0,0x0,8
tick,0x7ffe67f8feb4,385608815,0,0x0,8
tick,0x7ffe67f8feb4,385623978,0,0x0,8
tick,0x7ffe67f8feb4,385638880,0,0x0,8
tick,0x7ffe67f8feb4,385654884,0,0x0,8
tick,0x7ffe67f8feb4,385670921,0,0x0,8
tick,0x7ffe67f8feb4,385686048,0,0x0,8
tick,0x7ffe67f8feb4,385702097,0,0x0,8
tick,0x7ffe67f8feb4,385717103,0,0x0,8
tick,0x7ffe67f8feb4,385733208,0,0x0,8
tick,0x7ffe67f8feb4,385749116,0,0x0,8
tick,0x7ffe67f8feb4,385765245,0,0x0,8
tick,0x7ffe67f8feb4,385781408,0,0x0,8
tick,0x7ffe67f8feb4,385797183,0,0x0,8
tick,0x7ffe67f8feb4,385813109,0,0x0,8
tick,0x7ffe67f8feb4,385829132,0,0x0,8
tick,0x7ffe67f8feb4,385845132,0,0x0,8
tick,0x7ffe67f8feb4,385860744,0,0x0,8
tick,0x7ffe67f8feb4,385875539,0,0x0,8
tick,0x7ffe67f8feb4,385891179,0,0x0,8
tick,0x7ffe67f8feb4,385907161,0,0x0,8
tick,0x7ffe67f8feb4,385923152,0,0x0,8
tick,0x7ffe67f8feb4,385939151,0,0x0,8
tick,0x7ffe67f8feb4,385955079,0,0x0,8
tick,0x7ffe67f8feb4,385970505,0,0x0,8
tick,0x7ffe67f8feb4,385986188,0,0x0,8
tick,0x7ffe67f8feb4,386002261,0,0x0,8
tick,0x7ffe67f8feb4,386018200,0,0x0,8
tick,0x7ffe67f8feb4,386033414,0,0x0,8
tick,0x7ffe67f8feb4,386049436,0,0x0,8
tick,0x7ffe67f8feb4,386065209,0,0x0,8
tick,0x7ffe67f8feb4,386081228,0,0x0,8
tick,0x7ffe67f8feb4,386097338,0,0x0,8
tick,0x7ffe67f8feb4,386113199,0,0x0,8
tick,0x7ffe67f8feb4,386129221,0,0x0,8
tick,0x7ffe67f8feb4,386145277,0,0x0,8
tick,0x7ffe67f8feb4,386161254,0,0x0,8
tick,0x7ffe67f8feb4,386176633,0,0x0,8
tick,0x7ffe67f8feb4,386192650,0,0x0,8
tick,0x7ffe67f8feb4,386208653,0,0x0,8
tick,0x7ffe67f8feb4,386224231,0,0x0,8
tick,0x7ffe67f8feb4,386240245,0,0x0,8
tick,0x7ffe67f8feb4,386256261,0,0x0,8
tick,0x7ffe67f8feb4,386272243,0,0x0,8
tick,0x7ffe67f8feb4,386288276,0,0x0,8
tick,0x7ffe67f8feb4,386304255,0,0x0,8
tick,0x7ffe67f8feb4,386320245,0,0x0,8
tick,0x7ffe67f8feb4,386336249,0,0x0,8
tick,0x7ffe67f8feb4,386352266,0,0x0,8
tick,0x7ffe67f8feb4,386368258,0,0x0,8
tick,0x7ffe67f8feb4,386384334,0,0x0,8
tick,0x7ffe67f8feb4,386400323,0,0x0,8
tick,0x7ffe67f8feb4,386416316,0,0x0,8
tick,0x7ffe67f8feb4,386432317,0,0x0,8
tick,0x7ffe67f8feb4,386447654,0,0x0,8
tick,0x7ffe67f8feb4,386463204,0,0x0,8
tick,0x7ffe67f8feb4,386478630,0,0x0,8
tick,0x7ffe67f8feb4,386493728,0,0x0,8
tick,0x7ffe67f8feb4,386509701,0,0x0,8
tick,0x7ffe67f8feb4,386524981,0,0x0,8
tick,0x7ffe67f8feb4,386540149,0,0x0,8
tick,0x7ffe67f8feb4,386555867,0,0x0,8
tick,0x7ffe67f8feb4,386571303,0,0x0,8
tick,0x7ffe67f8feb4,386587500,0,0x0,8
tick,0x7ffe67f8feb4,386602267,0,0x0,8
tick,0x7ffe67f8feb4,386617284,0,0x0,8
tick,0x7ffe67f8feb4,386633258,0,0x0,8
tick,0x7ffe67f8feb4,386648835,0,0x0,8
tick,0x7ffe67f8feb4,386664836,0,0x0,8
tick,0x7ffe67f8feb4,386680064,0,0x0,8
tick,0x7ffe67f8feb4,386696115,0,0x0,8
tick,0x7ffe67f8feb4,386711166,0,0x0,8
tick,0x7ffe67f8feb4,386726979,0,0x0,8
tick,0x7ffe67f8feb4,386741700,0,0x0,8
tick,0x7ffe67f8feb4,386757754,0,0x0,8
tick,0x7ffe67f8feb4,386772971,0,0x0,8
tick,0x7ffe67f8feb4,386787924,0,0x0,8
tick,0x7ffe67f8feb4,386803437,0,0x0,8
tick,0x7ffe67f8feb4,386819199,0,0x0,8
tick,0x7ffe67f8feb4,386835164,0,0x0,8
tick,0x7ffe67f8feb4,386850820,0,0x0,8
tick,0x7ffe67f8feb4,386866257,0,0x0,8
tick,0x7ffe67f8feb4,386881799,0,0x0,8
tick,0x7ffe67f8feb4,386897986,0,0x0,8
tick,0x7ffe67f8feb4,386913663,0,0x0,8
tick,0x7ffe67f8feb4,386929652,0,0x0,8
tick,0x7ffe67f8feb4,386945651,0,0x0,8
tick,0x7ffe67f8feb4,386961682,0,0x0,8
tick,0x7ffe67f8feb4,386977693,0,0x0,8
tick,0x7ffe67f8feb4,386993704,0,0x0,8
tick,0x7ffe67f8feb4,387009712,0,0x0,8
tick,0x7ffe67f8feb4,387025727,0,0x0,8
tick,0x7ffe67f8feb4,387041841,0,0x0,8
tick,0x7ffe67f8feb4,387057010,0,0x0,8
tick,0x7ffe67f8feb4,387073267,0,0x0,8
tick,0x7ffe67f8feb4,387089310,0,0x0,8
tick,0x7ffe67f8feb4,387104542,0,0x0,8
tick,0x7ffe67f8feb4,387119806,0,0x0,8
tick,0x7ffe67f8feb4,387134795,0,0x0,8
tick,0x7ffe67f8feb4,387150013,0,0x0,8
tick,0x7ffe67f8feb4,387166112,0,0x0,8
tick,0x7ffe67f8feb4,387181456,0,0x0,8
tick,0x7ffe67f8feb4,387196997,0,0x0,8
tick,0x7ffe67f8feb4,387212706,0,0x0,8
tick,0x7ffe67f8feb4,387228580,0,0x0,8
tick,0x7ffe67f8feb4,387244272,0,0x0,8
tick,0x7ffe67f8feb4,387259450,0,0x0,8
tick,0x7ffe67f8feb4,387274954,0,0x0,8
tick,0x7ffe67f8feb4,387290439,0,0x0,8
tick,0x7ffe67f8feb4,387306190,0,0x0,8
tick,0x7ffe67f8feb4,387322052,0,0x0,8
tick,0x7ffe67f8feb4,387337433,0,0x0,8
tick,0x7ffe67f8feb4,387353592,0,0x0,8
tick,0x7ffe67f8feb4,387368423,0,0x0,8
tick,0x7ffe67f8feb4,387384379,0,0x0,8
tick,0x7ffe67f8feb4,387400331,0,0x0,8
tick,0x7ffe67f8feb4,387415810,0,0x0,8
tick,0x7ffe67f8feb4,387431197,0,0x0,8
tick,0x7ffe67f8feb4,387447386,0,0x0,8
tick,0x7ffe67f8feb4,387462928,0,0x0,8
tick,0x7ffe67f8feb4,387478147,0,0x0,8
tick,0x7ffe67f8feb4,387492949,0,0x0,8
tick,0x7ffe67f8feb4,387508838,0,0x0,8
tick,0x7ffe67f8feb4,387524892,0,0x0,8
tick,0x7ffe67f8feb4,387540847,0,0x0,8
tick,0x7ffe67f8feb4,387556840,0,0x0,8
tick,0x7ffe67f8feb4,387572858,0,0x0,8
tick,0x7ffe67f8feb4,387588848,0,0x0,8
tick,0x7ffe67f8feb4,387604851,0,0x0,8
tick,0x7ffe67f8feb4,387620851,0,0x0,8
tick,0x7ffe67f8feb4,387636853,0,0x0,8
tick,0x7ffe67f8feb4,387652846,0,0x0,8
tick,0x7ffe67f8feb4,387668840,0,0x0,8
tick,0x7ffe67f8feb4,387684869,0,0x0,8
tick,0x7ffe67f8feb4,387700911,0,0x0,8
tick,0x7ffe67f8feb4,387716562,0,0x0,8
tick,0x7ffe67f8feb4,387731963,0,0x0,8
tick,0x7ffe67f8feb4,387747943,0,0x0,8
tick,0x7ffe67f8feb4,387763957,0,0x0,8
tick,0x7ffe67f8feb4,387779918,0,0x0,8
tick,0x7ffe67f8feb4,387795457,0,0x0,8
tick,0x7ffe67f8feb4,387810471,0,0x0,8
tick,0x7ffe67f8feb4,387825683,0,0x0,8
tick,0x7ffe67f8feb4,387840894,0,0x0,8
tick,0x7ffe67f8feb4,387856856,0,0x0,8
tick,0x7ffe67f8feb4,387872521,0,0x0,8
tick,0x7ffe67f8feb4,387888237,0,0x0,8
tick,0x7ffe67f8feb4,387904215,0,0x0,8
tick,0x7ffe67f8feb4,387920166,0,0x0,8
tick,0x7ffe67f8feb4,387936164,0,0x0,8
tick,0x7ffe67f8feb4,387952156,0,0x0,8
tick,0x7ffe67f8feb4,387967392,0,0x0,8
tick,0x7ffe67f8feb4,387983425,0,0x0,8
tick,0x7ffe67f8feb4,387998993,0,0x0,8
tick,0x7ffe67f8feb4,388014610,0,0x0,8
tick,0x7ffe67f8feb4,388029989,0,0x0,8
tick,0x7ffe67f8feb4,388045434,0,0x0,8
tick,0x7ffe67f8feb4,388060774,0,0x0,8
tick,0x7ffe67f8feb4,388076490,0,0x0,8
tick,0x7ffe67f8feb4,388091643,0,0x0,8
tick,0x7ffe67f8feb4,388106521,0,0x0,8
tick,0x7ffe67f8feb4,388121650,0,0x0,8
tick,0x7ffe67f8feb4,388137009,0,0x0,8
tick,0x7ffe67f8feb4,388151770,0,0x0,8
tick,0x7ffe67f8feb4,388167051,0,0x0,8
tick,0x7ffe67f8feb4,388182547,0,0x0,8
tick,0x7ffe67f8feb4,388197726,0,0x0,8
tick,0x7ffe67f8feb4,388213304,0,0x0,8
tick,0x7ffe67f8feb4,388228288,0,0x0,8
tick,0x7ffe67f8feb4,388244165,0,0x0,8
tick,0x7ffe67f8feb4,388259280,0,0x0,8
tick,0x7ffe67f8feb4,388275093,0,0x0,8
tick,0x7ffe67f8feb4,388290494,0,0x0,8
tick,0x7ffe67f8feb4,388306520,0,0x0,8
tick,0x7ffe67f8feb4,388321711,0,0x0,8
tick,0x7ffe67f8feb4,388337173,0,0x0,8
tick,0x7ffe67f8feb4,388352603,0,0x0,8
tick,0x7ffe67f8feb4,388367768,0,0x0,8
tick,0x7ffe67f8feb4,388383181,0,0x0,8
tick,0x7ffe67f8feb4,388398731,0,0x0,8
tick,0x7ffe67f8feb4,388414826,0,0x0,8
tick,0x7ffe67f8feb4,388430699,0,0x0,8
tick,0x7ffe67f8feb4,388446642,0,0x0,8
tick,0x7ffe67f8feb4,388462059,0,0x0,8
tick,0x7ffe67f8feb4,388477981,0,0x0,8
tick,0x7ffe67f8feb4,388493281,0,0x0,8
tick,0x7ffe67f8feb4,388508605,0,0x0,8
tick,0x7ffe67f8feb4,388524682,0,0x0,8
tick,0x7ffe67f8feb4,388540498,0,0x0,8
tick,0x7ffe67f8feb4,388555573,0,0x0,8
tick,0x7ffe67f8feb4,388571006,0,0x0,8
tick,0x7ffe67f8feb4,388586113,0,0x0,8
tick,0x7ffe67f8feb4,388601867,0,0x0,8
tick,0x7ffe67f8feb4,388617810,0,0x0,8
tick,0x7ffe67f8feb4,388633493,0,0x0,8
tick,0x7ffe67f8feb4,388649112,0,0x0,8
tick,0x7ffe67f8feb4,388664936,0,0x0,8
tick,0x7ffe67f8feb4,388680673,0,0x0,8
tick,0x7ffe67f8feb4,388696904,0,0x0,8
tick,0x7ffe67f8feb4,388711650,0,0x0,8
tick,0x7ffe67f8feb4,388726925,0,0x0,8
tick,0x7ffe67f8feb4,388742353,0,0x0,8
tick,0x7ffe67f8feb4,388758428,0,0x0,8
tick,0x7ffe67f8feb4,388773826,0,0x0,8
tick,0x7ffe67f8feb4,388789469,0,0x0,8
tick,0x7ffe67f8feb4,388805489,0,0x0,8
tick,0x7ffe67f8feb4,388821602,0,0x0,8
tick,0x7ffe67f8feb4,388836811,0,0x0,8
tick,0x7ffe67f8feb4,388852843,0,0x0,8
tick,0x7ffe67f8feb4,388868331,0,0x0,8
tick,0x7ffe67f8feb4,388883835,0,0x0,8
tick,0x7ffe67f8feb4,388899726,0,0x0,8
tick,0x7ffe67f8feb4,388914807,0,0x0,8
tick,0x7ffe67f8feb4,388929769,0,0x0,8
tick,0x7ffe67f8feb4,388945767,0,0x0,8
tick,0x7ffe67f8feb4,388960774,0,0x0,8
tick,0x7ffe67f8feb4,388975821,0,0x0,8
tick,0x7ffe67f8feb4,388991885,0,0x0,8
tick,0x7ffe67f8feb4,389007916,0,0x0,8
tick,0x7ffe67f8feb4,389024007,0,0x0,8
tick,0x7ffe67f8feb4,389039936,0,0x0,8
tick,0x7ffe67f8feb4,389055610,0,0x0,8
tick,0x7ffe67f8feb4,389071567,0,0x0,8
tick,0x7ffe67f8feb4,389086799,0,0x0,8
tick,0x7ffe67f8feb4,389102704,0,0x0,8
tick,0x7ffe67f8feb4,389118651,0,0x0,8
tick,0x7ffe67f8feb4,389134320,0,0x0,8
tick,0x7ffe67f8feb4,389150650,0,0x0,8
tick,0x7ffe67f8feb4,389166511,0,0x0,8
tick,0x7ffe67f8feb4,389182378,0,0x0,8
tick,0x7ffe67f8feb4,389198222,0,0x0,8
tick,0x7ffe67f8feb4,389213951,0,0x0,8
tick,0x7ffe67f8feb4,389229582,0,0x0,8
tick,0x7ffe67f8feb4,389245007,0,0x0,8
tick,0x7ffe67f8feb4,389260303,0,0x0,8
tick,0x7ffe67f8feb4,389276297,0,0x0,8
tick,0x7ffe67f8feb4,389291850,0,0x0,8
tick,0x7ffe67f8feb4,389307393,0,0x0,8
tick,0x7ffe67f8feb4,389322953,0,0x0,8
tick,0x7ffe67f8feb4,389338269,0,0x0,8
tick,0x7ffe67f8feb4,389354197,0,0x0,8
tick,0x7ffe67f8feb4,389369720,0,0x0,8
tick,0x7ffe67f8feb4,389385724,0,0x0,8
tick,0x7ffe67f8feb4,389401708,0,0x0,8
tick,0x7ffe67f8feb4,389417787,0,0x0,8
tick,0x7ffe67f8feb4,389433456,0,0x0,8
tick,0x7ffe67f8feb4,389449377,0,0x0,8
tick,0x7ffe67f8feb4,389465352,0,0x0,8
tick,0x7ffe67f8feb4,389481107,0,0x0,8
tick,0x7ffe67f8feb4,389496736,0,0x0,8
tick,0x7ffe67f8feb4,389512286,0,0x0,8
tick,0x7ffe67f8feb4,389528338,0,0x0,8
tick,0x7ffe67f8feb4,389543841,0,0x0,8
tick,0x7ffe67f8feb4,389558793,0,0x0,8
tick,0x7ffe67f8feb4,389575287,0,0x0,8
tick,0x7ffe67f8feb4,389590673,0,0x0,8
tick,0x7ffe67f8feb4,389606451,0,0x0,8
tick,0x7ffe67f8feb4,389622252,0,0x0,8
tick,0x7ffe67f8feb4,389637889,0,0x0,8
tick,0x7ffe67f8feb4,389653255,0,0x0,8
tick,0x7ffe67f8feb4,389669244,0,0x0,8
tick,0x7ffe67f8feb4,389684792,0,0x0,8
tick,0x7ffe67f8feb4,389700852,0,0x0,8
tick,0x7ffe67f8feb4,389716558,0,0x0,8
tick,0x7ffe67f8feb4,389732349,0,0x0,8
tick,0x7ffe67f8feb4,389748461,0,0x0,8
tick,0x7ffe67f8feb4,389763902,0,0x0,8
tick,0x7ffe67f8feb4,389779089,0,0x0,8
tick,0x7ffe67f8feb4,389794295,0,0x0,8
tick,0x7ffe67f8feb4,389809659,0,0x0,8
tick,0x7ffe67f8feb4,389825910,0,0x0,8
tick,0x7ffe67f8feb4,389841024,0,0x0,8
tick,0x7ffe67f8feb4,389857154,0,0x0,8
tick,0x7ffe67f8feb4,389872833,0,0x0,8
tick,0x7ffe67f8feb4,389887950,0,0x0,8
tick,0x7ffe67f8feb4,389904028,0,0x0,8
tick,0x7ffe67f8feb4,389919768,0,0x0,8
tick,0x7ffe67f8feb4,389935686,0,0x0,8
tick,0x7ffe67f8feb4,389951680,0,0x0,8
tick,0x7ffe67f8feb4,389967670,0,0x0,8
tick,0x7ffe67f8feb4,389983257,0,0x0,8
tick,0x7ffe67f8feb4,389999272,0,0x0,8
tick,0x7ffe67f8feb4,390015282,0,0x0,8
tick,0x7ffe67f8feb4,390030585,0,0x0,8
tick,0x7ffe67f8feb4,390046883,0,0x0,8
tick,0x7ffe67f8feb4,390062051,0,0x0,8
tick,0x7ffe67f8feb4,390078050,0,0x0,8
tick,0x7ffe67f8feb4,390093406,0,0x0,8
tick,0x7ffe67f8feb4,390108820,0,0x0,8
tick,0x7ffe67f8feb4,390124874,0,0x0,8
tick,0x7ffe67f8feb4,390140094,0,0x0,8
tick,0x7ffe67f8feb4,390155965,0,0x0,8
tick,0x7ffe67f8feb4,390171177,0,0x0,8
tick,0x7ffe67f8feb4,390186952,0,0x0,8
tick,0x7ffe67f8feb4,390202640,0,0x0,8
tick,0x7ffe67f8feb4,390218412,0,0x0,8
tick,0x7ffe67f8feb4,390233841,0,0x0,8
tick,0x7ffe67f8feb4,390249322,0,0x0,8
tick,0x7ffe67f8feb4,390264942,0,0x0,8
tick,0x7ffe67f8feb4,390280668,0,0x0,8
tick,0x7ffe67f8feb4,390295801,0,0x0,8
tick,0x7ffe67f8feb4,390311058,0,0x0,8
tick,0x7ffe67f8feb4,390327219,0,0x0,8
tick,0x7ffe67f8feb4,390342341,0,0x0,8
tick,0x7ffe67f8feb4,390357659,0,0x0,8
tick,0x7ffe67f8feb4,390374035,0,0x0,8
tick,0x7ffe67f8feb4,390389711,0,0x0,8
tick,0x7ffe67f8feb4,390404756,0,0x0,8
tick,0x7ffe67f8feb4,390421033,0,0x0,8
tick,0x7ffe67f8feb4,390436018,0,0x0,8
tick,0x7ffe67f8feb4,390451476,0,0x0,8
tick,0x7ffe67f8feb4,390466562,0,0x0,8
tick,0x7ffe67f8feb4,390481751,0,0x0,8
tick,0x7ffe67f8feb4,390497562,0,0x0,8
tick,0x7ffe67f8feb4,390513494,0,0x0,8
tick,0x7ffe67f8feb4,390528618,0,0x0,8
tick,0x7ffe67f8feb4,390543756,0,0x0,8
tick,0x7ffe67f8feb4,390559301,0,0x0,8
tick,0x7ffe67f8feb4,390575201,0,0x0,8
tick,0x7ffe67f8feb4,390590434,0,0x0,8
tick,0x7ffe67f8feb4,390606569,0,0x0,8
tick,0x7ffe67f8feb4,390622782,0,0x0,8
tick,0x7ffe67f8feb4,390638270,0,0x0,8
tick,0x7ffe67f8feb4,390653657,0,0x0,8
tick,0x7ffe67f8feb4,390668711,0,0x0,8
tick,0x7ffe67f8feb4,390684455,0,0x0,8
tick,0x7ffe67f8feb4,390700176,0,0x0,8
tick,0x7ffe67f8feb4,390715639,0,0x0,8
tick,0x7ffe67f8feb4,390731798,0,0x0,8
tick,0x7ffe67f8feb4,390747663,0,0x0,8
tick,0x7ffe67f8feb4,390763189,0,0x0,8
tick,0x7ffe67f8feb4,390778991,0,0x0,8
tick,0x7ffe67f8feb4,390794864,0,0x0,8
tick,0x7ffe67f8feb4,390810532,0,0x0,8
tick,0x7ffe67f8feb4,390826336,0,0x0,8
tick,0x7ffe67f8feb4,390841454,0,0x0,8
tick,0x7ffe67f8feb4,390857546,0,0x0,8
tick,0x7ffe67f8feb4,390873236,0,0x0,8
tick,0x7ffe67f8feb4,390889355,0,0x0,8
tick,0x7ffe67f8feb4,390904584,0,0x0,8
tick,0x7ffe67f8feb4,390920537,0,0x0,8
tick,0x7ffe67f8feb4,390936513,0,0x0,8
tick,0x7ffe67f8feb4,390952486,0,0x0,8
tick,0x7ffe67f8feb4,390968467,0,0x0,8
tick,0x7ffe67f8feb4,390983885,0,0x0,8
tick,0x7ffe67f8feb4,391000036,0,0x0,8
tick,0x7ffe67f8feb4,391015783,0,0x0,8
tick,0x7ffe67f8feb4,391031634,0,0x0,8
tick,0x7ffe67f8feb4,391047642,0,0x0,8
tick,0x7ffe67f8feb4,391063102,0,0x0,8
tick,0x7ffe67f8feb4,391078177,0,0x0,8
tick,0x7ffe67f8feb4,391093514,0,0x0,8
tick,0x7ffe67f8feb4,391108803,0,0x0,8
tick,0x7ffe67f8feb4,391124632,0,0x0,8
tick,0x7ffe67f8feb4,391139364,0,0x0,8
tick,0x7ffe67f8feb4,391154737,0,0x0,8
tick,0x7ffe67f8feb4,391170745,0,0x0,8
tick,0x7ffe67f8feb4,391186849,0,0x0,8
tick,0x7ffe67f8feb4,391202798,0,0x0,8
tick,0x7ffe67f8feb4,391217748,0,0x0,8
tick,0x7ffe67f8feb4,391233593,0,0x0,8
tick,0x7ffe67f8feb4,391248860,0,0x0,8
tick,0x7ffe67f8feb4,391264740,0,0x0,8
tick,0x7ffe67f8feb4,391281015,0,0x0,8
tick,0x7ffe67f8feb4,391296587,0,0x0,8
tick,0x7ffe67f8feb4,391312234,0,0x0,8
tick,0x7ffe67f8feb4,391328138,0,0x0,8
tick,0x7ffe67f8feb4,391343977,0,0x0,8
tick,0x7ffe67f8feb4,391359240,0,0x0,8
tick,0x7ffe67f8feb4,391374979,0,0x0,8
tick,0x7ffe67f8feb4,391390718,0,0x0,8
tick,0x7ffe67f8feb4,391406428,0,0x0,8
tick,0x7ffe67f8feb4,391422063,0,0x0,8
tick,0x7ffe67f8feb4,391438068,0,0x0,8
tick,0x7ffe67f8feb4,391454142,0,0x0,8
tick,0x7ffe67f8feb4,391470083,0,0x0,8
tick,0x7ffe67f8feb4,391486237,0,0x0,8
tick,0x7ffe67f8feb4,391501616,0,0x0,8
tick,0x7ffe67f8feb4,391517376,0,0x0,8
tick,0x7ffe67f8feb4,391532606,0,0x0,8
tick,0x7ffe67f8feb4,391548654,0,0x0,8
tick,0x7ffe67f8feb4,391564907,0,0x0,8
tick,0x7ffe67f8feb4,391580291,0,0x0,8
tick,0x7ffe67f8feb4,391595502,0,0x0,8
tick,0x7ffe67f8feb4,391610625,0,0x0,8
tick,0x7ffe67f8feb4,391626329,0,0x0,8
tick,0x7ffe67f8feb4,391641754,0,0x0,8
tick,0x7ffe67f8feb4,391656963,0,0x0,8
tick,0x7ffe67f8feb4,391672831,0,0x0,8
tick,0x7ffe67f8feb4,391688505,0,0x0,8
tick,0x7ffe67f8feb4,391704489,0,0x0,8
tick,0x7ffe67f8feb4,391720657,0,0x0,8
tick,0x7ffe67f8feb4,391736613,0,0x0,8
tick,0x7ffe67f8feb4,391752139,0,0x0,8
tick,0x7ffe67f8feb4,391768365,0,0x0,8
tick,0x7ffe67f8feb4,391783702,0,0x0,8
tick,0x7ffe67f8feb4,391798800,0,0x0,8
tick,0x7ffe67f8feb4,391814031,0,0x0,8
tick,0x7ffe67f8feb4,391829693,0,0x0,8
tick,0x7ffe67f8feb4,391845842,0,0x0,8
tick,0x7ffe67f8feb4,391860958,0,0x0,8
tick,0x7ffe67f8feb4,391876951,0,0x0,8
tick,0x7ffe67f8feb4,391892861,0,0x0,8
tick,0x7ffe67f8feb4,391908672,0,0x0,8
tick,0x7ffe67f8feb4,391924513,0,0x0,8
tick,0x7ffe67f8feb4,391940471,0,0x0,8
tick,0x7ffe67f8feb4,391956462,0,0x0,8
tick,0x7ffe67f8feb4,391972444,0,0x0,8
tick,0x7ffe67f8feb4,391988449,0,0x0,8
tick,0x7ffe67f8feb4,392004218,0,0x0,8
tick,0x7ffe67f8feb4,392019685,0,0x0,8
tick,0x7ffe67f8feb4,392035016,0,0x0,8
tick,0x7ffe67f8feb4,392049845,0,0x0,8
tick,0x7ffe67f8feb4,392065073,0,0x0,8
tick,0x7ffe67f8feb4,392080388,0,0x0,8
tick,0x7ffe67f8feb4,392096335,0,0x0,8
tick,0x7ffe67f8feb4,392111688,0,0x0,8
tick,0x7ffe67f8feb4,392126527,0,0x0,8
tick,0x7ffe67f8feb4,392142181,0,0x0,8
tick,0x7ffe67f8feb4,392157998,0,0x0,8
tick,0x7ffe67f8feb4,392173813,0,0x0,8
tick,0x7ffe67f8feb4,392189032,0,0x0,8
tick,0x7ffe67f8feb4,392205407,0,0x0,8
tick,0x7ffe67f8feb4,392221494,0,0x0,8
tick,0x7ffe67f8feb4,392237215,0,0x0,8
tick,0x7ffe67f8feb4,392252615,0,0x0,8
tick,0x7ffe67f8feb4,392268317,0,0x0,8
tick,0x7ffe67f8feb4,392283921,0,0x0,8
tick,0x7ffe67f8feb4,392299576,0,0x0,8
tick,0x7ffe67f8feb4,392315169,0,0x0,8
tick,0x7ffe67f8feb4,392330584,0,0x0,8
tick,0x7ffe67f8feb4,392345919,0,0x0,8
tick,0x7ffe67f8feb4,392361934,0,0x0,8
tick,0x7ffe67f8feb4,392377740,0,0x0,8
tick,0x7ffe67f8feb4,392393675,0,0x0,8
tick,0x7ffe67f8feb4,392409168,0,0x0,8
tick,0x7ffe67f8feb4,392425193,0,0x0,8
tick,0x7ffe67f8feb4,392441195,0,0x0,8
tick,0x7ffe67f8feb4,392457227,0,0x0,8
tick,0x7ffe67f8feb4,392473193,0,0x0,8
tick,0x7ffe67f8feb4,392489189,0,0x0,8
tick,0x7ffe67f8feb4,392504692,0,0x0,8
tick,0x7ffe67f8feb4,392520450,0,0x0,8
tick,0x7ffe67f8feb4,392535578,0,0x0,8
tick,0x7ffe67f8feb4,392551216,0,0x0,8
tick,0x7ffe67f8feb4,392566402,0,0x0,8
tick,0x7ffe67f8feb4,392581733,0,0x0,8
tick,0x7ffe67f8feb4,392596763,0,0x0,8
tick,0x7ffe67f8feb4,392612741,0,0x0,8
tick,0x7ffe67f8feb4,392628343,0,0x0,8
tick,0x7ffe67f8feb4,392644311,0,0x0,8
tick,0x7ffe67f8feb4,392659250,0,0x0,8
tick,0x7ffe67f8feb4,392675240,0,0x0,8
tick,0x7ffe67f8feb4,392691232,0,0x0,8
tick,0x7ffe67f8feb4,392707499,0,0x0,8
tick,0x7ffe67f8feb4,392723251,0,0x0,8
tick,0x7ffe67f8feb4,392739261,0,0x0,8
tick,0x7ffe67f8feb4,392755237,0,0x0,8
tick,0x7ffe67f8feb4,392771376,0,0x0,8
tick,0x7ffe67f8feb4,392787399,0,0x0,8
tick,0x7ffe67f8feb4,392803470,0,0x0,8
tick,0x7ffe67f8feb4,392819261,0,0x0,8
tick,0x7ffe67f8feb4,392835183,0,0x0,8
tick,0x7ffe67f8feb4,392851147,0,0x0,8
tick,0x7ffe67f8feb4,392867150,0,0x0,8
tick,0x7ffe67f8feb4,392883223,0,0x0,8
tick,0x7ffe67f8feb4,392899267,0,0x0,8
tick,0x7ffe67f8feb4,392915244,0,0x0,8
tick,0x7ffe67f8feb4,392931271,0,0x0,8
tick,0x7ffe67f8feb4,392947278,0,0x0,8
tick,0x7ffe67f8feb4,392963253,0,0x0,8
tick,0x7ffe67f8feb4,392979243,0,0x0,8
tick,0x7ffe67f8feb4,392995249,0,0x0,8
tick,0x7ffe67f8feb4,393010411,0,0x0,8
tick,0x7ffe67f8feb4,393025786,0,0x0,8
tick,0x7ffe67f8feb4,393041815,0,0x0,8
tick,0x7ffe67f8feb4,393057486,0,0x0,8
tick,0x7ffe67f8feb4,393073326,0,0x0,8
tick,0x7ffe67f8feb4,393089296,0,0x0,8
tick,0x7ffe67f8feb4,393107589,0,0x0,8
tick,0x7ffe67f8feb4,393121312,0,0x0,8
tick,0x7ffe67f8feb4,393137580,0,0x0,8
tick,0x7ffe67f8feb4,393153301,0,0x0,8
tick,0x7ffe67f8feb4,393169326,0,0x0,8
tick,0x7ffe67f8feb4,393185309,0,0x0,8
tick,0x7ffe67f8feb4,393201344,0,0x0,8
tick,0x7ffe67f8feb4,393216527,0,0x0,8
tick,0x7ffe67f8feb4,393232530,0,0x0,8
tick,0x7ffe67f8feb4,393248549,0,0x0,8
tick,0x7ffe67f8feb4,393263684,0,0x0,8
tick,0x7ffe67f8feb4,393279561,0,0x0,8
tick,0x7ffe67f8feb4,393294748,0,0x0,8
tick,0x7ffe67f8feb4,393310376,0,0x0,8
tick,0x7ffe67f8feb4,393325572,0,0x0,8
tick,0x7ffe67f8feb4,393341596,0,0x0,8
tick,0x7ffe67f8feb4,393357657,0,0x0,8
tick,0x7ffe67f8feb4,393373793,0,0x0,8
tick,0x7ffe67f8feb4,393389604,0,0x0,8
tick,0x7ffe67f8feb4,393405625,0,0x0,8
tick,0x7ffe67f8feb4,393421405,0,0x0,8
tick,0x7ffe67f8feb4,393437339,0,0x0,8
tick,0x7ffe67f8feb4,393452458,0,0x0,8
tick,0x7ffe67f8feb4,393468351,0,0x0,8
tick,0x7ffe67f8feb4,393484327,0,0x0,8
tick,0x7ffe67f8feb4,393500367,0,0x0,8
tick,0x7ffe67f8feb4,393515602,0,0x0,8
tick,0x7ffe67f8feb4,393530743,0,0x0,8
tick,0x7ffe67f8feb4,393546360,0,0x0,8
tick,0x7ffe67f8feb4,393561797,0,0x0,8
tick,0x7ffe67f8feb4,393577513,0,0x0,8
tick,0x7ffe67f8feb4,393593396,0,0x0,8
tick,0x7ffe67f8feb4,393609481,0,0x0,8
tick,0x7ffe67f8feb4,393624865,0,0x0,8
tick,0x7ffe67f8feb4,393640496,0,0x0,8
tick,0x7ffe67f8feb4,393656391,0,0x0,8
tick,0x7ffe67f8feb4,393671953,0,0x0,8
tick,0x7ffe67f8feb4,393687347,0,0x0,8
tick,0x7ffe67f8feb4,393703099,0,0x0,8
tick,0x7ffe67f8feb4,393719138,0,0x0,8
tick,0x7ffe67f8feb4,393734577,0,0x0,8
tick,0x7ffe67f8feb4,393750057,0,0x0,8
tick,0x7ffe67f8feb4,393766126,0,0x0,8
tick,0x7ffe67f8feb4,393781653,0,0x0,8
tick,0x7ffe67f8feb4,393797651,0,0x0,8
tick,0x7ffe67f8feb4,393813629,0,0x0,8
tick,0x7ffe67f8feb4,393828972,0,0x0,8
tick,0x7ffe67f8feb4,393844933,0,0x0,8
tick,0x7ffe67f8feb4,393861018,0,0x0,8
tick,0x7ffe67f8feb4,393876472,0,0x0,8
tick,0x7ffe67f8feb4,393892005,0,0x0,8
tick,0x7ffe67f8feb4,393907277,0,0x0,8
tick,0x7ffe67f8feb4,393923248,0,0x0,8
tick,0x7ffe67f8feb4,393938770,0,0x0,8
tick,0x7ffe67f8feb4,393954529,0,0x0,8
tick,0x7ffe67f8feb4,393970417,0,0x0,8
tick,0x7ffe67f8feb4,393986414,0,0x0,8
tick,0x7ffe67f8feb4,394002416,0,0x0,8
tick,0x7ffe67f8feb4,394018414,0,0x0,8
tick,0x7ffe67f8feb4,394033426,0,0x0,8
tick,0x7ffe67f8feb4,394049464,0,0x0,8
tick,0x7ffe67f8feb4,394065551,0,0x0,8
tick,0x7ffe67f8feb4,394080752,0,0x0,8
tick,0x7ffe67f8feb4,394096886,0,0x0,8
tick,0x7ffe67f8feb4,394112249,0,0x0,8
tick,0x7ffe67f8feb4,394127629,0,0x0,8
tick,0x7ffe67f8feb4,394143136,0,0x0,8
tick,0x7ffe67f8feb4,394158098,0,0x0,8
tick,0x7ffe67f8feb4,394173334,0,0x0,8
tick,0x7ffe67f8feb4,394189006,0,0x0,8
tick,0x7ffe67f8feb4,394204638,0,0x0,8
tick,0x7ffe67f8feb4,394220252,0,0x0,8
tick,0x7ffe67f8feb4,394235490,0,0x0,8
tick,0x7ffe67f8feb4,394251200,0,0x0,8
tick,0x7ffe67f8feb4,394267179,0,0x0,8
tick,0x7ffe67f8feb4,394283207,0,0x0,8
tick,0x7ffe67f8feb4,394299192,0,0x0,8
tick,0x7ffe67f8feb4,394315197,0,0x0,8
tick,0x7ffe67f8feb4,394331219,0,0x0,8
tick,0x7ffe67f8feb4,394347229,0,0x0,8
tick,0x7ffe67f8feb4,394363204,0,0x0,8
tick,0x7ffe67f8feb4,394379219,0,0x0,8
tick,0x7ffe67f8feb4,394394539,0,0x0,8
tick,0x7ffe67f8feb4,394410279,0,0x0,8
tick,0x7ffe67f8feb4,394425434,0,0x0,8
tick,0x7ffe67f8feb4,394441277,0,0x0,8
tick,0x7ffe67f8feb4,394456700,0,0x0,8
tick,0x7ffe67f8feb4,394472547,0,0x0,8
tick,0x7ffe67f8feb4,394487962,0,0x0,8
tick,0x7ffe67f8feb4,394504165,0,0x0,8
tick,0x7ffe67f8feb4,394519390,0,0x0,8
tick,0x7ffe67f8feb4,394534690,0,0x0,8
tick,0x7ffe67f8feb4,394550044,0,0x0,8
tick,0x7ffe67f8feb4,394565856,0,0x0,8
tick,0x7ffe67f8feb4,394581022,0,0x0,8
tick,0x7ffe67f8feb4,394596484,0,0x0,8
tick,0x7ffe67f8feb4,394611538,0,0x0,8
tick,0x7ffe67f8feb4,394627333,0,0x0,8
tick,0x7ffe67f8feb4,394643320,0,0x0,8
tick,0x7ffe67f8feb4,394659340,0,0x0,8
tick,0x7ffe67f8feb4,394675344,0,0x0,8
tick,0x7ffe67f8feb4,394690541,0,0x0,8
tick,0x7ffe67f8feb4,394706572,0,0x0,8
tick,0x7ffe67f8feb4,394721521,0,0x0,8
tick,0x7ffe67f8feb4,394737605,0,0x0,8
tick,0x7ffe67f8feb4,394753526,0,0x0,8
tick,0x7ffe67f8feb4,394769522,0,0x0,8
tick,0x7ffe67f8feb4,394785532,0,0x0,8
tick,0x7ffe67f8feb4,394801532,0,0x0,8
tick,0x7ffe67f8feb4,394817551,0,0x0,8
tick,0x7ffe67f8feb4,394833534,0,0x0,8
tick,0x7ffe67f8feb4,394848684,0,0x0,8
tick,0x7ffe67f8feb4,394864544,0,0x0,8
tick,0x7ffe67f8feb4,394880571,0,0x0,8
tick,0x7ffe67f8feb4,394896638,0,0x0,8
tick,0x7ffe67f8feb4,394912118,0,0x0,8
tick,0x7ffe67f8feb4,394928129,0,0x0,8
tick,0x7ffe67f8feb4,394943577,0,0x0,8
tick,0x7ffe67f8feb4,394959128,0,0x0,8
tick,0x7ffe67f8feb4,394975125,0,0x0,8
tick,0x7ffe67f8feb4,394991112,0,0x0,8
tick,0x7ffe67f8feb4,395007124,0,0x0,8
tick,0x7ffe67f8feb4,395022734,0,0x0,8
tick,0x7ffe67f8feb4,395037696,0,0x0,8
tick,0x7ffe67f8feb4,395054023,0,0x0,8
tick,0x7ffe67f8feb4,395069293,0,0x0,8
tick,0x7ffe67f8feb4,395084969,0,0x0,8
tick,0x7ffe67f8feb4,395099965,0,0x0,8
tick,0x7ffe67f8feb4,395115342,0,0x0,8
tick,0x7ffe67f8feb4,395130904,0,0x0,8
tick,0x7ffe67f8feb4,395146395,0,0x0,8
tick,0x7ffe67f8feb4,395162619,0,0x0,8
tick,0x7ffe67f8feb4,395178414,0,0x0,8
tick,0x7ffe67f8feb4,395194600,0,0x0,8
tick,0x7ffe67f8feb4,395209577,0,0x0,8
tick,0x7ffe67f8feb4,395225686,0,0x0,8
tick,0x7ffe67f8feb4,395240816,0,0x0,8
tick,0x7ffe67f8feb4,395256334,0,0x0,8
tick,0x7ffe67f8feb4,395271933,0,0x0,8
tick,0x7ffe67f8feb4,395287410,0,0x0,8
tick,0x7ffe67f8feb4,395303039,0,0x0,8
tick,0x7ffe67f8feb4,395318404,0,0x0,8
tick,0x7ffe67f8feb4,395334004,0,0x0,8
tick,0x7ffe67f8feb4,395349847,0,0x0,8
tick,0x7ffe67f8feb4,395364939,0,0x0,8
tick,0x7ffe67f8feb4,395380977,0,0x0,8
tick,0x7ffe67f8feb4,395397166,0,0x0,8
tick,0x7ffe67f8feb4,395412268,0,0x0,8
tick,0x7ffe67f8feb4,395428148,0,0x0,8
tick,0x7ffe67f8feb4,395443291,0,0x0,8
tick,0x7ffe67f8feb4,395458585,0,0x0,8
tick,0x7ffe67f8feb4,395474682,0,0x0,8
tick,0x7ffe67f8feb4,395490753,0,0x0,8
tick,0x7ffe67f8feb4,395505907,0,0x0,8
tick,0x7ffe67f8feb4,395521407,0,0x0,8
tick,0x7ffe67f8feb4,395536760,0,0x0,8
tick,0x7ffe67f8feb4,395552396,0,0x0,8
tick,0x7ffe67f8feb4,395567873,0,0x0,8
tick,0x7ffe67f8feb4,395583445,0,0x0,8
tick,0x7ffe67f8feb4,395599236,0,0x0,8
tick,0x7ffe67f8feb4,395614883,0,0x0,8
tick,0x7ffe67f8feb4,395630250,0,0x0,8
tick,0x7ffe67f8feb4,395646320,0,0x0,8
tick,0x7ffe67f8feb4,395662012,0,0x0,8
tick,0x7ffe67f8feb4,395677961,0,0x0,8
tick,0x7ffe67f8feb4,395694137,0,0x0,8
tick,0x7ffe67f8feb4,395709965,0,0x0,8
tick,0x7ffe67f8feb4,395725953,0,0x0,8
tick,0x7ffe67f8feb4,395740960,0,0x0,8
tick,0x7ffe67f8feb4,395756968,0,0x0,8
tick,0x7ffe67f8feb4,395772970,0,0x0,8
tick,0x7ffe67f8feb4,395789000,0,0x0,8
tick,0x7ffe67f8feb4,395804962,0,0x0,8
tick,0x7ffe67f8feb4,395820963,0,0x0,8
tick,0x7ffe67f8feb4,395837034,0,0x0,8
tick,0x7ffe67f8feb4,395853230,0,0x0,8
tick,0x7ffe67f8feb4,395869362,0,0x0,8
tick,0x7ffe67f8feb4,395885067,0,0x0,8
tick,0x7ffe67f8feb4,395901037,0,0x0,8
tick,0x7ffe67f8feb4,395916283,0,0x0,8
tick,0x7ffe67f8feb4,395932000,0,0x0,8
tick,0x7ffe67f8feb4,395947336,0,0x0,8
tick,0x7ffe67f8feb4,395963007,0,0x0,8
tick,0x7ffe67f8feb4,395978999,0,0x0,8
tick,0x7ffe67f8feb4,395995006,0,0x0,8
tick,0x7ffe67f8feb4,396011010,0,0x0,8
tick,0x7ffe67f8feb4,396027069,0,0x0,8
tick,0x7ffe67f8feb4,396043011,0,0x0,8
tick,0x7ffe67f8feb4,396058727,0,0x0,8
tick,0x7ffe67f8feb4,396074744,0,0x0,8
tick,0x7ffe67f8feb4,396090734,0,0x0,8
tick,0x7ffe67f8feb4,396105744,0,0x0,8
tick,0x7ffe67f8feb4,396120746,0,0x0,8
tick,0x7ffe67f8feb4,396136765,0,0x0,8
tick,0x7ffe67f8feb4,396152745,0,0x0,8
tick,0x7ffe67f8feb4,396168761,0,0x0,8
tick,0x7ffe67f8feb4,396184697,0,0x0,8
tick,0x7ffe67f8feb4,396200002,0,0x0,8
tick,0x7ffe67f8feb4,396215175,0,0x0,8
tick,0x7ffe67f8feb4,396230713,0,0x0,8
tick,0x7ffe67f8feb4,396246718,0,0x0,8
tick,0x7ffe67f8feb4,396262730,0,0x0,8
tick,0x7ffe67f8feb4,396278732,0,0x0,8
tick,0x7ffe67f8feb4,396293761,0,0x0,8
tick,0x7ffe67f8feb4,396309785,0,0x0,8
tick,0x7ffe67f8feb4,396325753,0,0x0,8
tick,0x7ffe67f8feb4,396341775,0,0x0,8
tick,0x7ffe67f8feb4,396358100,0,0x0,8
tick,0x7ffe67f8feb4,396373770,0,0x0,8
tick,0x7ffe67f8feb4,396389784,0,0x0,8
tick,0x7ffe67f8feb4,396404953,0,0x0,8
tick,0x7ffe67f8feb4,396420784,0,0x0,8
tick,0x7ffe67f8feb4,396436738,0,0x0,8
tick,0x7ffe67f8feb4,396452766,0,0x0,8
tick,0x7ffe67f8feb4,396468789,0,0x0,8
tick,0x7ffe67f8feb4,396484798,0,0x0,8
tick,0x7ffe67f8feb4,396500743,0,0x0,8
tick,0x7ffe67f8feb4,396516781,0,0x0,8
tick,0x7ffe67f8feb4,396532256,0,0x0,8
tick,0x7ffe67f8feb4,396547752,0,0x0,8
tick,0x7ffe67f8feb4,396562944,0,0x0,8
tick,0x7ffe67f8feb4,396578838,0,0x0,8
tick,0x7ffe67f8feb4,396594831,0,0x0,8
tick,0x7ffe67f8feb4,396610829,0,0x0,8
tick,0x7ffe67f8feb4,396626930,0,0x0,8
tick,0x7ffe67f8feb4,396642897,0,0x0,8
tick,0x7ffe67f8feb4,396658874,0,0x0,8
tick,0x7ffe67f8feb4,396675347,0,0x0,8
tick,0x7ffe67f8feb4,396690819,0,0x0,8
tick,0x7ffe67f8feb4,396706889,0,0x0,8
tick,0x7ffe67f8feb4,396722845,0,0x0,8
tick,0x7ffe67f8feb4,396738862,0,0x0,8
tick,0x7ffe67f8feb4,396754040,0,0x0,8
tick,0x7ffe67f8feb4,396769883,0,0x0,8
tick,0x7ffe67f8feb4,396785470,0,0x0,8
tick,0x7ffe67f8feb4,396800919,0,0x0,8
tick,0x7ffe67f8feb4,396816578,0,0x0,8
tick,0x7ffe67f8feb4,396832092,0,0x0,8
tick,0x7ffe67f8feb4,396847884,0,0x0,8
tick,0x7ffe67f8feb4,396863869,0,0x0,8
tick,0x7ffe67f8feb4,396879875,0,0x0,8
tick,0x7ffe67f8feb4,396895883,0,0x0,8
tick,0x7ffe67f8feb4,396910931,0,0x0,8
tick,0x7ffe67f8feb4,396927087,0,0x0,8
tick,0x7ffe67f8feb4,396943299,0,0x0,8
tick,0x7ffe67f8feb4,396961468,0,0x0,8
tick,0x7ffe67f8feb4,396975678,0,0x0,8
tick,0x7ffe67f8feb4,396990952,0,0x0,8
tick,0x7ffe67f8feb4,397006868,0,0x0,8
tick,0x7ffe67f8feb4,397022943,0,0x0,8
tick,0x7ffe67f8feb4,397038865,0,0x0,8
tick,0x7ffe67f8feb4,397054893,0,0x0,8
tick,0x7ffe67f8feb4,397070880,0,0x0,8
tick,0x7ffe67f8feb4,397087290,0,0x0,8
tick,0x7ffe67f8feb4,397102892,0,0x0,8
tick,0x7ffe67f8feb4,397118907,0,0x0,8
tick,0x7ffe67f8feb4,397134078,0,0x0,8
tick,0x7ffe67f8feb4,397149914,0,0x0,8
tick,0x7ffe67f8feb4,397165914,0,0x0,8
tick,0x7ffe67f8feb4,397181407,0,0x0,8
tick,0x7ffe67f8feb4,397196934,0,0x0,8
tick,0x7ffe67f8feb4,397213960,0,0x0,8
tick,0x7ffe67f8feb4,397229036,0,0x0,8
tick,0x7ffe67f8feb4,397244996,0,0x0,8
tick,0x7ffe67f8feb4,397261029,0,0x0,8
tick,0x7ffe67f8feb4,397276940,0,0x0,8
tick,0x7ffe67f8feb4,397292923,0,0x0,8
tick,0x7ffe67f8feb4,397308230,0,0x0,8
tick,0x7ffe67f8feb4,397323741,0,0x0,8
tick,0x7ffe67f8feb4,397339670,0,0x0,8
tick,0x7ffe67f8feb4,397355249,0,0x0,8
tick,0x7ffe67f8feb4,397370787,0,0x0,8
tick,0x7ffe67f8feb4,397385954,0,0x0,8
tick,0x7ffe67f8feb4,397402037,0,0x0,8
tick,0x7ffe67f8feb4,397417936,0,0x0,8
tick,0x7ffe67f8feb4,397433939,0,0x0,8
tick,0x7ffe67f8feb4,397449939,0,0x0,8
tick,0x7ffe67f8feb4,397465943,0,0x0,8
tick,0x7ffe67f8feb4,397481492,0,0x0,8
tick,0x7ffe67f8feb4,397496678,0,0x0,8
tick,0x7ffe67f8feb4,397512142,0,0x0,8
tick,0x7ffe67f8feb4,397528031,0,0x0,8
tick,0x7ffe67f8feb4,397544042,0,0x0,8
tick,0x7ffe67f8feb4,397559978,0,0x0,8
tick,0x7ffe67f8feb4,397575339,0,0x0,8
tick,0x7ffe67f8feb4,397590454,0,0x0,8
tick,0x7ffe67f8feb4,397606489,0,0x0,8
tick,0x7ffe67f8feb4,397622833,0,0x0,8
tick,0x7ffe67f8feb4,397638457,0,0x0,8
tick,0x7ffe67f8feb4,397654461,0,0x0,8
tick,0x7ffe67f8feb4,397670466,0,0x0,8
tick,0x7ffe67f8feb4,397685646,0,0x0,8
tick,0x7ffe67f8feb4,397700776,0,0x0,8
tick,0x7ffe67f8feb4,397716464,0,0x0,8
tick,0x7ffe67f8feb4,397731933,0,0x0,8
tick,0x7ffe67f8feb4,397747653,0,0x0,8
tick,0x7ffe67f8feb4,397763253,0,0x0,8
tick,0x7ffe67f8feb4,397779169,0,0x0,8
tick,0x7ffe67f8feb4,397794726,0,0x0,8
tick,0x7ffe67f8feb4,397810061,0,0x0,8
tick,0x7ffe67f8feb4,397825568,0,0x0,8
tick,0x7ffe67f8feb4,397840942,0,0x0,8
tick,0x7ffe67f8feb4,397856638,0,0x0,8
tick,0x7ffe67f8feb4,397872213,0,0x0,8
tick,0x7ffe67f8feb4,397887422,0,0x0,8
tick,0x7ffe67f8feb4,397903477,0,0x0,8
tick,0x7ffe67f8feb4,397919700,0,0x0,8
tick,0x7ffe67f8feb4,397935001,0,0x0,8
tick,0x7ffe67f8feb4,397950115,0,0x0,8
tick,0x7ffe67f8feb4,397965542,0,0x0,8
tick,0x7ffe67f8feb4,397981232,0,0x0,8
tick,0x7ffe67f8feb4,397996503,0,0x0,8
tick,0x7ffe67f8feb4,398012491,0,0x0,8
tick,0x7ffe67f8feb4,398028486,0,0x0,8
tick,0x7ffe67f8feb4,398044466,0,0x0,8
tick,0x7ffe67f8feb4,398060489,0,0x0,8
tick,0x7ffe67f8feb4,398075980,0,0x0,8
tick,0x7ffe67f8feb4,398091399,0,0x0,8
tick,0x7ffe67f8feb4,398107464,0,0x0,8
tick,0x7ffe67f8feb4,398122474,0,0x0,8
tick,0x7ffe67f8feb4,398138492,0,0x0,8
tick,0x7ffe67f8feb4,398154093,0,0x0,8
tick,0x7ffe67f8feb4,398169587,0,0x0,8
tick,0x7ffe67f8feb4,398185591,0,0x0,8
tick,0x7ffe67f8feb4,398201687,0,0x0,8
tick,0x7ffe67f8feb4,398217788,0,0x0,8
tick,0x7ffe67f8feb4,398233213,0,0x0,8
tick,0x7ffe67f8feb4,398248723,0,0x0,8
tick,0x7ffe67f8feb4,398264273,0,0x0,8
tick,0x7ffe67f8feb4,398279922,0,0x0,8
tick,0x7ffe67f8feb4,398295675,0,0x0,8
tick,0x7ffe67f8feb4,398311283,0,0x0,8
tick,0x7ffe67f8feb4,398326670,0,0x0,8
tick,0x7ffe67f8feb4,398342414,0,0x0,8
tick,0x7ffe67f8feb4,398357580,0,0x0,8
tick,0x7ffe67f8feb4,398373012,0,0x0,8
tick,0x7ffe67f8feb4,398388155,0,0x0,8
tick,0x7ffe67f8feb4,398404561,0,0x0,8
tick,0x7ffe67f8feb4,398420056,0,0x0,8
tick,0x7ffe67f8feb4,398435937,0,0x0,8
tick,0x7ffe67f8feb4,398451653,0,0x0,8
tick,0x7ffe67f8feb4,398467495,0,0x0,8
tick,0x7ffe67f8feb4,398483901,0,0x0,8
tick,0x7ffe67f8feb4,398498743,0,0x0,8
tick,0x7ffe67f8feb4,398514610,0,0x0,8
tick,0x7ffe67f8feb4,398529836,0,0x0,8
tick,0x7ffe67f8feb4,398545867,0,0x0,8
tick,0x7ffe67f8feb4,398561157,0,0x0,8
tick,0x7ffe67f8feb4,398576781,0,0x0,8
tick,0x7ffe67f8feb4,398591934,0,0x0,8
tick,0x7ffe67f8feb4,398607440,0,0x0,8
tick,0x7ffe67f8feb4,398622895,0,0x0,8
tick,0x7ffe67f8feb4,398638819,0,0x0,8
tick,0x7ffe67f8feb4,398654314,0,0x0,8
tick,0x7ffe67f8feb4,398669582,0,0x0,8
tick,0x7ffe67f8feb4,398685592,0,0x0,8
tick,0x7ffe67f8feb4,398700546,0,0x0,8
tick,0x7ffe67f8feb4,398716800,0,0x0,8
tick,0x7ffe67f8feb4,398731807,0,0x0,8
tick,0x7ffe67f8feb4,398748130,0,0x0,8
tick,0x7ffe67f8feb4,398763463,0,0x0,8
tick,0x7ffe67f8feb4,398778774,0,0x0,8
tick,0x7ffe67f8feb4,398794776,0,0x0,8
tick,0x7ffe67f8feb4,398810126,0,0x0,8
tick,0x7ffe67f8feb4,398826282,0,0x0,8
tick,0x7ffe67f8feb4,398842004,0,0x0,8
tick,0x7ffe67f8feb4,398857084,0,0x0,8
tick,0x7ffe67f8feb4,398872163,0,0x0,8
tick,0x7ffe67f8feb4,398888113,0,0x0,8
tick,0x7ffe67f8feb4,398903770,0,0x0,8
tick,0x7ffe67f8feb4,398919190,0,0x0,8
tick,0x7ffe67f8feb4,398934190,0,0x0,8
tick,0x7ffe67f8feb4,398949699,0,0x0,8
tick,0x7ffe67f8feb4,398965491,0,0x0,8
tick,0x7ffe67f8feb4,398980776,0,0x0,8
tick,0x7ffe67f8feb4,398996676,0,0x0,8
tick,0x7ffe67f8feb4,399012654,0,0x0,8
tick,0x7ffe67f8feb4,399027580,0,0x0,8
tick,0x7ffe67f8feb4,399043562,0,0x0,8
tick,0x7ffe67f8feb4,399059605,0,0x0,8
tick,0x7ffe67f8feb4,399075288,0,0x0,8
tick,0x7ffe67f8feb4,399090251,0,0x0,8
tick,0x7ffe67f8feb4,399105314,0,0x0,8
tick,0x7ffe67f8feb4,399120745,0,0x0,8
tick,0x7ffe67f8feb4,399136559,0,0x0,8
tick,0x7ffe67f8feb4,399151551,0,0x0,8
tick,0x7ffe67f8feb4,399167559,0,0x0,8
tick,0x7ffe67f8feb4,399182715,0,0x0,8
tick,0x7ffe67f8feb4,399198345,0,0x0,8
tick,0x7ffe67f8feb4,399213885,0,0x0,8
tick,0x7ffe67f8feb4,399229223,0,0x0,8
tick,0x7ffe67f8feb4,399245230,0,0x0,8
tick,0x7ffe67f8feb4,399260612,0,0x0,8
tick,0x7ffe67f8feb4,399276020,0,0x0,8
tick,0x7ffe67f8feb4,399291241,0,0x0,8
tick,0x7ffe67f8feb4,399306982,0,0x0,8
tick,0x7ffe67f8feb4,399322232,0,0x0,8
tick,0x7ffe67f8feb4,399338229,0,0x0,8
tick,0x7ffe67f8feb4,399354241,0,0x0,8
tick,0x7ffe67f8feb4,399370254,0,0x0,8
tick,0x7ffe67f8feb4,399386248,0,0x0,8
tick,0x7ffe67f8feb4,399401235,0,0x0,8
tick,0x7ffe67f8feb4,399417259,0,0x0,8
tick,0x7ffe67f8feb4,399433262,0,0x0,8
tick,0x7ffe67f8feb4,399449241,0,0x0,8
tick,0x7ffe67f8feb4,399465257,0,0x0,8
tick,0x7ffe67f8feb4,399481270,0,0x0,8
tick,0x7ffe67f8feb4,399497545,0,0x0,8
tick,0x7ffe67f8feb4,399512830,0,0x0,8
tick,0x7ffe67f8feb4,399528902,0,0x0,8
tick,0x7ffe67f8feb4,399544390,0,0x0,8
tick,0x7ffe67f8feb4,399559744,0,0x0,8
tick,0x7ffe67f8feb4,399575444,0,0x0,8
tick,0x7ffe67f8feb4,399591430,0,0x0,8
tick,0x7ffe67f8feb4,399606715,0,0x0,8
tick,0x7ffe67f8feb4,399622613,0,0x0,8
tick,0x7ffe67f8feb4,399638591,0,0x0,8
tick,0x7ffe67f8feb4,399654809,0,0x0,8
tick,0x7ffe67f8feb4,399670236,0,0x0,8
tick,0x7ffe67f8feb4,399685698,0,0x0,8
tick,0x7ffe67f8feb4,399701389,0,0x0,8
tick,0x7ffe67f8feb4,399716569,0,0x0,8
tick,0x7ffe67f8feb4,399732545,0,0x0,8
tick,0x7ffe67f8feb4,399748638,0,0x0,8
tick,0x7ffe67f8feb4,399763890,0,0x0,8
tick,0x7ffe67f8feb4,399779853,0,0x0,8
tick,0x7ffe67f8feb4,399796449,0,0x0,8
tick,0x7ffe67f8feb4,399811756,0,0x0,8
tick,0x7ffe67f8feb4,399827944,0,0x0,8
tick,0x7ffe67f8feb4,399843340,0,0x0,8
tick,0x7ffe67f8feb4,399858632,0,0x0,8
tick,0x7ffe67f8feb4,399874094,0,0x0,8
tick,0x7ffe67f8feb4,399889756,0,0x0,8
tick,0x7ffe67f8feb4,399905799,0,0x0,8
tick,0x7ffe67f8feb4,399921349,0,0x0,8
tick,0x7ffe67f8feb4,399937436,0,0x0,8
tick,0x7ffe67f8feb4,399952093,0,0x0,8
tick,0x7ffe67f8feb4,399968108,0,0x0,8
tick,0x7ffe67f8feb4,399984188,0,0x0,8
tick,0x7ffe67f8feb4,399999536,0,0x0,8
tick,0x7ffe67f8feb4,400015468,0,0x0,8
tick,0x7ffe67f8feb4,400031454,0,0x0,8
tick,0x7ffe67f8feb4,400047477,0,0x0,8
tick,0x7ffe67f8feb4,400063480,0,0x0,8
tick,0x7ffe67f8feb4,400078944,0,0x0,8
tick,0x7ffe67f8feb4,400094394,0,0x0,8
tick,0x7ffe67f8feb4,400109968,0,0x0,8
tick,0x7ffe67f8feb4,400125848,0,0x0,8
tick,0x7ffe67f8feb4,400141087,0,0x0,8
tick,0x7ffe67f8feb4,400157453,0,0x0,8
tick,0x7ffe67f8feb4,400173154,0,0x0,8
tick,0x7ffe67f8feb4,400189010,0,0x0,8
tick,0x7ffe67f8feb4,400204664,0,0x0,8
tick,0x7ffe67f8feb4,400220162,0,0x0,8
tick,0x7ffe67f8feb4,400235980,0,0x0,8
tick,0x7ffe67f8feb4,400251558,0,0x0,8
tick,0x7ffe67f8feb4,400266573,0,0x0,8
tick,0x7ffe67f8feb4,400281878,0,0x0,8
tick,0x7ffe67f8feb4,400297876,0,0x0,8
tick,0x7ffe67f8feb4,400312902,0,0x0,8
tick,0x7ffe67f8feb4,400328101,0,0x0,8
tick,0x7ffe67f8feb4,400343553,0,0x0,8
tick,0x7ffe67f8feb4,400359294,0,0x0,8
tick,0x7ffe67f8feb4,400375580,0,0x0,8
tick,0x7ffe67f8feb4,400390869,0,0x0,8
tick,0x7ffe67f8feb4,400406372,0,0x0,8
tick,0x7ffe67f8feb4,400421944,0,0x0,8
tick,0x7ffe67f8feb4,400437360,0,0x0,8
tick,0x7ffe67f8feb4,400453281,0,0x0,8
tick,0x7ffe67f8feb4,400469358,0,0x0,8
tick,0x7ffe67f8feb4,400485255,0,0x0,8
tick,0x7ffe67f8feb4,400500386,0,0x0,8
tick,0x7ffe67f8feb4,400516417,0,0x0,8
tick,0x7ffe67f8feb4,400531823,0,0x0,8
tick,0x7ffe67f8feb4,400547563,0,0x0,8
tick,0x7ffe67f8feb4,400563447,0,0x0,8
tick,0x7ffe67f8feb4,400579432,0,0x0,8
tick,0x7ffe67f8feb4,400595459,0,0x0,8
tick,0x7ffe67f8feb4,400610914,0,0x0,8
tick,0x7ffe67f8feb4,400626736,0,0x0,8
tick,0x7ffe67f8feb4,400641895,0,0x0,8
tick,0x7ffe67f8feb4,400657064,0,0x0,8
tick,0x7ffe67f8feb4,400672514,0,0x0,8
tick,0x7ffe67f8feb4,400688237,0,0x0,8
tick,0x7ffe67f8feb4,400704259,0,0x0,8
tick,0x7ffe67f8feb4,400719298,0,0x0,8
tick,0x7ffe67f8feb4,400734508,0,0x0,8
tick,0x7ffe67f8feb4,400749669,0,0x0,8
tick,0x7ffe67f8feb4,400765972,0,0x0,8
tick,0x7ffe67f8feb4,400782000,0,0x0,8
tick,0x7ffe67f8feb4,400797263,0,0x0,8
tick,0x7ffe67f8feb4,400813398,0,0x0,8
tick,0x7ffe67f8feb4,400828611,0,0x0,8
tick,0x7ffe67f8feb4,400843670,0,0x0,8
tick,0x7ffe67f8feb4,400859026,0,0x0,8
tick,0x7ffe67f8feb4,400874858,0,0x0,8
tick,0x7ffe67f8feb4,400890592,0,0x0,8
tick,0x7ffe67f8feb4,400905906,0,0x0,8
tick,0x7ffe67f8feb4,400921157,0,0x0,8
tick,0x7ffe67f8feb4,400936605,0,0x0,8
tick,0x7ffe67f8feb4,400951864,0,0x0,8
tick,0x7ffe67f8feb4,400967783,0,0x0,8
tick,0x7ffe67f8feb4,400983767,0,0x0,8
tick,0x7ffe67f8feb4,400998830,0,0x0,8
tick,0x7ffe67f8feb4,401014056,0,0x0,8
tick,0x7ffe67f8feb4,401030008,0,0x0,8
tick,0x7ffe67f8feb4,401046066,0,0x0,8
tick,0x7ffe67f8feb4,401062116,0,0x0,8
tick,0x7ffe67f8feb4,401077983,0,0x0,8
tick,0x7ffe67f8feb4,401093084,0,0x0,8
tick,0x7ffe67f8feb4,401109094,0,0x0,8
tick,0x7ffe67f8feb4,401125164,0,0x0,8
tick,0x7ffe67f8feb4,401140284,0,0x0,8
tick,0x7ffe67f8feb4,401156245,0,0x0,8
tick,0x7ffe67f8feb4,401171716,0,0x0,8
tick,0x7ffe67f8feb4,401187795,0,0x0,8
tick,0x7ffe67f8feb4,401203027,0,0x0,8
tick,0x7ffe67f8feb4,401219239,0,0x0,8
tick,0x7ffe67f8feb4,401234360,0,0x0,8
tick,0x7ffe67f8feb4,401249836,0,0x0,8
tick,0x7ffe67f8feb4,401265908,0,0x0,8
tick,0x7ffe67f8feb4,401281697,0,0x0,8
tick,0x7ffe67f8feb4,401296711,0,0x0,8
tick,0x7ffe67f8feb4,401312654,0,0x0,8
tick,0x7ffe67f8feb4,401327602,0,0x0,8
tick,0x7ffe67f8feb4,401343120,0,0x0,8
tick,0x7ffe67f8feb4,401358264,0,0x0,8
tick,0x7ffe67f8feb4,401374352,0,0x0,8
tick,0x7ffe67f8feb4,401390067,0,0x0,8
tick,0x7ffe67f8feb4,401405439,0,0x0,8
tick,0x7ffe67f8feb4,401421182,0,0x0,8
tick,0x7ffe67f8feb4,401436541,0,0x0,8
tick,0x7ffe67f8feb4,401451819,0,0x0,8
tick,0x7ffe67f8feb4,401467064,0,0x0,8
tick,0x7ffe67f8feb4,401482698,0,0x0,8
tick,0x7ffe67f8feb4,401498484,0,0x0,8
tick,0x7ffe67f8feb4,401514074,0,0x0,8
tick,0x7ffe67f8feb4,401529274,0,0x0,8
tick,0x7ffe67f8feb4,401545096,0,0x0,8
tick,0x7ffe67f8feb4,401561227,0,0x0,8
tick,0x7ffe67f8feb4,401577280,0,0x0,8
tick,0x7ffe67f8feb4,401592708,0,0x0,8
tick,0x7ffe67f8feb4,401608279,0,0x0,8
tick,0x7ffe67f8feb4,401623751,0,0x0,8
tick,0x7ffe67f8feb4,401639017,0,0x0,8
tick,0x7ffe67f8feb4,401654604,0,0x0,8
tick,0x7ffe67f8feb4,401670555,0,0x0,8
tick,0x7ffe67f8feb4,401686341,0,0x0,8
tick,0x7ffe67f8feb4,401702135,0,0x0,8
tick,0x7ffe67f8feb4,401718048,0,0x0,8
tick,0x7ffe67f8feb4,401733898,0,0x0,8
tick,0x7ffe67f8feb4,401749933,0,0x0,8
tick,0x7ffe67f8feb4,401766039,0,0x0,8
tick,0x7ffe67f8feb4,401781468,0,0x0,8
tick,0x7ffe67f8feb4,401797945,0,0x0,8
tick,0x7ffe67f8feb4,401813012,0,0x0,8
tick,0x7ffe67f8feb4,401828920,0,0x0,8
tick,0x7ffe67f8feb4,401844299,0,0x0,8
tick,0x7ffe67f8feb4,401859486,0,0x0,8
tick,0x7ffe67f8feb4,401874925,0,0x0,8
tick,0x7ffe67f8feb4,401890064,0,0x0,8
tick,0x7ffe67f8feb4,401905466,0,0x0,8
tick,0x7ffe67f8feb4,401920999,0,0x0,8
tick,0x7ffe67f8feb4,401936945,0,0x0,8
tick,0x7ffe67f8feb4,401952027,0,0x0,8
tick,0x7ffe67f8feb4,401967616,0,0x0,8
tick,0x7ffe67f8feb4,401982998,0,0x0,8
tick,0x7ffe67f8feb4,401998977,0,0x0,8
tick,0x7ffe67f8feb4,402014970,0,0x0,8
tick,0x7ffe67f8feb4,402030966,0,0x0,8
tick,0x7ffe67f8feb4,402046972,0,0x0,8
tick,0x7ffe67f8feb4,402063046,0,0x0,8
tick,0x7ffe67f8feb4,402079032,0,0x0,8
tick,0x7ffe67f8feb4,402095074,0,0x0,8
tick,0x7ffe67f8feb4,402110443,0,0x0,8
tick,0x7ffe67f8feb4,402126466,0,0x0,8
tick,0x7ffe67f8feb4,402141843,0,0x0,8
tick,0x7ffe67f8feb4,402157917,0,0x0,8
tick,0x7ffe67f8feb4,402173367,0,0x0,8
tick,0x7ffe67f8feb4,402188428,0,0x0,8
tick,0x7ffe67f8feb4,402204224,0,0x0,8
tick,0x7ffe67f8feb4,402220177,0,0x0,8
tick,0x7ffe67f8feb4,402236551,0,0x0,8
tick,0x7ffe67f8feb4,402251979,0,0x0,8
tick,0x7ffe67f8feb4,402267273,0,0x0,8
tick,0x7ffe67f8feb4,402283095,0,0x0,8
tick,0x7ffe67f8feb4,402298727,0,0x0,8
tick,0x7ffe67f8feb4,402313646,0,0x0,8
tick,0x7ffe67f8feb4,402329334,0,0x0,8
tick,0x7ffe67f8feb4,402345337,0,0x0,8
tick,0x7ffe67f8feb4,402361281,0,0x0,8
tick,0x7ffe67f8feb4,402377773,0,0x0,8
tick,0x7ffe67f8feb4,402393538,0,0x0,8
tick,0x7ffe67f8feb4,402409736,0,0x0,8
tick,0x7ffe67f8feb4,402425952,0,0x0,8
tick,0x7ffe67f8feb4,402441112,0,0x0,8
tick,0x7ffe67f8feb4,402456522,0,0x0,8
tick,0x7ffe67f8feb4,402471580,0,0x0,8
tick,0x7ffe67f8feb4,402487570,0,0x0,8
tick,0x7ffe67f8feb4,402504000,0,0x0,8
tick,0x7ffe67f8feb4,402519132,0,0x0,8
tick,0x7ffe67f8feb4,402534864,0,0x0,8
tick,0x7ffe67f8feb4,402550875,0,0x0,8
tick,0x7ffe67f8feb4,402565925,0,0x0,8
tick,0x7ffe67f8feb4,402581938,0,0x0,8
tick,0x7ffe67f8feb4,402597643,0,0x0,8
tick,0x7ffe67f8feb4,402613124,0,0x0,8
tick,0x7ffe67f8feb4,402628431,0,0x0,8
tick,0x7ffe67f8feb4,402643902,0,0x0,8
tick,0x7ffe67f8feb4,402659667,0,0x0,8
tick,0x7ffe67f8feb4,402675185,0,0x0,8
tick,0x7ffe67f8feb4,402691051,0,0x0,8
tick,0x7ffe67f8feb4,402706657,0,0x0,8
tick,0x7ffe67f8feb4,402722028,0,0x0,8
tick,0x7ffe67f8feb4,402737273,0,0x0,8
tick,0x7ffe67f8feb4,402752918,0,0x0,8
tick,0x7ffe67f8feb4,402768390,0,0x0,8
tick,0x7ffe67f8feb4,402784162,0,0x0,8
tick,0x7ffe67f8feb4,402800045,0,0x0,8
tick,0x7ffe67f8feb4,402815709,0,0x0,8
tick,0x7ffe67f8feb4,402831244,0,0x0,8
tick,0x7ffe67f8feb4,402847714,0,0x0,8
tick,0x7ffe67f8feb4,402862787,0,0x0,8
tick,0x7ffe67f8feb4,402878533,0,0x0,8
tick,0x7ffe67f8feb4,402894089,0,0x0,8
tick,0x7ffe67f8feb4,402910080,0,0x0,8
tick,0x7ffe67f8feb4,402926290,0,0x0,8
tick,0x7ffe67f8feb4,402941550,0,0x0,8
tick,0x7ffe67f8feb4,402957491,0,0x0,8
tick,0x7ffe67f8feb4,402973028,0,0x0,8
tick,0x7ffe67f8feb4,402988454,0,0x0,8
tick,0x7ffe67f8feb4,403004654,0,0x0,8
tick,0x7ffe67f8feb4,403020577,0,0x0,8
tick,0x7ffe67f8feb4,403036574,0,0x0,8
tick,0x7ffe67f8feb4,403052556,0,0x0,8
tick,0x7ffe67f8feb4,403068556,0,0x0,8
tick,0x7ffe67f8feb4,403084594,0,0x0,8
tick,0x7ffe67f8feb4,403099583,0,0x0,8
tick,0x7ffe67f8feb4,403115617,0,0x0,8
tick,0x7ffe67f8feb4,403131710,0,0x0,8
tick,0x7ffe67f8feb4,403147024,0,0x0,8
tick,0x7ffe67f8feb4,403162646,0,0x0,8
tick,0x7ffe67f8feb4,403178160,0,0x0,8
tick,0x7ffe67f8feb4,403193480,0,0x0,8
tick,0x7ffe67f8feb4,403208746,0,0x0,8
tick,0x7ffe67f8feb4,403224205,0,0x0,8
tick,0x7ffe67f8feb4,403239452,0,0x0,8
tick,0x7ffe67f8feb4,403255182,0,0x0,8
tick,0x7ffe67f8feb4,403270593,0,0x0,8
tick,0x7ffe67f8feb4,403285558,0,0x0,8
tick,0x7ffe67f8feb4,403301062,0,0x0,8
tick,0x7ffe67f8feb4,403316588,0,0x0,8
tick,0x7ffe67f8feb4,403332502,0,0x0,8
tick,0x7ffe67f8feb4,403348115,0,0x0,8
tick,0x7ffe67f8feb4,403363872,0,0x0,8
tick,0x7ffe67f8feb4,403379304,0,0x0,8
tick,0x7ffe67f8feb4,403394849,0,0x0,8
tick,0x7ffe67f8feb4,403410868,0,0x0,8
tick,0x7ffe67f8feb4,403426874,0,0x0,8
tick,0x7ffe67f8feb4,403442872,0,0x0,8
tick,0x7ffe67f8feb4,403458138,0,0x0,8
tick,0x7ffe67f8feb4,403474375,0,0x0,8
tick,0x7ffe67f8feb4,403489926,0,0x0,8
tick,0x7ffe67f8feb4,403505757,0,0x0,8
tick,0x7ffe67f8feb4,403521082,0,0x0,8
tick,0x7ffe67f8feb4,403536920,0,0x0,8
tick,0x7ffe67f8feb4,403552613,0,0x0,8
tick,0x7ffe67f8feb4,403567644,0,0x0,8
tick,0x7ffe67f8feb4,403582906,0,0x0,8
tick,0x7ffe67f8feb4,403598492,0,0x0,8
tick,0x7ffe67f8feb4,403614124,0,0x0,8
tick,0x7ffe67f8feb4,403629842,0,0x0,8
tick,0x7ffe67f8feb4,403645170,0,0x0,8
tick,0x7ffe67f8feb4,403660255,0,0x0,8
tick,0x7ffe67f8feb4,403675431,0,0x0,8
tick,0x7ffe67f8feb4,403690906,0,0x0,8
tick,0x7ffe67f8feb4,403706918,0,0x0,8
tick,0x7ffe67f8feb4,403722899,0,0x0,8
tick,0x7ffe67f8feb4,403738491,0,0x0,8
tick,0x7ffe67f8feb4,403754422,0,0x0,8
tick,0x7ffe67f8feb4,403769736,0,0x0,8
tick,0x7ffe67f8feb4,403784943,0,0x0,8
tick,0x7ffe67f8feb4,403800804,0,0x0,8
tick,0x7ffe67f8feb4,403816915,0,0x0,8
tick,0x7ffe67f8feb4,403831960,0,0x0,8
tick,0x7ffe67f8feb4,403847907,0,0x0,8
tick,0x7ffe67f8feb4,403862916,0,0x0,8
tick,0x7ffe67f8feb4,403878924,0,0x0,8
tick,0x7ffe67f8feb4,403894924,0,0x0,8
tick,0x7ffe67f8feb4,403909932,0,0x0,8
tick,0x7ffe67f8feb4,403925926,0,0x0,8
tick,0x7ffe67f8feb4,403941917,0,0x0,8
tick,0x7ffe67f8feb4,403957922,0,0x0,8
tick,0x7ffe67f8feb4,403973927,0,0x0,8
tick,0x7ffe67f8feb4,403989931,0,0x0,8
tick,0x7ffe67f8feb4,404005725,0,0x0,8
tick,0x7ffe67f8feb4,404021355,0,0x0,8
tick,0x7ffe67f8feb4,404036781,0,0x0,8
tick,0x7ffe67f8feb4,404052748,0,0x0,8
tick,0x7ffe67f8feb4,404068774,0,0x0,8
tick,0x7ffe67f8feb4,404084778,0,0x0,8
tick,0x7ffe67f8feb4,404099971,0,0x0,8
tick,0x7ffe67f8feb4,404115965,0,0x0,8
tick,0x7ffe67f8feb4,404131967,0,0x0,8
tick,0x7ffe67f8feb4,404146973,0,0x0,8
tick,0x7ffe67f8feb4,404161977,0,0x0,8
tick,0x7ffe67f8feb4,404177991,0,0x0,8
tick,0x7ffe67f8feb4,404193977,0,0x0,8
tick,0x7ffe67f8feb4,404209968,0,0x0,8
tick,0x7ffe67f8feb4,404225972,0,0x0,8
tick,0x7ffe67f8feb4,404241196,0,0x0,8
tick,0x7ffe67f8feb4,404256799,0,0x0,8
tick,0x7ffe67f8feb4,404272013,0,0x0,8
tick,0x7ffe67f8feb4,404288011,0,0x0,8
tick,0x7ffe67f8feb4,404303505,0,0x0,8
tick,0x7ffe67f8feb4,404318997,0,0x0,8
tick,0x7ffe67f8feb4,404335001,0,0x0,8
tick,0x7ffe67f8feb4,404350970,0,0x0,8
tick,0x7ffe67f8feb4,404366036,0,0x0,8
tick,0x7ffe67f8feb4,404381368,0,0x0,8
tick,0x7ffe67f8feb4,404397109,0,0x0,8
tick,0x7ffe67f8feb4,404412825,0,0x0,8
tick,0x7ffe67f8feb4,404428017,0,0x0,8
tick,0x7ffe67f8feb4,404443852,0,0x0,8
tick,0x7ffe67f8feb4,404459060,0,0x0,8
tick,0x7ffe67f8feb4,404475034,0,0x0,8
tick,0x7ffe67f8feb4,404492186,0,0x0,8
tick,0x7ffe67f8feb4,404506110,0,0x0,8
tick,0x7ffe67f8feb4,404521945,0,0x0,8
tick,0x7ffe67f8feb4,404537830,0,0x0,8
tick,0x7ffe67f8feb4,404553063,0,0x0,8
tick,0x7ffe67f8feb4,404569037,0,0x0,8
tick,0x7ffe67f8feb4,404585062,0,0x0,8
tick,0x7ffe67f8feb4,404601052,0,0x0,8
tick,0x7ffe67f8feb4,404617034,0,0x0,8
tick,0x7ffe67f8feb4,404632845,0,0x0,8
tick,0x7ffe67f8feb4,404648846,0,0x0,8
tick,0x7ffe67f8feb4,404664834,0,0x0,8
tick,0x7ffe67f8feb4,404680888,0,0x0,8
tick,0x7ffe67f8feb4,404696941,0,0x0,8
tick,0x7ffe67f8feb4,404712971,0,0x0,8
tick,0x7ffe67f8feb4,404728182,0,0x0,8
tick,0x7ffe67f8feb4,404744332,0,0x0,8
tick,0x7ffe67f8feb4,404759844,0,0x0,8
tick,0x7ffe67f8feb4,404775073,0,0x0,8
tick,0x7ffe67f8feb4,404790632,0,0x0,8
tick,0x7ffe67f8feb4,404806673,0,0x0,8
tick,0x7ffe67f8feb4,404821824,0,0x0,8
tick,0x7ffe67f8feb4,404837332,0,0x0,8
tick,0x7ffe67f8feb4,404853251,0,0x0,8
tick,0x7ffe67f8feb4,404868532,0,0x0,8
tick,0x7ffe67f8feb4,404883854,0,0x0,8
tick,0x7ffe67f8feb4,404899713,0,0x0,8
tick,0x7ffe67f8feb4,404915146,0,0x0,8
tick,0x7ffe67f8feb4,404930777,0,0x0,8
tick,0x7ffe67f8feb4,404946595,0,0x0,8
tick,0x7ffe67f8feb4,404961804,0,0x0,8
tick,0x7ffe67f8feb4,404976843,0,0x0,8
tick,0x7ffe67f8feb4,404992157,0,0x0,8
tick,0x7ffe67f8feb4,405008124,0,0x0,8
tick,0x7ffe67f8feb4,405023784,0,0x0,8
tick,0x7ffe67f8feb4,405039139,0,0x0,8
tick,0x7ffe67f8feb4,405055103,0,0x0,8
tick,0x7ffe67f8feb4,405071097,0,0x0,8
tick,0x7ffe67f8feb4,405087090,0,0x0,8
tick,0x7ffe67f8feb4,405103196,0,0x0,8
tick,0x7ffe67f8feb4,405119164,0,0x0,8
tick,0x7ffe67f8feb4,405135184,0,0x0,8
tick,0x7ffe67f8feb4,405150733,0,0x0,8
tick,0x7ffe67f8feb4,405166408,0,0x0,8
tick,0x7ffe67f8feb4,405181736,0,0x0,8
tick,0x7ffe67f8feb4,405197228,0,0x0,8
tick,0x7ffe67f8feb4,405212288,0,0x0,8
tick,0x7ffe67f8feb4,405228372,0,0x0,8
tick,0x7ffe67f8feb4,405244713,0,0x0,8
tick,0x7ffe67f8feb4,405259983,0,0x0,8
tick,0x7ffe67f8feb4,405275278,0,0x0,8
tick,0x7ffe67f8feb4,405290425,0,0x0,8
tick,0x7ffe67f8feb4,405306176,0,0x0,8
tick,0x7ffe67f8feb4,405322231,0,0x0,8
tick,0x7ffe67f8feb4,405337261,0,0x0,8
tick,0x7ffe67f8feb4,405353316,0,0x0,8
tick,0x7ffe67f8feb4,405369350,0,0x0,8
tick,0x7ffe67f8feb4,405385387,0,0x0,8
tick,0x7ffe67f8feb4,405401552,0,0x0,8
tick,0x7ffe67f8feb4,405417481,0,0x0,8
tick,0x7ffe67f8feb4,405433556,0,0x0,8
tick,0x7ffe67f8feb4,405448204,0,0x0,8
tick,0x7ffe67f8feb4,405464211,0,0x0,8
tick,0x7ffe67f8feb4,405480154,0,0x0,8
tick,0x7ffe67f8feb4,405496084,0,0x0,8
tick,0x7ffe67f8feb4,405511836,0,0x0,8
tick,0x7ffe67f8feb4,405526995,0,0x0,8
tick,0x7ffe67f8feb4,405542915,0,0x0,8
tick,0x7ffe67f8feb4,405558160,0,0x0,8
tick,0x7ffe67f8feb4,405574260,0,0x0,8
tick,0x7ffe67f8feb4,405589515,0,0x0,8
tick,0x7ffe67f8feb4,405605477,0,0x0,8
tick,0x7ffe67f8feb4,405621527,0,0x0,8
tick,0x7ffe67f8feb4,405637555,0,0x0,8
tick,0x7ffe67f8feb4,405653485,0,0x0,8
tick,0x7ffe67f8feb4,405669738,0,0x0,8
tick,0x7ffe67f8feb4,405685491,0,0x0,8
tick,0x7ffe67f8feb4,405701513,0,0x0,8
tick,0x7ffe67f8feb4,405717544,0,0x0,8
tick,0x7ffe67f8feb4,405733633,0,0x0,8
tick,0x7ffe67f8feb4,405748594,0,0x0,8
tick,0x7ffe67f8feb4,405764696,0,0x0,8
tick,0x7ffe67f8feb4,405780400,0,0x0,8
tick,0x7ffe67f8feb4,405795210,0,0x0,8
tick,0x7ffe67f8feb4,405811202,0,0x0,8
tick,0x7ffe67f8feb4,405827172,0,0x0,8
tick,0x7ffe67f8feb4,405843179,0,0x0,8
tick,0x7ffe67f8feb4,405859210,0,0x0,8
tick,0x7ffe67f8feb4,405875117,0,0x0,8
tick,0x7ffe67f8feb4,405890214,0,0x0,8
tick,0x7ffe67f8feb4,405905452,0,0x0,8
tick,0x7ffe67f8feb4,405921118,0,0x0,8
tick,0x7ffe67f8feb4,405936823,0,0x0,8
tick,0x7ffe67f8feb4,405952550,0,0x0,8
tick,0x7ffe67f8feb4,405967858,0,0x0,8
tick,0x7ffe67f8feb4,405983670,0,0x0,8
tick,0x7ffe67f8feb4,405999127,0,0x0,8
tick,0x7ffe67f8feb4,406014799,0,0x0,8
tick,0x7ffe67f8feb4,406030114,0,0x0,8
tick,0x7ffe67f8feb4,406045754,0,0x0,8
tick,0x7ffe67f8feb4,406061480,0,0x0,8
tick,0x7ffe67f8feb4,406077489,0,0x0,8
tick,0x7ffe67f8feb4,406093475,0,0x0,8
tick,0x7ffe67f8feb4,406109262,0,0x0,8
tick,0x7ffe67f8feb4,406125110,0,0x0,8
tick,0x7ffe67f8feb4,406141154,0,0x0,8
tick,0x7ffe67f8feb4,406156284,0,0x0,8
tick,0x7ffe67f8feb4,406172162,0,0x0,8
tick,0x7ffe67f8feb4,406188275,0,0x0,8
tick,0x7ffe67f8feb4,406204595,0,0x0,8
tick,0x7ffe67f8feb4,406220455,0,0x0,8
tick,0x7ffe67f8feb4,406236874,0,0x0,8
tick,0x7ffe67f8feb4,406252342,0,0x0,8
tick,0x7ffe67f8feb4,406268452,0,0x0,8
tick,0x7ffe67f8feb4,406284471,0,0x0,8
tick,0x7ffe67f8feb4,406299279,0,0x0,8
tick,0x7ffe67f8feb4,406315275,0,0x0,8
tick,0x7ffe67f8feb4,406331307,0,0x0,8
tick,0x7ffe67f8feb4,406347344,0,0x0,8
tick,0x7ffe67f8feb4,406363317,0,0x0,8
tick,0x7ffe67f8feb4,406379308,0,0x0,8
tick,0x7ffe67f8feb4,406395291,0,0x0,8
tick,0x7ffe67f8feb4,406411295,0,0x0,8
tick,0x7ffe67f8feb4,406427298,0,0x0,8
tick,0x7ffe67f8feb4,406443294,0,0x0,8
tick,0x7ffe67f8feb4,406459342,0,0x0,8
tick,0x7ffe67f8feb4,406475237,0,0x0,8
tick,0x7ffe67f8feb4,406490330,0,0x0,8
tick,0x7ffe67f8feb4,406506325,0,0x0,8
tick,0x7ffe67f8feb4,406522480,0,0x0,8
tick,0x7ffe67f8feb4,406537313,0,0x0,8
tick,0x7ffe67f8feb4,406553369,0,0x0,8
tick,0x7ffe67f8feb4,406569339,0,0x0,8
tick,0x7ffe67f8feb4,406585360,0,0x0,8
tick,0x7ffe67f8feb4,406600947,0,0x0,8
tick,0x7ffe67f8feb4,406616624,0,0x0,8
tick,0x7ffe67f8feb4,406632844,0,0x0,8
tick,0x7ffe67f8feb4,406647858,0,0x0,8
tick,0x7ffe67f8feb4,406663587,0,0x0,8
tick,0x7ffe67f8feb4,406678507,0,0x0,8
tick,0x7ffe67f8feb4,406693947,0,0x0,8
tick,0x7ffe67f8feb4,406709288,0,0x0,8
tick,0x7ffe67f8feb4,406724356,0,0x0,8
tick,0x7ffe67f8feb4,406739947,0,0x0,8
tick,0x7ffe67f8feb4,406755931,0,0x0,8
tick,0x7ffe67f8feb4,406771968,0,0x0,8
tick,0x7ffe67f8feb4,406787404,0,0x0,8
tick,0x7ffe67f8feb4,406802058,0,0x0,8
tick,0x7ffe67f8feb4,406818004,0,0x0,8
tick,0x7ffe67f8feb4,406833545,0,0x0,8
tick,0x7ffe67f8feb4,406848696,0,0x0,8
tick,0x7ffe67f8feb4,406864566,0,0x0,8
tick,0x7ffe67f8feb4,406880419,0,0x0,8
tick,0x7ffe67f8feb4,406896369,0,0x0,8
tick,0x7ffe67f8feb4,406911638,0,0x0,8
tick,0x7ffe67f8feb4,406927424,0,0x0,8
tick,0x7ffe67f8feb4,406942887,0,0x0,8
tick,0x7ffe67f8feb4,406958441,0,0x0,8
tick,0x7ffe67f8feb4,406973979,0,0x0,8
tick,0x7ffe67f8feb4,406989737,0,0x0,8
tick,0x7ffe67f8feb4,407005638,0,0x0,8
tick,0x7ffe67f8feb4,407021662,0,0x0,8
tick,0x7ffe67f8feb4,407037623,0,0x0,8
tick,0x7ffe67f8feb4,407052994,0,0x0,8
tick,0x7ffe67f8feb4,407068938,0,0x0,8
tick,0x7ffe67f8feb4,407084961,0,0x0,8
tick,0x7ffe67f8feb4,407100933,0,0x0,8
tick,0x7ffe67f8feb4,407116554,0,0x0,8
tick,0x7ffe67f8feb4,407131604,0,0x0,8
tick,0x7ffe67f8feb4,407147836,0,0x0,8
tick,0x7ffe67f8feb4,407162789,0,0x0,8
tick,0x7ffe67f8feb4,407178797,0,0x0,8
tick,0x7ffe67f8feb4,407194027,0,0x0,8
tick,0x7ffe67f8feb4,407209174,0,0x0,8
tick,0x7ffe67f8feb4,407225061,0,0x0,8
tick,0x7ffe67f8feb4,407240276,0,0x0,8
tick,0x7ffe67f8feb4,407255430,0,0x0,8
tick,0x7ffe67f8feb4,407271495,0,0x0,8
tick,0x7ffe67f8feb4,407288005,0,0x0,8
tick,0x7ffe67f8feb4,407303609,0,0x0,8
tick,0x7ffe67f8feb4,407319503,0,0x0,8
tick,0x7ffe67f8feb4,407335204,0,0x0,8
tick,0x7ffe67f8feb4,407350479,0,0x0,8
tick,0x7ffe67f8feb4,407366202,0,0x0,8
tick,0x7ffe67f8feb4,407381472,0,0x0,8
tick,0x7ffe67f8feb4,407397483,0,0x0,8
tick,0x7ffe67f8feb4,407413012,0,0x0,8
tick,0x7ffe67f8feb4,407428449,0,0x0,8
tick,0x7ffe67f8feb4,407444454,0,0x0,8
tick,0x7ffe67f8feb4,407460443,0,0x0,8
tick,0x7ffe67f8feb4,407475474,0,0x0,8
tick,0x7ffe67f8feb4,407491469,0,0x0,8
tick,0x7ffe67f8feb4,407507476,0,0x0,8
tick,0x7ffe67f8feb4,407522855,0,0x0,8
tick,0x7ffe67f8feb4,407538010,0,0x0,8
tick,0x7ffe67f8feb4,407553164,0,0x0,8
tick,0x7ffe67f8feb4,407568121,0,0x0,8
tick,0x7ffe67f8feb4,407583561,0,0x0,8
tick,0x7ffe67f8feb4,407599543,0,0x0,8
tick,0x7ffe67f8feb4,407615507,0,0x0,8
tick,0x7ffe67f8feb4,407631505,0,0x0,8
tick,0x7ffe67f8feb4,407646497,0,0x0,8
tick,0x7ffe67f8feb4,407662502,0,0x0,8
tick,0x7ffe67f8feb4,407677494,0,0x0,8
tick,0x7ffe67f8feb4,407693503,0,0x0,8
tick,0x7ffe67f8feb4,407710277,0,0x0,8
tick,0x7ffe67f8feb4,407725321,0,0x0,8
tick,0x7ffe67f8feb4,407741351,0,0x0,8
tick,0x7ffe67f8feb4,407756509,0,0x0,8
tick,0x7ffe67f8feb4,407772045,0,0x0,8
tick,0x7ffe67f8feb4,407788413,0,0x0,8
tick,0x7ffe67f8feb4,407803313,0,0x0,8
tick,0x7ffe67f8feb4,407818990,0,0x0,8
tick,0x7ffe67f8feb4,407835100,0,0x0,8
tick,0x7ffe67f8feb4,407850329,0,0x0,8
tick,0x7ffe67f8feb4,407865229,0,0x0,8
tick,0x7ffe67f8feb4,407880530,0,0x0,8
tick,0x7ffe67f8feb4,407895588,0,0x0,8
tick,0x7ffe67f8feb4,407910852,0,0x0,8
tick,0x7ffe67f8feb4,407926232,0,0x0,8
tick,0x7ffe67f8feb4,407941497,0,0x0,8
tick,0x7ffe67f8feb4,407957883,0,0x0,8
tick,0x7ffe67f8feb4,407973259,0,0x0,8
tick,0x7ffe67f8feb4,407989249,0,0x0,8
tick,0x7ffe67f8feb4,408005429,0,0x0,8
tick,0x7ffe67f8feb4,408020639,0,0x0,8
tick,0x7ffe67f8feb4,408036676,0,0x0,8
tick,0x7ffe67f8feb4,408051969,0,0x0,8
tick,0x7ffe67f8feb4,408068181,0,0x0,8
tick,0x7ffe67f8feb4,408083970,0,0x0,8
tick,0x7ffe67f8feb4,408100249,0,0x0,8
tick,0x7ffe67f8feb4,408116212,0,0x0,8
tick,0x7ffe67f8feb4,408131987,0,0x0,8
tick,0x7ffe67f8feb4,408147967,0,0x0,8
tick,0x7ffe67f8feb4,408162965,0,0x0,8
tick,0x7ffe67f8feb4,408178977,0,0x0,8
tick,0x7ffe67f8feb4,408194058,0,0x0,8
tick,0x7ffe67f8feb4,408209248,0,0x0,8
tick,0x7ffe67f8feb4,408225066,0,0x0,8
tick,0x7ffe67f8feb4,408240152,0,0x0,8
tick,0x7ffe67f8feb4,408255798,0,0x0,8
tick,0x7ffe67f8feb4,408271017,0,0x0,8
tick,0x7ffe67f8feb4,408286501,0,0x0,8
tick,0x7ffe67f8feb4,408301274,0,0x0,8
tick,0x7ffe67f8feb4,408317172,0,0x0,8
tick,0x7ffe67f8feb4,408333120,0,0x0,8
tick,0x7ffe67f8feb4,408349093,0,0x0,8
tick,0x7ffe67f8feb4,408365076,0,0x0,8
tick,0x7ffe67f8feb4,408380123,0,0x0,8
tick,0x7ffe67f8feb4,408395226,0,0x0,8
tick,0x7ffe67f8feb4,408410674,0,0x0,8
tick,0x7ffe67f8feb4,408426108,0,0x0,8
tick,0x7ffe67f8feb4,408442108,0,0x0,8
tick,0x7ffe67f8feb4,408458104,0,0x0,8
tick,0x7ffe67f8feb4,408473297,0,0x0,8
tick,0x7ffe67f8feb4,408488700,0,0x0,8
tick,0x7ffe67f8feb4,408504522,0,0x0,8
tick,0x7ffe67f8feb4,408519579,0,0x0,8
tick,0x7ffe67f8feb4,408535121,0,0x0,8
tick,0x7ffe67f8feb4,408551115,0,0x0,8
tick,0x7ffe67f8feb4,408566244,0,0x0,8
tick,0x7ffe67f8feb4,408581682,0,0x0,8
tick,0x7ffe67f8feb4,408597666,0,0x0,8
tick,0x7ffe67f8feb4,408612694,0,0x0,8
tick,0x7ffe67f8feb4,408628684,0,0x0,8
tick,0x7ffe67f8feb4,408644681,0,0x0,8
tick,0x7ffe67f8feb4,408660077,0,0x0,8
tick,0x7ffe67f8feb4,408675258,0,0x0,8
tick,0x7ffe67f8feb4,408690875,0,0x0,8
tick,0x7ffe67f8feb4,408706125,0,0x0,8
tick,0x7ffe67f8feb4,408722331,0,0x0,8
tick,0x7ffe67f8feb4,408738223,0,0x0,8
tick,0x7ffe67f8feb4,408752898,0,0x0,8
tick,0x7ffe67f8feb4,408768919,0,0x0,8
tick,0x7ffe67f8feb4,408784071,0,0x0,8
tick,0x7ffe67f8feb4,408799935,0,0x0,8
tick,0x7ffe67f8feb4,408815145,0,0x0,8
tick,0x7ffe67f8feb4,408830240,0,0x0,8
tick,0x7ffe67f8feb4,408846238,0,0x0,8
tick,0x7ffe67f8feb4,408861424,0,0x0,8
tick,0x7ffe67f8feb4,408877250,0,0x0,8
tick,0x7ffe67f8feb4,408893087,0,0x0,8
tick,0x7ffe67f8feb4,408909085,0,0x0,8
tick,0x7ffe67f8feb4,408924396,0,0x0,8
tick,0x7ffe67f8feb4,408940117,0,0x0,8
tick,0x7ffe67f8feb4,408955539,0,0x0,8
tick,0x7ffe67f8feb4,408971152,0,0x0,8
tick,0x7ffe67f8feb4,408986243,0,0x0,8
tick,0x7ffe67f8feb4,409001373,0,0x0,8
tick,0x7ffe67f8feb4,409017382,0,0x0,8
tick,0x7ffe67f8feb4,409032932,0,0x0,8
tick,0x7ffe67f8feb4,409048409,0,0x0,8
tick,0x7ffe67f8feb4,409063082,0,0x0,8
tick,0x7ffe67f8feb4,409078344,0,0x0,8
tick,0x7ffe67f8feb4,409094344,0,0x0,8
tick,0x7ffe67f8feb4,409110357,0,0x0,8
tick,0x7ffe67f8feb4,409126324,0,0x0,8
tick,0x7ffe67f8feb4,409141333,0,0x0,8
tick,0x7ffe67f8feb4,409157337,0,0x0,8
tick,0x7ffe67f8feb4,409173646,0,0x0,8
tick,0x7ffe67f8feb4,409189567,0,0x0,8
tick,0x7ffe67f8feb4,409204513,0,0x0,8
tick,0x7ffe67f8feb4,409219933,0,0x0,8
tick,0x7ffe67f8feb4,409234848,0,0x0,8
tick,0x7ffe67f8feb4,409250031,0,0x0,8
tick,0x7ffe67f8feb4,409265731,0,0x0,8
tick,0x7ffe67f8feb4,409280910,0,0x0,8
tick,0x7ffe67f8feb4,409296238,0,0x0,8
tick,0x7ffe67f8feb4,409311515,0,0x0,8
tick,0x7ffe67f8feb4,409327264,0,0x0,8
tick,0x7ffe67f8feb4,409343097,0,0x0,8
tick,0x7ffe67f8feb4,409358278,0,0x0,8
tick,0x7ffe67f8feb4,409374511,0,0x0,8
tick,0x7ffe67f8feb4,409389864,0,0x0,8
tick,0x7ffe67f8feb4,409405265,0,0x0,8
tick,0x7ffe67f8feb4,409419892,0,0x0,8
tick,0x7ffe67f8feb4,409434744,0,0x0,8
tick,0x7ffe67f8feb4,409449932,0,0x0,8
tick,0x7ffe67f8feb4,409465352,0,0x0,8
tick,0x7ffe67f8feb4,409480364,0,0x0,8
tick,0x7ffe67f8feb4,409496349,0,0x0,8
tick,0x7ffe67f8feb4,409511599,0,0x0,8
tick,0x7ffe67f8feb4,409527160,0,0x0,8
tick,0x7ffe67f8feb4,409543178,0,0x0,8
tick,0x7ffe67f8feb4,409559431,0,0x0,8
tick,0x7ffe67f8feb4,409574261,0,0x0,8
tick,0x7ffe67f8feb4,409589929,0,0x0,8
tick,0x7ffe67f8feb4,409605262,0,0x0,8
tick,0x7ffe67f8feb4,409619149,0,0x0,8
tick,0x7ffe67f8feb4,409635119,0,0x0,8
tick,0x7ffe67f8feb4,409651123,0,0x0,8
tick,0x7ffe67f8feb4,409666089,0,0x0,8
tick,0x7ffe67f8feb4,409681442,0,0x0,8
tick,0x7ffe67f8feb4,409697496,0,0x0,8
tick,0x7ffe67f8feb4,409712567,0,0x0,8
tick,0x7ffe67f8feb4,409727976,0,0x0,8
tick,0x7ffe67f8feb4,409743076,0,0x0,8
tick,0x7ffe67f8feb4,409758592,0,0x0,8
tick,0x7ffe67f8feb4,409774428,0,0x0,8
tick,0x7ffe67f8feb4,409790799,0,0x0,8
tick,0x7ffe67f8feb4,409804192,0,0x0,8
tick,0x7ffe67f8feb4,409819223,0,0x0,8
tick,0x7ffe67f8feb4,409833721,0,0x0,8
tick,0x7ffe67f8feb4,409848937,0,0x0,8
tick,0x7ffe67f8feb4,409864098,0,0x0,8
tick,0x7ffe67f8feb4,409879260,0,0x0,8
tick,0x7ffe67f8feb4,409895081,0,0x0,8
tick,0x7ffe67f8feb4,409910467,0,0x0,8
tick,0x7ffe67f8feb4,409925139,0,0x0,8
tick,0x7ffe67f8feb4,409941501,0,0x0,8
tick,0x7ffe67f8feb4,409957880,0,0x0,8
tick,0x7ffe67f8feb4,409971969,0,0x0,8
tick,0x7ffe67f8feb4,409988704,0,0x0,8
tick,0x7ffe67f8feb4,410003077,0,0x0,8
tick,0x7ffe67f8feb4,410019111,0,0x0,8
tick,0x7ffe67f8feb4,410034092,0,0x0,8
tick,0x7ffe67f8feb4,410049191,0,0x0,8
tick,0x7ffe67f8feb4,410065037,0,0x0,8
tick,0x7ffe67f8feb4,410081052,0,0x0,8
tick,0x7ffe67f8feb4,410097083,0,0x0,8
tick,0x7ffe67f8feb4,410113103,0,0x0,8
tick,0x7ffe67f8feb4,410129056,0,0x0,8
tick,0x7ffe67f8feb4,410145047,0,0x0,8
tick,0x7ffe67f8feb4,410161092,0,0x0,8
tick,0x7ffe67f8feb4,410176832,0,0x0,8
tick,0x7ffe67f8feb4,410191957,0,0x0,8
tick,0x7ffe67f8feb4,410207980,0,0x0,8
tick,0x7ffe67f8feb4,410224021,0,0x0,8
tick,0x7ffe67f8feb4,410240271,0,0x0,8
tick,0x7ffe67f8feb4,410256936,0,0x0,8
tick,0x7ffe67f8feb4,410270640,0,0x0,8
tick,0x7ffe67f8feb4,410286270,0,0x0,8
tick,0x7ffe67f8feb4,410301520,0,0x0,8
tick,0x7ffe67f8feb4,410316528,0,0x0,8
tick,0x7ffe67f8feb4,410332690,0,0x0,8
tick,0x7ffe67f8feb4,410347592,0,0x0,8
tick,0x7ffe67f8feb4,410362842,0,0x0,8
tick,0x7ffe67f8feb4,410378450,0,0x0,8
tick,0x7ffe67f8feb4,410394341,0,0x0,8
tick,0x7ffe67f8feb4,410409261,0,0x0,8
tick,0x7ffe67f8feb4,410425313,0,0x0,8
tick,0x7ffe67f8feb4,410441266,0,0x0,8
tick,0x7ffe67f8feb4,410457217,0,0x0,8
tick,0x7ffe67f8feb4,410473233,0,0x0,8
tick,0x7ffe67f8feb4,410489274,0,0x0,8
tick,0x7ffe67f8feb4,410505194,0,0x0,8
tick,0x7ffe67f8feb4,410520768,0,0x0,8
tick,0x7ffe67f8feb4,410536241,0,0x0,8
tick,0x7ffe67f8feb4,410550896,0,0x0,8
tick,0x7ffe67f8feb4,410566248,0,0x0,8
tick,0x7ffe67f8feb4,410580854,0,0x0,8
tick,0x7ffe67f8feb4,410596243,0,0x0,8
tick,0x7ffe67f8feb4,410612261,0,0x0,8
tick,0x7ffe67f8feb4,410627266,0,0x0,8
tick,0x7ffe67f8feb4,410642550,0,0x0,8
tick,0x7ffe67f8feb4,410658618,0,0x0,8
tick,0x7ffe67f8feb4,410674611,0,0x0,8
tick,0x7ffe67f8feb4,410690598,0,0x0,8
tick,0x7ffe67f8feb4,410706650,0,0x0,8
tick,0x7ffe67f8feb4,410722630,0,0x0,8
tick,0x7ffe67f8feb4,410737642,0,0x0,8
tick,0x7ffe67f8feb4,410752808,0,0x0,8
tick,0x7ffe67f8feb4,410768837,0,0x0,8
tick,0x7ffe67f8feb4,410784096,0,0x0,8
tick,0x7ffe67f8feb4,410799259,0,0x0,8
tick,0x7ffe67f8feb4,410815106,0,0x0,8
tick,0x7ffe67f8feb4,410830239,0,0x0,8
tick,0x7ffe67f8feb4,410846126,0,0x0,8
tick,0x7ffe67f8feb4,410861812,0,0x0,8
tick,0x7ffe67f8feb4,410877109,0,0x0,8
tick,0x7ffe67f8feb4,410893051,0,0x0,8
tick,0x7ffe67f8feb4,410909092,0,0x0,8
tick,0x7ffe67f8feb4,410925351,0,0x0,8
tick,0x7ffe67f8feb4,410942677,0,0x0,8
tick,0x7ffe67f8feb4,410957697,0,0x0,8
tick,0x7ffe67f8feb4,410972647,0,0x0,8
tick,0x7ffe67f8feb4,410988071,0,0x0,8
tick,0x7ffe67f8feb4,411004065,0,0x0,8
tick,0x7ffe67f8feb4,411019229,0,0x0,8
tick,0x7ffe67f8feb4,411034361,0,0x0,8
tick,0x7ffe67f8feb4,411049634,0,0x0,8
tick,0x7ffe67f8feb4,411065106,0,0x0,8
tick,0x7ffe67f8feb4,411081111,0,0x0,8
tick,0x7ffe67f8feb4,411097122,0,0x0,8
tick,0x7ffe67f8feb4,411112106,0,0x0,8
tick,0x7ffe67f8feb4,411128115,0,0x0,8
tick,0x7ffe67f8feb4,411144174,0,0x0,8
tick,0x7ffe67f8feb4,411159142,0,0x0,8
tick,0x7ffe67f8feb4,411175323,0,0x0,8
tick,0x7ffe67f8feb4,411191152,0,0x0,8
tick,0x7ffe67f8feb4,411207212,0,0x0,8
tick,0x7ffe67f8feb4,411222775,0,0x0,8
tick,0x7ffe67f8feb4,411237319,0,0x0,8
tick,0x7ffe67f8feb4,411252092,0,0x0,8
tick,0x7ffe67f8feb4,411267270,0,0x0,8
tick,0x7ffe67f8feb4,411282567,0,0x0,8
tick,0x7ffe67f8feb4,411298589,0,0x0,8
tick,0x7ffe67f8feb4,411313909,0,0x0,8
tick,0x7ffe67f8feb4,411329945,0,0x0,8
tick,0x7ffe67f8feb4,411345118,0,0x0,8
tick,0x7ffe67f8feb4,411361157,0,0x0,8
tick,0x7ffe67f8feb4,411377138,0,0x0,8
tick,0x7ffe67f8feb4,411392380,0,0x0,8
tick,0x7ffe67f8feb4,411408647,0,0x0,8
tick,0x7ffe67f8feb4,411424600,0,0x0,8
tick,0x7ffe67f8feb4,411439112,0,0x0,8
tick,0x7ffe67f8feb4,411454330,0,0x0,8
tick,0x7ffe67f8feb4,411470163,0,0x0,8
tick,0x7ffe67f8feb4,411485357,0,0x0,8
tick,0x7ffe67f8feb4,411500245,0,0x0,8
tick,0x7ffe67f8feb4,411516143,0,0x0,8
tick,0x7ffe67f8feb4,411530833,0,0x0,8
tick,0x7ffe67f8feb4,411546256,0,0x0,8
tick,0x7ffe67f8feb4,411562141,0,0x0,8
tick,0x7ffe67f8feb4,411578125,0,0x0,8
tick,0x7ffe67f8feb4,411594121,0,0x0,8
tick,0x7ffe67f8feb4,411610251,0,0x0,8
tick,0x7ffe67f8feb4,411626152,0,0x0,8
tick,0x7ffe67f8feb4,411642201,0,0x0,8
tick,0x7ffe67f8feb4,411657762,0,0x0,8
tick,0x7ffe67f8feb4,411672725,0,0x0,8
tick,0x7ffe67f8feb4,411688014,0,0x0,8
tick,0x7ffe67f8feb4,411704093,0,0x0,8
tick,0x7ffe67f8feb4,411719054,0,0x0,8
tick,0x7ffe67f8feb4,411734272,0,0x0,8
tick,0x7ffe67f8feb4,411750084,0,0x0,8
tick,0x7ffe67f8feb4,411765234,0,0x0,8
tick,0x7ffe67f8feb4,411781117,0,0x0,8
tick,0x7ffe67f8feb4,411796283,0,0x0,8
tick,0x7ffe67f8feb4,411811126,0,0x0,8
tick,0x7ffe67f8feb4,411827133,0,0x0,8
tick,0x7ffe67f8feb4,411843470,0,0x0,8
tick,0x7ffe67f8feb4,411858620,0,0x0,8
tick,0x7ffe67f8feb4,411874487,0,0x0,8
tick,0x7ffe67f8feb4,411890158,0,0x0,8
tick,0x7ffe67f8feb4,411905169,0,0x0,8
tick,0x7ffe67f8feb4,411920265,0,0x0,8
tick,0x7ffe67f8feb4,411936257,0,0x0,8
tick,0x7ffe67f8feb4,411951393,0,0x0,8
tick,0x7ffe67f8feb4,411967221,0,0x0,8
tick,0x7ffe67f8feb4,411983120,0,0x0,8
tick,0x7ffe67f8feb4,411999126,0,0x0,8
tick,0x7ffe67f8feb4,412015117,0,0x0,8
tick,0x7ffe67f8feb4,412031496,0,0x0,8
tick,0x7ffe67f8feb4,412047260,0,0x0,8
tick,0x7ffe67f8feb4,412063197,0,0x0,8
tick,0x7ffe67f8feb4,412079108,0,0x0,8
tick,0x7ffe67f8feb4,412095123,0,0x0,8
tick,0x7ffe67f8feb4,412111098,0,0x0,8
tick,0x7ffe67f8feb4,412127144,0,0x0,8
tick,0x7ffe67f8feb4,412143134,0,0x0,8
tick,0x7ffe67f8feb4,412158293,0,0x0,8
tick,0x7ffe67f8feb4,412174423,0,0x0,8
tick,0x7ffe67f8feb4,412190438,0,0x0,8
tick,0x7ffe67f8feb4,412205117,0,0x0,8
tick,0x7ffe67f8feb4,412221134,0,0x0,8
tick,0x7ffe67f8feb4,412237107,0,0x0,8
tick,0x7ffe67f8feb4,412252244,0,0x0,8
tick,0x7ffe67f8feb4,412268106,0,0x0,8
tick,0x7ffe67f8feb4,412284068,0,0x0,8
tick,0x7ffe67f8feb4,412299271,0,0x0,8
tick,0x7ffe67f8feb4,412314077,0,0x0,8
tick,0x7ffe67f8feb4,412329676,0,0x0,8
tick,0x7ffe67f8feb4,412345119,0,0x0,8
tick,0x7ffe67f8feb4,412361064,0,0x0,8
tick,0x7ffe67f8feb4,412377156,0,0x0,8
tick,0x7ffe67f8feb4,412392273,0,0x0,8
tick,0x7ffe67f8feb4,412407568,0,0x0,8
tick,0x7ffe67f8feb4,412421873,0,0x0,8
tick,0x7ffe67f8feb4,412437871,0,0x0,8
tick,0x7ffe67f8feb4,412453961,0,0x0,8
tick,0x7ffe67f8feb4,412470095,0,0x0,8
tick,0x7ffe67f8feb4,412485096,0,0x0,8
tick,0x7ffe67f8feb4,412500307,0,0x0,8
tick,0x7ffe67f8feb4,412515524,0,0x0,8
tick,0x7ffe67f8feb4,412531581,0,0x0,8
tick,0x7ffe67f8feb4,412546468,0,0x0,8
tick,0x7ffe67f8feb4,412562292,0,0x0,8
tick,0x7ffe67f8feb4,412577150,0,0x0,8
tick,0x7ffe67f8feb4,412592486,0,0x0,8
tick,0x7ffe67f8feb4,412607770,0,0x0,8
tick,0x7ffe67f8feb4,412624447,0,0x0,8
tick,0x7ffe67f8feb4,412638794,0,0x0,8
tick,0x7ffe67f8feb4,412654084,0,0x0,8
tick,0x7ffe67f8feb4,412669508,0,0x0,8
tick,0x7ffe67f8feb4,412685615,0,0x0,8
tick,0x7ffe67f8feb4,412701366,0,0x0,8
tick,0x7ffe67f8feb4,412717458,0,0x0,8
tick,0x7ffe67f8feb4,412732974,0,0x0,8
tick,0x7ffe67f8feb4,412748515,0,0x0,8
tick,0x7ffe67f8feb4,412764484,0,0x0,8
tick,0x7ffe67f8feb4,412781081,0,0x0,8
tick,0x7ffe67f8feb4,412795819,0,0x0,8
tick,0x7ffe67f8feb4,412812235,0,0x0,8
tick,0x7ffe67f8feb4,412827425,0,0x0,8
tick,0x7ffe67f8feb4,412843218,0,0x0,8
tick,0x7ffe67f8feb4,412859257,0,0x0,8
tick,0x7ffe67f8feb4,412875482,0,0x0,8
tick,0x7ffe67f8feb4,412888882,0,0x0,8
tick,0x7ffe67f8feb4,412904173,0,0x0,8
tick,0x7ffe67f8feb4,412919632,0,0x0,8
tick,0x7ffe67f8feb4,412934895,0,0x0,8
tick,0x7ffe67f8feb4,412949840,0,0x0,8
tick,0x7ffe67f8feb4,412964914,0,0x0,8
tick,0x7ffe67f8feb4,412980901,0,0x0,8
tick,0x7ffe67f8feb4,412996149,0,0x0,8
tick,0x7ffe67f8feb4,413012422,0,0x0,8
tick,0x7ffe67f8feb4,413028108,0,0x0,8
tick,0x7ffe67f8feb4,413043138,0,0x0,8
tick,0x7ffe67f8feb4,413060019,0,0x0,8
tick,0x7ffe67f8feb4,413074008,0,0x0,8
tick,0x7ffe67f8feb4,413089291,0,0x0,8
tick,0x7ffe67f8feb4,413104083,0,0x0,8
tick,0x7ffe67f8feb4,413120082,0,0x0,8
tick,0x7ffe67f8feb4,413136086,0,0x0,8
tick,0x7ffe67f8feb4,413152114,0,0x0,8
tick,0x7ffe67f8feb4,413168030,0,0x0,8
tick,0x7ffe67f8feb4,413183780,0,0x0,8
tick,0x7ffe67f8feb4,413199395,0,0x0,8
tick,0x7ffe67f8feb4,413214967,0,0x0,8
tick,0x7ffe67f8feb4,413230863,0,0x0,8
tick,0x7ffe67f8feb4,413246181,0,0x0,8
tick,0x7ffe67f8feb4,413262186,0,0x0,8
tick,0x7ffe67f8feb4,413277229,0,0x0,8
tick,0x7ffe67f8feb4,413292948,0,0x0,8
tick,0x7ffe67f8feb4,413308689,0,0x0,8
tick,0x7ffe67f8feb4,413324114,0,0x0,8
tick,0x7ffe67f8feb4,413339119,0,0x0,8
tick,0x7ffe67f8feb4,413353951,0,0x0,8
tick,0x7ffe67f8feb4,413369315,0,0x0,8
tick,0x7ffe67f8feb4,413384432,0,0x0,8
tick,0x7ffe67f8feb4,413399235,0,0x0,8
tick,0x7ffe67f8feb4,413415305,0,0x0,8
tick,0x7ffe67f8feb4,413430807,0,0x0,8
tick,0x7ffe67f8feb4,413446071,0,0x0,8
tick,0x7ffe67f8feb4,413462100,0,0x0,8
tick,0x7ffe67f8feb4,413478098,0,0x0,8
tick,0x7ffe67f8feb4,413494112,0,0x0,8
tick,0x7ffe67f8feb4,413510206,0,0x0,8
tick,0x7ffe67f8feb4,413526423,0,0x0,8
tick,0x7ffe67f8feb4,413542166,0,0x0,8
tick,0x7ffe67f8feb4,413558630,0,0x0,8
tick,0x7ffe67f8feb4,413572776,0,0x0,8
tick,0x7ffe67f8feb4,413588741,0,0x0,8
tick,0x7ffe67f8feb4,413604112,0,0x0,8
tick,0x7ffe67f8feb4,413619764,0,0x0,8
tick,0x7ffe67f8feb4,413635122,0,0x0,8
tick,0x7ffe67f8feb4,413649798,0,0x0,8
tick,0x7ffe67f8feb4,413665110,0,0x0,8
tick,0x7ffe67f8feb4,413680796,0,0x0,8
tick,0x7ffe67f8feb4,413696840,0,0x0,8
tick,0x7ffe67f8feb4,413711946,0,0x0,8
tick,0x7ffe67f8feb4,413727754,0,0x0,8
tick,0x7ffe67f8feb4,413743765,0,0x0,8
tick,0x7ffe67f8feb4,413760096,0,0x0,8
tick,0x7ffe67f8feb4,413775851,0,0x0,8
tick,0x7ffe67f8feb4,413792065,0,0x0,8
tick,0x7ffe67f8feb4,413806615,0,0x0,8
tick,0x7ffe67f8feb4,413822619,0,0x0,8
tick,0x7ffe67f8feb4,413838649,0,0x0,8
tick,0x7ffe67f8feb4,413854353,0,0x0,8
tick,0x7ffe67f8feb4,413869659,0,0x0,8
tick,0x7ffe67f8feb4,413885691,0,0x0,8
tick,0x7ffe67f8feb4,413901800,0,0x0,8
tick,0x7ffe67f8feb4,413917679,0,0x0,8
tick,0x7ffe67f8feb4,413932968,0,0x0,8
tick,0x7ffe67f8feb4,413948712,0,0x0,8
tick,0x7ffe67f8feb4,413964113,0,0x0,8
tick,0x7ffe67f8feb4,413979727,0,0x0,8
tick,0x7ffe67f8feb4,413995306,0,0x0,8
tick,0x7ffe67f8feb4,414011282,0,0x0,8
tick,0x7ffe67f8feb4,414027020,0,0x0,8
tick,0x7ffe67f8feb4,414043005,0,0x0,8
tick,0x7ffe67f8feb4,414058791,0,0x0,8
tick,0x7ffe67f8feb4,414076242,0,0x0,8
tick,0x7ffe67f8feb4,414093648,0,0x0,8
tick,0x7ffe67f8feb4,414106259,0,0x0,8
tick,0x7ffe67f8feb4,414121505,0,0x0,8
tick,0x7ffe67f8feb4,414137511,0,0x0,8
tick,0x7ffe67f8feb4,414153513,0,0x0,8
tick,0x7ffe67f8feb4,414168507,0,0x0,8
tick,0x7ffe67f8feb4,414184545,0,0x0,8
tick,0x7ffe67f8feb4,414200506,0,0x0,8
tick,0x7ffe67f8feb4,414215522,0,0x0,8
tick,0x7ffe67f8feb4,414230505,0,0x0,8
tick,0x7ffe67f8feb4,414245540,0,0x0,8
tick,0x7ffe67f8feb4,414261566,0,0x0,8
tick,0x7ffe67f8feb4,414276731,0,0x0,8
tick,0x7ffe67f8feb4,414292478,0,0x0,8
tick,0x7ffe67f8feb4,414307264,0,0x0,8
tick,0x7ffe67f8feb4,414322426,0,0x0,8
tick,0x7ffe67f8feb4,414337591,0,0x0,8
tick,0x7ffe67f8feb4,414352737,0,0x0,8
tick,0x7ffe67f8feb4,414368670,0,0x0,8
tick,0x7ffe67f8feb4,414384627,0,0x0,8
tick,0x7ffe67f8feb4,414399868,0,0x0,8
tick,0x7ffe67f8feb4,414415048,0,0x0,8
tick,0x7ffe67f8feb4,414431041,0,0x0,8
tick,0x7ffe67f8feb4,414447036,0,0x0,8
tick,0x7ffe67f8feb4,414463122,0,0x0,8
tick,0x7ffe67f8feb4,414479170,0,0x0,8
tick,0x7ffe67f8feb4,414495446,0,0x0,8
tick,0x7ffe67f8feb4,414510361,0,0x0,8
tick,0x7ffe67f8feb4,414525272,0,0x0,8
tick,0x7ffe67f8feb4,414540564,0,0x0,8
tick,0x7ffe67f8feb4,414556585,0,0x0,8
tick,0x7ffe67f8feb4,414572559,0,0x0,8
tick,0x7ffe67f8feb4,414588308,0,0x0,8
tick,0x7ffe67f8feb4,414603547,0,0x0,8
tick,0x7ffe67f8feb4,414618687,0,0x0,8
tick,0x7ffe67f8feb4,414634107,0,0x0,8
tick,0x7ffe67f8feb4,414649942,0,0x0,8
tick,0x7ffe67f8feb4,414664954,0,0x0,8
tick,0x7ffe67f8feb4,414680565,0,0x0,8
tick,0x7ffe67f8feb4,414697345,0,0x0,8
tick,0x7ffe67f8feb4,414712835,0,0x0,8
tick,0x7ffe67f8feb4,414728066,0,0x0,8
tick,0x7ffe67f8feb4,414744111,0,0x0,8
tick,0x7ffe67f8feb4,414759146,0,0x0,8
tick,0x7ffe67f8feb4,414775169,0,0x0,8
tick,0x7ffe67f8feb4,414789609,0,0x0,8
tick,0x7ffe67f8feb4,414805113,0,0x0,8
tick,0x7ffe67f8feb4,414820634,0,0x0,8
tick,0x7ffe67f8feb4,414836248,0,0x0,8
tick,0x7ffe67f8feb4,414851611,0,0x0,8
tick,0x7ffe67f8feb4,414867139,0,0x0,8
tick,0x7ffe67f8feb4,414882657,0,0x0,8
tick,0x7ffe67f8feb4,414899293,0,0x0,8
tick,0x7ffe67f8feb4,414914641,0,0x0,8
tick,0x7ffe67f8feb4,414929790,0,0x0,8
tick,0x7ffe67f8feb4,414944943,0,0x0,8
tick,0x7ffe67f8feb4,414960996,0,0x0,8
tick,0x7ffe67f8feb4,414976556,0,0x0,8
tick,0x7ffe67f8feb4,414992224,0,0x0,8
tick,0x7ffe67f8feb4,415008247,0,0x0,8
tick,0x7ffe67f8feb4,415024121,0,0x0,8
tick,0x7ffe67f8feb4,415039268,0,0x0,8
tick,0x7ffe67f8feb4,415054119,0,0x0,8
tick,0x7ffe67f8feb4,415070014,0,0x0,8
tick,0x7ffe67f8feb4,415085671,0,0x0,8
tick,0x7ffe67f8feb4,415101139,0,0x0,8
tick,0x7ffe67f8feb4,415117215,0,0x0,8
tick,0x7ffe67f8feb4,415133176,0,0x0,8
tick,0x7ffe67f8feb4,415148133,0,0x0,8
tick,0x7ffe67f8feb4,415164125,0,0x0,8
tick,0x7ffe67f8feb4,415180127,0,0x0,8
tick,0x7ffe67f8feb4,415195153,0,0x0,8
tick,0x7ffe67f8feb4,415211473,0,0x0,8
tick,0x7ffe67f8feb4,415226665,0,0x0,8
tick,0x7ffe67f8feb4,415242137,0,0x0,8
tick,0x7ffe67f8feb4,415257178,0,0x0,8
tick,0x7ffe67f8feb4,415272241,0,0x0,8
tick,0x7ffe67f8feb4,415288245,0,0x0,8
tick,0x7ffe67f8feb4,415303244,0,0x0,8
tick,0x7ffe67f8feb4,415318244,0,0x0,8
tick,0x7ffe67f8feb4,415334125,0,0x0,8
tick,0x7ffe67f8feb4,415350170,0,0x0,8
tick,0x7ffe67f8feb4,415365313,0,0x0,8
tick,0x7ffe67f8feb4,415380483,0,0x0,8
tick,0x7ffe67f8feb4,415396554,0,0x0,8
tick,0x7ffe67f8feb4,415410877,0,0x0,8
tick,0x7ffe67f8feb4,415427514,0,0x0,8
tick,0x7ffe67f8feb4,415441799,0,0x0,8
tick,0x7ffe67f8feb4,415457774,0,0x0,8
tick,0x7ffe67f8feb4,415473110,0,0x0,8
tick,0x7ffe67f8feb4,415488704,0,0x0,8
tick,0x7ffe67f8feb4,415504125,0,0x0,8
tick,0x7ffe67f8feb4,415519795,0,0x0,8
tick,0x7ffe67f8feb4,415534960,0,0x0,8
tick,0x7ffe67f8feb4,415550810,0,0x0,8
tick,0x7ffe67f8feb4,415566688,0,0x0,8
tick,0x7ffe67f8feb4,415582749,0,0x0,8
tick,0x7ffe67f8feb4,415598846,0,0x0,8
tick,0x7ffe67f8feb4,415614103,0,0x0,8
tick,0x7ffe67f8feb4,415630094,0,0x0,8
tick,0x7ffe67f8feb4,415645001,0,0x0,8
tick,0x7ffe67f8feb4,415661005,0,0x0,8
tick,0x7ffe67f8feb4,415676172,0,0x0,8
tick,0x7ffe67f8feb4,415691319,0,0x0,8
tick,0x7ffe67f8feb4,415706872,0,0x0,8
tick,0x7ffe67f8feb4,415722035,0,0x0,8
tick,0x7ffe67f8feb4,415738099,0,0x0,8
tick,0x7ffe67f8feb4,415754044,0,0x0,8
tick,0x7ffe67f8feb4,415769615,0,0x0,8
tick,0x7ffe67f8feb4,415785091,0,0x0,8
tick,0x7ffe67f8feb4,415800217,0,0x0,8
tick,0x7ffe67f8feb4,415815971,0,0x0,8
tick,0x7ffe67f8feb4,415831066,0,0x0,8
tick,0x7ffe67f8feb4,415847184,0,0x0,8
tick,0x7ffe67f8feb4,415862942,0,0x0,8
tick,0x7ffe67f8feb4,415878027,0,0x0,8
tick,0x7ffe67f8feb4,415894147,0,0x0,8
tick,0x7ffe67f8feb4,415910437,0,0x0,8
tick,0x7ffe67f8feb4,415924877,0,0x0,8
tick,0x7ffe67f8feb4,415940948,0,0x0,8
tick,0x7ffe67f8feb4,415957357,0,0x0,8
tick,0x7ffe67f8feb4,415972657,0,0x0,8
tick,0x7ffe67f8feb4,415987574,0,0x0,8
tick,0x7ffe67f8feb4,416002593,0,0x0,8
tick,0x7ffe67f8feb4,416018635,0,0x0,8
tick,0x7ffe67f8feb4,416034098,0,0x0,8
tick,0x7ffe67f8feb4,416049493,0,0x0,8
tick,0x7ffe67f8feb4,416065115,0,0x0,8
tick,0x7ffe67f8feb4,416080517,0,0x0,8
tick,0x7ffe67f8feb4,416096109,0,0x0,8
tick,0x7ffe67f8feb4,416112115,0,0x0,8
tick,0x7ffe67f8feb4,416126733,0,0x0,8
tick,0x7ffe67f8feb4,416142719,0,0x0,8
tick,0x7ffe67f8feb4,416158709,0,0x0,8
tick,0x7ffe67f8feb4,416173697,0,0x0,8
tick,0x7ffe67f8feb4,416189716,0,0x0,8
tick,0x7ffe67f8feb4,416205216,0,0x0,8
tick,0x7ffe67f8feb4,416221212,0,0x0,8
tick,0x7ffe67f8feb4,416237236,0,0x0,8
tick,0x7ffe67f8feb4,416252388,0,0x0,8
tick,0x7ffe67f8feb4,416267682,0,0x0,8
tick,0x7ffe67f8feb4,416282851,0,0x0,8
tick,0x7ffe67f8feb4,416297589,0,0x0,8
tick,0x7ffe67f8feb4,416313594,0,0x0,8
tick,0x7ffe67f8feb4,416329674,0,0x0,8
tick,0x7ffe67f8feb4,416345146,0,0x0,8
tick,0x7ffe67f8feb4,416360596,0,0x0,8
tick,0x7ffe67f8feb4,416376266,0,0x0,8
tick,0x7ffe67f8feb4,416391997,0,0x0,8
tick,0x7ffe67f8feb4,416407509,0,0x0,8
tick,0x7ffe67f8feb4,416422728,0,0x0,8
tick,0x7ffe67f8feb4,416437835,0,0x0,8
tick,0x7ffe67f8feb4,416453848,0,0x0,8
tick,0x7ffe67f8feb4,416469162,0,0x0,8
tick,0x7ffe67f8feb4,416485126,0,0x0,8
tick,0x7ffe67f8feb4,416500875,0,0x0,8
tick,0x7ffe67f8feb4,416516906,0,0x0,8
tick,0x7ffe67f8feb4,416532926,0,0x0,8
tick,0x7ffe67f8feb4,416548894,0,0x0,8
tick,0x7ffe67f8feb4,416564928,0,0x0,8
tick,0x7ffe67f8feb4,416581027,0,0x0,8
tick,0x7ffe67f8feb4,416596251,0,0x0,8
tick,0x7ffe67f8feb4,416611932,0,0x0,8
tick,0x7ffe67f8feb4,416628230,0,0x0,8
tick,0x7ffe67f8feb4,416642700,0,0x0,8
tick,0x7ffe67f8feb4,416657705,0,0x0,8
tick,0x7ffe67f8feb4,416673129,0,0x0,8
tick,0x7ffe67f8feb4,416688903,0,0x0,8
tick,0x7ffe67f8feb4,416704103,0,0x0,8
tick,0x7ffe67f8feb4,416720078,0,0x0,8
tick,0x7ffe67f8feb4,416735263,0,0x0,8
tick,0x7ffe67f8feb4,416750363,0,0x0,8
tick,0x7ffe67f8feb4,416766254,0,0x0,8
tick,0x7ffe67f8feb4,416782228,0,0x0,8
tick,0x7ffe67f8feb4,416798235,0,0x0,8
tick,0x7ffe67f8feb4,416813640,0,0x0,8
tick,0x7ffe67f8feb4,416828323,0,0x0,8
tick,0x7ffe67f8feb4,416844103,0,0x0,8
tick,0x7ffe67f8feb4,416859991,0,0x0,8
tick,0x7ffe67f8feb4,416875927,0,0x0,8
tick,0x7ffe67f8feb4,416891290,0,0x0,8
tick,0x7ffe67f8feb4,416907153,0,0x0,8
tick,0x7ffe67f8feb4,416923246,0,0x0,8
tick,0x7ffe67f8feb4,416939240,0,0x0,8
tick,0x7ffe67f8feb4,416955168,0,0x0,8
tick,0x7ffe67f8feb4,416971207,0,0x0,8
tick,0x7ffe67f8feb4,416986261,0,0x0,8
tick,0x7ffe67f8feb4,417002007,0,0x0,8
tick,0x7ffe67f8feb4,417018021,0,0x0,8
tick,0x7ffe67f8feb4,417034141,0,0x0,8
tick,0x7ffe67f8feb4,417050230,0,0x0,8
tick,0x7ffe67f8feb4,417066284,0,0x0,8
tick,0x7ffe67f8feb4,417081010,0,0x0,8
tick,0x7ffe67f8feb4,417097126,0,0x0,8
tick,0x7ffe67f8feb4,417113085,0,0x0,8
tick,0x7ffe67f8feb4,417129259,0,0x0,8
tick,0x7ffe67f8feb4,417144087,0,0x0,8
tick,0x7ffe67f8feb4,417159055,0,0x0,8
tick,0x7ffe67f8feb4,417175052,0,0x0,8
tick,0x7ffe67f8feb4,417190046,0,0x0,8
tick,0x7ffe67f8feb4,417206075,0,0x0,8
tick,0x7ffe67f8feb4,417222077,0,0x0,8
tick,0x7ffe67f8feb4,417237122,0,0x0,8
tick,0x7ffe67f8feb4,417252974,0,0x0,8
tick,0x7ffe67f8feb4,417269062,0,0x0,8
tick,0x7ffe67f8feb4,417285171,0,0x0,8
tick,0x7ffe67f8feb4,417300981,0,0x0,8
tick,0x7ffe67f8feb4,417317023,0,0x0,8
tick,0x7ffe67f8feb4,417331968,0,0x0,8
tick,0x7ffe67f8feb4,417348034,0,0x0,8
tick,0x7ffe67f8feb4,417364084,0,0x0,8
tick,0x7ffe67f8feb4,417380007,0,0x0,8
tick,0x7ffe67f8feb4,417395678,0,0x0,8
tick,0x7ffe67f8feb4,417410732,0,0x0,8
tick,0x7ffe67f8feb4,417425873,0,0x0,8
tick,0x7ffe67f8feb4,417441004,0,0x0,8
tick,0x7ffe67f8feb4,417456146,0,0x0,8
tick,0x7ffe67f8feb4,417472217,0,0x0,8
tick,0x7ffe67f8feb4,417486861,0,0x0,8
tick,0x7ffe67f8feb4,417502015,0,0x0,8
tick,0x7ffe67f8feb4,417516717,0,0x0,8
tick,0x7ffe67f8feb4,417531842,0,0x0,8
tick,0x7ffe67f8feb4,417546904,0,0x0,8
tick,0x7ffe67f8feb4,417562163,0,0x0,8
tick,0x7ffe67f8feb4,417577854,0,0x0,8
tick,0x7ffe67f8feb4,417593952,0,0x0,8
tick,0x7ffe67f8feb4,417609359,0,0x0,8
tick,0x7ffe67f8feb4,417625103,0,0x0,8
tick,0x7ffe67f8feb4,417639756,0,0x0,8
tick,0x7ffe67f8feb4,417655351,0,0x0,8
tick,0x7ffe67f8feb4,417671097,0,0x0,8
tick,0x7ffe67f8feb4,417686447,0,0x0,8
tick,0x7ffe67f8feb4,417701652,0,0x0,8
tick,0x7ffe67f8feb4,417717637,0,0x0,8
tick,0x7ffe67f8feb4,417733102,0,0x0,8
tick,0x7ffe67f8feb4,417748645,0,0x0,8
tick,0x7ffe67f8feb4,417764655,0,0x0,8
tick,0x7ffe67f8feb4,417780667,0,0x0,8
tick,0x7ffe67f8feb4,417796682,0,0x0,8
tick,0x7ffe67f8feb4,417811854,0,0x0,8
tick,0x7ffe67f8feb4,417827508,0,0x0,8
tick,0x7ffe67f8feb4,417842630,0,0x0,8
tick,0x7ffe67f8feb4,417857842,0,0x0,8
tick,0x7ffe67f8feb4,417873129,0,0x0,8
tick,0x7ffe67f8feb4,417888907,0,0x0,8
tick,0x7ffe67f8feb4,417904125,0,0x0,8
tick,0x7ffe67f8feb4,417919946,0,0x0,8
tick,0x7ffe67f8feb4,417935132,0,0x0,8
tick,0x7ffe67f8feb4,417950320,0,0x0,8
tick,0x7ffe67f8feb4,417966287,0,0x0,8
tick,0x7ffe67f8feb4,417982401,0,0x0,8
tick,0x7ffe67f8feb4,417997966,0,0x0,8
tick,0x7ffe67f8feb4,418013996,0,0x0,8
tick,0x7ffe67f8feb4,418030023,0,0x0,8
tick,0x7ffe67f8feb4,418046274,0,0x0,8
tick,0x7ffe67f8feb4,418061462,0,0x0,8
tick,0x7ffe67f8feb4,418077220,0,0x0,8
tick,0x7ffe67f8feb4,418092425,0,0x0,8
tick,0x7ffe67f8feb4,418108476,0,0x0,8
tick,0x7ffe67f8feb4,418124453,0,0x0,8
tick,0x7ffe67f8feb4,418139718,0,0x0,8
tick,0x7ffe67f8feb4,418155694,0,0x0,8
tick,0x7ffe67f8feb4,418171667,0,0x0,8
tick,0x7ffe67f8feb4,418187646,0,0x0,8
tick,0x7ffe67f8feb4,418203729,0,0x0,8
tick,0x7ffe67f8feb4,418219641,0,0x0,8
tick,0x7ffe67f8feb4,418235727,0,0x0,8
tick,0x7ffe67f8feb4,418251682,0,0x0,8
tick,0x7ffe67f8feb4,418267706,0,0x0,8
tick,0x7ffe67f8feb4,418283129,0,0x0,8
tick,0x7ffe67f8feb4,418299207,0,0x0,8
tick,0x7ffe67f8feb4,418315221,0,0x0,8
tick,0x7ffe67f8feb4,418331565,0,0x0,8
tick,0x7ffe67f8feb4,418347459,0,0x0,8
tick,0x7ffe67f8feb4,418363299,0,0x0,8
tick,0x7ffe67f8feb4,418379291,0,0x0,8
tick,0x7ffe67f8feb4,418395364,0,0x0,8
tick,0x7ffe67f8feb4,418411207,0,0x0,8
tick,0x7ffe67f8feb4,418426290,0,0x0,8
tick,0x7ffe67f8feb4,418441486,0,0x0,8
tick,0x7ffe67f8feb4,418457071,0,0x0,8
tick,0x7ffe67f8feb4,418472509,0,0x0,8
tick,0x7ffe67f8feb4,418488198,0,0x0,8
tick,0x7ffe67f8feb4,418504130,0,0x0,8
tick,0x7ffe67f8feb4,418520159,0,0x0,8
tick,0x7ffe67f8feb4,418535294,0,0x0,8
tick,0x7ffe67f8feb4,418550650,0,0x0,8
tick,0x7ffe67f8feb4,418566247,0,0x0,8
tick,0x7ffe67f8feb4,418582153,0,0x0,8
tick,0x7ffe67f8feb4,418597882,0,0x0,8
tick,0x7ffe67f8feb4,418613511,0,0x0,8
tick,0x7ffe67f8feb4,418629229,0,0x0,8
tick,0x7ffe67f8feb4,418644148,0,0x0,8
tick,0x7ffe67f8feb4,418660203,0,0x0,8
tick,0x7ffe67f8feb4,418676323,0,0x0,8
tick,0x7ffe67f8feb4,418692235,0,0x0,8
tick,0x7ffe67f8feb4,418708200,0,0x0,8
tick,0x7ffe67f8feb4,418724120,0,0x0,8
tick,0x7ffe67f8feb4,418739419,0,0x0,8
tick,0x7ffe67f8feb4,418754817,0,0x0,8
tick,0x7ffe67f8feb4,418770750,0,0x0,8
tick,0x7ffe67f8feb4,418786292,0,0x0,8
tick,0x7ffe67f8feb4,418802161,0,0x0,8
tick,0x7ffe67f8feb4,418818196,0,0x0,8
tick,0x7ffe67f8feb4,418833992,0,0x0,8
tick,0x7ffe67f8feb4,418850023,0,0x0,8
tick,0x7ffe67f8feb4,418865966,0,0x0,8
tick,0x7ffe67f8feb4,418880976,0,0x0,8
tick,0x7ffe67f8feb4,418897365,0,0x0,8
tick,0x7ffe67f8feb4,418912239,0,0x0,8
tick,0x7ffe67f8feb4,418928258,0,0x0,8
tick,0x7ffe67f8feb4,418944162,0,0x0,8
tick,0x7ffe67f8feb4,418960247,0,0x0,8
tick,0x7ffe67f8feb4,418976126,0,0x0,8
tick,0x7ffe67f8feb4,418992169,0,0x0,8
tick,0x7ffe67f8feb4,419008192,0,0x0,8
tick,0x7ffe67f8feb4,419024137,0,0x0,8
tick,0x7ffe67f8feb4,419039329,0,0x0,8
tick,0x7ffe67f8feb4,419055285,0,0x0,8
tick,0x7ffe67f8feb4,419070598,0,0x0,8
tick,0x7ffe67f8feb4,419085658,0,0x0,8
tick,0x7ffe67f8feb4,419100902,0,0x0,8
tick,0x7ffe67f8feb4,419115904,0,0x0,8
tick,0x7ffe67f8feb4,419130949,0,0x0,8
tick,0x7ffe67f8feb4,419146284,0,0x0,8
tick,0x7ffe67f8feb4,419162278,0,0x0,8
tick,0x7ffe67f8feb4,419178354,0,0x0,8
tick,0x7ffe67f8feb4,419194905,0,0x0,8
tick,0x7ffe67f8feb4,419210809,0,0x0,8
tick,0x7ffe67f8feb4,419225801,0,0x0,8
tick,0x7ffe67f8feb4,419240837,0,0x0,8
tick,0x7ffe67f8feb4,419256781,0,0x0,8
tick,0x7ffe67f8feb4,419271898,0,0x0,8
tick,0x7ffe67f8feb4,419287265,0,0x0,8
tick,0x7ffe67f8feb4,419302553,0,0x0,8
tick,0x7ffe67f8feb4,419318268,0,0x0,8
tick,0x7ffe67f8feb4,419334341,0,0x0,8
tick,0x7ffe67f8feb4,419350307,0,0x0,8
tick,0x7ffe67f8feb4,419366351,0,0x0,8
tick,0x7ffe67f8feb4,419382343,0,0x0,8
tick,0x7ffe67f8feb4,419398366,0,0x0,8
tick,0x7ffe67f8feb4,419414351,0,0x0,8
tick,0x7ffe67f8feb4,419430307,0,0x0,8
tick,0x7ffe67f8feb4,419446288,0,0x0,8
tick,0x7ffe67f8feb4,419461824,0,0x0,8
tick,0x7ffe67f8feb4,419477309,0,0x0,8
tick,0x7ffe67f8feb4,419493333,0,0x0,8
tick,0x7ffe67f8feb4,419509171,0,0x0,8
tick,0x7ffe67f8feb4,419525142,0,0x0,8
tick,0x7ffe67f8feb4,419540291,0,0x0,8
tick,0x7ffe67f8feb4,419556281,0,0x0,8
tick,0x7ffe67f8feb4,419571436,0,0x0,8
tick,0x7ffe67f8feb4,419587202,0,0x0,8
tick,0x7ffe67f8feb4,419603135,0,0x0,8
tick,0x7ffe67f8feb4,419619173,0,0x0,8
tick,0x7ffe67f8feb4,419634314,0,0x0,8
tick,0x7ffe67f8feb4,419650170,0,0x0,8
tick,0x7ffe67f8feb4,419666492,0,0x0,8
tick,0x7ffe67f8feb4,419682384,0,0x0,8
tick,0x7ffe67f8feb4,419698269,0,0x0,8
tick,0x7ffe67f8feb4,419713477,0,0x0,8
tick,0x7ffe67f8feb4,419729443,0,0x0,8
tick,0x7ffe67f8feb4,419745324,0,0x0,8
tick,0x7ffe67f8feb4,419760573,0,0x0,8
tick,0x7ffe67f8feb4,419776534,0,0x0,8
tick,0x7ffe67f8feb4,419792152,0,0x0,8
tick,0x7ffe67f8feb4,419807657,0,0x0,8
tick,0x7ffe67f8feb4,419822817,0,0x0,8
tick,0x7ffe67f8feb4,419837712,0,0x0,8
tick,0x7ffe67f8feb4,419853195,0,0x0,8
tick,0x7ffe67f8feb4,419868764,0,0x0,8
tick,0x7ffe67f8feb4,419884579,0,0x0,8
tick,0x7ffe67f8feb4,419899539,0,0x0,8
tick,0x7ffe67f8feb4,419915239,0,0x0,8
tick,0x7ffe67f8feb4,419931213,0,0x0,8
tick,0x7ffe67f8feb4,419946333,0,0x0,8
tick,0x7ffe67f8feb4,419962050,0,0x0,8
tick,0x7ffe67f8feb4,419977325,0,0x0,8
tick,0x7ffe67f8feb4,419992960,0,0x0,8
tick,0x7ffe67f8feb4,420008473,0,0x0,8
tick,0x7ffe67f8feb4,420024223,0,0x0,8
tick,0x7ffe67f8feb4,420039528,0,0x0,8
tick,0x7ffe67f8feb4,420055188,0,0x0,8
tick,0x7ffe67f8feb4,420070304,0,0x0,8
tick,0x7ffe67f8feb4,420086284,0,0x0,8
tick,0x7ffe67f8feb4,420102619,0,0x0,8
tick,0x7ffe67f8feb4,420118227,0,0x0,8
tick,0x7ffe67f8feb4,420134265,0,0x0,8
tick,0x7ffe67f8feb4,420149477,0,0x0,8
tick,0x7ffe67f8feb4,420165395,0,0x0,8
tick,0x7ffe67f8feb4,420181797,0,0x0,8
tick,0x7ffe67f8feb4,420197291,0,0x0,8
tick,0x7ffe67f8feb4,420212870,0,0x0,8
tick,0x7ffe67f8feb4,420227885,0,0x0,8
tick,0x7ffe67f8feb4,420243891,0,0x0,8
tick,0x7ffe67f8feb4,420259929,0,0x0,8
tick,0x7ffe67f8feb4,420275916,0,0x0,8
tick,0x7ffe67f8feb4,420291888,0,0x0,8
tick,0x7ffe67f8feb4,420307828,0,0x0,8
tick,0x7ffe67f8feb4,420323790,0,0x0,8
tick,0x7ffe67f8feb4,420338783,0,0x0,8
tick,0x7ffe67f8feb4,420354785,0,0x0,8
tick,0x7ffe67f8feb4,420370864,0,0x0,8
tick,0x7ffe67f8feb4,420386787,0,0x0,8
tick,0x7ffe67f8feb4,420402803,0,0x0,8
tick,0x7ffe67f8feb4,420418782,0,0x0,8
tick,0x7ffe67f8feb4,420434822,0,0x0,8
tick,0x7ffe67f8feb4,420450786,0,0x0,8
tick,0x7ffe67f8feb4,420466992,0,0x0,8
tick,0x7ffe67f8feb4,420482814,0,0x0,8
tick,0x7ffe67f8feb4,420499007,0,0x0,8
tick,0x7ffe67f8feb4,420514255,0,0x0,8
tick,0x7ffe67f8feb4,420530150,0,0x0,8
tick,0x7ffe67f8feb4,420545133,0,0x0,8
tick,0x7ffe67f8feb4,420561067,0,0x0,8
tick,0x7ffe67f8feb4,420576278,0,0x0,8
tick,0x7ffe67f8feb4,420591242,0,0x0,8
tick,0x7ffe67f8feb4,420606457,0,0x0,8
tick,0x7ffe67f8feb4,420622435,0,0x0,8
tick,0x7ffe67f8feb4,420638471,0,0x0,8
tick,0x7ffe67f8feb4,420654558,0,0x0,8
tick,0x7ffe67f8feb4,420670515,0,0x0,8
tick,0x7ffe67f8feb4,420686298,0,0x0,8
tick,0x7ffe67f8feb4,420702291,0,0x0,8
tick,0x7ffe67f8feb4,420718392,0,0x0,8
tick,0x7ffe67f8feb4,420734424,0,0x0,8
tick,0x7ffe67f8feb4,420750383,0,0x0,8
tick,0x7ffe67f8feb4,420766399,0,0x0,8
tick,0x7ffe67f8feb4,420781451,0,0x0,8
tick,0x7ffe67f8feb4,420797539,0,0x0,8
tick,0x7ffe67f8feb4,420813555,0,0x0,8
tick,0x7ffe67f8feb4,420829511,0,0x0,8
tick,0x7ffe67f8feb4,420844169,0,0x0,8
tick,0x7ffe67f8feb4,420859534,0,0x0,8
tick,0x7ffe67f8feb4,420875154,0,0x0,8
tick,0x7ffe67f8feb4,420890552,0,0x0,8
tick,0x7ffe67f8feb4,420906290,0,0x0,8
tick,0x7ffe67f8feb4,420921542,0,0x0,8
tick,0x7ffe67f8feb4,420937258,0,0x0,8
tick,0x7ffe67f8feb4,420952951,0,0x0,8
tick,0x7ffe67f8feb4,420968622,0,0x0,8
tick,0x7ffe67f8feb4,420984671,0,0x0,8
tick,0x7ffe67f8feb4,420999949,0,0x0,8
tick,0x7ffe67f8feb4,421016807,0,0x0,8
tick,0x7ffe67f8feb4,421031573,0,0x0,8
tick,0x7ffe67f8feb4,421047604,0,0x0,8
tick,0x7ffe67f8feb4,421062598,0,0x0,8
tick,0x7ffe67f8feb4,421077693,0,0x0,8
tick,0x7ffe67f8feb4,421093590,0,0x0,8
tick,0x7ffe67f8feb4,421109596,0,0x0,8
tick,0x7ffe67f8feb4,421125163,0,0x0,8
tick,0x7ffe67f8feb4,421141305,0,0x0,8
tick,0x7ffe67f8feb4,421156240,0,0x0,8
tick,0x7ffe67f8feb4,421171261,0,0x0,8
tick,0x7ffe67f8feb4,421187411,0,0x0,8
tick,0x7ffe67f8feb4,421203241,0,0x0,8
tick,0x7ffe67f8feb4,421219266,0,0x0,8
tick,0x7ffe67f8feb4,421235295,0,0x0,8
tick,0x7ffe67f8feb4,421251267,0,0x0,8
tick,0x7ffe67f8feb4,421267255,0,0x0,8
tick,0x7ffe67f8feb4,421283349,0,0x0,8
tick,0x7ffe67f8feb4,421299494,0,0x0,8
tick,0x7ffe67f8feb4,421314587,0,0x0,8
tick,0x7ffe67f8feb4,421329778,0,0x0,8
tick,0x7ffe67f8feb4,421345605,0,0x0,8
tick,0x7ffe67f8feb4,421361080,0,0x0,8
tick,0x7ffe67f8feb4,421377194,0,0x0,8
tick,0x7ffe67f8feb4,421393150,0,0x0,8
tick,0x7ffe67f8feb4,421409180,0,0x0,8
tick,0x7ffe67f8feb4,421425158,0,0x0,8
tick,0x7ffe67f8feb4,421440700,0,0x0,8
tick,0x7ffe67f8feb4,421456331,0,0x0,8
tick,0x7ffe67f8feb4,421472399,0,0x0,8
tick,0x7ffe67f8feb4,421488506,0,0x0,8
tick,0x7ffe67f8feb4,421504419,0,0x0,8
tick,0x7ffe67f8feb4,421520632,0,0x0,8
tick,0x7ffe67f8feb4,421537140,0,0x0,8
tick,0x7ffe67f8feb4,421553052,0,0x0,8
tick,0x7ffe67f8feb4,421568056,0,0x0,8
tick,0x7ffe67f8feb4,421584007,0,0x0,8
tick,0x7ffe67f8feb4,421598769,0,0x0,8
tick,0x7ffe67f8feb4,421614156,0,0x0,8
tick,0x7ffe67f8feb4,421630191,0,0x0,8
tick,0x7ffe67f8feb4,421645286,0,0x0,8
tick,0x7ffe67f8feb4,421661143,0,0x0,8
tick,0x7ffe67f8feb4,421675799,0,0x0,8
tick,0x7ffe67f8feb4,421690954,0,0x0,8
tick,0x7ffe67f8feb4,421706105,0,0x0,8
tick,0x7ffe67f8feb4,421722021,0,0x0,8
tick,0x7ffe67f8feb4,421737911,0,0x0,8
tick,0x7ffe67f8feb4,421753772,0,0x0,8
tick,0x7ffe67f8feb4,421769486,0,0x0,8
tick,0x7ffe67f8feb4,421784715,0,0x0,8
tick,0x7ffe67f8feb4,421799185,0,0x0,8
tick,0x7ffe67f8feb4,421814727,0,0x0,8
tick,0x7ffe67f8feb4,421830835,0,0x0,8
tick,0x7ffe67f8feb4,421846771,0,0x0,8
tick,0x7ffe67f8feb4,421862124,0,0x0,8
tick,0x7ffe67f8feb4,421877799,0,0x0,8
tick,0x7ffe67f8feb4,421893170,0,0x0,8
tick,0x7ffe67f8feb4,421909020,0,0x0,8
tick,0x7ffe67f8feb4,421925133,0,0x0,8
tick,0x7ffe67f8feb4,421940760,0,0x0,8
tick,0x7ffe67f8feb4,421955910,0,0x0,8
tick,0x7ffe67f8feb4,421970791,0,0x0,8
tick,0x7ffe67f8feb4,421986495,0,0x0,8
tick,0x7ffe67f8feb4,422002332,0,0x0,8
tick,0x7ffe67f8feb4,422018894,0,0x0,8
tick,0x7ffe67f8feb4,422032193,0,0x0,8
tick,0x7ffe67f8feb4,422048230,0,0x0,8
tick,0x7ffe67f8feb4,422062857,0,0x0,8
tick,0x7ffe67f8feb4,422078944,0,0x0,8
tick,0x7ffe67f8feb4,422094236,0,0x0,8
tick,0x7ffe67f8feb4,422109613,0,0x0,8
tick,0x7ffe67f8feb4,422124792,0,0x0,8
tick,0x7ffe67f8feb4,422139974,0,0x0,8
tick,0x7ffe67f8feb4,422156046,0,0x0,8
tick,0x7ffe67f8feb4,422172023,0,0x0,8
tick,0x7ffe67f8feb4,422187397,0,0x0,8
tick,0x7ffe67f8feb4,422203087,0,0x0,8
tick,0x7ffe67f8feb4,422219073,0,0x0,8
tick,0x7ffe67f8feb4,422233042,0,0x0,8
tick,0x7ffe67f8feb4,422248230,0,0x0,8
tick,0x7ffe67f8feb4,422262627,0,0x0,8
tick,0x7ffe67f8feb4,422277922,0,0x0,8
tick,0x7ffe67f8feb4,422293171,0,0x0,8
tick,0x7ffe67f8feb4,422308184,0,0x0,8
tick,0x7ffe67f8feb4,422324129,0,0x0,8
tick,0x7ffe67f8feb4,422339637,0,0x0,8
tick,0x7ffe67f8feb4,422355127,0,0x0,8
tick,0x7ffe67f8feb4,422370535,0,0x0,8
tick,0x7ffe67f8feb4,422386274,0,0x0,8
tick,0x7ffe67f8feb4,422401191,0,0x0,8
tick,0x7ffe67f8feb4,422416271,0,0x0,8
tick,0x7ffe67f8feb4,422432368,0,0x0,8
tick,0x7ffe67f8feb4,422448290,0,0x0,8
tick,0x7ffe67f8feb4,422463150,0,0x0,8
tick,0x7ffe67f8feb4,422478319,0,0x0,8
tick,0x7ffe67f8feb4,422494155,0,0x0,8
tick,0x7ffe67f8feb4,422509339,0,0x0,8
tick,0x7ffe67f8feb4,422525500,0,0x0,8
tick,0x7ffe67f8feb4,422541465,0,0x0,8
tick,0x7ffe67f8feb4,422556465,0,0x0,8
tick,0x7ffe67f8feb4,422572636,0,0x0,8
tick,0x7ffe67f8feb4,422588442,0,0x0,8
tick,0x7ffe67f8feb4,422604520,0,0x0,8
tick,0x7ffe67f8feb4,422619459,0,0x0,8
tick,0x7ffe67f8feb4,422634481,0,0x0,8
tick,0x7ffe67f8feb4,422650582,0,0x0,8
tick,0x7ffe67f8feb4,422666444,0,0x0,8
tick,0x7ffe67f8feb4,422682441,0,0x0,8
tick,0x7ffe67f8feb4,422698423,0,0x0,8
tick,0x7ffe67f8feb4,422714472,0,0x0,8
tick,0x7ffe67f8feb4,422730422,0,0x0,8
tick,0x7ffe67f8feb4,422746439,0,0x0,8
tick,0x7ffe67f8feb4,422762444,0,0x0,8
tick,0x7ffe67f8feb4,422778445,0,0x0,8
tick,0x7ffe67f8feb4,422794445,0,0x0,8
tick,0x7ffe67f8feb4,422810435,0,0x0,8
tick,0x7ffe67f8feb4,422826463,0,0x0,8
tick,0x7ffe67f8feb4,422841488,0,0x0,8
tick,0x7ffe67f8feb4,422857538,0,0x0,8
tick,0x7ffe67f8feb4,422873465,0,0x0,8
tick,0x7ffe67f8feb4,422889452,0,0x0,8
tick,0x7ffe67f8feb4,422905479,0,0x0,8
tick,0x7ffe67f8feb4,422920475,0,0x0,8
tick,0x7ffe67f8feb4,422935510,0,0x0,8
tick,0x7ffe67f8feb4,422951461,0,0x0,8
tick,0x7ffe67f8feb4,422967685,0,0x0,8
tick,0x7ffe67f8feb4,422983462,0,0x0,8
tick,0x7ffe67f8feb4,422999508,0,0x0,8
tick,0x7ffe67f8feb4,423014458,0,0x0,8
tick,0x7ffe67f8feb4,423029471,0,0x0,8
tick,0x7ffe67f8feb4,423045563,0,0x0,8
tick,0x7ffe67f8feb4,423061467,0,0x0,8
tick,0x7ffe67f8feb4,423077467,0,0x0,8
tick,0x7ffe67f8feb4,423093483,0,0x0,8
tick,0x7ffe67f8feb4,423109463,0,0x0,8
tick,0x7ffe67f8feb4,423125459,0,0x0,8
tick,0x7ffe67f8feb4,423141549,0,0x0,8
tick,0x7ffe67f8feb4,423157496,0,0x0,8
tick,0x7ffe67f8feb4,423173518,0,0x0,8
tick,0x7ffe67f8feb4,423189503,0,0x0,8
tick,0x7ffe67f8feb4,423205484,0,0x0,8
tick,0x7ffe67f8feb4,423221486,0,0x0,8
tick,0x7ffe67f8feb4,423237517,0,0x0,8
tick,0x7ffe67f8feb4,423253546,0,0x0,8
tick,0x7ffe67f8feb4,423269498,0,0x0,8
tick,0x7ffe67f8feb4,423285583,0,0x0,8
tick,0x7ffe67f8feb4,423301263,0,0x0,8
tick,0x7ffe67f8feb4,423316305,0,0x0,8
tick,0x7ffe67f8feb4,423331490,0,0x0,8
tick,0x7ffe67f8feb4,423347311,0,0x0,8
tick,0x7ffe67f8feb4,423362510,0,0x0,8
tick,0x7ffe67f8feb4,423378341,0,0x0,8
tick,0x7ffe67f8feb4,423394165,0,0x0,8
tick,0x7ffe67f8feb4,423409381,0,0x0,8
tick,0x7ffe67f8feb4,423425162,0,0x0,8
tick,0x7ffe67f8feb4,423440401,0,0x0,8
tick,0x7ffe67f8feb4,423456343,0,0x0,8
tick,0x7ffe67f8feb4,423471347,0,0x0,8
tick,0x7ffe67f8feb4,423486318,0,0x0,8
tick,0x7ffe67f8feb4,423502353,0,0x0,8
tick,0x7ffe67f8feb4,423518500,0,0x0,8
tick,0x7ffe67f8feb4,423534119,0,0x0,8
tick,0x7ffe67f8feb4,423550174,0,0x0,8
tick,0x7ffe67f8feb4,423565324,0,0x0,8
tick,0x7ffe67f8feb4,423580463,0,0x0,8
tick,0x7ffe67f8feb4,423596316,0,0x0,8
tick,0x7ffe67f8feb4,423612363,0,0x0,8
tick,0x7ffe67f8feb4,423628377,0,0x0,8
tick,0x7ffe67f8feb4,423644152,0,0x0,8
tick,0x7ffe67f8feb4,423659654,0,0x0,8
tick,0x7ffe67f8feb4,423675335,0,0x0,8
tick,0x7ffe67f8feb4,423690332,0,0x0,8
tick,0x7ffe67f8feb4,423706355,0,0x0,8
tick,0x7ffe67f8feb4,423721619,0,0x0,8
tick,0x7ffe67f8feb4,423737620,0,0x0,8
tick,0x7ffe67f8feb4,423753642,0,0x0,8
tick,0x7ffe67f8feb4,423769704,0,0x0,8
tick,0x7ffe67f8feb4,423786118,0,0x0,8
tick,0x7ffe67f8feb4,423802003,0,0x0,8
tick,0x7ffe67f8feb4,423817633,0,0x0,8
tick,0x7ffe67f8feb4,423833158,0,0x0,8
tick,0x7ffe67f8feb4,423848689,0,0x0,8
tick,0x7ffe67f8feb4,423864669,0,0x0,8
tick,0x7ffe67f8feb4,423879799,0,0x0,8
tick,0x7ffe67f8feb4,423895313,0,0x0,8
tick,0x7ffe67f8feb4,423910817,0,0x0,8
tick,0x7ffe67f8feb4,423926302,0,0x0,8
tick,0x7ffe67f8feb4,423941442,0,0x0,8
tick,0x7ffe67f8feb4,423957355,0,0x0,8
tick,0x7ffe67f8feb4,423972736,0,0x0,8
tick,0x7ffe67f8feb4,423988312,0,0x0,8
tick,0x7ffe67f8feb4,424004362,0,0x0,8
tick,0x7ffe67f8feb4,424020329,0,0x0,8
tick,0x7ffe67f8feb4,424036357,0,0x0,8
tick,0x7ffe67f8feb4,424051977,0,0x0,8
tick,0x7ffe67f8feb4,424067406,0,0x0,8
tick,0x7ffe67f8feb4,424082334,0,0x0,8
tick,0x7ffe67f8feb4,424097597,0,0x0,8
tick,0x7ffe67f8feb4,424113040,0,0x0,8
tick,0x7ffe67f8feb4,424128873,0,0x0,8
tick,0x7ffe67f8feb4,424144450,0,0x0,8
tick,0x7ffe67f8feb4,424159326,0,0x0,8
tick,0x7ffe67f8feb4,424174346,0,0x0,8
tick,0x7ffe67f8feb4,424190212,0,0x0,8
tick,0x7ffe67f8feb4,424206188,0,0x0,8
tick,0x7ffe67f8feb4,424222193,0,0x0,8
tick,0x7ffe67f8feb4,424238166,0,0x0,8
tick,0x7ffe67f8feb4,424253234,0,0x0,8
tick,0x7ffe67f8feb4,424269481,0,0x0,8
tick,0x7ffe67f8feb4,424285549,0,0x0,8
tick,0x7ffe67f8feb4,424301178,0,0x0,8
tick,0x7ffe67f8feb4,424316389,0,0x0,8
tick,0x7ffe67f8feb4,424331557,0,0x0,8
tick,0x7ffe67f8feb4,424346628,0,0x0,8
tick,0x7ffe67f8feb4,424362140,0,0x0,8
tick,0x7ffe67f8feb4,424377730,0,0x0,8
tick,0x7ffe67f8feb4,424392877,0,0x0,8
tick,0x7ffe67f8feb4,424408817,0,0x0,8
tick,0x7ffe67f8feb4,424424752,0,0x0,8
tick,0x7ffe67f8feb4,424440802,0,0x0,8
tick,0x7ffe67f8feb4,424456307,0,0x0,8
tick,0x7ffe67f8feb4,424471830,0,0x0,8
tick,0x7ffe67f8feb4,424487829,0,0x0,8
tick,0x7ffe67f8feb4,424503969,0,0x0,8
tick,0x7ffe67f8feb4,424519987,0,0x0,8
tick,0x7ffe67f8feb4,424535159,0,0x0,8
tick,0x7ffe67f8feb4,424551185,0,0x0,8
tick,0x7ffe67f8feb4,424566318,0,0x0,8
tick,0x7ffe67f8feb4,424582305,0,0x0,8
tick,0x7ffe67f8feb4,424598324,0,0x0,8
tick,0x7ffe67f8feb4,424614205,0,0x0,8
tick,0x7ffe67f8feb4,424630151,0,0x0,8
tick,0x7ffe67f8feb4,424645313,0,0x0,8
tick,0x7ffe67f8feb4,424661033,0,0x0,8
tick,0x7ffe67f8feb4,424676553,0,0x0,8
tick,0x7ffe67f8feb4,424692608,0,0x0,8
tick,0x7ffe67f8feb4,424708449,0,0x0,8
tick,0x7ffe67f8feb4,424724480,0,0x0,8
tick,0x7ffe67f8feb4,424740214,0,0x0,8
tick,0x7ffe67f8feb4,424756178,0,0x0,8
tick,0x7ffe67f8feb4,424771997,0,0x0,8
tick,0x7ffe67f8feb4,424788753,0,0x0,8
tick,0x7ffe67f8feb4,424803974,0,0x0,8
tick,0x7ffe67f8feb4,424819659,0,0x0,8
tick,0x7ffe67f8feb4,424835172,0,0x0,8
tick,0x7ffe67f8feb4,424850782,0,0x0,8
tick,0x7ffe67f8feb4,424866289,0,0x0,8
tick,0x7ffe67f8feb4,424882344,0,0x0,8
tick,0x7ffe67f8feb4,424898165,0,0x0,8
tick,0x7ffe67f8feb4,424914150,0,0x0,8
tick,0x7ffe67f8feb4,424930199,0,0x0,8
tick,0x7ffe67f8feb4,424946301,0,0x0,8
tick,0x7ffe67f8feb4,424962218,0,0x0,8
tick,0x7ffe67f8feb4,424977916,0,0x0,8
tick,0x7ffe67f8feb4,424993282,0,0x0,8
tick,0x7ffe67f8feb4,425009200,0,0x0,8
tick,0x7ffe67f8feb4,425024688,0,0x0,8
tick,0x7ffe67f8feb4,425040658,0,0x0,8
tick,0x7ffe67f8feb4,425056048,0,0x0,8
tick,0x7ffe67f8feb4,425072478,0,0x0,8
tick,0x7ffe67f8feb4,425087682,0,0x0,8
tick,0x7ffe67f8feb4,425102573,0,0x0,8
tick,0x7ffe67f8feb4,425118578,0,0x0,8
tick,0x7ffe67f8feb4,425133606,0,0x0,8
tick,0x7ffe67f8feb4,425149192,0,0x0,8
tick,0x7ffe67f8feb4,425165241,0,0x0,8
tick,0x7ffe67f8feb4,425180227,0,0x0,8
tick,0x7ffe67f8feb4,425196177,0,0x0,8
tick,0x7ffe67f8feb4,425212197,0,0x0,8
tick,0x7ffe67f8feb4,425228222,0,0x0,8
tick,0x7ffe67f8feb4,425244169,0,0x0,8
tick,0x7ffe67f8feb4,425260199,0,0x0,8
tick,0x7ffe67f8feb4,425276211,0,0x0,8
tick,0x7ffe67f8feb4,425292195,0,0x0,8
tick,0x7ffe67f8feb4,425308272,0,0x0,8
tick,0x7ffe67f8feb4,425324163,0,0x0,8
tick,0x7ffe67f8feb4,425339898,0,0x0,8
tick,0x7ffe67f8feb4,425355584,0,0x0,8
tick,0x7ffe67f8feb4,425370174,0,0x0,8
tick,0x7ffe67f8feb4,425385200,0,0x0,8
tick,0x7ffe67f8feb4,425400895,0,0x0,8
tick,0x7ffe67f8feb4,425416323,0,0x0,8
tick,0x7ffe67f8feb4,425431572,0,0x0,8
tick,0x7ffe67f8feb4,425447633,0,0x0,8
tick,0x7ffe67f8feb4,425462717,0,0x0,8
tick,0x7ffe67f8feb4,425478185,0,0x0,8
tick,0x7ffe67f8feb4,425494225,0,0x0,8
tick,0x7ffe67f8feb4,425510170,0,0x0,8
tick,0x7ffe67f8feb4,425525193,0,0x0,8
tick,0x7ffe67f8feb4,425541202,0,0x0,8
tick,0x7ffe67f8feb4,425557183,0,0x0,8
tick,0x7ffe67f8feb4,425573502,0,0x0,8
tick,0x7ffe67f8feb4,425588920,0,0x0,8
tick,0x7ffe67f8feb4,425604834,0,0x0,8
tick,0x7ffe67f8feb4,425620335,0,0x0,8
tick,0x7ffe67f8feb4,425635307,0,0x0,8
tick,0x7ffe67f8feb4,425650787,0,0x0,8
tick,0x7ffe67f8feb4,425666337,0,0x0,8
tick,0x7ffe67f8feb4,425682440,0,0x0,8
tick,0x7ffe67f8feb4,425698145,0,0x0,8
tick,0x7ffe67f8feb4,425713045,0,0x0,8
tick,0x7ffe67f8feb4,425729055,0,0x0,8
tick,0x7ffe67f8feb4,425744050,0,0x0,8
tick,0x7ffe67f8feb4,425759594,0,0x0,8
tick,0x7ffe67f8feb4,425775388,0,0x0,8
tick,0x7ffe67f8feb4,425790283,0,0x0,8
tick,0x7ffe67f8feb4,425806242,0,0x0,8
tick,0x7ffe67f8feb4,425821531,0,0x0,8
tick,0x7ffe67f8feb4,425837209,0,0x0,8
tick,0x7ffe67f8feb4,425852189,0,0x0,8
tick,0x7ffe67f8feb4,425868171,0,0x0,8
tick,0x7ffe67f8feb4,425884157,0,0x0,8
tick,0x7ffe67f8feb4,425899720,0,0x0,8
tick,0x7ffe67f8feb4,425914269,0,0x0,8
tick,0x7ffe67f8feb4,425929975,0,0x0,8
tick,0x7ffe67f8feb4,425945099,0,0x0,8
tick,0x7ffe67f8feb4,425961148,0,0x0,8
tick,0x7ffe67f8feb4,425977121,0,0x0,8
tick,0x7ffe67f8feb4,425992334,0,0x0,8
tick,0x7ffe67f8feb4,426008104,0,0x0,8
tick,0x7ffe67f8feb4,426024045,0,0x0,8
tick,0x7ffe67f8feb4,426038983,0,0x0,8
tick,0x7ffe67f8feb4,426054667,0,0x0,8
tick,0x7ffe67f8feb4,426070193,0,0x0,8
tick,0x7ffe67f8feb4,426085129,0,0x0,8
tick,0x7ffe67f8feb4,426100751,0,0x0,8
tick,0x7ffe67f8feb4,426116113,0,0x0,8
tick,0x7ffe67f8feb4,426131848,0,0x0,8
tick,0x7ffe67f8feb4,426147200,0,0x0,8
tick,0x7ffe67f8feb4,426162661,0,0x0,8
tick,0x7ffe67f8feb4,426178123,0,0x0,8
tick,0x7ffe67f8feb4,426194220,0,0x0,8
tick,0x7ffe67f8feb4,426210182,0,0x0,8
tick,0x7ffe67f8feb4,426225183,0,0x0,8
tick,0x7ffe67f8feb4,426241184,0,0x0,8
tick,0x7ffe67f8feb4,426256153,0,0x0,8
tick,0x7ffe67f8feb4,426271802,0,0x0,8
tick,0x7ffe67f8feb4,426286170,0,0x0,8
tick,0x7ffe67f8feb4,426301190,0,0x0,8
tick,0x7ffe67f8feb4,426317295,0,0x0,8
tick,0x7ffe67f8feb4,426332457,0,0x0,8
tick,0x7ffe67f8feb4,426348170,0,0x0,8
tick,0x7ffe67f8feb4,426364145,0,0x0,8
tick,0x7ffe67f8feb4,426380166,0,0x0,8
tick,0x7ffe67f8feb4,426395301,0,0x0,8
tick,0x7ffe67f8feb4,426410907,0,0x0,8
tick,0x7ffe67f8feb4,426426057,0,0x0,8
tick,0x7ffe67f8feb4,426442074,0,0x0,8
tick,0x7ffe67f8feb4,426458083,0,0x0,8
tick,0x7ffe67f8feb4,426474231,0,0x0,8
tick,0x7ffe67f8feb4,426490166,0,0x0,8
tick,0x7ffe67f8feb4,426505290,0,0x0,8
tick,0x7ffe67f8feb4,426521458,0,0x0,8
tick,0x7ffe67f8feb4,426535934,0,0x0,8
tick,0x7ffe67f8feb4,426550537,0,0x0,8
tick,0x7ffe67f8feb4,426566323,0,0x0,8
tick,0x7ffe67f8feb4,426582336,0,0x0,8
tick,0x7ffe67f8feb4,426598382,0,0x0,8
tick,0x7ffe67f8feb4,426614152,0,0x0,8
tick,0x7ffe67f8feb4,426630157,0,0x0,8
tick,0x7ffe67f8feb4,426645337,0,0x0,8
tick,0x7ffe67f8feb4,426661148,0,0x0,8
tick,0x7ffe67f8feb4,426676309,0,0x0,8
tick,0x7ffe67f8feb4,426692410,0,0x0,8
tick,0x7ffe67f8feb4,426708276,0,0x0,8
tick,0x7ffe67f8feb4,426723420,0,0x0,8
tick,0x7ffe67f8feb4,426739394,0,0x0,8
tick,0x7ffe67f8feb4,426755620,0,0x0,8
tick,0x7ffe67f8feb4,426771696,0,0x0,8
tick,0x7ffe67f8feb4,426787329,0,0x0,8
tick,0x7ffe67f8feb4,426803271,0,0x0,8
tick,0x7ffe67f8feb4,426819309,0,0x0,8
tick,0x7ffe67f8feb4,426834197,0,0x0,8
tick,0x7ffe67f8feb4,426849298,0,0x0,8
tick,0x7ffe67f8feb4,426865172,0,0x0,8
tick,0x7ffe67f8feb4,426880765,0,0x0,8
tick,0x7ffe67f8feb4,426896333,0,0x0,8
tick,0x7ffe67f8feb4,426912094,0,0x0,8
tick,0x7ffe67f8feb4,426928441,0,0x0,8
tick,0x7ffe67f8feb4,426943378,0,0x0,8
tick,0x7ffe67f8feb4,426959393,0,0x0,8
tick,0x7ffe67f8feb4,426974450,0,0x0,8
tick,0x7ffe67f8feb4,426990368,0,0x0,8
tick,0x7ffe67f8feb4,427005266,0,0x0,8
tick,0x7ffe67f8feb4,427020217,0,0x0,8
tick,0x7ffe67f8feb4,427036336,0,0x0,8
tick,0x7ffe67f8feb4,427051501,0,0x0,8
tick,0x7ffe67f8feb4,427067320,0,0x0,8
tick,0x7ffe67f8feb4,427082516,0,0x0,8
tick,0x7ffe67f8feb4,427098364,0,0x0,8
tick,0x7ffe67f8feb4,427113196,0,0x0,8
tick,0x7ffe67f8feb4,427128374,0,0x0,8
tick,0x7ffe67f8feb4,427144387,0,0x0,8
tick,0x7ffe67f8feb4,427160339,0,0x0,8
tick,0x7ffe67f8feb4,427176383,0,0x0,8
tick,0x7ffe67f8feb4,427191514,0,0x0,8
tick,0x7ffe67f8feb4,427207473,0,0x0,8
tick,0x7ffe67f8feb4,427223725,0,0x0,8
tick,0x7ffe67f8feb4,427239389,0,0x0,8
tick,0x7ffe67f8feb4,427255629,0,0x0,8
tick,0x7ffe67f8feb4,427270339,0,0x0,8
tick,0x7ffe67f8feb4,427286323,0,0x0,8
tick,0x7ffe67f8feb4,427302382,0,0x0,8
tick,0x7ffe67f8feb4,427318325,0,0x0,8
tick,0x7ffe67f8feb4,427334157,0,0x0,8
tick,0x7ffe67f8feb4,427349375,0,0x0,8
tick,0x7ffe67f8feb4,427364149,0,0x0,8
tick,0x7ffe67f8feb4,427379323,0,0x0,8
tick,0x7ffe67f8feb4,427394677,0,0x0,8
tick,0x7ffe67f8feb4,427410730,0,0x0,8
tick,0x7ffe67f8feb4,427426053,0,0x0,8
tick,0x7ffe67f8feb4,427441140,0,0x0,8
tick,0x7ffe67f8feb4,427456331,0,0x0,8
tick,0x7ffe67f8feb4,427471531,0,0x0,8
tick,0x7ffe67f8feb4,427487525,0,0x0,8
tick,0x7ffe67f8feb4,427502970,0,0x0,8
tick,0x7ffe67f8feb4,427518540,0,0x0,8
tick,0x7ffe67f8feb4,427534220,0,0x0,8
tick,0x7ffe67f8feb4,427549394,0,0x0,8
tick,0x7ffe67f8feb4,427564447,0,0x0,8
tick,0x7ffe67f8feb4,427579525,0,0x0,8
tick,0x7ffe67f8feb4,427595332,0,0x0,8
tick,0x7ffe67f8feb4,427610546,0,0x0,8
tick,0x7ffe67f8feb4,427626604,0,0x0,8
tick,0x7ffe67f8feb4,427642045,0,0x0,8
tick,0x7ffe67f8feb4,427657028,0,0x0,8
tick,0x7ffe67f8feb4,427672541,0,0x0,8
tick,0x7ffe67f8feb4,427688206,0,0x0,8
tick,0x7ffe67f8feb4,427704171,0,0x0,8
tick,0x7ffe67f8feb4,427719333,0,0x0,8
tick,0x7ffe67f8feb4,427735171,0,0x0,8
tick,0x7ffe67f8feb4,427750411,0,0x0,8
tick,0x7ffe67f8feb4,427766331,0,0x0,8
tick,0x7ffe67f8feb4,427781571,0,0x0,8
tick,0x7ffe67f8feb4,427796728,0,0x0,8
tick,0x7ffe67f8feb4,427812401,0,0x0,8
tick,0x7ffe67f8feb4,427828446,0,0x0,8
tick,0x7ffe67f8feb4,427843439,0,0x0,8
tick,0x7ffe67f8feb4,427859549,0,0x0,8
tick,0x7ffe67f8feb4,427875657,0,0x0,8
tick,0x7ffe67f8feb4,427891835,0,0x0,8
tick,0x7ffe67f8feb4,427907867,0,0x0,8
tick,0x7ffe67f8feb4,427922021,0,0x0,8
tick,0x7ffe67f8feb4,427937058,0,0x0,8
tick,0x7ffe67f8feb4,427952610,0,0x0,8
tick,0x7ffe67f8feb4,427968064,0,0x0,8
tick,0x7ffe67f8feb4,427983115,0,0x0,8
tick,0x7ffe67f8feb4,427999198,0,0x0,8
tick,0x7ffe67f8feb4,428014139,0,0x0,8
tick,0x7ffe67f8feb4,428029560,0,0x0,8
tick,0x7ffe67f8feb4,428045153,0,0x0,8
tick,0x7ffe67f8feb4,428060589,0,0x0,8
tick,0x7ffe67f8feb4,428075800,0,0x0,8
tick,0x7ffe67f8feb4,428091746,0,0x0,8
tick,0x7ffe67f8feb4,428107438,0,0x0,8
tick,0x7ffe67f8feb4,428122030,0,0x0,8
tick,0x7ffe67f8feb4,428137579,0,0x0,8
tick,0x7ffe67f8feb4,428153226,0,0x0,8
tick,0x7ffe67f8feb4,428168576,0,0x0,8
tick,0x7ffe67f8feb4,428184188,0,0x0,8
tick,0x7ffe67f8feb4,428199345,0,0x0,8
tick,0x7ffe67f8feb4,428214837,0,0x0,8
tick,0x7ffe67f8feb4,428229904,0,0x0,8
tick,0x7ffe67f8feb4,428245919,0,0x0,8
tick,0x7ffe67f8feb4,428261888,0,0x0,8
tick,0x7ffe67f8feb4,428277834,0,0x0,8
tick,0x7ffe67f8feb4,428293044,0,0x0,8
tick,0x7ffe67f8feb4,428308185,0,0x0,8
tick,0x7ffe67f8feb4,428323687,0,0x0,8
tick,0x7ffe67f8feb4,428337886,0,0x0,8
tick,0x7ffe67f8feb4,428353144,0,0x0,8
tick,0x7ffe67f8feb4,428368545,0,0x0,8
tick,0x7ffe67f8feb4,428384612,0,0x0,8
tick,0x7ffe67f8feb4,428399469,0,0x0,8
tick,0x7ffe67f8feb4,428414545,0,0x0,8
tick,0x7ffe67f8feb4,428430173,0,0x0,8
tick,0x7ffe67f8feb4,428446191,0,0x0,8
tick,0x7ffe67f8feb4,428462209,0,0x0,8
tick,0x7ffe67f8feb4,428477132,0,0x0,8
tick,0x7ffe67f8feb4,428491988,0,0x0,8
tick,0x7ffe67f8feb4,428508341,0,0x0,8
tick,0x7ffe67f8feb4,428522632,0,0x0,8
tick,0x7ffe67f8feb4,428537716,0,0x0,8
tick,0x7ffe67f8feb4,428552602,0,0x0,8
tick,0x7ffe67f8feb4,428567747,0,0x0,8
tick,0x7ffe67f8feb4,428582562,0,0x0,8
tick,0x7ffe67f8feb4,428598766,0,0x0,8
tick,0x7ffe67f8feb4,428614655,0,0x0,8
tick,0x7ffe67f8feb4,428629653,0,0x0,8
tick,0x7ffe67f8feb4,428645624,0,0x0,8
tick,0x7ffe67f8feb4,428661660,0,0x0,8
tick,0x7ffe67f8feb4,428676843,0,0x0,8
tick,0x7ffe67f8feb4,428692570,0,0x0,8
tick,0x7ffe67f8feb4,428707619,0,0x0,8
tick,0x7ffe67f8feb4,428723573,0,0x0,8
tick,0x7ffe67f8feb4,428738717,0,0x0,8
tick,0x7ffe67f8feb4,428754172,0,0x0,8
tick,0x7ffe67f8feb4,428769316,0,0x0,8
tick,0x7ffe67f8feb4,428784157,0,0x0,8
tick,0x7ffe67f8feb4,428799332,0,0x0,8
tick,0x7ffe67f8feb4,428815156,0,0x0,8
tick,0x7ffe67f8feb4,428831154,0,0x0,8
tick,0x7ffe67f8feb4,428847187,0,0x0,8
tick,0x7ffe67f8feb4,428863186,0,0x0,8
tick,0x7ffe67f8feb4,428878194,0,0x0,8
tick,0x7ffe67f8feb4,428894204,0,0x0,8
tick,0x7ffe67f8feb4,428909914,0,0x0,8
tick,0x7ffe67f8feb4,428925262,0,0x0,8
tick,0x7ffe67f8feb4,428940977,0,0x0,8
tick,0x7ffe67f8feb4,428955933,0,0x0,8
tick,0x7ffe67f8feb4,428971129,0,0x0,8
tick,0x7ffe67f8feb4,428986393,0,0x0,8
tick,0x7ffe67f8feb4,429001524,0,0x0,8
tick,0x7ffe67f8feb4,429017359,0,0x0,8
tick,0x7ffe67f8feb4,429032452,0,0x0,8
tick,0x7ffe67f8feb4,429048461,0,0x0,8
tick,0x7ffe67f8feb4,429064195,0,0x0,8
tick,0x7ffe67f8feb4,429079837,0,0x0,8
tick,0x7ffe67f8feb4,429095146,0,0x0,8
tick,0x7ffe67f8feb4,429110384,0,0x0,8
tick,0x7ffe67f8feb4,429126203,0,0x0,8
tick,0x7ffe67f8feb4,429142233,0,0x0,8
tick,0x7ffe67f8feb4,429159968,0,0x0,8
tick,0x7ffe67f8feb4,429174474,0,0x0,8
tick,0x7ffe67f8feb4,429190509,0,0x0,8
tick,0x7ffe67f8feb4,429206182,0,0x0,8
tick,0x7ffe67f8feb4,429221538,0,0x0,8
tick,0x7ffe67f8feb4,429237527,0,0x0,8
tick,0x7ffe67f8feb4,429252511,0,0x0,8
tick,0x7ffe67f8feb4,429268606,0,0x0,8
tick,0x7ffe67f8feb4,429283492,0,0x0,8
tick,0x7ffe67f8feb4,429299500,0,0x0,8
tick,0x7ffe67f8feb4,429315574,0,0x0,8
tick,0x7ffe67f8feb4,429331512,0,0x0,8
tick,0x7ffe67f8feb4,429347581,0,0x0,8
tick,0x7ffe67f8feb4,429363184,0,0x0,8
tick,0x7ffe67f8feb4,429378584,0,0x0,8
tick,0x7ffe67f8feb4,429393848,0,0x0,8
tick,0x7ffe67f8feb4,429409644,0,0x0,8
tick,0x7ffe67f8feb4,429425122,0,0x0,8
tick,0x7ffe67f8feb4,429441126,0,0x0,8
tick,0x7ffe67f8feb4,429456341,0,0x0,8
tick,0x7ffe67f8feb4,429471485,0,0x0,8
tick,0x7ffe67f8feb4,429487371,0,0x0,8
tick,0x7ffe67f8feb4,429502502,0,0x0,8
tick,0x7ffe67f8feb4,429518218,0,0x0,8
tick,0x7ffe67f8feb4,429534198,0,0x0,8
tick,0x7ffe67f8feb4,429549704,0,0x0,8
tick,0x7ffe67f8feb4,429565191,0,0x0,8
tick,0x7ffe67f8feb4,429580271,0,0x0,8
tick,0x7ffe67f8feb4,429596230,0,0x0,8
tick,0x7ffe67f8feb4,429611020,0,0x0,8
tick,0x7ffe67f8feb4,429626189,0,0x0,8
tick,0x7ffe67f8feb4,429642279,0,0x0,8
tick,0x7ffe67f8feb4,429658209,0,0x0,8
tick,0x7ffe67f8feb4,429674366,0,0x0,8
tick,0x7ffe67f8feb4,429690235,0,0x0,8
tick,0x7ffe67f8feb4,429705644,0,0x0,8
tick,0x7ffe67f8feb4,429721680,0,0x0,8
tick,0x7ffe67f8feb4,429737462,0,0x0,8
tick,0x7ffe67f8feb4,429753465,0,0x0,8
tick,0x7ffe67f8feb4,429769584,0,0x0,8
tick,0x7ffe67f8feb4,429785715,0,0x0,8
tick,0x7ffe67f8feb4,429800936,0,0x0,8
tick,0x7ffe67f8feb4,429816317,0,0x0,8
tick,0x7ffe67f8feb4,429831507,0,0x0,8
tick,0x7ffe67f8feb4,429846489,0,0x0,8
tick,0x7ffe67f8feb4,429862513,0,0x0,8
tick,0x7ffe67f8feb4,429877915,0,0x0,8
tick,0x7ffe67f8feb4,429892611,0,0x0,8
tick,0x7ffe67f8feb4,429908387,0,0x0,8
tick,0x7ffe67f8feb4,429922880,0,0x0,8
tick,0x7ffe67f8feb4,429938844,0,0x0,8
tick,0x7ffe67f8feb4,429954161,0,0x0,8
tick,0x7ffe67f8feb4,429970249,0,0x0,8
tick,0x7ffe67f8feb4,429986075,0,0x0,8
tick,0x7ffe67f8feb4,430001538,0,0x0,8
tick,0x7ffe67f8feb4,430016751,0,0x0,8
tick,0x7ffe67f8feb4,430032291,0,0x0,8
tick,0x7ffe67f8feb4,430048304,0,0x0,8
tick,0x7ffe67f8feb4,430064192,0,0x0,8
tick,0x7ffe67f8feb4,430080265,0,0x0,8
tick,0x7ffe67f8feb4,430096334,0,0x0,8
tick,0x7ffe67f8feb4,430110963,0,0x0,8
tick,0x7ffe67f8feb4,430126286,0,0x0,8
tick,0x7ffe67f8feb4,430142377,0,0x0,8
tick,0x7ffe67f8feb4,430158339,0,0x0,8
tick,0x7ffe67f8feb4,430174157,0,0x0,8
tick,0x7ffe67f8feb4,430189465,0,0x0,8
tick,0x7ffe67f8feb4,430204164,0,0x0,8
tick,0x7ffe67f8feb4,430219639,0,0x0,8
tick,0x7ffe67f8feb4,430234814,0,0x0,8
tick,0x7ffe67f8feb4,430250851,0,0x0,8
tick,0x7ffe67f8feb4,430265811,0,0x0,8
tick,0x7ffe67f8feb4,430281790,0,0x0,8
tick,0x7ffe67f8feb4,430296813,0,0x0,8
tick,0x7ffe67f8feb4,430312794,0,0x0,8
tick,0x7ffe67f8feb4,430328803,0,0x0,8
tick,0x7ffe67f8feb4,430344800,0,0x0,8
tick,0x7ffe67f8feb4,430359906,0,0x0,8
tick,0x7ffe67f8feb4,430375791,0,0x0,8
tick,0x7ffe67f8feb4,430391938,0,0x0,8
tick,0x7ffe67f8feb4,430406862,0,0x0,8
tick,0x7ffe67f8feb4,430421906,0,0x0,8
tick,0x7ffe67f8feb4,430437800,0,0x0,8
tick,0x7ffe67f8feb4,430452953,0,0x0,8
tick,0x7ffe67f8feb4,430468768,0,0x0,8
tick,0x7ffe67f8feb4,430484492,0,0x0,8
tick,0x7ffe67f8feb4,430499173,0,0x0,8
tick,0x7ffe67f8feb4,430515312,0,0x0,8
tick,0x7ffe67f8feb4,430531236,0,0x0,8
tick,0x7ffe67f8feb4,430546783,0,0x0,8
tick,0x7ffe67f8feb4,430561917,0,0x0,8
tick,0x7ffe67f8feb4,430577183,0,0x0,8
tick,0x7ffe67f8feb4,430593200,0,0x0,8
tick,0x7ffe67f8feb4,430609232,0,0x0,8
tick,0x7ffe67f8feb4,430625384,0,0x0,8
tick,0x7ffe67f8feb4,430640352,0,0x0,8
tick,0x7ffe67f8feb4,430655508,0,0x0,8
tick,0x7ffe67f8feb4,430671579,0,0x0,8
tick,0x7ffe67f8feb4,430686740,0,0x0,8
tick,0x7ffe67f8feb4,430701373,0,0x0,8
tick,0x7ffe67f8feb4,430716500,0,0x0,8
tick,0x7ffe67f8feb4,430731634,0,0x0,8
tick,0x7ffe67f8feb4,430746757,0,0x0,8
tick,0x7ffe67f8feb4,430761900,0,0x0,8
tick,0x7ffe67f8feb4,430777762,0,0x0,8
tick,0x7ffe67f8feb4,430793773,0,0x0,8
tick,0x7ffe67f8feb4,430809733,0,0x0,8
tick,0x7ffe67f8feb4,430825780,0,0x0,8
tick,0x7ffe67f8feb4,430842095,0,0x0,8
tick,0x7ffe67f8feb4,430856458,0,0x0,8
tick,0x7ffe67f8feb4,430872359,0,0x0,8
tick,0x7ffe67f8feb4,430888354,0,0x0,8
tick,0x7ffe67f8feb4,430904184,0,0x0,8
tick,0x7ffe67f8feb4,430920207,0,0x0,8
tick,0x7ffe67f8feb4,430935333,0,0x0,8
tick,0x7ffe67f8feb4,430950468,0,0x0,8
tick,0x7ffe67f8feb4,430966357,0,0x0,8
tick,0x7ffe67f8feb4,430981476,0,0x0,8
tick,0x7ffe67f8feb4,430996764,0,0x0,8
tick,0x7ffe67f8feb4,431012180,0,0x0,8
tick,0x7ffe67f8feb4,431028172,0,0x0,8
tick,0x7ffe67f8feb4,431044171,0,0x0,8
tick,0x7ffe67f8feb4,431060196,0,0x0,8
tick,0x7ffe67f8feb4,431075739,0,0x0,8
tick,0x7ffe67f8feb4,431090975,0,0x0,8
tick,0x7ffe67f8feb4,431106286,0,0x0,8
tick,0x7ffe67f8feb4,431121804,0,0x0,8
tick,0x7ffe67f8feb4,431136688,0,0x0,8
tick,0x7ffe67f8feb4,431152273,0,0x0,8
tick,0x7ffe67f8feb4,431167200,0,0x0,8
tick,0x7ffe67f8feb4,431182792,0,0x0,8
tick,0x7ffe67f8feb4,431198273,0,0x0,8
tick,0x7ffe67f8feb4,431214297,0,0x0,8
tick,0x7ffe67f8feb4,431230256,0,0x0,8
tick,0x7ffe67f8feb4,431246190,0,0x0,8
tick,0x7ffe67f8feb4,431262187,0,0x0,8
tick,0x7ffe67f8feb4,431278217,0,0x0,8
tick,0x7ffe67f8feb4,431294164,0,0x0,8
tick,0x7ffe67f8feb4,431310241,0,0x0,8
tick,0x7ffe67f8feb4,431326722,0,0x0,8
tick,0x7ffe67f8feb4,431342162,0,0x0,8
tick,0x7ffe67f8feb4,431358174,0,0x0,8
tick,0x7ffe67f8feb4,431374210,0,0x0,8
tick,0x7ffe67f8feb4,431390193,0,0x0,8
tick,0x7ffe67f8feb4,431406275,0,0x0,8
tick,0x7ffe67f8feb4,431421373,0,0x0,8
tick,0x7ffe67f8feb4,431436701,0,0x0,8
tick,0x7ffe67f8feb4,431451843,0,0x0,8
tick,0x7ffe67f8feb4,431467726,0,0x0,8
tick,0x7ffe67f8feb4,431483113,0,0x0,8
tick,0x7ffe67f8feb4,431498456,0,0x0,8
tick,0x7ffe67f8feb4,431514350,0,0x0,8
tick,0x7ffe67f8feb4,431530156,0,0x0,8
tick,0x7ffe67f8feb4,431546346,0,0x0,8
tick,0x7ffe67f8feb4,431561567,0,0x0,8
tick,0x7ffe67f8feb4,431577657,0,0x0,8
tick,0x7ffe67f8feb4,431593162,0,0x0,8
tick,0x7ffe67f8feb4,431607879,0,0x0,8
tick,0x7ffe67f8feb4,431623840,0,0x0,8
tick,0x7ffe67f8feb4,431639174,0,0x0,8
tick,0x7ffe67f8feb4,431655228,0,0x0,8
tick,0x7ffe67f8feb4,431671168,0,0x0,8
tick,0x7ffe67f8feb4,431687163,0,0x0,8
tick,0x7ffe67f8feb4,431703182,0,0x0,8
tick,0x7ffe67f8feb4,431719225,0,0x0,8
tick,0x7ffe67f8feb4,431735208,0,0x0,8
tick,0x7ffe67f8feb4,431751176,0,0x0,8
tick,0x7ffe67f8feb4,431766344,0,0x0,8
tick,0x7ffe67f8feb4,431781772,0,0x0,8
tick,0x7ffe67f8feb4,431797960,0,0x0,8
tick,0x7ffe67f8feb4,431813060,0,0x0,8
tick,0x7ffe67f8feb4,431828789,0,0x0,8
tick,0x7ffe67f8feb4,431844808,0,0x0,8
tick,0x7ffe67f8feb4,431860778,0,0x0,8
tick,0x7ffe67f8feb4,431876450,0,0x0,8
tick,0x7ffe67f8feb4,431892346,0,0x0,8
tick,0x7ffe67f8feb4,431908341,0,0x0,8
tick,0x7ffe67f8feb4,431924190,0,0x0,8
tick,0x7ffe67f8feb4,431940242,0,0x0,8
tick,0x7ffe67f8feb4,431955314,0,0x0,8
tick,0x7ffe67f8feb4,431971251,0,0x0,8
tick,0x7ffe67f8feb4,431986547,0,0x0,8
tick,0x7ffe67f8feb4,432002103,0,0x0,8
tick,0x7ffe67f8feb4,432018087,0,0x0,8
tick,0x7ffe67f8feb4,432033287,0,0x0,8
tick,0x7ffe67f8feb4,432048635,0,0x0,8
tick,0x7ffe67f8feb4,432064232,0,0x0,8
tick,0x7ffe67f8feb4,432079604,0,0x0,8
tick,0x7ffe67f8feb4,432095263,0,0x0,8
tick,0x7ffe67f8feb4,432111252,0,0x0,8
tick,0x7ffe67f8feb4,432127333,0,0x0,8
tick,0x7ffe67f8feb4,432143541,0,0x0,8
tick,0x7ffe67f8feb4,432159312,0,0x0,8
tick,0x7ffe67f8feb4,432175208,0,0x0,8
tick,0x7ffe67f8feb4,432191244,0,0x0,8
tick,0x7ffe67f8feb4,432206692,0,0x0,8
tick,0x7ffe67f8feb4,432221855,0,0x0,8
tick,0x7ffe67f8feb4,432237750,0,0x0,8
tick,0x7ffe67f8feb4,432253450,0,0x0,8
tick,0x7ffe67f8feb4,432269333,0,0x0,8
tick,0x7ffe67f8feb4,432285284,0,0x0,8
tick,0x7ffe67f8feb4,432301218,0,0x0,8
tick,0x7ffe67f8feb4,432317298,0,0x0,8
tick,0x7ffe67f8feb4,432333263,0,0x0,8
tick,0x7ffe67f8feb4,432349269,0,0x0,8
tick,0x7ffe67f8feb4,432365217,0,0x0,8
tick,0x7ffe67f8feb4,432381298,0,0x0,8
tick,0x7ffe67f8feb4,432396577,0,0x0,8
tick,0x7ffe67f8feb4,432412299,0,0x0,8
tick,0x7ffe67f8feb4,432427271,0,0x0,8
tick,0x7ffe67f8feb4,432442297,0,0x0,8
tick,0x7ffe67f8feb4,432458294,0,0x0,8
tick,0x7ffe67f8feb4,432474207,0,0x0,8
tick,0x7ffe67f8feb4,432489372,0,0x0,8
tick,0x7ffe67f8feb4,432505271,0,0x0,8
tick,0x7ffe67f8feb4,432520084,0,0x0,8
tick,0x7ffe67f8feb4,432535323,0,0x0,8
tick,0x7ffe67f8feb4,432550327,0,0x0,8
tick,0x7ffe67f8feb4,432566350,0,0x0,8
tick,0x7ffe67f8feb4,432581964,0,0x0,8
tick,0x7ffe67f8feb4,432597457,0,0x0,8
tick,0x7ffe67f8feb4,432613235,0,0x0,8
tick,0x7ffe67f8feb4,432628714,0,0x0,8
tick,0x7ffe67f8feb4,432644250,0,0x0,8
tick,0x7ffe67f8feb4,432659404,0,0x0,8
tick,0x7ffe67f8feb4,432675427,0,0x0,8
tick,0x7ffe67f8feb4,432692453,0,0x0,8
tick,0x7ffe67f8feb4,432706374,0,0x0,8
tick,0x7ffe67f8feb4,432721002,0,0x0,8
tick,0x7ffe67f8feb4,432736346,0,0x0,8
tick,0x7ffe67f8feb4,432751455,0,0x0,8
tick,0x7ffe67f8feb4,432767366,0,0x0,8
tick,0x7ffe67f8feb4,432782623,0,0x0,8
tick,0x7ffe67f8feb4,432798398,0,0x0,8
tick,0x7ffe67f8feb4,432814219,0,0x0,8
tick,0x7ffe67f8feb4,432829658,0,0x0,8
tick,0x7ffe67f8feb4,432845261,0,0x0,8
tick,0x7ffe67f8feb4,432861314,0,0x0,8
tick,0x7ffe67f8feb4,432877440,0,0x0,8
tick,0x7ffe67f8feb4,432892252,0,0x0,8
tick,0x7ffe67f8feb4,432908243,0,0x0,8
tick,0x7ffe67f8feb4,432924354,0,0x0,8
tick,0x7ffe67f8feb4,432940275,0,0x0,8
tick,0x7ffe67f8feb4,432956361,0,0x0,8
tick,0x7ffe67f8feb4,432971396,0,0x0,8
tick,0x7ffe67f8feb4,432986375,0,0x0,8
tick,0x7ffe67f8feb4,433001517,0,0x0,8
tick,0x7ffe67f8feb4,433016373,0,0x0,8
tick,0x7ffe67f8feb4,433031403,0,0x0,8
tick,0x7ffe67f8feb4,433047443,0,0x0,8
tick,0x7ffe67f8feb4,433062407,0,0x0,8
tick,0x7ffe67f8feb4,433078425,0,0x0,8
tick,0x7ffe67f8feb4,433094687,0,0x0,8
tick,0x7ffe67f8feb4,433110233,0,0x0,8
tick,0x7ffe67f8feb4,433125353,0,0x0,8
tick,0x7ffe67f8feb4,433140534,0,0x0,8
tick,0x7ffe67f8feb4,433156371,0,0x0,8
tick,0x7ffe67f8feb4,433171474,0,0x0,8
tick,0x7ffe67f8feb4,433186539,0,0x0,8
tick,0x7ffe67f8feb4,433201843,0,0x0,8
tick,0x7ffe67f8feb4,433217851,0,0x0,8
tick,0x7ffe67f8feb4,433233030,0,0x0,8
tick,0x7ffe67f8feb4,433248908,0,0x0,8
tick,0x7ffe67f8feb4,433264214,0,0x0,8
tick,0x7ffe67f8feb4,433280209,0,0x0,8
tick,0x7ffe67f8feb4,433296241,0,0x0,8
tick,0x7ffe67f8feb4,433312289,0,0x0,8
tick,0x7ffe67f8feb4,433328193,0,0x0,8
tick,0x7ffe67f8feb4,433344199,0,0x0,8
tick,0x7ffe67f8feb4,433360175,0,0x0,8
tick,0x7ffe67f8feb4,433376183,0,0x0,8
tick,0x7ffe67f8feb4,433391355,0,0x0,8
tick,0x7ffe67f8feb4,433407117,0,0x0,8
tick,0x7ffe67f8feb4,433423123,0,0x0,8
tick,0x7ffe67f8feb4,433439189,0,0x0,8
tick,0x7ffe67f8feb4,433454474,0,0x0,8
tick,0x7ffe67f8feb4,433470044,0,0x0,8
tick,0x7ffe67f8feb4,433485786,0,0x0,8
tick,0x7ffe67f8feb4,433501638,0,0x0,8
tick,0x7ffe67f8feb4,433517781,0,0x0,8
tick,0x7ffe67f8feb4,433533217,0,0x0,8
tick,0x7ffe67f8feb4,433548991,0,0x0,8
tick,0x7ffe67f8feb4,433564466,0,0x0,8
tick,0x7ffe67f8feb4,433580600,0,0x0,8
tick,0x7ffe67f8feb4,433596502,0,0x0,8
tick,0x7ffe67f8feb4,433612538,0,0x0,8
tick,0x7ffe67f8feb4,433627490,0,0x0,8
tick,0x7ffe67f8feb4,433643064,0,0x0,8
tick,0x7ffe67f8feb4,433659054,0,0x0,8
tick,0x7ffe67f8feb4,433674264,0,0x0,8
tick,0x7ffe67f8feb4,433689467,0,0x0,8
tick,0x7ffe67f8feb4,433705494,0,0x0,8
tick,0x7ffe67f8feb4,433721411,0,0x0,8
tick,0x7ffe67f8feb4,433737512,0,0x0,8
tick,0x7ffe67f8feb4,433753229,0,0x0,8
tick,0x7ffe67f8feb4,433768495,0,0x0,8
tick,0x7ffe67f8feb4,433784512,0,0x0,8
tick,0x7ffe67f8feb4,433800520,0,0x0,8
tick,0x7ffe67f8feb4,433816596,0,0x0,8
tick,0x7ffe67f8feb4,433831691,0,0x0,8
tick,0x7ffe67f8feb4,433847606,0,0x0,8
tick,0x7ffe67f8feb4,433863684,0,0x0,8
tick,0x7ffe67f8feb4,433879536,0,0x0,8
tick,0x7ffe67f8feb4,433895396,0,0x0,8
tick,0x7ffe67f8feb4,433911376,0,0x0,8
tick,0x7ffe67f8feb4,433927388,0,0x0,8
tick,0x7ffe67f8feb4,433943201,0,0x0,8
tick,0x7ffe67f8feb4,433959241,0,0x0,8
tick,0x7ffe67f8feb4,433974421,0,0x0,8
tick,0x7ffe67f8feb4,433990247,0,0x0,8
tick,0x7ffe67f8feb4,434006380,0,0x0,8
tick,0x7ffe67f8feb4,434021983,0,0x0,8
tick,0x7ffe67f8feb4,434037386,0,0x0,8
tick,0x7ffe67f8feb4,434052878,0,0x0,8
tick,0x7ffe67f8feb4,434068382,0,0x0,8
tick,0x7ffe67f8feb4,434084543,0,0x0,8
tick,0x7ffe67f8feb4,434100466,0,0x0,8
tick,0x7ffe67f8feb4,434116470,0,0x0,8
tick,0x7ffe67f8feb4,434132434,0,0x0,8
tick,0x7ffe67f8feb4,434148483,0,0x0,8
tick,0x7ffe67f8feb4,434164456,0,0x0,8
tick,0x7ffe67f8feb4,434180411,0,0x0,8
tick,0x7ffe67f8feb4,434196538,0,0x0,8
tick,0x7ffe67f8feb4,434211549,0,0x0,8
tick,0x7ffe67f8feb4,434227390,0,0x0,8
tick,0x7ffe67f8feb4,434243263,0,0x0,8
tick,0x7ffe67f8feb4,434259218,0,0x0,8
tick,0x7ffe67f8feb4,434274202,0,0x0,8
tick,0x7ffe67f8feb4,434290192,0,0x0,8
tick,0x7ffe67f8feb4,434306177,0,0x0,8
tick,0x7ffe67f8feb4,434322192,0,0x0,8
tick,0x7ffe67f8feb4,434338209,0,0x0,8
tick,0x7ffe67f8feb4,434354203,0,0x0,8
tick,0x7ffe67f8feb4,434370218,0,0x0,8
tick,0x7ffe67f8feb4,434386358,0,0x0,8
tick,0x7ffe67f8feb4,434401532,0,0x0,8
tick,0x7ffe67f8feb4,434417379,0,0x0,8
tick,0x7ffe67f8feb4,434433132,0,0x0,8
tick,0x7ffe67f8feb4,434448394,0,0x0,8
tick,0x7ffe67f8feb4,434464591,0,0x0,8
tick,0x7ffe67f8feb4,434480476,0,0x0,8
tick,0x7ffe67f8feb4,434495824,0,0x0,8
tick,0x7ffe67f8feb4,434511837,0,0x0,8
tick,0x7ffe67f8feb4,434527933,0,0x0,8
tick,0x7ffe67f8feb4,434543204,0,0x0,8
tick,0x7ffe67f8feb4,434558947,0,0x0,8
tick,0x7ffe67f8feb4,434574257,0,0x0,8
tick,0x7ffe67f8feb4,434590033,0,0x0,8
tick,0x7ffe67f8feb4,434605260,0,0x0,8
tick,0x7ffe67f8feb4,434620713,0,0x0,8
tick,0x7ffe67f8feb4,434636394,0,0x0,8
tick,0x7ffe67f8feb4,434652370,0,0x0,8
tick,0x7ffe67f8feb4,434668373,0,0x0,8
tick,0x7ffe67f8feb4,434684259,0,0x0,8
tick,0x7ffe67f8feb4,434699317,0,0x0,8
tick,0x7ffe67f8feb4,434715362,0,0x0,8
tick,0x7ffe67f8feb4,434731373,0,0x0,8
tick,0x7ffe67f8feb4,434747417,0,0x0,8
tick,0x7ffe67f8feb4,434762916,0,0x0,8
tick,0x7ffe67f8feb4,434777567,0,0x0,8
tick,0x7ffe67f8feb4,434793253,0,0x0,8
tick,0x7ffe67f8feb4,434808683,0,0x0,8
tick,0x7ffe67f8feb4,434824089,0,0x0,8
tick,0x7ffe67f8feb4,434839641,0,0x0,8
tick,0x7ffe67f8feb4,434855687,0,0x0,8
tick,0x7ffe67f8feb4,434870741,0,0x0,8
tick,0x7ffe67f8feb4,434886418,0,0x0,8
tick,0x7ffe67f8feb4,434902068,0,0x0,8
tick,0x7ffe67f8feb4,434917313,0,0x0,8
tick,0x7ffe67f8feb4,434932998,0,0x0,8
tick,0x7ffe67f8feb4,434948651,0,0x0,8
tick,0x7ffe67f8feb4,434964419,0,0x0,8
tick,0x7ffe67f8feb4,434979511,0,0x0,8
tick,0x7ffe67f8feb4,434995357,0,0x0,8
tick,0x7ffe67f8feb4,435011077,0,0x0,8
tick,0x7ffe67f8feb4,435026387,0,0x0,8
tick,0x7ffe67f8feb4,435041786,0,0x0,8
tick,0x7ffe67f8feb4,435057483,0,0x0,8
tick,0x7ffe67f8feb4,435073104,0,0x0,8
tick,0x7ffe67f8feb4,435087760,0,0x0,8
tick,0x7ffe67f8feb4,435103681,0,0x0,8
tick,0x7ffe67f8feb4,435119781,0,0x0,8
tick,0x7ffe67f8feb4,435134782,0,0x0,8
tick,0x7ffe67f8feb4,435150003,0,0x0,8
tick,0x7ffe67f8feb4,435165216,0,0x0,8
tick,0x7ffe67f8feb4,435181310,0,0x0,8
tick,0x7ffe67f8feb4,435197250,0,0x0,8
tick,0x7ffe67f8feb4,435213449,0,0x0,8
tick,0x7ffe67f8feb4,435228669,0,0x0,8
tick,0x7ffe67f8feb4,435244426,0,0x0,8
tick,0x7ffe67f8feb4,435259741,0,0x0,8
tick,0x7ffe67f8feb4,435276282,0,0x0,8
tick,0x7ffe67f8feb4,435292115,0,0x0,8
tick,0x7ffe67f8feb4,435309811,0,0x0,8
tick,0x7ffe67f8feb4,435323809,0,0x0,8
tick,0x7ffe67f8feb4,435339697,0,0x0,8
tick,0x7ffe67f8feb4,435355688,0,0x0,8
tick,0x7ffe67f8feb4,435370952,0,0x0,8
tick,0x7ffe67f8feb4,435386350,0,0x0,8
tick,0x7ffe67f8feb4,435401744,0,0x0,8
tick,0x7ffe67f8feb4,435417797,0,0x0,8
tick,0x7ffe67f8feb4,435433354,0,0x0,8
tick,0x7ffe67f8feb4,435448742,0,0x0,8
tick,0x7ffe67f8feb4,435464928,0,0x0,8
tick,0x7ffe67f8feb4,435480135,0,0x0,8
tick,0x7ffe67f8feb4,435495709,0,0x0,8
tick,0x7ffe67f8feb4,435510753,0,0x0,8
tick,0x7ffe67f8feb4,435526836,0,0x0,8
tick,0x7ffe67f8feb4,435542722,0,0x0,8
tick,0x7ffe67f8feb4,435558745,0,0x0,8
tick,0x7ffe67f8feb4,435574261,0,0x0,8
tick,0x7ffe67f8feb4,435589775,0,0x0,8
tick,0x7ffe67f8feb4,435605237,0,0x0,8
tick,0x7ffe67f8feb4,435621254,0,0x0,8
tick,0x7ffe67f8feb4,435636460,0,0x0,8
tick,0x7ffe67f8feb4,435651971,0,0x0,8
tick,0x7ffe67f8feb4,435667481,0,0x0,8
tick,0x7ffe67f8feb4,435683217,0,0x0,8
tick,0x7ffe67f8feb4,435699286,0,0x0,8
tick,0x7ffe67f8feb4,435715261,0,0x0,8
tick,0x7ffe67f8feb4,435731252,0,0x0,8
tick,0x7ffe67f8feb4,435746456,0,0x0,8
tick,0x7ffe67f8feb4,435762498,0,0x0,8
tick,0x7ffe67f8feb4,435778727,0,0x0,8
tick,0x7ffe67f8feb4,435794268,0,0x0,8
tick,0x7ffe67f8feb4,435809827,0,0x0,8
tick,0x7ffe67f8feb4,435825256,0,0x0,8
tick,0x7ffe67f8feb4,435840866,0,0x0,8
tick,0x7ffe67f8feb4,435856379,0,0x0,8
tick,0x7ffe67f8feb4,435872357,0,0x0,8
tick,0x7ffe67f8feb4,435887803,0,0x0,8
tick,0x7ffe67f8feb4,435903232,0,0x0,8
tick,0x7ffe67f8feb4,435918821,0,0x0,8
tick,0x7ffe67f8feb4,435934228,0,0x0,8
tick,0x7ffe67f8feb4,435950238,0,0x0,8
tick,0x7ffe67f8feb4,435965366,0,0x0,8
tick,0x7ffe67f8feb4,435980880,0,0x0,8
tick,0x7ffe67f8feb4,435995504,0,0x0,8
tick,0x7ffe67f8feb4,436011418,0,0x0,8
tick,0x7ffe67f8feb4,436027547,0,0x0,8
tick,0x7ffe67f8feb4,436042813,0,0x0,8
tick,0x7ffe67f8feb4,436058549,0,0x0,8
tick,0x7ffe67f8feb4,436074235,0,0x0,8
tick,0x7ffe67f8feb4,436089581,0,0x0,8
tick,0x7ffe67f8feb4,436104811,0,0x0,8
tick,0x7ffe67f8feb4,436120829,0,0x0,8
tick,0x7ffe67f8feb4,436136332,0,0x0,8
tick,0x7ffe67f8feb4,436152277,0,0x0,8
tick,0x7ffe67f8feb4,436168267,0,0x0,8
tick,0x7ffe67f8feb4,436184249,0,0x0,8
tick,0x7ffe67f8feb4,436199642,0,0x0,8
tick,0x7ffe67f8feb4,436216015,0,0x0,8
tick,0x7ffe67f8feb4,436231698,0,0x0,8
tick,0x7ffe67f8feb4,436246811,0,0x0,8
tick,0x7ffe67f8feb4,436262282,0,0x0,8
tick,0x7ffe67f8feb4,436278040,0,0x0,8
tick,0x7ffe67f8feb4,436294158,0,0x0,8
tick,0x7ffe67f8feb4,436309950,0,0x0,8
tick,0x7ffe67f8feb4,436325969,0,0x0,8
tick,0x7ffe67f8feb4,436341429,0,0x0,8
tick,0x7ffe67f8feb4,436356408,0,0x0,8
tick,0x7ffe67f8feb4,436371779,0,0x0,8
tick,0x7ffe67f8feb4,436387500,0,0x0,8
tick,0x7ffe67f8feb4,436402959,0,0x0,8
tick,0x7ffe67f8feb4,436418738,0,0x0,8
tick,0x7ffe67f8feb4,436433861,0,0x0,8
tick,0x7ffe67f8feb4,436448873,0,0x0,8
tick,0x7ffe67f8feb4,436464914,0,0x0,8
tick,0x7ffe67f8feb4,436481199,0,0x0,8
tick,0x7ffe67f8feb4,436496372,0,0x0,8
tick,0x7ffe67f8feb4,436511803,0,0x0,8
tick,0x7ffe67f8feb4,436527497,0,0x0,8
tick,0x7ffe67f8feb4,436542887,0,0x0,8
tick,0x7ffe67f8feb4,436558541,0,0x0,8
tick,0x7ffe67f8feb4,436574282,0,0x0,8
tick,0x7ffe67f8feb4,436589845,0,0x0,8
tick,0x7ffe67f8feb4,436605279,0,0x0,8
tick,0x7ffe67f8feb4,436620460,0,0x0,8
tick,0x7ffe67f8feb4,436636443,0,0x0,8
tick,0x7ffe67f8feb4,436652652,0,0x0,8
tick,0x7ffe67f8feb4,436667730,0,0x0,8
tick,0x7ffe67f8feb4,436683341,0,0x0,8
tick,0x7ffe67f8feb4,436699025,0,0x0,8
tick,0x7ffe67f8feb4,436714351,0,0x0,8
tick,0x7ffe67f8feb4,436730362,0,0x0,8
tick,0x7ffe67f8feb4,436746344,0,0x0,8
tick,0x7ffe67f8feb4,436762304,0,0x0,8
tick,0x7ffe67f8feb4,436778331,0,0x0,8
tick,0x7ffe67f8feb4,436794409,0,0x0,8
tick,0x7ffe67f8feb4,436810369,0,0x0,8
tick,0x7ffe67f8feb4,436826340,0,0x0,8
tick,0x7ffe67f8feb4,436842335,0,0x0,8
tick,0x7ffe67f8feb4,436857342,0,0x0,8
tick,0x7ffe67f8feb4,436873332,0,0x0,8
tick,0x7ffe67f8feb4,436889328,0,0x0,8
tick,0x7ffe67f8feb4,436905343,0,0x0,8
tick,0x7ffe67f8feb4,436920468,0,0x0,8
tick,0x7ffe67f8feb4,436936346,0,0x0,8
tick,0x7ffe67f8feb4,436952372,0,0x0,8
tick,0x7ffe67f8feb4,436968410,0,0x0,8
tick,0x7ffe67f8feb4,436984228,0,0x0,8
tick,0x7ffe67f8feb4,436999984,0,0x0,8
tick,0x7ffe67f8feb4,437015961,0,0x0,8
tick,0x7ffe67f8feb4,437031142,0,0x0,8
tick,0x7ffe67f8feb4,437046395,0,0x0,8
tick,0x7ffe67f8feb4,437062059,0,0x0,8
tick,0x7ffe67f8feb4,437078057,0,0x0,8
tick,0x7ffe67f8feb4,437093485,0,0x0,8
tick,0x7ffe67f8feb4,437108829,0,0x0,8
tick,0x7ffe67f8feb4,437124666,0,0x0,8
tick,0x7ffe67f8feb4,437140856,0,0x0,8
tick,0x7ffe67f8feb4,437156420,0,0x0,8
tick,0x7ffe67f8feb4,437172095,0,0x0,8
tick,0x7ffe67f8feb4,437187616,0,0x0,8
tick,0x7ffe67f8feb4,437203306,0,0x0,8
tick,0x7ffe67f8feb4,437218960,0,0x0,8
tick,0x7ffe67f8feb4,437234266,0,0x0,8
tick,0x7ffe67f8feb4,437250280,0,0x0,8
tick,0x7ffe67f8feb4,437266281,0,0x0,8
tick,0x7ffe67f8feb4,437281472,0,0x0,8
tick,0x7ffe67f8feb4,437297822,0,0x0,8
tick,0x7ffe67f8feb4,437313540,0,0x0,8
tick,0x7ffe67f8feb4,437329479,0,0x0,8
tick,0x7ffe67f8feb4,437345340,0,0x0,8
tick,0x7ffe67f8feb4,437361143,0,0x0,8
tick,0x7ffe67f8feb4,437376593,0,0x0,8
tick,0x7ffe67f8feb4,437391680,0,0x0,8
tick,0x7ffe67f8feb4,437407697,0,0x0,8
tick,0x7ffe67f8feb4,437423487,0,0x0,8
tick,0x7ffe67f8feb4,437439550,0,0x0,8
tick,0x7ffe67f8feb4,437455595,0,0x0,8
tick,0x7ffe67f8feb4,437471859,0,0x0,8
tick,0x7ffe67f8feb4,437487997,0,0x0,8
tick,0x7ffe67f8feb4,437503175,0,0x0,8
tick,0x7ffe67f8feb4,437519105,0,0x0,8
tick,0x7ffe67f8feb4,437535174,0,0x0,8
tick,0x7ffe67f8feb4,437551113,0,0x0,8
tick,0x7ffe67f8feb4,437566508,0,0x0,8
tick,0x7ffe67f8feb4,437582055,0,0x0,8
tick,0x7ffe67f8feb4,437596822,0,0x0,8
tick,0x7ffe67f8feb4,437611959,0,0x0,8
tick,0x7ffe67f8feb4,437627945,0,0x0,8
tick,0x7ffe67f8feb4,437643432,0,0x0,8
tick,0x7ffe67f8feb4,437659114,0,0x0,8
tick,0x7ffe67f8feb4,437674258,0,0x0,8
tick,0x7ffe67f8feb4,437689686,0,0x0,8
tick,0x7ffe67f8feb4,437705402,0,0x0,8
tick,0x7ffe67f8feb4,437720635,0,0x0,8
tick,0x7ffe67f8feb4,437736691,0,0x0,8
tick,0x7ffe67f8feb4,437751810,0,0x0,8
tick,0x7ffe67f8feb4,437767806,0,0x0,8
tick,0x7ffe67f8feb4,437783824,0,0x0,8
tick,0x7ffe67f8feb4,437799011,0,0x0,8
tick,0x7ffe67f8feb4,437814676,0,0x0,8
tick,0x7ffe67f8feb4,437829802,0,0x0,8
tick,0x7ffe67f8feb4,437845665,0,0x0,8
tick,0x7ffe67f8feb4,437861202,0,0x0,8
tick,0x7ffe67f8feb4,437876963,0,0x0,8
tick,0x7ffe67f8feb4,437892206,0,0x0,8
tick,0x7ffe67f8feb4,437907514,0,0x0,8
tick,0x7ffe67f8feb4,437922587,0,0x0,8
tick,0x7ffe67f8feb4,437938243,0,0x0,8
tick,0x7ffe67f8feb4,437954321,0,0x0,8
tick,0x7ffe67f8feb4,437969459,0,0x0,8
tick,0x7ffe67f8feb4,437985608,0,0x0,8
tick,0x7ffe67f8feb4,438001367,0,0x0,8
tick,0x7ffe67f8feb4,438017186,0,0x0,8
tick,0x7ffe67f8feb4,438032605,0,0x0,8
tick,0x7ffe67f8feb4,438047697,0,0x0,8
tick,0x7ffe67f8feb4,438063765,0,0x0,8
tick,0x7ffe67f8feb4,438079141,0,0x0,8
tick,0x7ffe67f8feb4,438094652,0,0x0,8
tick,0x7ffe67f8feb4,438110006,0,0x0,8
tick,0x7ffe67f8feb4,438125435,0,0x0,8
tick,0x7ffe67f8feb4,438140995,0,0x0,8
tick,0x7ffe67f8feb4,438156557,0,0x0,8
tick,0x7ffe67f8feb4,438172193,0,0x0,8
tick,0x7ffe67f8feb4,438187660,0,0x0,8
tick,0x7ffe67f8feb4,438203270,0,0x0,8
tick,0x7ffe67f8feb4,438218263,0,0x0,8
tick,0x7ffe67f8feb4,438233237,0,0x0,8
tick,0x7ffe67f8feb4,438248337,0,0x0,8
tick,0x7ffe67f8feb4,438263689,0,0x0,8
tick,0x7ffe67f8feb4,438279940,0,0x0,8
tick,0x7ffe67f8feb4,438295403,0,0x0,8
tick,0x7ffe67f8feb4,438310723,0,0x0,8
tick,0x7ffe67f8feb4,438326856,0,0x0,8
tick,0x7ffe67f8feb4,438342863,0,0x0,8
tick,0x7ffe67f8feb4,438358659,0,0x0,8
tick,0x7ffe67f8feb4,438374696,0,0x0,8
tick,0x7ffe67f8feb4,438390336,0,0x0,8
tick,0x7ffe67f8feb4,438405398,0,0x0,8
tick,0x7ffe67f8feb4,438421509,0,0x0,8
tick,0x7ffe67f8feb4,438436798,0,0x0,8
tick,0x7ffe67f8feb4,438452757,0,0x0,8
tick,0x7ffe67f8feb4,438468207,0,0x0,8
tick,0x7ffe67f8feb4,438484167,0,0x0,8
tick,0x7ffe67f8feb4,438500193,0,0x0,8
tick,0x7ffe67f8feb4,438515767,0,0x0,8
tick,0x7ffe67f8feb4,438531183,0,0x0,8
tick,0x7ffe67f8feb4,438546368,0,0x0,8
tick,0x7ffe67f8feb4,438562022,0,0x0,8
tick,0x7ffe67f8feb4,438578058,0,0x0,8
tick,0x7ffe67f8feb4,438593294,0,0x0,8
tick,0x7ffe67f8feb4,438609073,0,0x0,8
tick,0x7ffe67f8feb4,438624210,0,0x0,8
tick,0x7ffe67f8feb4,438639985,0,0x0,8
tick,0x7ffe67f8feb4,438655233,0,0x0,8
tick,0x7ffe67f8feb4,438670577,0,0x0,8
tick,0x7ffe67f8feb4,438686438,0,0x0,8
tick,0x7ffe67f8feb4,438702032,0,0x0,8
tick,0x7ffe67f8feb4,438717703,0,0x0,8
tick,0x7ffe67f8feb4,438733293,0,0x0,8
tick,0x7ffe67f8feb4,438748423,0,0x0,8
tick,0x7ffe67f8feb4,438764233,0,0x0,8
tick,0x7ffe67f8feb4,438779460,0,0x0,8
tick,0x7ffe67f8feb4,438794268,0,0x0,8
tick,0x7ffe67f8feb4,438809678,0,0x0,8
tick,0x7ffe67f8feb4,438825233,0,0x0,8
tick,0x7ffe67f8feb4,438841111,0,0x0,8
tick,0x7ffe67f8feb4,438856262,0,0x0,8
tick,0x7ffe67f8feb4,438872247,0,0x0,8
tick,0x7ffe67f8feb4,438888297,0,0x0,8
tick,0x7ffe67f8feb4,438904476,0,0x0,8
tick,0x7ffe67f8feb4,438920406,0,0x0,8
tick,0x7ffe67f8feb4,438936314,0,0x0,8
tick,0x7ffe67f8feb4,438952281,0,0x0,8
tick,0x7ffe67f8feb4,438968306,0,0x0,8
tick,0x7ffe67f8feb4,438983227,0,0x0,8
tick,0x7ffe67f8feb4,438999249,0,0x0,8
tick,0x7ffe67f8feb4,439014971,0,0x0,8
tick,0x7ffe67f8feb4,439030283,0,0x0,8
tick,0x7ffe67f8feb4,439046261,0,0x0,8
tick,0x7ffe67f8feb4,439062274,0,0x0,8
tick,0x7ffe67f8feb4,439078286,0,0x0,8
tick,0x7ffe67f8feb4,439094224,0,0x0,8
tick,0x7ffe67f8feb4,439110048,0,0x0,8
tick,0x7ffe67f8feb4,439125241,0,0x0,8
tick,0x7ffe67f8feb4,439141242,0,0x0,8
tick,0x7ffe67f8feb4,439156374,0,0x0,8
tick,0x7ffe67f8feb4,439172307,0,0x0,8
tick,0x7ffe67f8feb4,439188253,0,0x0,8
tick,0x7ffe67f8feb4,439204233,0,0x0,8
tick,0x7ffe67f8feb4,439220409,0,0x0,8
tick,0x7ffe67f8feb4,439236241,0,0x0,8
tick,0x7ffe67f8feb4,439252262,0,0x0,8
tick,0x7ffe67f8feb4,439268600,0,0x0,8
tick,0x7ffe67f8feb4,439285142,0,0x0,8
tick,0x7ffe67f8feb4,439300024,0,0x0,8
tick,0x7ffe67f8feb4,439315257,0,0x0,8
tick,0x7ffe67f8feb4,439331229,0,0x0,8
tick,0x7ffe67f8feb4,439347244,0,0x0,8
tick,0x7ffe67f8feb4,439363289,0,0x0,8
tick,0x7ffe67f8feb4,439379254,0,0x0,8
tick,0x7ffe67f8feb4,439395237,0,0x0,8
tick,0x7ffe67f8feb4,439410846,0,0x0,8
tick,0x7ffe67f8feb4,439426365,0,0x0,8
tick,0x7ffe67f8feb4,439442376,0,0x0,8
tick,0x7ffe67f8feb4,439458325,0,0x0,8
tick,0x7ffe67f8feb4,439474209,0,0x0,8
tick,0x7ffe67f8feb4,439489530,0,0x0,8
tick,0x7ffe67f8feb4,439505244,0,0x0,8
tick,0x7ffe67f8feb4,439520691,0,0x0,8
tick,0x7ffe67f8feb4,439536215,0,0x0,8
tick,0x7ffe67f8feb4,439552208,0,0x0,8
tick,0x7ffe67f8feb4,439568377,0,0x0,8
tick,0x7ffe67f8feb4,439584228,0,0x0,8
tick,0x7ffe67f8feb4,439600290,0,0x0,8
tick,0x7ffe67f8feb4,439615350,0,0x0,8
tick,0x7ffe67f8feb4,439631246,0,0x0,8
tick,0x7ffe67f8feb4,439646435,0,0x0,8
tick,0x7ffe67f8feb4,439662441,0,0x0,8
tick,0x7ffe67f8feb4,439678435,0,0x0,8
tick,0x7ffe67f8feb4,439694216,0,0x0,8
tick,0x7ffe67f8feb4,439709389,0,0x0,8
tick,0x7ffe67f8feb4,439725248,0,0x0,8
tick,0x7ffe67f8feb4,439740347,0,0x0,8
tick,0x7ffe67f8feb4,439756402,0,0x0,8
tick,0x7ffe67f8feb4,439771867,0,0x0,8
tick,0x7ffe67f8feb4,439787389,0,0x0,8
tick,0x7ffe67f8feb4,439803230,0,0x0,8
tick,0x7ffe67f8feb4,439818345,0,0x0,8
tick,0x7ffe67f8feb4,439834232,0,0x0,8
tick,0x7ffe67f8feb4,439849671,0,0x0,8
tick,0x7ffe67f8feb4,439865848,0,0x0,8
tick,0x7ffe67f8feb4,439881458,0,0x0,8
tick,0x7ffe67f8feb4,439897438,0,0x0,8
tick,0x7ffe67f8feb4,439913400,0,0x0,8
tick,0x7ffe67f8feb4,439929439,0,0x0,8
tick,0x7ffe67f8feb4,439945244,0,0x0,8
tick,0x7ffe67f8feb4,439960489,0,0x0,8
tick,0x7ffe67f8feb4,439976408,0,0x0,8
tick,0x7ffe67f8feb4,439991467,0,0x0,8
tick,0x7ffe67f8feb4,440007488,0,0x0,8
tick,0x7ffe67f8feb4,440023595,0,0x0,8
tick,0x7ffe67f8feb4,440039476,0,0x0,8
tick,0x7ffe67f8feb4,440055236,0,0x0,8
tick,0x7ffe67f8feb4,440071053,0,0x0,8
tick,0x7ffe67f8feb4,440086583,0,0x0,8
tick,0x7ffe67f8feb4,440102411,0,0x0,8
tick,0x7ffe67f8feb4,440117978,0,0x0,8
tick,0x7ffe67f8feb4,440134219,0,0x0,8
tick,0x7ffe67f8feb4,440149269,0,0x0,8
tick,0x7ffe67f8feb4,440164937,0,0x0,8
tick,0x7ffe67f8feb4,440180922,0,0x0,8
tick,0x7ffe67f8feb4,440196405,0,0x0,8
tick,0x7ffe67f8feb4,440212375,0,0x0,8
tick,0x7ffe67f8feb4,440227726,0,0x0,8
tick,0x7ffe67f8feb4,440243638,0,0x0,8
tick,0x7ffe67f8feb4,440258999,0,0x0,8
tick,0x7ffe67f8feb4,440274461,0,0x0,8
tick,0x7ffe67f8feb4,440289456,0,0x0,8
tick,0x7ffe67f8feb4,440304573,0,0x0,8
tick,0x7ffe67f8feb4,440319829,0,0x0,8
tick,0x7ffe67f8feb4,440335772,0,0x0,8
tick,0x7ffe67f8feb4,440351738,0,0x0,8
tick,0x7ffe67f8feb4,440367733,0,0x0,8
tick,0x7ffe67f8feb4,440382721,0,0x0,8
tick,0x7ffe67f8feb4,440398794,0,0x0,8
tick,0x7ffe67f8feb4,440414271,0,0x0,8
tick,0x7ffe67f8feb4,440429832,0,0x0,8
tick,0x7ffe67f8feb4,440445644,0,0x0,8
tick,0x7ffe67f8feb4,440461525,0,0x0,8
tick,0x7ffe67f8feb4,440477603,0,0x0,8
tick,0x7ffe67f8feb4,440492928,0,0x0,8
tick,0x7ffe67f8feb4,440508597,0,0x0,8
tick,0x7ffe67f8feb4,440524229,0,0x0,8
tick,0x7ffe67f8feb4,440540263,0,0x0,8
tick,0x7ffe67f8feb4,440556268,0,0x0,8
tick,0x7ffe67f8feb4,440571255,0,0x0,8
tick,0x7ffe67f8feb4,440586294,0,0x0,8
tick,0x7ffe67f8feb4,440601216,0,0x0,8
tick,0x7ffe67f8feb4,440616350,0,0x0,8
tick,0x7ffe67f8feb4,440632391,0,0x0,8
tick,0x7ffe67f8feb4,440647366,0,0x0,8
tick,0x7ffe67f8feb4,440662540,0,0x0,8
tick,0x7ffe67f8feb4,440678511,0,0x0,8
tick,0x7ffe67f8feb4,440694256,0,0x0,8
tick,0x7ffe67f8feb4,440709911,0,0x0,8
tick,0x7ffe67f8feb4,440725279,0,0x0,8
tick,0x7ffe67f8feb4,440740681,0,0x0,8
tick,0x7ffe67f8feb4,440756517,0,0x0,8
tick,0x7ffe67f8feb4,440772046,0,0x0,8
tick,0x7ffe67f8feb4,440787446,0,0x0,8
tick,0x7ffe67f8feb4,440803474,0,0x0,8
tick,0x7ffe67f8feb4,440818739,0,0x0,8
tick,0x7ffe67f8feb4,440834274,0,0x0,8
tick,0x7ffe67f8feb4,440849782,0,0x0,8
tick,0x7ffe67f8feb4,440864738,0,0x0,8
tick,0x7ffe67f8feb4,440880071,0,0x0,8
tick,0x7ffe67f8feb4,440895395,0,0x0,8
tick,0x7ffe67f8feb4,440911175,0,0x0,8
tick,0x7ffe67f8feb4,440926494,0,0x0,8
tick,0x7ffe67f8feb4,440942054,0,0x0,8
tick,0x7ffe67f8feb4,440957697,0,0x0,8
tick,0x7ffe67f8feb4,440973286,0,0x0,8
tick,0x7ffe67f8feb4,440989398,0,0x0,8
tick,0x7ffe67f8feb4,441004707,0,0x0,8
tick,0x7ffe67f8feb4,441020473,0,0x0,8
tick,0x7ffe67f8feb4,441036440,0,0x0,8
tick,0x7ffe67f8feb4,441051826,0,0x0,8
tick,0x7ffe67f8feb4,441067562,0,0x0,8
tick,0x7ffe67f8feb4,441082940,0,0x0,8
tick,0x7ffe67f8feb4,441098032,0,0x0,8
tick,0x7ffe67f8feb4,441113526,0,0x0,8
tick,0x7ffe67f8feb4,441128730,0,0x0,8
tick,0x7ffe67f8feb4,441143660,0,0x0,8
tick,0x7ffe67f8feb4,441159228,0,0x0,8
tick,0x7ffe67f8feb4,441174454,0,0x0,8
tick,0x7ffe67f8feb4,441189933,0,0x0,8
tick,0x7ffe67f8feb4,441205900,0,0x0,8
tick,0x7ffe67f8feb4,441221910,0,0x0,8
tick,0x7ffe67f8feb4,441237656,0,0x0,8
tick,0x7ffe67f8feb4,441253716,0,0x0,8
tick,0x7ffe67f8feb4,441269448,0,0x0,8
tick,0x7ffe67f8feb4,441284309,0,0x0,8
tick,0x7ffe67f8feb4,441299706,0,0x0,8
tick,0x7ffe67f8feb4,441315374,0,0x0,8
tick,0x7ffe67f8feb4,441330871,0,0x0,8
tick,0x7ffe67f8feb4,441345775,0,0x0,8
tick,0x7ffe67f8feb4,441361770,0,0x0,8
tick,0x7ffe67f8feb4,441377766,0,0x0,8
tick,0x7ffe67f8feb4,441393759,0,0x0,8
tick,0x7ffe67f8feb4,441409363,0,0x0,8
tick,0x7ffe67f8feb4,441425299,0,0x0,8
tick,0x7ffe67f8feb4,441441300,0,0x0,8
tick,0x7ffe67f8feb4,441456884,0,0x0,8
tick,0x7ffe67f8feb4,441472735,0,0x0,8
tick,0x7ffe67f8feb4,441487787,0,0x0,8
tick,0x7ffe67f8feb4,441503039,0,0x0,8
tick,0x7ffe67f8feb4,441519116,0,0x0,8
tick,0x7ffe67f8feb4,441534311,0,0x0,8
tick,0x7ffe67f8feb4,441550303,0,0x0,8
tick,0x7ffe67f8feb4,441566286,0,0x0,8
tick,0x7ffe67f8feb4,441582318,0,0x0,8
tick,0x7ffe67f8feb4,441598321,0,0x0,8
tick,0x7ffe67f8feb4,441614367,0,0x0,8
tick,0x7ffe67f8feb4,441630283,0,0x0,8
tick,0x7ffe67f8feb4,441646350,0,0x0,8
tick,0x7ffe67f8feb4,441662399,0,0x0,8
tick,0x7ffe67f8feb4,441677842,0,0x0,8
tick,0x7ffe67f8feb4,441693674,0,0x0,8
tick,0x7ffe67f8feb4,441708800,0,0x0,8
tick,0x7ffe67f8feb4,441724697,0,0x0,8
tick,0x7ffe67f8feb4,441740696,0,0x0,8
tick,0x7ffe67f8feb4,441756809,0,0x0,8
tick,0x7ffe67f8feb4,441772312,0,0x0,8
tick,0x7ffe67f8feb4,441787691,0,0x0,8
tick,0x7ffe67f8feb4,441802818,0,0x0,8
tick,0x7ffe67f8feb4,441817706,0,0x0,8
tick,0x7ffe67f8feb4,441833615,0,0x0,8
tick,0x7ffe67f8feb4,441849635,0,0x0,8
tick,0x7ffe67f8feb4,441865719,0,0x0,8
tick,0x7ffe67f8feb4,441881722,0,0x0,8
tick,0x7ffe67f8feb4,441897743,0,0x0,8
tick,0x7ffe67f8feb4,441913469,0,0x0,8
tick,0x7ffe67f8feb4,441928748,0,0x0,8
tick,0x7ffe67f8feb4,441944229,0,0x0,8
tick,0x7ffe67f8feb4,441959751,0,0x0,8
tick,0x7ffe67f8feb4,441975759,0,0x0,8
tick,0x7ffe67f8feb4,441991419,0,0x0,8
tick,0x7ffe67f8feb4,442006756,0,0x0,8
tick,0x7ffe67f8feb4,442022527,0,0x0,8
tick,0x7ffe67f8feb4,442037735,0,0x0,8
tick,0x7ffe67f8feb4,442053740,0,0x0,8
tick,0x7ffe67f8feb4,442069696,0,0x0,8
tick,0x7ffe67f8feb4,442085014,0,0x0,8
tick,0x7ffe67f8feb4,442100011,0,0x0,8
tick,0x7ffe67f8feb4,442116065,0,0x0,8
tick,0x7ffe67f8feb4,442131245,0,0x0,8
tick,0x7ffe67f8feb4,442147042,0,0x0,8
tick,0x7ffe67f8feb4,442162335,0,0x0,8
tick,0x7ffe67f8feb4,442177800,0,0x0,8
tick,0x7ffe67f8feb4,442192840,0,0x0,8
tick,0x7ffe67f8feb4,442208092,0,0x0,8
tick,0x7ffe67f8feb4,442223937,0,0x0,8
tick,0x7ffe67f8feb4,442240061,0,0x0,8
tick,0x7ffe67f8feb4,442255419,0,0x0,8
tick,0x7ffe67f8feb4,442270728,0,0x0,8
tick,0x7ffe67f8feb4,442286518,0,0x0,8
tick,0x7ffe67f8feb4,442301853,0,0x0,8
tick,0x7ffe67f8feb4,442317904,0,0x0,8
tick,0x7ffe67f8feb4,442334269,0,0x0,8
tick,0x7ffe67f8feb4,442349776,0,0x0,8
tick,0x7ffe67f8feb4,442365777,0,0x0,8
tick,0x7ffe67f8feb4,442381794,0,0x0,8
tick,0x7ffe67f8feb4,442397046,0,0x0,8
tick,0x7ffe67f8feb4,442412624,0,0x0,8
tick,0x7ffe67f8feb4,442428275,0,0x0,8
tick,0x7ffe67f8feb4,442443749,0,0x0,8
tick,0x7ffe67f8feb4,442459827,0,0x0,8
tick,0x7ffe67f8feb4,442475812,0,0x0,8
tick,0x7ffe67f8feb4,442492033,0,0x0,8
tick,0x7ffe67f8feb4,442507769,0,0x0,8
tick,0x7ffe67f8feb4,442523775,0,0x0,8
tick,0x7ffe67f8feb4,442539293,0,0x0,8
tick,0x7ffe67f8feb4,442555366,0,0x0,8
tick,0x7ffe67f8feb4,442571117,0,0x0,8
tick,0x7ffe67f8feb4,442586604,0,0x0,8
tick,0x7ffe67f8feb4,442601831,0,0x0,8
tick,0x7ffe67f8feb4,442617864,0,0x0,8
tick,0x7ffe67f8feb4,442632811,0,0x0,8
tick,0x7ffe67f8feb4,442647872,0,0x0,8
tick,0x7ffe67f8feb4,442663271,0,0x0,8
tick,0x7ffe67f8feb4,442679032,0,0x0,8
tick,0x7ffe67f8feb4,442694013,0,0x0,8
tick,0x7ffe67f8feb4,442709126,0,0x0,8
tick,0x7ffe67f8feb4,442724938,0,0x0,8
tick,0x7ffe67f8feb4,442739981,0,0x0,8
tick,0x7ffe67f8feb4,442755861,0,0x0,8
tick,0x7ffe67f8feb4,442771877,0,0x0,8
tick,0x7ffe67f8feb4,442787892,0,0x0,8
tick,0x7ffe67f8feb4,442803562,0,0x0,8
tick,0x7ffe67f8feb4,442818843,0,0x0,8
tick,0x7ffe67f8feb4,442834529,0,0x0,8
tick,0x7ffe67f8feb4,442849534,0,0x0,8
tick,0x7ffe67f8feb4,442864842,0,0x0,8
tick,0x7ffe67f8feb4,442880859,0,0x0,8
tick,0x7ffe67f8feb4,442896974,0,0x0,8
tick,0x7ffe67f8feb4,442913023,0,0x0,8
tick,0x7ffe67f8feb4,442927860,0,0x0,8
tick,0x7ffe67f8feb4,442943264,0,0x0,8
tick,0x7ffe67f8feb4,442958968,0,0x0,8
tick,0x7ffe67f8feb4,442975728,0,0x0,8
tick,0x7ffe67f8feb4,442990902,0,0x0,8
tick,0x7ffe67f8feb4,443007330,0,0x0,8
tick,0x7ffe67f8feb4,443022090,0,0x0,8
tick,0x7ffe67f8feb4,443036533,0,0x0,8
tick,0x7ffe67f8feb4,443051890,0,0x0,8
tick,0x7ffe67f8feb4,443067871,0,0x0,8
tick,0x7ffe67f8feb4,443083604,0,0x0,8
tick,0x7ffe67f8feb4,443098918,0,0x0,8
tick,0x7ffe67f8feb4,443113638,0,0x0,8
tick,0x7ffe67f8feb4,443128606,0,0x0,8
tick,0x7ffe67f8feb4,443144609,0,0x0,8
tick,0x7ffe67f8feb4,443159914,0,0x0,8
tick,0x7ffe67f8feb4,443175983,0,0x0,8
tick,0x7ffe67f8feb4,443192100,0,0x0,8
tick,0x7ffe67f8feb4,443207968,0,0x0,8
tick,0x7ffe67f8feb4,443223901,0,0x0,8
tick,0x7ffe67f8feb4,443239911,0,0x0,8
tick,0x7ffe67f8feb4,443255416,0,0x0,8
tick,0x7ffe67f8feb4,443270906,0,0x0,8
tick,0x7ffe67f8feb4,443286921,0,0x0,8
tick,0x7ffe67f8feb4,443302929,0,0x0,8
tick,0x7ffe67f8feb4,443318977,0,0x0,8
tick,0x7ffe67f8feb4,443334228,0,0x0,8
tick,0x7ffe67f8feb4,443350300,0,0x0,8
tick,0x7ffe67f8feb4,443366205,0,0x0,8
tick,0x7ffe67f8feb4,443382223,0,0x0,8
tick,0x7ffe67f8feb4,443398236,0,0x0,8
tick,0x7ffe67f8feb4,443414233,0,0x0,8
tick,0x7ffe67f8feb4,443430264,0,0x0,8
tick,0x7ffe67f8feb4,443446268,0,0x0,8
tick,0x7ffe67f8feb4,443461710,0,0x0,8
tick,0x7ffe67f8feb4,443477313,0,0x0,8
tick,0x7ffe67f8feb4,443493330,0,0x0,8
tick,0x7ffe67f8feb4,443509138,0,0x0,8
tick,0x7ffe67f8feb4,443524963,0,0x0,8
tick,0x7ffe67f8feb4,443540962,0,0x0,8
tick,0x7ffe67f8feb4,443556950,0,0x0,8
tick,0x7ffe67f8feb4,443572971,0,0x0,8
tick,0x7ffe67f8feb4,443589048,0,0x0,8
tick,0x7ffe67f8feb4,443604975,0,0x0,8
tick,0x7ffe67f8feb4,443619869,0,0x0,8
tick,0x7ffe67f8feb4,443635842,0,0x0,8
tick,0x7ffe67f8feb4,443651842,0,0x0,8
tick,0x7ffe67f8feb4,443667829,0,0x0,8
tick,0x7ffe67f8feb4,443683001,0,0x0,8
tick,0x7ffe67f8feb4,443698963,0,0x0,8
tick,0x7ffe67f8feb4,443714627,0,0x0,8
tick,0x7ffe67f8feb4,443730063,0,0x0,8
tick,0x7ffe67f8feb4,443745550,0,0x0,8
tick,0x7ffe67f8feb4,443760988,0,0x0,8
tick,0x7ffe67f8feb4,443777053,0,0x0,8
tick,0x7ffe67f8feb4,443793011,0,0x0,8
tick,0x7ffe67f8feb4,443808983,0,0x0,8
tick,0x7ffe67f8feb4,443824987,0,0x0,8
tick,0x7ffe67f8feb4,443841052,0,0x0,8
tick,0x7ffe67f8feb4,443857060,0,0x0,8
tick,0x7ffe67f8feb4,443873019,0,0x0,8
tick,0x7ffe67f8feb4,443889117,0,0x0,8
tick,0x7ffe67f8feb4,443904904,0,0x0,8
tick,0x7ffe67f8feb4,443920015,0,0x0,8
tick,0x7ffe67f8feb4,443936018,0,0x0,8
tick,0x7ffe67f8feb4,443952077,0,0x0,8
tick,0x7ffe67f8feb4,443968140,0,0x0,8
tick,0x7ffe67f8feb4,443984044,0,0x0,8
tick,0x7ffe67f8feb4,444000014,0,0x0,8
tick,0x7ffe67f8feb4,444015320,0,0x0,8
tick,0x7ffe67f8feb4,444031239,0,0x0,8
tick,0x7ffe67f8feb4,444046598,0,0x0,8
tick,0x7ffe67f8feb4,444062245,0,0x0,8
tick,0x7ffe67f8feb4,444078056,0,0x0,8
tick,0x7ffe67f8feb4,444093991,0,0x0,8
tick,0x7ffe67f8feb4,444109038,0,0x0,8
tick,0x7ffe67f8feb4,444124218,0,0x0,8
tick,0x7ffe67f8feb4,444140057,0,0x0,8
tick,0x7ffe67f8feb4,444156055,0,0x0,8
tick,0x7ffe67f8feb4,444172223,0,0x0,8
tick,0x7ffe67f8feb4,444188073,0,0x0,8
tick,0x7ffe67f8feb4,444203433,0,0x0,8
tick,0x7ffe67f8feb4,444219097,0,0x0,8
tick,0x7ffe67f8feb4,444234591,0,0x0,8
tick,0x7ffe67f8feb4,444250103,0,0x0,8
tick,0x7ffe67f8feb4,444265852,0,0x0,8
tick,0x7ffe67f8feb4,444280891,0,0x0,8
tick,0x7ffe67f8feb4,444297148,0,0x0,8
tick,0x7ffe67f8feb4,444312551,0,0x0,8
tick,0x7ffe67f8feb4,444328669,0,0x0,8
tick,0x7ffe67f8feb4,444344247,0,0x0,8
tick,0x7ffe67f8feb4,444360024,0,0x0,8
tick,0x7ffe67f8feb4,444375989,0,0x0,8
tick,0x7ffe67f8feb4,444392002,0,0x0,8
tick,0x7ffe67f8feb4,444408001,0,0x0,8
tick,0x7ffe67f8feb4,444424028,0,0x0,8
tick,0x7ffe67f8feb4,444440068,0,0x0,8
tick,0x7ffe67f8feb4,444455237,0,0x0,8
tick,0x7ffe67f8feb4,444470832,0,0x0,8
tick,0x7ffe67f8feb4,444486612,0,0x0,8
tick,0x7ffe67f8feb4,444502060,0,0x0,8
tick,0x7ffe67f8feb4,444517828,0,0x0,8
tick,0x7ffe67f8feb4,444533396,0,0x0,8
tick,0x7ffe67f8feb4,444549347,0,0x0,8
tick,0x7ffe67f8feb4,444564513,0,0x0,8
tick,0x7ffe67f8feb4,444579975,0,0x0,8
tick,0x7ffe67f8feb4,444596042,0,0x0,8
tick,0x7ffe67f8feb4,444611467,0,0x0,8
tick,0x7ffe67f8feb4,444626722,0,0x0,8
tick,0x7ffe67f8feb4,444642358,0,0x0,8
tick,0x7ffe67f8feb4,444657923,0,0x0,8
tick,0x7ffe67f8feb4,444673318,0,0x0,8
tick,0x7ffe67f8feb4,444689429,0,0x0,8
tick,0x7ffe67f8feb4,444705132,0,0x0,8
tick,0x7ffe67f8feb4,444720122,0,0x0,8
tick,0x7ffe67f8feb4,444735826,0,0x0,8
tick,0x7ffe67f8feb4,444751156,0,0x0,8
tick,0x7ffe67f8feb4,444767268,0,0x0,8
tick,0x7ffe67f8feb4,444782328,0,0x0,8
tick,0x7ffe67f8feb4,444798147,0,0x0,8
tick,0x7ffe67f8feb4,444814138,0,0x0,8
tick,0x7ffe67f8feb4,444830142,0,0x0,8
tick,0x7ffe67f8feb4,444846164,0,0x0,8
tick,0x7ffe67f8feb4,444862235,0,0x0,8
tick,0x7ffe67f8feb4,444878166,0,0x0,8
tick,0x7ffe67f8feb4,444894106,0,0x0,8
tick,0x7ffe67f8feb4,444909219,0,0x0,8
tick,0x7ffe67f8feb4,444925113,0,0x0,8
tick,0x7ffe67f8feb4,444941105,0,0x0,8
tick,0x7ffe67f8feb4,444957232,0,0x0,8
tick,0x7ffe67f8feb4,444973170,0,0x0,8
tick,0x7ffe67f8feb4,444988162,0,0x0,8
tick,0x7ffe67f8feb4,445004119,0,0x0,8
tick,0x7ffe67f8feb4,445020112,0,0x0,8
tick,0x7ffe67f8feb4,445036108,0,0x0,8
tick,0x7ffe67f8feb4,445052136,0,0x0,8
tick,0x7ffe67f8feb4,445068132,0,0x0,8
tick,0x7ffe67f8feb4,445083928,0,0x0,8
tick,0x7ffe67f8feb4,445099070,0,0x0,8
tick,0x7ffe67f8feb4,445114746,0,0x0,8
tick,0x7ffe67f8feb4,445130054,0,0x0,8
tick,0x7ffe67f8feb4,445145215,0,0x0,8
tick,0x7ffe67f8feb4,445161200,0,0x0,8
tick,0x7ffe67f8feb4,445177242,0,0x0,8
tick,0x7ffe67f8feb4,445193248,0,0x0,8
tick,0x7ffe67f8feb4,445209213,0,0x0,8
tick,0x7ffe67f8feb4,445225297,0,0x0,8
tick,0x7ffe67f8feb4,445241301,0,0x0,8
tick,0x7ffe67f8feb4,445257829,0,0x0,8
tick,0x7ffe67f8feb4,445273487,0,0x0,8
tick,0x7ffe67f8feb4,445289230,0,0x0,8
tick,0x7ffe67f8feb4,445305120,0,0x0,8
tick,0x7ffe67f8feb4,445321217,0,0x0,8
tick,0x7ffe67f8feb4,445337271,0,0x0,8
tick,0x7ffe67f8feb4,445353255,0,0x0,8
tick,0x7ffe67f8feb4,445369280,0,0x0,8
tick,0x7ffe67f8feb4,445385209,0,0x0,8
tick,0x7ffe67f8feb4,445401210,0,0x0,8
tick,0x7ffe67f8feb4,445417213,0,0x0,8
tick,0x7ffe67f8feb4,445433253,0,0x0,8
tick,0x7ffe67f8feb4,445449238,0,0x0,8
tick,0x7ffe67f8feb4,445465253,0,0x0,8
tick,0x7ffe67f8feb4,445481266,0,0x0,8
tick,0x7ffe67f8feb4,445497242,0,0x0,8
tick,0x7ffe67f8feb4,445513040,0,0x0,8
tick,0x7ffe67f8feb4,445528272,0,0x0,8
tick,0x7ffe67f8feb4,445544257,0,0x0,8
tick,0x7ffe67f8feb4,445560240,0,0x0,8
tick,0x7ffe67f8feb4,445576267,0,0x0,8
tick,0x7ffe67f8feb4,445592248,0,0x0,8
tick,0x7ffe67f8feb4,445607965,0,0x0,8
tick,0x7ffe67f8feb4,445623586,0,0x0,8
tick,0x7ffe67f8feb4,445639446,0,0x0,8
tick,0x7ffe67f8feb4,445655149,0,0x0,8
tick,0x7ffe67f8feb4,445670537,0,0x0,8
tick,0x7ffe67f8feb4,445686072,0,0x0,8
tick,0x7ffe67f8feb4,445702011,0,0x0,8
tick,0x7ffe67f8feb4,445718085,0,0x0,8
tick,0x7ffe67f8feb4,445733553,0,0x0,8
tick,0x7ffe67f8feb4,445748704,0,0x0,8
tick,0x7ffe67f8feb4,445764313,0,0x0,8
tick,0x7ffe67f8feb4,445779476,0,0x0,8
tick,0x7ffe67f8feb4,445795272,0,0x0,8
tick,0x7ffe67f8feb4,445810435,0,0x0,8
tick,0x7ffe67f8feb4,445826154,0,0x0,8
tick,0x7ffe67f8feb4,445841604,0,0x0,8
tick,0x7ffe67f8feb4,445857364,0,0x0,8
tick,0x7ffe67f8feb4,445873306,0,0x0,8
tick,0x7ffe67f8feb4,445889373,0,0x0,8
tick,0x7ffe67f8feb4,445905335,0,0x0,8
tick,0x7ffe67f8feb4,445920900,0,0x0,8
tick,0x7ffe67f8feb4,445936557,0,0x0,8
tick,0x7ffe67f8feb4,445951694,0,0x0,8
tick,0x7ffe67f8feb4,445967653,0,0x0,8
tick,0x7ffe67f8feb4,445983358,0,0x0,8
tick,0x7ffe67f8feb4,445998377,0,0x0,8
tick,0x7ffe67f8feb4,446014093,0,0x0,8
tick,0x7ffe67f8feb4,446029420,0,0x0,8
tick,0x7ffe67f8feb4,446045135,0,0x0,8
tick,0x7ffe67f8feb4,446060340,0,0x0,8
tick,0x7ffe67f8feb4,446076321,0,0x0,8
tick,0x7ffe67f8feb4,446092384,0,0x0,8
tick,0x7ffe67f8feb4,446108157,0,0x0,8
tick,0x7ffe67f8feb4,446123822,0,0x0,8
tick,0x7ffe67f8feb4,446139734,0,0x0,8
tick,0x7ffe67f8feb4,446154859,0,0x0,8
tick,0x7ffe67f8feb4,446170155,0,0x0,8
tick,0x7ffe67f8feb4,446185731,0,0x0,8
tick,0x7ffe67f8feb4,446201193,0,0x0,8
tick,0x7ffe67f8feb4,446216428,0,0x0,8
tick,0x7ffe67f8feb4,446231755,0,0x0,8
tick,0x7ffe67f8feb4,446246784,0,0x0,8
tick,0x7ffe67f8feb4,446262945,0,0x0,8
tick,0x7ffe67f8feb4,446278944,0,0x0,8
tick,0x7ffe67f8feb4,446294444,0,0x0,8
tick,0x7ffe67f8feb4,446326844,0,0x0,8
tick,0x7ffe67f8feb4,446341692,0,0x0,8
tick,0x7ffe67f8feb4,446356675,0,0x0,8
tick,0x7ffe67f8feb4,446372402,0,0x0,8
tick,0x7ffe67f8feb4,446388388,0,0x0,8
tick,0x7ffe67f8feb4,446404401,0,0x0,8
tick,0x7ffe67f8feb4,446420379,0,0x0,8
tick,0x7ffe67f8feb4,446436388,0,0x0,8
tick,0x7ffe67f8feb4,446451394,0,0x0,8
tick,0x7ffe67f8feb4,446467447,0,0x0,8
tick,0x7ffe67f8feb4,446482386,0,0x0,8
tick,0x7ffe67f8feb4,446498427,0,0x0,8
tick,0x7ffe67f8feb4,446513750,0,0x0,8
tick,0x7ffe67f8feb4,446529430,0,0x0,8
tick,0x7ffe67f8feb4,446545034,0,0x0,8
tick,0x7ffe67f8feb4,446560452,0,0x0,8
tick,0x7ffe67f8feb4,446576450,0,0x0,8
tick,0x7ffe67f8feb4,446592236,0,0x0,8
tick,0x7ffe67f8feb4,446607465,0,0x0,8
tick,0x7ffe67f8feb4,446623418,0,0x0,8
tick,0x7ffe67f8feb4,446639415,0,0x0,8
tick,0x7ffe67f8feb4,446654453,0,0x0,8
tick,0x7ffe67f8feb4,446670455,0,0x0,8
tick,0x7ffe67f8feb4,446686413,0,0x0,8
tick,0x7ffe67f8feb4,446702446,0,0x0,8
tick,0x7ffe67f8feb4,446718463,0,0x0,8
tick,0x7ffe67f8feb4,446734449,0,0x0,8
tick,0x7ffe67f8feb4,446749489,0,0x0,8
tick,0x7ffe67f8feb4,446764727,0,0x0,8
tick,0x7ffe67f8feb4,446779888,0,0x0,8
tick,0x7ffe67f8feb4,446795591,0,0x0,8
tick,0x7ffe67f8feb4,446811495,0,0x0,8
tick,0x7ffe67f8feb4,446827539,0,0x0,8
tick,0x7ffe67f8feb4,446843492,0,0x0,8
tick,0x7ffe67f8feb4,446859365,0,0x0,8
tick,0x7ffe67f8feb4,446875420,0,0x0,8
tick,0x7ffe67f8feb4,446890747,0,0x0,8
tick,0x7ffe67f8feb4,446906436,0,0x0,8
tick,0x7ffe67f8feb4,446922506,0,0x0,8
tick,0x7ffe67f8feb4,446938482,0,0x0,8
tick,0x7ffe67f8feb4,446954488,0,0x0,8
tick,0x7ffe67f8feb4,446970489,0,0x0,8
tick,0x7ffe67f8feb4,446986501,0,0x0,8
tick,0x7ffe67f8feb4,447002534,0,0x0,8
tick,0x7ffe67f8feb4,447018394,0,0x0,8
tick,0x7ffe67f8feb4,447033505,0,0x0,8
tick,0x7ffe67f8feb4,447049420,0,0x0,8
tick,0x7ffe67f8feb4,447065506,0,0x0,8
tick,0x7ffe67f8feb4,447081517,0,0x0,8
tick,0x7ffe67f8feb4,447097503,0,0x0,8
tick,0x7ffe67f8feb4,447113520,0,0x0,8
tick,0x7ffe67f8feb4,447129519,0,0x0,8
tick,0x7ffe67f8feb4,447145532,0,0x0,8
tick,0x7ffe67f8feb4,447161544,0,0x0,8
tick,0x7ffe67f8feb4,447177558,0,0x0,8
tick,0x7ffe67f8feb4,447193534,0,0x0,8
tick,0x7ffe67f8feb4,447208790,0,0x0,8
tick,0x7ffe67f8feb4,447223846,0,0x0,8
tick,0x7ffe67f8feb4,447239433,0,0x0,8
tick,0x7ffe67f8feb4,447255082,0,0x0,8
tick,0x7ffe67f8feb4,447270239,0,0x0,8
tick,0x7ffe67f8feb4,447285169,0,0x0,8
tick,0x7ffe67f8feb4,447301110,0,0x0,8
tick,0x7ffe67f8feb4,447316667,0,0x0,8
tick,0x7ffe67f8feb4,447332668,0,0x0,8
tick,0x7ffe67f8feb4,447348708,0,0x0,8
tick,0x7ffe67f8feb4,447364556,0,0x0,8
tick,0x7ffe67f8feb4,447380526,0,0x0,8
tick,0x7ffe67f8feb4,447396555,0,0x0,8
tick,0x7ffe67f8feb4,447412554,0,0x0,8
tick,0x7ffe67f8feb4,447428505,0,0x0,8
tick,0x7ffe67f8feb4,447443515,0,0x0,8
tick,0x7ffe67f8feb4,447459845,0,0x0,8
tick,0x7ffe67f8feb4,447475523,0,0x0,8
tick,0x7ffe67f8feb4,447491508,0,0x0,8
tick,0x7ffe67f8feb4,447506558,0,0x0,8
tick,0x7ffe67f8feb4,447522610,0,0x0,8
tick,0x7ffe67f8feb4,447538588,0,0x0,8
tick,0x7ffe67f8feb4,447554559,0,0x0,8
tick,0x7ffe67f8feb4,447570544,0,0x0,8
tick,0x7ffe67f8feb4,447586571,0,0x0,8
tick,0x7ffe67f8feb4,447602596,0,0x0,8
tick,0x7ffe67f8feb4,447618582,0,0x0,8
tick,0x7ffe67f8feb4,447634599,0,0x0,8
tick,0x7ffe67f8feb4,447650105,0,0x0,8
tick,0x7ffe67f8feb4,447665360,0,0x0,8
tick,0x7ffe67f8feb4,447681692,0,0x0,8
tick,0x7ffe67f8feb4,447696733,0,0x0,8
tick,0x7ffe67f8feb4,447712300,0,0x0,8
tick,0x7ffe67f8feb4,447727624,0,0x0,8
tick,0x7ffe67f8feb4,447743044,0,0x0,8
tick,0x7ffe67f8feb4,447758982,0,0x0,8
tick,0x7ffe67f8feb4,447774313,0,0x0,8
tick,0x7ffe67f8feb4,447789504,0,0x0,8
tick,0x7ffe67f8feb4,447804632,0,0x0,8
tick,0x7ffe67f8feb4,447820569,0,0x0,8
tick,0x7ffe67f8feb4,447836423,0,0x0,8
tick,0x7ffe67f8feb4,447852251,0,0x0,8
tick,0x7ffe67f8feb4,447867708,0,0x0,8
tick,0x7ffe67f8feb4,447883048,0,0x0,8
tick,0x7ffe67f8feb4,447898326,0,0x0,8
tick,0x7ffe67f8feb4,447913892,0,0x0,8
tick,0x7ffe67f8feb4,447929778,0,0x0,8
tick,0x7ffe67f8feb4,447945722,0,0x0,8
tick,0x7ffe67f8feb4,447961744,0,0x0,8
tick,0x7ffe67f8feb4,447976923,0,0x0,8
tick,0x7ffe67f8feb4,447992156,0,0x0,8
tick,0x7ffe67f8feb4,448007544,0,0x0,8
tick,0x7ffe67f8feb4,448022991,0,0x0,8
tick,0x7ffe67f8feb4,448038720,0,0x0,8
tick,0x7ffe67f8feb4,448053735,0,0x0,8
tick,0x7ffe67f8feb4,448068956,0,0x0,8
tick,0x7ffe67f8feb4,448084776,0,0x0,8
tick,0x7ffe67f8feb4,448100749,0,0x0,8
tick,0x7ffe67f8feb4,448116704,0,0x0,8
tick,0x7ffe67f8feb4,448132662,0,0x0,8
tick,0x7ffe67f8feb4,448147951,0,0x0,8
tick,0x7ffe67f8feb4,448163505,0,0x0,8
tick,0x7ffe67f8feb4,448179152,0,0x0,8
tick,0x7ffe67f8feb4,448194683,0,0x0,8
tick,0x7ffe67f8feb4,448210856,0,0x0,8
tick,0x7ffe67f8feb4,448226703,0,0x0,8
tick,0x7ffe67f8feb4,448242930,0,0x0,8
tick,0x7ffe67f8feb4,448258634,0,0x0,8
tick,0x7ffe67f8feb4,448274654,0,0x0,8
tick,0x7ffe67f8feb4,448290645,0,0x0,8
tick,0x7ffe67f8feb4,448306697,0,0x0,8
tick,0x7ffe67f8feb4,448321844,0,0x0,8
tick,0x7ffe67f8feb4,448337372,0,0x0,8
tick,0x7ffe67f8feb4,448352576,0,0x0,8
tick,0x7ffe67f8feb4,448368034,0,0x0,8
tick,0x7ffe67f8feb4,448384080,0,0x0,8
tick,0x7ffe67f8feb4,448399993,0,0x0,8
tick,0x7ffe67f8feb4,448416005,0,0x0,8
tick,0x7ffe67f8feb4,448432002,0,0x0,8
tick,0x7ffe67f8feb4,448447986,0,0x0,8
tick,0x7ffe67f8feb4,448463991,0,0x0,8
tick,0x7ffe67f8feb4,448479986,0,0x0,8
tick,0x7ffe67f8feb4,448495111,0,0x0,8
tick,0x7ffe67f8feb4,448510989,0,0x0,8
tick,0x7ffe67f8feb4,448526702,0,0x0,8
tick,0x7ffe67f8feb4,448541398,0,0x0,8
tick,0x7ffe67f8feb4,448557400,0,0x0,8
tick,0x7ffe67f8feb4,448573440,0,0x0,8
tick,0x7ffe67f8feb4,448588563,0,0x0,8
tick,0x7ffe67f8feb4,448604596,0,0x0,8
tick,0x7ffe67f8feb4,448620918,0,0x0,8
tick,0x7ffe67f8feb4,448636368,0,0x0,8
tick,0x7ffe67f8feb4,448651589,0,0x0,8
tick,0x7ffe67f8feb4,448667312,0,0x0,8
tick,0x7ffe67f8feb4,448682943,0,0x0,8
tick,0x7ffe67f8feb4,448699014,0,0x0,8
tick,0x7ffe67f8feb4,448714259,0,0x0,8
tick,0x7ffe67f8feb4,448730318,0,0x0,8
tick,0x7ffe67f8feb4,448745751,0,0x0,8
tick,0x7ffe67f8feb4,448761792,0,0x0,8
tick,0x7ffe67f8feb4,448777875,0,0x0,8
tick,0x7ffe67f8feb4,448793495,0,0x0,8
tick,0x7ffe67f8feb4,448809403,0,0x0,8
tick,0x7ffe67f8feb4,448825413,0,0x0,8
tick,0x7ffe67f8feb4,448841459,0,0x0,8
tick,0x7ffe67f8feb4,448857367,0,0x0,8
tick,0x7ffe67f8feb4,448872645,0,0x0,8
tick,0x7ffe67f8feb4,448888649,0,0x0,8
tick,0x7ffe67f8feb4,448904490,0,0x0,8
tick,0x7ffe67f8feb4,448920033,0,0x0,8
tick,0x7ffe67f8feb4,448935294,0,0x0,8
tick,0x7ffe67f8feb4,448950713,0,0x0,8
tick,0x7ffe67f8feb4,448966255,0,0x0,8
tick,0x7ffe67f8feb4,448981518,0,0x0,8
tick,0x7ffe67f8feb4,448996809,0,0x0,8
tick,0x7ffe67f8feb4,449012852,0,0x0,8
tick,0x7ffe67f8feb4,449028838,0,0x0,8
tick,0x7ffe67f8feb4,449044827,0,0x0,8
tick,0x7ffe67f8feb4,449059942,0,0x0,8
tick,0x7ffe67f8feb4,449075102,0,0x0,8
tick,0x7ffe67f8feb4,449090812,0,0x0,8
tick,0x7ffe67f8feb4,449106843,0,0x0,8
tick,0x7ffe67f8feb4,449122811,0,0x0,8
tick,0x7ffe67f8feb4,449138827,0,0x0,8
tick,0x7ffe67f8feb4,449154847,0,0x0,8
tick,0x7ffe67f8feb4,449170838,0,0x0,8
tick,0x7ffe67f8feb4,449186849,0,0x0,8
tick,0x7ffe67f8feb4,449202837,0,0x0,8
tick,0x7ffe67f8feb4,449218835,0,0x0,8
tick,0x7ffe67f8feb4,449234833,0,0x0,8
tick,0x7ffe67f8feb4,449250835,0,0x0,8
tick,0x7ffe67f8feb4,449266333,0,0x0,8
tick,0x7ffe67f8feb4,449281841,0,0x0,8
tick,0x7ffe67f8feb4,449297864,0,0x0,8
tick,0x7ffe67f8feb4,449313858,0,0x0,8
tick,0x7ffe67f8feb4,449329958,0,0x0,8
tick,0x7ffe67f8feb4,449345978,0,0x0,8
tick,0x7ffe67f8feb4,449362004,0,0x0,8
tick,0x7ffe67f8feb4,449377543,0,0x0,8
tick,0x7ffe67f8feb4,449393387,0,0x0,8
tick,0x7ffe67f8feb4,449409395,0,0x0,8
tick,0x7ffe67f8feb4,449425389,0,0x0,8
tick,0x7ffe67f8feb4,449441477,0,0x0,8
tick,0x7ffe67f8feb4,449457496,0,0x0,8
tick,0x7ffe67f8feb4,449473391,0,0x0,8
tick,0x7ffe67f8feb4,449489435,0,0x0,8
tick,0x7ffe67f8feb4,449504595,0,0x0,8
tick,0x7ffe67f8feb4,449520074,0,0x0,8
tick,0x7ffe67f8feb4,449535168,0,0x0,8
tick,0x7ffe67f8feb4,449550324,0,0x0,8
tick,0x7ffe67f8feb4,449565905,0,0x0,8
tick,0x7ffe67f8feb4,449581580,0,0x0,8
tick,0x7ffe67f8feb4,449596947,0,0x0,8
tick,0x7ffe67f8feb4,449612896,0,0x0,8
tick,0x7ffe67f8feb4,449628908,0,0x0,8
tick,0x7ffe67f8feb4,449644980,0,0x0,8
tick,0x7ffe67f8feb4,449661022,0,0x0,8
tick,0x7ffe67f8feb4,449675963,0,0x0,8
tick,0x7ffe67f8feb4,449691044,0,0x0,8
tick,0x7ffe67f8feb4,449706928,0,0x0,8
tick,0x7ffe67f8feb4,449722286,0,0x0,8
tick,0x7ffe67f8feb4,449737968,0,0x0,8
tick,0x7ffe67f8feb4,449754008,0,0x0,8
tick,0x7ffe67f8feb4,449770013,0,0x0,8
tick,0x7ffe67f8feb4,449785993,0,0x0,8
tick,0x7ffe67f8feb4,449801991,0,0x0,8
tick,0x7ffe67f8feb4,449817986,0,0x0,8
tick,0x7ffe67f8feb4,449833693,0,0x0,8
tick,0x7ffe67f8feb4,449848953,0,0x0,8
tick,0x7ffe67f8feb4,449864999,0,0x0,8
tick,0x7ffe67f8feb4,449880767,0,0x0,8
tick,0x7ffe67f8feb4,449895942,0,0x0,8
tick,0x7ffe67f8feb4,449911262,0,0x0,8
tick,0x7ffe67f8feb4,449926439,0,0x0,8
tick,0x7ffe67f8feb4,449941587,0,0x0,8
tick,0x7ffe67f8feb4,449957491,0,0x0,8
tick,0x7ffe67f8feb4,449972942,0,0x0,8
tick,0x7ffe67f8feb4,449988464,0,0x0,8
tick,0x7ffe67f8feb4,450003936,0,0x0,8
tick,0x7ffe67f8feb4,450019089,0,0x0,8
tick,0x7ffe67f8feb4,450034967,0,0x0,8
tick,0x7ffe67f8feb4,450050945,0,0x0,8
tick,0x7ffe67f8feb4,450066106,0,0x0,8
tick,0x7ffe67f8feb4,450082094,0,0x0,8
tick,0x7ffe67f8feb4,450098121,0,0x0,8
tick,0x7ffe67f8feb4,450113562,0,0x0,8
tick,0x7ffe67f8feb4,450129374,0,0x0,8
tick,0x7ffe67f8feb4,450144610,0,0x0,8
tick,0x7ffe67f8feb4,450159659,0,0x0,8
tick,0x7ffe67f8feb4,450175435,0,0x0,8
tick,0x7ffe67f8feb4,450190901,0,0x0,8
tick,0x7ffe67f8feb4,450206607,0,0x0,8
tick,0x7ffe67f8feb4,450222346,0,0x0,8
tick,0x7ffe67f8feb4,450237758,0,0x0,8
tick,0x7ffe67f8feb4,450253289,0,0x0,8
tick,0x7ffe67f8feb4,450268789,0,0x0,8
tick,0x7ffe67f8feb4,450284059,0,0x0,8
tick,0x7ffe67f8feb4,450299845,0,0x0,8
tick,0x7ffe67f8feb4,450315037,0,0x0,8
tick,0x7ffe67f8feb4,450330925,0,0x0,8
tick,0x7ffe67f8feb4,450345902,0,0x0,8
tick,0x7ffe67f8feb4,450362053,0,0x0,8
tick,0x7ffe67f8feb4,450377011,0,0x0,8
tick,0x7ffe67f8feb4,450392981,0,0x0,8
tick,0x7ffe67f8feb4,450408964,0,0x0,8
tick,0x7ffe67f8feb4,450424960,0,0x0,8
tick,0x7ffe67f8feb4,450440961,0,0x0,8
tick,0x7ffe67f8feb4,450456351,0,0x0,8
tick,0x7ffe67f8feb4,450471894,0,0x0,8
tick,0x7ffe67f8feb4,450487289,0,0x0,8
tick,0x7ffe67f8feb4,450503536,0,0x0,8
tick,0x7ffe67f8feb4,450519443,0,0x0,8
tick,0x7ffe67f8feb4,450534717,0,0x0,8
tick,0x7ffe67f8feb4,450549748,0,0x0,8
tick,0x7ffe67f8feb4,450564869,0,0x0,8
tick,0x7ffe67f8feb4,450581026,0,0x0,8
tick,0x7ffe67f8feb4,450596366,0,0x0,8
tick,0x7ffe67f8feb4,450612075,0,0x0,8
tick,0x7ffe67f8feb4,450627098,0,0x0,8
tick,0x7ffe67f8feb4,450643411,0,0x0,8
tick,0x7ffe67f8feb4,450659030,0,0x0,8
tick,0x7ffe67f8feb4,450674580,0,0x0,8
tick,0x7ffe67f8feb4,450690181,0,0x0,8
tick,0x7ffe67f8feb4,450705730,0,0x0,8
tick,0x7ffe67f8feb4,450720946,0,0x0,8
tick,0x7ffe67f8feb4,450736453,0,0x0,8
tick,0x7ffe67f8feb4,450752259,0,0x0,8
tick,0x7ffe67f8feb4,450767624,0,0x0,8
tick,0x7ffe67f8feb4,450782837,0,0x0,8
tick,0x7ffe67f8feb4,450798945,0,0x0,8
tick,0x7ffe67f8feb4,450814858,0,0x0,8
tick,0x7ffe67f8feb4,450830251,0,0x0,8
tick,0x7ffe67f8feb4,450845805,0,0x0,8
tick,0x7ffe67f8feb4,450861863,0,0x0,8
tick,0x7ffe67f8feb4,450877313,0,0x0,8
tick,0x7ffe67f8feb4,450892607,0,0x0,8
tick,0x7ffe67f8feb4,450908339,0,0x0,8
tick,0x7ffe67f8feb4,450924781,0,0x0,8
tick,0x7ffe67f8feb4,450940056,0,0x0,8
tick,0x7ffe67f8feb4,450955513,0,0x0,8
tick,0x7ffe67f8feb4,450970643,0,0x0,8
tick,0x7ffe67f8feb4,450986625,0,0x0,8
tick,0x7ffe67f8feb4,451002146,0,0x0,8
tick,0x7ffe67f8feb4,451018249,0,0x0,8
tick,0x7ffe67f8feb4,451034161,0,0x0,8
tick,0x7ffe67f8feb4,451050110,0,0x0,8
tick,0x7ffe67f8feb4,451066087,0,0x0,8
tick,0x7ffe67f8feb4,451082178,0,0x0,8
tick,0x7ffe67f8feb4,451097755,0,0x0,8
tick,0x7ffe67f8feb4,451113532,0,0x0,8
tick,0x7ffe67f8feb4,451129650,0,0x0,8
tick,0x7ffe67f8feb4,451145369,0,0x0,8
tick,0x7ffe67f8feb4,451161103,0,0x0,8
tick,0x7ffe67f8feb4,451177059,0,0x0,8
tick,0x7ffe67f8feb4,451193036,0,0x0,8
tick,0x7ffe67f8feb4,451209113,0,0x0,8
tick,0x7ffe67f8feb4,451225137,0,0x0,8
tick,0x7ffe67f8feb4,451241133,0,0x0,8
tick,0x7ffe67f8feb4,451257132,0,0x0,8
tick,0x7ffe67f8feb4,451272314,0,0x0,8
tick,0x7ffe67f8feb4,451288185,0,0x0,8
tick,0x7ffe67f8feb4,451304207,0,0x0,8
tick,0x7ffe67f8feb4,451320273,0,0x0,8
tick,0x7ffe67f8feb4,451336147,0,0x0,8
tick,0x7ffe67f8feb4,451351735,0,0x0,8
tick,0x7ffe67f8feb4,451367195,0,0x0,8
tick,0x7ffe67f8feb4,451383140,0,0x0,8
tick,0x7ffe67f8feb4,451399177,0,0x0,8
tick,0x7ffe67f8feb4,451415140,0,0x0,8
tick,0x7ffe67f8feb4,451431172,0,0x0,8
tick,0x7ffe67f8feb4,451447217,0,0x0,8
tick,0x7ffe67f8feb4,451463832,0,0x0,8
tick,0x7ffe67f8feb4,451479789,0,0x0,8
tick,0x7ffe67f8feb4,451495152,0,0x0,8
tick,0x7ffe67f8feb4,451511176,0,0x0,8
tick,0x7ffe67f8feb4,451527187,0,0x0,8
tick,0x7ffe67f8feb4,451543169,0,0x0,8
tick,0x7ffe67f8feb4,451559187,0,0x0,8
tick,0x7ffe67f8feb4,451574991,0,0x0,8
tick,0x7ffe67f8feb4,451590167,0,0x0,8
tick,0x7ffe67f8feb4,451605845,0,0x0,8
tick,0x7ffe67f8feb4,451621198,0,0x0,8
tick,0x7ffe67f8feb4,451636410,0,0x0,8
tick,0x7ffe67f8feb4,451652405,0,0x0,8
tick,0x7ffe67f8feb4,451668445,0,0x0,8
tick,0x7ffe67f8feb4,451684373,0,0x0,8
tick,0x7ffe67f8feb4,451700478,0,0x0,8
tick,0x7ffe67f8feb4,451716335,0,0x0,8
tick,0x7ffe67f8feb4,451732350,0,0x0,8
tick,0x7ffe67f8feb4,451748381,0,0x0,8
tick,0x7ffe67f8feb4,451777215,0,0x0,8
tick,0x7ffe67f8feb4,451781487,0,0x0,8
tick,0x7ffe67f8feb4,451799109,0,0x0,8
tick,0x7ffe67f8feb4,451812223,0,0x0,8
tick,0x7ffe67f8feb4,451828214,0,0x0,8
tick,0x7ffe67f8feb4,451844248,0,0x0,8
tick,0x7ffe67f8feb4,451860237,0,0x0,8
tick,0x7ffe67f8feb4,451876252,0,0x0,8
tick,0x7ffe67f8feb4,451891473,0,0x0,8
tick,0x7ffe67f8feb4,451908066,0,0x0,8
tick,0x7ffe67f8feb4,451922200,0,0x0,8
tick,0x7ffe67f8feb4,451938138,0,0x0,8
tick,0x7ffe67f8feb4,451953271,0,0x0,8
tick,0x7ffe67f8feb4,451969302,0,0x0,8
tick,0x7ffe67f8feb4,451986005,0,0x0,8
tick,0x7ffe67f8feb4,452000859,0,0x0,8
tick,0x7ffe67f8feb4,452017839,0,0x0,8
tick,0x7ffe67f8feb4,452033543,0,0x0,8
tick,0x7ffe67f8feb4,452050777,0,0x0,8
tick,0x7ffe67f8feb4,452066247,0,0x0,8
tick,0x7ffe67f8feb4,452079731,0,0x0,8
tick,0x7ffe67f8feb4,452095769,0,0x0,8
tick,0x7ffe67f8feb4,452110960,0,0x0,8
tick,0x7ffe67f8feb4,452126325,0,0x0,8
tick,0x7ffe67f8feb4,452141572,0,0x0,8
tick,0x7ffe67f8feb4,452157176,0,0x0,8
tick,0x7ffe67f8feb4,452172314,0,0x0,8
tick,0x7ffe67f8feb4,452188029,0,0x0,8
tick,0x7ffe67f8feb4,452203995,0,0x0,8
tick,0x7ffe67f8feb4,452220005,0,0x0,8
tick,0x7ffe67f8feb4,452236000,0,0x0,8
tick,0x7ffe67f8feb4,452252345,0,0x0,8
tick,0x7ffe67f8feb4,452267978,0,0x0,8
tick,0x7ffe67f8feb4,452283745,0,0x0,8
tick,0x7ffe67f8feb4,452298836,0,0x0,8
tick,0x7ffe67f8feb4,452316251,0,0x0,8
tick,0x7ffe67f8feb4,452329342,0,0x0,8
tick,0x7ffe67f8feb4,452344676,0,0x0,8
tick,0x7ffe67f8feb4,452360162,0,0x0,8
tick,0x7ffe67f8feb4,452375192,0,0x0,8
tick,0x7ffe67f8feb4,452390131,0,0x0,8
tick,0x7ffe67f8feb4,452405383,0,0x0,8
tick,0x7ffe67f8feb4,452421334,0,0x0,8
tick,0x7ffe67f8feb4,452437380,0,0x0,8
tick,0x7ffe67f8feb4,452453593,0,0x0,8
tick,0x7ffe67f8feb4,452469317,0,0x0,8
tick,0x7ffe67f8feb4,452485332,0,0x0,8
tick,0x7ffe67f8feb4,452500568,0,0x0,8
tick,0x7ffe67f8feb4,452516125,0,0x0,8
tick,0x7ffe67f8feb4,452531651,0,0x0,8
tick,0x7ffe67f8feb4,452547415,0,0x0,8
tick,0x7ffe67f8feb4,452562316,0,0x0,8
tick,0x7ffe67f8feb4,452578431,0,0x0,8
tick,0x7ffe67f8feb4,452594423,0,0x0,8
tick,0x7ffe67f8feb4,452610332,0,0x0,8
tick,0x7ffe67f8feb4,452625358,0,0x0,8
tick,0x7ffe67f8feb4,452640097,0,0x0,8
tick,0x7ffe67f8feb4,452655954,0,0x0,8
tick,0x7ffe67f8feb4,452671344,0,0x0,8
tick,0x7ffe67f8feb4,452686822,0,0x0,8
tick,0x7ffe67f8feb4,452701469,0,0x0,8
tick,0x7ffe67f8feb4,452716803,0,0x0,8
tick,0x7ffe67f8feb4,452732803,0,0x0,8
tick,0x7ffe67f8feb4,452748831,0,0x0,8
tick,0x7ffe67f8feb4,452764258,0,0x0,8
tick,0x7ffe67f8feb4,452780228,0,0x0,8
tick,0x7ffe67f8feb4,452795404,0,0x0,8
tick,0x7ffe67f8feb4,452811383,0,0x0,8
tick,0x7ffe67f8feb4,452827416,0,0x0,8
tick,0x7ffe67f8feb4,452843379,0,0x0,8
tick,0x7ffe67f8feb4,452858917,0,0x0,8
tick,0x7ffe67f8feb4,452874397,0,0x0,8
tick,0x7ffe67f8feb4,452890412,0,0x0,8
tick,0x7ffe67f8feb4,452906456,0,0x0,8
tick,0x7ffe67f8feb4,452921467,0,0x0,8
tick,0x7ffe67f8feb4,452937436,0,0x0,8
tick,0x7ffe67f8feb4,452953442,0,0x0,8
tick,0x7ffe67f8feb4,452968730,0,0x0,8
tick,0x7ffe67f8feb4,452984494,0,0x0,8
tick,0x7ffe67f8feb4,453000940,0,0x0,8
tick,0x7ffe67f8feb4,453016512,0,0x0,8
tick,0x7ffe67f8feb4,453032653,0,0x0,8
tick,0x7ffe67f8feb4,453048992,0,0x0,8
tick,0x7ffe67f8feb4,453064096,0,0x0,8
tick,0x7ffe67f8feb4,453080137,0,0x0,8
tick,0x7ffe67f8feb4,453095130,0,0x0,8
tick,0x7ffe67f8feb4,453111138,0,0x0,8
tick,0x7ffe67f8feb4,453126255,0,0x0,8
tick,0x7ffe67f8feb4,453141662,0,0x0,8
tick,0x7ffe67f8feb4,453157738,0,0x0,8
tick,0x7ffe67f8feb4,453172685,0,0x0,8
tick,0x7ffe67f8feb4,453188724,0,0x0,8
tick,0x7ffe67f8feb4,453204704,0,0x0,8
tick,0x7ffe67f8feb4,453220700,0,0x0,8
tick,0x7ffe67f8feb4,453236701,0,0x0,8
tick,0x7ffe67f8feb4,453252762,0,0x0,8
tick,0x7ffe67f8feb4,453268665,0,0x0,8
tick,0x7ffe67f8feb4,453284651,0,0x0,8
tick,0x7ffe67f8feb4,453300650,0,0x0,8
tick,0x7ffe67f8feb4,453316670,0,0x0,8
tick,0x7ffe67f8feb4,453332693,0,0x0,8
tick,0x7ffe67f8feb4,453348676,0,0x0,8
tick,0x7ffe67f8feb4,453365024,0,0x0,8
tick,0x7ffe67f8feb4,453380161,0,0x0,8
tick,0x7ffe67f8feb4,453396151,0,0x0,8
tick,0x7ffe67f8feb4,453412167,0,0x0,8
tick,0x7ffe67f8feb4,453427122,0,0x0,8
tick,0x7ffe67f8feb4,453442162,0,0x0,8
tick,0x7ffe67f8feb4,453458185,0,0x0,8
tick,0x7ffe67f8feb4,453474217,0,0x0,8
tick,0x7ffe67f8feb4,453490121,0,0x0,8
tick,0x7ffe67f8feb4,453506144,0,0x0,8
tick,0x7ffe67f8feb4,453522126,0,0x0,8
tick,0x7ffe67f8feb4,453539608,0,0x0,8
tick,0x7ffe67f8feb4,453553158,0,0x0,8
tick,0x7ffe67f8feb4,453569147,0,0x0,8
tick,0x7ffe67f8feb4,453584986,0,0x0,8
tick,0x7ffe67f8feb4,453600025,0,0x0,8
tick,0x7ffe67f8feb4,453616094,0,0x0,8
tick,0x7ffe67f8feb4,453631139,0,0x0,8
tick,0x7ffe67f8feb4,453646286,0,0x0,8
tick,0x7ffe67f8feb4,453661993,0,0x0,8
tick,0x7ffe67f8feb4,453677018,0,0x0,8
tick,0x7ffe67f8feb4,453692008,0,0x0,8
tick,0x7ffe67f8feb4,453707966,0,0x0,8
tick,0x7ffe67f8feb4,453723529,0,0x0,8
tick,0x7ffe67f8feb4,453738995,0,0x0,8
tick,0x7ffe67f8feb4,453754513,0,0x0,8
tick,0x7ffe67f8feb4,453770399,0,0x0,8
tick,0x7ffe67f8feb4,453785530,0,0x0,8
tick,0x7ffe67f8feb4,453801068,0,0x0,8
tick,0x7ffe67f8feb4,453816362,0,0x0,8
tick,0x7ffe67f8feb4,453832400,0,0x0,8
tick,0x7ffe67f8feb4,453846997,0,0x0,8
tick,0x7ffe67f8feb4,453862653,0,0x0,8
tick,0x7ffe67f8feb4,453877987,0,0x0,8
tick,0x7ffe67f8feb4,453893371,0,0x0,8
tick,0x7ffe67f8feb4,453908594,0,0x0,8
tick,0x7ffe67f8feb4,453924544,0,0x0,8
tick,0x7ffe67f8feb4,453940145,0,0x0,8
tick,0x7ffe67f8feb4,453955265,0,0x0,8
tick,0x7ffe67f8feb4,453970569,0,0x0,8
tick,0x7ffe67f8feb4,453986619,0,0x0,8
tick,0x7ffe67f8feb4,454002004,0,0x0,8
tick,0x7ffe67f8feb4,454017200,0,0x0,8
tick,0x7ffe67f8feb4,454033194,0,0x0,8
tick,0x7ffe67f8feb4,454049457,0,0x0,8
tick,0x7ffe67f8feb4,454064643,0,0x0,8
tick,0x7ffe67f8feb4,454080150,0,0x0,8
tick,0x7ffe67f8feb4,454096017,0,0x0,8
tick,0x7ffe67f8feb4,454111130,0,0x0,8
tick,0x7ffe67f8feb4,454126352,0,0x0,8
tick,0x7ffe67f8feb4,454142008,0,0x0,8
tick,0x7ffe67f8feb4,454157971,0,0x0,8
tick,0x7ffe67f8feb4,454173090,0,0x0,8
tick,0x7ffe67f8feb4,454188606,0,0x0,8
tick,0x7ffe67f8feb4,454204094,0,0x0,8
tick,0x7ffe67f8feb4,454220114,0,0x0,8
tick,0x7ffe67f8feb4,454236253,0,0x0,8
tick,0x7ffe67f8feb4,454252151,0,0x0,8
tick,0x7ffe67f8feb4,454267623,0,0x0,8
tick,0x7ffe67f8feb4,454283636,0,0x0,8
tick,0x7ffe67f8feb4,454299084,0,0x0,8
tick,0x7ffe67f8feb4,454314136,0,0x0,8
tick,0x7ffe67f8feb4,454330186,0,0x0,8
tick,0x7ffe67f8feb4,454345075,0,0x0,8
tick,0x7ffe67f8feb4,454360539,0,0x0,8
tick,0x7ffe67f8feb4,454376322,0,0x0,8
tick,0x7ffe67f8feb4,454392197,0,0x0,8
tick,0x7ffe67f8feb4,454407987,0,0x0,8
tick,0x7ffe67f8feb4,454423162,0,0x0,8
tick,0x7ffe67f8feb4,454439145,0,0x0,8
tick,0x7ffe67f8feb4,454454129,0,0x0,8
tick,0x7ffe67f8feb4,454470124,0,0x0,8
tick,0x7ffe67f8feb4,454486133,0,0x0,8
tick,0x7ffe67f8feb4,454502336,0,0x0,8
tick,0x7ffe67f8feb4,454518224,0,0x0,8
tick,0x7ffe67f8feb4,454533154,0,0x0,8
tick,0x7ffe67f8feb4,454549190,0,0x0,8
tick,0x7ffe67f8feb4,454564409,0,0x0,8
tick,0x7ffe67f8feb4,454579397,0,0x0,8
tick,0x7ffe67f8feb4,454595121,0,0x0,8
tick,0x7ffe67f8feb4,454611112,0,0x0,8
tick,0x7ffe67f8feb4,454626641,0,0x0,8
tick,0x7ffe67f8feb4,454642653,0,0x0,8
tick,0x7ffe67f8feb4,454658696,0,0x0,8
tick,0x7ffe67f8feb4,454673666,0,0x0,8
tick,0x7ffe67f8feb4,454689705,0,0x0,8
tick,0x7ffe67f8feb4,454705042,0,0x0,8
tick,0x7ffe67f8feb4,454720117,0,0x0,8
tick,0x7ffe67f8feb4,454735699,0,0x0,8
tick,0x7ffe67f8feb4,454751708,0,0x0,8
tick,0x7ffe67f8feb4,454767700,0,0x0,8
tick,0x7ffe67f8feb4,454784111,0,0x0,8
tick,0x7ffe67f8feb4,454799838,0,0x0,8
tick,0x7ffe67f8feb4,454814698,0,0x0,8
tick,0x7ffe67f8feb4,454830139,0,0x0,8
tick,0x7ffe67f8feb4,454845751,0,0x0,8
tick,0x7ffe67f8feb4,454861522,0,0x0,8
tick,0x7ffe67f8feb4,454876718,0,0x0,8
tick,0x7ffe67f8feb4,454891982,0,0x0,8
tick,0x7ffe67f8feb4,454907792,0,0x0,8
tick,0x7ffe67f8feb4,454923694,0,0x0,8
tick,0x7ffe67f8feb4,454939750,0,0x0,8
tick,0x7ffe67f8feb4,454955703,0,0x0,8
tick,0x7ffe67f8feb4,454971707,0,0x0,8
tick,0x7ffe67f8feb4,454987721,0,0x0,8
tick,0x7ffe67f8feb4,455003710,0,0x0,8
tick,0x7ffe67f8feb4,455019726,0,0x0,8
tick,0x7ffe67f8feb4,455035716,0,0x0,8
tick,0x7ffe67f8feb4,455051733,0,0x0,8
tick,0x7ffe67f8feb4,455067740,0,0x0,8
tick,0x7ffe67f8feb4,455084068,0,0x0,8
tick,0x7ffe67f8feb4,455099129,0,0x0,8
tick,0x7ffe67f8feb4,455114727,0,0x0,8
tick,0x7ffe67f8feb4,455130721,0,0x0,8
tick,0x7ffe67f8feb4,455146736,0,0x0,8
tick,0x7ffe67f8feb4,455162726,0,0x0,8
tick,0x7ffe67f8feb4,455178738,0,0x0,8
tick,0x7ffe67f8feb4,455194751,0,0x0,8
tick,0x7ffe67f8feb4,455209764,0,0x0,8
tick,0x7ffe67f8feb4,455225328,0,0x0,8
tick,0x7ffe67f8feb4,455241278,0,0x0,8
tick,0x7ffe67f8feb4,455256701,0,0x0,8
tick,0x7ffe67f8feb4,455271988,0,0x0,8
tick,0x7ffe67f8feb4,455287788,0,0x0,8
tick,0x7ffe67f8feb4,455303213,0,0x0,8
tick,0x7ffe67f8feb4,455318790,0,0x0,8
tick,0x7ffe67f8feb4,455334300,0,0x0,8
tick,0x7ffe67f8feb4,455349738,0,0x0,8
tick,0x7ffe67f8feb4,455365298,0,0x0,8
tick,0x7ffe67f8feb4,455380981,0,0x0,8
tick,0x7ffe67f8feb4,455396331,0,0x0,8
tick,0x7ffe67f8feb4,455412146,0,0x0,8
tick,0x7ffe67f8feb4,455427766,0,0x0,8
tick,0x7ffe67f8feb4,455443780,0,0x0,8
tick,0x7ffe67f8feb4,455459778,0,0x0,8
tick,0x7ffe67f8feb4,455474751,0,0x0,8
tick,0x7ffe67f8feb4,455490930,0,0x0,8
tick,0x7ffe67f8feb4,455505776,0,0x0,8
tick,0x7ffe67f8feb4,455521781,0,0x0,8
tick,0x7ffe67f8feb4,455536765,0,0x0,8
tick,0x7ffe67f8feb4,455552775,0,0x0,8
tick,0x7ffe67f8feb4,455568762,0,0x0,8
tick,0x7ffe67f8feb4,455584755,0,0x0,8
tick,0x7ffe67f8feb4,455600498,0,0x0,8
tick,0x7ffe67f8feb4,455615243,0,0x0,8
tick,0x7ffe67f8feb4,455631230,0,0x0,8
tick,0x7ffe67f8feb4,455646313,0,0x0,8
tick,0x7ffe67f8feb4,455662141,0,0x0,8
tick,0x7ffe67f8feb4,455678084,0,0x0,8
tick,0x7ffe67f8feb4,455694044,0,0x0,8
tick,0x7ffe67f8feb4,455710171,0,0x0,8
tick,0x7ffe67f8feb4,455726063,0,0x0,8
tick,0x7ffe67f8feb4,455741287,0,0x0,8
tick,0x7ffe67f8feb4,455756587,0,0x0,8
tick,0x7ffe67f8feb4,455771721,0,0x0,8
tick,0x7ffe67f8feb4,455787825,0,0x0,8
tick,0x7ffe67f8feb4,455802813,0,0x0,8
tick,0x7ffe67f8feb4,455818500,0,0x0,8
tick,0x7ffe67f8feb4,455834570,0,0x0,8
tick,0x7ffe67f8feb4,455849963,0,0x0,8
tick,0x7ffe67f8feb4,455865376,0,0x0,8
tick,0x7ffe67f8feb4,455881303,0,0x0,8
tick,0x7ffe67f8feb4,455896812,0,0x0,8
tick,0x7ffe67f8feb4,455912920,0,0x0,8
tick,0x7ffe67f8feb4,455930036,0,0x0,8
tick,0x7ffe67f8feb4,455943832,0,0x0,8
tick,0x7ffe67f8feb4,455958921,0,0x0,8
tick,0x7ffe67f8feb4,455975007,0,0x0,8
tick,0x7ffe67f8feb4,455990347,0,0x0,8
tick,0x7ffe67f8feb4,456006191,0,0x0,8
tick,0x7ffe67f8feb4,456021757,0,0x0,8
tick,0x7ffe67f8feb4,456037979,0,0x0,8
tick,0x7ffe67f8feb4,456053895,0,0x0,8
tick,0x7ffe67f8feb4,456069975,0,0x0,8
tick,0x7ffe67f8feb4,456086187,0,0x0,8
tick,0x7ffe67f8feb4,456101853,0,0x0,8
tick,0x7ffe67f8feb4,456118008,0,0x0,8
tick,0x7ffe67f8feb4,456133768,0,0x0,8
tick,0x7ffe67f8feb4,456149122,0,0x0,8
tick,0x7ffe67f8feb4,456165298,0,0x0,8
tick,0x7ffe67f8feb4,456181157,0,0x0,8
tick,0x7ffe67f8feb4,456196850,0,0x0,8
tick,0x7ffe67f8feb4,456212029,0,0x0,8
tick,0x7ffe67f8feb4,456227951,0,0x0,8
tick,0x7ffe67f8feb4,456243876,0,0x0,8
tick,0x7ffe67f8feb4,456259115,0,0x0,8
tick,0x7ffe67f8feb4,456274904,0,0x0,8
tick,0x7ffe67f8feb4,456290917,0,0x0,8
tick,0x7ffe67f8feb4,456306387,0,0x0,8
tick,0x7ffe67f8feb4,456320978,0,0x0,8
tick,0x7ffe67f8feb4,456336991,0,0x0,8
tick,0x7ffe67f8feb4,456353252,0,0x0,8
tick,0x7ffe67f8feb4,456369056,0,0x0,8
tick,0x7ffe67f8feb4,456385042,0,0x0,8
tick,0x7ffe67f8feb4,456400237,0,0x0,8
tick,0x7ffe67f8feb4,456415587,0,0x0,8
tick,0x7ffe67f8feb4,456430487,0,0x0,8
tick,0x7ffe67f8feb4,456446469,0,0x0,8
tick,0x7ffe67f8feb4,456462466,0,0x0,8
tick,0x7ffe67f8feb4,456478505,0,0x0,8
tick,0x7ffe67f8feb4,456494556,0,0x0,8
tick,0x7ffe67f8feb4,456510115,0,0x0,8
tick,0x7ffe67f8feb4,456525851,0,0x0,8
tick,0x7ffe67f8feb4,456541777,0,0x0,8
tick,0x7ffe67f8feb4,456556950,0,0x0,8
tick,0x7ffe67f8feb4,456572754,0,0x0,8
tick,0x7ffe67f8feb4,456588053,0,0x0,8
tick,0x7ffe67f8feb4,456604003,0,0x0,8
tick,0x7ffe67f8feb4,456620023,0,0x0,8
tick,0x7ffe67f8feb4,456636076,0,0x0,8
tick,0x7ffe67f8feb4,456652015,0,0x0,8
tick,0x7ffe67f8feb4,456667999,0,0x0,8
tick,0x7ffe67f8feb4,456684122,0,0x0,8
tick,0x7ffe67f8feb4,456699988,0,0x0,8
tick,0x7ffe67f8feb4,456716116,0,0x0,8
tick,0x7ffe67f8feb4,456732261,0,0x0,8
tick,0x7ffe67f8feb4,456748242,0,0x0,8
tick,0x7ffe67f8feb4,456764119,0,0x0,8
tick,0x7ffe67f8feb4,456780215,0,0x0,8
tick,0x7ffe67f8feb4,456795373,0,0x0,8
tick,0x7ffe67f8feb4,456811118,0,0x0,8
tick,0x7ffe67f8feb4,456826433,0,0x0,8
tick,0x7ffe67f8feb4,456842057,0,0x0,8
tick,0x7ffe67f8feb4,456857834,0,0x0,8
tick,0x7ffe67f8feb4,456873335,0,0x0,8
tick,0x7ffe67f8feb4,456888712,0,0x0,8
tick,0x7ffe67f8feb4,456904696,0,0x0,8
tick,0x7ffe67f8feb4,456920096,0,0x0,8
tick,0x7ffe67f8feb4,456936147,0,0x0,8
tick,0x7ffe67f8feb4,456952032,0,0x0,8
tick,0x7ffe67f8feb4,456967020,0,0x0,8
tick,0x7ffe67f8feb4,456982996,0,0x0,8
tick,0x7ffe67f8feb4,456998952,0,0x0,8
tick,0x7ffe67f8feb4,457014027,0,0x0,8
tick,0x7ffe67f8feb4,457030102,0,0x0,8
tick,0x7ffe67f8feb4,457046018,0,0x0,8
tick,0x7ffe67f8feb4,457061823,0,0x0,8
tick,0x7ffe67f8feb4,457076965,0,0x0,8
tick,0x7ffe67f8feb4,457093008,0,0x0,8
tick,0x7ffe67f8feb4,457109008,0,0x0,8
tick,0x7ffe67f8feb4,457125114,0,0x0,8
tick,0x7ffe67f8feb4,457140237,0,0x0,8
tick,0x7ffe67f8feb4,457156007,0,0x0,8
tick,0x7ffe67f8feb4,457171891,0,0x0,8
tick,0x7ffe67f8feb4,457187971,0,0x0,8
tick,0x7ffe67f8feb4,457203989,0,0x0,8
tick,0x7ffe67f8feb4,457219981,0,0x0,8
tick,0x7ffe67f8feb4,457236115,0,0x0,8
tick,0x7ffe67f8feb4,457251933,0,0x0,8
tick,0x7ffe67f8feb4,457267033,0,0x0,8
tick,0x7ffe67f8feb4,457282269,0,0x0,8
tick,0x7ffe67f8feb4,457297598,0,0x0,8
tick,0x7ffe67f8feb4,457313054,0,0x0,8
tick,0x7ffe67f8feb4,457328967,0,0x0,8
tick,0x7ffe67f8feb4,457344252,0,0x0,8
tick,0x7ffe67f8feb4,457359952,0,0x0,8
tick,0x7ffe67f8feb4,457376079,0,0x0,8
tick,0x7ffe67f8feb4,457391217,0,0x0,8
tick,0x7ffe67f8feb4,457406993,0,0x0,8
tick,0x7ffe67f8feb4,457422693,0,0x0,8
tick,0x7ffe67f8feb4,457437982,0,0x0,8
tick,0x7ffe67f8feb4,457453956,0,0x0,8
tick,0x7ffe67f8feb4,457469965,0,0x0,8
tick,0x7ffe67f8feb4,457486033,0,0x0,8
tick,0x7ffe67f8feb4,457501002,0,0x0,8
tick,0x7ffe67f8feb4,457516960,0,0x0,8
tick,0x7ffe67f8feb4,457531973,0,0x0,8
tick,0x7ffe67f8feb4,457547144,0,0x0,8
tick,0x7ffe67f8feb4,457563060,0,0x0,8
tick,0x7ffe67f8feb4,457578965,0,0x0,8
tick,0x7ffe67f8feb4,457595076,0,0x0,8
tick,0x7ffe67f8feb4,457611075,0,0x0,8
tick,0x7ffe67f8feb4,457627100,0,0x0,8
tick,0x7ffe67f8feb4,457643086,0,0x0,8
tick,0x7ffe67f8feb4,457659084,0,0x0,8
tick,0x7ffe67f8feb4,457675088,0,0x0,8
tick,0x7ffe67f8feb4,457691170,0,0x0,8
tick,0x7ffe67f8feb4,457707027,0,0x0,8
tick,0x7ffe67f8feb4,457722182,0,0x0,8
tick,0x7ffe67f8feb4,457738319,0,0x0,8
tick,0x7ffe67f8feb4,457753498,0,0x0,8
tick,0x7ffe67f8feb4,457770292,0,0x0,8
tick,0x7ffe67f8feb4,457786406,0,0x0,8
tick,0x7ffe67f8feb4,457801395,0,0x0,8
tick,0x7ffe67f8feb4,457817419,0,0x0,8
tick,0x7ffe67f8feb4,457833424,0,0x0,8
tick,0x7ffe67f8feb4,457849416,0,0x0,8
tick,0x7ffe67f8feb4,457864742,0,0x0,8
tick,0x7ffe67f8feb4,457880136,0,0x0,8
tick,0x7ffe67f8feb4,457896137,0,0x0,8
tick,0x7ffe67f8feb4,457911983,0,0x0,8
tick,0x7ffe67f8feb4,457927994,0,0x0,8
tick,0x7ffe67f8feb4,457943261,0,0x0,8
tick,0x7ffe67f8feb4,457958962,0,0x0,8
tick,0x7ffe67f8feb4,457974697,0,0x0,8
tick,0x7ffe67f8feb4,457990867,0,0x0,8
tick,0x7ffe67f8feb4,458006528,0,0x0,8
tick,0x7ffe67f8feb4,458022132,0,0x0,8
tick,0x7ffe67f8feb4,458038340,0,0x0,8
tick,0x7ffe67f8feb4,458054242,0,0x0,8
tick,0x7ffe67f8feb4,458070002,0,0x0,8
tick,0x7ffe67f8feb4,458086231,0,0x0,8
tick,0x7ffe67f8feb4,458101166,0,0x0,8
tick,0x7ffe67f8feb4,458116979,0,0x0,8
tick,0x7ffe67f8feb4,458132196,0,0x0,8
tick,0x7ffe67f8feb4,458148035,0,0x0,8
tick,0x7ffe67f8feb4,458163161,0,0x0,8
tick,0x7ffe67f8feb4,458178966,0,0x0,8
tick,0x7ffe67f8feb4,458194206,0,0x0,8
tick,0x7ffe67f8feb4,458210130,0,0x0,8
tick,0x7ffe67f8feb4,458225507,0,0x0,8
tick,0x7ffe67f8feb4,458241195,0,0x0,8
tick,0x7ffe67f8feb4,458257203,0,0x0,8
tick,0x7ffe67f8feb4,458273175,0,0x0,8
tick,0x7ffe67f8feb4,458289291,0,0x0,8
tick,0x7ffe67f8feb4,458305198,0,0x0,8
tick,0x7ffe67f8feb4,458321191,0,0x0,8
tick,0x7ffe67f8feb4,458337312,0,0x0,8
tick,0x7ffe67f8feb4,458352883,0,0x0,8
tick,0x7ffe67f8feb4,458367961,0,0x0,8
tick,0x7ffe67f8feb4,458383136,0,0x0,8
tick,0x7ffe67f8feb4,458399049,0,0x0,8
tick,0x7ffe67f8feb4,458414661,0,0x0,8
tick,0x7ffe67f8feb4,458430197,0,0x0,8
tick,0x7ffe67f8feb4,458445702,0,0x0,8
tick,0x7ffe67f8feb4,458461668,0,0x0,8
tick,0x7ffe67f8feb4,458477654,0,0x0,8
tick,0x7ffe67f8feb4,458493677,0,0x0,8
tick,0x7ffe67f8feb4,458509119,0,0x0,8
tick,0x7ffe67f8feb4,458524787,0,0x0,8
tick,0x7ffe67f8feb4,458540230,0,0x0,8
tick,0x7ffe67f8feb4,458556265,0,0x0,8
tick,0x7ffe67f8feb4,458572243,0,0x0,8
tick,0x7ffe67f8feb4,458588235,0,0x0,8
tick,0x7ffe67f8feb4,458604260,0,0x0,8
tick,0x7ffe67f8feb4,458619754,0,0x0,8
tick,0x7ffe67f8feb4,458635144,0,0x0,8
tick,0x7ffe67f8feb4,458651120,0,0x0,8
tick,0x7ffe67f8feb4,458667019,0,0x0,8
tick,0x7ffe67f8feb4,458682674,0,0x0,8
tick,0x7ffe67f8feb4,458697782,0,0x0,8
tick,0x7ffe67f8feb4,458713643,0,0x0,8
tick,0x7ffe67f8feb4,458729590,0,0x0,8
tick,0x7ffe67f8feb4,458745383,0,0x0,8
tick,0x7ffe67f8feb4,458760213,0,0x0,8
tick,0x7ffe67f8feb4,458776498,0,0x0,8
tick,0x7ffe67f8feb4,458791709,0,0x0,8
tick,0x7ffe67f8feb4,458806992,0,0x0,8
tick,0x7ffe67f8feb4,458822129,0,0x0,8
tick,0x7ffe67f8feb4,458837833,0,0x0,8
tick,0x7ffe67f8feb4,458853271,0,0x0,8
tick,0x7ffe67f8feb4,458868574,0,0x0,8
tick,0x7ffe67f8feb4,458883795,0,0x0,8
tick,0x7ffe67f8feb4,458898964,0,0x0,8
tick,0x7ffe67f8feb4,458913991,0,0x0,8
tick,0x7ffe67f8feb4,458929968,0,0x0,8
tick,0x7ffe67f8feb4,458945071,0,0x0,8
tick,0x7ffe67f8feb4,458961395,0,0x0,8
tick,0x7ffe67f8feb4,458976944,0,0x0,8
tick,0x7ffe67f8feb4,458992959,0,0x0,8
tick,0x7ffe67f8feb4,459008949,0,0x0,8
tick,0x7ffe67f8feb4,459024974,0,0x0,8
tick,0x7ffe67f8feb4,459041052,0,0x0,8
tick,0x7ffe67f8feb4,459056978,0,0x0,8
tick,0x7ffe67f8feb4,459071998,0,0x0,8
tick,0x7ffe67f8feb4,459088022,0,0x0,8
tick,0x7ffe67f8feb4,459103700,0,0x0,8
tick,0x7ffe67f8feb4,459118966,0,0x0,8
tick,0x7ffe67f8feb4,459135052,0,0x0,8
tick,0x7ffe67f8feb4,459150041,0,0x0,8
tick,0x7ffe67f8feb4,459165990,0,0x0,8
tick,0x7ffe67f8feb4,459182123,0,0x0,8
tick,0x7ffe67f8feb4,459198079,0,0x0,8
tick,0x7ffe67f8feb4,459213996,0,0x0,8
tick,0x7ffe67f8feb4,459229979,0,0x0,8
tick,0x7ffe67f8feb4,459245105,0,0x0,8
tick,0x7ffe67f8feb4,459260821,0,0x0,8
tick,0x7ffe67f8feb4,459276862,0,0x0,8
tick,0x7ffe67f8feb4,459292118,0,0x0,8
tick,0x7ffe67f8feb4,459307852,0,0x0,8
tick,0x7ffe67f8feb4,459323614,0,0x0,8
tick,0x7ffe67f8feb4,459338876,0,0x0,8
tick,0x7ffe67f8feb4,459354350,0,0x0,8
tick,0x7ffe67f8feb4,459370137,0,0x0,8
tick,0x7ffe67f8feb4,459385395,0,0x0,8
tick,0x7ffe67f8feb4,459401387,0,0x0,8
tick,0x7ffe67f8feb4,459417851,0,0x0,8
tick,0x7ffe67f8feb4,459433362,0,0x0,8
tick,0x7ffe67f8feb4,459449445,0,0x0,8
tick,0x7ffe67f8feb4,459465407,0,0x0,8
tick,0x7ffe67f8feb4,459481372,0,0x0,8
tick,0x7ffe67f8feb4,459497393,0,0x0,8
tick,0x7ffe67f8feb4,459513372,0,0x0,8
tick,0x7ffe67f8feb4,459529432,0,0x0,8
tick,0x7ffe67f8feb4,459545315,0,0x0,8
tick,0x7ffe67f8feb4,459561288,0,0x0,8
tick,0x7ffe67f8feb4,459576393,0,0x0,8
tick,0x7ffe67f8feb4,459592404,0,0x0,8
tick,0x7ffe67f8feb4,459608422,0,0x0,8
tick,0x7ffe67f8feb4,459624418,0,0x0,8
tick,0x7ffe67f8feb4,459640391,0,0x0,8
tick,0x7ffe67f8feb4,459656405,0,0x0,8
tick,0x7ffe67f8feb4,459672418,0,0x0,8
tick,0x7ffe67f8feb4,459688410,0,0x0,8
tick,0x7ffe67f8feb4,459704422,0,0x0,8
tick,0x7ffe67f8feb4,459720395,0,0x0,8
tick,0x7ffe67f8feb4,459736122,0,0x0,8
tick,0x7ffe67f8feb4,459752200,0,0x0,8
tick,0x7ffe67f8feb4,459768059,0,0x0,8
tick,0x7ffe67f8feb4,459783557,0,0x0,8
tick,0x7ffe67f8feb4,459799373,0,0x0,8
tick,0x7ffe67f8feb4,459815184,0,0x0,8
tick,0x7ffe67f8feb4,459830386,0,0x0,8
tick,0x7ffe67f8feb4,459845590,0,0x0,8
tick,0x7ffe67f8feb4,459861239,0,0x0,8
tick,0x7ffe67f8feb4,459876919,0,0x0,8
tick,0x7ffe67f8feb4,459892259,0,0x0,8
tick,0x7ffe67f8feb4,459907748,0,0x0,8
tick,0x7ffe67f8feb4,459922729,0,0x0,8
tick,0x7ffe67f8feb4,459938366,0,0x0,8
tick,0x7ffe67f8feb4,459953607,0,0x0,8
tick,0x7ffe67f8feb4,459968676,0,0x0,8
tick,0x7ffe67f8feb4,459984065,0,0x0,8
tick,0x7ffe67f8feb4,460000146,0,0x0,8
tick,0x7ffe67f8feb4,460015512,0,0x0,8
tick,0x7ffe67f8feb4,460031147,0,0x0,8
tick,0x7ffe67f8feb4,460046458,0,0x0,8
tick,0x7ffe67f8feb4,460061959,0,0x0,8
tick,0x7ffe67f8feb4,460077488,0,0x0,8
tick,0x7ffe67f8feb4,460093476,0,0x0,8
tick,0x7ffe67f8feb4,460109147,0,0x0,8
tick,0x7ffe67f8feb4,460124483,0,0x0,8
tick,0x7ffe67f8feb4,460139559,0,0x0,8
tick,0x7ffe67f8feb4,460155542,0,0x0,8
tick,0x7ffe67f8feb4,460171593,0,0x0,8
tick,0x7ffe67f8feb4,460187491,0,0x0,8
tick,0x7ffe67f8feb4,460203485,0,0x0,8
tick,0x7ffe67f8feb4,460219170,0,0x0,8
tick,0x7ffe67f8feb4,460235281,0,0x0,8
tick,0x7ffe67f8feb4,460250186,0,0x0,8
tick,0x7ffe67f8feb4,460265887,0,0x0,8
tick,0x7ffe67f8feb4,460281218,0,0x0,8
tick,0x7ffe67f8feb4,460296536,0,0x0,8
tick,0x7ffe67f8feb4,460312002,0,0x0,8
tick,0x7ffe67f8feb4,460327829,0,0x0,8
tick,0x7ffe67f8feb4,460343797,0,0x0,8
tick,0x7ffe67f8feb4,460359047,0,0x0,8
tick,0x7ffe67f8feb4,460374407,0,0x0,8
tick,0x7ffe67f8feb4,460390089,0,0x0,8
tick,0x7ffe67f8feb4,460406155,0,0x0,8
tick,0x7ffe67f8feb4,460421739,0,0x0,8
tick,0x7ffe67f8feb4,460437602,0,0x0,8
tick,0x7ffe67f8feb4,460453289,0,0x0,8
tick,0x7ffe67f8feb4,460469055,0,0x0,8
tick,0x7ffe67f8feb4,460485299,0,0x0,8
tick,0x7ffe67f8feb4,460501051,0,0x0,8
tick,0x7ffe67f8feb4,460517045,0,0x0,8
tick,0x7ffe67f8feb4,460532205,0,0x0,8
tick,0x7ffe67f8feb4,460548155,0,0x0,8
tick,0x7ffe67f8feb4,460563444,0,0x0,8
tick,0x7ffe67f8feb4,460578993,0,0x0,8
tick,0x7ffe67f8feb4,460594588,0,0x0,8
tick,0x7ffe67f8feb4,460610133,0,0x0,8
tick,0x7ffe67f8feb4,460626424,0,0x0,8
tick,0x7ffe67f8feb4,460641664,0,0x0,8
tick,0x7ffe67f8feb4,460657683,0,0x0,8
tick,0x7ffe67f8feb4,460673083,0,0x0,8
tick,0x7ffe67f8feb4,460688743,0,0x0,8
tick,0x7ffe67f8feb4,460704281,0,0x0,8
tick,0x7ffe67f8feb4,460719186,0,0x0,8
tick,0x7ffe67f8feb4,460734700,0,0x0,8
tick,0x7ffe67f8feb4,460750165,0,0x0,8
tick,0x7ffe67f8feb4,460765827,0,0x0,8
tick,0x7ffe67f8feb4,460781397,0,0x0,8
tick,0x7ffe67f8feb4,460797301,0,0x0,8
tick,0x7ffe67f8feb4,460813414,0,0x0,8
tick,0x7ffe67f8feb4,460828754,0,0x0,8
tick,0x7ffe67f8feb4,460844132,0,0x0,8
tick,0x7ffe67f8feb4,460860077,0,0x0,8
tick,0x7ffe67f8feb4,460875906,0,0x0,8
tick,0x7ffe67f8feb4,460891052,0,0x0,8
tick,0x7ffe67f8feb4,460907064,0,0x0,8
tick,0x7ffe67f8feb4,460922526,0,0x0,8
tick,0x7ffe67f8feb4,460937633,0,0x0,8
tick,0x7ffe67f8feb4,460952503,0,0x0,8
tick,0x7ffe67f8feb4,460968553,0,0x0,8
tick,0x7ffe67f8feb4,460983775,0,0x0,8
tick,0x7ffe67f8feb4,460999160,0,0x0,8
tick,0x7ffe67f8feb4,461014630,0,0x0,8
tick,0x7ffe67f8feb4,461030226,0,0x0,8
tick,0x7ffe67f8feb4,461045929,0,0x0,8
tick,0x7ffe67f8feb4,461060868,0,0x0,8
tick,0x7ffe67f8feb4,461076089,0,0x0,8
tick,0x7ffe67f8feb4,461092123,0,0x0,8
tick,0x7ffe67f8feb4,461107483,0,0x0,8
tick,0x7ffe67f8feb4,461123057,0,0x0,8
tick,0x7ffe67f8feb4,461138458,0,0x0,8
tick,0x7ffe67f8feb4,461153591,0,0x0,8
tick,0x7ffe67f8feb4,461169076,0,0x0,8
tick,0x7ffe67f8feb4,461184322,0,0x0,8
tick,0x7ffe67f8feb4,461199126,0,0x0,8
tick,0x7ffe67f8feb4,461215614,0,0x0,8
tick,0x7ffe67f8feb4,461231155,0,0x0,8
tick,0x7ffe67f8feb4,461246340,0,0x0,8
tick,0x7ffe67f8feb4,461262600,0,0x0,8
tick,0x7ffe67f8feb4,461278467,0,0x0,8
tick,0x7ffe67f8feb4,461293800,0,0x0,8
tick,0x7ffe67f8feb4,461309150,0,0x0,8
tick,0x7ffe67f8feb4,461324776,0,0x0,8
tick,0x7ffe67f8feb4,461340731,0,0x0,8
tick,0x7ffe67f8feb4,461356704,0,0x0,8
tick,0x7ffe67f8feb4,461372431,0,0x0,8
tick,0x7ffe67f8feb4,461387820,0,0x0,8
tick,0x7ffe67f8feb4,461402494,0,0x0,8
tick,0x7ffe67f8feb4,461418428,0,0x0,8
tick,0x7ffe67f8feb4,461434426,0,0x0,8
tick,0x7ffe67f8feb4,461450425,0,0x0,8
tick,0x7ffe67f8feb4,461466457,0,0x0,8
tick,0x7ffe67f8feb4,461482424,0,0x0,8
tick,0x7ffe67f8feb4,461498432,0,0x0,8
tick,0x7ffe67f8feb4,461514435,0,0x0,8
tick,0x7ffe67f8feb4,461530461,0,0x0,8
tick,0x7ffe67f8feb4,461546447,0,0x0,8
tick,0x7ffe67f8feb4,461562248,0,0x0,8
tick,0x7ffe67f8feb4,461577471,0,0x0,8
tick,0x7ffe67f8feb4,461593579,0,0x0,8
tick,0x7ffe67f8feb4,461609141,0,0x0,8
tick,0x7ffe67f8feb4,461625169,0,0x0,8
tick,0x7ffe67f8feb4,461640330,0,0x0,8
tick,0x7ffe67f8feb4,461656294,0,0x0,8
tick,0x7ffe67f8feb4,461672139,0,0x0,8
tick,0x7ffe67f8feb4,461688102,0,0x0,8
tick,0x7ffe67f8feb4,461703329,0,0x0,8
tick,0x7ffe67f8feb4,461719187,0,0x0,8
tick,0x7ffe67f8feb4,461734321,0,0x0,8
tick,0x7ffe67f8feb4,461750251,0,0x0,8
tick,0x7ffe67f8feb4,461766281,0,0x0,8
tick,0x7ffe67f8feb4,461781234,0,0x0,8
tick,0x7ffe67f8feb4,461797293,0,0x0,8
tick,0x7ffe67f8feb4,461813149,0,0x0,8
tick,0x7ffe67f8feb4,461828736,0,0x0,8
tick,0x7ffe67f8feb4,461844362,0,0x0,8
tick,0x7ffe67f8feb4,461860025,0,0x0,8
tick,0x7ffe67f8feb4,461875292,0,0x0,8
tick,0x7ffe67f8feb4,461891317,0,0x0,8
tick,0x7ffe67f8feb4,461906801,0,0x0,8
tick,0x7ffe67f8feb4,461922446,0,0x0,8
tick,0x7ffe67f8feb4,461938446,0,0x0,8
tick,0x7ffe67f8feb4,461954711,0,0x0,8
tick,0x7ffe67f8feb4,461970057,0,0x0,8
tick,0x7ffe67f8feb4,461985534,0,0x0,8
tick,0x7ffe67f8feb4,462001418,0,0x0,8
tick,0x7ffe67f8feb4,462017396,0,0x0,8
tick,0x7ffe67f8feb4,462032177,0,0x0,8
tick,0x7ffe67f8feb4,462048165,0,0x0,8
tick,0x7ffe67f8feb4,462063705,0,0x0,8
tick,0x7ffe67f8feb4,462079811,0,0x0,8
tick,0x7ffe67f8feb4,462095458,0,0x0,8
tick,0x7ffe67f8feb4,462110912,0,0x0,8
tick,0x7ffe67f8feb4,462126626,0,0x0,8
tick,0x7ffe67f8feb4,462141823,0,0x0,8
tick,0x7ffe67f8feb4,462157739,0,0x0,8
tick,0x7ffe67f8feb4,462173818,0,0x0,8
tick,0x7ffe67f8feb4,462189177,0,0x0,8
tick,0x7ffe67f8feb4,462204828,0,0x0,8
tick,0x7ffe67f8feb4,462220859,0,0x0,8
tick,0x7ffe67f8feb4,462236849,0,0x0,8
tick,0x7ffe67f8feb4,462252756,0,0x0,8
tick,0x7ffe67f8feb4,462268823,0,0x0,8
tick,0x7ffe67f8feb4,462284859,0,0x0,8
tick,0x7ffe67f8feb4,462300880,0,0x0,8
tick,0x7ffe67f8feb4,462316844,0,0x0,8
tick,0x7ffe67f8feb4,462332850,0,0x0,8
tick,0x7ffe67f8feb4,462348838,0,0x0,8
tick,0x7ffe67f8feb4,462364833,0,0x0,8
tick,0x7ffe67f8feb4,462380875,0,0x0,8
tick,0x7ffe67f8feb4,462396841,0,0x0,8
tick,0x7ffe67f8feb4,462412810,0,0x0,8
tick,0x7ffe67f8feb4,462428830,0,0x0,8
tick,0x7ffe67f8feb4,462443914,0,0x0,8
tick,0x7ffe67f8feb4,462459903,0,0x0,8
tick,0x7ffe67f8feb4,462476066,0,0x0,8
tick,0x7ffe67f8feb4,462491955,0,0x0,8
tick,0x7ffe67f8feb4,462508265,0,0x0,8
tick,0x7ffe67f8feb4,462524313,0,0x0,8
tick,0x7ffe67f8feb4,462539931,0,0x0,8
tick,0x7ffe67f8feb4,462555918,0,0x0,8
tick,0x7ffe67f8feb4,462571992,0,0x0,8
tick,0x7ffe67f8feb4,462586933,0,0x0,8
tick,0x7ffe67f8feb4,462602161,0,0x0,8
tick,0x7ffe67f8feb4,462618307,0,0x0,8
tick,0x7ffe67f8feb4,462633904,0,0x0,8
tick,0x7ffe67f8feb4,462648997,0,0x0,8
tick,0x7ffe67f8feb4,462664898,0,0x0,8
tick,0x7ffe67f8feb4,462679869,0,0x0,8
tick,0x7ffe67f8feb4,462695896,0,0x0,8
tick,0x7ffe67f8feb4,462711597,0,0x0,8
tick,0x7ffe67f8feb4,462726851,0,0x0,8
tick,0x7ffe67f8feb4,462742863,0,0x0,8
tick,0x7ffe67f8feb4,462758501,0,0x0,8
tick,0x7ffe67f8feb4,462773595,0,0x0,8
tick,0x7ffe67f8feb4,462789519,0,0x0,8
tick,0x7ffe67f8feb4,462805523,0,0x0,8
tick,0x7ffe67f8feb4,462820872,0,0x0,8
tick,0x7ffe67f8feb4,462836165,0,0x0,8
tick,0x7ffe67f8feb4,462850870,0,0x0,8
tick,0x7ffe67f8feb4,462866019,0,0x0,8
tick,0x7ffe67f8feb4,462881151,0,0x0,8
tick,0x7ffe67f8feb4,462909339,0,0x0,8
tick,0x7ffe67f8feb4,462913057,0,0x0,8
tick,0x7ffe67f8feb4,462929024,0,0x0,8
tick,0x7ffe67f8feb4,462944812,0,0x0,8
tick,0x7ffe67f8feb4,462960023,0,0x0,8
tick,0x7ffe67f8feb4,462976037,0,0x0,8
tick,0x7ffe67f8feb4,462992514,0,0x0,8
tick,0x7ffe67f8feb4,463008538,0,0x0,8
tick,0x7ffe67f8feb4,463023016,0,0x0,8
tick,0x7ffe67f8feb4,463038156,0,0x0,8
tick,0x7ffe67f8feb4,463053004,0,0x0,8
tick,0x7ffe67f8feb4,463068994,0,0x0,8
tick,0x7ffe67f8feb4,463083904,0,0x0,8
tick,0x7ffe67f8feb4,463098996,0,0x0,8
tick,0x7ffe67f8feb4,463114410,0,0x0,8
tick,0x7ffe67f8feb4,463129107,0,0x0,8
tick,0x7ffe67f8feb4,463143997,0,0x0,8
tick,0x7ffe67f8feb4,463159990,0,0x0,8
tick,0x7ffe67f8feb4,463175599,0,0x0,8
tick,0x7ffe67f8feb4,463191920,0,0x0,8
tick,0x7ffe67f8feb4,463207157,0,0x0,8
tick,0x7ffe67f8feb4,463222005,0,0x0,8
tick,0x7ffe67f8feb4,463237976,0,0x0,8
tick,0x7ffe67f8feb4,463253807,0,0x0,8
tick,0x7ffe67f8feb4,463268930,0,0x0,8
tick,0x7ffe67f8feb4,463284824,0,0x0,8
tick,0x7ffe67f8feb4,463299956,0,0x0,8
tick,0x7ffe67f8feb4,463315939,0,0x0,8
tick,0x7ffe67f8feb4,463331947,0,0x0,8
tick,0x7ffe67f8feb4,463347982,0,0x0,8
tick,0x7ffe67f8feb4,463364030,0,0x0,8
tick,0x7ffe67f8feb4,463379965,0,0x0,8
tick,0x7ffe67f8feb4,463395953,0,0x0,8
tick,0x7ffe67f8feb4,463410721,0,0x0,8
tick,0x7ffe67f8feb4,463426021,0,0x0,8
tick,0x7ffe67f8feb4,463442183,0,0x0,8
tick,0x7ffe67f8feb4,463458384,0,0x0,8
tick,0x7ffe67f8feb4,463472989,0,0x0,8
tick,0x7ffe67f8feb4,463488168,0,0x0,8
tick,0x7ffe67f8feb4,463504002,0,0x0,8
tick,0x7ffe67f8feb4,463519979,0,0x0,8
tick,0x7ffe67f8feb4,463535989,0,0x0,8
tick,0x7ffe67f8feb4,463551973,0,0x0,8
tick,0x7ffe67f8feb4,463567961,0,0x0,8
tick,0x7ffe67f8feb4,463583463,0,0x0,8
tick,0x7ffe67f8feb4,463598998,0,0x0,8
tick,0x7ffe67f8feb4,463614547,0,0x0,8
tick,0x7ffe67f8feb4,463630147,0,0x0,8
tick,0x7ffe67f8feb4,463645676,0,0x0,8
tick,0x7ffe67f8feb4,463661597,0,0x0,8
tick,0x7ffe67f8feb4,463677664,0,0x0,8
tick,0x7ffe67f8feb4,463693036,0,0x0,8
tick,0x7ffe67f8feb4,463708688,0,0x0,8
tick,0x7ffe67f8feb4,463724017,0,0x0,8
tick,0x7ffe67f8feb4,463740009,0,0x0,8
tick,0x7ffe67f8feb4,463755178,0,0x0,8
tick,0x7ffe67f8feb4,463771067,0,0x0,8
tick,0x7ffe67f8feb4,463787118,0,0x0,8
tick,0x7ffe67f8feb4,463802364,0,0x0,8
tick,0x7ffe67f8feb4,463817492,0,0x0,8
tick,0x7ffe67f8feb4,463833045,0,0x0,8
tick,0x7ffe67f8feb4,463848666,0,0x0,8
tick,0x7ffe67f8feb4,463863852,0,0x0,8
tick,0x7ffe67f8feb4,463879982,0,0x0,8
tick,0x7ffe67f8feb4,463895313,0,0x0,8
tick,0x7ffe67f8feb4,463911366,0,0x0,8
tick,0x7ffe67f8feb4,463926760,0,0x0,8
tick,0x7ffe67f8feb4,463942699,0,0x0,8
tick,0x7ffe67f8feb4,463958179,0,0x0,8
tick,0x7ffe67f8feb4,463973593,0,0x0,8
tick,0x7ffe67f8feb4,463988841,0,0x0,8
tick,0x7ffe67f8feb4,464004610,0,0x0,8
tick,0x7ffe67f8feb4,464020070,0,0x0,8
tick,0x7ffe67f8feb4,464036186,0,0x0,8
tick,0x7ffe67f8feb4,464051214,0,0x0,8
tick,0x7ffe67f8feb4,464066659,0,0x0,8
tick,0x7ffe67f8feb4,464081599,0,0x0,8
tick,0x7ffe67f8feb4,464096986,0,0x0,8
tick,0x7ffe67f8feb4,464113054,0,0x0,8
tick,0x7ffe67f8feb4,464128037,0,0x0,8
tick,0x7ffe67f8feb4,464143373,0,0x0,8
tick,0x7ffe67f8feb4,464158899,0,0x0,8
tick,0x7ffe67f8feb4,464174617,0,0x0,8
tick,0x7ffe67f8feb4,464189771,0,0x0,8
tick,0x7ffe67f8feb4,464205061,0,0x0,8
tick,0x7ffe67f8feb4,464220338,0,0x0,8
tick,0x7ffe67f8feb4,464235800,0,0x0,8
tick,0x7ffe67f8feb4,464251052,0,0x0,8
tick,0x7ffe67f8feb4,464266008,0,0x0,8
tick,0x7ffe67f8feb4,464281576,0,0x0,8
tick,0x7ffe67f8feb4,464297447,0,0x0,8
tick,0x7ffe67f8feb4,464312561,0,0x0,8
tick,0x7ffe67f8feb4,464328382,0,0x0,8
tick,0x7ffe67f8feb4,464344400,0,0x0,8
tick,0x7ffe67f8feb4,464360569,0,0x0,8
tick,0x7ffe67f8feb4,464376433,0,0x0,8
tick,0x7ffe67f8feb4,464391585,0,0x0,8
tick,0x7ffe67f8feb4,464407372,0,0x0,8
tick,0x7ffe67f8feb4,464423127,0,0x0,8
tick,0x7ffe67f8feb4,464439113,0,0x0,8
tick,0x7ffe67f8feb4,464455090,0,0x0,8
tick,0x7ffe67f8feb4,464471067,0,0x0,8
tick,0x7ffe67f8feb4,464486289,0,0x0,8
tick,0x7ffe67f8feb4,464502092,0,0x0,8
tick,0x7ffe67f8feb4,464518066,0,0x0,8
tick,0x7ffe67f8feb4,464533080,0,0x0,8
tick,0x7ffe67f8feb4,464549045,0,0x0,8
tick,0x7ffe67f8feb4,464564890,0,0x0,8
tick,0x7ffe67f8feb4,464580149,0,0x0,8
tick,0x7ffe67f8feb4,464596166,0,0x0,8
tick,0x7ffe67f8feb4,464612110,0,0x0,8
tick,0x7ffe67f8feb4,464628281,0,0x0,8
tick,0x7ffe67f8feb4,464644162,0,0x0,8
tick,0x7ffe67f8feb4,464660174,0,0x0,8
tick,0x7ffe67f8feb4,464675992,0,0x0,8
tick,0x7ffe67f8feb4,464691162,0,0x0,8
tick,0x7ffe67f8feb4,464707140,0,0x0,8
tick,0x7ffe67f8feb4,464723103,0,0x0,8
tick,0x7ffe67f8feb4,464739173,0,0x0,8
tick,0x7ffe67f8feb4,464755167,0,0x0,8
tick,0x7ffe67f8feb4,464770195,0,0x0,8
tick,0x7ffe67f8feb4,464785749,0,0x0,8
tick,0x7ffe67f8feb4,464801173,0,0x0,8
tick,0x7ffe67f8feb4,464816816,0,0x0,8
tick,0x7ffe67f8feb4,464832168,0,0x0,8
tick,0x7ffe67f8feb4,464848165,0,0x0,8
tick,0x7ffe67f8feb4,464864097,0,0x0,8
tick,0x7ffe67f8feb4,464879212,0,0x0,8
tick,0x7ffe67f8feb4,464894916,0,0x0,8
tick,0x7ffe67f8feb4,464910894,0,0x0,8
tick,0x7ffe67f8feb4,464926955,0,0x0,8
tick,0x7ffe67f8feb4,464942578,0,0x0,8
tick,0x7ffe67f8feb4,464957906,0,0x0,8
tick,0x7ffe67f8feb4,464973904,0,0x0,8
tick,0x7ffe67f8feb4,464989917,0,0x0,8
tick,0x7ffe67f8feb4,465005638,0,0x0,8
tick,0x7ffe67f8feb4,465020969,0,0x0,8
tick,0x7ffe67f8feb4,465036642,0,0x0,8
tick,0x7ffe67f8feb4,465052669,0,0x0,8
tick,0x7ffe67f8feb4,465068677,0,0x0,8
tick,0x7ffe67f8feb4,465083842,0,0x0,8
tick,0x7ffe67f8feb4,465099893,0,0x0,8
tick,0x7ffe67f8feb4,465115662,0,0x0,8
tick,0x7ffe67f8feb4,465131529,0,0x0,8
tick,0x7ffe67f8feb4,465147558,0,0x0,8
tick,0x7ffe67f8feb4,465163531,0,0x0,8
tick,0x7ffe67f8feb4,465179652,0,0x0,8
tick,0x7ffe67f8feb4,465195264,0,0x0,8
tick,0x7ffe67f8feb4,465211457,0,0x0,8
tick,0x7ffe67f8feb4,465227245,0,0x0,8
tick,0x7ffe67f8feb4,465242473,0,0x0,8
tick,0x7ffe67f8feb4,465258534,0,0x0,8
tick,0x7ffe67f8feb4,465273705,0,0x0,8
tick,0x7ffe67f8feb4,465289300,0,0x0,8
tick,0x7ffe67f8feb4,465305131,0,0x0,8
tick,0x7ffe67f8feb4,465320578,0,0x0,8
tick,0x7ffe67f8feb4,465336816,0,0x0,8
tick,0x7ffe67f8feb4,465351835,0,0x0,8
tick,0x7ffe67f8feb4,465366967,0,0x0,8
tick,0x7ffe67f8feb4,465382632,0,0x0,8
tick,0x7ffe67f8feb4,465398044,0,0x0,8
tick,0x7ffe67f8feb4,465414160,0,0x0,8
tick,0x7ffe67f8feb4,465430099,0,0x0,8
tick,0x7ffe67f8feb4,465446078,0,0x0,8
tick,0x7ffe67f8feb4,465462337,0,0x0,8
tick,0x7ffe67f8feb4,465478066,0,0x0,8
tick,0x7ffe67f8feb4,465493320,0,0x0,8
tick,0x7ffe67f8feb4,465509286,0,0x0,8
tick,0x7ffe67f8feb4,465525304,0,0x0,8
tick,0x7ffe67f8feb4,465541279,0,0x0,8
tick,0x7ffe67f8feb4,465557272,0,0x0,8
tick,0x7ffe67f8feb4,465573281,0,0x0,8
tick,0x7ffe67f8feb4,465589280,0,0x0,8
tick,0x7ffe67f8feb4,465604482,0,0x0,8
tick,0x7ffe67f8feb4,465620497,0,0x0,8
tick,0x7ffe67f8feb4,465636517,0,0x0,8
tick,0x7ffe67f8feb4,465652486,0,0x0,8
tick,0x7ffe67f8feb4,465668534,0,0x0,8
tick,0x7ffe67f8feb4,465684558,0,0x0,8
tick,0x7ffe67f8feb4,465700579,0,0x0,8
tick,0x7ffe67f8feb4,465716132,0,0x0,8
tick,0x7ffe67f8feb4,465732645,0,0x0,8
tick,0x7ffe67f8feb4,465747498,0,0x0,8
tick,0x7ffe67f8feb4,465762806,0,0x0,8
tick,0x7ffe67f8feb4,465778094,0,0x0,8
tick,0x7ffe67f8feb4,465793759,0,0x0,8
tick,0x7ffe67f8feb4,465809534,0,0x0,8
tick,0x7ffe67f8feb4,465825231,0,0x0,8
tick,0x7ffe67f8feb4,465840323,0,0x0,8
tick,0x7ffe67f8feb4,465856082,0,0x0,8
tick,0x7ffe67f8feb4,465871267,0,0x0,8
tick,0x7ffe67f8feb4,465886417,0,0x0,8
tick,0x7ffe67f8feb4,465901988,0,0x0,8
tick,0x7ffe67f8feb4,465918040,0,0x0,8
tick,0x7ffe67f8feb4,465933382,0,0x0,8
tick,0x7ffe67f8feb4,465949318,0,0x0,8
tick,0x7ffe67f8feb4,465964717,0,0x0,8
tick,0x7ffe67f8feb4,465980603,0,0x0,8
tick,0x7ffe67f8feb4,465996646,0,0x0,8
tick,0x7ffe67f8feb4,466012661,0,0x0,8
tick,0x7ffe67f8feb4,466028927,0,0x0,8
tick,0x7ffe67f8feb4,466044515,0,0x0,8
tick,0x7ffe67f8feb4,466059786,0,0x0,8
tick,0x7ffe67f8feb4,466074721,0,0x0,8
tick,0x7ffe67f8feb4,466090389,0,0x0,8
tick,0x7ffe67f8feb4,466106132,0,0x0,8
tick,0x7ffe67f8feb4,466120973,0,0x0,8
tick,0x7ffe67f8feb4,466137136,0,0x0,8
tick,0x7ffe67f8feb4,466152761,0,0x0,8
tick,0x7ffe67f8feb4,466168007,0,0x0,8
tick,0x7ffe67f8feb4,466183614,0,0x0,8
tick,0x7ffe67f8feb4,466199106,0,0x0,8
tick,0x7ffe67f8feb4,466216568,0,0x0,8
tick,0x7ffe67f8feb4,466230614,0,0x0,8
tick,0x7ffe67f8feb4,466245734,0,0x0,8
tick,0x7ffe67f8feb4,466261473,0,0x0,8
tick,0x7ffe67f8feb4,466278249,0,0x0,8
tick,0x7ffe67f8feb4,466292834,0,0x0,8
tick,0x7ffe67f8feb4,466308913,0,0x0,8
tick,0x7ffe67f8feb4,466324453,0,0x0,8
tick,0x7ffe67f8feb4,466340389,0,0x0,8
tick,0x7ffe67f8feb4,466355852,0,0x0,8
tick,0x7ffe67f8feb4,466371403,0,0x0,8
tick,0x7ffe67f8feb4,466386892,0,0x0,8
tick,0x7ffe67f8feb4,466402908,0,0x0,8
tick,0x7ffe67f8feb4,466418421,0,0x0,8
tick,0x7ffe67f8feb4,466433143,0,0x0,8
tick,0x7ffe67f8feb4,466449232,0,0x0,8
tick,0x7ffe67f8feb4,466464468,0,0x0,8
tick,0x7ffe67f8feb4,466479448,0,0x0,8
tick,0x7ffe67f8feb4,466495481,0,0x0,8
tick,0x7ffe67f8feb4,466511554,0,0x0,8
tick,0x7ffe67f8feb4,466526432,0,0x0,8
tick,0x7ffe67f8feb4,466542445,0,0x0,8
tick,0x7ffe67f8feb4,466558424,0,0x0,8
tick,0x7ffe67f8feb4,466574437,0,0x0,8
tick,0x7ffe67f8feb4,466590452,0,0x0,8
tick,0x7ffe67f8feb4,466606451,0,0x0,8
tick,0x7ffe67f8feb4,466622445,0,0x0,8
tick,0x7ffe67f8feb4,466638376,0,0x0,8
tick,0x7ffe67f8feb4,466654414,0,0x0,8
tick,0x7ffe67f8feb4,466670403,0,0x0,8
tick,0x7ffe67f8feb4,466686440,0,0x0,8
tick,0x7ffe67f8feb4,466702470,0,0x0,8
tick,0x7ffe67f8feb4,466718471,0,0x0,8
tick,0x7ffe67f8feb4,466734078,0,0x0,8
tick,0x7ffe67f8feb4,466750097,0,0x0,8
tick,0x7ffe67f8feb4,466765075,0,0x0,8
tick,0x7ffe67f8feb4,466781075,0,0x0,8
tick,0x7ffe67f8feb4,466797332,0,0x0,8
tick,0x7ffe67f8feb4,466813119,0,0x0,8
tick,0x7ffe67f8feb4,466829142,0,0x0,8
tick,0x7ffe67f8feb4,466844481,0,0x0,8
tick,0x7ffe67f8feb4,466860482,0,0x0,8
tick,0x7ffe67f8feb4,466876484,0,0x0,8
tick,0x7ffe67f8feb4,466892482,0,0x0,8
tick,0x7ffe67f8feb4,466908509,0,0x0,8
tick,0x7ffe67f8feb4,466924500,0,0x0,8
tick,0x7ffe67f8feb4,466940013,0,0x0,8
tick,0x7ffe67f8feb4,466955378,0,0x0,8
tick,0x7ffe67f8feb4,466970535,0,0x0,8
tick,0x7ffe67f8feb4,466986500,0,0x0,8
tick,0x7ffe67f8feb4,467002523,0,0x0,8
tick,0x7ffe67f8feb4,467018532,0,0x0,8
tick,0x7ffe67f8feb4,467034546,0,0x0,8
tick,0x7ffe67f8feb4,467050476,0,0x0,8
tick,0x7ffe67f8feb4,467066544,0,0x0,8
tick,0x7ffe67f8feb4,467082580,0,0x0,8
tick,0x7ffe67f8feb4,467098553,0,0x0,8
tick,0x7ffe67f8feb4,467114598,0,0x0,8
tick,0x7ffe67f8feb4,467130657,0,0x0,8
tick,0x7ffe67f8feb4,467147761,0,0x0,8
tick,0x7ffe67f8feb4,467163168,0,0x0,8
tick,0x7ffe67f8feb4,467178729,0,0x0,8
tick,0x7ffe67f8feb4,467193606,0,0x0,8
tick,0x7ffe67f8feb4,467209601,0,0x0,8
tick,0x7ffe67f8feb4,467225547,0,0x0,8
tick,0x7ffe67f8feb4,467241580,0,0x0,8
tick,0x7ffe67f8feb4,467256840,0,0x0,8
tick,0x7ffe67f8feb4,467271819,0,0x0,8
tick,0x7ffe67f8feb4,467287832,0,0x0,8
tick,0x7ffe67f8feb4,467303282,0,0x0,8
tick,0x7ffe67f8feb4,467319279,0,0x0,8
tick,0x7ffe67f8feb4,467334671,0,0x0,8
tick,0x7ffe67f8feb4,467350289,0,0x0,8
tick,0x7ffe67f8feb4,467366247,0,0x0,8
tick,0x7ffe67f8feb4,467381722,0,0x0,8
tick,0x7ffe67f8feb4,467397805,0,0x0,8
tick,0x7ffe67f8feb4,467413507,0,0x0,8
tick,0x7ffe67f8feb4,467429036,0,0x0,8
tick,0x7ffe67f8feb4,467444391,0,0x0,8
tick,0x7ffe67f8feb4,467459673,0,0x0,8
tick,0x7ffe67f8feb4,467475534,0,0x0,8
tick,0x7ffe67f8feb4,467490514,0,0x0,8
tick,0x7ffe67f8feb4,467506134,0,0x0,8
tick,0x7ffe67f8feb4,467522646,0,0x0,8
tick,0x7ffe67f8feb4,467537556,0,0x0,8
tick,0x7ffe67f8feb4,467553560,0,0x0,8
tick,0x7ffe67f8feb4,467569537,0,0x0,8
tick,0x7ffe67f8feb4,467584369,0,0x0,8
tick,0x7ffe67f8feb4,467599841,0,0x0,8
tick,0x7ffe67f8feb4,467615608,0,0x0,8
tick,0x7ffe67f8feb4,467631676,0,0x0,8
tick,0x7ffe67f8feb4,467647677,0,0x0,8
tick,0x7ffe67f8feb4,467663612,0,0x0,8
tick,0x7ffe67f8feb4,467679754,0,0x0,8
tick,0x7ffe67f8feb4,467695714,0,0x0,8
tick,0x7ffe67f8feb4,467711628,0,0x0,8
tick,0x7ffe67f8feb4,467727627,0,0x0,8
tick,0x7ffe67f8feb4,467743649,0,0x0,8
tick,0x7ffe67f8feb4,467766565,0,0x0,8
tick,0x7ffe67f8feb4,467775716,0,0x0,8
tick,0x7ffe67f8feb4,467791637,0,0x0,8
tick,0x7ffe67f8feb4,467807759,0,0x0,8
tick,0x7ffe67f8feb4,467823645,0,0x0,8
tick,0x7ffe67f8feb4,467838768,0,0x0,8
tick,0x7ffe67f8feb4,467854376,0,0x0,8
tick,0x7ffe67f8feb4,467869780,0,0x0,8
tick,0x7ffe67f8feb4,467885381,0,0x0,8
tick,0x7ffe67f8feb4,467900666,0,0x0,8
tick,0x7ffe67f8feb4,467916654,0,0x0,8
tick,0x7ffe67f8feb4,467931668,0,0x0,8
tick,0x7ffe67f8feb4,467947673,0,0x0,8
tick,0x7ffe67f8feb4,467963649,0,0x0,8
tick,0x7ffe67f8feb4,467979658,0,0x0,8
tick,0x7ffe67f8feb4,467994815,0,0x0,8
tick,0x7ffe67f8feb4,468010839,0,0x0,8
tick,0x7ffe67f8feb4,468026389,0,0x0,8
tick,0x7ffe67f8feb4,468041382,0,0x0,8
tick,0x7ffe67f8feb4,468057374,0,0x0,8
tick,0x7ffe67f8feb4,468073381,0,0x0,8
tick,0x7ffe67f8feb4,468089347,0,0x0,8
tick,0x7ffe67f8feb4,468105353,0,0x0,8
tick,0x7ffe67f8feb4,468121333,0,0x0,8
tick,0x7ffe67f8feb4,468137353,0,0x0,8
tick,0x7ffe67f8feb4,468153352,0,0x0,8
tick,0x7ffe67f8feb4,468169420,0,0x0,8
tick,0x7ffe67f8feb4,468185418,0,0x0,8
tick,0x7ffe67f8feb4,468201390,0,0x0,8
tick,0x7ffe67f8feb4,468217400,0,0x0,8
tick,0x7ffe67f8feb4,468232790,0,0x0,8
tick,0x7ffe67f8feb4,468248286,0,0x0,8
tick,0x7ffe67f8feb4,468264337,0,0x0,8
tick,0x7ffe67f8feb4,468279647,0,0x0,8
tick,0x7ffe67f8feb4,468295151,0,0x0,8
tick,0x7ffe67f8feb4,468310211,0,0x0,8
tick,0x7ffe67f8feb4,468325468,0,0x0,8
tick,0x7ffe67f8feb4,468340777,0,0x0,8
tick,0x7ffe67f8feb4,468355753,0,0x0,8
tick,0x7ffe67f8feb4,468371037,0,0x0,8
tick,0x7ffe67f8feb4,468386292,0,0x0,8
tick,0x7ffe67f8feb4,468402214,0,0x0,8
tick,0x7ffe67f8feb4,468417788,0,0x0,8
tick,0x7ffe67f8feb4,468433854,0,0x0,8
tick,0x7ffe67f8feb4,468449849,0,0x0,8
tick,0x7ffe67f8feb4,468464963,0,0x0,8
tick,0x7ffe67f8feb4,468480136,0,0x0,8
tick,0x7ffe67f8feb4,468496375,0,0x0,8
tick,0x7ffe67f8feb4,468512146,0,0x0,8
tick,0x7ffe67f8feb4,468527680,0,0x0,8
tick,0x7ffe67f8feb4,468543679,0,0x0,8
tick,0x7ffe67f8feb4,468559675,0,0x0,8
tick,0x7ffe67f8feb4,468575667,0,0x0,8
tick,0x7ffe67f8feb4,468591667,0,0x0,8
tick,0x7ffe67f8feb4,468607656,0,0x0,8
tick,0x7ffe67f8feb4,468623122,0,0x0,8
tick,0x7ffe67f8feb4,468638436,0,0x0,8
tick,0x7ffe67f8feb4,468654153,0,0x0,8
tick,0x7ffe67f8feb4,468669811,0,0x0,8
tick,0x7ffe67f8feb4,468685460,0,0x0,8
tick,0x7ffe67f8feb4,468700461,0,0x0,8
tick,0x7ffe67f8feb4,468716436,0,0x0,8
tick,0x7ffe67f8feb4,468732710,0,0x0,8
tick,0x7ffe67f8feb4,468747601,0,0x0,8
tick,0x7ffe67f8feb4,468763676,0,0x0,8
tick,0x7ffe67f8feb4,468778888,0,0x0,8
tick,0x7ffe67f8feb4,468794994,0,0x0,8
tick,0x7ffe67f8feb4,468810367,0,0x0,8
tick,0x7ffe67f8feb4,468825655,0,0x0,8
tick,0x7ffe67f8feb4,468841380,0,0x0,8
tick,0x7ffe67f8feb4,468857135,0,0x0,8
tick,0x7ffe67f8feb4,468872790,0,0x0,8
tick,0x7ffe67f8feb4,468888659,0,0x0,8
tick,0x7ffe67f8feb4,468903891,0,0x0,8
tick,0x7ffe67f8feb4,468919317,0,0x0,8
tick,0x7ffe67f8feb4,468935014,0,0x0,8
tick,0x7ffe67f8feb4,468950188,0,0x0,8
tick,0x7ffe67f8feb4,468966163,0,0x0,8
tick,0x7ffe67f8feb4,468981754,0,0x0,8
tick,0x7ffe67f8feb4,468997510,0,0x0,8
tick,0x7ffe67f8feb4,469012824,0,0x0,8
tick,0x7ffe67f8feb4,469028893,0,0x0,8
tick,0x7ffe67f8feb4,469044847,0,0x0,8
tick,0x7ffe67f8feb4,469059869,0,0x0,8
tick,0x7ffe67f8feb4,469074913,0,0x0,8
tick,0x7ffe67f8feb4,469090883,0,0x0,8
tick,0x7ffe67f8feb4,469106992,0,0x0,8
tick,0x7ffe67f8feb4,469122963,0,0x0,8
tick,0x7ffe67f8feb4,469139142,0,0x0,8
tick,0x7ffe67f8feb4,469156008,0,0x0,8
tick,0x7ffe67f8feb4,469171362,0,0x0,8
tick,0x7ffe67f8feb4,469186900,0,0x0,8
tick,0x7ffe67f8feb4,469202902,0,0x0,8
tick,0x7ffe67f8feb4,469217978,0,0x0,8
tick,0x7ffe67f8feb4,469233918,0,0x0,8
tick,0x7ffe67f8feb4,469249972,0,0x0,8
tick,0x7ffe67f8feb4,469265925,0,0x0,8
tick,0x7ffe67f8feb4,469281923,0,0x0,8
tick,0x7ffe67f8feb4,469298238,0,0x0,8
tick,0x7ffe67f8feb4,469313074,0,0x0,8
tick,0x7ffe67f8feb4,469329062,0,0x0,8
tick,0x7ffe67f8feb4,469345219,0,0x0,8
tick,0x7ffe67f8feb4,469361090,0,0x0,8
tick,0x7ffe67f8feb4,469376907,0,0x0,8
tick,0x7ffe67f8feb4,469392102,0,0x0,8
tick,0x7ffe67f8feb4,469407942,0,0x0,8
tick,0x7ffe67f8feb4,469423398,0,0x0,8
tick,0x7ffe67f8feb4,469438908,0,0x0,8
tick,0x7ffe67f8feb4,469454221,0,0x0,8
tick,0x7ffe67f8feb4,469469916,0,0x0,8
tick,0x7ffe67f8feb4,469486000,0,0x0,8
tick,0x7ffe67f8feb4,469501951,0,0x0,8
tick,0x7ffe67f8feb4,469517931,0,0x0,8
tick,0x7ffe67f8feb4,469533960,0,0x0,8
tick,0x7ffe67f8feb4,469549926,0,0x0,8
tick,0x7ffe67f8feb4,469565930,0,0x0,8
tick,0x7ffe67f8feb4,469582487,0,0x0,8
tick,0x7ffe67f8feb4,469596894,0,0x0,8
tick,0x7ffe67f8feb4,469611902,0,0x0,8
tick,0x7ffe67f8feb4,469627946,0,0x0,8
tick,0x7ffe67f8feb4,469643918,0,0x0,8
tick,0x7ffe67f8feb4,469659896,0,0x0,8
tick,0x7ffe67f8feb4,469675909,0,0x0,8
tick,0x7ffe67f8feb4,469691926,0,0x0,8
tick,0x7ffe67f8feb4,469707903,0,0x0,8
tick,0x7ffe67f8feb4,469723899,0,0x0,8
tick,0x7ffe67f8feb4,469739906,0,0x0,8
tick,0x7ffe67f8feb4,469755909,0,0x0,8
tick,0x7ffe67f8feb4,469772125,0,0x0,8
tick,0x7ffe67f8feb4,469787924,0,0x0,8
tick,0x7ffe67f8feb4,469804048,0,0x0,8
tick,0x7ffe67f8feb4,469819954,0,0x0,8
tick,0x7ffe67f8feb4,469835963,0,0x0,8
tick,0x7ffe67f8feb4,469851961,0,0x0,8
tick,0x7ffe67f8feb4,469867981,0,0x0,8
tick,0x7ffe67f8feb4,469884764,0,0x0,8
tick,0x7ffe67f8feb4,469911652,0,0x0,8
tick,0x7ffe67f8feb4,469919353,0,0x0,8
tick,0x7ffe67f8feb4,469933358,0,0x0,8
tick,0x7ffe67f8feb4,469949319,0,0x0,8
tick,0x7ffe67f8feb4,469963993,0,0x0,8
tick,0x7ffe67f8feb4,469979996,0,0x0,8
tick,0x7ffe67f8feb4,469995993,0,0x0,8
tick,0x7ffe67f8feb4,470011552,0,0x0,8
tick,0x7ffe67f8feb4,470026979,0,0x0,8
tick,0x7ffe67f8feb4,470042123,0,0x0,8
tick,0x7ffe67f8feb4,470057569,0,0x0,8
tick,0x7ffe67f8feb4,470073159,0,0x0,8
tick,0x7ffe67f8feb4,470089021,0,0x0,8
tick,0x7ffe67f8feb4,470104604,0,0x0,8
tick,0x7ffe67f8feb4,470120502,0,0x0,8
tick,0x7ffe67f8feb4,470135634,0,0x0,8
tick,0x7ffe67f8feb4,470151634,0,0x0,8
tick,0x7ffe67f8feb4,470167646,0,0x0,8
tick,0x7ffe67f8feb4,470183608,0,0x0,8
tick,0x7ffe67f8feb4,470200161,0,0x0,8
tick,0x7ffe67f8feb4,470215873,0,0x0,8
tick,0x7ffe67f8feb4,470232431,0,0x0,8
tick,0x7ffe67f8feb4,470247645,0,0x0,8
tick,0x7ffe67f8feb4,470263486,0,0x0,8
tick,0x7ffe67f8feb4,470279044,0,0x0,8
tick,0x7ffe67f8feb4,470295102,0,0x0,8
tick,0x7ffe67f8feb4,470310227,0,0x0,8
tick,0x7ffe67f8feb4,470325430,0,0x0,8
tick,0x7ffe67f8feb4,470340527,0,0x0,8
tick,0x7ffe67f8feb4,470355831,0,0x0,8
tick,0x7ffe67f8feb4,470371045,0,0x0,8
tick,0x7ffe67f8feb4,470387507,0,0x0,8
tick,0x7ffe67f8feb4,470403114,0,0x0,8
tick,0x7ffe67f8feb4,470418189,0,0x0,8
tick,0x7ffe67f8feb4,470434627,0,0x0,8
tick,0x7ffe67f8feb4,470449053,0,0x0,8
tick,0x7ffe67f8feb4,470465308,0,0x0,8
tick,0x7ffe67f8feb4,470482292,0,0x0,8
tick,0x7ffe67f8feb4,470498106,0,0x0,8
tick,0x7ffe67f8feb4,470512393,0,0x0,8
tick,0x7ffe67f8feb4,470527581,0,0x0,8
tick,0x7ffe67f8feb4,470542311,0,0x0,8
tick,0x7ffe67f8feb4,470558327,0,0x0,8
tick,0x7ffe67f8feb4,470574324,0,0x0,8
tick,0x7ffe67f8feb4,470590427,0,0x0,8
tick,0x7ffe67f8feb4,470605302,0,0x0,8
tick,0x7ffe67f8feb4,470620429,0,0x0,8
tick,0x7ffe67f8feb4,470636614,0,0x0,8
tick,0x7ffe67f8feb4,470652637,0,0x0,8
tick,0x7ffe67f8feb4,470668806,0,0x0,8
tick,0x7ffe67f8feb4,470685010,0,0x0,8
tick,0x7ffe67f8feb4,470700806,0,0x0,8
tick,0x7ffe67f8feb4,470717496,0,0x0,8
tick,0x7ffe67f8feb4,470733007,0,0x0,8
tick,0x7ffe67f8feb4,470747624,0,0x0,8
tick,0x7ffe67f8feb4,470763180,0,0x0,8
tick,0x7ffe67f8feb4,470778680,0,0x0,8
tick,0x7ffe67f8feb4,470793685,0,0x0,8
tick,0x7ffe67f8feb4,470808915,0,0x0,8
tick,0x7ffe67f8feb4,470824820,0,0x0,8
tick,0x7ffe67f8feb4,470839997,0,0x0,8
tick,0x7ffe67f8feb4,470855595,0,0x0,8
tick,0x7ffe67f8feb4,470870588,0,0x0,8
tick,0x7ffe67f8feb4,470886649,0,0x0,8
tick,0x7ffe67f8feb4,470902675,0,0x0,8
tick,0x7ffe67f8feb4,470918147,0,0x0,8
tick,0x7ffe67f8feb4,470933649,0,0x0,8
tick,0x7ffe67f8feb4,470949039,0,0x0,8
tick,0x7ffe67f8feb4,470964589,0,0x0,8
tick,0x7ffe67f8feb4,470979929,0,0x0,8
tick,0x7ffe67f8feb4,470995534,0,0x0,8
tick,0x7ffe67f8feb4,471010702,0,0x0,8
tick,0x7ffe67f8feb4,471026306,0,0x0,8
tick,0x7ffe67f8feb4,471042258,0,0x0,8
tick,0x7ffe67f8feb4,471057741,0,0x0,8
tick,0x7ffe67f8feb4,471073675,0,0x0,8
tick,0x7ffe67f8feb4,471088909,0,0x0,8
tick,0x7ffe67f8feb4,471103840,0,0x0,8
tick,0x7ffe67f8feb4,471119659,0,0x0,8
tick,0x7ffe67f8feb4,471135643,0,0x0,8
tick,0x7ffe67f8feb4,471151644,0,0x0,8
tick,0x7ffe67f8feb4,471166634,0,0x0,8
tick,0x7ffe67f8feb4,471183223,0,0x0,8
tick,0x7ffe67f8feb4,471197680,0,0x0,8
tick,0x7ffe67f8feb4,471213625,0,0x0,8
tick,0x7ffe67f8feb4,471229640,0,0x0,8
tick,0x7ffe67f8feb4,471245688,0,0x0,8
tick,0x7ffe67f8feb4,471261634,0,0x0,8
tick,0x7ffe67f8feb4,471277651,0,0x0,8
tick,0x7ffe67f8feb4,471292830,0,0x0,8
tick,0x7ffe67f8feb4,471308682,0,0x0,8
tick,0x7ffe67f8feb4,471324815,0,0x0,8
tick,0x7ffe67f8feb4,471339670,0,0x0,8
tick,0x7ffe67f8feb4,471355361,0,0x0,8
tick,0x7ffe67f8feb4,471370686,0,0x0,8
tick,0x7ffe67f8feb4,471386166,0,0x0,8
tick,0x7ffe67f8feb4,471401635,0,0x0,8
tick,0x7ffe67f8feb4,471417199,0,0x0,8
tick,0x7ffe67f8feb4,471432876,0,0x0,8
tick,0x7ffe67f8feb4,471447831,0,0x0,8
tick,0x7ffe67f8feb4,471463914,0,0x0,8
tick,0x7ffe67f8feb4,471479111,0,0x0,8
tick,0x7ffe67f8feb4,471494850,0,0x0,8
tick,0x7ffe67f8feb4,471510289,0,0x0,8
tick,0x7ffe67f8feb4,471525674,0,0x0,8
tick,0x7ffe67f8feb4,471540825,0,0x0,8
tick,0x7ffe67f8feb4,471556735,0,0x0,8
tick,0x7ffe67f8feb4,471572697,0,0x0,8
tick,0x7ffe67f8feb4,471588679,0,0x0,8
tick,0x7ffe67f8feb4,471604667,0,0x0,8
tick,0x7ffe67f8feb4,471620664,0,0x0,8
tick,0x7ffe67f8feb4,471635741,0,0x0,8
tick,0x7ffe67f8feb4,471651677,0,0x0,8
tick,0x7ffe67f8feb4,471667698,0,0x0,8
tick,0x7ffe67f8feb4,471682610,0,0x0,8
tick,0x7ffe67f8feb4,471697763,0,0x0,8
tick,0x7ffe67f8feb4,471713687,0,0x0,8
tick,0x7ffe67f8feb4,471728659,0,0x0,8
tick,0x7ffe67f8feb4,471744640,0,0x0,8
tick,0x7ffe67f8feb4,471760154,0,0x0,8
tick,0x7ffe67f8feb4,471775811,0,0x0,8
tick,0x7ffe67f8feb4,471791225,0,0x0,8
tick,0x7ffe67f8feb4,471806811,0,0x0,8
tick,0x7ffe67f8feb4,471822653,0,0x0,8
tick,0x7ffe67f8feb4,471838666,0,0x0,8
tick,0x7ffe67f8feb4,471853808,0,0x0,8
tick,0x7ffe67f8feb4,471869575,0,0x0,8
tick,0x7ffe67f8feb4,471885721,0,0x0,8
tick,0x7ffe67f8feb4,471900821,0,0x0,8
tick,0x7ffe67f8feb4,471916692,0,0x0,8
tick,0x7ffe67f8feb4,471931679,0,0x0,8
tick,0x7ffe67f8feb4,471947687,0,0x0,8
tick,0x7ffe67f8feb4,471963217,0,0x0,8
tick,0x7ffe67f8feb4,471978707,0,0x0,8
tick,0x7ffe67f8feb4,471994809,0,0x0,8
tick,0x7ffe67f8feb4,472009996,0,0x0,8
tick,0x7ffe67f8feb4,472025319,0,0x0,8
tick,0x7ffe67f8feb4,472040600,0,0x0,8
tick,0x7ffe67f8feb4,472056607,0,0x0,8
tick,0x7ffe67f8feb4,472071861,0,0x0,8
tick,0x7ffe67f8feb4,472087075,0,0x0,8
tick,0x7ffe67f8feb4,472102246,0,0x0,8
tick,0x7ffe67f8feb4,472118330,0,0x0,8
tick,0x7ffe67f8feb4,472134221,0,0x0,8
tick,0x7ffe67f8feb4,472150279,0,0x0,8
tick,0x7ffe67f8feb4,472165170,0,0x0,8
tick,0x7ffe67f8feb4,472181216,0,0x0,8
tick,0x7ffe67f8feb4,472197099,0,0x0,8
tick,0x7ffe67f8feb4,472211942,0,0x0,8
tick,0x7ffe67f8feb4,472227859,0,0x0,8
tick,0x7ffe67f8feb4,472243046,0,0x0,8
tick,0x7ffe67f8feb4,472258765,0,0x0,8
tick,0x7ffe67f8feb4,472274246,0,0x0,8
tick,0x7ffe67f8feb4,472289393,0,0x0,8
tick,0x7ffe67f8feb4,472304926,0,0x0,8
tick,0x7ffe67f8feb4,472320438,0,0x0,8
tick,0x7ffe67f8feb4,472336452,0,0x0,8
tick,0x7ffe67f8feb4,472352483,0,0x0,8
tick,0x7ffe67f8feb4,472367760,0,0x0,8
tick,0x7ffe67f8feb4,472383953,0,0x0,8
tick,0x7ffe67f8feb4,472398948,0,0x0,8
tick,0x7ffe67f8feb4,472415144,0,0x0,8
tick,0x7ffe67f8feb4,472430742,0,0x0,8
tick,0x7ffe67f8feb4,472446001,0,0x0,8
tick,0x7ffe67f8feb4,472462095,0,0x0,8
tick,0x7ffe67f8feb4,472477987,0,0x0,8
tick,0x7ffe67f8feb4,472493666,0,0x0,8
tick,0x7ffe67f8feb4,472509503,0,0x0,8
tick,0x7ffe67f8feb4,472525538,0,0x0,8
tick,0x7ffe67f8feb4,472540420,0,0x0,8
tick,0x7ffe67f8feb4,472555897,0,0x0,8
tick,0x7ffe67f8feb4,472570779,0,0x0,8
tick,0x7ffe67f8feb4,472586845,0,0x0,8
tick,0x7ffe67f8feb4,472602759,0,0x0,8
tick,0x7ffe67f8feb4,472618747,0,0x0,8
tick,0x7ffe67f8feb4,472634272,0,0x0,8
tick,0x7ffe67f8feb4,472648762,0,0x0,8
tick,0x7ffe67f8feb4,472664738,0,0x0,8
tick,0x7ffe67f8feb4,472679770,0,0x0,8
tick,0x7ffe67f8feb4,472695772,0,0x0,8
tick,0x7ffe67f8feb4,472711779,0,0x0,8
tick,0x7ffe67f8feb4,472726862,0,0x0,8
tick,0x7ffe67f8feb4,472741777,0,0x0,8
tick,0x7ffe67f8feb4,472771339,0,0x0,8
tick,0x7ffe67f8feb4,472773896,0,0x0,8
tick,0x7ffe67f8feb4,472789738,0,0x0,8
tick,0x7ffe67f8feb4,472804594,0,0x0,8
tick,0x7ffe67f8feb4,472820801,0,0x0,8
tick,0x7ffe67f8feb4,472836707,0,0x0,8
tick,0x7ffe67f8feb4,472852740,0,0x0,8
tick,0x7ffe67f8feb4,472868979,0,0x0,8
tick,0x7ffe67f8feb4,472883803,0,0x0,8
tick,0x7ffe67f8feb4,472898823,0,0x0,8
tick,0x7ffe67f8feb4,472913713,0,0x0,8
tick,0x7ffe67f8feb4,472928978,0,0x0,8
tick,0x7ffe67f8feb4,472944819,0,0x0,8
tick,0x7ffe67f8feb4,472960827,0,0x0,8
tick,0x7ffe67f8feb4,472976673,0,0x0,8
tick,0x7ffe67f8feb4,472992795,0,0x0,8
tick,0x7ffe67f8feb4,473008543,0,0x0,8
tick,0x7ffe67f8feb4,473024774,0,0x0,8
tick,0x7ffe67f8feb4,473040605,0,0x0,8
tick,0x7ffe67f8feb4,473055828,0,0x0,8
tick,0x7ffe67f8feb4,473071757,0,0x0,8
tick,0x7ffe67f8feb4,473088540,0,0x0,8
tick,0x7ffe67f8feb4,473103839,0,0x0,8
tick,0x7ffe67f8feb4,473119769,0,0x0,8
tick,0x7ffe67f8feb4,473135714,0,0x0,8
tick,0x7ffe67f8feb4,473150703,0,0x0,8
tick,0x7ffe67f8feb4,473166870,0,0x0,8
tick,0x7ffe67f8feb4,473182618,0,0x0,8
tick,0x7ffe67f8feb4,473197879,0,0x0,8
tick,0x7ffe67f8feb4,473213462,0,0x0,8
tick,0x7ffe67f8feb4,473229390,0,0x0,8
tick,0x7ffe67f8feb4,473244595,0,0x0,8
tick,0x7ffe67f8feb4,473260627,0,0x0,8
tick,0x7ffe67f8feb4,473275324,0,0x0,8
tick,0x7ffe67f8feb4,473291386,0,0x0,8
tick,0x7ffe67f8feb4,473305996,0,0x0,8
tick,0x7ffe67f8feb4,473322151,0,0x0,8
tick,0x7ffe67f8feb4,473338067,0,0x0,8
tick,0x7ffe67f8feb4,473354145,0,0x0,8
tick,0x7ffe67f8feb4,473368970,0,0x0,8
tick,0x7ffe67f8feb4,473385651,0,0x0,8
tick,0x7ffe67f8feb4,473400240,0,0x0,8
tick,0x7ffe67f8feb4,473415005,0,0x0,8
tick,0x7ffe67f8feb4,473430247,0,0x0,8
tick,0x7ffe67f8feb4,473446030,0,0x0,8
tick,0x7ffe67f8feb4,473461722,0,0x0,8
tick,0x7ffe67f8feb4,473477544,0,0x0,8
tick,0x7ffe67f8feb4,473492659,0,0x0,8
tick,0x7ffe67f8feb4,473508622,0,0x0,8
tick,0x7ffe67f8feb4,473525019,0,0x0,8
tick,0x7ffe67f8feb4,473540631,0,0x0,8
tick,0x7ffe67f8feb4,473555694,0,0x0,8
tick,0x7ffe67f8feb4,473571792,0,0x0,8
tick,0x7ffe67f8feb4,473586810,0,0x0,8
tick,0x7ffe67f8feb4,473603282,0,0x0,8
tick,0x7ffe67f8feb4,473617616,0,0x0,8
tick,0x7ffe67f8feb4,473633650,0,0x0,8
tick,0x7ffe67f8feb4,473649427,0,0x0,8
tick,0x7ffe67f8feb4,473665381,0,0x0,8
tick,0x7ffe67f8feb4,473681356,0,0x0,8
tick,0x7ffe67f8feb4,473697442,0,0x0,8
tick,0x7ffe67f8feb4,473712677,0,0x0,8
tick,0x7ffe67f8feb4,473728098,0,0x0,8
tick,0x7ffe67f8feb4,473743492,0,0x0,8
tick,0x7ffe67f8feb4,473758921,0,0x0,8
tick,0x7ffe67f8feb4,473773729,0,0x0,8
tick,0x7ffe67f8feb4,473789359,0,0x0,8
tick,0x7ffe67f8feb4,473804875,0,0x0,8
tick,0x7ffe67f8feb4,473820788,0,0x0,8
tick,0x7ffe67f8feb4,473836750,0,0x0,8
tick,0x7ffe67f8feb4,473853345,0,0x0,8
tick,0x7ffe67f8feb4,473867605,0,0x0,8
tick,0x7ffe67f8feb4,473883798,0,0x0,8
tick,0x7ffe67f8feb4,473898877,0,0x0,8
tick,0x7ffe67f8feb4,473914625,0,0x0,8
tick,0x7ffe67f8feb4,473929616,0,0x0,8
tick,0x7ffe67f8feb4,473945334,0,0x0,8
tick,0x7ffe67f8feb4,473960260,0,0x0,8
tick,0x7ffe67f8feb4,473975640,0,0x0,8
tick,0x7ffe67f8feb4,473990638,0,0x0,8
tick,0x7ffe67f8feb4,474006411,0,0x0,8
tick,0x7ffe67f8feb4,474021709,0,0x0,8
tick,0x7ffe67f8feb4,474037438,0,0x0,8
tick,0x7ffe67f8feb4,474053419,0,0x0,8
tick,0x7ffe67f8feb4,474069062,0,0x0,8
tick,0x7ffe67f8feb4,474083794,0,0x0,8
tick,0x7ffe67f8feb4,474099423,0,0x0,8
tick,0x7ffe67f8feb4,474114807,0,0x0,8
tick,0x7ffe67f8feb4,474130804,0,0x0,8
tick,0x7ffe67f8feb4,474145932,0,0x0,8
tick,0x7ffe67f8feb4,474160739,0,0x0,8
tick,0x7ffe67f8feb4,474175878,0,0x0,8
tick,0x7ffe67f8feb4,474190689,0,0x0,8
tick,0x7ffe67f8feb4,474205677,0,0x0,8
tick,0x7ffe67f8feb4,474221690,0,0x0,8
tick,0x7ffe67f8feb4,474236692,0,0x0,8
tick,0x7ffe67f8feb4,474252839,0,0x0,8
tick,0x7ffe67f8feb4,474268974,0,0x0,8
tick,0x7ffe67f8feb4,474284658,0,0x0,8
tick,0x7ffe67f8feb4,474299330,0,0x0,8
tick,0x7ffe67f8feb4,474315330,0,0x0,8
tick,0x7ffe67f8feb4,474329684,0,0x0,8
tick,0x7ffe67f8feb4,474345272,0,0x0,8
tick,0x7ffe67f8feb4,474360721,0,0x0,8
tick,0x7ffe67f8feb4,474376667,0,0x0,8
tick,0x7ffe67f8feb4,474391787,0,0x0,8
tick,0x7ffe67f8feb4,474407345,0,0x0,8
tick,0x7ffe67f8feb4,474422185,0,0x0,8
tick,0x7ffe67f8feb4,474438591,0,0x0,8
tick,0x7ffe67f8feb4,474453679,0,0x0,8
tick,0x7ffe67f8feb4,474469515,0,0x0,8
tick,0x7ffe67f8feb4,474484770,0,0x0,8
tick,0x7ffe67f8feb4,474500424,0,0x0,8
tick,0x7ffe67f8feb4,474515686,0,0x0,8
tick,0x7ffe67f8feb4,474532003,0,0x0,8
tick,0x7ffe67f8feb4,474547362,0,0x0,8
tick,0x7ffe67f8feb4,474563268,0,0x0,8
tick,0x7ffe67f8feb4,474578832,0,0x0,8
tick,0x7ffe67f8feb4,474593604,0,0x0,8
tick,0x7ffe67f8feb4,474608567,0,0x0,8
tick,0x7ffe67f8feb4,474624548,0,0x0,8
tick,0x7ffe67f8feb4,474640526,0,0x0,8
tick,0x7ffe67f8feb4,474656637,0,0x0,8
tick,0x7ffe67f8feb4,474672618,0,0x0,8
tick,0x7ffe67f8feb4,474688775,0,0x0,8
tick,0x7ffe67f8feb4,474703963,0,0x0,8
tick,0x7ffe67f8feb4,474720090,0,0x0,8
tick,0x7ffe67f8feb4,474734333,0,0x0,8
tick,0x7ffe67f8feb4,474750101,0,0x0,8
tick,0x7ffe67f8feb4,474764995,0,0x0,8
tick,0x7ffe67f8feb4,474779762,0,0x0,8
tick,0x7ffe67f8feb4,474795040,0,0x0,8
tick,0x7ffe67f8feb4,474811107,0,0x0,8
tick,0x7ffe67f8feb4,474826248,0,0x0,8
tick,0x7ffe67f8feb4,474841568,0,0x0,8
tick,0x7ffe67f8feb4,474856562,0,0x0,8
tick,0x7ffe67f8feb4,474872589,0,0x0,8
tick,0x7ffe67f8feb4,474888107,0,0x0,8
tick,0x7ffe67f8feb4,474903462,0,0x0,8
tick,0x7ffe67f8feb4,474917719,0,0x0,8
tick,0x7ffe67f8feb4,474933641,0,0x0,8
tick,0x7ffe67f8feb4,474948673,0,0x0,8
tick,0x7ffe67f8feb4,474963839,0,0x0,8
tick,0x7ffe67f8feb4,474979902,0,0x0,8
tick,0x7ffe67f8feb4,474994576,0,0x0,8
tick,0x7ffe67f8feb4,475010487,0,0x0,8
tick,0x7ffe67f8feb4,475026133,0,0x0,8
tick,0x7ffe67f8feb4,475041932,0,0x0,8
tick,0x7ffe67f8feb4,475057735,0,0x0,8
tick,0x7ffe67f8feb4,475073547,0,0x0,8
tick,0x7ffe67f8feb4,475089551,0,0x0,8
tick,0x7ffe67f8feb4,475106095,0,0x0,8
tick,0x7ffe67f8feb4,475121766,0,0x0,8
tick,0x7ffe67f8feb4,475137704,0,0x0,8
tick,0x7ffe67f8feb4,475152721,0,0x0,8
tick,0x7ffe67f8feb4,475168719,0,0x0,8
tick,0x7ffe67f8feb4,475184845,0,0x0,8
tick,0x7ffe67f8feb4,475200960,0,0x0,8
tick,0x7ffe67f8feb4,475217039,0,0x0,8
tick,0x7ffe67f8feb4,475232692,0,0x0,8
tick,0x7ffe67f8feb4,475248082,0,0x0,8
tick,0x7ffe67f8feb4,475263702,0,0x0,8
tick,0x7ffe67f8feb4,475278833,0,0x0,8
tick,0x7ffe67f8feb4,475294808,0,0x0,8
tick,0x7ffe67f8feb4,475309847,0,0x0,8
tick,0x7ffe67f8feb4,475325654,0,0x0,8
tick,0x7ffe67f8feb4,475341235,0,0x0,8
tick,0x7ffe67f8feb4,475356770,0,0x0,8
tick,0x7ffe67f8feb4,475372699,0,0x0,8
tick,0x7ffe67f8feb4,475388329,0,0x0,8
tick,0x7ffe67f8feb4,475403812,0,0x0,8
tick,0x7ffe67f8feb4,475419712,0,0x0,8
tick,0x7ffe67f8feb4,475434928,0,0x0,8
tick,0x7ffe67f8feb4,475450112,0,0x0,8
tick,0x7ffe67f8feb4,475466031,0,0x0,8
tick,0x7ffe67f8feb4,475481203,0,0x0,8
tick,0x7ffe67f8feb4,475497072,0,0x0,8
tick,0x7ffe67f8feb4,475512683,0,0x0,8
tick,0x7ffe67f8feb4,475528002,0,0x0,8
tick,0x7ffe67f8feb4,475543910,0,0x0,8
tick,0x7ffe67f8feb4,475559820,0,0x0,8
tick,0x7ffe67f8feb4,475575027,0,0x0,8
tick,0x7ffe67f8feb4,475590187,0,0x0,8
tick,0x7ffe67f8feb4,475605840,0,0x0,8
tick,0x7ffe67f8feb4,475621827,0,0x0,8
tick,0x7ffe67f8feb4,475637835,0,0x0,8
tick,0x7ffe67f8feb4,475653878,0,0x0,8
tick,0x7ffe67f8feb4,475668838,0,0x0,8
tick,0x7ffe67f8feb4,475684820,0,0x0,8
tick,0x7ffe67f8feb4,475700829,0,0x0,8
tick,0x7ffe67f8feb4,475715993,0,0x0,8
tick,0x7ffe67f8feb4,475731243,0,0x0,8
tick,0x7ffe67f8feb4,475746648,0,0x0,8
tick,0x7ffe67f8feb4,475762684,0,0x0,8
tick,0x7ffe67f8feb4,475777906,0,0x0,8
tick,0x7ffe67f8feb4,475792719,0,0x0,8
tick,0x7ffe67f8feb4,475807707,0,0x0,8
tick,0x7ffe67f8feb4,475823738,0,0x0,8
tick,0x7ffe67f8feb4,475838683,0,0x0,8
tick,0x7ffe67f8feb4,475854745,0,0x0,8
tick,0x7ffe67f8feb4,475870616,0,0x0,8
tick,0x7ffe67f8feb4,475885706,0,0x0,8
tick,0x7ffe67f8feb4,475900886,0,0x0,8
tick,0x7ffe67f8feb4,475916739,0,0x0,8
tick,0x7ffe67f8feb4,475931424,0,0x0,8
tick,0x7ffe67f8feb4,475946839,0,0x0,8
tick,0x7ffe67f8feb4,475962700,0,0x0,8
tick,0x7ffe67f8feb4,475978691,0,0x0,8
tick,0x7ffe67f8feb4,475993814,0,0x0,8
tick,0x7ffe67f8feb4,476009921,0,0x0,8
tick,0x7ffe67f8feb4,476026040,0,0x0,8
tick,0x7ffe67f8feb4,476042050,0,0x0,8
tick,0x7ffe67f8feb4,476058047,0,0x0,8
tick,0x7ffe67f8feb4,476074116,0,0x0,8
tick,0x7ffe67f8feb4,476089662,0,0x0,8
tick,0x7ffe67f8feb4,476105669,0,0x0,8
tick,0x7ffe67f8feb4,476121655,0,0x0,8
tick,0x7ffe67f8feb4,476137608,0,0x0,8
tick,0x7ffe67f8feb4,476152665,0,0x0,8
tick,0x7ffe67f8feb4,476167858,0,0x0,8
tick,0x7ffe67f8feb4,476183039,0,0x0,8
tick,0x7ffe67f8feb4,476198999,0,0x0,8
tick,0x7ffe67f8feb4,476214228,0,0x0,8
tick,0x7ffe67f8feb4,476229211,0,0x0,8
tick,0x7ffe67f8feb4,476245330,0,0x0,8
tick,0x7ffe67f8feb4,476260920,0,0x0,8
tick,0x7ffe67f8feb4,476276246,0,0x0,8
tick,0x7ffe67f8feb4,476292391,0,0x0,8
tick,0x7ffe67f8feb4,476307271,0,0x0,8
tick,0x7ffe67f8feb4,476322499,0,0x0,8
tick,0x7ffe67f8feb4,476338544,0,0x0,8
tick,0x7ffe67f8feb4,476353178,0,0x0,8
tick,0x7ffe67f8feb4,476369204,0,0x0,8
tick,0x7ffe67f8feb4,476384241,0,0x0,8
tick,0x7ffe67f8feb4,476400246,0,0x0,8
tick,0x7ffe67f8feb4,476415207,0,0x0,8
tick,0x7ffe67f8feb4,476431070,0,0x0,8
tick,0x7ffe67f8feb4,476446155,0,0x0,8
tick,0x7ffe67f8feb4,476461908,0,0x0,8
tick,0x7ffe67f8feb4,476477976,0,0x0,8
tick,0x7ffe67f8feb4,476493715,0,0x0,8
tick,0x7ffe67f8feb4,476509019,0,0x0,8
tick,0x7ffe67f8feb4,476524847,0,0x0,8
tick,0x7ffe67f8feb4,476540864,0,0x0,8
tick,0x7ffe67f8feb4,476556835,0,0x0,8
tick,0x7ffe67f8feb4,476572271,0,0x0,8
tick,0x7ffe67f8feb4,476588218,0,0x0,8
tick,0x7ffe67f8feb4,476603276,0,0x0,8
tick,0x7ffe67f8feb4,476618830,0,0x0,8
tick,0x7ffe67f8feb4,476634837,0,0x0,8
tick,0x7ffe67f8feb4,476650829,0,0x0,8
tick,0x7ffe67f8feb4,476666843,0,0x0,8
tick,0x7ffe67f8feb4,476683015,0,0x0,8
tick,0x7ffe67f8feb4,476698841,0,0x0,8
tick,0x7ffe67f8feb4,476714824,0,0x0,8
tick,0x7ffe67f8feb4,476730862,0,0x0,8
tick,0x7ffe67f8feb4,476746382,0,0x0,8
tick,0x7ffe67f8feb4,476761671,0,0x0,8
tick,0x7ffe67f8feb4,476776908,0,0x0,8
tick,0x7ffe67f8feb4,476792712,0,0x0,8
tick,0x7ffe67f8feb4,476808471,0,0x0,8
tick,0x7ffe67f8feb4,476824271,0,0x0,8
tick,0x7ffe67f8feb4,476840253,0,0x0,8
tick,0x7ffe67f8feb4,476856239,0,0x0,8
tick,0x7ffe67f8feb4,476872910,0,0x0,8
tick,0x7ffe67f8feb4,476887392,0,0x0,8
tick,0x7ffe67f8feb4,476902676,0,0x0,8
tick,0x7ffe67f8feb4,476918422,0,0x0,8
tick,0x7ffe67f8feb4,476933698,0,0x0,8
tick,0x7ffe67f8feb4,476949651,0,0x0,8
tick,0x7ffe67f8feb4,476965648,0,0x0,8
tick,0x7ffe67f8feb4,476981789,0,0x0,8
tick,0x7ffe67f8feb4,476997865,0,0x0,8
tick,0x7ffe67f8feb4,477013568,0,0x0,8
tick,0x7ffe67f8feb4,477029400,0,0x0,8
tick,0x7ffe67f8feb4,477044606,0,0x0,8
tick,0x7ffe67f8feb4,477060660,0,0x0,8
tick,0x7ffe67f8feb4,477076354,0,0x0,8
tick,0x7ffe67f8feb4,477092526,0,0x0,8
tick,0x7ffe67f8feb4,477108503,0,0x0,8
tick,0x7ffe67f8feb4,477124476,0,0x0,8
tick,0x7ffe67f8feb4,477140740,0,0x0,8
tick,0x7ffe67f8feb4,477156571,0,0x0,8
tick,0x7ffe67f8feb4,477172681,0,0x0,8
tick,0x7ffe67f8feb4,477188235,0,0x0,8
tick,0x7ffe67f8feb4,477203596,0,0x0,8
tick,0x7ffe67f8feb4,477218867,0,0x0,8
tick,0x7ffe67f8feb4,477234902,0,0x0,8
tick,0x7ffe67f8feb4,477250396,0,0x0,8
tick,0x7ffe67f8feb4,477266151,0,0x0,8
tick,0x7ffe67f8feb4,477281518,0,0x0,8
tick,0x7ffe67f8feb4,477296980,0,0x0,8
tick,0x7ffe67f8feb4,477313000,0,0x0,8
tick,0x7ffe67f8feb4,477328788,0,0x0,8
tick,0x7ffe67f8feb4,477344776,0,0x0,8
tick,0x7ffe67f8feb4,477360972,0,0x0,8
tick,0x7ffe67f8feb4,477376201,0,0x0,8
tick,0x7ffe67f8feb4,477391935,0,0x0,8
tick,0x7ffe67f8feb4,477408478,0,0x0,8
tick,0x7ffe67f8feb4,477423931,0,0x0,8
tick,0x7ffe67f8feb4,477440460,0,0x0,8
tick,0x7ffe67f8feb4,477456732,0,0x0,8
tick,0x7ffe67f8feb4,477471080,0,0x0,8
tick,0x7ffe67f8feb4,477486150,0,0x0,8
tick,0x7ffe67f8feb4,477501573,0,0x0,8
tick,0x7ffe67f8feb4,477517068,0,0x0,8
tick,0x7ffe67f8feb4,477531725,0,0x0,8
tick,0x7ffe67f8feb4,477547880,0,0x0,8
tick,0x7ffe67f8feb4,477563115,0,0x0,8
tick,0x7ffe67f8feb4,477577900,0,0x0,8
tick,0x7ffe67f8feb4,477593674,0,0x0,8
tick,0x7ffe67f8feb4,477609778,0,0x0,8
tick,0x7ffe67f8feb4,477625789,0,0x0,8
tick,0x7ffe67f8feb4,477641723,0,0x0,8
tick,0x7ffe67f8feb4,477657778,0,0x0,8
tick,0x7ffe67f8feb4,477673209,0,0x0,8
tick,0x7ffe67f8feb4,477687698,0,0x0,8
tick,0x7ffe67f8feb4,477703694,0,0x0,8
tick,0x7ffe67f8feb4,477719656,0,0x0,8
tick,0x7ffe67f8feb4,477735745,0,0x0,8
tick,0x7ffe67f8feb4,477751272,0,0x0,8
tick,0x7ffe67f8feb4,477765887,0,0x0,8
tick,0x7ffe67f8feb4,477781037,0,0x0,8
tick,0x7ffe67f8feb4,477795973,0,0x0,8
tick,0x7ffe67f8feb4,477811197,0,0x0,8
tick,0x7ffe67f8feb4,477826131,0,0x0,8
tick,0x7ffe67f8feb4,477842704,0,0x0,8
tick,0x7ffe67f8feb4,477858372,0,0x0,8
tick,0x7ffe67f8feb4,477873652,0,0x0,8
tick,0x7ffe67f8feb4,477890048,0,0x0,8
tick,0x7ffe67f8feb4,477903934,0,0x0,8
tick,0x7ffe67f8feb4,477919947,0,0x0,8
tick,0x7ffe67f8feb4,477935945,0,0x0,8
tick,0x7ffe67f8feb4,477950970,0,0x0,8
tick,0x7ffe67f8feb4,477965917,0,0x0,8
tick,0x7ffe67f8feb4,477981910,0,0x0,8
tick,0x7ffe67f8feb4,477997979,0,0x0,8
tick,0x7ffe67f8feb4,478014005,0,0x0,8
tick,0x7ffe67f8feb4,478028931,0,0x0,8
tick,0x7ffe67f8feb4,478044776,0,0x0,8
tick,0x7ffe67f8feb4,478060018,0,0x0,8
tick,0x7ffe67f8feb4,478076079,0,0x0,8
tick,0x7ffe67f8feb4,478091984,0,0x0,8
tick,0x7ffe67f8feb4,478107321,0,0x0,8
tick,0x7ffe67f8feb4,478123256,0,0x0,8
tick,0x7ffe67f8feb4,478138667,0,0x0,8
tick,0x7ffe67f8feb4,478153656,0,0x0,8
tick,0x7ffe67f8feb4,478168815,0,0x0,8
tick,0x7ffe67f8feb4,478184792,0,0x0,8
tick,0x7ffe67f8feb4,478199676,0,0x0,8
tick,0x7ffe67f8feb4,478215230,0,0x0,8
tick,0x7ffe67f8feb4,478230220,0,0x0,8
tick,0x7ffe67f8feb4,478246236,0,0x0,8
tick,0x7ffe67f8feb4,478262222,0,0x0,8
tick,0x7ffe67f8feb4,478278249,0,0x0,8
tick,0x7ffe67f8feb4,478293740,0,0x0,8
tick,0x7ffe67f8feb4,478309988,0,0x0,8
tick,0x7ffe67f8feb4,478325738,0,0x0,8
tick,0x7ffe67f8feb4,478341685,0,0x0,8
tick,0x7ffe67f8feb4,478357072,0,0x0,8
tick,0x7ffe67f8feb4,478372746,0,0x0,8
tick,0x7ffe67f8feb4,478387675,0,0x0,8
tick,0x7ffe67f8feb4,478403065,0,0x0,8
tick,0x7ffe67f8feb4,478418118,0,0x0,8
tick,0x7ffe67f8feb4,478433689,0,0x0,8
tick,0x7ffe67f8feb4,478455009,0,0x0,8
tick,0x7ffe67f8feb4,478465283,0,0x0,8
tick,0x7ffe67f8feb4,478480698,0,0x0,8
tick,0x7ffe67f8feb4,478496279,0,0x0,8
tick,0x7ffe67f8feb4,478512313,0,0x0,8
tick,0x7ffe67f8feb4,478528332,0,0x0,8
tick,0x7ffe67f8feb4,478543844,0,0x0,8
tick,0x7ffe67f8feb4,478559327,0,0x0,8
tick,0x7ffe67f8feb4,478574328,0,0x0,8
tick,0x7ffe67f8feb4,478590341,0,0x0,8
tick,0x7ffe67f8feb4,478606717,0,0x0,8
tick,0x7ffe67f8feb4,478621494,0,0x0,8
tick,0x7ffe67f8feb4,478636865,0,0x0,8
tick,0x7ffe67f8feb4,478651823,0,0x0,8
tick,0x7ffe67f8feb4,478667377,0,0x0,8
tick,0x7ffe67f8feb4,478683371,0,0x0,8
tick,0x7ffe67f8feb4,478699349,0,0x0,8
tick,0x7ffe67f8feb4,478715361,0,0x0,8
tick,0x7ffe67f8feb4,478731365,0,0x0,8
tick,0x7ffe67f8feb4,478747366,0,0x0,8
tick,0x7ffe67f8feb4,478762678,0,0x0,8
tick,0x7ffe67f8feb4,478778405,0,0x0,8
tick,0x7ffe67f8feb4,478793843,0,0x0,8
tick,0x7ffe67f8feb4,478809835,0,0x0,8
tick,0x7ffe67f8feb4,478825864,0,0x0,8
tick,0x7ffe67f8feb4,478841943,0,0x0,8
tick,0x7ffe67f8feb4,478858687,0,0x0,8
tick,0x7ffe67f8feb4,478873926,0,0x0,8
tick,0x7ffe67f8feb4,478889862,0,0x0,8
tick,0x7ffe67f8feb4,478905059,0,0x0,8
tick,0x7ffe67f8feb4,478920179,0,0x0,8
tick,0x7ffe67f8feb4,478935851,0,0x0,8
tick,0x7ffe67f8feb4,478951677,0,0x0,8
tick,0x7ffe67f8feb4,478967471,0,0x0,8
tick,0x7ffe67f8feb4,478982761,0,0x0,8
tick,0x7ffe67f8feb4,478997909,0,0x0,8
tick,0x7ffe67f8feb4,479013707,0,0x0,8
tick,0x7ffe67f8feb4,479028977,0,0x0,8
tick,0x7ffe67f8feb4,479045078,0,0x0,8
tick,0x7ffe67f8feb4,479060694,0,0x0,8
tick,0x7ffe67f8feb4,479076704,0,0x0,8
tick,0x7ffe67f8feb4,479092771,0,0x0,8
tick,0x7ffe67f8feb4,479108755,0,0x0,8
tick,0x7ffe67f8feb4,479124810,0,0x0,8
tick,0x7ffe67f8feb4,479140635,0,0x0,8
tick,0x7ffe67f8feb4,479155856,0,0x0,8
tick,0x7ffe67f8feb4,479171077,0,0x0,8
tick,0x7ffe67f8feb4,479186916,0,0x0,8
tick,0x7ffe67f8feb4,479202729,0,0x0,8
tick,0x7ffe67f8feb4,479217971,0,0x0,8
tick,0x7ffe67f8feb4,479233771,0,0x0,8
tick,0x7ffe67f8feb4,479248892,0,0x0,8
tick,0x7ffe67f8feb4,479264954,0,0x0,8
tick,0x7ffe67f8feb4,479280133,0,0x0,8
tick,0x7ffe67f8feb4,479296131,0,0x0,8
tick,0x7ffe67f8feb4,479311960,0,0x0,8
tick,0x7ffe67f8feb4,479327526,0,0x0,8
tick,0x7ffe67f8feb4,479343505,0,0x0,8
tick,0x7ffe67f8feb4,479359539,0,0x0,8
tick,0x7ffe67f8feb4,479375581,0,0x0,8
tick,0x7ffe67f8feb4,479391002,0,0x0,8
tick,0x7ffe67f8feb4,479406449,0,0x0,8
tick,0x7ffe67f8feb4,479421895,0,0x0,8
tick,0x7ffe67f8feb4,479436820,0,0x0,8
tick,0x7ffe67f8feb4,479451954,0,0x0,8
tick,0x7ffe67f8feb4,479467854,0,0x0,8
tick,0x7ffe67f8feb4,479482629,0,0x0,8
tick,0x7ffe67f8feb4,479498062,0,0x0,8
tick,0x7ffe67f8feb4,479513956,0,0x0,8
tick,0x7ffe67f8feb4,479529748,0,0x0,8
tick,0x7ffe67f8feb4,479545769,0,0x0,8
tick,0x7ffe67f8feb4,479562145,0,0x0,8
tick,0x7ffe67f8feb4,479577754,0,0x0,8
tick,0x7ffe67f8feb4,479592743,0,0x0,8
tick,0x7ffe67f8feb4,479607908,0,0x0,8
tick,0x7ffe67f8feb4,479623733,0,0x0,8
tick,0x7ffe67f8feb4,479639785,0,0x0,8
tick,0x7ffe67f8feb4,479655822,0,0x0,8
tick,0x7ffe67f8feb4,479670730,0,0x0,8
tick,0x7ffe67f8feb4,479686725,0,0x0,8
tick,0x7ffe67f8feb4,479701870,0,0x0,8
tick,0x7ffe67f8feb4,479717735,0,0x0,8
tick,0x7ffe67f8feb4,479733731,0,0x0,8
tick,0x7ffe67f8feb4,479749739,0,0x0,8
tick,0x7ffe67f8feb4,479765016,0,0x0,8
tick,0x7ffe67f8feb4,479780776,0,0x0,8
tick,0x7ffe67f8feb4,479795990,0,0x0,8
tick,0x7ffe67f8feb4,479811754,0,0x0,8
tick,0x7ffe67f8feb4,479826847,0,0x0,8
tick,0x7ffe67f8feb4,479842982,0,0x0,8
tick,0x7ffe67f8feb4,479859278,0,0x0,8
tick,0x7ffe67f8feb4,479873708,0,0x0,8
tick,0x7ffe67f8feb4,479889732,0,0x0,8
tick,0x7ffe67f8feb4,479905163,0,0x0,8
tick,0x7ffe67f8feb4,479920068,0,0x0,8
tick,0x7ffe67f8feb4,479935510,0,0x0,8
tick,0x7ffe67f8feb4,479951528,0,0x0,8
tick,0x7ffe67f8feb4,479966514,0,0x0,8
tick,0x7ffe67f8feb4,479982522,0,0x0,8
tick,0x7ffe67f8feb4,479997565,0,0x0,8
tick,0x7ffe67f8feb4,480013555,0,0x0,8
tick,0x7ffe67f8feb4,480028547,0,0x0,8
tick,0x7ffe67f8feb4,480043823,0,0x0,8
tick,0x7ffe67f8feb4,480059593,0,0x0,8
tick,0x7ffe67f8feb4,480074933,0,0x0,8
tick,0x7ffe67f8feb4,480090514,0,0x0,8
tick,0x7ffe67f8feb4,480105836,0,0x0,8
tick,0x7ffe67f8feb4,480121207,0,0x0,8
tick,0x7ffe67f8feb4,480136531,0,0x0,8
tick,0x7ffe67f8feb4,480151700,0,0x0,8
tick,0x7ffe67f8feb4,480167579,0,0x0,8
tick,0x7ffe67f8feb4,480183531,0,0x0,8
tick,0x7ffe67f8feb4,480199091,0,0x0,8
tick,0x7ffe67f8feb4,480214533,0,0x0,8
tick,0x7ffe67f8feb4,480229698,0,0x0,8
tick,0x7ffe67f8feb4,480244887,0,0x0,8
tick,0x7ffe67f8feb4,480260855,0,0x0,8
tick,0x7ffe67f8feb4,480276882,0,0x0,8
tick,0x7ffe67f8feb4,480292919,0,0x0,8
tick,0x7ffe67f8feb4,480310131,0,0x0,8
tick,0x7ffe67f8feb4,480325206,0,0x0,8
tick,0x7ffe67f8feb4,480339995,0,0x0,8
tick,0x7ffe67f8feb4,480355345,0,0x0,8
tick,0x7ffe67f8feb4,480370720,0,0x0,8
tick,0x7ffe67f8feb4,480385843,0,0x0,8
tick,0x7ffe67f8feb4,480401488,0,0x0,8
tick,0x7ffe67f8feb4,480417490,0,0x0,8
tick,0x7ffe67f8feb4,480433479,0,0x0,8
tick,0x7ffe67f8feb4,480449571,0,0x0,8
tick,0x7ffe67f8feb4,480465143,0,0x0,8
tick,0x7ffe67f8feb4,480480317,0,0x0,8
tick,0x7ffe67f8feb4,480495342,0,0x0,8
tick,0x7ffe67f8feb4,480510590,0,0x0,8
tick,0x7ffe67f8feb4,480525691,0,0x0,8
tick,0x7ffe67f8feb4,480542193,0,0x0,8
tick,0x7ffe67f8feb4,480557619,0,0x0,8
tick,0x7ffe67f8feb4,480573738,0,0x0,8
tick,0x7ffe67f8feb4,480588679,0,0x0,8
tick,0x7ffe67f8feb4,480603718,0,0x0,8
tick,0x7ffe67f8feb4,480618672,0,0x0,8
tick,0x7ffe67f8feb4,480633848,0,0x0,8
tick,0x7ffe67f8feb4,480649685,0,0x0,8
tick,0x7ffe67f8feb4,480665352,0,0x0,8
tick,0x7ffe67f8feb4,480681406,0,0x0,8
tick,0x7ffe67f8feb4,480697339,0,0x0,8
tick,0x7ffe67f8feb4,480713344,0,0x0,8
tick,0x7ffe67f8feb4,480729351,0,0x0,8
tick,0x7ffe67f8feb4,480744581,0,0x0,8
tick,0x7ffe67f8feb4,480760473,0,0x0,8
tick,0x7ffe67f8feb4,480776567,0,0x0,8
tick,0x7ffe67f8feb4,480791375,0,0x0,8
tick,0x7ffe67f8feb4,480807375,0,0x0,8
tick,0x7ffe67f8feb4,480823388,0,0x0,8
tick,0x7ffe67f8feb4,480839380,0,0x0,8
tick,0x7ffe67f8feb4,480855207,0,0x0,8
tick,0x7ffe67f8feb4,480870378,0,0x0,8
tick,0x7ffe67f8feb4,480885858,0,0x0,8
tick,0x7ffe67f8feb4,480900715,0,0x0,8
tick,0x7ffe67f8feb4,480915795,0,0x0,8
tick,0x7ffe67f8feb4,480931705,0,0x0,8
tick,0x7ffe67f8feb4,480947717,0,0x0,8
tick,0x7ffe67f8feb4,480963723,0,0x0,8
tick,0x7ffe67f8feb4,480979733,0,0x0,8
tick,0x7ffe67f8feb4,480995851,0,0x0,8
tick,0x7ffe67f8feb4,481011991,0,0x0,8
tick,0x7ffe67f8feb4,481027746,0,0x0,8
tick,0x7ffe67f8feb4,481043716,0,0x0,8
tick,0x7ffe67f8feb4,481060476,0,0x0,8
tick,0x7ffe67f8feb4,481074856,0,0x0,8
tick,0x7ffe67f8feb4,481090009,0,0x0,8
tick,0x7ffe67f8feb4,481104846,0,0x0,8
tick,0x7ffe67f8feb4,481120000,0,0x0,8
tick,0x7ffe67f8feb4,481135859,0,0x0,8
tick,0x7ffe67f8feb4,481150838,0,0x0,8
tick,0x7ffe67f8feb4,481165503,0,0x0,8
tick,0x7ffe67f8feb4,481180900,0,0x0,8
tick,0x7ffe67f8feb4,481196917,0,0x0,8
tick,0x7ffe67f8feb4,481212314,0,0x0,8
tick,0x7ffe67f8feb4,481228350,0,0x0,8
tick,0x7ffe67f8feb4,481244033,0,0x0,8
tick,0x7ffe67f8feb4,481260051,0,0x0,8
tick,0x7ffe67f8feb4,481274688,0,0x0,8
tick,0x7ffe67f8feb4,481289886,0,0x0,8
tick,0x7ffe67f8feb4,481305848,0,0x0,8
tick,0x7ffe67f8feb4,481321029,0,0x0,8
tick,0x7ffe67f8feb4,481336847,0,0x0,8
tick,0x7ffe67f8feb4,481352868,0,0x0,8
tick,0x7ffe67f8feb4,481368864,0,0x0,8
tick,0x7ffe67f8feb4,481384389,0,0x0,8
tick,0x7ffe67f8feb4,481400410,0,0x0,8
tick,0x7ffe67f8feb4,481416168,0,0x0,8
tick,0x7ffe67f8feb4,481432220,0,0x0,8
tick,0x7ffe67f8feb4,481447920,0,0x0,8
tick,0x7ffe67f8feb4,481462705,0,0x0,8
tick,0x7ffe67f8feb4,481477906,0,0x0,8
tick,0x7ffe67f8feb4,481493954,0,0x0,8
tick,0x7ffe67f8feb4,481508971,0,0x0,8
tick,0x7ffe67f8feb4,481525021,0,0x0,8
tick,0x7ffe67f8feb4,481541036,0,0x0,8
tick,0x7ffe67f8feb4,481556887,0,0x0,8
tick,0x7ffe67f8feb4,481572051,0,0x0,8
tick,0x7ffe67f8feb4,481588026,0,0x0,8
tick,0x7ffe67f8feb4,481603855,0,0x0,8
tick,0x7ffe67f8feb4,481619013,0,0x0,8
tick,0x7ffe67f8feb4,481635069,0,0x0,8
tick,0x7ffe67f8feb4,481651074,0,0x0,8
tick,0x7ffe67f8feb4,481667148,0,0x0,8
tick,0x7ffe67f8feb4,481683074,0,0x0,8
tick,0x7ffe67f8feb4,481699047,0,0x0,8
tick,0x7ffe67f8feb4,481715071,0,0x0,8
tick,0x7ffe67f8feb4,481731081,0,0x0,8
tick,0x7ffe67f8feb4,481747128,0,0x0,8
tick,0x7ffe67f8feb4,481762119,0,0x0,8
tick,0x7ffe67f8feb4,481778068,0,0x0,8
tick,0x7ffe67f8feb4,481794137,0,0x0,8
tick,0x7ffe67f8feb4,481810319,0,0x0,8
tick,0x7ffe67f8feb4,481825840,0,0x0,8
tick,0x7ffe67f8feb4,481841101,0,0x0,8
tick,0x7ffe67f8feb4,481857386,0,0x0,8
tick,0x7ffe67f8feb4,481872726,0,0x0,8
tick,0x7ffe67f8feb4,481888626,0,0x0,8
tick,0x7ffe67f8feb4,481903928,0,0x0,8
tick,0x7ffe67f8feb4,481919504,0,0x0,8
tick,0x7ffe67f8feb4,481935425,0,0x0,8
tick,0x7ffe67f8feb4,481950355,0,0x0,8
tick,0x7ffe67f8feb4,481965370,0,0x0,8
tick,0x7ffe67f8feb4,481981341,0,0x0,8
tick,0x7ffe67f8feb4,481997428,0,0x0,8
tick,0x7ffe67f8feb4,482012380,0,0x0,8
tick,0x7ffe67f8feb4,482027401,0,0x0,8
tick,0x7ffe67f8feb4,482042717,0,0x0,8
tick,0x7ffe67f8feb4,482058074,0,0x0,8
tick,0x7ffe67f8feb4,482073726,0,0x0,8
tick,0x7ffe67f8feb4,482089288,0,0x0,8
tick,0x7ffe67f8feb4,482104857,0,0x0,8
tick,0x7ffe67f8feb4,482120255,0,0x0,8
tick,0x7ffe67f8feb4,482135096,0,0x0,8
tick,0x7ffe67f8feb4,482150344,0,0x0,8
tick,0x7ffe67f8feb4,482165873,0,0x0,8
tick,0x7ffe67f8feb4,482181070,0,0x0,8
tick,0x7ffe67f8feb4,482195782,0,0x0,8
tick,0x7ffe67f8feb4,482211065,0,0x0,8
tick,0x7ffe67f8feb4,482227149,0,0x0,8
tick,0x7ffe67f8feb4,482242069,0,0x0,8
tick,0x7ffe67f8feb4,482258080,0,0x0,8
tick,0x7ffe67f8feb4,482274089,0,0x0,8
tick,0x7ffe67f8feb4,482290068,0,0x0,8
tick,0x7ffe67f8feb4,482305682,0,0x0,8
tick,0x7ffe67f8feb4,482320916,0,0x0,8
tick,0x7ffe67f8feb4,482336979,0,0x0,8
tick,0x7ffe67f8feb4,482352977,0,0x0,8
tick,0x7ffe67f8feb4,482368491,0,0x0,8
tick,0x7ffe67f8feb4,482383653,0,0x0,8
tick,0x7ffe67f8feb4,482398538,0,0x0,8
tick,0x7ffe67f8feb4,482413476,0,0x0,8
tick,0x7ffe67f8feb4,482428714,0,0x0,8
tick,0x7ffe67f8feb4,482444528,0,0x0,8
tick,0x7ffe67f8feb4,482459580,0,0x0,8
tick,0x7ffe67f8feb4,482474708,0,0x0,8
tick,0x7ffe67f8feb4,482490031,0,0x0,8
tick,0x7ffe67f8feb4,482504787,0,0x0,8
tick,0x7ffe67f8feb4,482520343,0,0x0,8
tick,0x7ffe67f8feb4,482536157,0,0x0,8
tick,0x7ffe67f8feb4,482551373,0,0x0,8
tick,0x7ffe67f8feb4,482567399,0,0x0,8
tick,0x7ffe67f8feb4,482582684,0,0x0,8
tick,0x7ffe67f8feb4,482597357,0,0x0,8
tick,0x7ffe67f8feb4,482613284,0,0x0,8
tick,0x7ffe67f8feb4,482628309,0,0x0,8
tick,0x7ffe67f8feb4,482642904,0,0x0,8
tick,0x7ffe67f8feb4,482658442,0,0x0,8
tick,0x7ffe67f8feb4,482673483,0,0x0,8
tick,0x7ffe67f8feb4,482689830,0,0x0,8
tick,0x7ffe67f8feb4,482704450,0,0x0,8
tick,0x7ffe67f8feb4,482719483,0,0x0,8
tick,0x7ffe67f8feb4,482735531,0,0x0,8
tick,0x7ffe67f8feb4,482751441,0,0x0,8
tick,0x7ffe67f8feb4,482766663,0,0x0,8
tick,0x7ffe67f8feb4,482782720,0,0x0,8
tick,0x7ffe67f8feb4,482797750,0,0x0,8
tick,0x7ffe67f8feb4,482813651,0,0x0,8
tick,0x7ffe67f8feb4,482835375,0,0x0,8
tick,0x7ffe67f8feb4,482845450,0,0x0,8
tick,0x7ffe67f8feb4,482859837,0,0x0,8
tick,0x7ffe67f8feb4,482875008,0,0x0,8
tick,0x7ffe67f8feb4,482890186,0,0x0,8
tick,0x7ffe67f8feb4,482905405,0,0x0,8
tick,0x7ffe67f8feb4,482920576,0,0x0,8
tick,0x7ffe67f8feb4,482935745,0,0x0,8
tick,0x7ffe67f8feb4,482951357,0,0x0,8
tick,0x7ffe67f8feb4,482967485,0,0x0,8
tick,0x7ffe67f8feb4,482982710,0,0x0,8
tick,0x7ffe67f8feb4,482998513,0,0x0,8
tick,0x7ffe67f8feb4,483013828,0,0x0,8
tick,0x7ffe67f8feb4,483029502,0,0x0,8
tick,0x7ffe67f8feb4,483044699,0,0x0,8
tick,0x7ffe67f8feb4,483060508,0,0x0,8
tick,0x7ffe67f8feb4,483076534,0,0x0,8
tick,0x7ffe67f8feb4,483091697,0,0x0,8
tick,0x7ffe67f8feb4,483106986,0,0x0,8
tick,0x7ffe67f8feb4,483122682,0,0x0,8
tick,0x7ffe67f8feb4,483138577,0,0x0,8
tick,0x7ffe67f8feb4,483153732,0,0x0,8
tick,0x7ffe67f8feb4,483169055,0,0x0,8
tick,0x7ffe67f8feb4,483184703,0,0x0,8
tick,0x7ffe67f8feb4,483200713,0,0x0,8
tick,0x7ffe67f8feb4,483216264,0,0x0,8
tick,0x7ffe67f8feb4,483231209,0,0x0,8
tick,0x7ffe67f8feb4,483246300,0,0x0,8
tick,0x7ffe67f8feb4,483262253,0,0x0,8
tick,0x7ffe67f8feb4,483278016,0,0x0,8
tick,0x7ffe67f8feb4,483293731,0,0x0,8
tick,0x7ffe67f8feb4,483308973,0,0x0,8
tick,0x7ffe67f8feb4,483323753,0,0x0,8
tick,0x7ffe67f8feb4,483338920,0,0x0,8
tick,0x7ffe67f8feb4,483354865,0,0x0,8
tick,0x7ffe67f8feb4,483370311,0,0x0,8
tick,0x7ffe67f8feb4,483385749,0,0x0,8
tick,0x7ffe67f8feb4,483400900,0,0x0,8
tick,0x7ffe67f8feb4,483416878,0,0x0,8
tick,0x7ffe67f8feb4,483432723,0,0x0,8
tick,0x7ffe67f8feb4,483448736,0,0x0,8
tick,0x7ffe67f8feb4,483463882,0,0x0,8
tick,0x7ffe67f8feb4,483479766,0,0x0,8
tick,0x7ffe67f8feb4,483496165,0,0x0,8
tick,0x7ffe67f8feb4,483512315,0,0x0,8
tick,0x7ffe67f8feb4,483527763,0,0x0,8
tick,0x7ffe67f8feb4,483543794,0,0x0,8
tick,0x7ffe67f8feb4,483559240,0,0x0,8
tick,0x7ffe67f8feb4,483573899,0,0x0,8
tick,0x7ffe67f8feb4,483589069,0,0x0,8
tick,0x7ffe67f8feb4,483604865,0,0x0,8
tick,0x7ffe67f8feb4,483620004,0,0x0,8
tick,0x7ffe67f8feb4,483635881,0,0x0,8
tick,0x7ffe67f8feb4,483651157,0,0x0,8
tick,0x7ffe67f8feb4,483666808,0,0x0,8
tick,0x7ffe67f8feb4,483682748,0,0x0,8
tick,0x7ffe67f8feb4,483699022,0,0x0,8
tick,0x7ffe67f8feb4,483715056,0,0x0,8
tick,0x7ffe67f8feb4,483729762,0,0x0,8
tick,0x7ffe67f8feb4,483744712,0,0x0,8
tick,0x7ffe67f8feb4,483760718,0,0x0,8
tick,0x7ffe67f8feb4,483776711,0,0x0,8
tick,0x7ffe67f8feb4,483791690,0,0x0,8
tick,0x7ffe67f8feb4,483807725,0,0x0,8
tick,0x7ffe67f8feb4,483823714,0,0x0,8
tick,0x7ffe67f8feb4,483838409,0,0x0,8
tick,0x7ffe67f8feb4,483854228,0,0x0,8
tick,0x7ffe67f8feb4,483869776,0,0x0,8
tick,0x7ffe67f8feb4,483885469,0,0x0,8
tick,0x7ffe67f8feb4,483900464,0,0x0,8
tick,0x7ffe67f8feb4,483915450,0,0x0,8
tick,0x7ffe67f8feb4,483930715,0,0x0,8
tick,0x7ffe67f8feb4,483946827,0,0x0,8
tick,0x7ffe67f8feb4,483962790,0,0x0,8
tick,0x7ffe67f8feb4,483978191,0,0x0,8
tick,0x7ffe67f8feb4,483993706,0,0x0,8
tick,0x7ffe67f8feb4,484008710,0,0x0,8
tick,0x7ffe67f8feb4,484024346,0,0x0,8
tick,0x7ffe67f8feb4,484039294,0,0x0,8
tick,0x7ffe67f8feb4,484055250,0,0x0,8
tick,0x7ffe67f8feb4,484071356,0,0x0,8
tick,0x7ffe67f8feb4,484086528,0,0x0,8
tick,0x7ffe67f8feb4,484102536,0,0x0,8
tick,0x7ffe67f8feb4,484117672,0,0x0,8
tick,0x7ffe67f8feb4,484133199,0,0x0,8
tick,0x7ffe67f8feb4,484148163,0,0x0,8
tick,0x7ffe67f8feb4,484163766,0,0x0,8
tick,0x7ffe67f8feb4,484179929,0,0x0,8
tick,0x7ffe67f8feb4,484194849,0,0x0,8
tick,0x7ffe67f8feb4,484209875,0,0x0,8
tick,0x7ffe67f8feb4,484224877,0,0x0,8
tick,0x7ffe67f8feb4,484240047,0,0x0,8
tick,0x7ffe67f8feb4,484255861,0,0x0,8
tick,0x7ffe67f8feb4,484271721,0,0x0,8
tick,0x7ffe67f8feb4,484287766,0,0x0,8
tick,0x7ffe67f8feb4,484303775,0,0x0,8
tick,0x7ffe67f8feb4,484319714,0,0x0,8
tick,0x7ffe67f8feb4,484335289,0,0x0,8
tick,0x7ffe67f8feb4,484350773,0,0x0,8
tick,0x7ffe67f8feb4,484365846,0,0x0,8
tick,0x7ffe67f8feb4,484381791,0,0x0,8
tick,0x7ffe67f8feb4,484396971,0,0x0,8
tick,0x7ffe67f8feb4,484412978,0,0x0,8
tick,0x7ffe67f8feb4,484429040,0,0x0,8
tick,0x7ffe67f8feb4,484443855,0,0x0,8
tick,0x7ffe67f8feb4,484459185,0,0x0,8
tick,0x7ffe67f8feb4,484474910,0,0x0,8
tick,0x7ffe67f8feb4,484490172,0,0x0,8
tick,0x7ffe67f8feb4,484505886,0,0x0,8
tick,0x7ffe67f8feb4,484521711,0,0x0,8
tick,0x7ffe67f8feb4,484536742,0,0x0,8
tick,0x7ffe67f8feb4,484551411,0,0x0,8
tick,0x7ffe67f8feb4,484566937,0,0x0,8
tick,0x7ffe67f8feb4,484582351,0,0x0,8
tick,0x7ffe67f8feb4,484598491,0,0x0,8
tick,0x7ffe67f8feb4,484613835,0,0x0,8
tick,0x7ffe67f8feb4,484629627,0,0x0,8
tick,0x7ffe67f8feb4,484645133,0,0x0,8
tick,0x7ffe67f8feb4,484660744,0,0x0,8
tick,0x7ffe67f8feb4,484675874,0,0x0,8
tick,0x7ffe67f8feb4,484691888,0,0x0,8
tick,0x7ffe67f8feb4,484707861,0,0x0,8
tick,0x7ffe67f8feb4,484723869,0,0x0,8
tick,0x7ffe67f8feb4,484739881,0,0x0,8
tick,0x7ffe67f8feb4,484754862,0,0x0,8
tick,0x7ffe67f8feb4,484770871,0,0x0,8
tick,0x7ffe67f8feb4,484786905,0,0x0,8
tick,0x7ffe67f8feb4,484801618,0,0x0,8
tick,0x7ffe67f8feb4,484816920,0,0x0,8
tick,0x7ffe67f8feb4,484832104,0,0x0,8
tick,0x7ffe67f8feb4,484847462,0,0x0,8
tick,0x7ffe67f8feb4,484863062,0,0x0,8
tick,0x7ffe67f8feb4,484878751,0,0x0,8
tick,0x7ffe67f8feb4,484893864,0,0x0,8
tick,0x7ffe67f8feb4,484909874,0,0x0,8
tick,0x7ffe67f8feb4,484925116,0,0x0,8
tick,0x7ffe67f8feb4,484940269,0,0x0,8
tick,0x7ffe67f8feb4,484955481,0,0x0,8
tick,0x7ffe67f8feb4,484970739,0,0x0,8
tick,0x7ffe67f8feb4,484986143,0,0x0,8
tick,0x7ffe67f8feb4,485001839,0,0x0,8
tick,0x7ffe67f8feb4,485017170,0,0x0,8
tick,0x7ffe67f8feb4,485032131,0,0x0,8
tick,0x7ffe67f8feb4,485048367,0,0x0,8
tick,0x7ffe67f8feb4,485065442,0,0x0,8
tick,0x7ffe67f8feb4,485080605,0,0x0,8
tick,0x7ffe67f8feb4,485095264,0,0x0,8
tick,0x7ffe67f8feb4,485110261,0,0x0,8
tick,0x7ffe67f8feb4,485126018,0,0x0,8
tick,0x7ffe67f8feb4,485141404,0,0x0,8
tick,0x7ffe67f8feb4,485156695,0,0x0,8
tick,0x7ffe67f8feb4,485171757,0,0x0,8
tick,0x7ffe67f8feb4,485187733,0,0x0,8
tick,0x7ffe67f8feb4,485203299,0,0x0,8
tick,0x7ffe67f8feb4,485218654,0,0x0,8
tick,0x7ffe67f8feb4,485233876,0,0x0,8
tick,0x7ffe67f8feb4,485249874,0,0x0,8
tick,0x7ffe67f8feb4,485265621,0,0x0,8
tick,0x7ffe67f8feb4,485281523,0,0x0,8
tick,0x7ffe67f8feb4,485297052,0,0x0,8
tick,0x7ffe67f8feb4,485311346,0,0x0,8
tick,0x7ffe67f8feb4,485327358,0,0x0,8
tick,0x7ffe67f8feb4,485343515,0,0x0,8
tick,0x7ffe67f8feb4,485359437,0,0x0,8
tick,0x7ffe67f8feb4,485375150,0,0x0,8
tick,0x7ffe67f8feb4,485390451,0,0x0,8
tick,0x7ffe67f8feb4,485405442,0,0x0,8
tick,0x7ffe67f8feb4,485420649,0,0x0,8
tick,0x7ffe67f8feb4,485436716,0,0x0,8
tick,0x7ffe67f8feb4,485451500,0,0x0,8
tick,0x7ffe67f8feb4,485467154,0,0x0,8
tick,0x7ffe67f8feb4,485483224,0,0x0,8
tick,0x7ffe67f8feb4,485498666,0,0x0,8
tick,0x7ffe67f8feb4,485514731,0,0x0,8
tick,0x7ffe67f8feb4,485529422,0,0x0,8
tick,0x7ffe67f8feb4,485544881,0,0x0,8
tick,0x7ffe67f8feb4,485560739,0,0x0,8
tick,0x7ffe67f8feb4,485576697,0,0x0,8
tick,0x7ffe67f8feb4,485591358,0,0x0,8
tick,0x7ffe67f8feb4,485607146,0,0x0,8
tick,0x7ffe67f8feb4,485622627,0,0x0,8
tick,0x7ffe67f8feb4,485638128,0,0x0,8
tick,0x7ffe67f8feb4,485653574,0,0x0,8
tick,0x7ffe67f8feb4,485669590,0,0x0,8
tick,0x7ffe67f8feb4,485685613,0,0x0,8
tick,0x7ffe67f8feb4,485701863,0,0x0,8
tick,0x7ffe67f8feb4,485716673,0,0x0,8
tick,0x7ffe67f8feb4,485731525,0,0x0,8
tick,0x7ffe67f8feb4,485746528,0,0x0,8
tick,0x7ffe67f8feb4,485761971,0,0x0,8
tick,0x7ffe67f8feb4,485777519,0,0x0,8
tick,0x7ffe67f8feb4,485792691,0,0x0,8
tick,0x7ffe67f8feb4,485808714,0,0x0,8
tick,0x7ffe67f8feb4,485824802,0,0x0,8
tick,0x7ffe67f8feb4,485840451,0,0x0,8
tick,0x7ffe67f8feb4,485856055,0,0x0,8
tick,0x7ffe67f8feb4,485871187,0,0x0,8
tick,0x7ffe67f8feb4,485886332,0,0x0,8
tick,0x7ffe67f8feb4,485901491,0,0x0,8
tick,0x7ffe67f8feb4,485917162,0,0x0,8
tick,0x7ffe67f8feb4,485933047,0,0x0,8
tick,0x7ffe67f8feb4,485947920,0,0x0,8
tick,0x7ffe67f8feb4,485963244,0,0x0,8
tick,0x7ffe67f8feb4,485979227,0,0x0,8
tick,0x7ffe67f8feb4,485995299,0,0x0,8
tick,0x7ffe67f8feb4,486011240,0,0x0,8
tick,0x7ffe67f8feb4,486027275,0,0x0,8
tick,0x7ffe67f8feb4,486043267,0,0x0,8
tick,0x7ffe67f8feb4,486059407,0,0x0,8
tick,0x7ffe67f8feb4,486075244,0,0x0,8
tick,0x7ffe67f8feb4,486091105,0,0x0,8
tick,0x7ffe67f8feb4,486106096,0,0x0,8
tick,0x7ffe67f8feb4,486122062,0,0x0,8
tick,0x7ffe67f8feb4,486138079,0,0x0,8
tick,0x7ffe67f8feb4,486153104,0,0x0,8
tick,0x7ffe67f8feb4,486169085,0,0x0,8
tick,0x7ffe67f8feb4,486185134,0,0x0,8
tick,0x7ffe67f8feb4,486201073,0,0x0,8
tick,0x7ffe67f8feb4,486217083,0,0x0,8
tick,0x7ffe67f8feb4,486233077,0,0x0,8
tick,0x7ffe67f8feb4,486249101,0,0x0,8
tick,0x7ffe67f8feb4,486265123,0,0x0,8
tick,0x7ffe67f8feb4,486280113,0,0x0,8
tick,0x7ffe67f8feb4,486295860,0,0x0,8
tick,0x7ffe67f8feb4,486310963,0,0x0,8
tick,0x7ffe67f8feb4,486326166,0,0x0,8
tick,0x7ffe67f8feb4,486341740,0,0x0,8
tick,0x7ffe67f8feb4,486357268,0,0x0,8
tick,0x7ffe67f8feb4,486372748,0,0x0,8
tick,0x7ffe67f8feb4,486388769,0,0x0,8
tick,0x7ffe67f8feb4,486417671,0,0x0,8
tick,0x7ffe67f8feb4,486419916,0,0x0,8
tick,0x7ffe67f8feb4,486434767,0,0x0,8
tick,0x7ffe67f8feb4,486450596,0,0x0,8
tick,0x7ffe67f8feb4,486466548,0,0x0,8
tick,0x7ffe67f8feb4,486482563,0,0x0,8
tick,0x7ffe67f8feb4,486498504,0,0x0,8
tick,0x7ffe67f8feb4,486513736,0,0x0,8
tick,0x7ffe67f8feb4,486529777,0,0x0,8
tick,0x7ffe67f8feb4,486544910,0,0x0,8
tick,0x7ffe67f8feb4,486560089,0,0x0,8
tick,0x7ffe67f8feb4,486576146,0,0x0,8
tick,0x7ffe67f8feb4,486592172,0,0x0,8
tick,0x7ffe67f8feb4,486607201,0,0x0,8
tick,0x7ffe67f8feb4,486622714,0,0x0,8
tick,0x7ffe67f8feb4,486638158,0,0x0,8
tick,0x7ffe67f8feb4,486654148,0,0x0,8
tick,0x7ffe67f8feb4,486669323,0,0x0,8
tick,0x7ffe67f8feb4,486684866,0,0x0,8
tick,0x7ffe67f8feb4,486700146,0,0x0,8
tick,0x7ffe67f8feb4,486715487,0,0x0,8
tick,0x7ffe67f8feb4,486731147,0,0x0,8
tick,0x7ffe67f8feb4,486747226,0,0x0,8
tick,0x7ffe67f8feb4,486762114,0,0x0,8
tick,0x7ffe67f8feb4,486778152,0,0x0,8
tick,0x7ffe67f8feb4,486793112,0,0x0,8
tick,0x7ffe67f8feb4,486809120,0,0x0,8
tick,0x7ffe67f8feb4,486824872,0,0x0,8
tick,0x7ffe67f8feb4,486840109,0,0x0,8
tick,0x7ffe67f8feb4,486856191,0,0x0,8
tick,0x7ffe67f8feb4,486871717,0,0x0,8
tick,0x7ffe67f8feb4,486886894,0,0x0,8
tick,0x7ffe67f8feb4,486902889,0,0x0,8
tick,0x7ffe67f8feb4,486918835,0,0x0,8
tick,0x7ffe67f8feb4,486934858,0,0x0,8
tick,0x7ffe67f8feb4,486950765,0,0x0,8
tick,0x7ffe67f8feb4,486966732,0,0x0,8
tick,0x7ffe67f8feb4,486982730,0,0x0,8
tick,0x7ffe67f8feb4,486998331,0,0x0,8
tick,0x7ffe67f8feb4,487013765,0,0x0,8
tick,0x7ffe67f8feb4,487028719,0,0x0,8
tick,0x7ffe67f8feb4,487043871,0,0x0,8
tick,0x7ffe67f8feb4,487059223,0,0x0,8
tick,0x7ffe67f8feb4,487074741,0,0x0,8
tick,0x7ffe67f8feb4,487090884,0,0x0,8
tick,0x7ffe67f8feb4,487105975,0,0x0,8
tick,0x7ffe67f8feb4,487121572,0,0x0,8
tick,0x7ffe67f8feb4,487138670,0,0x0,8
tick,0x7ffe67f8feb4,487152747,0,0x0,8
tick,0x7ffe67f8feb4,487168799,0,0x0,8
tick,0x7ffe67f8feb4,487183747,0,0x0,8
tick,0x7ffe67f8feb4,487199704,0,0x0,8
tick,0x7ffe67f8feb4,487215698,0,0x0,8
tick,0x7ffe67f8feb4,487232000,0,0x0,8
tick,0x7ffe67f8feb4,487247590,0,0x0,8
tick,0x7ffe67f8feb4,487262709,0,0x0,8
tick,0x7ffe67f8feb4,487278849,0,0x0,8
tick,0x7ffe67f8feb4,487294886,0,0x0,8
tick,0x7ffe67f8feb4,487310706,0,0x0,8
tick,0x7ffe67f8feb4,487325387,0,0x0,8
tick,0x7ffe67f8feb4,487340571,0,0x0,8
tick,0x7ffe67f8feb4,487355725,0,0x0,8
tick,0x7ffe67f8feb4,487371805,0,0x0,8
tick,0x7ffe67f8feb4,487387469,0,0x0,8
tick,0x7ffe67f8feb4,487402747,0,0x0,8
tick,0x7ffe67f8feb4,487417549,0,0x0,8
tick,0x7ffe67f8feb4,487432763,0,0x0,8
tick,0x7ffe67f8feb4,487447723,0,0x0,8
tick,0x7ffe67f8feb4,487463611,0,0x0,8
tick,0x7ffe67f8feb4,487479645,0,0x0,8
tick,0x7ffe67f8feb4,487495608,0,0x0,8
tick,0x7ffe67f8feb4,487511645,0,0x0,8
tick,0x7ffe67f8feb4,487527583,0,0x0,8
tick,0x7ffe67f8feb4,487542680,0,0x0,8
tick,0x7ffe67f8feb4,487558798,0,0x0,8
tick,0x7ffe67f8feb4,487574869,0,0x0,8
tick,0x7ffe67f8feb4,487590955,0,0x0,8
tick,0x7ffe67f8feb4,487606128,0,0x0,8
tick,0x7ffe67f8feb4,487622205,0,0x0,8
tick,0x7ffe67f8feb4,487637489,0,0x0,8
tick,0x7ffe67f8feb4,487652676,0,0x0,8
tick,0x7ffe67f8feb4,487667671,0,0x0,8
tick,0x7ffe67f8feb4,487683697,0,0x0,8
tick,0x7ffe67f8feb4,487699683,0,0x0,8
tick,0x7ffe67f8feb4,487714770,0,0x0,8
tick,0x7ffe67f8feb4,487730774,0,0x0,8
tick,0x7ffe67f8feb4,487746795,0,0x0,8
tick,0x7ffe67f8feb4,487762764,0,0x0,8
tick,0x7ffe67f8feb4,487778769,0,0x0,8
tick,0x7ffe67f8feb4,487793704,0,0x0,8
tick,0x7ffe67f8feb4,487809853,0,0x0,8
tick,0x7ffe67f8feb4,487825704,0,0x0,8
tick,0x7ffe67f8feb4,487840849,0,0x0,8
tick,0x7ffe67f8feb4,487855969,0,0x0,8
tick,0x7ffe67f8feb4,487870670,0,0x0,8
tick,0x7ffe67f8feb4,487885815,0,0x0,8
tick,0x7ffe67f8feb4,487901850,0,0x0,8
tick,0x7ffe67f8feb4,487917806,0,0x0,8
tick,0x7ffe67f8feb4,487933833,0,0x0,8
tick,0x7ffe67f8feb4,487949839,0,0x0,8
tick,0x7ffe67f8feb4,487965345,0,0x0,8
tick,0x7ffe67f8feb4,487981391,0,0x0,8
tick,0x7ffe67f8feb4,487997385,0,0x0,8
tick,0x7ffe67f8feb4,488012735,0,0x0,8
tick,0x7ffe67f8feb4,488028050,0,0x0,8
tick,0x7ffe67f8feb4,488043731,0,0x0,8
tick,0x7ffe67f8feb4,488059731,0,0x0,8
tick,0x7ffe67f8feb4,488074888,0,0x0,8
tick,0x7ffe67f8feb4,488090758,0,0x0,8
tick,0x7ffe67f8feb4,488106226,0,0x0,8
tick,0x7ffe67f8feb4,488121744,0,0x0,8
tick,0x7ffe67f8feb4,488136767,0,0x0,8
tick,0x7ffe67f8feb4,488152742,0,0x0,8
tick,0x7ffe67f8feb4,488167968,0,0x0,8
tick,0x7ffe67f8feb4,488183814,0,0x0,8
tick,0x7ffe67f8feb4,488199976,0,0x0,8
tick,0x7ffe67f8feb4,488214768,0,0x0,8
tick,0x7ffe67f8feb4,488229979,0,0x0,8
tick,0x7ffe67f8feb4,488245179,0,0x0,8
tick,0x7ffe67f8feb4,488260795,0,0x0,8
tick,0x7ffe67f8feb4,488276261,0,0x0,8
tick,0x7ffe67f8feb4,488291746,0,0x0,8
tick,0x7ffe67f8feb4,488307784,0,0x0,8
tick,0x7ffe67f8feb4,488323751,0,0x0,8
tick,0x7ffe67f8feb4,488339200,0,0x0,8
tick,0x7ffe67f8feb4,488354807,0,0x0,8
tick,0x7ffe67f8feb4,488371427,0,0x0,8
tick,0x7ffe67f8feb4,488386817,0,0x0,8
tick,0x7ffe67f8feb4,488402852,0,0x0,8
tick,0x7ffe67f8feb4,488418809,0,0x0,8
tick,0x7ffe67f8feb4,488434309,0,0x0,8
tick,0x7ffe67f8feb4,488449925,0,0x0,8
tick,0x7ffe67f8feb4,488465157,0,0x0,8
tick,0x7ffe67f8feb4,488480811,0,0x0,8
tick,0x7ffe67f8feb4,488496297,0,0x0,8
tick,0x7ffe67f8feb4,488511468,0,0x0,8
tick,0x7ffe67f8feb4,488527292,0,0x0,8
tick,0x7ffe67f8feb4,488542746,0,0x0,8
tick,0x7ffe67f8feb4,488558316,0,0x0,8
tick,0x7ffe67f8feb4,488573836,0,0x0,8
tick,0x7ffe67f8feb4,488588919,0,0x0,8
tick,0x7ffe67f8feb4,488604885,0,0x0,8
tick,0x7ffe67f8feb4,488620534,0,0x0,8
tick,0x7ffe67f8feb4,488636754,0,0x0,8
tick,0x7ffe67f8feb4,488651561,0,0x0,8
tick,0x7ffe67f8feb4,488667777,0,0x0,8
tick,0x7ffe67f8feb4,488682784,0,0x0,8
tick,0x7ffe67f8feb4,488698758,0,0x0,8
tick,0x7ffe67f8feb4,488713932,0,0x0,8
tick,0x7ffe67f8feb4,488729558,0,0x0,8
tick,0x7ffe67f8feb4,488745550,0,0x0,8
tick,0x7ffe67f8feb4,488761558,0,0x0,8
tick,0x7ffe67f8feb4,488777585,0,0x0,8
tick,0x7ffe67f8feb4,488793551,0,0x0,8
tick,0x7ffe67f8feb4,488808543,0,0x0,8
tick,0x7ffe67f8feb4,488824543,0,0x0,8
tick,0x7ffe67f8feb4,488840581,0,0x0,8
tick,0x7ffe67f8feb4,488856541,0,0x0,8
tick,0x7ffe67f8feb4,488871755,0,0x0,8
tick,0x7ffe67f8feb4,488886605,0,0x0,8
tick,0x7ffe67f8feb4,488902648,0,0x0,8
tick,0x7ffe67f8feb4,488918591,0,0x0,8
tick,0x7ffe67f8feb4,488933697,0,0x0,8
tick,0x7ffe67f8feb4,488949613,0,0x0,8
tick,0x7ffe67f8feb4,488964885,0,0x0,8
tick,0x7ffe67f8feb4,488980648,0,0x0,8
tick,0x7ffe67f8feb4,488995895,0,0x0,8
tick,0x7ffe67f8feb4,489010997,0,0x0,8
tick,0x7ffe67f8feb4,489026672,0,0x0,8
tick,0x7ffe67f8feb4,489042750,0,0x0,8
tick,0x7ffe67f8feb4,489058815,0,0x0,8
tick,0x7ffe67f8feb4,489073913,0,0x0,8
tick,0x7ffe67f8feb4,489089693,0,0x0,8
tick,0x7ffe67f8feb4,489104890,0,0x0,8
tick,0x7ffe67f8feb4,489120694,0,0x0,8
tick,0x7ffe67f8feb4,489136870,0,0x0,8
tick,0x7ffe67f8feb4,489152799,0,0x0,8
tick,0x7ffe67f8feb4,489168728,0,0x0,8
tick,0x7ffe67f8feb4,489185280,0,0x0,8
tick,0x7ffe67f8feb4,489200879,0,0x0,8
tick,0x7ffe67f8feb4,489215872,0,0x0,8
tick,0x7ffe67f8feb4,489231770,0,0x0,8
tick,0x7ffe67f8feb4,489246920,0,0x0,8
tick,0x7ffe67f8feb4,489262746,0,0x0,8
tick,0x7ffe67f8feb4,489278029,0,0x0,8
tick,0x7ffe67f8feb4,489293746,0,0x0,8
tick,0x7ffe67f8feb4,489309634,0,0x0,8
tick,0x7ffe67f8feb4,489325019,0,0x0,8
tick,0x7ffe67f8feb4,489340179,0,0x0,8
tick,0x7ffe67f8feb4,489356227,0,0x0,8
tick,0x7ffe67f8feb4,489372269,0,0x0,8
tick,0x7ffe67f8feb4,489388092,0,0x0,8
tick,0x7ffe67f8feb4,489404077,0,0x0,8
tick,0x7ffe67f8feb4,489419984,0,0x0,8
tick,0x7ffe67f8feb4,489435886,0,0x0,8
tick,0x7ffe67f8feb4,489451950,0,0x0,8
tick,0x7ffe67f8feb4,489467701,0,0x0,8
tick,0x7ffe67f8feb4,489483051,0,0x0,8
tick,0x7ffe67f8feb4,489498579,0,0x0,8
tick,0x7ffe67f8feb4,489513795,0,0x0,8
tick,0x7ffe67f8feb4,489529120,0,0x0,8
tick,0x7ffe67f8feb4,489543893,0,0x0,8
tick,0x7ffe67f8feb4,489559097,0,0x0,8
tick,0x7ffe67f8feb4,489575053,0,0x0,8
tick,0x7ffe67f8feb4,489591081,0,0x0,8
tick,0x7ffe67f8feb4,489606288,0,0x0,8
tick,0x7ffe67f8feb4,489621525,0,0x0,8
tick,0x7ffe67f8feb4,489637546,0,0x0,8
tick,0x7ffe67f8feb4,489653547,0,0x0,8
tick,0x7ffe67f8feb4,489669568,0,0x0,8
tick,0x7ffe67f8feb4,489685587,0,0x0,8
tick,0x7ffe67f8feb4,489700543,0,0x0,8
tick,0x7ffe67f8feb4,489715910,0,0x0,8
tick,0x7ffe67f8feb4,489731039,0,0x0,8
tick,0x7ffe67f8feb4,489747069,0,0x0,8
tick,0x7ffe67f8feb4,489763000,0,0x0,8
tick,0x7ffe67f8feb4,489778983,0,0x0,8
tick,0x7ffe67f8feb4,489794028,0,0x0,8
tick,0x7ffe67f8feb4,489809995,0,0x0,8
tick,0x7ffe67f8feb4,489825987,0,0x0,8
tick,0x7ffe67f8feb4,489841995,0,0x0,8
tick,0x7ffe67f8feb4,489858005,0,0x0,8
tick,0x7ffe67f8feb4,489873768,0,0x0,8
tick,0x7ffe67f8feb4,489889036,0,0x0,8
tick,0x7ffe67f8feb4,489904945,0,0x0,8
tick,0x7ffe67f8feb4,489920035,0,0x0,8
tick,0x7ffe67f8feb4,489936044,0,0x0,8
tick,0x7ffe67f8feb4,489952048,0,0x0,8
tick,0x7ffe67f8feb4,489968122,0,0x0,8
tick,0x7ffe67f8feb4,489983750,0,0x0,8
tick,0x7ffe67f8feb4,489999095,0,0x0,8
tick,0x7ffe67f8feb4,490014868,0,0x0,8
tick,0x7ffe67f8feb4,490029863,0,0x0,8
tick,0x7ffe67f8feb4,490045124,0,0x0,8
tick,0x7ffe67f8feb4,490060975,0,0x0,8
tick,0x7ffe67f8feb4,490076699,0,0x0,8
tick,0x7ffe67f8feb4,490091976,0,0x0,8
tick,0x7ffe67f8feb4,490107335,0,0x0,8
tick,0x7ffe67f8feb4,490122825,0,0x0,8
tick,0x7ffe67f8feb4,490138818,0,0x0,8
tick,0x7ffe67f8feb4,490154172,0,0x0,8
tick,0x7ffe67f8feb4,490169756,0,0x0,8
tick,0x7ffe67f8feb4,490185746,0,0x0,8
tick,0x7ffe67f8feb4,490200971,0,0x0,8
tick,0x7ffe67f8feb4,490216192,0,0x0,8
tick,0x7ffe67f8feb4,490231446,0,0x0,8
tick,0x7ffe67f8feb4,490247324,0,0x0,8
tick,0x7ffe67f8feb4,490262817,0,0x0,8
tick,0x7ffe67f8feb4,490278036,0,0x0,8
tick,0x7ffe67f8feb4,490293826,0,0x0,8
tick,0x7ffe67f8feb4,490309152,0,0x0,8
tick,0x7ffe67f8feb4,490324987,0,0x0,8
tick,0x7ffe67f8feb4,490341028,0,0x0,8
tick,0x7ffe67f8feb4,490356324,0,0x0,8
tick,0x7ffe67f8feb4,490371853,0,0x0,8
tick,0x7ffe67f8feb4,490387735,0,0x0,8
tick,0x7ffe67f8feb4,490403783,0,0x0,8
tick,0x7ffe67f8feb4,490418784,0,0x0,8
tick,0x7ffe67f8feb4,490433776,0,0x0,8
tick,0x7ffe67f8feb4,490448931,0,0x0,8
tick,0x7ffe67f8feb4,490464953,0,0x0,8
tick,0x7ffe67f8feb4,490480088,0,0x0,8
tick,0x7ffe67f8feb4,490495934,0,0x0,8
tick,0x7ffe67f8feb4,490511773,0,0x0,8
tick,0x7ffe67f8feb4,490527965,0,0x0,8
tick,0x7ffe67f8feb4,490543795,0,0x0,8
tick,0x7ffe67f8feb4,490559771,0,0x0,8
tick,0x7ffe67f8feb4,490574935,0,0x0,8
tick,0x7ffe67f8feb4,490590496,0,0x0,8
tick,0x7ffe67f8feb4,490605968,0,0x0,8
tick,0x7ffe67f8feb4,490622261,0,0x0,8
tick,0x7ffe67f8feb4,490637549,0,0x0,8
tick,0x7ffe67f8feb4,490653512,0,0x0,8
tick,0x7ffe67f8feb4,490669165,0,0x0,8
tick,0x7ffe67f8feb4,490683802,0,0x0,8
tick,0x7ffe67f8feb4,490698915,0,0x0,8
tick,0x7ffe67f8feb4,490713765,0,0x0,8
tick,0x7ffe67f8feb4,490728822,0,0x0,8
tick,0x7ffe67f8feb4,490744149,0,0x0,8
tick,0x7ffe67f8feb4,490760139,0,0x0,8
tick,0x7ffe67f8feb4,490775511,0,0x0,8
tick,0x7ffe67f8feb4,490791499,0,0x0,8
tick,0x7ffe67f8feb4,490807496,0,0x0,8
tick,0x7ffe67f8feb4,490823482,0,0x0,8
tick,0x7ffe67f8feb4,490839474,0,0x0,8
tick,0x7ffe67f8feb4,490855656,0,0x0,8
tick,0x7ffe67f8feb4,490871607,0,0x0,8
tick,0x7ffe67f8feb4,490886666,0,0x0,8
tick,0x7ffe67f8feb4,490901800,0,0x0,8
tick,0x7ffe67f8feb4,490917208,0,0x0,8
tick,0x7ffe67f8feb4,490932761,0,0x0,8
tick,0x7ffe67f8feb4,490948784,0,0x0,8
tick,0x7ffe67f8feb4,490964124,0,0x0,8
tick,0x7ffe67f8feb4,490979417,0,0x0,8
tick,0x7ffe67f8feb4,490994753,0,0x0,8
tick,0x7ffe67f8feb4,491010296,0,0x0,8
tick,0x7ffe67f8feb4,491025717,0,0x0,8
tick,0x7ffe67f8feb4,491041687,0,0x0,8
tick,0x7ffe67f8feb4,491057759,0,0x0,8
tick,0x7ffe67f8feb4,491073825,0,0x0,8
tick,0x7ffe67f8feb4,491089008,0,0x0,8
tick,0x7ffe67f8feb4,491104534,0,0x0,8
tick,0x7ffe67f8feb4,491119637,0,0x0,8
tick,0x7ffe67f8feb4,491134224,0,0x0,8
tick,0x7ffe67f8feb4,491150235,0,0x0,8
tick,0x7ffe67f8feb4,491165441,0,0x0,8
tick,0x7ffe67f8feb4,491180403,0,0x0,8
tick,0x7ffe67f8feb4,491195816,0,0x0,8
tick,0x7ffe67f8feb4,491210712,0,0x0,8
tick,0x7ffe67f8feb4,491225713,0,0x0,8
tick,0x7ffe67f8feb4,491241708,0,0x0,8
tick,0x7ffe67f8feb4,491257759,0,0x0,8
tick,0x7ffe67f8feb4,491272793,0,0x0,8
tick,0x7ffe67f8feb4,491288853,0,0x0,8
tick,0x7ffe67f8feb4,491304561,0,0x0,8
tick,0x7ffe67f8feb4,491318783,0,0x0,8
tick,0x7ffe67f8feb4,491333799,0,0x0,8
tick,0x7ffe67f8feb4,491348958,0,0x0,8
tick,0x7ffe67f8feb4,491364933,0,0x0,8
tick,0x7ffe67f8feb4,491379818,0,0x0,8
tick,0x7ffe67f8feb4,491395146,0,0x0,8
tick,0x7ffe67f8feb4,491409811,0,0x0,8
tick,0x7ffe67f8feb4,491425261,0,0x0,8
tick,0x7ffe67f8feb4,491440211,0,0x0,8
tick,0x7ffe67f8feb4,491455210,0,0x0,8
tick,0x7ffe67f8feb4,491471517,0,0x0,8
tick,0x7ffe67f8feb4,491488579,0,0x0,8
tick,0x7ffe67f8feb4,491503567,0,0x0,8
tick,0x7ffe67f8feb4,491518133,0,0x0,8
tick,0x7ffe67f8feb4,491533270,0,0x0,8
tick,0x7ffe67f8feb4,491549239,0,0x0,8
tick,0x7ffe67f8feb4,491564822,0,0x0,8
tick,0x7ffe67f8feb4,491579597,0,0x0,8
tick,0x7ffe67f8feb4,491595649,0,0x0,8
tick,0x7ffe67f8feb4,491610879,0,0x0,8
tick,0x7ffe67f8feb4,491625767,0,0x0,8
tick,0x7ffe67f8feb4,491641750,0,0x0,8
tick,0x7ffe67f8feb4,491656866,0,0x0,8
tick,0x7ffe67f8feb4,491672780,0,0x0,8
tick,0x7ffe67f8feb4,491688912,0,0x0,8
tick,0x7ffe67f8feb4,491704531,0,0x0,8
tick,0x7ffe67f8feb4,491720211,0,0x0,8
tick,0x7ffe67f8feb4,491734766,0,0x0,8
tick,0x7ffe67f8feb4,491749975,0,0x0,8
tick,0x7ffe67f8feb4,491764964,0,0x0,8
tick,0x7ffe67f8feb4,491780965,0,0x0,8
tick,0x7ffe67f8feb4,491795975,0,0x0,8
tick,0x7ffe67f8feb4,491811030,0,0x0,8
tick,0x7ffe67f8feb4,491827672,0,0x0,8
tick,0x7ffe67f8feb4,491842247,0,0x0,8
tick,0x7ffe67f8feb4,491858272,0,0x0,8
tick,0x7ffe67f8feb4,491873012,0,0x0,8
tick,0x7ffe67f8feb4,491889580,0,0x0,8
tick,0x7ffe67f8feb4,491904716,0,0x0,8
tick,0x7ffe67f8feb4,491918855,0,0x0,8
tick,0x7ffe67f8feb4,491934992,0,0x0,8
tick,0x7ffe67f8feb4,491949966,0,0x0,8
tick,0x7ffe67f8feb4,491965783,0,0x0,8
tick,0x7ffe67f8feb4,491981009,0,0x0,8
tick,0x7ffe67f8feb4,491996572,0,0x0,8
tick,0x7ffe67f8feb4,492011795,0,0x0,8
tick,0x7ffe67f8feb4,492027163,0,0x0,8
tick,0x7ffe67f8feb4,492042724,0,0x0,8
tick,0x7ffe67f8feb4,492058572,0,0x0,8
tick,0x7ffe67f8feb4,492073701,0,0x0,8
tick,0x7ffe67f8feb4,492088999,0,0x0,8
tick,0x7ffe67f8feb4,492104041,0,0x0,8
tick,0x7ffe67f8feb4,492119301,0,0x0,8
tick,0x7ffe67f8feb4,492134186,0,0x0,8
tick,0x7ffe67f8feb4,492149749,0,0x0,8
tick,0x7ffe67f8feb4,492164982,0,0x0,8
tick,0x7ffe67f8feb4,492180499,0,0x0,8
tick,0x7ffe67f8feb4,492195125,0,0x0,8
tick,0x7ffe67f8feb4,492210372,0,0x0,8
tick,0x7ffe67f8feb4,492226354,0,0x0,8
tick,0x7ffe67f8feb4,492241469,0,0x0,8
tick,0x7ffe67f8feb4,492256551,0,0x0,8
tick,0x7ffe67f8feb4,492272564,0,0x0,8
tick,0x7ffe67f8feb4,492288831,0,0x0,8
tick,0x7ffe67f8feb4,492305588,0,0x0,8
tick,0x7ffe67f8feb4,492318467,0,0x0,8
tick,0x7ffe67f8feb4,492333680,0,0x0,8
tick,0x7ffe67f8feb4,492349196,0,0x0,8
tick,0x7ffe67f8feb4,492364309,0,0x0,8
tick,0x7ffe67f8feb4,492380400,0,0x0,8
tick,0x7ffe67f8feb4,492396443,0,0x0,8
tick,0x7ffe67f8feb4,492411526,0,0x0,8
tick,0x7ffe67f8feb4,492427426,0,0x0,8
tick,0x7ffe67f8feb4,492443514,0,0x0,8
tick,0x7ffe67f8feb4,492459606,0,0x0,8
tick,0x7ffe67f8feb4,492475163,0,0x0,8
tick,0x7ffe67f8feb4,492491500,0,0x0,8
tick,0x7ffe67f8feb4,492506982,0,0x0,8
tick,0x7ffe67f8feb4,492523216,0,0x0,8
tick,0x7ffe67f8feb4,492538932,0,0x0,8
tick,0x7ffe67f8feb4,492554878,0,0x0,8
tick,0x7ffe67f8feb4,492571000,0,0x0,8
tick,0x7ffe67f8feb4,492587334,0,0x0,8
tick,0x7ffe67f8feb4,492602615,0,0x0,8
tick,0x7ffe67f8feb4,492618571,0,0x0,8
tick,0x7ffe67f8feb4,492633821,0,0x0,8
tick,0x7ffe67f8feb4,492649783,0,0x0,8
tick,0x7ffe67f8feb4,492665781,0,0x0,8
tick,0x7ffe67f8feb4,492680902,0,0x0,8
tick,0x7ffe67f8feb4,492696829,0,0x0,8
tick,0x7ffe67f8feb4,492712774,0,0x0,8
tick,0x7ffe67f8feb4,492728798,0,0x0,8
tick,0x7ffe67f8feb4,492743789,0,0x0,8
tick,0x7ffe67f8feb4,492758814,0,0x0,8
tick,0x7ffe67f8feb4,492773834,0,0x0,8
tick,0x7ffe67f8feb4,492788789,0,0x0,8
tick,0x7ffe67f8feb4,492804742,0,0x0,8
tick,0x7ffe67f8feb4,492821033,0,0x0,8
tick,0x7ffe67f8feb4,492835758,0,0x0,8
tick,0x7ffe67f8feb4,492850750,0,0x0,8
tick,0x7ffe67f8feb4,492866765,0,0x0,8
tick,0x7ffe67f8feb4,492882762,0,0x0,8
tick,0x7ffe67f8feb4,492898764,0,0x0,8
tick,0x7ffe67f8feb4,492917076,0,0x0,8
tick,0x7ffe67f8feb4,492929793,0,0x0,8
tick,0x7ffe67f8feb4,492945769,0,0x0,8
tick,0x7ffe67f8feb4,492961695,0,0x0,8
tick,0x7ffe67f8feb4,492976776,0,0x0,8
tick,0x7ffe67f8feb4,492992819,0,0x0,8
tick,0x7ffe67f8feb4,493008452,0,0x0,8
tick,0x7ffe67f8feb4,493023925,0,0x0,8
tick,0x7ffe67f8feb4,493040003,0,0x0,8
tick,0x7ffe67f8feb4,493056107,0,0x0,8
tick,0x7ffe67f8feb4,493069798,0,0x0,8
tick,0x7ffe67f8feb4,493085710,0,0x0,8
tick,0x7ffe67f8feb4,493101273,0,0x0,8
tick,0x7ffe67f8feb4,493116683,0,0x0,8
tick,0x7ffe67f8feb4,493131757,0,0x0,8
tick,0x7ffe67f8feb4,493147651,0,0x0,8
tick,0x7ffe67f8feb4,493163770,0,0x0,8
tick,0x7ffe67f8feb4,493179607,0,0x0,8
tick,0x7ffe67f8feb4,493194270,0,0x0,8
tick,0x7ffe67f8feb4,493209764,0,0x0,8
tick,0x7ffe67f8feb4,493225681,0,0x0,8
tick,0x7ffe67f8feb4,493240954,0,0x0,8
tick,0x7ffe67f8feb4,493256883,0,0x0,8
tick,0x7ffe67f8feb4,493273251,0,0x0,8
tick,0x7ffe67f8feb4,493288334,0,0x0,8
tick,0x7ffe67f8feb4,493302744,0,0x0,8
tick,0x7ffe67f8feb4,493317747,0,0x0,8
tick,0x7ffe67f8feb4,493332996,0,0x0,8
tick,0x7ffe67f8feb4,493348774,0,0x0,8
tick,0x7ffe67f8feb4,493364598,0,0x0,8
tick,0x7ffe67f8feb4,493380731,0,0x0,8
tick,0x7ffe67f8feb4,493396601,0,0x0,8
tick,0x7ffe67f8feb4,493411203,0,0x0,8
tick,0x7ffe67f8feb4,493426753,0,0x0,8
tick,0x7ffe67f8feb4,493442843,0,0x0,8
tick,0x7ffe67f8feb4,493458737,0,0x0,8
tick,0x7ffe67f8feb4,493474843,0,0x0,8
tick,0x7ffe67f8feb4,493489758,0,0x0,8
tick,0x7ffe67f8feb4,493505384,0,0x0,8
tick,0x7ffe67f8feb4,493520460,0,0x0,8
tick,0x7ffe67f8feb4,493536571,0,0x0,8
tick,0x7ffe67f8feb4,493552206,0,0x0,8
tick,0x7ffe67f8feb4,493568215,0,0x0,8
tick,0x7ffe67f8feb4,493583383,0,0x0,8
tick,0x7ffe67f8feb4,493599441,0,0x0,8
tick,0x7ffe67f8feb4,493614590,0,0x0,8
tick,0x7ffe67f8feb4,493629850,0,0x0,8
tick,0x7ffe67f8feb4,493645941,0,0x0,8
tick,0x7ffe67f8feb4,493662067,0,0x0,8
tick,0x7ffe67f8feb4,493678184,0,0x0,8
tick,0x7ffe67f8feb4,493693266,0,0x0,8
tick,0x7ffe67f8feb4,493709382,0,0x0,8
tick,0x7ffe67f8feb4,493725158,0,0x0,8
tick,0x7ffe67f8feb4,493740150,0,0x0,8
tick,0x7ffe67f8feb4,493755859,0,0x0,8
tick,0x7ffe67f8feb4,493771946,0,0x0,8
tick,0x7ffe67f8feb4,493787949,0,0x0,8
tick,0x7ffe67f8feb4,493802727,0,0x0,8
tick,0x7ffe67f8feb4,493818754,0,0x0,8
tick,0x7ffe67f8feb4,493834745,0,0x0,8
tick,0x7ffe67f8feb4,493849767,0,0x0,8
tick,0x7ffe67f8feb4,493864742,0,0x0,8
tick,0x7ffe67f8feb4,493879734,0,0x0,8
tick,0x7ffe67f8feb4,493894894,0,0x0,8
tick,0x7ffe67f8feb4,493910973,0,0x0,8
tick,0x7ffe67f8feb4,493926773,0,0x0,8
tick,0x7ffe67f8feb4,493942772,0,0x0,8
tick,0x7ffe67f8feb4,493958711,0,0x0,8
tick,0x7ffe67f8feb4,493973675,0,0x0,8
tick,0x7ffe67f8feb4,493989693,0,0x0,8
tick,0x7ffe67f8feb4,494005817,0,0x0,8
tick,0x7ffe67f8feb4,494021669,0,0x0,8
tick,0x7ffe67f8feb4,494036320,0,0x0,8
tick,0x7ffe67f8feb4,494052422,0,0x0,8
tick,0x7ffe67f8feb4,494067704,0,0x0,8
tick,0x7ffe67f8feb4,494082893,0,0x0,8
tick,0x7ffe67f8feb4,494098682,0,0x0,8
tick,0x7ffe67f8feb4,494114223,0,0x0,8
tick,0x7ffe67f8feb4,494128844,0,0x0,8
tick,0x7ffe67f8feb4,494143791,0,0x0,8
tick,0x7ffe67f8feb4,494159217,0,0x0,8
tick,0x7ffe67f8feb4,494174739,0,0x0,8
tick,0x7ffe67f8feb4,494190139,0,0x0,8
tick,0x7ffe67f8feb4,494206179,0,0x0,8
tick,0x7ffe67f8feb4,494221707,0,0x0,8
tick,0x7ffe67f8feb4,494237738,0,0x0,8
tick,0x7ffe67f8feb4,494253760,0,0x0,8
tick,0x7ffe67f8feb4,494268989,0,0x0,8
tick,0x7ffe67f8feb4,494284902,0,0x0,8
tick,0x7ffe67f8feb4,494300924,0,0x0,8
tick,0x7ffe67f8feb4,494317231,0,0x0,8
tick,0x7ffe67f8feb4,494332994,0,0x0,8
tick,0x7ffe67f8feb4,494348914,0,0x0,8
tick,0x7ffe67f8feb4,494364924,0,0x0,8
tick,0x7ffe67f8feb4,494380906,0,0x0,8
tick,0x7ffe67f8feb4,494396990,0,0x0,8
tick,0x7ffe67f8feb4,494412991,0,0x0,8
tick,0x7ffe67f8feb4,494428900,0,0x0,8
tick,0x7ffe67f8feb4,494444910,0,0x0,8
tick,0x7ffe67f8feb4,494460959,0,0x0,8
tick,0x7ffe67f8feb4,494476924,0,0x0,8
tick,0x7ffe67f8feb4,494492921,0,0x0,8
tick,0x7ffe67f8feb4,494507953,0,0x0,8
tick,0x7ffe67f8feb4,494523944,0,0x0,8
tick,0x7ffe67f8feb4,494539933,0,0x0,8
tick,0x7ffe67f8feb4,494556215,0,0x0,8
tick,0x7ffe67f8feb4,494570915,0,0x0,8
tick,0x7ffe67f8feb4,494586911,0,0x0,8
tick,0x7ffe67f8feb4,494602974,0,0x0,8
tick,0x7ffe67f8feb4,494618917,0,0x0,8
tick,0x7ffe67f8feb4,494634921,0,0x0,8
tick,0x7ffe67f8feb4,494649983,0,0x0,8
tick,0x7ffe67f8feb4,494665227,0,0x0,8
tick,0x7ffe67f8feb4,494680615,0,0x0,8
tick,0x7ffe67f8feb4,494695917,0,0x0,8
tick,0x7ffe67f8feb4,494711986,0,0x0,8
tick,0x7ffe67f8feb4,494727968,0,0x0,8
tick,0x7ffe67f8feb4,494743791,0,0x0,8
tick,0x7ffe67f8feb4,494759018,0,0x0,8
tick,0x7ffe67f8feb4,494775021,0,0x0,8
tick,0x7ffe67f8feb4,494791019,0,0x0,8
tick,0x7ffe67f8feb4,494807002,0,0x0,8
tick,0x7ffe67f8feb4,494823071,0,0x0,8
tick,0x7ffe67f8feb4,494838996,0,0x0,8
tick,0x7ffe67f8feb4,494855179,0,0x0,8
tick,0x7ffe67f8feb4,494869999,0,0x0,8
tick,0x7ffe67f8feb4,494886003,0,0x0,8
tick,0x7ffe67f8feb4,494901133,0,0x0,8
tick,0x7ffe67f8feb4,494917016,0,0x0,8
tick,0x7ffe67f8feb4,494932807,0,0x0,8
tick,0x7ffe67f8feb4,494948030,0,0x0,8
tick,0x7ffe67f8feb4,494963819,0,0x0,8
tick,0x7ffe67f8feb4,494979692,0,0x0,8
tick,0x7ffe67f8feb4,494994959,0,0x0,8
tick,0x7ffe67f8feb4,495010618,0,0x0,8
tick,0x7ffe67f8feb4,495026675,0,0x0,8
tick,0x7ffe67f8feb4,495042521,0,0x0,8
tick,0x7ffe67f8feb4,495057843,0,0x0,8
tick,0x7ffe67f8feb4,495072877,0,0x0,8
tick,0x7ffe67f8feb4,495088791,0,0x0,8
tick,0x7ffe67f8feb4,495103804,0,0x0,8
tick,0x7ffe67f8feb4,495118968,0,0x0,8
tick,0x7ffe67f8feb4,495134916,0,0x0,8
tick,0x7ffe67f8feb4,495150256,0,0x0,8
tick,0x7ffe67f8feb4,495165571,0,0x0,8
tick,0x7ffe67f8feb4,495181570,0,0x0,8
tick,0x7ffe67f8feb4,495197576,0,0x0,8
tick,0x7ffe67f8feb4,495213658,0,0x0,8
tick,0x7ffe67f8feb4,495228637,0,0x0,8
tick,0x7ffe67f8feb4,495244004,0,0x0,8
tick,0x7ffe67f8feb4,495259167,0,0x0,8
tick,0x7ffe67f8feb4,495274889,0,0x0,8
tick,0x7ffe67f8feb4,495290876,0,0x0,8
tick,0x7ffe67f8feb4,495305812,0,0x0,8
tick,0x7ffe67f8feb4,495321194,0,0x0,8
tick,0x7ffe67f8feb4,495336860,0,0x0,8
tick,0x7ffe67f8feb4,495352786,0,0x0,8
tick,0x7ffe67f8feb4,495368798,0,0x0,8
tick,0x7ffe67f8feb4,495383808,0,0x0,8
tick,0x7ffe67f8feb4,495398976,0,0x0,8
tick,0x7ffe67f8feb4,495414915,0,0x0,8
tick,0x7ffe67f8feb4,495430910,0,0x0,8
tick,0x7ffe67f8feb4,495446756,0,0x0,8
tick,0x7ffe67f8feb4,495462034,0,0x0,8
tick,0x7ffe67f8feb4,495477137,0,0x0,8
tick,0x7ffe67f8feb4,495493103,0,0x0,8
tick,0x7ffe67f8feb4,495509025,0,0x0,8
tick,0x7ffe67f8feb4,495525020,0,0x0,8
tick,0x7ffe67f8feb4,495539976,0,0x0,8
tick,0x7ffe67f8feb4,495555955,0,0x0,8
tick,0x7ffe67f8feb4,495570994,0,0x0,8
tick,0x7ffe67f8feb4,495585906,0,0x0,8
tick,0x7ffe67f8feb4,495601895,0,0x0,8
tick,0x7ffe67f8feb4,495616890,0,0x0,8
tick,0x7ffe67f8feb4,495632804,0,0x0,8
tick,0x7ffe67f8feb4,495648781,0,0x0,8
tick,0x7ffe67f8feb4,495663934,0,0x0,8
tick,0x7ffe67f8feb4,495679764,0,0x0,8
tick,0x7ffe67f8feb4,495695808,0,0x0,8
tick,0x7ffe67f8feb4,495711818,0,0x0,8
tick,0x7ffe67f8feb4,495726989,0,0x0,8
tick,0x7ffe67f8feb4,495742933,0,0x0,8
tick,0x7ffe67f8feb4,495757975,0,0x0,8
tick,0x7ffe67f8feb4,495772821,0,0x0,8
tick,0x7ffe67f8feb4,495788815,0,0x0,8
tick,0x7ffe67f8feb4,495803883,0,0x0,8
tick,0x7ffe67f8feb4,495818790,0,0x0,8
tick,0x7ffe67f8feb4,495834852,0,0x0,8
tick,0x7ffe67f8feb4,495849793,0,0x0,8
tick,0x7ffe67f8feb4,495864907,0,0x0,8
tick,0x7ffe67f8feb4,495879808,0,0x0,8
tick,0x7ffe67f8feb4,495894864,0,0x0,8
tick,0x7ffe67f8feb4,495910952,0,0x0,8
tick,0x7ffe67f8feb4,495926887,0,0x0,8
tick,0x7ffe67f8feb4,495943037,0,0x0,8
tick,0x7ffe67f8feb4,495957984,0,0x0,8
tick,0x7ffe67f8feb4,495974271,0,0x0,8
tick,0x7ffe67f8feb4,495989933,0,0x0,8
tick,0x7ffe67f8feb4,496005082,0,0x0,8
tick,0x7ffe67f8feb4,496020627,0,0x0,8
tick,0x7ffe67f8feb4,496036089,0,0x0,8
tick,0x7ffe67f8feb4,496051613,0,0x0,8
tick,0x7ffe67f8feb4,496066799,0,0x0,8
tick,0x7ffe67f8feb4,496081371,0,0x0,8
tick,0x7ffe67f8feb4,496097231,0,0x0,8
tick,0x7ffe67f8feb4,496112817,0,0x0,8
tick,0x7ffe67f8feb4,496129098,0,0x0,8
tick,0x7ffe67f8feb4,496143994,0,0x0,8
tick,0x7ffe67f8feb4,496159995,0,0x0,8
tick,0x7ffe67f8feb4,496177538,0,0x0,8
tick,0x7ffe67f8feb4,496191720,0,0x0,8
tick,0x7ffe67f8feb4,496206296,0,0x0,8
tick,0x7ffe67f8feb4,496221378,0,0x0,8
tick,0x7ffe67f8feb4,496236332,0,0x0,8
tick,0x7ffe67f8feb4,496251647,0,0x0,8
tick,0x7ffe67f8feb4,496267252,0,0x0,8
tick,0x7ffe67f8feb4,496283361,0,0x0,8
tick,0x7ffe67f8feb4,496299268,0,0x0,8
tick,0x7ffe67f8feb4,496314645,0,0x0,8
tick,0x7ffe67f8feb4,496329753,0,0x0,8
tick,0x7ffe67f8feb4,496345424,0,0x0,8
tick,0x7ffe67f8feb4,496360893,0,0x0,8
tick,0x7ffe67f8feb4,496376880,0,0x0,8
tick,0x7ffe67f8feb4,496392852,0,0x0,8
tick,0x7ffe67f8feb4,496408775,0,0x0,8
tick,0x7ffe67f8feb4,496424816,0,0x0,8
tick,0x7ffe67f8feb4,496439952,0,0x0,8
tick,0x7ffe67f8feb4,496455163,0,0x0,8
tick,0x7ffe67f8feb4,496470705,0,0x0,8
tick,0x7ffe67f8feb4,496485994,0,0x0,8
tick,0x7ffe67f8feb4,496501265,0,0x0,8
tick,0x7ffe67f8feb4,496516627,0,0x0,8
tick,0x7ffe67f8feb4,496531704,0,0x0,8
tick,0x7ffe67f8feb4,496546979,0,0x0,8
tick,0x7ffe67f8feb4,496562803,0,0x0,8
tick,0x7ffe67f8feb4,496577968,0,0x0,8
tick,0x7ffe67f8feb4,496593903,0,0x0,8
tick,0x7ffe67f8feb4,496609910,0,0x0,8
tick,0x7ffe67f8feb4,496625710,0,0x0,8
tick,0x7ffe67f8feb4,496640366,0,0x0,8
tick,0x7ffe67f8feb4,496656368,0,0x0,8
tick,0x7ffe67f8feb4,496671023,0,0x0,8
tick,0x7ffe67f8feb4,496686660,0,0x0,8
tick,0x7ffe67f8feb4,496701779,0,0x0,8
tick,0x7ffe67f8feb4,496717756,0,0x0,8
tick,0x7ffe67f8feb4,496733772,0,0x0,8
tick,0x7ffe67f8feb4,496748394,0,0x0,8
tick,0x7ffe67f8feb4,496763723,0,0x0,8
tick,0x7ffe67f8feb4,496779854,0,0x0,8
tick,0x7ffe67f8feb4,496795232,0,0x0,8
tick,0x7ffe67f8feb4,496811154,0,0x0,8
tick,0x7ffe67f8feb4,496827175,0,0x0,8
tick,0x7ffe67f8feb4,496843156,0,0x0,8
tick,0x7ffe67f8feb4,496859169,0,0x0,8
tick,0x7ffe67f8feb4,496874153,0,0x0,8
tick,0x7ffe67f8feb4,496890175,0,0x0,8
tick,0x7ffe67f8feb4,496905929,0,0x0,8
tick,0x7ffe67f8feb4,496921774,0,0x0,8
tick,0x7ffe67f8feb4,496936932,0,0x0,8
tick,0x7ffe67f8feb4,496952751,0,0x0,8
tick,0x7ffe67f8feb4,496968796,0,0x0,8
tick,0x7ffe67f8feb4,496984995,0,0x0,8
tick,0x7ffe67f8feb4,497000592,0,0x0,8
tick,0x7ffe67f8feb4,497015831,0,0x0,8
tick,0x7ffe67f8feb4,497031256,0,0x0,8
tick,0x7ffe67f8feb4,497046847,0,0x0,8
tick,0x7ffe67f8feb4,497061682,0,0x0,8
tick,0x7ffe67f8feb4,497077106,0,0x0,8
tick,0x7ffe67f8feb4,497092833,0,0x0,8
tick,0x7ffe67f8feb4,497108842,0,0x0,8
tick,0x7ffe67f8feb4,497124207,0,0x0,8
tick,0x7ffe67f8feb4,497140210,0,0x0,8
tick,0x7ffe67f8feb4,497155804,0,0x0,8
tick,0x7ffe67f8feb4,497171593,0,0x0,8
tick,0x7ffe67f8feb4,497186830,0,0x0,8
tick,0x7ffe67f8feb4,497201828,0,0x0,8
tick,0x7ffe67f8feb4,497217810,0,0x0,8
tick,0x7ffe67f8feb4,497233305,0,0x0,8
tick,0x7ffe67f8feb4,497249428,0,0x0,8
tick,0x7ffe67f8feb4,497264950,0,0x0,8
tick,0x7ffe67f8feb4,497280265,0,0x0,8
tick,0x7ffe67f8feb4,497295938,0,0x0,8
tick,0x7ffe67f8feb4,497311647,0,0x0,8
tick,0x7ffe67f8feb4,497326430,0,0x0,8
tick,0x7ffe67f8feb4,497342094,0,0x0,8
tick,0x7ffe67f8feb4,497356934,0,0x0,8
tick,0x7ffe67f8feb4,497372796,0,0x0,8
tick,0x7ffe67f8feb4,497388945,0,0x0,8
tick,0x7ffe67f8feb4,497404964,0,0x0,8
tick,0x7ffe67f8feb4,497419948,0,0x0,8
tick,0x7ffe67f8feb4,497435946,0,0x0,8
tick,0x7ffe67f8feb4,497451690,0,0x0,8
tick,0x7ffe67f8feb4,497466934,0,0x0,8
tick,0x7ffe67f8feb4,497482797,0,0x0,8
tick,0x7ffe67f8feb4,497506070,0,0x0,8
tick,0x7ffe67f8feb4,497514804,0,0x0,8
tick,0x7ffe67f8feb4,497529963,0,0x0,8
tick,0x7ffe67f8feb4,497544709,0,0x0,8
tick,0x7ffe67f8feb4,497559950,0,0x0,8
tick,0x7ffe67f8feb4,497574940,0,0x0,8
tick,0x7ffe67f8feb4,497590540,0,0x0,8
tick,0x7ffe67f8feb4,497606187,0,0x0,8
tick,0x7ffe67f8feb4,497621779,0,0x0,8
tick,0x7ffe67f8feb4,497637533,0,0x0,8
tick,0x7ffe67f8feb4,497652781,0,0x0,8
tick,0x7ffe67f8feb4,497668554,0,0x0,8
tick,0x7ffe67f8feb4,497684613,0,0x0,8
tick,0x7ffe67f8feb4,497700774,0,0x0,8
tick,0x7ffe67f8feb4,497716283,0,0x0,8
tick,0x7ffe67f8feb4,497731025,0,0x0,8
tick,0x7ffe67f8feb4,497747057,0,0x0,8
tick,0x7ffe67f8feb4,497761843,0,0x0,8
tick,0x7ffe67f8feb4,497777261,0,0x0,8
tick,0x7ffe67f8feb4,497793255,0,0x0,8
tick,0x7ffe67f8feb4,497809314,0,0x0,8
tick,0x7ffe67f8feb4,497825257,0,0x0,8
tick,0x7ffe67f8feb4,497841241,0,0x0,8
tick,0x7ffe67f8feb4,497857375,0,0x0,8
tick,0x7ffe67f8feb4,497873271,0,0x0,8
tick,0x7ffe67f8feb4,497888268,0,0x0,8
tick,0x7ffe67f8feb4,497903426,0,0x0,8
tick,0x7ffe67f8feb4,497919150,0,0x0,8
tick,0x7ffe67f8feb4,497934756,0,0x0,8
tick,0x7ffe67f8feb4,497949899,0,0x0,8
tick,0x7ffe67f8feb4,497965753,0,0x0,8
tick,0x7ffe67f8feb4,497980977,0,0x0,8
tick,0x7ffe67f8feb4,497995810,0,0x0,8
tick,0x7ffe67f8feb4,498011849,0,0x0,8
tick,0x7ffe67f8feb4,498027797,0,0x0,8
tick,0x7ffe67f8feb4,498044063,0,0x0,8
tick,0x7ffe67f8feb4,498058466,0,0x0,8
tick,0x7ffe67f8feb4,498073313,0,0x0,8
tick,0x7ffe67f8feb4,498088620,0,0x0,8
tick,0x7ffe67f8feb4,498103765,0,0x0,8
tick,0x7ffe67f8feb4,498118910,0,0x0,8
tick,0x7ffe67f8feb4,498133740,0,0x0,8
tick,0x7ffe67f8feb4,498149783,0,0x0,8
tick,0x7ffe67f8feb4,498165392,0,0x0,8
tick,0x7ffe67f8feb4,498180533,0,0x0,8
tick,0x7ffe67f8feb4,498195531,0,0x0,8
tick,0x7ffe67f8feb4,498210767,0,0x0,8
tick,0x7ffe67f8feb4,498226758,0,0x0,8
tick,0x7ffe67f8feb4,498243232,0,0x0,8
tick,0x7ffe67f8feb4,498258753,0,0x0,8
tick,0x7ffe67f8feb4,498273803,0,0x0,8
tick,0x7ffe67f8feb4,498289754,0,0x0,8
tick,0x7ffe67f8feb4,498304904,0,0x0,8
tick,0x7ffe67f8feb4,498320796,0,0x0,8
tick,0x7ffe67f8feb4,498336788,0,0x0,8
tick,0x7ffe67f8feb4,498351652,0,0x0,8
tick,0x7ffe67f8feb4,498367705,0,0x0,8
tick,0x7ffe67f8feb4,498382782,0,0x0,8
tick,0x7ffe67f8feb4,498398126,0,0x0,8
tick,0x7ffe67f8feb4,498413150,0,0x0,8
tick,0x7ffe67f8feb4,498428967,0,0x0,8
tick,0x7ffe67f8feb4,498444975,0,0x0,8
tick,0x7ffe67f8feb4,498460974,0,0x0,8
tick,0x7ffe67f8feb4,498475970,0,0x0,8
tick,0x7ffe67f8feb4,498491140,0,0x0,8
tick,0x7ffe67f8feb4,498507045,0,0x0,8
tick,0x7ffe67f8feb4,498522814,0,0x0,8
tick,0x7ffe67f8feb4,498538010,0,0x0,8
tick,0x7ffe67f8feb4,498553774,0,0x0,8
tick,0x7ffe67f8feb4,498569140,0,0x0,8
tick,0x7ffe67f8feb4,498584987,0,0x0,8
tick,0x7ffe67f8feb4,498600332,0,0x0,8
tick,0x7ffe67f8feb4,498614971,0,0x0,8
tick,0x7ffe67f8feb4,498630393,0,0x0,8
tick,0x7ffe67f8feb4,498646349,0,0x0,8
tick,0x7ffe67f8feb4,498662397,0,0x0,8
tick,0x7ffe67f8feb4,498678395,0,0x0,8
tick,0x7ffe67f8feb4,498694335,0,0x0,8
tick,0x7ffe67f8feb4,498710743,0,0x0,8
tick,0x7ffe67f8feb4,498726454,0,0x0,8
tick,0x7ffe67f8feb4,498741120,0,0x0,8
tick,0x7ffe67f8feb4,498756223,0,0x0,8
tick,0x7ffe67f8feb4,498770878,0,0x0,8
tick,0x7ffe67f8feb4,498786022,0,0x0,8
tick,0x7ffe67f8feb4,498802184,0,0x0,8
tick,0x7ffe67f8feb4,498818043,0,0x0,8
tick,0x7ffe67f8feb4,498834026,0,0x0,8
tick,0x7ffe67f8feb4,498849042,0,0x0,8
tick,0x7ffe67f8feb4,498865072,0,0x0,8
tick,0x7ffe67f8feb4,498880521,0,0x0,8
tick,0x7ffe67f8feb4,498896792,0,0x0,8
tick,0x7ffe67f8feb4,498912510,0,0x0,8
tick,0x7ffe67f8feb4,498928533,0,0x0,8
tick,0x7ffe67f8feb4,498944621,0,0x0,8
tick,0x7ffe67f8feb4,498960572,0,0x0,8
tick,0x7ffe67f8feb4,498976675,0,0x0,8
tick,0x7ffe67f8feb4,498992586,0,0x0,8
tick,0x7ffe67f8feb4,499008858,0,0x0,8
tick,0x7ffe67f8feb4,499024662,0,0x0,8
tick,0x7ffe67f8feb4,499039918,0,0x0,8
tick,0x7ffe67f8feb4,499055811,0,0x0,8
tick,0x7ffe67f8feb4,499071464,0,0x0,8
tick,0x7ffe67f8feb4,499087586,0,0x0,8
tick,0x7ffe67f8feb4,499103381,0,0x0,8
tick,0x7ffe67f8feb4,499118688,0,0x0,8
tick,0x7ffe67f8feb4,499134130,0,0x0,8
tick,0x7ffe67f8feb4,499149965,0,0x0,8
tick,0x7ffe67f8feb4,499165941,0,0x0,8
tick,0x7ffe67f8feb4,499180932,0,0x0,8
tick,0x7ffe67f8feb4,499195958,0,0x0,8
tick,0x7ffe67f8feb4,499212005,0,0x0,8
tick,0x7ffe67f8feb4,499229133,0,0x0,8
tick,0x7ffe67f8feb4,499242776,0,0x0,8
tick,0x7ffe67f8feb4,499258778,0,0x0,8
tick,0x7ffe67f8feb4,499273804,0,0x0,8
tick,0x7ffe67f8feb4,499288480,0,0x0,8
tick,0x7ffe67f8feb4,499304532,0,0x0,8
tick,0x7ffe67f8feb4,499319603,0,0x0,8
tick,0x7ffe67f8feb4,499335583,0,0x0,8
tick,0x7ffe67f8feb4,499351338,0,0x0,8
tick,0x7ffe67f8feb4,499366641,0,0x0,8
tick,0x7ffe67f8feb4,499381630,0,0x0,8
tick,0x7ffe67f8feb4,499397761,0,0x0,8
tick,0x7ffe67f8feb4,499413145,0,0x0,8
tick,0x7ffe67f8feb4,499429487,0,0x0,8
tick,0x7ffe67f8feb4,499443816,0,0x0,8
tick,0x7ffe67f8feb4,499458672,0,0x0,8
tick,0x7ffe67f8feb4,499474450,0,0x0,8
tick,0x7ffe67f8feb4,499490444,0,0x0,8
tick,0x7ffe67f8feb4,499506752,0,0x0,8
tick,0x7ffe67f8feb4,499522535,0,0x0,8
tick,0x7ffe67f8feb4,499537116,0,0x0,8
tick,0x7ffe67f8feb4,499554312,0,0x0,8
tick,0x7ffe67f8feb4,499569241,0,0x0,8
tick,0x7ffe67f8feb4,499584146,0,0x0,8
tick,0x7ffe67f8feb4,499600200,0,0x0,8
tick,0x7ffe67f8feb4,499615907,0,0x0,8
tick,0x7ffe67f8feb4,499632399,0,0x0,8
tick,0x7ffe67f8feb4,499647132,0,0x0,8
tick,0x7ffe67f8feb4,499661808,0,0x0,8
tick,0x7ffe67f8feb4,499676181,0,0x0,8
tick,0x7ffe67f8feb4,499691573,0,0x0,8
tick,0x7ffe67f8feb4,499706583,0,0x0,8
tick,0x7ffe67f8feb4,499721757,0,0x0,8
tick,0x7ffe67f8feb4,499737369,0,0x0,8
tick,0x7ffe67f8feb4,499752396,0,0x0,8
tick,0x7ffe67f8feb4,499767599,0,0x0,8
tick,0x7ffe67f8feb4,499783238,0,0x0,8
tick,0x7ffe67f8feb4,499799234,0,0x0,8
tick,0x7ffe67f8feb4,499815319,0,0x0,8
tick,0x7ffe67f8feb4,499832764,0,0x0,8
tick,0x7ffe67f8feb4,499847468,0,0x0,8
tick,0x7ffe67f8feb4,499863313,0,0x0,8
tick,0x7ffe67f8feb4,499879553,0,0x0,8
tick,0x7ffe67f8feb4,499895265,0,0x0,8
tick,0x7ffe67f8feb4,499912369,0,0x0,8
tick,0x7ffe67f8feb4,499926240,0,0x0,8
tick,0x7ffe67f8feb4,499941291,0,0x0,8
tick,0x7ffe67f8feb4,499957549,0,0x0,8
tick,0x7ffe67f8feb4,499972896,0,0x0,8
tick,0x7ffe67f8feb4,499988016,0,0x0,8
tick,0x7ffe67f8feb4,500003832,0,0x0,8
tick,0x7ffe67f8feb4,500019544,0,0x0,8
tick,0x7ffe67f8feb4,500035376,0,0x0,8
tick,0x7ffe67f8feb4,500051439,0,0x0,8
tick,0x7ffe67f8feb4,500067344,0,0x0,8
tick,0x7ffe67f8feb4,500082775,0,0x0,8
tick,0x7ffe67f8feb4,500098700,0,0x0,8
tick,0x7ffe67f8feb4,500114738,0,0x0,8
tick,0x7ffe67f8feb4,500130767,0,0x0,8
tick,0x7ffe67f8feb4,500146735,0,0x0,8
tick,0x7ffe67f8feb4,500162824,0,0x0,8
tick,0x7ffe67f8feb4,500178696,0,0x0,8
tick,0x7ffe67f8feb4,500195016,0,0x0,8
tick,0x7ffe67f8feb4,500209288,0,0x0,8
tick,0x7ffe67f8feb4,500224417,0,0x0,8
tick,0x7ffe67f8feb4,500239577,0,0x0,8
tick,0x7ffe67f8feb4,500255696,0,0x0,8
tick,0x7ffe67f8feb4,500271291,0,0x0,8
tick,0x7ffe67f8feb4,500286626,0,0x0,8
tick,0x7ffe67f8feb4,500301794,0,0x0,8
tick,0x7ffe67f8feb4,500317805,0,0x0,8
tick,0x7ffe67f8feb4,500333017,0,0x0,8
tick,0x7ffe67f8feb4,500347853,0,0x0,8
tick,0x7ffe67f8feb4,500362978,0,0x0,8
tick,0x7ffe67f8feb4,500379018,0,0x0,8
tick,0x7ffe67f8feb4,500395446,0,0x0,8
tick,0x7ffe67f8feb4,500410012,0,0x0,8
tick,0x7ffe67f8feb4,500425235,0,0x0,8
tick,0x7ffe67f8feb4,500440388,0,0x0,8
tick,0x7ffe67f8feb4,500455962,0,0x0,8
tick,0x7ffe67f8feb4,500471721,0,0x0,8
tick,0x7ffe67f8feb4,500487682,0,0x0,8
tick,0x7ffe67f8feb4,500503547,0,0x0,8
tick,0x7ffe67f8feb4,500519535,0,0x0,8
tick,0x7ffe67f8feb4,500534975,0,0x0,8
tick,0x7ffe67f8feb4,500550897,0,0x0,8
tick,0x7ffe67f8feb4,500566819,0,0x0,8
tick,0x7ffe67f8feb4,500582777,0,0x0,8
tick,0x7ffe67f8feb4,500598802,0,0x0,8
tick,0x7ffe67f8feb4,500614078,0,0x0,8
tick,0x7ffe67f8feb4,500629063,0,0x0,8
tick,0x7ffe67f8feb4,500644995,0,0x0,8
tick,0x7ffe67f8feb4,500659961,0,0x0,8
tick,0x7ffe67f8feb4,500675983,0,0x0,8
tick,0x7ffe67f8feb4,500691761,0,0x0,8
tick,0x7ffe67f8feb4,500707744,0,0x0,8
tick,0x7ffe67f8feb4,500723834,0,0x0,8
tick,0x7ffe67f8feb4,500738774,0,0x0,8
tick,0x7ffe67f8feb4,500753821,0,0x0,8
tick,0x7ffe67f8feb4,500768664,0,0x0,8
tick,0x7ffe67f8feb4,500783847,0,0x0,8
tick,0x7ffe67f8feb4,500799794,0,0x0,8
tick,0x7ffe67f8feb4,500814969,0,0x0,8
tick,0x7ffe67f8feb4,500830807,0,0x0,8
tick,0x7ffe67f8feb4,500846843,0,0x0,8
tick,0x7ffe67f8feb4,500863022,0,0x0,8
tick,0x7ffe67f8feb4,500878975,0,0x0,8
tick,0x7ffe67f8feb4,500894808,0,0x0,8
tick,0x7ffe67f8feb4,500910834,0,0x0,8
tick,0x7ffe67f8feb4,500926833,0,0x0,8
tick,0x7ffe67f8feb4,500941805,0,0x0,8
tick,0x7ffe67f8feb4,500957855,0,0x0,8
tick,0x7ffe67f8feb4,500972953,0,0x0,8
tick,0x7ffe67f8feb4,500988841,0,0x0,8
tick,0x7ffe67f8feb4,501005146,0,0x0,8
tick,0x7ffe67f8feb4,501021056,0,0x0,8
tick,0x7ffe67f8feb4,501036851,0,0x0,8
tick,0x7ffe67f8feb4,501053196,0,0x0,8
tick,0x7ffe67f8feb4,501068186,0,0x0,8
tick,0x7ffe67f8feb4,501083273,0,0x0,8
tick,0x7ffe67f8feb4,501099532,0,0x0,8
tick,0x7ffe67f8feb4,501114926,0,0x0,8
tick,0x7ffe67f8feb4,501129843,0,0x0,8
tick,0x7ffe67f8feb4,501144962,0,0x0,8
tick,0x7ffe67f8feb4,501159978,0,0x0,8
tick,0x7ffe67f8feb4,501174979,0,0x0,8
tick,0x7ffe67f8feb4,501190844,0,0x0,8
tick,0x7ffe67f8feb4,501206185,0,0x0,8
tick,0x7ffe67f8feb4,501220968,0,0x0,8
tick,0x7ffe67f8feb4,501236367,0,0x0,8
tick,0x7ffe67f8feb4,501251866,0,0x0,8
tick,0x7ffe67f8feb4,501267822,0,0x0,8
tick,0x7ffe67f8feb4,501284067,0,0x0,8
tick,0x7ffe67f8feb4,501299201,0,0x0,8
tick,0x7ffe67f8feb4,501315144,0,0x0,8
tick,0x7ffe67f8feb4,501331496,0,0x0,8
tick,0x7ffe67f8feb4,501347245,0,0x0,8
tick,0x7ffe67f8feb4,501363122,0,0x0,8
tick,0x7ffe67f8feb4,501377778,0,0x0,8
tick,0x7ffe67f8feb4,501392798,0,0x0,8
tick,0x7ffe67f8feb4,501408165,0,0x0,8
tick,0x7ffe67f8feb4,501422815,0,0x0,8
tick,0x7ffe67f8feb4,501438163,0,0x0,8
tick,0x7ffe67f8feb4,501454167,0,0x0,8
tick,0x7ffe67f8feb4,501470180,0,0x0,8
tick,0x7ffe67f8feb4,501485864,0,0x0,8
tick,0x7ffe67f8feb4,501501261,0,0x0,8
tick,0x7ffe67f8feb4,501517258,0,0x0,8
tick,0x7ffe67f8feb4,501533336,0,0x0,8
tick,0x7ffe67f8feb4,501549407,0,0x0,8
tick,0x7ffe67f8feb4,501565447,0,0x0,8
tick,0x7ffe67f8feb4,501581491,0,0x0,8
tick,0x7ffe67f8feb4,501597924,0,0x0,8
tick,0x7ffe67f8feb4,501613257,0,0x0,8
tick,0x7ffe67f8feb4,501628810,0,0x0,8
tick,0x7ffe67f8feb4,501644842,0,0x0,8
tick,0x7ffe67f8feb4,501659939,0,0x0,8
tick,0x7ffe67f8feb4,501674969,0,0x0,8
tick,0x7ffe67f8feb4,501690144,0,0x0,8
tick,0x7ffe67f8feb4,501705972,0,0x0,8
tick,0x7ffe67f8feb4,501721088,0,0x0,8
tick,0x7ffe67f8feb4,501736633,0,0x0,8
tick,0x7ffe67f8feb4,501751824,0,0x0,8
tick,0x7ffe67f8feb4,501767612,0,0x0,8
tick,0x7ffe67f8feb4,501782964,0,0x0,8
tick,0x7ffe67f8feb4,501798490,0,0x0,8
tick,0x7ffe67f8feb4,501814062,0,0x0,8
tick,0x7ffe67f8feb4,501830100,0,0x0,8
tick,0x7ffe67f8feb4,501844990,0,0x0,8
tick,0x7ffe67f8feb4,501860203,0,0x0,8
tick,0x7ffe67f8feb4,501876201,0,0x0,8
tick,0x7ffe67f8feb4,501892188,0,0x0,8
tick,0x7ffe67f8feb4,501908295,0,0x0,8
tick,0x7ffe67f8feb4,501923220,0,0x0,8
tick,0x7ffe67f8feb4,501938270,0,0x0,8
tick,0x7ffe67f8feb4,501953182,0,0x0,8
tick,0x7ffe67f8feb4,501968166,0,0x0,8
tick,0x7ffe67f8feb4,501984178,0,0x0,8
tick,0x7ffe67f8feb4,502000198,0,0x0,8
tick,0x7ffe67f8feb4,502015300,0,0x0,8
tick,0x7ffe67f8feb4,502031517,0,0x0,8
tick,0x7ffe67f8feb4,502047656,0,0x0,8
tick,0x7ffe67f8feb4,502062818,0,0x0,8
tick,0x7ffe67f8feb4,502078017,0,0x0,8
tick,0x7ffe67f8feb4,502093815,0,0x0,8
tick,0x7ffe67f8feb4,502108977,0,0x0,8
tick,0x7ffe67f8feb4,502125016,0,0x0,8
tick,0x7ffe67f8feb4,502140725,0,0x0,8
tick,0x7ffe67f8feb4,502155770,0,0x0,8
tick,0x7ffe67f8feb4,502171008,0,0x0,8
tick,0x7ffe67f8feb4,502186482,0,0x0,8
tick,0x7ffe67f8feb4,502202489,0,0x0,8
tick,0x7ffe67f8feb4,502218482,0,0x0,8
tick,0x7ffe67f8feb4,502234489,0,0x0,8
tick,0x7ffe67f8feb4,502250543,0,0x0,8
tick,0x7ffe67f8feb4,502266165,0,0x0,8
tick,0x7ffe67f8feb4,502280721,0,0x0,8
tick,0x7ffe67f8feb4,502295406,0,0x0,8
tick,0x7ffe67f8feb4,502310890,0,0x0,8
tick,0x7ffe67f8feb4,502326077,0,0x0,8
tick,0x7ffe67f8feb4,502341740,0,0x0,8
tick,0x7ffe67f8feb4,502357035,0,0x0,8
tick,0x7ffe67f8feb4,502371785,0,0x0,8
tick,0x7ffe67f8feb4,502387058,0,0x0,8
tick,0x7ffe67f8feb4,502403212,0,0x0,8
tick,0x7ffe67f8feb4,502418881,0,0x0,8
tick,0x7ffe67f8feb4,502435063,0,0x0,8
tick,0x7ffe67f8feb4,502450983,0,0x0,8
tick,0x7ffe67f8feb4,502467246,0,0x0,8
tick,0x7ffe67f8feb4,502482513,0,0x0,8
tick,0x7ffe67f8feb4,502498557,0,0x0,8
tick,0x7ffe67f8feb4,502514348,0,0x0,8
tick,0x7ffe67f8feb4,502528939,0,0x0,8
tick,0x7ffe67f8feb4,502544196,0,0x0,8
tick,0x7ffe67f8feb4,502558998,0,0x0,8
tick,0x7ffe67f8feb4,502574981,0,0x0,8
tick,0x7ffe67f8feb4,502590701,0,0x0,8
tick,0x7ffe67f8feb4,502605430,0,0x0,8
tick,0x7ffe67f8feb4,502620652,0,0x0,8
tick,0x7ffe67f8feb4,502635969,0,0x0,8
tick,0x7ffe67f8feb4,502650045,0,0x0,8
tick,0x7ffe67f8feb4,502665253,0,0x0,8
tick,0x7ffe67f8feb4,502680081,0,0x0,8
tick,0x7ffe67f8feb4,502695032,0,0x0,8
tick,0x7ffe67f8feb4,502710996,0,0x0,8
tick,0x7ffe67f8feb4,502727254,0,0x0,8
tick,0x7ffe67f8feb4,502742929,0,0x0,8
tick,0x7ffe67f8feb4,502757934,0,0x0,8
tick,0x7ffe67f8feb4,502774041,0,0x0,8
tick,0x7ffe67f8feb4,502788953,0,0x0,8
tick,0x7ffe67f8feb4,502804070,0,0x0,8
tick,0x7ffe67f8feb4,502819955,0,0x0,8
tick,0x7ffe67f8feb4,502835345,0,0x0,8
tick,0x7ffe67f8feb4,502851061,0,0x0,8
tick,0x7ffe67f8feb4,502867212,0,0x0,8
tick,0x7ffe67f8feb4,502881915,0,0x0,8
tick,0x7ffe67f8feb4,502896833,0,0x0,8
tick,0x7ffe67f8feb4,502911862,0,0x0,8
tick,0x7ffe67f8feb4,502927855,0,0x0,8
tick,0x7ffe67f8feb4,502942821,0,0x0,8
tick,0x7ffe67f8feb4,502958776,0,0x0,8
tick,0x7ffe67f8feb4,502973925,0,0x0,8
tick,0x7ffe67f8feb4,502989090,0,0x0,8
tick,0x7ffe67f8feb4,503005184,0,0x0,8
tick,0x7ffe67f8feb4,503021309,0,0x0,8
tick,0x7ffe67f8feb4,503036444,0,0x0,8
tick,0x7ffe67f8feb4,503051763,0,0x0,8
tick,0x7ffe67f8feb4,503066419,0,0x0,8
tick,0x7ffe67f8feb4,503084285,0,0x0,8
tick,0x7ffe67f8feb4,503099187,0,0x0,8
tick,0x7ffe67f8feb4,503112794,0,0x0,8
tick,0x7ffe67f8feb4,503128253,0,0x0,8
tick,0x7ffe67f8feb4,503143822,0,0x0,8
tick,0x7ffe67f8feb4,503159678,0,0x0,8
tick,0x7ffe67f8feb4,503174953,0,0x0,8
tick,0x7ffe67f8feb4,503190976,0,0x0,8
tick,0x7ffe67f8feb4,503206323,0,0x0,8
tick,0x7ffe67f8feb4,503221554,0,0x0,8
tick,0x7ffe67f8feb4,503237618,0,0x0,8
tick,0x7ffe67f8feb4,503252792,0,0x0,8
tick,0x7ffe67f8feb4,503267583,0,0x0,8
tick,0x7ffe67f8feb4,503282645,0,0x0,8
tick,0x7ffe67f8feb4,503298752,0,0x0,8
tick,0x7ffe67f8feb4,503313955,0,0x0,8
tick,0x7ffe67f8feb4,503329979,0,0x0,8
tick,0x7ffe67f8feb4,503344982,0,0x0,8
tick,0x7ffe67f8feb4,503360009,0,0x0,8
tick,0x7ffe67f8feb4,503375113,0,0x0,8
tick,0x7ffe67f8feb4,503390984,0,0x0,8
tick,0x7ffe67f8feb4,503406280,0,0x0,8
tick,0x7ffe67f8feb4,503421543,0,0x0,8
tick,0x7ffe67f8feb4,503437007,0,0x0,8
tick,0x7ffe67f8feb4,503452814,0,0x0,8
tick,0x7ffe67f8feb4,503468028,0,0x0,8
tick,0x7ffe67f8feb4,503484049,0,0x0,8
tick,0x7ffe67f8feb4,503500013,0,0x0,8
tick,0x7ffe67f8feb4,503515985,0,0x0,8
tick,0x7ffe67f8feb4,503532061,0,0x0,8
tick,0x7ffe67f8feb4,503547006,0,0x0,8
tick,0x7ffe67f8feb4,503562821,0,0x0,8
tick,0x7ffe67f8feb4,503577802,0,0x0,8
tick,0x7ffe67f8feb4,503593839,0,0x0,8
tick,0x7ffe67f8feb4,503608887,0,0x0,8
tick,0x7ffe67f8feb4,503623827,0,0x0,8
tick,0x7ffe67f8feb4,503639022,0,0x0,8
tick,0x7ffe67f8feb4,503654966,0,0x0,8
tick,0x7ffe67f8feb4,503670863,0,0x0,8
tick,0x7ffe67f8feb4,503686975,0,0x0,8
tick,0x7ffe67f8feb4,503702446,0,0x0,8
tick,0x7ffe67f8feb4,503718012,0,0x0,8
tick,0x7ffe67f8feb4,503732850,0,0x0,8
tick,0x7ffe67f8feb4,503749078,0,0x0,8
tick,0x7ffe67f8feb4,503763965,0,0x0,8
tick,0x7ffe67f8feb4,503779965,0,0x0,8
tick,0x7ffe67f8feb4,503796025,0,0x0,8
tick,0x7ffe67f8feb4,503811176,0,0x0,8
tick,0x7ffe67f8feb4,503826351,0,0x0,8
tick,0x7ffe67f8feb4,503842482,0,0x0,8
tick,0x7ffe67f8feb4,503858340,0,0x0,8
tick,0x7ffe67f8feb4,503873837,0,0x0,8
tick,0x7ffe67f8feb4,503889222,0,0x0,8
tick,0x7ffe67f8feb4,503904154,0,0x0,8
tick,0x7ffe67f8feb4,503920154,0,0x0,8
tick,0x7ffe67f8feb4,503935146,0,0x0,8
tick,0x7ffe67f8feb4,503951148,0,0x0,8
tick,0x7ffe67f8feb4,503967157,0,0x0,8
tick,0x7ffe67f8feb4,503983360,0,0x0,8
tick,0x7ffe67f8feb4,503998268,0,0x0,8
tick,0x7ffe67f8feb4,504013812,0,0x0,8
tick,0x7ffe67f8feb4,504029999,0,0x0,8
tick,0x7ffe67f8feb4,504045085,0,0x0,8
tick,0x7ffe67f8feb4,504060224,0,0x0,8
tick,0x7ffe67f8feb4,504075517,0,0x0,8
tick,0x7ffe67f8feb4,504091403,0,0x0,8
tick,0x7ffe67f8feb4,504106983,0,0x0,8
tick,0x7ffe67f8feb4,504122784,0,0x0,8
tick,0x7ffe67f8feb4,504137968,0,0x0,8
tick,0x7ffe67f8feb4,504152956,0,0x0,8
tick,0x7ffe67f8feb4,504169610,0,0x0,8
tick,0x7ffe67f8feb4,504184719,0,0x0,8
tick,0x7ffe67f8feb4,504200787,0,0x0,8
tick,0x7ffe67f8feb4,504217963,0,0x0,8
tick,0x7ffe67f8feb4,504233999,0,0x0,8
tick,0x7ffe67f8feb4,504247395,0,0x0,8
tick,0x7ffe67f8feb4,504262805,0,0x0,8
tick,0x7ffe67f8feb4,504278377,0,0x0,8
tick,0x7ffe67f8feb4,504293809,0,0x0,8
tick,0x7ffe67f8feb4,504308964,0,0x0,8
tick,0x7ffe67f8feb4,504324957,0,0x0,8
tick,0x7ffe67f8feb4,504340184,0,0x0,8
tick,0x7ffe67f8feb4,504356360,0,0x0,8
tick,0x7ffe67f8feb4,504371427,0,0x0,8
tick,0x7ffe67f8feb4,504386246,0,0x0,8
tick,0x7ffe67f8feb4,504401926,0,0x0,8
tick,0x7ffe67f8feb4,504417888,0,0x0,8
tick,0x7ffe67f8feb4,504434129,0,0x0,8
tick,0x7ffe67f8feb4,504450449,0,0x0,8
tick,0x7ffe67f8feb4,504465001,0,0x0,8
tick,0x7ffe67f8feb4,504480186,0,0x0,8
tick,0x7ffe67f8feb4,504495994,0,0x0,8
tick,0x7ffe67f8feb4,504511723,0,0x0,8
tick,0x7ffe67f8feb4,504527884,0,0x0,8
tick,0x7ffe67f8feb4,504542840,0,0x0,8
tick,0x7ffe67f8feb4,504558783,0,0x0,8
tick,0x7ffe67f8feb4,504573982,0,0x0,8
tick,0x7ffe67f8feb4,504589820,0,0x0,8
tick,0x7ffe67f8feb4,504605407,0,0x0,8
tick,0x7ffe67f8feb4,504621075,0,0x0,8
tick,0x7ffe67f8feb4,504637055,0,0x0,8
tick,0x7ffe67f8feb4,504653072,0,0x0,8
tick,0x7ffe67f8feb4,504668889,0,0x0,8
tick,0x7ffe67f8feb4,504684824,0,0x0,8
tick,0x7ffe67f8feb4,504700919,0,0x0,8
tick,0x7ffe67f8feb4,504716619,0,0x0,8
tick,0x7ffe67f8feb4,504731046,0,0x0,8
tick,0x7ffe67f8feb4,504746162,0,0x0,8
tick,0x7ffe67f8feb4,504761305,0,0x0,8
tick,0x7ffe67f8feb4,504777237,0,0x0,8
tick,0x7ffe67f8feb4,504792843,0,0x0,8
tick,0x7ffe67f8feb4,504808004,0,0x0,8
tick,0x7ffe67f8feb4,504823158,0,0x0,8
tick,0x7ffe67f8feb4,504838910,0,0x0,8
tick,0x7ffe67f8feb4,504854760,0,0x0,8
tick,0x7ffe67f8feb4,504870323,0,0x0,8
tick,0x7ffe67f8feb4,504885906,0,0x0,8
tick,0x7ffe67f8feb4,504901950,0,0x0,8
tick,0x7ffe67f8feb4,504917523,0,0x0,8
tick,0x7ffe67f8feb4,504933434,0,0x0,8
tick,0x7ffe67f8feb4,504948827,0,0x0,8
tick,0x7ffe67f8feb4,504964903,0,0x0,8
tick,0x7ffe67f8feb4,504979832,0,0x0,8
tick,0x7ffe67f8feb4,504995669,0,0x0,8
tick,0x7ffe67f8feb4,505010679,0,0x0,8
tick,0x7ffe67f8feb4,505025989,0,0x0,8
tick,0x7ffe67f8feb4,505041852,0,0x0,8
tick,0x7ffe67f8feb4,505057038,0,0x0,8
tick,0x7ffe67f8feb4,505072846,0,0x0,8
tick,0x7ffe67f8feb4,505088700,0,0x0,8
tick,0x7ffe67f8feb4,505103977,0,0x0,8
tick,0x7ffe67f8feb4,505120211,0,0x0,8
tick,0x7ffe67f8feb4,505135062,0,0x0,8
tick,0x7ffe67f8feb4,505150486,0,0x0,8
tick,0x7ffe67f8feb4,505165144,0,0x0,8
tick,0x7ffe67f8feb4,505180637,0,0x0,8
tick,0x7ffe67f8feb4,505195588,0,0x0,8
tick,0x7ffe67f8feb4,505211561,0,0x0,8
tick,0x7ffe67f8feb4,505226514,0,0x0,8
tick,0x7ffe67f8feb4,505241675,0,0x0,8
tick,0x7ffe67f8feb4,505256588,0,0x0,8
tick,0x7ffe67f8feb4,505271842,0,0x0,8
tick,0x7ffe67f8feb4,505287969,0,0x0,8
tick,0x7ffe67f8feb4,505302803,0,0x0,8
tick,0x7ffe67f8feb4,505318888,0,0x0,8
tick,0x7ffe67f8feb4,505337255,0,0x0,8
tick,0x7ffe67f8feb4,505348714,0,0x0,8
tick,0x7ffe67f8feb4,505363902,0,0x0,8
tick,0x7ffe67f8feb4,505379613,0,0x0,8
tick,0x7ffe67f8feb4,505395202,0,0x0,8
tick,0x7ffe67f8feb4,505411039,0,0x0,8
tick,0x7ffe67f8feb4,505425798,0,0x0,8
tick,0x7ffe67f8feb4,505441585,0,0x0,8
tick,0x7ffe67f8feb4,505457394,0,0x0,8
tick,0x7ffe67f8feb4,505473375,0,0x0,8
tick,0x7ffe67f8feb4,505488509,0,0x0,8
tick,0x7ffe67f8feb4,505504347,0,0x0,8
tick,0x7ffe67f8feb4,505520152,0,0x0,8
tick,0x7ffe67f8feb4,505536136,0,0x0,8
tick,0x7ffe67f8feb4,505552223,0,0x0,8
tick,0x7ffe67f8feb4,505567388,0,0x0,8
tick,0x7ffe67f8feb4,505582480,0,0x0,8
tick,0x7ffe67f8feb4,505598430,0,0x0,8
tick,0x7ffe67f8feb4,505614358,0,0x0,8
tick,0x7ffe67f8feb4,505629786,0,0x0,8
tick,0x7ffe67f8feb4,505645737,0,0x0,8
tick,0x7ffe67f8feb4,505661994,0,0x0,8
tick,0x7ffe67f8feb4,505677203,0,0x0,8
tick,0x7ffe67f8feb4,505692850,0,0x0,8
tick,0x7ffe67f8feb4,505708535,0,0x0,8
tick,0x7ffe67f8feb4,505724469,0,0x0,8
tick,0x7ffe67f8feb4,505740085,0,0x0,8
tick,0x7ffe67f8feb4,505755576,0,0x0,8
tick,0x7ffe67f8feb4,505771840,0,0x0,8
tick,0x7ffe67f8feb4,505787386,0,0x0,8
tick,0x7ffe67f8feb4,505803886,0,0x0,8
tick,0x7ffe67f8feb4,505818906,0,0x0,8
tick,0x7ffe67f8feb4,505834893,0,0x0,8
tick,0x7ffe67f8feb4,505849974,0,0x0,8
tick,0x7ffe67f8feb4,505865414,0,0x0,8
tick,0x7ffe67f8feb4,505881487,0,0x0,8
tick,0x7ffe67f8feb4,505897484,0,0x0,8
tick,0x7ffe67f8feb4,505913494,0,0x0,8
tick,0x7ffe67f8feb4,505929412,0,0x0,8
tick,0x7ffe67f8feb4,505944405,0,0x0,8
tick,0x7ffe67f8feb4,505960406,0,0x0,8
tick,0x7ffe67f8feb4,505976001,0,0x0,8
tick,0x7ffe67f8feb4,505992146,0,0x0,8
tick,0x7ffe67f8feb4,506007794,0,0x0,8
tick,0x7ffe67f8feb4,506023742,0,0x0,8
tick,0x7ffe67f8feb4,506038844,0,0x0,8
tick,0x7ffe67f8feb4,506055011,0,0x0,8
tick,0x7ffe67f8feb4,506070418,0,0x0,8
tick,0x7ffe67f8feb4,506086167,0,0x0,8
tick,0x7ffe67f8feb4,506101443,0,0x0,8
tick,0x7ffe67f8feb4,506116477,0,0x0,8
tick,0x7ffe67f8feb4,506131754,0,0x0,8
tick,0x7ffe67f8feb4,506147531,0,0x0,8
tick,0x7ffe67f8feb4,506162726,0,0x0,8
tick,0x7ffe67f8feb4,506178734,0,0x0,8
tick,0x7ffe67f8feb4,506193858,0,0x0,8
tick,0x7ffe67f8feb4,506209983,0,0x0,8
tick,0x7ffe67f8feb4,506226064,0,0x0,8
tick,0x7ffe67f8feb4,506242036,0,0x0,8
tick,0x7ffe67f8feb4,506258229,0,0x0,8
tick,0x7ffe67f8feb4,506273876,0,0x0,8
tick,0x7ffe67f8feb4,506289694,0,0x0,8
tick,0x7ffe67f8feb4,506305601,0,0x0,8
tick,0x7ffe67f8feb4,506321797,0,0x0,8
tick,0x7ffe67f8feb4,506337698,0,0x0,8
tick,0x7ffe67f8feb4,506353394,0,0x0,8
tick,0x7ffe67f8feb4,506368888,0,0x0,8
tick,0x7ffe67f8feb4,506384731,0,0x0,8
tick,0x7ffe67f8feb4,506400541,0,0x0,8
tick,0x7ffe67f8feb4,506416214,0,0x0,8
tick,0x7ffe67f8feb4,506431360,0,0x0,8
tick,0x7ffe67f8feb4,506447223,0,0x0,8
tick,0x7ffe67f8feb4,506462839,0,0x0,8
tick,0x7ffe67f8feb4,506478230,0,0x0,8
tick,0x7ffe67f8feb4,506493544,0,0x0,8
tick,0x7ffe67f8feb4,506508764,0,0x0,8
tick,0x7ffe67f8feb4,506523812,0,0x0,8
tick,0x7ffe67f8feb4,506538952,0,0x0,8
tick,0x7ffe67f8feb4,506554807,0,0x0,8
tick,0x7ffe67f8feb4,506569843,0,0x0,8
tick,0x7ffe67f8feb4,506585859,0,0x0,8
tick,0x7ffe67f8feb4,506601966,0,0x0,8
tick,0x7ffe67f8feb4,506618055,0,0x0,8
tick,0x7ffe67f8feb4,506633737,0,0x0,8
tick,0x7ffe67f8feb4,506649231,0,0x0,8
tick,0x7ffe67f8feb4,506664220,0,0x0,8
tick,0x7ffe67f8feb4,506680187,0,0x0,8
tick,0x7ffe67f8feb4,506695739,0,0x0,8
tick,0x7ffe67f8feb4,506710894,0,0x0,8
tick,0x7ffe67f8feb4,506726784,0,0x0,8
tick,0x7ffe67f8feb4,506749072,0,0x0,8
tick,0x7ffe67f8feb4,506761314,0,0x0,8
tick,0x7ffe67f8feb4,506774786,0,0x0,8
tick,0x7ffe67f8feb4,506790520,0,0x0,8
tick,0x7ffe67f8feb4,506805622,0,0x0,8
tick,0x7ffe67f8feb4,506821865,0,0x0,8
tick,0x7ffe67f8feb4,506836959,0,0x0,8
tick,0x7ffe67f8feb4,506852574,0,0x0,8
tick,0x7ffe67f8feb4,506867499,0,0x0,8
tick,0x7ffe67f8feb4,506882276,0,0x0,8
tick,0x7ffe67f8feb4,506898231,0,0x0,8
tick,0x7ffe67f8feb4,506914210,0,0x0,8
tick,0x7ffe67f8feb4,506930248,0,0x0,8
tick,0x7ffe67f8feb4,506945298,0,0x0,8
tick,0x7ffe67f8feb4,506961253,0,0x0,8
tick,0x7ffe67f8feb4,506976199,0,0x0,8
tick,0x7ffe67f8feb4,506991202,0,0x0,8
tick,0x7ffe67f8feb4,507007197,0,0x0,8
tick,0x7ffe67f8feb4,507022836,0,0x0,8
tick,0x7ffe67f8feb4,507038859,0,0x0,8
tick,0x7ffe67f8feb4,507053779,0,0x0,8
tick,0x7ffe67f8feb4,507069444,0,0x0,8
tick,0x7ffe67f8feb4,507085381,0,0x0,8
tick,0x7ffe67f8feb4,507101014,0,0x0,8
tick,0x7ffe67f8feb4,507116154,0,0x0,8
tick,0x7ffe67f8feb4,507132158,0,0x0,8
tick,0x7ffe67f8feb4,507146832,0,0x0,8
tick,0x7ffe67f8feb4,507162294,0,0x0,8
tick,0x7ffe67f8feb4,507177729,0,0x0,8
tick,0x7ffe67f8feb4,507193937,0,0x0,8
tick,0x7ffe67f8feb4,507208880,0,0x0,8
tick,0x7ffe67f8feb4,507224699,0,0x0,8
tick,0x7ffe67f8feb4,507239914,0,0x0,8
tick,0x7ffe67f8feb4,507255233,0,0x0,8
tick,0x7ffe67f8feb4,507271313,0,0x0,8
tick,0x7ffe67f8feb4,507286662,0,0x0,8
tick,0x7ffe67f8feb4,507302658,0,0x0,8
tick,0x7ffe67f8feb4,507317759,0,0x0,8
tick,0x7ffe67f8feb4,507333866,0,0x0,8
tick,0x7ffe67f8feb4,507350054,0,0x0,8
tick,0x7ffe67f8feb4,507365193,0,0x0,8
tick,0x7ffe67f8feb4,507381393,0,0x0,8
tick,0x7ffe67f8feb4,507396179,0,0x0,8
tick,0x7ffe67f8feb4,507411730,0,0x0,8
tick,0x7ffe67f8feb4,507426911,0,0x0,8
tick,0x7ffe67f8feb4,507441570,0,0x0,8
tick,0x7ffe67f8feb4,507457697,0,0x0,8
tick,0x7ffe67f8feb4,507472806,0,0x0,8
tick,0x7ffe67f8feb4,507488640,0,0x0,8
tick,0x7ffe67f8feb4,507503802,0,0x0,8
tick,0x7ffe67f8feb4,507519774,0,0x0,8
tick,0x7ffe67f8feb4,507535917,0,0x0,8
tick,0x7ffe67f8feb4,507550922,0,0x0,8
tick,0x7ffe67f8feb4,507567063,0,0x0,8
tick,0x7ffe67f8feb4,507582847,0,0x0,8
tick,0x7ffe67f8feb4,507598785,0,0x0,8
tick,0x7ffe67f8feb4,507614789,0,0x0,8
tick,0x7ffe67f8feb4,507630738,0,0x0,8
tick,0x7ffe67f8feb4,507645916,0,0x0,8
tick,0x7ffe67f8feb4,507661992,0,0x0,8
tick,0x7ffe67f8feb4,507677827,0,0x0,8
tick,0x7ffe67f8feb4,507694173,0,0x0,8
tick,0x7ffe67f8feb4,507709998,0,0x0,8
tick,0x7ffe67f8feb4,507725605,0,0x0,8
tick,0x7ffe67f8feb4,507741233,0,0x0,8
tick,0x7ffe67f8feb4,507755821,0,0x0,8
tick,0x7ffe67f8feb4,507771942,0,0x0,8
tick,0x7ffe67f8feb4,507788032,0,0x0,8
tick,0x7ffe67f8feb4,507803814,0,0x0,8
tick,0x7ffe67f8feb4,507818730,0,0x0,8
tick,0x7ffe67f8feb4,507834827,0,0x0,8
tick,0x7ffe67f8feb4,507849827,0,0x0,8
tick,0x7ffe67f8feb4,507866350,0,0x0,8
tick,0x7ffe67f8feb4,507882261,0,0x0,8
tick,0x7ffe67f8feb4,507897167,0,0x0,8
tick,0x7ffe67f8feb4,507913063,0,0x0,8
tick,0x7ffe67f8feb4,507927329,0,0x0,8
tick,0x7ffe67f8feb4,507942210,0,0x0,8
tick,0x7ffe67f8feb4,507957418,0,0x0,8
tick,0x7ffe67f8feb4,507973553,0,0x0,8
tick,0x7ffe67f8feb4,507989196,0,0x0,8
tick,0x7ffe67f8feb4,508004053,0,0x0,8
tick,0x7ffe67f8feb4,508018501,0,0x0,8
tick,0x7ffe67f8feb4,508033462,0,0x0,8
tick,0x7ffe67f8feb4,508049492,0,0x0,8
tick,0x7ffe67f8feb4,508064640,0,0x0,8
tick,0x7ffe67f8feb4,508079784,0,0x0,8
tick,0x7ffe67f8feb4,508095890,0,0x0,8
tick,0x7ffe67f8feb4,508111183,0,0x0,8
tick,0x7ffe67f8feb4,508126802,0,0x0,8
tick,0x7ffe67f8feb4,508142483,0,0x0,8
tick,0x7ffe67f8feb4,508157826,0,0x0,8
tick,0x7ffe67f8feb4,508173850,0,0x0,8
tick,0x7ffe67f8feb4,508189931,0,0x0,8
tick,0x7ffe67f8feb4,508205931,0,0x0,8
tick,0x7ffe67f8feb4,508222085,0,0x0,8
tick,0x7ffe67f8feb4,508237910,0,0x0,8
tick,0x7ffe67f8feb4,508254602,0,0x0,8
tick,0x7ffe67f8feb4,508268833,0,0x0,8
tick,0x7ffe67f8feb4,508283926,0,0x0,8
tick,0x7ffe67f8feb4,508299087,0,0x0,8
tick,0x7ffe67f8feb4,508314845,0,0x0,8
tick,0x7ffe67f8feb4,508330827,0,0x0,8
tick,0x7ffe67f8feb4,508345792,0,0x0,8
tick,0x7ffe67f8feb4,508361866,0,0x0,8
tick,0x7ffe67f8feb4,508377834,0,0x0,8
tick,0x7ffe67f8feb4,508393931,0,0x0,8
tick,0x7ffe67f8feb4,508409222,0,0x0,8
tick,0x7ffe67f8feb4,508425241,0,0x0,8
tick,0x7ffe67f8feb4,508440951,0,0x0,8
tick,0x7ffe67f8feb4,508456915,0,0x0,8
tick,0x7ffe67f8feb4,508472824,0,0x0,8
tick,0x7ffe67f8feb4,508487926,0,0x0,8
tick,0x7ffe67f8feb4,508503826,0,0x0,8
tick,0x7ffe67f8feb4,508518894,0,0x0,8
tick,0x7ffe67f8feb4,508533960,0,0x0,8
tick,0x7ffe67f8feb4,508550034,0,0x0,8
tick,0x7ffe67f8feb4,508565170,0,0x0,8
tick,0x7ffe67f8feb4,508580321,0,0x0,8
tick,0x7ffe67f8feb4,508596372,0,0x0,8
tick,0x7ffe67f8feb4,508611544,0,0x0,8
tick,0x7ffe67f8feb4,508626757,0,0x0,8
tick,0x7ffe67f8feb4,508642786,0,0x0,8
tick,0x7ffe67f8feb4,508658477,0,0x0,8
tick,0x7ffe67f8feb4,508673784,0,0x0,8
tick,0x7ffe67f8feb4,508689483,0,0x0,8
tick,0x7ffe67f8feb4,508705464,0,0x0,8
tick,0x7ffe67f8feb4,508721444,0,0x0,8
tick,0x7ffe67f8feb4,508737459,0,0x0,8
tick,0x7ffe67f8feb4,508752802,0,0x0,8
tick,0x7ffe67f8feb4,508768816,0,0x0,8
tick,0x7ffe67f8feb4,508784911,0,0x0,8
tick,0x7ffe67f8feb4,508800063,0,0x0,8
tick,0x7ffe67f8feb4,508816172,0,0x0,8
tick,0x7ffe67f8feb4,508832280,0,0x0,8
tick,0x7ffe67f8feb4,508847878,0,0x0,8
tick,0x7ffe67f8feb4,508863930,0,0x0,8
tick,0x7ffe67f8feb4,508879878,0,0x0,8
tick,0x7ffe67f8feb4,508895037,0,0x0,8
tick,0x7ffe67f8feb4,508910200,0,0x0,8
tick,0x7ffe67f8feb4,508925854,0,0x0,8
tick,0x7ffe67f8feb4,508941844,0,0x0,8
tick,0x7ffe67f8feb4,508957804,0,0x0,8
tick,0x7ffe67f8feb4,508973814,0,0x0,8
tick,0x7ffe67f8feb4,508989914,0,0x0,8
tick,0x7ffe67f8feb4,509004884,0,0x0,8
tick,0x7ffe67f8feb4,509020866,0,0x0,8
tick,0x7ffe67f8feb4,509035973,0,0x0,8
tick,0x7ffe67f8feb4,509051182,0,0x0,8
tick,0x7ffe67f8feb4,509066929,0,0x0,8
tick,0x7ffe67f8feb4,509082855,0,0x0,8
tick,0x7ffe67f8feb4,509098872,0,0x0,8
tick,0x7ffe67f8feb4,509114821,0,0x0,8
tick,0x7ffe67f8feb4,509129959,0,0x0,8
tick,0x7ffe67f8feb4,509145793,0,0x0,8
tick,0x7ffe67f8feb4,509160281,0,0x0,8
tick,0x7ffe67f8feb4,509175894,0,0x0,8
tick,0x7ffe67f8feb4,509191914,0,0x0,8
tick,0x7ffe67f8feb4,509207923,0,0x0,8
tick,0x7ffe67f8feb4,509223934,0,0x0,8
tick,0x7ffe67f8feb4,509239892,0,0x0,8
tick,0x7ffe67f8feb4,509255920,0,0x0,8
tick,0x7ffe67f8feb4,509271886,0,0x0,8
tick,0x7ffe67f8feb4,509287894,0,0x0,8
tick,0x7ffe67f8feb4,509303060,0,0x0,8
tick,0x7ffe67f8feb4,509319035,0,0x0,8
tick,0x7ffe67f8feb4,509334988,0,0x0,8
tick,0x7ffe67f8feb4,509350327,0,0x0,8
tick,0x7ffe67f8feb4,509366014,0,0x0,8
tick,0x7ffe67f8feb4,509381007,0,0x0,8
tick,0x7ffe67f8feb4,509396933,0,0x0,8
tick,0x7ffe67f8feb4,509412065,0,0x0,8
tick,0x7ffe67f8feb4,509427902,0,0x0,8
tick,0x7ffe67f8feb4,509443882,0,0x0,8
tick,0x7ffe67f8feb4,509459056,0,0x0,8
tick,0x7ffe67f8feb4,509474965,0,0x0,8
tick,0x7ffe67f8feb4,509490768,0,0x0,8
tick,0x7ffe67f8feb4,509505841,0,0x0,8
tick,0x7ffe67f8feb4,509522054,0,0x0,8
tick,0x7ffe67f8feb4,509539419,0,0x0,8
tick,0x7ffe67f8feb4,509553214,0,0x0,8
tick,0x7ffe67f8feb4,509569012,0,0x0,8
tick,0x7ffe67f8feb4,509585042,0,0x0,8
tick,0x7ffe67f8feb4,509600733,0,0x0,8
tick,0x7ffe67f8feb4,509615979,0,0x0,8
tick,0x7ffe67f8feb4,509631801,0,0x0,8
tick,0x7ffe67f8feb4,509647102,0,0x0,8
tick,0x7ffe67f8feb4,509662849,0,0x0,8
tick,0x7ffe67f8feb4,509678018,0,0x0,8
tick,0x7ffe67f8feb4,509694004,0,0x0,8
tick,0x7ffe67f8feb4,509709064,0,0x0,8
tick,0x7ffe67f8feb4,509725245,0,0x0,8
tick,0x7ffe67f8feb4,509741261,0,0x0,8
tick,0x7ffe67f8feb4,509757159,0,0x0,8
tick,0x7ffe67f8feb4,509773067,0,0x0,8
tick,0x7ffe67f8feb4,509789395,0,0x0,8
tick,0x7ffe67f8feb4,509804997,0,0x0,8
tick,0x7ffe67f8feb4,509821367,0,0x0,8
tick,0x7ffe67f8feb4,509836278,0,0x0,8
tick,0x7ffe67f8feb4,509851468,0,0x0,8
tick,0x7ffe67f8feb4,509867413,0,0x0,8
tick,0x7ffe67f8feb4,509883271,0,0x0,8
tick,0x7ffe67f8feb4,509898325,0,0x0,8
tick,0x7ffe67f8feb4,509914064,0,0x0,8
tick,0x7ffe67f8feb4,509930344,0,0x0,8
tick,0x7ffe67f8feb4,509945212,0,0x0,8
tick,0x7ffe67f8feb4,509961723,0,0x0,8
tick,0x7ffe67f8feb4,509977910,0,0x0,8
tick,0x7ffe67f8feb4,509993640,0,0x0,8
tick,0x7ffe67f8feb4,510009678,0,0x0,8
tick,0x7ffe67f8feb4,510025565,0,0x0,8
tick,0x7ffe67f8feb4,510041631,0,0x0,8
tick,0x7ffe67f8feb4,510057733,0,0x0,8
tick,0x7ffe67f8feb4,510075310,0,0x0,8
tick,0x7ffe67f8feb4,510089678,0,0x0,8
tick,0x7ffe67f8feb4,510106986,0,0x0,8
tick,0x7ffe67f8feb4,510120989,0,0x0,8
tick,0x7ffe67f8feb4,510137051,0,0x0,8
tick,0x7ffe67f8feb4,510151850,0,0x0,8
tick,0x7ffe67f8feb4,510167028,0,0x0,8
tick,0x7ffe67f8feb4,510182864,0,0x0,8
tick,0x7ffe67f8feb4,510198115,0,0x0,8
tick,0x7ffe67f8feb4,510213888,0,0x0,8
tick,0x7ffe67f8feb4,510230026,0,0x0,8
tick,0x7ffe67f8feb4,510245050,0,0x0,8
tick,0x7ffe67f8feb4,510260788,0,0x0,8
tick,0x7ffe67f8feb4,510276714,0,0x0,8
tick,0x7ffe67f8feb4,510292874,0,0x0,8
tick,0x7ffe67f8feb4,510308768,0,0x0,8
tick,0x7ffe67f8feb4,510324079,0,0x0,8
tick,0x7ffe67f8feb4,510339986,0,0x0,8
tick,0x7ffe67f8feb4,510357020,0,0x0,8
tick,0x7ffe67f8feb4,510370011,0,0x0,8
tick,0x7ffe67f8feb4,510385191,0,0x0,8
tick,0x7ffe67f8feb4,510401042,0,0x0,8
tick,0x7ffe67f8feb4,510417014,0,0x0,8
tick,0x7ffe67f8feb4,510432888,0,0x0,8
tick,0x7ffe67f8feb4,510447892,0,0x0,8
tick,0x7ffe67f8feb4,510462898,0,0x0,8
tick,0x7ffe67f8feb4,510478883,0,0x0,8
tick,0x7ffe67f8feb4,510494079,0,0x0,8
tick,0x7ffe67f8feb4,510509898,0,0x0,8
tick,0x7ffe67f8feb4,510525899,0,0x0,8
tick,0x7ffe67f8feb4,510542271,0,0x0,8
tick,0x7ffe67f8feb4,510558106,0,0x0,8
tick,0x7ffe67f8feb4,510574122,0,0x0,8
tick,0x7ffe67f8feb4,510589532,0,0x0,8
tick,0x7ffe67f8feb4,510603888,0,0x0,8
tick,0x7ffe67f8feb4,510618952,0,0x0,8
tick,0x7ffe67f8feb4,510635035,0,0x0,8
tick,0x7ffe67f8feb4,510650947,0,0x0,8
tick,0x7ffe67f8feb4,510666163,0,0x0,8
tick,0x7ffe67f8feb4,510681879,0,0x0,8
tick,0x7ffe67f8feb4,510697867,0,0x0,8
tick,0x7ffe67f8feb4,510713080,0,0x0,8
tick,0x7ffe67f8feb4,510728888,0,0x0,8
tick,0x7ffe67f8feb4,510744209,0,0x0,8
tick,0x7ffe67f8feb4,510760200,0,0x0,8
tick,0x7ffe67f8feb4,510775896,0,0x0,8
tick,0x7ffe67f8feb4,510791886,0,0x0,8
tick,0x7ffe67f8feb4,510807975,0,0x0,8
tick,0x7ffe67f8feb4,510823533,0,0x0,8
tick,0x7ffe67f8feb4,510838372,0,0x0,8
tick,0x7ffe67f8feb4,510853894,0,0x0,8
tick,0x7ffe67f8feb4,510869928,0,0x0,8
tick,0x7ffe67f8feb4,510885872,0,0x0,8
tick,0x7ffe67f8feb4,510902048,0,0x0,8
tick,0x7ffe67f8feb4,510916876,0,0x0,8
tick,0x7ffe67f8feb4,510931874,0,0x0,8
tick,0x7ffe67f8feb4,510947872,0,0x0,8
tick,0x7ffe67f8feb4,510963915,0,0x0,8
tick,0x7ffe67f8feb4,510979874,0,0x0,8
tick,0x7ffe67f8feb4,510995881,0,0x0,8
tick,0x7ffe67f8feb4,511011886,0,0x0,8
tick,0x7ffe67f8feb4,511027867,0,0x0,8
tick,0x7ffe67f8feb4,511042857,0,0x0,8
tick,0x7ffe67f8feb4,511058942,0,0x0,8
tick,0x7ffe67f8feb4,511075122,0,0x0,8
tick,0x7ffe67f8feb4,511089903,0,0x0,8
tick,0x7ffe67f8feb4,511105253,0,0x0,8
tick,0x7ffe67f8feb4,511120172,0,0x0,8
tick,0x7ffe67f8feb4,511135406,0,0x0,8
tick,0x7ffe67f8feb4,511150685,0,0x0,8
tick,0x7ffe67f8feb4,511165834,0,0x0,8
tick,0x7ffe67f8feb4,511181264,0,0x0,8
tick,0x7ffe67f8feb4,511196505,0,0x0,8
tick,0x7ffe67f8feb4,511212495,0,0x0,8
tick,0x7ffe67f8feb4,511228472,0,0x0,8
tick,0x7ffe67f8feb4,511243831,0,0x0,8
tick,0x7ffe67f8feb4,511258938,0,0x0,8
tick,0x7ffe67f8feb4,511274520,0,0x0,8
tick,0x7ffe67f8feb4,511291337,0,0x0,8
tick,0x7ffe67f8feb4,511308533,0,0x0,8
tick,0x7ffe67f8feb4,511321611,0,0x0,8
tick,0x7ffe67f8feb4,511336830,0,0x0,8
tick,0x7ffe67f8feb4,511352615,0,0x0,8
tick,0x7ffe67f8feb4,511367819,0,0x0,8
tick,0x7ffe67f8feb4,511383234,0,0x0,8
tick,0x7ffe67f8feb4,511399194,0,0x0,8
tick,0x7ffe67f8feb4,511414494,0,0x0,8
tick,0x7ffe67f8feb4,511430540,0,0x0,8
tick,0x7ffe67f8feb4,511446523,0,0x0,8
tick,0x7ffe67f8feb4,511462355,0,0x0,8
tick,0x7ffe67f8feb4,511477854,0,0x0,8
tick,0x7ffe67f8feb4,511493814,0,0x0,8
tick,0x7ffe67f8feb4,511508840,0,0x0,8
tick,0x7ffe67f8feb4,511524944,0,0x0,8
tick,0x7ffe67f8feb4,511540427,0,0x0,8
tick,0x7ffe67f8feb4,511556866,0,0x0,8
tick,0x7ffe67f8feb4,511571316,0,0x0,8
tick,0x7ffe67f8feb4,511586942,0,0x0,8
tick,0x7ffe67f8feb4,511602903,0,0x0,8
tick,0x7ffe67f8feb4,511618266,0,0x0,8
tick,0x7ffe67f8feb4,511633861,0,0x0,8
tick,0x7ffe67f8feb4,511648863,0,0x0,8
tick,0x7ffe67f8feb4,511664870,0,0x0,8
tick,0x7ffe67f8feb4,511680414,0,0x0,8
tick,0x7ffe67f8feb4,511695750,0,0x0,8
tick,0x7ffe67f8feb4,511711670,0,0x0,8
tick,0x7ffe67f8feb4,511726850,0,0x0,8
tick,0x7ffe67f8feb4,511742778,0,0x0,8
tick,0x7ffe67f8feb4,511758670,0,0x0,8
tick,0x7ffe67f8feb4,511773708,0,0x0,8
tick,0x7ffe67f8feb4,511787792,0,0x0,8
tick,0x7ffe67f8feb4,511803595,0,0x0,8
tick,0x7ffe67f8feb4,511818667,0,0x0,8
tick,0x7ffe67f8feb4,511833930,0,0x0,8
tick,0x7ffe67f8feb4,511849509,0,0x0,8
tick,0x7ffe67f8feb4,511865671,0,0x0,8
tick,0x7ffe67f8feb4,511881688,0,0x0,8
tick,0x7ffe67f8feb4,511897160,0,0x0,8
tick,0x7ffe67f8feb4,511912840,0,0x0,8
tick,0x7ffe67f8feb4,511928468,0,0x0,8
tick,0x7ffe67f8feb4,511944601,0,0x0,8
tick,0x7ffe67f8feb4,511959543,0,0x0,8
tick,0x7ffe67f8feb4,511974607,0,0x0,8
tick,0x7ffe67f8feb4,511991568,0,0x0,8
tick,0x7ffe67f8feb4,512006917,0,0x0,8
tick,0x7ffe67f8feb4,512022570,0,0x0,8
tick,0x7ffe67f8feb4,512037562,0,0x0,8
tick,0x7ffe67f8feb4,512052550,0,0x0,8
tick,0x7ffe67f8feb4,512068514,0,0x0,8
tick,0x7ffe67f8feb4,512083817,0,0x0,8
tick,0x7ffe67f8feb4,512099500,0,0x0,8
tick,0x7ffe67f8feb4,512115196,0,0x0,8
tick,0x7ffe67f8feb4,512130825,0,0x0,8
tick,0x7ffe67f8feb4,512146903,0,0x0,8
tick,0x7ffe67f8feb4,512162859,0,0x0,8
tick,0x7ffe67f8feb4,512178894,0,0x0,8
tick,0x7ffe67f8feb4,512194904,0,0x0,8
tick,0x7ffe67f8feb4,512210854,0,0x0,8
tick,0x7ffe67f8feb4,512226863,0,0x0,8
tick,0x7ffe67f8feb4,512242086,0,0x0,8
tick,0x7ffe67f8feb4,512257937,0,0x0,8
tick,0x7ffe67f8feb4,512273957,0,0x0,8
tick,0x7ffe67f8feb4,512289900,0,0x0,8
tick,0x7ffe67f8feb4,512305858,0,0x0,8
tick,0x7ffe67f8feb4,512321458,0,0x0,8
tick,0x7ffe67f8feb4,512337461,0,0x0,8
tick,0x7ffe67f8feb4,512352840,0,0x0,8
tick,0x7ffe67f8feb4,512368464,0,0x0,8
tick,0x7ffe67f8feb4,512383860,0,0x0,8
tick,0x7ffe67f8feb4,512399499,0,0x0,8
tick,0x7ffe67f8feb4,512415481,0,0x0,8
tick,0x7ffe67f8feb4,512430617,0,0x0,8
tick,0x7ffe67f8feb4,512446623,0,0x0,8
tick,0x7ffe67f8feb4,512462265,0,0x0,8
tick,0x7ffe67f8feb4,512478072,0,0x0,8
tick,0x7ffe67f8feb4,512494027,0,0x0,8
tick,0x7ffe67f8feb4,512509056,0,0x0,8
tick,0x7ffe67f8feb4,512524087,0,0x0,8
tick,0x7ffe67f8feb4,512540079,0,0x0,8
tick,0x7ffe67f8feb4,512556046,0,0x0,8
tick,0x7ffe67f8feb4,512572073,0,0x0,8
tick,0x7ffe67f8feb4,512588103,0,0x0,8
tick,0x7ffe67f8feb4,512604063,0,0x0,8
tick,0x7ffe67f8feb4,512619214,0,0x0,8
tick,0x7ffe67f8feb4,512633878,0,0x0,8
tick,0x7ffe67f8feb4,512649155,0,0x0,8
tick,0x7ffe67f8feb4,512665165,0,0x0,8
tick,0x7ffe67f8feb4,512680562,0,0x0,8
tick,0x7ffe67f8feb4,512696018,0,0x0,8
tick,0x7ffe67f8feb4,512712108,0,0x0,8
tick,0x7ffe67f8feb4,512728019,0,0x0,8
tick,0x7ffe67f8feb4,512743511,0,0x0,8
tick,0x7ffe67f8feb4,512759540,0,0x0,8
tick,0x7ffe67f8feb4,512775735,0,0x0,8
tick,0x7ffe67f8feb4,512790269,0,0x0,8
tick,0x7ffe67f8feb4,512806232,0,0x0,8
tick,0x7ffe67f8feb4,512822212,0,0x0,8
tick,0x7ffe67f8feb4,512837522,0,0x0,8
tick,0x7ffe67f8feb4,512853506,0,0x0,8
tick,0x7ffe67f8feb4,512869243,0,0x0,8
tick,0x7ffe67f8feb4,512885028,0,0x0,8
tick,0x7ffe67f8feb4,512900322,0,0x0,8
tick,0x7ffe67f8feb4,512916335,0,0x0,8
tick,0x7ffe67f8feb4,512931881,0,0x0,8
tick,0x7ffe67f8feb4,512947913,0,0x0,8
tick,0x7ffe67f8feb4,512962821,0,0x0,8
tick,0x7ffe67f8feb4,512977873,0,0x0,8
tick,0x7ffe67f8feb4,512992815,0,0x0,8
tick,0x7ffe67f8feb4,513008849,0,0x0,8
tick,0x7ffe67f8feb4,513024933,0,0x0,8
tick,0x7ffe67f8feb4,513041286,0,0x0,8
tick,0x7ffe67f8feb4,513055953,0,0x0,8
tick,0x7ffe67f8feb4,513070821,0,0x0,8
tick,0x7ffe67f8feb4,513086828,0,0x0,8
tick,0x7ffe67f8feb4,513102536,0,0x0,8
tick,0x7ffe67f8feb4,513118045,0,0x0,8
tick,0x7ffe67f8feb4,513133857,0,0x0,8
tick,0x7ffe67f8feb4,513149005,0,0x0,8
tick,0x7ffe67f8feb4,513165026,0,0x0,8
tick,0x7ffe67f8feb4,513180631,0,0x0,8
tick,0x7ffe67f8feb4,513196778,0,0x0,8
tick,0x7ffe67f8feb4,513212349,0,0x0,8
tick,0x7ffe67f8feb4,513228089,0,0x0,8
tick,0x7ffe67f8feb4,513243438,0,0x0,8
tick,0x7ffe67f8feb4,513259502,0,0x0,8
tick,0x7ffe67f8feb4,513274968,0,0x0,8
tick,0x7ffe67f8feb4,513290721,0,0x0,8
tick,0x7ffe67f8feb4,513306229,0,0x0,8
tick,0x7ffe67f8feb4,513321035,0,0x0,8
tick,0x7ffe67f8feb4,513336027,0,0x0,8
tick,0x7ffe67f8feb4,513351523,0,0x0,8
tick,0x7ffe67f8feb4,513366890,0,0x0,8
tick,0x7ffe67f8feb4,513382878,0,0x0,8
tick,0x7ffe67f8feb4,513398153,0,0x0,8
tick,0x7ffe67f8feb4,513413519,0,0x0,8
tick,0x7ffe67f8feb4,513428952,0,0x0,8
tick,0x7ffe67f8feb4,513444975,0,0x0,8
tick,0x7ffe67f8feb4,513460352,0,0x0,8
tick,0x7ffe67f8feb4,513475667,0,0x0,8
tick,0x7ffe67f8feb4,513490610,0,0x0,8
tick,0x7ffe67f8feb4,513506035,0,0x0,8
tick,0x7ffe67f8feb4,513521627,0,0x0,8
tick,0x7ffe67f8feb4,513536888,0,0x0,8
tick,0x7ffe67f8feb4,513551718,0,0x0,8
tick,0x7ffe67f8feb4,513567718,0,0x0,8
tick,0x7ffe67f8feb4,513582937,0,0x0,8
tick,0x7ffe67f8feb4,513598825,0,0x0,8
tick,0x7ffe67f8feb4,513614052,0,0x0,8
tick,0x7ffe67f8feb4,513629421,0,0x0,8
tick,0x7ffe67f8feb4,513644884,0,0x0,8
tick,0x7ffe67f8feb4,513660790,0,0x0,8
tick,0x7ffe67f8feb4,513677108,0,0x0,8
tick,0x7ffe67f8feb4,513692047,0,0x0,8
tick,0x7ffe67f8feb4,513706815,0,0x0,8
tick,0x7ffe67f8feb4,513722864,0,0x0,8
tick,0x7ffe67f8feb4,513738218,0,0x0,8
tick,0x7ffe67f8feb4,513753873,0,0x0,8
tick,0x7ffe67f8feb4,513769217,0,0x0,8
tick,0x7ffe67f8feb4,513785052,0,0x0,8
tick,0x7ffe67f8feb4,513800451,0,0x0,8
tick,0x7ffe67f8feb4,513815900,0,0x0,8
tick,0x7ffe67f8feb4,513831287,0,0x0,8
tick,0x7ffe67f8feb4,513846959,0,0x0,8
tick,0x7ffe67f8feb4,513862813,0,0x0,8
tick,0x7ffe67f8feb4,513878805,0,0x0,8
tick,0x7ffe67f8feb4,513894736,0,0x0,8
tick,0x7ffe67f8feb4,513910016,0,0x0,8
tick,0x7ffe67f8feb4,513924561,0,0x0,8
tick,0x7ffe67f8feb4,513939676,0,0x0,8
tick,0x7ffe67f8feb4,513955696,0,0x0,8
tick,0x7ffe67f8feb4,513970690,0,0x0,8
tick,0x7ffe67f8feb4,513986676,0,0x0,8
tick,0x7ffe67f8feb4,514001677,0,0x0,8
tick,0x7ffe67f8feb4,514016753,0,0x0,8
tick,0x7ffe67f8feb4,514031716,0,0x0,8
tick,0x7ffe67f8feb4,514047679,0,0x0,8
tick,0x7ffe67f8feb4,514062721,0,0x0,8
tick,0x7ffe67f8feb4,514077790,0,0x0,8
tick,0x7ffe67f8feb4,514092935,0,0x0,8
tick,0x7ffe67f8feb4,514107673,0,0x0,8
tick,0x7ffe67f8feb4,514122849,0,0x0,8
tick,0x7ffe67f8feb4,514138724,0,0x0,8
tick,0x7ffe67f8feb4,514153970,0,0x0,8
tick,0x7ffe67f8feb4,514168887,0,0x0,8
tick,0x7ffe67f8feb4,514184010,0,0x0,8
tick,0x7ffe67f8feb4,514199878,0,0x0,8
tick,0x7ffe67f8feb4,514215528,0,0x0,8
tick,0x7ffe67f8feb4,514231554,0,0x0,8
tick,0x7ffe67f8feb4,514246098,0,0x0,8
tick,0x7ffe67f8feb4,514261958,0,0x0,8
tick,0x7ffe67f8feb4,514278061,0,0x0,8
tick,0x7ffe67f8feb4,514294307,0,0x0,8
tick,0x7ffe67f8feb4,514309762,0,0x0,8
tick,0x7ffe67f8feb4,514323873,0,0x0,8
tick,0x7ffe67f8feb4,514339414,0,0x0,8
tick,0x7ffe67f8feb4,514355388,0,0x0,8
tick,0x7ffe67f8feb4,514370436,0,0x0,8
tick,0x7ffe67f8feb4,514386568,0,0x0,8
tick,0x7ffe67f8feb4,514402381,0,0x0,8
tick,0x7ffe67f8feb4,514417620,0,0x0,8
tick,0x7ffe67f8feb4,514432927,0,0x0,8
tick,0x7ffe67f8feb4,514449159,0,0x0,8
tick,0x7ffe67f8feb4,514464693,0,0x0,8
tick,0x7ffe67f8feb4,514479837,0,0x0,8
tick,0x7ffe67f8feb4,514494946,0,0x0,8
tick,0x7ffe67f8feb4,514510061,0,0x0,8
tick,0x7ffe67f8feb4,514526056,0,0x0,8
tick,0x7ffe67f8feb4,514541174,0,0x0,8
tick,0x7ffe67f8feb4,514557419,0,0x0,8
tick,0x7ffe67f8feb4,514572846,0,0x0,8
tick,0x7ffe67f8feb4,514588268,0,0x0,8
tick,0x7ffe67f8feb4,514603383,0,0x0,8
tick,0x7ffe67f8feb4,514619483,0,0x0,8
tick,0x7ffe67f8feb4,514634645,0,0x0,8
tick,0x7ffe67f8feb4,514650337,0,0x0,8
tick,0x7ffe67f8feb4,514666354,0,0x0,8
tick,0x7ffe67f8feb4,514681497,0,0x0,8
tick,0x7ffe67f8feb4,514696838,0,0x0,8
tick,0x7ffe67f8feb4,514712857,0,0x0,8
tick,0x7ffe67f8feb4,514728834,0,0x0,8
tick,0x7ffe67f8feb4,514744799,0,0x0,8
tick,0x7ffe67f8feb4,514760806,0,0x0,8
tick,0x7ffe67f8feb4,514775426,0,0x0,8
tick,0x7ffe67f8feb4,514791428,0,0x0,8
tick,0x7ffe67f8feb4,514807392,0,0x0,8
tick,0x7ffe67f8feb4,514823372,0,0x0,8
tick,0x7ffe67f8feb4,514838357,0,0x0,8
tick,0x7ffe67f8feb4,514853993,0,0x0,8
tick,0x7ffe67f8feb4,514869369,0,0x0,8
tick,0x7ffe67f8feb4,514885018,0,0x0,8
tick,0x7ffe67f8feb4,514900381,0,0x0,8
tick,0x7ffe67f8feb4,514915914,0,0x0,8
tick,0x7ffe67f8feb4,514931876,0,0x0,8
tick,0x7ffe67f8feb4,514947385,0,0x0,8
tick,0x7ffe67f8feb4,514963425,0,0x0,8
tick,0x7ffe67f8feb4,514979687,0,0x0,8
tick,0x7ffe67f8feb4,514995486,0,0x0,8
tick,0x7ffe67f8feb4,515011409,0,0x0,8
tick,0x7ffe67f8feb4,515027583,0,0x0,8
tick,0x7ffe67f8feb4,515043433,0,0x0,8
tick,0x7ffe67f8feb4,515059402,0,0x0,8
tick,0x7ffe67f8feb4,515075339,0,0x0,8
tick,0x7ffe67f8feb4,515091355,0,0x0,8
tick,0x7ffe67f8feb4,515107382,0,0x0,8
tick,0x7ffe67f8feb4,515122730,0,0x0,8
tick,0x7ffe67f8feb4,515138374,0,0x0,8
tick,0x7ffe67f8feb4,515153387,0,0x0,8
tick,0x7ffe67f8feb4,515169392,0,0x0,8
tick,0x7ffe67f8feb4,515185047,0,0x0,8
tick,0x7ffe67f8feb4,515200916,0,0x0,8
tick,0x7ffe67f8feb4,515216098,0,0x0,8
tick,0x7ffe67f8feb4,515231876,0,0x0,8
tick,0x7ffe67f8feb4,515247893,0,0x0,8
tick,0x7ffe67f8feb4,515263899,0,0x0,8
tick,0x7ffe67f8feb4,515279726,0,0x0,8
tick,0x7ffe67f8feb4,515294854,0,0x0,8
tick,0x7ffe67f8feb4,515311148,0,0x0,8
tick,0x7ffe67f8feb4,515326012,0,0x0,8
tick,0x7ffe67f8feb4,515341911,0,0x0,8
tick,0x7ffe67f8feb4,515357986,0,0x0,8
tick,0x7ffe67f8feb4,515374003,0,0x0,8
tick,0x7ffe67f8feb4,515389926,0,0x0,8
tick,0x7ffe67f8feb4,515407495,0,0x0,8
tick,0x7ffe67f8feb4,515420932,0,0x0,8
tick,0x7ffe67f8feb4,515437049,0,0x0,8
tick,0x7ffe67f8feb4,515453144,0,0x0,8
tick,0x7ffe67f8feb4,515468657,0,0x0,8
tick,0x7ffe67f8feb4,515483784,0,0x0,8
tick,0x7ffe67f8feb4,515499659,0,0x0,8
tick,0x7ffe67f8feb4,515514928,0,0x0,8
tick,0x7ffe67f8feb4,515530116,0,0x0,8
tick,0x7ffe67f8feb4,515545664,0,0x0,8
tick,0x7ffe67f8feb4,515561681,0,0x0,8
tick,0x7ffe67f8feb4,515577534,0,0x0,8
tick,0x7ffe67f8feb4,515592790,0,0x0,8
tick,0x7ffe67f8feb4,515608767,0,0x0,8
tick,0x7ffe67f8feb4,515623912,0,0x0,8
tick,0x7ffe67f8feb4,515639253,0,0x0,8
tick,0x7ffe67f8feb4,515654866,0,0x0,8
tick,0x7ffe67f8feb4,515669805,0,0x0,8
tick,0x7ffe67f8feb4,515685036,0,0x0,8
tick,0x7ffe67f8feb4,515700965,0,0x0,8
tick,0x7ffe67f8feb4,515716923,0,0x0,8
tick,0x7ffe67f8feb4,515732823,0,0x0,8
tick,0x7ffe67f8feb4,515748423,0,0x0,8
tick,0x7ffe67f8feb4,515763721,0,0x0,8
tick,0x7ffe67f8feb4,515779709,0,0x0,8
tick,0x7ffe67f8feb4,515796266,0,0x0,8
tick,0x7ffe67f8feb4,515811830,0,0x0,8
tick,0x7ffe67f8feb4,515826412,0,0x0,8
tick,0x7ffe67f8feb4,515841428,0,0x0,8
tick,0x7ffe67f8feb4,515857031,0,0x0,8
tick,0x7ffe67f8feb4,515872429,0,0x0,8
tick,0x7ffe67f8feb4,515887416,0,0x0,8
tick,0x7ffe67f8feb4,515903436,0,0x0,8
tick,0x7ffe67f8feb4,515919419,0,0x0,8
tick,0x7ffe67f8feb4,515934580,0,0x0,8
tick,0x7ffe67f8feb4,515950670,0,0x0,8
tick,0x7ffe67f8feb4,515966769,0,0x0,8
tick,0x7ffe67f8feb4,515982767,0,0x0,8
tick,0x7ffe67f8feb4,515997751,0,0x0,8
tick,0x7ffe67f8feb4,516012860,0,0x0,8
tick,0x7ffe67f8feb4,516027956,0,0x0,8
tick,0x7ffe67f8feb4,516042764,0,0x0,8
tick,0x7ffe67f8feb4,516057827,0,0x0,8
tick,0x7ffe67f8feb4,516073788,0,0x0,8
tick,0x7ffe67f8feb4,516088933,0,0x0,8
tick,0x7ffe67f8feb4,516104747,0,0x0,8
tick,0x7ffe67f8feb4,516120867,0,0x0,8
tick,0x7ffe67f8feb4,516135975,0,0x0,8
tick,0x7ffe67f8feb4,516152112,0,0x0,8
tick,0x7ffe67f8feb4,516168084,0,0x0,8
tick,0x7ffe67f8feb4,516183825,0,0x0,8
tick,0x7ffe67f8feb4,516199026,0,0x0,8
tick,0x7ffe67f8feb4,516214179,0,0x0,8
tick,0x7ffe67f8feb4,516229426,0,0x0,8
tick,0x7ffe67f8feb4,516244861,0,0x0,8
tick,0x7ffe67f8feb4,516260947,0,0x0,8
tick,0x7ffe67f8feb4,516275874,0,0x0,8
tick,0x7ffe67f8feb4,516292031,0,0x0,8
tick,0x7ffe67f8feb4,516307871,0,0x0,8
tick,0x7ffe67f8feb4,516323828,0,0x0,8
tick,0x7ffe67f8feb4,516339891,0,0x0,8
tick,0x7ffe67f8feb4,516355051,0,0x0,8
tick,0x7ffe67f8feb4,516370646,0,0x0,8
tick,0x7ffe67f8feb4,516385288,0,0x0,8
tick,0x7ffe67f8feb4,516400835,0,0x0,8
tick,0x7ffe67f8feb4,516416931,0,0x0,8
tick,0x7ffe67f8feb4,516432870,0,0x0,8
tick,0x7ffe67f8feb4,516448880,0,0x0,8
tick,0x7ffe67f8feb4,516464006,0,0x0,8
tick,0x7ffe67f8feb4,516479864,0,0x0,8
tick,0x7ffe67f8feb4,516495926,0,0x0,8
tick,0x7ffe67f8feb4,516511889,0,0x0,8
tick,0x7ffe67f8feb4,516526536,0,0x0,8
tick,0x7ffe67f8feb4,516542085,0,0x0,8
tick,0x7ffe67f8feb4,516557491,0,0x0,8
tick,0x7ffe67f8feb4,516572842,0,0x0,8
tick,0x7ffe67f8feb4,516588499,0,0x0,8
tick,0x7ffe67f8feb4,516603800,0,0x0,8
tick,0x7ffe67f8feb4,516619515,0,0x0,8
tick,0x7ffe67f8feb4,516635513,0,0x0,8
tick,0x7ffe67f8feb4,516650320,0,0x0,8
tick,0x7ffe67f8feb4,516666346,0,0x0,8
tick,0x7ffe67f8feb4,516682306,0,0x0,8
tick,0x7ffe67f8feb4,516698343,0,0x0,8
tick,0x7ffe67f8feb4,516713577,0,0x0,8
tick,0x7ffe67f8feb4,516729519,0,0x0,8
tick,0x7ffe67f8feb4,516744998,0,0x0,8
tick,0x7ffe67f8feb4,516760900,0,0x0,8
tick,0x7ffe67f8feb4,516776376,0,0x0,8
tick,0x7ffe67f8feb4,516791403,0,0x0,8
tick,0x7ffe67f8feb4,516807370,0,0x0,8
tick,0x7ffe67f8feb4,516822899,0,0x0,8
tick,0x7ffe67f8feb4,516838888,0,0x0,8
tick,0x7ffe67f8feb4,516854044,0,0x0,8
tick,0x7ffe67f8feb4,516870127,0,0x0,8
tick,0x7ffe67f8feb4,516886126,0,0x0,8
tick,0x7ffe67f8feb4,516902132,0,0x0,8
tick,0x7ffe67f8feb4,516917969,0,0x0,8
tick,0x7ffe67f8feb4,516933913,0,0x0,8
tick,0x7ffe67f8feb4,516949095,0,0x0,8
tick,0x7ffe67f8feb4,516965028,0,0x0,8
tick,0x7ffe67f8feb4,516980995,0,0x0,8
tick,0x7ffe67f8feb4,516997065,0,0x0,8
tick,0x7ffe67f8feb4,517012030,0,0x0,8
tick,0x7ffe67f8feb4,517027891,0,0x0,8
tick,0x7ffe67f8feb4,517042879,0,0x0,8
tick,0x7ffe67f8feb4,517058880,0,0x0,8
tick,0x7ffe67f8feb4,517073913,0,0x0,8
tick,0x7ffe67f8feb4,517089897,0,0x0,8
tick,0x7ffe67f8feb4,517105024,0,0x0,8
tick,0x7ffe67f8feb4,517120872,0,0x0,8
tick,0x7ffe67f8feb4,517136059,0,0x0,8
tick,0x7ffe67f8feb4,517151257,0,0x0,8
tick,0x7ffe67f8feb4,517166906,0,0x0,8
tick,0x7ffe67f8feb4,517182914,0,0x0,8
tick,0x7ffe67f8feb4,517198910,0,0x0,8
tick,0x7ffe67f8feb4,517215035,0,0x0,8
tick,0x7ffe67f8feb4,517230011,0,0x0,8
tick,0x7ffe67f8feb4,517245180,0,0x0,8
tick,0x7ffe67f8feb4,517261097,0,0x0,8
tick,0x7ffe67f8feb4,517276416,0,0x0,8
tick,0x7ffe67f8feb4,517291410,0,0x0,8
tick,0x7ffe67f8feb4,517307416,0,0x0,8
tick,0x7ffe67f8feb4,517323463,0,0x0,8
tick,0x7ffe67f8feb4,517338950,0,0x0,8
tick,0x7ffe67f8feb4,517353912,0,0x0,8
tick,0x7ffe67f8feb4,517368877,0,0x0,8
tick,0x7ffe67f8feb4,517384032,0,0x0,8
tick,0x7ffe67f8feb4,517399862,0,0x0,8
tick,0x7ffe67f8feb4,517415886,0,0x0,8
tick,0x7ffe67f8feb4,517431893,0,0x0,8
tick,0x7ffe67f8feb4,517448007,0,0x0,8
tick,0x7ffe67f8feb4,517462911,0,0x0,8
tick,0x7ffe67f8feb4,517478414,0,0x0,8
tick,0x7ffe67f8feb4,517493184,0,0x0,8
tick,0x7ffe67f8feb4,517508525,0,0x0,8
tick,0x7ffe67f8feb4,517523920,0,0x0,8
tick,0x7ffe67f8feb4,517538859,0,0x0,8
tick,0x7ffe67f8feb4,517554337,0,0x0,8
tick,0x7ffe67f8feb4,517569850,0,0x0,8
tick,0x7ffe67f8feb4,517584633,0,0x0,8
tick,0x7ffe67f8feb4,517600063,0,0x0,8
tick,0x7ffe67f8feb4,517616373,0,0x0,8
tick,0x7ffe67f8feb4,517630451,0,0x0,8
tick,0x7ffe67f8feb4,517647111,0,0x0,8
tick,0x7ffe67f8feb4,517661958,0,0x0,8
tick,0x7ffe67f8feb4,517677927,0,0x0,8
tick,0x7ffe67f8feb4,517693981,0,0x0,8
tick,0x7ffe67f8feb4,517708924,0,0x0,8
tick,0x7ffe67f8feb4,517725055,0,0x0,8
tick,0x7ffe67f8feb4,517740769,0,0x0,8
tick,0x7ffe67f8feb4,517755612,0,0x0,8
tick,0x7ffe67f8feb4,517771319,0,0x0,8
tick,0x7ffe67f8feb4,517787242,0,0x0,8
tick,0x7ffe67f8feb4,517803230,0,0x0,8
tick,0x7ffe67f8feb4,517819451,0,0x0,8
tick,0x7ffe67f8feb4,517834082,0,0x0,8
tick,0x7ffe67f8feb4,517848655,0,0x0,8
tick,0x7ffe67f8feb4,517864393,0,0x0,8
tick,0x7ffe67f8feb4,517879858,0,0x0,8
tick,0x7ffe67f8feb4,517895063,0,0x0,8
tick,0x7ffe67f8feb4,517910339,0,0x0,8
tick,0x7ffe67f8feb4,517925487,0,0x0,8
tick,0x7ffe67f8feb4,517941530,0,0x0,8
tick,0x7ffe67f8feb4,517956722,0,0x0,8
tick,0x7ffe67f8feb4,517971976,0,0x0,8
tick,0x7ffe67f8feb4,517987387,0,0x0,8
tick,0x7ffe67f8feb4,518003363,0,0x0,8
tick,0x7ffe67f8feb4,518019487,0,0x0,8
tick,0x7ffe67f8feb4,518035492,0,0x0,8
tick,0x7ffe67f8feb4,518051454,0,0x0,8
tick,0x7ffe67f8feb4,518067481,0,0x0,8
tick,0x7ffe67f8feb4,518082185,0,0x0,8
tick,0x7ffe67f8feb4,518097394,0,0x0,8
tick,0x7ffe67f8feb4,518113766,0,0x0,8
tick,0x7ffe67f8feb4,518127689,0,0x0,8
tick,0x7ffe67f8feb4,518142871,0,0x0,8
tick,0x7ffe67f8feb4,518158492,0,0x0,8
tick,0x7ffe67f8feb4,518173896,0,0x0,8
tick,0x7ffe67f8feb4,518188540,0,0x0,8
tick,0x7ffe67f8feb4,518203762,0,0x0,8
tick,0x7ffe67f8feb4,518218886,0,0x0,8
tick,0x7ffe67f8feb4,518235014,0,0x0,8
tick,0x7ffe67f8feb4,518250143,0,0x0,8
tick,0x7ffe67f8feb4,518266177,0,0x0,8
tick,0x7ffe67f8feb4,518282132,0,0x0,8
tick,0x7ffe67f8feb4,518297949,0,0x0,8
tick,0x7ffe67f8feb4,518313846,0,0x0,8
tick,0x7ffe67f8feb4,518328970,0,0x0,8
tick,0x7ffe67f8feb4,518344898,0,0x0,8
tick,0x7ffe67f8feb4,518360390,0,0x0,8
tick,0x7ffe67f8feb4,518375457,0,0x0,8
tick,0x7ffe67f8feb4,518390733,0,0x0,8
tick,0x7ffe67f8feb4,518405835,0,0x0,8
tick,0x7ffe67f8feb4,518421051,0,0x0,8
tick,0x7ffe67f8feb4,518436871,0,0x0,8
tick,0x7ffe67f8feb4,518452963,0,0x0,8
tick,0x7ffe67f8feb4,518468844,0,0x0,8
tick,0x7ffe67f8feb4,518484040,0,0x0,8
tick,0x7ffe67f8feb4,518500066,0,0x0,8
tick,0x7ffe67f8feb4,518516053,0,0x0,8
tick,0x7ffe67f8feb4,518531459,0,0x0,8
tick,0x7ffe67f8feb4,518546448,0,0x0,8
tick,0x7ffe67f8feb4,518561890,0,0x0,8
tick,0x7ffe67f8feb4,518577768,0,0x0,8
tick,0x7ffe67f8feb4,518592892,0,0x0,8
tick,0x7ffe67f8feb4,518608788,0,0x0,8
tick,0x7ffe67f8feb4,518623931,0,0x0,8
tick,0x7ffe67f8feb4,518640018,0,0x0,8
tick,0x7ffe67f8feb4,518655196,0,0x0,8
tick,0x7ffe67f8feb4,518670039,0,0x0,8
tick,0x7ffe67f8feb4,518685502,0,0x0,8
tick,0x7ffe67f8feb4,518710456,0,0x0,8
tick,0x7ffe67f8feb4,518718199,0,0x0,8
tick,0x7ffe67f8feb4,518732799,0,0x0,8
tick,0x7ffe67f8feb4,518748821,0,0x0,8
tick,0x7ffe67f8feb4,518764827,0,0x0,8
tick,0x7ffe67f8feb4,518780851,0,0x0,8
tick,0x7ffe67f8feb4,518797419,0,0x0,8
tick,0x7ffe67f8feb4,518812236,0,0x0,8
tick,0x7ffe67f8feb4,518827851,0,0x0,8
tick,0x7ffe67f8feb4,518843064,0,0x0,8
tick,0x7ffe67f8feb4,518858990,0,0x0,8
tick,0x7ffe67f8feb4,518875063,0,0x0,8
tick,0x7ffe67f8feb4,518891055,0,0x0,8
tick,0x7ffe67f8feb4,518906283,0,0x0,8
tick,0x7ffe67f8feb4,518921446,0,0x0,8
tick,0x7ffe67f8feb4,518937459,0,0x0,8
tick,0x7ffe67f8feb4,518952884,0,0x0,8
tick,0x7ffe67f8feb4,518967976,0,0x0,8
tick,0x7ffe67f8feb4,518983992,0,0x0,8
tick,0x7ffe67f8feb4,518998772,0,0x0,8
tick,0x7ffe67f8feb4,519014979,0,0x0,8
tick,0x7ffe67f8feb4,519030847,0,0x0,8
tick,0x7ffe67f8feb4,519046767,0,0x0,8
tick,0x7ffe67f8feb4,519062744,0,0x0,8
tick,0x7ffe67f8feb4,519078749,0,0x0,8
tick,0x7ffe67f8feb4,519093770,0,0x0,8
tick,0x7ffe67f8feb4,519108784,0,0x0,8
tick,0x7ffe67f8feb4,519124949,0,0x0,8
tick,0x7ffe67f8feb4,519139817,0,0x0,8
tick,0x7ffe67f8feb4,519155770,0,0x0,8
tick,0x7ffe67f8feb4,519170778,0,0x0,8
tick,0x7ffe67f8feb4,519185753,0,0x0,8
tick,0x7ffe67f8feb4,519201754,0,0x0,8
tick,0x7ffe67f8feb4,519217785,0,0x0,8
tick,0x7ffe67f8feb4,519233808,0,0x0,8
tick,0x7ffe67f8feb4,519248832,0,0x0,8
tick,0x7ffe67f8feb4,519263974,0,0x0,8
tick,0x7ffe67f8feb4,519279791,0,0x0,8
tick,0x7ffe67f8feb4,519294804,0,0x0,8
tick,0x7ffe67f8feb4,519310794,0,0x0,8
tick,0x7ffe67f8feb4,519326345,0,0x0,8
tick,0x7ffe67f8feb4,519341488,0,0x0,8
tick,0x7ffe67f8feb4,519357104,0,0x0,8
tick,0x7ffe67f8feb4,519372972,0,0x0,8
tick,0x7ffe67f8feb4,519388005,0,0x0,8
tick,0x7ffe67f8feb4,519403572,0,0x0,8
tick,0x7ffe67f8feb4,519418500,0,0x0,8
tick,0x7ffe67f8feb4,519433571,0,0x0,8
tick,0x7ffe67f8feb4,519449509,0,0x0,8
tick,0x7ffe67f8feb4,519465577,0,0x0,8
tick,0x7ffe67f8feb4,519481665,0,0x0,8
tick,0x7ffe67f8feb4,519497591,0,0x0,8
tick,0x7ffe67f8feb4,519512858,0,0x0,8
tick,0x7ffe67f8feb4,519528067,0,0x0,8
tick,0x7ffe67f8feb4,519544131,0,0x0,8
tick,0x7ffe67f8feb4,519559906,0,0x0,8
tick,0x7ffe67f8feb4,519576020,0,0x0,8
tick,0x7ffe67f8feb4,519591005,0,0x0,8
tick,0x7ffe67f8feb4,519605621,0,0x0,8
tick,0x7ffe67f8feb4,519620790,0,0x0,8
tick,0x7ffe67f8feb4,519636233,0,0x0,8
tick,0x7ffe67f8feb4,519652256,0,0x0,8
tick,0x7ffe67f8feb4,519668257,0,0x0,8
tick,0x7ffe67f8feb4,519684307,0,0x0,8
tick,0x7ffe67f8feb4,519700359,0,0x0,8
tick,0x7ffe67f8feb4,519716515,0,0x0,8
tick,0x7ffe67f8feb4,519732453,0,0x0,8
tick,0x7ffe67f8feb4,519748362,0,0x0,8
tick,0x7ffe67f8feb4,519763551,0,0x0,8
tick,0x7ffe67f8feb4,519778719,0,0x0,8
tick,0x7ffe67f8feb4,519793919,0,0x0,8
tick,0x7ffe67f8feb4,519809536,0,0x0,8
tick,0x7ffe67f8feb4,519825062,0,0x0,8
tick,0x7ffe67f8feb4,519840291,0,0x0,8
tick,0x7ffe67f8feb4,519856291,0,0x0,8
tick,0x7ffe67f8feb4,519871914,0,0x0,8
tick,0x7ffe67f8feb4,519887431,0,0x0,8
tick,0x7ffe67f8feb4,519903405,0,0x0,8
tick,0x7ffe67f8feb4,519918318,0,0x0,8
tick,0x7ffe67f8feb4,519934622,0,0x0,8
tick,0x7ffe67f8feb4,519950432,0,0x0,8
tick,0x7ffe67f8feb4,519966498,0,0x0,8
tick,0x7ffe67f8feb4,519982686,0,0x0,8
tick,0x7ffe67f8feb4,519998427,0,0x0,8
tick,0x7ffe67f8feb4,520013930,0,0x0,8
tick,0x7ffe67f8feb4,520029908,0,0x0,8
tick,0x7ffe67f8feb4,520045889,0,0x0,8
tick,0x7ffe67f8feb4,520061909,0,0x0,8
tick,0x7ffe67f8feb4,520077897,0,0x0,8
tick,0x7ffe67f8feb4,520093910,0,0x0,8
tick,0x7ffe67f8feb4,520108932,0,0x0,8
tick,0x7ffe67f8feb4,520124906,0,0x0,8
tick,0x7ffe67f8feb4,520140168,0,0x0,8
tick,0x7ffe67f8feb4,520156141,0,0x0,8
tick,0x7ffe67f8feb4,520171786,0,0x0,8
tick,0x7ffe67f8feb4,520187872,0,0x0,8
tick,0x7ffe67f8feb4,520203310,0,0x0,8
tick,0x7ffe67f8feb4,520219310,0,0x0,8
tick,0x7ffe67f8feb4,520234717,0,0x0,8
tick,0x7ffe67f8feb4,520250838,0,0x0,8
tick,0x7ffe67f8feb4,520266230,0,0x0,8
tick,0x7ffe67f8feb4,520281095,0,0x0,8
tick,0x7ffe67f8feb4,520296287,0,0x0,8
tick,0x7ffe67f8feb4,520311911,0,0x0,8
tick,0x7ffe67f8feb4,520328040,0,0x0,8
tick,0x7ffe67f8feb4,520343177,0,0x0,8
tick,0x7ffe67f8feb4,520358898,0,0x0,8
tick,0x7ffe67f8feb4,520374042,0,0x0,8
tick,0x7ffe67f8feb4,520390129,0,0x0,8
tick,0x7ffe67f8feb4,520405256,0,0x0,8
tick,0x7ffe67f8feb4,520420296,0,0x0,8
tick,0x7ffe67f8feb4,520435972,0,0x0,8
tick,0x7ffe67f8feb4,520451517,0,0x0,8
tick,0x7ffe67f8feb4,520467143,0,0x0,8
tick,0x7ffe67f8feb4,520483146,0,0x0,8
tick,0x7ffe67f8feb4,520498702,0,0x0,8
tick,0x7ffe67f8feb4,520513924,0,0x0,8
tick,0x7ffe67f8feb4,520528977,0,0x0,8
tick,0x7ffe67f8feb4,520544082,0,0x0,8
tick,0x7ffe67f8feb4,520558827,0,0x0,8
tick,0x7ffe67f8feb4,520574030,0,0x0,8
tick,0x7ffe67f8feb4,520589365,0,0x0,8
tick,0x7ffe67f8feb4,520604060,0,0x0,8
tick,0x7ffe67f8feb4,520619401,0,0x0,8
tick,0x7ffe67f8feb4,520634688,0,0x0,8
tick,0x7ffe67f8feb4,520650306,0,0x0,8
tick,0x7ffe67f8feb4,520665652,0,0x0,8
tick,0x7ffe67f8feb4,520680600,0,0x0,8
tick,0x7ffe67f8feb4,520696660,0,0x0,8
tick,0x7ffe67f8feb4,520712444,0,0x0,8
tick,0x7ffe67f8feb4,520728155,0,0x0,8
tick,0x7ffe67f8feb4,520744033,0,0x0,8
tick,0x7ffe67f8feb4,520758707,0,0x0,8
tick,0x7ffe67f8feb4,520774845,0,0x0,8
tick,0x7ffe67f8feb4,520790854,0,0x0,8
tick,0x7ffe67f8feb4,520806874,0,0x0,8
tick,0x7ffe67f8feb4,520821959,0,0x0,8
tick,0x7ffe67f8feb4,520837159,0,0x0,8
tick,0x7ffe67f8feb4,520852907,0,0x0,8
tick,0x7ffe67f8feb4,520869222,0,0x0,8
tick,0x7ffe67f8feb4,520884684,0,0x0,8
tick,0x7ffe67f8feb4,520899377,0,0x0,8
tick,0x7ffe67f8feb4,520913834,0,0x0,8
tick,0x7ffe67f8feb4,520928874,0,0x0,8
tick,0x7ffe67f8feb4,520945016,0,0x0,8
tick,0x7ffe67f8feb4,520960927,0,0x0,8
tick,0x7ffe67f8feb4,520977040,0,0x0,8
tick,0x7ffe67f8feb4,520992977,0,0x0,8
tick,0x7ffe67f8feb4,521008786,0,0x0,8
tick,0x7ffe67f8feb4,521024884,0,0x0,8
tick,0x7ffe67f8feb4,521040884,0,0x0,8
tick,0x7ffe67f8feb4,521056935,0,0x0,8
tick,0x7ffe67f8feb4,521071915,0,0x0,8
tick,0x7ffe67f8feb4,521087856,0,0x0,8
tick,0x7ffe67f8feb4,521103864,0,0x0,8
tick,0x7ffe67f8feb4,521119842,0,0x0,8
tick,0x7ffe67f8feb4,521135007,0,0x0,8
tick,0x7ffe67f8feb4,521150877,0,0x0,8
tick,0x7ffe67f8feb4,521166832,0,0x0,8
tick,0x7ffe67f8feb4,521182940,0,0x0,8
tick,0x7ffe67f8feb4,521197848,0,0x0,8
tick,0x7ffe67f8feb4,521213845,0,0x0,8
tick,0x7ffe67f8feb4,521229830,0,0x0,8
tick,0x7ffe67f8feb4,521244507,0,0x0,8
tick,0x7ffe67f8feb4,521259854,0,0x0,8
tick,0x7ffe67f8feb4,521275964,0,0x0,8
tick,0x7ffe67f8feb4,521290946,0,0x0,8
tick,0x7ffe67f8feb4,521305893,0,0x0,8
tick,0x7ffe67f8feb4,521320775,0,0x0,8
tick,0x7ffe67f8feb4,521335839,0,0x0,8
tick,0x7ffe67f8feb4,521351943,0,0x0,8
tick,0x7ffe67f8feb4,521367899,0,0x0,8
tick,0x7ffe67f8feb4,521382898,0,0x0,8
tick,0x7ffe67f8feb4,521398956,0,0x0,8
tick,0x7ffe67f8feb4,521414943,0,0x0,8
tick,0x7ffe67f8feb4,521430985,0,0x0,8
tick,0x7ffe67f8feb4,521445670,0,0x0,8
tick,0x7ffe67f8feb4,521461532,0,0x0,8
tick,0x7ffe67f8feb4,521477040,0,0x0,8
tick,0x7ffe67f8feb4,521492907,0,0x0,8
tick,0x7ffe67f8feb4,521508921,0,0x0,8
tick,0x7ffe67f8feb4,521523946,0,0x0,8
tick,0x7ffe67f8feb4,521539070,0,0x0,8
tick,0x7ffe67f8feb4,521554950,0,0x0,8
tick,0x7ffe67f8feb4,521571221,0,0x0,8
tick,0x7ffe67f8feb4,521587069,0,0x0,8
tick,0x7ffe67f8feb4,521603016,0,0x0,8
tick,0x7ffe67f8feb4,521618034,0,0x0,8
tick,0x7ffe67f8feb4,521633292,0,0x0,8
tick,0x7ffe67f8feb4,521648491,0,0x0,8
tick,0x7ffe67f8feb4,521664489,0,0x0,8
tick,0x7ffe67f8feb4,521680503,0,0x0,8
tick,0x7ffe67f8feb4,521696056,0,0x0,8
tick,0x7ffe67f8feb4,521712000,0,0x0,8
tick,0x7ffe67f8feb4,521728072,0,0x0,8
tick,0x7ffe67f8feb4,521743986,0,0x0,8
tick,0x7ffe67f8feb4,521762554,0,0x0,8
tick,0x7ffe67f8feb4,521775061,0,0x0,8
tick,0x7ffe67f8feb4,521790229,0,0x0,8
tick,0x7ffe67f8feb4,521806086,0,0x0,8
tick,0x7ffe67f8feb4,521821556,0,0x0,8
tick,0x7ffe67f8feb4,521837140,0,0x0,8
tick,0x7ffe67f8feb4,521853146,0,0x0,8
tick,0x7ffe67f8feb4,521869276,0,0x0,8
tick,0x7ffe67f8feb4,521884895,0,0x0,8
tick,0x7ffe67f8feb4,521900593,0,0x0,8
tick,0x7ffe67f8feb4,521917190,0,0x0,8
tick,0x7ffe67f8feb4,521931387,0,0x0,8
tick,0x7ffe67f8feb4,521947408,0,0x0,8
tick,0x7ffe67f8feb4,521962927,0,0x0,8
tick,0x7ffe67f8feb4,521978408,0,0x0,8
tick,0x7ffe67f8feb4,521993935,0,0x0,8
tick,0x7ffe67f8feb4,522009915,0,0x0,8
tick,0x7ffe67f8feb4,522025655,0,0x0,8
tick,0x7ffe67f8feb4,522042009,0,0x0,8
tick,0x7ffe67f8feb4,522057688,0,0x0,8
tick,0x7ffe67f8feb4,522073631,0,0x0,8
tick,0x7ffe67f8feb4,522088600,0,0x0,8
tick,0x7ffe67f8feb4,522104591,0,0x0,8
tick,0x7ffe67f8feb4,522120618,0,0x0,8
tick,0x7ffe67f8feb4,522136115,0,0x0,8
tick,0x7ffe67f8feb4,522152125,0,0x0,8
tick,0x7ffe67f8feb4,522168172,0,0x0,8
tick,0x7ffe67f8feb4,522183922,0,0x0,8
tick,0x7ffe67f8feb4,522198981,0,0x0,8
tick,0x7ffe67f8feb4,522214876,0,0x0,8
tick,0x7ffe67f8feb4,522231002,0,0x0,8
tick,0x7ffe67f8feb4,522246134,0,0x0,8
tick,0x7ffe67f8feb4,522261930,0,0x0,8
tick,0x7ffe67f8feb4,522277976,0,0x0,8
tick,0x7ffe67f8feb4,522293101,0,0x0,8
tick,0x7ffe67f8feb4,522308669,0,0x0,8
tick,0x7ffe67f8feb4,522323367,0,0x0,8
tick,0x7ffe67f8feb4,522338894,0,0x0,8
tick,0x7ffe67f8feb4,522354048,0,0x0,8
tick,0x7ffe67f8feb4,522369946,0,0x0,8
tick,0x7ffe67f8feb4,522386203,0,0x0,8
tick,0x7ffe67f8feb4,522401998,0,0x0,8
tick,0x7ffe67f8feb4,522416573,0,0x0,8
tick,0x7ffe67f8feb4,522432549,0,0x0,8
tick,0x7ffe67f8feb4,522447484,0,0x0,8
tick,0x7ffe67f8feb4,522462897,0,0x0,8
tick,0x7ffe67f8feb4,522477929,0,0x0,8
tick,0x7ffe67f8feb4,522493909,0,0x0,8
tick,0x7ffe67f8feb4,522509410,0,0x0,8
tick,0x7ffe67f8feb4,522524946,0,0x0,8
tick,0x7ffe67f8feb4,522540955,0,0x0,8
tick,0x7ffe67f8feb4,522556723,0,0x0,8
tick,0x7ffe67f8feb4,522572571,0,0x0,8
tick,0x7ffe67f8feb4,522588597,0,0x0,8
tick,0x7ffe67f8feb4,522604599,0,0x0,8
tick,0x7ffe67f8feb4,522619713,0,0x0,8
tick,0x7ffe67f8feb4,522634590,0,0x0,8
tick,0x7ffe67f8feb4,522649684,0,0x0,8
tick,0x7ffe67f8feb4,522665486,0,0x0,8
tick,0x7ffe67f8feb4,522681608,0,0x0,8
tick,0x7ffe67f8feb4,522697245,0,0x0,8
tick,0x7ffe67f8feb4,522712203,0,0x0,8
tick,0x7ffe67f8feb4,522727189,0,0x0,8
tick,0x7ffe67f8feb4,522741823,0,0x0,8
tick,0x7ffe67f8feb4,522756965,0,0x0,8
tick,0x7ffe67f8feb4,522772531,0,0x0,8
tick,0x7ffe67f8feb4,522787955,0,0x0,8
tick,0x7ffe67f8feb4,522804210,0,0x0,8
tick,0x7ffe67f8feb4,522819052,0,0x0,8
tick,0x7ffe67f8feb4,522835008,0,0x0,8
tick,0x7ffe67f8feb4,522851027,0,0x0,8
tick,0x7ffe67f8feb4,522866178,0,0x0,8
tick,0x7ffe67f8feb4,522881887,0,0x0,8
tick,0x7ffe67f8feb4,522897393,0,0x0,8
tick,0x7ffe67f8feb4,522912892,0,0x0,8
tick,0x7ffe67f8feb4,522928038,0,0x0,8
tick,0x7ffe67f8feb4,522942871,0,0x0,8
tick,0x7ffe67f8feb4,522958038,0,0x0,8
tick,0x7ffe67f8feb4,522974153,0,0x0,8
tick,0x7ffe67f8feb4,522989273,0,0x0,8
tick,0x7ffe67f8feb4,523005008,0,0x0,8
tick,0x7ffe67f8feb4,523020203,0,0x0,8
tick,0x7ffe67f8feb4,523036032,0,0x0,8
tick,0x7ffe67f8feb4,523051018,0,0x0,8
tick,0x7ffe67f8feb4,523066239,0,0x0,8
tick,0x7ffe67f8feb4,523082014,0,0x0,8
tick,0x7ffe67f8feb4,523097994,0,0x0,8
tick,0x7ffe67f8feb4,523113051,0,0x0,8
tick,0x7ffe67f8feb4,523129007,0,0x0,8
tick,0x7ffe67f8feb4,523145015,0,0x0,8
tick,0x7ffe67f8feb4,523160150,0,0x0,8
tick,0x7ffe67f8feb4,523175331,0,0x0,8
tick,0x7ffe67f8feb4,523191453,0,0x0,8
tick,0x7ffe67f8feb4,523207551,0,0x0,8
tick,0x7ffe67f8feb4,523223018,0,0x0,8
tick,0x7ffe67f8feb4,523238994,0,0x0,8
tick,0x7ffe67f8feb4,523254060,0,0x0,8
tick,0x7ffe67f8feb4,523269028,0,0x0,8
tick,0x7ffe67f8feb4,523285338,0,0x0,8
tick,0x7ffe67f8feb4,523300965,0,0x0,8
tick,0x7ffe67f8feb4,523317075,0,0x0,8
tick,0x7ffe67f8feb4,523332932,0,0x0,8
tick,0x7ffe67f8feb4,523348058,0,0x0,8
tick,0x7ffe67f8feb4,523362918,0,0x0,8
tick,0x7ffe67f8feb4,523377964,0,0x0,8
tick,0x7ffe67f8feb4,523393910,0,0x0,8
tick,0x7ffe67f8feb4,523409724,0,0x0,8
tick,0x7ffe67f8feb4,523425683,0,0x0,8
tick,0x7ffe67f8feb4,523441322,0,0x0,8
tick,0x7ffe67f8feb4,523456547,0,0x0,8
tick,0x7ffe67f8feb4,523471546,0,0x0,8
tick,0x7ffe67f8feb4,523486978,0,0x0,8
tick,0x7ffe67f8feb4,523503062,0,0x0,8
tick,0x7ffe67f8feb4,523518553,0,0x0,8
tick,0x7ffe67f8feb4,523533948,0,0x0,8
tick,0x7ffe67f8feb4,523549112,0,0x0,8
tick,0x7ffe67f8feb4,523565057,0,0x0,8
tick,0x7ffe67f8feb4,523581133,0,0x0,8
tick,0x7ffe67f8feb4,523596159,0,0x0,8
tick,0x7ffe67f8feb4,523612158,0,0x0,8
tick,0x7ffe67f8feb4,523627848,0,0x0,8
tick,0x7ffe67f8feb4,523643135,0,0x0,8
tick,0x7ffe67f8feb4,523659141,0,0x0,8
tick,0x7ffe67f8feb4,523675101,0,0x0,8
tick,0x7ffe67f8feb4,523690149,0,0x0,8
tick,0x7ffe67f8feb4,523705320,0,0x0,8
tick,0x7ffe67f8feb4,523721195,0,0x0,8
tick,0x7ffe67f8feb4,523737208,0,0x0,8
tick,0x7ffe67f8feb4,523753191,0,0x0,8
tick,0x7ffe67f8feb4,523767940,0,0x0,8
tick,0x7ffe67f8feb4,523782922,0,0x0,8
tick,0x7ffe67f8feb4,523799024,0,0x0,8
tick,0x7ffe67f8feb4,523815089,0,0x0,8
tick,0x7ffe67f8feb4,523830238,0,0x0,8
tick,0x7ffe67f8feb4,523845390,0,0x0,8
tick,0x7ffe67f8feb4,523860477,0,0x0,8
tick,0x7ffe67f8feb4,523876063,0,0x0,8
tick,0x7ffe67f8feb4,523891214,0,0x0,8
tick,0x7ffe67f8feb4,523907090,0,0x0,8
tick,0x7ffe67f8feb4,523922939,0,0x0,8
tick,0x7ffe67f8feb4,523939003,0,0x0,8
tick,0x7ffe67f8feb4,523954951,0,0x0,8
tick,0x7ffe67f8feb4,523970952,0,0x0,8
tick,0x7ffe67f8feb4,523986972,0,0x0,8
tick,0x7ffe67f8feb4,524002260,0,0x0,8
tick,0x7ffe67f8feb4,524018033,0,0x0,8
tick,0x7ffe67f8feb4,524033986,0,0x0,8
tick,0x7ffe67f8feb4,524050105,0,0x0,8
tick,0x7ffe67f8feb4,524066070,0,0x0,8
tick,0x7ffe67f8feb4,524082083,0,0x0,8
tick,0x7ffe67f8feb4,524098052,0,0x0,8
tick,0x7ffe67f8feb4,524114052,0,0x0,8
tick,0x7ffe67f8feb4,524130057,0,0x0,8
tick,0x7ffe67f8feb4,524146061,0,0x0,8
tick,0x7ffe67f8feb4,524162034,0,0x0,8
tick,0x7ffe67f8feb4,524178030,0,0x0,8
tick,0x7ffe67f8feb4,524193456,0,0x0,8
tick,0x7ffe67f8feb4,524208669,0,0x0,8
tick,0x7ffe67f8feb4,524223956,0,0x0,8
tick,0x7ffe67f8feb4,524239983,0,0x0,8
tick,0x7ffe67f8feb4,524255351,0,0x0,8
tick,0x7ffe67f8feb4,524270971,0,0x0,8
tick,0x7ffe67f8feb4,524286994,0,0x0,8
tick,0x7ffe67f8feb4,524303088,0,0x0,8
tick,0x7ffe67f8feb4,524319734,0,0x0,8
tick,0x7ffe67f8feb4,524334088,0,0x0,8
tick,0x7ffe67f8feb4,524349949,0,0x0,8
tick,0x7ffe67f8feb4,524365384,0,0x0,8
tick,0x7ffe67f8feb4,524380970,0,0x0,8
tick,0x7ffe67f8feb4,524396181,0,0x0,8
tick,0x7ffe67f8feb4,524412009,0,0x0,8
tick,0x7ffe67f8feb4,524427266,0,0x0,8
tick,0x7ffe67f8feb4,524442987,0,0x0,8
tick,0x7ffe67f8feb4,524459008,0,0x0,8
tick,0x7ffe67f8feb4,524475297,0,0x0,8
tick,0x7ffe67f8feb4,524491057,0,0x0,8
tick,0x7ffe67f8feb4,524506872,0,0x0,8
tick,0x7ffe67f8feb4,524522116,0,0x0,8
tick,0x7ffe67f8feb4,524538029,0,0x0,8
tick,0x7ffe67f8feb4,524553980,0,0x0,8
tick,0x7ffe67f8feb4,524569997,0,0x0,8
tick,0x7ffe67f8feb4,524585074,0,0x0,8
tick,0x7ffe67f8feb4,524600268,0,0x0,8
tick,0x7ffe67f8feb4,524616120,0,0x0,8
tick,0x7ffe67f8feb4,524631200,0,0x0,8
tick,0x7ffe67f8feb4,524647091,0,0x0,8
tick,0x7ffe67f8feb4,524662925,0,0x0,8
tick,0x7ffe67f8feb4,524678272,0,0x0,8
tick,0x7ffe67f8feb4,524693947,0,0x0,8
tick,0x7ffe67f8feb4,524709085,0,0x0,8
tick,0x7ffe67f8feb4,524724941,0,0x0,8
tick,0x7ffe67f8feb4,524740223,0,0x0,8
tick,0x7ffe67f8feb4,524756660,0,0x0,8
tick,0x7ffe67f8feb4,524771717,0,0x0,8
tick,0x7ffe67f8feb4,524786760,0,0x0,8
tick,0x7ffe67f8feb4,524801644,0,0x0,8
tick,0x7ffe67f8feb4,524817621,0,0x0,8
tick,0x7ffe67f8feb4,524832970,0,0x0,8
tick,0x7ffe67f8feb4,524848872,0,0x0,8
tick,0x7ffe67f8feb4,524864102,0,0x0,8
tick,0x7ffe67f8feb4,524878957,0,0x0,8
tick,0x7ffe67f8feb4,524894083,0,0x0,8
tick,0x7ffe67f8feb4,524909926,0,0x0,8
tick,0x7ffe67f8feb4,524925083,0,0x0,8
tick,0x7ffe67f8feb4,524940496,0,0x0,8
tick,0x7ffe67f8feb4,524956527,0,0x0,8
tick,0x7ffe67f8feb4,524971882,0,0x0,8
tick,0x7ffe67f8feb4,524987761,0,0x0,8
tick,0x7ffe67f8feb4,525003416,0,0x0,8
tick,0x7ffe67f8feb4,525019005,0,0x0,8
tick,0x7ffe67f8feb4,525033994,0,0x0,8
tick,0x7ffe67f8feb4,525048973,0,0x0,8
tick,0x7ffe67f8feb4,525065098,0,0x0,8
tick,0x7ffe67f8feb4,525080070,0,0x0,8
tick,0x7ffe67f8feb4,525096078,0,0x0,8
tick,0x7ffe67f8feb4,525112066,0,0x0,8
tick,0x7ffe67f8feb4,525128083,0,0x0,8
tick,0x7ffe67f8feb4,525144071,0,0x0,8
tick,0x7ffe67f8feb4,525160060,0,0x0,8
tick,0x7ffe67f8feb4,525176102,0,0x0,8
tick,0x7ffe67f8feb4,525192082,0,0x0,8
tick,0x7ffe67f8feb4,525207569,0,0x0,8
tick,0x7ffe67f8feb4,525223699,0,0x0,8
tick,0x7ffe67f8feb4,525239672,0,0x0,8
tick,0x7ffe67f8feb4,525255632,0,0x0,8
tick,0x7ffe67f8feb4,525271735,0,0x0,8
tick,0x7ffe67f8feb4,525286257,0,0x0,8
tick,0x7ffe67f8feb4,525301459,0,0x0,8
tick,0x7ffe67f8feb4,525317432,0,0x0,8
tick,0x7ffe67f8feb4,525333041,0,0x0,8
tick,0x7ffe67f8feb4,525349070,0,0x0,8
tick,0x7ffe67f8feb4,525365081,0,0x0,8
tick,0x7ffe67f8feb4,525381072,0,0x0,8
tick,0x7ffe67f8feb4,525395822,0,0x0,8
tick,0x7ffe67f8feb4,525410818,0,0x0,8
tick,0x7ffe67f8feb4,525426110,0,0x0,8
tick,0x7ffe67f8feb4,525442121,0,0x0,8
tick,0x7ffe67f8feb4,525458087,0,0x0,8
tick,0x7ffe67f8feb4,525474103,0,0x0,8
tick,0x7ffe67f8feb4,525489373,0,0x0,8
tick,0x7ffe67f8feb4,525505249,0,0x0,8
tick,0x7ffe67f8feb4,525521107,0,0x0,8
tick,0x7ffe67f8feb4,525535707,0,0x0,8
tick,0x7ffe67f8feb4,525551812,0,0x0,8
tick,0x7ffe67f8feb4,525567794,0,0x0,8
tick,0x7ffe67f8feb4,525583653,0,0x0,8
tick,0x7ffe67f8feb4,525599105,0,0x0,8
tick,0x7ffe67f8feb4,525613969,0,0x0,8
tick,0x7ffe67f8feb4,525629720,0,0x0,8
tick,0x7ffe67f8feb4,525645490,0,0x0,8
tick,0x7ffe67f8feb4,525660517,0,0x0,8
tick,0x7ffe67f8feb4,525675663,0,0x0,8
tick,0x7ffe67f8feb4,525691352,0,0x0,8
tick,0x7ffe67f8feb4,525706240,0,0x0,8
tick,0x7ffe67f8feb4,525722929,0,0x0,8
tick,0x7ffe67f8feb4,525738293,0,0x0,8
tick,0x7ffe67f8feb4,525753051,0,0x0,8
tick,0x7ffe67f8feb4,525767977,0,0x0,8
tick,0x7ffe67f8feb4,525783993,0,0x0,8
tick,0x7ffe67f8feb4,525798983,0,0x0,8
tick,0x7ffe67f8feb4,525814897,0,0x0,8
tick,0x7ffe67f8feb4,525829821,0,0x0,8
tick,0x7ffe67f8feb4,525845071,0,0x0,8
tick,0x7ffe67f8feb4,525860926,0,0x0,8
tick,0x7ffe67f8feb4,525876909,0,0x0,8
tick,0x7ffe67f8feb4,525892444,0,0x0,8
tick,0x7ffe67f8feb4,525907866,0,0x0,8
tick,0x7ffe67f8feb4,525924051,0,0x0,8
tick,0x7ffe67f8feb4,525939763,0,0x0,8
tick,0x7ffe67f8feb4,525955413,0,0x0,8
tick,0x7ffe67f8feb4,525970343,0,0x0,8
tick,0x7ffe67f8feb4,525985326,0,0x0,8
tick,0x7ffe67f8feb4,526000612,0,0x0,8
tick,0x7ffe67f8feb4,526016681,0,0x0,8
tick,0x7ffe67f8feb4,526032724,0,0x0,8
tick,0x7ffe67f8feb4,526047875,0,0x0,8
tick,0x7ffe67f8feb4,526062921,0,0x0,8
tick,0x7ffe67f8feb4,526078361,0,0x0,8
tick,0x7ffe67f8feb4,526094192,0,0x0,8
tick,0x7ffe67f8feb4,526109301,0,0x0,8
tick,0x7ffe67f8feb4,526125846,0,0x0,8
tick,0x7ffe67f8feb4,526141208,0,0x0,8
tick,0x7ffe67f8feb4,526157204,0,0x0,8
tick,0x7ffe67f8feb4,526173200,0,0x0,8
tick,0x7ffe67f8feb4,526189107,0,0x0,8
tick,0x7ffe67f8feb4,526205065,0,0x0,8
tick,0x7ffe67f8feb4,526220682,0,0x0,8
tick,0x7ffe67f8feb4,526236087,0,0x0,8
tick,0x7ffe67f8feb4,526251396,0,0x0,8
tick,0x7ffe67f8feb4,526267085,0,0x0,8
tick,0x7ffe67f8feb4,526282952,0,0x0,8
tick,0x7ffe67f8feb4,526298121,0,0x0,8
tick,0x7ffe67f8feb4,526313939,0,0x0,8
tick,0x7ffe67f8feb4,526329134,0,0x0,8
tick,0x7ffe67f8feb4,526345080,0,0x0,8
tick,0x7ffe67f8feb4,526360670,0,0x0,8
tick,0x7ffe67f8feb4,526376131,0,0x0,8
tick,0x7ffe67f8feb4,526391372,0,0x0,8
tick,0x7ffe67f8feb4,526407194,0,0x0,8
tick,0x7ffe67f8feb4,526423091,0,0x0,8
tick,0x7ffe67f8feb4,526439113,0,0x0,8
tick,0x7ffe67f8feb4,526455082,0,0x0,8
tick,0x7ffe67f8feb4,526471304,0,0x0,8
tick,0x7ffe67f8feb4,526486093,0,0x0,8
tick,0x7ffe67f8feb4,526501289,0,0x0,8
tick,0x7ffe67f8feb4,526516650,0,0x0,8
tick,0x7ffe67f8feb4,526531919,0,0x0,8
tick,0x7ffe67f8feb4,526547654,0,0x0,8
tick,0x7ffe67f8feb4,526562957,0,0x0,8
tick,0x7ffe67f8feb4,526578709,0,0x0,8
tick,0x7ffe67f8feb4,526594088,0,0x0,8
tick,0x7ffe67f8feb4,526609698,0,0x0,8
tick,0x7ffe67f8feb4,526625142,0,0x0,8
tick,0x7ffe67f8feb4,526640725,0,0x0,8
tick,0x7ffe67f8feb4,526656903,0,0x0,8
tick,0x7ffe67f8feb4,526672844,0,0x0,8
tick,0x7ffe67f8feb4,526688790,0,0x0,8
tick,0x7ffe67f8feb4,526704804,0,0x0,8
tick,0x7ffe67f8feb4,526720707,0,0x0,8
tick,0x7ffe67f8feb4,526736088,0,0x0,8
tick,0x7ffe67f8feb4,526751229,0,0x0,8
tick,0x7ffe67f8feb4,526766408,0,0x0,8
tick,0x7ffe67f8feb4,526781558,0,0x0,8
tick,0x7ffe67f8feb4,526797447,0,0x0,8
tick,0x7ffe67f8feb4,526812938,0,0x0,8
tick,0x7ffe67f8feb4,526828952,0,0x0,8
tick,0x7ffe67f8feb4,526844094,0,0x0,8
tick,0x7ffe67f8feb4,526859983,0,0x0,8
tick,0x7ffe67f8feb4,526875736,0,0x0,8
tick,0x7ffe67f8feb4,526891719,0,0x0,8
tick,0x7ffe67f8feb4,526907446,0,0x0,8
tick,0x7ffe67f8feb4,526923488,0,0x0,8
tick,0x7ffe67f8feb4,526938806,0,0x0,8
tick,0x7ffe67f8feb4,526953955,0,0x0,8
tick,0x7ffe67f8feb4,526969958,0,0x0,8
tick,0x7ffe67f8feb4,526985086,0,0x0,8
tick,0x7ffe67f8feb4,527000372,0,0x0,8
tick,0x7ffe67f8feb4,527015978,0,0x0,8
tick,0x7ffe67f8feb4,527031579,0,0x0,8
tick,0x7ffe67f8feb4,527047029,0,0x0,8
tick,0x7ffe67f8feb4,527062987,0,0x0,8
tick,0x7ffe67f8feb4,527078201,0,0x0,8
tick,0x7ffe67f8feb4,527094210,0,0x0,8
tick,0x7ffe67f8feb4,527110228,0,0x0,8
tick,0x7ffe67f8feb4,527126206,0,0x0,8
tick,0x7ffe67f8feb4,527142207,0,0x0,8
tick,0x7ffe67f8feb4,527158380,0,0x0,8
tick,0x7ffe67f8feb4,527174277,0,0x0,8
tick,0x7ffe67f8feb4,527190378,0,0x0,8
tick,0x7ffe67f8feb4,527206281,0,0x0,8
tick,0x7ffe67f8feb4,527221353,0,0x0,8
tick,0x7ffe67f8feb4,527236370,0,0x0,8
tick,0x7ffe67f8feb4,527252373,0,0x0,8
tick,0x7ffe67f8feb4,527268458,0,0x0,8
tick,0x7ffe67f8feb4,527283948,0,0x0,8
tick,0x7ffe67f8feb4,527299381,0,0x0,8
tick,0x7ffe67f8feb4,527315083,0,0x0,8
tick,0x7ffe67f8feb4,527330831,0,0x0,8
tick,0x7ffe67f8feb4,527346912,0,0x0,8
tick,0x7ffe67f8feb4,527362850,0,0x0,8
tick,0x7ffe67f8feb4,527379042,0,0x0,8
tick,0x7ffe67f8feb4,527394813,0,0x0,8
tick,0x7ffe67f8feb4,527410817,0,0x0,8
tick,0x7ffe67f8feb4,527426875,0,0x0,8
tick,0x7ffe67f8feb4,527442825,0,0x0,8
tick,0x7ffe67f8feb4,527458826,0,0x0,8
tick,0x7ffe67f8feb4,527474884,0,0x0,8
tick,0x7ffe67f8feb4,527491388,0,0x0,8
tick,0x7ffe67f8feb4,527507239,0,0x0,8
tick,0x7ffe67f8feb4,527521837,0,0x0,8
tick,0x7ffe67f8feb4,527537827,0,0x0,8
tick,0x7ffe67f8feb4,527553857,0,0x0,8
tick,0x7ffe67f8feb4,527569839,0,0x0,8
tick,0x7ffe67f8feb4,527584852,0,0x0,8
tick,0x7ffe67f8feb4,527599859,0,0x0,8
tick,0x7ffe67f8feb4,527615858,0,0x0,8
tick,0x7ffe67f8feb4,527631846,0,0x0,8
tick,0x7ffe67f8feb4,527647864,0,0x0,8
tick,0x7ffe67f8feb4,527663119,0,0x0,8
tick,0x7ffe67f8feb4,527678422,0,0x0,8
tick,0x7ffe67f8feb4,527693964,0,0x0,8
tick,0x7ffe67f8feb4,527709971,0,0x0,8
tick,0x7ffe67f8feb4,527726020,0,0x0,8
tick,0x7ffe67f8feb4,527742047,0,0x0,8
tick,0x7ffe67f8feb4,527758083,0,0x0,8
tick,0x7ffe67f8feb4,527774038,0,0x0,8
tick,0x7ffe67f8feb4,527790391,0,0x0,8
tick,0x7ffe67f8feb4,527805098,0,0x0,8
tick,0x7ffe67f8feb4,527820956,0,0x0,8
tick,0x7ffe67f8feb4,527836980,0,0x0,8
tick,0x7ffe67f8feb4,527852997,0,0x0,8
tick,0x7ffe67f8feb4,527868993,0,0x0,8
tick,0x7ffe67f8feb4,527885125,0,0x0,8
tick,0x7ffe67f8feb4,527900362,0,0x0,8
tick,0x7ffe67f8feb4,527916098,0,0x0,8
tick,0x7ffe67f8feb4,527931281,0,0x0,8
tick,0x7ffe67f8feb4,527947006,0,0x0,8
tick,0x7ffe67f8feb4,527962974,0,0x0,8
tick,0x7ffe67f8feb4,527978966,0,0x0,8
tick,0x7ffe67f8feb4,527994119,0,0x0,8
tick,0x7ffe67f8feb4,528008974,0,0x0,8
tick,0x7ffe67f8feb4,528024940,0,0x0,8
tick,0x7ffe67f8feb4,528040930,0,0x0,8
tick,0x7ffe67f8feb4,528057127,0,0x0,8
tick,0x7ffe67f8feb4,528073105,0,0x0,8
tick,0x7ffe67f8feb4,528087981,0,0x0,8
tick,0x7ffe67f8feb4,528103969,0,0x0,8
tick,0x7ffe67f8feb4,528119951,0,0x0,8
tick,0x7ffe67f8feb4,528135980,0,0x0,8
tick,0x7ffe67f8feb4,528151946,0,0x0,8
tick,0x7ffe67f8feb4,528167961,0,0x0,8
tick,0x7ffe67f8feb4,528183961,0,0x0,8
tick,0x7ffe67f8feb4,528199989,0,0x0,8
tick,0x7ffe67f8feb4,528215197,0,0x0,8
tick,0x7ffe67f8feb4,528231193,0,0x0,8
tick,0x7ffe67f8feb4,528247203,0,0x0,8
tick,0x7ffe67f8feb4,528263270,0,0x0,8
tick,0x7ffe67f8feb4,528279219,0,0x0,8
tick,0x7ffe67f8feb4,528295109,0,0x0,8
tick,0x7ffe67f8feb4,528310243,0,0x0,8
tick,0x7ffe67f8feb4,528325461,0,0x0,8
tick,0x7ffe67f8feb4,528341269,0,0x0,8
tick,0x7ffe67f8feb4,528357351,0,0x0,8
tick,0x7ffe67f8feb4,528373287,0,0x0,8
tick,0x7ffe67f8feb4,528388292,0,0x0,8
tick,0x7ffe67f8feb4,528403955,0,0x0,8
tick,0x7ffe67f8feb4,528419940,0,0x0,8
tick,0x7ffe67f8feb4,528435101,0,0x0,8
tick,0x7ffe67f8feb4,528450245,0,0x0,8
tick,0x7ffe67f8feb4,528466126,0,0x0,8
tick,0x7ffe67f8feb4,528481950,0,0x0,8
tick,0x7ffe67f8feb4,528497114,0,0x0,8
tick,0x7ffe67f8feb4,528512945,0,0x0,8
tick,0x7ffe67f8feb4,528528193,0,0x0,8
tick,0x7ffe67f8feb4,528544099,0,0x0,8
tick,0x7ffe67f8feb4,528560184,0,0x0,8
tick,0x7ffe67f8feb4,528576175,0,0x0,8
tick,0x7ffe67f8feb4,528592132,0,0x0,8
tick,0x7ffe67f8feb4,528608200,0,0x0,8
tick,0x7ffe67f8feb4,528623636,0,0x0,8
tick,0x7ffe67f8feb4,528638415,0,0x0,8
tick,0x7ffe67f8feb4,528654135,0,0x0,8
tick,0x7ffe67f8feb4,528669282,0,0x0,8
tick,0x7ffe67f8feb4,528685166,0,0x0,8
tick,0x7ffe67f8feb4,528701330,0,0x0,8
tick,0x7ffe67f8feb4,528717239,0,0x0,8
tick,0x7ffe67f8feb4,528735663,0,0x0,8
tick,0x7ffe67f8feb4,528751181,0,0x0,8
tick,0x7ffe67f8feb4,528766437,0,0x0,8
tick,0x7ffe67f8feb4,528782424,0,0x0,8
tick,0x7ffe67f8feb4,528798359,0,0x0,8
tick,0x7ffe67f8feb4,528814039,0,0x0,8
tick,0x7ffe67f8feb4,528829880,0,0x0,8
tick,0x7ffe67f8feb4,528845224,0,0x0,8
tick,0x7ffe67f8feb4,528861361,0,0x0,8
tick,0x7ffe67f8feb4,528876412,0,0x0,8
tick,0x7ffe67f8feb4,528892432,0,0x0,8
tick,0x7ffe67f8feb4,528907648,0,0x0,8
tick,0x7ffe67f8feb4,528923191,0,0x0,8
tick,0x7ffe67f8feb4,528939150,0,0x0,8
tick,0x7ffe67f8feb4,528954143,0,0x0,8
tick,0x7ffe67f8feb4,528969514,0,0x0,8
tick,0x7ffe67f8feb4,528985177,0,0x0,8
tick,0x7ffe67f8feb4,529000966,0,0x0,8
tick,0x7ffe67f8feb4,529016110,0,0x0,8
tick,0x7ffe67f8feb4,529031399,0,0x0,8
tick,0x7ffe67f8feb4,529047354,0,0x0,8
tick,0x7ffe67f8feb4,529063341,0,0x0,8
tick,0x7ffe67f8feb4,529078476,0,0x0,8
tick,0x7ffe67f8feb4,529093587,0,0x0,8
tick,0x7ffe67f8feb4,529109612,0,0x0,8
tick,0x7ffe67f8feb4,529125577,0,0x0,8
tick,0x7ffe67f8feb4,529141586,0,0x0,8
tick,0x7ffe67f8feb4,529157839,0,0x0,8
tick,0x7ffe67f8feb4,529173589,0,0x0,8
tick,0x7ffe67f8feb4,529189580,0,0x0,8
tick,0x7ffe67f8feb4,529205662,0,0x0,8
tick,0x7ffe67f8feb4,529221203,0,0x0,8
tick,0x7ffe67f8feb4,529236612,0,0x0,8
tick,0x7ffe67f8feb4,529252010,0,0x0,8
tick,0x7ffe67f8feb4,529267620,0,0x0,8
tick,0x7ffe67f8feb4,529282991,0,0x0,8
tick,0x7ffe67f8feb4,529298705,0,0x0,8
tick,0x7ffe67f8feb4,529314027,0,0x0,8
tick,0x7ffe67f8feb4,529329190,0,0x0,8
tick,0x7ffe67f8feb4,529345225,0,0x0,8
tick,0x7ffe67f8feb4,529360684,0,0x0,8
tick,0x7ffe67f8feb4,529376737,0,0x0,8
tick,0x7ffe67f8feb4,529392824,0,0x0,8
tick,0x7ffe67f8feb4,529408749,0,0x0,8
tick,0x7ffe67f8feb4,529424852,0,0x0,8
tick,0x7ffe67f8feb4,529439864,0,0x0,8
tick,0x7ffe67f8feb4,529455131,0,0x0,8
tick,0x7ffe67f8feb4,529470987,0,0x0,8
tick,0x7ffe67f8feb4,529486120,0,0x0,8
tick,0x7ffe67f8feb4,529501522,0,0x0,8
tick,0x7ffe67f8feb4,529516851,0,0x0,8
tick,0x7ffe67f8feb4,529532248,0,0x0,8
tick,0x7ffe67f8feb4,529547950,0,0x0,8
tick,0x7ffe67f8feb4,529563068,0,0x0,8
tick,0x7ffe67f8feb4,529579152,0,0x0,8
tick,0x7ffe67f8feb4,529595396,0,0x0,8
tick,0x7ffe67f8feb4,529611166,0,0x0,8
tick,0x7ffe67f8feb4,529626867,0,0x0,8
tick,0x7ffe67f8feb4,529642274,0,0x0,8
tick,0x7ffe67f8feb4,529657802,0,0x0,8
tick,0x7ffe67f8feb4,529673152,0,0x0,8
tick,0x7ffe67f8feb4,529689308,0,0x0,8
tick,0x7ffe67f8feb4,529705352,0,0x0,8
tick,0x7ffe67f8feb4,529720375,0,0x0,8
tick,0x7ffe67f8feb4,529736373,0,0x0,8
tick,0x7ffe67f8feb4,529751353,0,0x0,8
tick,0x7ffe67f8feb4,529766414,0,0x0,8
tick,0x7ffe67f8feb4,529782336,0,0x0,8
tick,0x7ffe67f8feb4,529797119,0,0x0,8
tick,0x7ffe67f8feb4,529813055,0,0x0,8
tick,0x7ffe67f8feb4,529829109,0,0x0,8
tick,0x7ffe67f8feb4,529845101,0,0x0,8
tick,0x7ffe67f8feb4,529860436,0,0x0,8
tick,0x7ffe67f8feb4,529876432,0,0x0,8
tick,0x7ffe67f8feb4,529891490,0,0x0,8
tick,0x7ffe67f8feb4,529907632,0,0x0,8
tick,0x7ffe67f8feb4,529923347,0,0x0,8
tick,0x7ffe67f8feb4,529938483,0,0x0,8
tick,0x7ffe67f8feb4,529954144,0,0x0,8
tick,0x7ffe67f8feb4,529969440,0,0x0,8
tick,0x7ffe67f8feb4,529985418,0,0x0,8
tick,0x7ffe67f8feb4,530000812,0,0x0,8
tick,0x7ffe67f8feb4,530015921,0,0x0,8
tick,0x7ffe67f8feb4,530031223,0,0x0,8
tick,0x7ffe67f8feb4,530046426,0,0x0,8
tick,0x7ffe67f8feb4,530062304,0,0x0,8
tick,0x7ffe67f8feb4,530077475,0,0x0,8
tick,0x7ffe67f8feb4,530092973,0,0x0,8
tick,0x7ffe67f8feb4,530108814,0,0x0,8
tick,0x7ffe67f8feb4,530124677,0,0x0,8
tick,0x7ffe67f8feb4,530140667,0,0x0,8
tick,0x7ffe67f8feb4,530156668,0,0x0,8
tick,0x7ffe67f8feb4,530172629,0,0x0,8
tick,0x7ffe67f8feb4,530187666,0,0x0,8
tick,0x7ffe67f8feb4,530203634,0,0x0,8
tick,0x7ffe67f8feb4,530219625,0,0x0,8
tick,0x7ffe67f8feb4,530235140,0,0x0,8
tick,0x7ffe67f8feb4,530250664,0,0x0,8
tick,0x7ffe67f8feb4,530266379,0,0x0,8
tick,0x7ffe67f8feb4,530281529,0,0x0,8
tick,0x7ffe67f8feb4,530297421,0,0x0,8
tick,0x7ffe67f8feb4,530312991,0,0x0,8
tick,0x7ffe67f8feb4,530328412,0,0x0,8
tick,0x7ffe67f8feb4,530344424,0,0x0,8
tick,0x7ffe67f8feb4,530360435,0,0x0,8
tick,0x7ffe67f8feb4,530376425,0,0x0,8
tick,0x7ffe67f8feb4,530391395,0,0x0,8
tick,0x7ffe67f8feb4,530406436,0,0x0,8
tick,0x7ffe67f8feb4,530421453,0,0x0,8
tick,0x7ffe67f8feb4,530437429,0,0x0,8
tick,0x7ffe67f8feb4,530452964,0,0x0,8
tick,0x7ffe67f8feb4,530468459,0,0x0,8
tick,0x7ffe67f8feb4,530483978,0,0x0,8
tick,0x7ffe67f8feb4,530499545,0,0x0,8
tick,0x7ffe67f8feb4,530515481,0,0x0,8
tick,0x7ffe67f8feb4,530531288,0,0x0,8
tick,0x7ffe67f8feb4,530546531,0,0x0,8
tick,0x7ffe67f8feb4,530561998,0,0x0,8
tick,0x7ffe67f8feb4,530577978,0,0x0,8
tick,0x7ffe67f8feb4,530594000,0,0x0,8
tick,0x7ffe67f8feb4,530609225,0,0x0,8
tick,0x7ffe67f8feb4,530625360,0,0x0,8
tick,0x7ffe67f8feb4,530640759,0,0x0,8
tick,0x7ffe67f8feb4,530656116,0,0x0,8
tick,0x7ffe67f8feb4,530671284,0,0x0,8
tick,0x7ffe67f8feb4,530686983,0,0x0,8
tick,0x7ffe67f8feb4,530703003,0,0x0,8
tick,0x7ffe67f8feb4,530717683,0,0x0,8
tick,0x7ffe67f8feb4,530732994,0,0x0,8
tick,0x7ffe67f8feb4,530748723,0,0x0,8
tick,0x7ffe67f8feb4,530764039,0,0x0,8
tick,0x7ffe67f8feb4,530779286,0,0x0,8
tick,0x7ffe67f8feb4,530795254,0,0x0,8
tick,0x7ffe67f8feb4,530811273,0,0x0,8
tick,0x7ffe67f8feb4,530827292,0,0x0,8
tick,0x7ffe67f8feb4,530843349,0,0x0,8
tick,0x7ffe67f8feb4,530858549,0,0x0,8
tick,0x7ffe67f8feb4,530874034,0,0x0,8
tick,0x7ffe67f8feb4,530889582,0,0x0,8
tick,0x7ffe67f8feb4,530905239,0,0x0,8
tick,0x7ffe67f8feb4,530920558,0,0x0,8
tick,0x7ffe67f8feb4,530936576,0,0x0,8
tick,0x7ffe67f8feb4,530951718,0,0x0,8
tick,0x7ffe67f8feb4,530966744,0,0x0,8
tick,0x7ffe67f8feb4,530982252,0,0x0,8
tick,0x7ffe67f8feb4,530997317,0,0x0,8
tick,0x7ffe67f8feb4,531013024,0,0x0,8
tick,0x7ffe67f8feb4,531028209,0,0x0,8
tick,0x7ffe67f8feb4,531043344,0,0x0,8
tick,0x7ffe67f8feb4,531059378,0,0x0,8
tick,0x7ffe67f8feb4,531075197,0,0x0,8
tick,0x7ffe67f8feb4,531090360,0,0x0,8
tick,0x7ffe67f8feb4,531105691,0,0x0,8
tick,0x7ffe67f8feb4,531120722,0,0x0,8
tick,0x7ffe67f8feb4,531136290,0,0x0,8
tick,0x7ffe67f8feb4,531151223,0,0x0,8
tick,0x7ffe67f8feb4,531166265,0,0x0,8
tick,0x7ffe67f8feb4,531182238,0,0x0,8
tick,0x7ffe67f8feb4,531197264,0,0x0,8
tick,0x7ffe67f8feb4,531213287,0,0x0,8
tick,0x7ffe67f8feb4,531228276,0,0x0,8
tick,0x7ffe67f8feb4,531243253,0,0x0,8
tick,0x7ffe67f8feb4,531258267,0,0x0,8
tick,0x7ffe67f8feb4,531273971,0,0x0,8
tick,0x7ffe67f8feb4,531289253,0,0x0,8
tick,0x7ffe67f8feb4,531305291,0,0x0,8
tick,0x7ffe67f8feb4,531321260,0,0x0,8
tick,0x7ffe67f8feb4,531337272,0,0x0,8
tick,0x7ffe67f8feb4,531353264,0,0x0,8
tick,0x7ffe67f8feb4,531369018,0,0x0,8
tick,0x7ffe67f8feb4,531385134,0,0x0,8
tick,0x7ffe67f8feb4,531400660,0,0x0,8
tick,0x7ffe67f8feb4,531416172,0,0x0,8
tick,0x7ffe67f8feb4,531431877,0,0x0,8
tick,0x7ffe67f8feb4,531447167,0,0x0,8
tick,0x7ffe67f8feb4,531462986,0,0x0,8
tick,0x7ffe67f8feb4,531477992,0,0x0,8
tick,0x7ffe67f8feb4,531493370,0,0x0,8
tick,0x7ffe67f8feb4,531507988,0,0x0,8
tick,0x7ffe67f8feb4,531524013,0,0x0,8
tick,0x7ffe67f8feb4,531539029,0,0x0,8
tick,0x7ffe67f8feb4,531554980,0,0x0,8
tick,0x7ffe67f8feb4,531570996,0,0x0,8
tick,0x7ffe67f8feb4,531586338,0,0x0,8
tick,0x7ffe67f8feb4,531601811,0,0x0,8
tick,0x7ffe67f8feb4,531617352,0,0x0,8
tick,0x7ffe67f8feb4,531633363,0,0x0,8
tick,0x7ffe67f8feb4,531649045,0,0x0,8
tick,0x7ffe67f8feb4,531665279,0,0x0,8
tick,0x7ffe67f8feb4,531680149,0,0x0,8
tick,0x7ffe67f8feb4,531696044,0,0x0,8
tick,0x7ffe67f8feb4,531712044,0,0x0,8
tick,0x7ffe67f8feb4,531728180,0,0x0,8
tick,0x7ffe67f8feb4,531743710,0,0x0,8
tick,0x7ffe67f8feb4,531759387,0,0x0,8
tick,0x7ffe67f8feb4,531775119,0,0x0,8
tick,0x7ffe67f8feb4,531790399,0,0x0,8
tick,0x7ffe67f8feb4,531806421,0,0x0,8
tick,0x7ffe67f8feb4,531822418,0,0x0,8
tick,0x7ffe67f8feb4,531838411,0,0x0,8
tick,0x7ffe67f8feb4,531854380,0,0x0,8
tick,0x7ffe67f8feb4,531870374,0,0x0,8
tick,0x7ffe67f8feb4,531886431,0,0x0,8
tick,0x7ffe67f8feb4,531902410,0,0x0,8
tick,0x7ffe67f8feb4,531918457,0,0x0,8
tick,0x7ffe67f8feb4,531934391,0,0x0,8
tick,0x7ffe67f8feb4,531950418,0,0x0,8
tick,0x7ffe67f8feb4,531966412,0,0x0,8
tick,0x7ffe67f8feb4,531982408,0,0x0,8
tick,0x7ffe67f8feb4,531998432,0,0x0,8
tick,0x7ffe67f8feb4,532014424,0,0x0,8
tick,0x7ffe67f8feb4,532030419,0,0x0,8
tick,0x7ffe67f8feb4,532046421,0,0x0,8
tick,0x7ffe67f8feb4,532062472,0,0x0,8
tick,0x7ffe67f8feb4,532078522,0,0x0,8
tick,0x7ffe67f8feb4,532094554,0,0x0,8
tick,0x7ffe67f8feb4,532110648,0,0x0,8
tick,0x7ffe67f8feb4,532126426,0,0x0,8
tick,0x7ffe67f8feb4,532142438,0,0x0,8
tick,0x7ffe67f8feb4,532158436,0,0x0,8
tick,0x7ffe67f8feb4,532174419,0,0x0,8
tick,0x7ffe67f8feb4,532190415,0,0x0,8
tick,0x7ffe67f8feb4,532206425,0,0x0,8
tick,0x7ffe67f8feb4,532222413,0,0x0,8
tick,0x7ffe67f8feb4,532238425,0,0x0,8
tick,0x7ffe67f8feb4,532254424,0,0x0,8
tick,0x7ffe67f8feb4,532270455,0,0x0,8
tick,0x7ffe67f8feb4,532286135,0,0x0,8
tick,0x7ffe67f8feb4,532301974,0,0x0,8
tick,0x7ffe67f8feb4,532317449,0,0x0,8
tick,0x7ffe67f8feb4,532333537,0,0x0,8
tick,0x7ffe67f8feb4,532349540,0,0x0,8
tick,0x7ffe67f8feb4,532365162,0,0x0,8
tick,0x7ffe67f8feb4,532381185,0,0x0,8
tick,0x7ffe67f8feb4,532397125,0,0x0,8
tick,0x7ffe67f8feb4,532413152,0,0x0,8
tick,0x7ffe67f8feb4,532429147,0,0x0,8
tick,0x7ffe67f8feb4,532445122,0,0x0,8
tick,0x7ffe67f8feb4,532460793,0,0x0,8
tick,0x7ffe67f8feb4,532476134,0,0x0,8
tick,0x7ffe67f8feb4,532492050,0,0x0,8
tick,0x7ffe67f8feb4,532508146,0,0x0,8
tick,0x7ffe67f8feb4,532524129,0,0x0,8
tick,0x7ffe67f8feb4,532539131,0,0x0,8
tick,0x7ffe67f8feb4,532554978,0,0x0,8
tick,0x7ffe67f8feb4,532569740,0,0x0,8
tick,0x7ffe67f8feb4,532585133,0,0x0,8
tick,0x7ffe67f8feb4,532600291,0,0x0,8
tick,0x7ffe67f8feb4,532616149,0,0x0,8
tick,0x7ffe67f8feb4,532631142,0,0x0,8
tick,0x7ffe67f8feb4,532647550,0,0x0,8
tick,0x7ffe67f8feb4,532663130,0,0x0,8
tick,0x7ffe67f8feb4,532679153,0,0x0,8
tick,0x7ffe67f8feb4,532695110,0,0x0,8
tick,0x7ffe67f8feb4,532711137,0,0x0,8
tick,0x7ffe67f8feb4,532727089,0,0x0,8
tick,0x7ffe67f8feb4,532741951,0,0x0,8
tick,0x7ffe67f8feb4,532757108,0,0x0,8
tick,0x7ffe67f8feb4,532773037,0,0x0,8
tick,0x7ffe67f8feb4,532788157,0,0x0,8
tick,0x7ffe67f8feb4,532803966,0,0x0,8
tick,0x7ffe67f8feb4,532819131,0,0x0,8
tick,0x7ffe67f8feb4,532835224,0,0x0,8
tick,0x7ffe67f8feb4,532851103,0,0x0,8
tick,0x7ffe67f8feb4,532867144,0,0x0,8
tick,0x7ffe67f8feb4,532882989,0,0x0,8
tick,0x7ffe67f8feb4,532898142,0,0x0,8
tick,0x7ffe67f8feb4,532914147,0,0x0,8
tick,0x7ffe67f8feb4,532930153,0,0x0,8
tick,0x7ffe67f8feb4,532945183,0,0x0,8
tick,0x7ffe67f8feb4,532961356,0,0x0,8
tick,0x7ffe67f8feb4,532977024,0,0x0,8
tick,0x7ffe67f8feb4,532992955,0,0x0,8
tick,0x7ffe67f8feb4,533009000,0,0x0,8
tick,0x7ffe67f8feb4,533024052,0,0x0,8
tick,0x7ffe67f8feb4,533039469,0,0x0,8
tick,0x7ffe67f8feb4,533055476,0,0x0,8
tick,0x7ffe67f8feb4,533071471,0,0x0,8
tick,0x7ffe67f8feb4,533086973,0,0x0,8
tick,0x7ffe67f8feb4,533102986,0,0x0,8
tick,0x7ffe67f8feb4,533119015,0,0x0,8
tick,0x7ffe67f8feb4,533134982,0,0x0,8
tick,0x7ffe67f8feb4,533150597,0,0x0,8
tick,0x7ffe67f8feb4,533166590,0,0x0,8
tick,0x7ffe67f8feb4,533182581,0,0x0,8
tick,0x7ffe67f8feb4,533198588,0,0x0,8
tick,0x7ffe67f8feb4,533214572,0,0x0,8
tick,0x7ffe67f8feb4,533230564,0,0x0,8
tick,0x7ffe67f8feb4,533246311,0,0x0,8
tick,0x7ffe67f8feb4,533262314,0,0x0,8
tick,0x7ffe67f8feb4,533278799,0,0x0,8
tick,0x7ffe67f8feb4,533293965,0,0x0,8
tick,0x7ffe67f8feb4,533309112,0,0x0,8
tick,0x7ffe67f8feb4,533325121,0,0x0,8
tick,0x7ffe67f8feb4,533340313,0,0x0,8
tick,0x7ffe67f8feb4,533356116,0,0x0,8
tick,0x7ffe67f8feb4,533371574,0,0x0,8
tick,0x7ffe67f8feb4,533387147,0,0x0,8
tick,0x7ffe67f8feb4,533403026,0,0x0,8
tick,0x7ffe67f8feb4,533418238,0,0x0,8
tick,0x7ffe67f8feb4,533433250,0,0x0,8
tick,0x7ffe67f8feb4,533449155,0,0x0,8
tick,0x7ffe67f8feb4,533465188,0,0x0,8
tick,0x7ffe67f8feb4,533480651,0,0x0,8
tick,0x7ffe67f8feb4,533496662,0,0x0,8
tick,0x7ffe67f8feb4,533511329,0,0x0,8
tick,0x7ffe67f8feb4,533526650,0,0x0,8
tick,0x7ffe67f8feb4,533542657,0,0x0,8
tick,0x7ffe67f8feb4,533558641,0,0x0,8
tick,0x7ffe67f8feb4,533574637,0,0x0,8
tick,0x7ffe67f8feb4,533590646,0,0x0,8
tick,0x7ffe67f8feb4,533605346,0,0x0,8
tick,0x7ffe67f8feb4,533620754,0,0x0,8
tick,0x7ffe67f8feb4,533636081,0,0x0,8
tick,0x7ffe67f8feb4,533651996,0,0x0,8
tick,0x7ffe67f8feb4,533667730,0,0x0,8
tick,0x7ffe67f8feb4,533683758,0,0x0,8
tick,0x7ffe67f8feb4,533699725,0,0x0,8
tick,0x7ffe67f8feb4,533715128,0,0x0,8
tick,0x7ffe67f8feb4,533730731,0,0x0,8
tick,0x7ffe67f8feb4,533746744,0,0x0,8
tick,0x7ffe67f8feb4,533762903,0,0x0,8
tick,0x7ffe67f8feb4,533778761,0,0x0,8
tick,0x7ffe67f8feb4,533793976,0,0x0,8
tick,0x7ffe67f8feb4,533809785,0,0x0,8
tick,0x7ffe67f8feb4,533825145,0,0x0,8
tick,0x7ffe67f8feb4,533840773,0,0x0,8
tick,0x7ffe67f8feb4,533856019,0,0x0,8
tick,0x7ffe67f8feb4,533871666,0,0x0,8
tick,0x7ffe67f8feb4,533887757,0,0x0,8
tick,0x7ffe67f8feb4,533903329,0,0x0,8
tick,0x7ffe67f8feb4,533918400,0,0x0,8
tick,0x7ffe67f8feb4,533933613,0,0x0,8
tick,0x7ffe67f8feb4,533949462,0,0x0,8
tick,0x7ffe67f8feb4,533965458,0,0x0,8
tick,0x7ffe67f8feb4,533981494,0,0x0,8
tick,0x7ffe67f8feb4,533997501,0,0x0,8
tick,0x7ffe67f8feb4,534013523,0,0x0,8
tick,0x7ffe67f8feb4,534029267,0,0x0,8
tick,0x7ffe67f8feb4,534044075,0,0x0,8
tick,0x7ffe67f8feb4,534059284,0,0x0,8
tick,0x7ffe67f8feb4,534074127,0,0x0,8
tick,0x7ffe67f8feb4,534089414,0,0x0,8
tick,0x7ffe67f8feb4,534105482,0,0x0,8
tick,0x7ffe67f8feb4,534121331,0,0x0,8
tick,0x7ffe67f8feb4,534136513,0,0x0,8
tick,0x7ffe67f8feb4,534151500,0,0x0,8
tick,0x7ffe67f8feb4,534167523,0,0x0,8
tick,0x7ffe67f8feb4,534183499,0,0x0,8
tick,0x7ffe67f8feb4,534199545,0,0x0,8
tick,0x7ffe67f8feb4,534215483,0,0x0,8
tick,0x7ffe67f8feb4,534231474,0,0x0,8
tick,0x7ffe67f8feb4,534246622,0,0x0,8
tick,0x7ffe67f8feb4,534262672,0,0x0,8
tick,0x7ffe67f8feb4,534277615,0,0x0,8
tick,0x7ffe67f8feb4,534293069,0,0x0,8
tick,0x7ffe67f8feb4,534308654,0,0x0,8
tick,0x7ffe67f8feb4,534323997,0,0x0,8
tick,0x7ffe67f8feb4,534338780,0,0x0,8
tick,0x7ffe67f8feb4,534354036,0,0x0,8
tick,0x7ffe67f8feb4,534369173,0,0x0,8
tick,0x7ffe67f8feb4,534385195,0,0x0,8
tick,0x7ffe67f8feb4,534401251,0,0x0,8
tick,0x7ffe67f8feb4,534417019,0,0x0,8
tick,0x7ffe67f8feb4,534432995,0,0x0,8
tick,0x7ffe67f8feb4,534448989,0,0x0,8
tick,0x7ffe67f8feb4,534465015,0,0x0,8
tick,0x7ffe67f8feb4,534481000,0,0x0,8
tick,0x7ffe67f8feb4,534497028,0,0x0,8
tick,0x7ffe67f8feb4,534513004,0,0x0,8
tick,0x7ffe67f8feb4,534529027,0,0x0,8
tick,0x7ffe67f8feb4,534545131,0,0x0,8
tick,0x7ffe67f8feb4,534560338,0,0x0,8
tick,0x7ffe67f8feb4,534576118,0,0x0,8
tick,0x7ffe67f8feb4,534591308,0,0x0,8
tick,0x7ffe67f8feb4,534606545,0,0x0,8
tick,0x7ffe67f8feb4,534622001,0,0x0,8
tick,0x7ffe67f8feb4,534638108,0,0x0,8
tick,0x7ffe67f8feb4,534653992,0,0x0,8
tick,0x7ffe67f8feb4,534670043,0,0x0,8
tick,0x7ffe67f8feb4,534685450,0,0x0,8
tick,0x7ffe67f8feb4,534701479,0,0x0,8
tick,0x7ffe67f8feb4,534717068,0,0x0,8
tick,0x7ffe67f8feb4,534733040,0,0x0,8
tick,0x7ffe67f8feb4,534749118,0,0x0,8
tick,0x7ffe67f8feb4,534765029,0,0x0,8
tick,0x7ffe67f8feb4,534781042,0,0x0,8
tick,0x7ffe67f8feb4,534796708,0,0x0,8
tick,0x7ffe67f8feb4,534811630,0,0x0,8
tick,0x7ffe67f8feb4,534827219,0,0x0,8
tick,0x7ffe67f8feb4,534843109,0,0x0,8
tick,0x7ffe67f8feb4,534858659,0,0x0,8
tick,0x7ffe67f8feb4,534874063,0,0x0,8
tick,0x7ffe67f8feb4,534889260,0,0x0,8
tick,0x7ffe67f8feb4,534905234,0,0x0,8
tick,0x7ffe67f8feb4,534920735,0,0x0,8
tick,0x7ffe67f8feb4,534936910,0,0x0,8
tick,0x7ffe67f8feb4,534952369,0,0x0,8
tick,0x7ffe67f8feb4,534968147,0,0x0,8
tick,0x7ffe67f8feb4,534984067,0,0x0,8
tick,0x7ffe67f8feb4,535000347,0,0x0,8
tick,0x7ffe67f8feb4,535016045,0,0x0,8
tick,0x7ffe67f8feb4,535032079,0,0x0,8
tick,0x7ffe67f8feb4,535048084,0,0x0,8
tick,0x7ffe67f8feb4,535063347,0,0x0,8
tick,0x7ffe67f8feb4,535079127,0,0x0,8
tick,0x7ffe67f8feb4,535095181,0,0x0,8
tick,0x7ffe67f8feb4,535110469,0,0x0,8
tick,0x7ffe67f8feb4,535125961,0,0x0,8
tick,0x7ffe67f8feb4,535140831,0,0x0,8
tick,0x7ffe67f8feb4,535156605,0,0x0,8
tick,0x7ffe67f8feb4,535171452,0,0x0,8
tick,0x7ffe67f8feb4,535187420,0,0x0,8
tick,0x7ffe67f8feb4,535203390,0,0x0,8
tick,0x7ffe67f8feb4,535219400,0,0x0,8
tick,0x7ffe67f8feb4,535235410,0,0x0,8
tick,0x7ffe67f8feb4,535251432,0,0x0,8
tick,0x7ffe67f8feb4,535267386,0,0x0,8
tick,0x7ffe67f8feb4,535283421,0,0x0,8
tick,0x7ffe67f8feb4,535299461,0,0x0,8
tick,0x7ffe67f8feb4,535315440,0,0x0,8
tick,0x7ffe67f8feb4,535331430,0,0x0,8
tick,0x7ffe67f8feb4,535347711,0,0x0,8
tick,0x7ffe67f8feb4,535363001,0,0x0,8
tick,0x7ffe67f8feb4,535379024,0,0x0,8
tick,0x7ffe67f8feb4,535395126,0,0x0,8
tick,0x7ffe67f8feb4,535411101,0,0x0,8
tick,0x7ffe67f8feb4,535427101,0,0x0,8
tick,0x7ffe67f8feb4,535443021,0,0x0,8
tick,0x7ffe67f8feb4,535459129,0,0x0,8
tick,0x7ffe67f8feb4,535475184,0,0x0,8
tick,0x7ffe67f8feb4,535491419,0,0x0,8
tick,0x7ffe67f8feb4,535507538,0,0x0,8
tick,0x7ffe67f8feb4,535523026,0,0x0,8
tick,0x7ffe67f8feb4,535538592,0,0x0,8
tick,0x7ffe67f8feb4,535554178,0,0x0,8
tick,0x7ffe67f8feb4,535570135,0,0x0,8
tick,0x7ffe67f8feb4,535585485,0,0x0,8
tick,0x7ffe67f8feb4,535600829,0,0x0,8
tick,0x7ffe67f8feb4,535616292,0,0x0,8
tick,0x7ffe67f8feb4,535632429,0,0x0,8
tick,0x7ffe67f8feb4,535647985,0,0x0,8
tick,0x7ffe67f8feb4,535662984,0,0x0,8
tick,0x7ffe67f8feb4,535679255,0,0x0,8
tick,0x7ffe67f8feb4,535695280,0,0x0,8
tick,0x7ffe67f8feb4,535710931,0,0x0,8
tick,0x7ffe67f8feb4,535726960,0,0x0,8
tick,0x7ffe67f8feb4,535742937,0,0x0,8
tick,0x7ffe67f8feb4,535758947,0,0x0,8
tick,0x7ffe67f8feb4,535773967,0,0x0,8
tick,0x7ffe67f8feb4,535789956,0,0x0,8
tick,0x7ffe67f8feb4,535805987,0,0x0,8
tick,0x7ffe67f8feb4,535821960,0,0x0,8
tick,0x7ffe67f8feb4,535837970,0,0x0,8
tick,0x7ffe67f8feb4,535853981,0,0x0,8
tick,0x7ffe67f8feb4,535869952,0,0x0,8
tick,0x7ffe67f8feb4,535885964,0,0x0,8
tick,0x7ffe67f8feb4,535901962,0,0x0,8
tick,0x7ffe67f8feb4,535917253,0,0x0,8
tick,0x7ffe67f8feb4,535933383,0,0x0,8
tick,0x7ffe67f8feb4,535949039,0,0x0,8
tick,0x7ffe67f8feb4,535965182,0,0x0,8
tick,0x7ffe67f8feb4,535981017,0,0x0,8
tick,0x7ffe67f8feb4,535995974,0,0x0,8
tick,0x7ffe67f8feb4,536011144,0,0x0,8
tick,0x7ffe67f8feb4,536027031,0,0x0,8
tick,0x7ffe67f8feb4,536041975,0,0x0,8
tick,0x7ffe67f8feb4,536058021,0,0x0,8
tick,0x7ffe67f8feb4,536074021,0,0x0,8
tick,0x7ffe67f8feb4,536090041,0,0x0,8
tick,0x7ffe67f8feb4,536105486,0,0x0,8
tick,0x7ffe67f8feb4,536121087,0,0x0,8
tick,0x7ffe67f8feb4,536136842,0,0x0,8
tick,0x7ffe67f8feb4,536152760,0,0x0,8
tick,0x7ffe67f8feb4,536168223,0,0x0,8
tick,0x7ffe67f8feb4,536184261,0,0x0,8
tick,0x7ffe67f8feb4,536200134,0,0x0,8
tick,0x7ffe67f8feb4,536216187,0,0x0,8
tick,0x7ffe67f8feb4,536232189,0,0x0,8
tick,0x7ffe67f8feb4,536248302,0,0x0,8
tick,0x7ffe67f8feb4,536265150,0,0x0,8
tick,0x7ffe67f8feb4,536280054,0,0x0,8
tick,0x7ffe67f8feb4,536295239,0,0x0,8
tick,0x7ffe67f8feb4,536310399,0,0x0,8
tick,0x7ffe67f8feb4,536325125,0,0x0,8
tick,0x7ffe67f8feb4,536340291,0,0x0,8
tick,0x7ffe67f8feb4,536356135,0,0x0,8
tick,0x7ffe67f8feb4,536371530,0,0x0,8
tick,0x7ffe67f8feb4,536387577,0,0x0,8
tick,0x7ffe67f8feb4,536403580,0,0x0,8
tick,0x7ffe67f8feb4,536419566,0,0x0,8
tick,0x7ffe67f8feb4,536435096,0,0x0,8
tick,0x7ffe67f8feb4,536451241,0,0x0,8
tick,0x7ffe67f8feb4,536466679,0,0x0,8
tick,0x7ffe67f8feb4,536482909,0,0x0,8
tick,0x7ffe67f8feb4,536499082,0,0x0,8
tick,0x7ffe67f8feb4,536514002,0,0x0,8
tick,0x7ffe67f8feb4,536529184,0,0x0,8
tick,0x7ffe67f8feb4,536544773,0,0x0,8
tick,0x7ffe67f8feb4,536560163,0,0x0,8
tick,0x7ffe67f8feb4,536576140,0,0x0,8
tick,0x7ffe67f8feb4,536591433,0,0x0,8
tick,0x7ffe67f8feb4,536607423,0,0x0,8
tick,0x7ffe67f8feb4,536622973,0,0x0,8
tick,0x7ffe67f8feb4,536638458,0,0x0,8
tick,0x7ffe67f8feb4,536654445,0,0x0,8
tick,0x7ffe67f8feb4,536670460,0,0x0,8
tick,0x7ffe67f8feb4,536686512,0,0x0,8
tick,0x7ffe67f8feb4,536701584,0,0x0,8
tick,0x7ffe67f8feb4,536717409,0,0x0,8
tick,0x7ffe67f8feb4,536733418,0,0x0,8
tick,0x7ffe67f8feb4,536749434,0,0x0,8
tick,0x7ffe67f8feb4,536765428,0,0x0,8
tick,0x7ffe67f8feb4,536781593,0,0x0,8
tick,0x7ffe67f8feb4,536796447,0,0x0,8
tick,0x7ffe67f8feb4,536812047,0,0x0,8
tick,0x7ffe67f8feb4,536827502,0,0x0,8
tick,0x7ffe67f8feb4,536843178,0,0x0,8
tick,0x7ffe67f8feb4,536858499,0,0x0,8
tick,0x7ffe67f8feb4,536873983,0,0x0,8
tick,0x7ffe67f8feb4,536889507,0,0x0,8
tick,0x7ffe67f8feb4,536905144,0,0x0,8
tick,0x7ffe67f8feb4,536920974,0,0x0,8
tick,0x7ffe67f8feb4,536935889,0,0x0,8
tick,0x7ffe67f8feb4,536951488,0,0x0,8
tick,0x7ffe67f8feb4,536966999,0,0x0,8
tick,0x7ffe67f8feb4,536983178,0,0x0,8
tick,0x7ffe67f8feb4,536999071,0,0x0,8
tick,0x7ffe67f8feb4,537014043,0,0x0,8
tick,0x7ffe67f8feb4,537029265,0,0x0,8
tick,0x7ffe67f8feb4,537045199,0,0x0,8
tick,0x7ffe67f8feb4,537060367,0,0x0,8
tick,0x7ffe67f8feb4,537076226,0,0x0,8
tick,0x7ffe67f8feb4,537092061,0,0x0,8
tick,0x7ffe67f8feb4,537107603,0,0x0,8
tick,0x7ffe67f8feb4,537123087,0,0x0,8
tick,0x7ffe67f8feb4,537138614,0,0x0,8
tick,0x7ffe67f8feb4,537154055,0,0x0,8
tick,0x7ffe67f8feb4,537170004,0,0x0,8
tick,0x7ffe67f8feb4,537185990,0,0x0,8
tick,0x7ffe67f8feb4,537202027,0,0x0,8
tick,0x7ffe67f8feb4,537217974,0,0x0,8
tick,0x7ffe67f8feb4,537233963,0,0x0,8
tick,0x7ffe67f8feb4,537249981,0,0x0,8
tick,0x7ffe67f8feb4,537265989,0,0x0,8
tick,0x7ffe67f8feb4,537282113,0,0x0,8
tick,0x7ffe67f8feb4,537297992,0,0x0,8
tick,0x7ffe67f8feb4,537313154,0,0x0,8
tick,0x7ffe67f8feb4,537329031,0,0x0,8
tick,0x7ffe67f8feb4,537345150,0,0x0,8
tick,0x7ffe67f8feb4,537361197,0,0x0,8
tick,0x7ffe67f8feb4,537377194,0,0x0,8
tick,0x7ffe67f8feb4,537393060,0,0x0,8
tick,0x7ffe67f8feb4,537408292,0,0x0,8
tick,0x7ffe67f8feb4,537424006,0,0x0,8
tick,0x7ffe67f8feb4,537439294,0,0x0,8
tick,0x7ffe67f8feb4,537455137,0,0x0,8
tick,0x7ffe67f8feb4,537471182,0,0x0,8
tick,0x7ffe67f8feb4,537487221,0,0x0,8
tick,0x7ffe67f8feb4,537503026,0,0x0,8
tick,0x7ffe67f8feb4,537518257,0,0x0,8
tick,0x7ffe67f8feb4,537533047,0,0x0,8
tick,0x7ffe67f8feb4,537549174,0,0x0,8
tick,0x7ffe67f8feb4,537564175,0,0x0,8
tick,0x7ffe67f8feb4,537580129,0,0x0,8
tick,0x7ffe67f8feb4,537595299,0,0x0,8
tick,0x7ffe67f8feb4,537611075,0,0x0,8
tick,0x7ffe67f8feb4,537626531,0,0x0,8
tick,0x7ffe67f8feb4,537642049,0,0x0,8
tick,0x7ffe67f8feb4,537658123,0,0x0,8
tick,0x7ffe67f8feb4,537674032,0,0x0,8
tick,0x7ffe67f8feb4,537689344,0,0x0,8
tick,0x7ffe67f8feb4,537705266,0,0x0,8
tick,0x7ffe67f8feb4,537721351,0,0x0,8
tick,0x7ffe67f8feb4,537737428,0,0x0,8
tick,0x7ffe67f8feb4,537753297,0,0x0,8
tick,0x7ffe67f8feb4,537769327,0,0x0,8
tick,0x7ffe67f8feb4,537785045,0,0x0,8
tick,0x7ffe67f8feb4,537801074,0,0x0,8
tick,0x7ffe67f8feb4,537817225,0,0x0,8
tick,0x7ffe67f8feb4,537833280,0,0x0,8
tick,0x7ffe67f8feb4,537848372,0,0x0,8
tick,0x7ffe67f8feb4,537864308,0,0x0,8
tick,0x7ffe67f8feb4,537879523,0,0x0,8
tick,0x7ffe67f8feb4,537894810,0,0x0,8
tick,0x7ffe67f8feb4,537910707,0,0x0,8
tick,0x7ffe67f8feb4,537925527,0,0x0,8
tick,0x7ffe67f8feb4,537941218,0,0x0,8
tick,0x7ffe67f8feb4,537956569,0,0x0,8
tick,0x7ffe67f8feb4,537972112,0,0x0,8
tick,0x7ffe67f8feb4,537987248,0,0x0,8
tick,0x7ffe67f8feb4,538003214,0,0x0,8
tick,0x7ffe67f8feb4,538018300,0,0x0,8
tick,0x7ffe67f8feb4,538034264,0,0x0,8
tick,0x7ffe67f8feb4,538049750,0,0x0,8
tick,0x7ffe67f8feb4,538065614,0,0x0,8
tick,0x7ffe67f8feb4,538080902,0,0x0,8
tick,0x7ffe67f8feb4,538095984,0,0x0,8
tick,0x7ffe67f8feb4,538111546,0,0x0,8
tick,0x7ffe67f8feb4,538127110,0,0x0,8
tick,0x7ffe67f8feb4,538142071,0,0x0,8
tick,0x7ffe67f8feb4,538158098,0,0x0,8
tick,0x7ffe67f8feb4,538174107,0,0x0,8
tick,0x7ffe67f8feb4,538190089,0,0x0,8
tick,0x7ffe67f8feb4,538206104,0,0x0,8
tick,0x7ffe67f8feb4,538221084,0,0x0,8
tick,0x7ffe67f8feb4,538237094,0,0x0,8
tick,0x7ffe67f8feb4,538253074,0,0x0,8
tick,0x7ffe67f8feb4,538269066,0,0x0,8
tick,0x7ffe67f8feb4,538285070,0,0x0,8
tick,0x7ffe67f8feb4,538301076,0,0x0,8
tick,0x7ffe67f8feb4,538317128,0,0x0,8
tick,0x7ffe67f8feb4,538333181,0,0x0,8
tick,0x7ffe67f8feb4,538348091,0,0x0,8
tick,0x7ffe67f8feb4,538364041,0,0x0,8
tick,0x7ffe67f8feb4,538379593,0,0x0,8
tick,0x7ffe67f8feb4,538395519,0,0x0,8
tick,0x7ffe67f8feb4,538411556,0,0x0,8
tick,0x7ffe67f8feb4,538427569,0,0x0,8
tick,0x7ffe67f8feb4,538443039,0,0x0,8
tick,0x7ffe67f8feb4,538458566,0,0x0,8
tick,0x7ffe67f8feb4,538474040,0,0x0,8
tick,0x7ffe67f8feb4,538490048,0,0x0,8
tick,0x7ffe67f8feb4,538505497,0,0x0,8
tick,0x7ffe67f8feb4,538521107,0,0x0,8
tick,0x7ffe67f8feb4,538536739,0,0x0,8
tick,0x7ffe67f8feb4,538552793,0,0x0,8
tick,0x7ffe67f8feb4,538568030,0,0x0,8
tick,0x7ffe67f8feb4,538583745,0,0x0,8
tick,0x7ffe67f8feb4,538599321,0,0x0,8
tick,0x7ffe67f8feb4,538615612,0,0x0,8
tick,0x7ffe67f8feb4,538631037,0,0x0,8
tick,0x7ffe67f8feb4,538646420,0,0x0,8
tick,0x7ffe67f8feb4,538662277,0,0x0,8
tick,0x7ffe67f8feb4,538677720,0,0x0,8
tick,0x7ffe67f8feb4,538693294,0,0x0,8
tick,0x7ffe67f8feb4,538709127,0,0x0,8
tick,0x7ffe67f8feb4,538724267,0,0x0,8
tick,0x7ffe67f8feb4,538739444,0,0x0,8
tick,0x7ffe67f8feb4,538755235,0,0x0,8
tick,0x7ffe67f8feb4,538771284,0,0x0,8
tick,0x7ffe67f8feb4,538786439,0,0x0,8
tick,0x7ffe67f8feb4,538802408,0,0x0,8
tick,0x7ffe67f8feb4,538818466,0,0x0,8
tick,0x7ffe67f8feb4,538834236,0,0x0,8
tick,0x7ffe67f8feb4,538849559,0,0x0,8
tick,0x7ffe67f8feb4,538865449,0,0x0,8
tick,0x7ffe67f8feb4,538880551,0,0x0,8
tick,0x7ffe67f8feb4,538896234,0,0x0,8
tick,0x7ffe67f8feb4,538912051,0,0x0,8
tick,0x7ffe67f8feb4,538928204,0,0x0,8
tick,0x7ffe67f8feb4,538944110,0,0x0,8
tick,0x7ffe67f8feb4,538960049,0,0x0,8
tick,0x7ffe67f8feb4,538975480,0,0x0,8
tick,0x7ffe67f8feb4,538991488,0,0x0,8
tick,0x7ffe67f8feb4,539007497,0,0x0,8
tick,0x7ffe67f8feb4,539023493,0,0x0,8
tick,0x7ffe67f8feb4,539039480,0,0x0,8
tick,0x7ffe67f8feb4,539055475,0,0x0,8
tick,0x7ffe67f8feb4,539071470,0,0x0,8
tick,0x7ffe67f8feb4,539087532,0,0x0,8
tick,0x7ffe67f8feb4,539103494,0,0x0,8
tick,0x7ffe67f8feb4,539119500,0,0x0,8
tick,0x7ffe67f8feb4,539135554,0,0x0,8
tick,0x7ffe67f8feb4,539151492,0,0x0,8
tick,0x7ffe67f8feb4,539166338,0,0x0,8
tick,0x7ffe67f8feb4,539181519,0,0x0,8
tick,0x7ffe67f8feb4,539197484,0,0x0,8
tick,0x7ffe67f8feb4,539213488,0,0x0,8
tick,0x7ffe67f8feb4,539229479,0,0x0,8
tick,0x7ffe67f8feb4,539244480,0,0x0,8
tick,0x7ffe67f8feb4,539260476,0,0x0,8
tick,0x7ffe67f8feb4,539276493,0,0x0,8
tick,0x7ffe67f8feb4,539292480,0,0x0,8
tick,0x7ffe67f8feb4,539308478,0,0x0,8
tick,0x7ffe67f8feb4,539324130,0,0x0,8
tick,0x7ffe67f8feb4,539339519,0,0x0,8
tick,0x7ffe67f8feb4,539355155,0,0x0,8
tick,0x7ffe67f8feb4,539370571,0,0x0,8
tick,0x7ffe67f8feb4,539386032,0,0x0,8
tick,0x7ffe67f8feb4,539402107,0,0x0,8
tick,0x7ffe67f8feb4,539418089,0,0x0,8
tick,0x7ffe67f8feb4,539434373,0,0x0,8
tick,0x7ffe67f8feb4,539449539,0,0x0,8
tick,0x7ffe67f8feb4,539465155,0,0x0,8
tick,0x7ffe67f8feb4,539480544,0,0x0,8
tick,0x7ffe67f8feb4,539496529,0,0x0,8
tick,0x7ffe67f8feb4,539512561,0,0x0,8
tick,0x7ffe67f8feb4,539528588,0,0x0,8
tick,0x7ffe67f8feb4,539544038,0,0x0,8
tick,0x7ffe67f8feb4,539559552,0,0x0,8
tick,0x7ffe67f8feb4,539575551,0,0x0,8
tick,0x7ffe67f8feb4,539591565,0,0x0,8
tick,0x7ffe67f8feb4,539607586,0,0x0,8
tick,0x7ffe67f8feb4,539623015,0,0x0,8
tick,0x7ffe67f8feb4,539638599,0,0x0,8
tick,0x7ffe67f8feb4,539654181,0,0x0,8
tick,0x7ffe67f8feb4,539670170,0,0x0,8
tick,0x7ffe67f8feb4,539685774,0,0x0,8
tick,0x7ffe67f8feb4,539701404,0,0x0,8
tick,0x7ffe67f8feb4,539716183,0,0x0,8
tick,0x7ffe67f8feb4,539731296,0,0x0,8
tick,0x7ffe67f8feb4,539747161,0,0x0,8
tick,0x7ffe67f8feb4,539763014,0,0x0,8
tick,0x7ffe67f8feb4,539778164,0,0x0,8
tick,0x7ffe67f8feb4,539794009,0,0x0,8
tick,0x7ffe67f8feb4,539809166,0,0x0,8
tick,0x7ffe67f8feb4,539825147,0,0x0,8
tick,0x7ffe67f8feb4,539841003,0,0x0,8
tick,0x7ffe67f8feb4,539856799,0,0x0,8
tick,0x7ffe67f8feb4,539872011,0,0x0,8
tick,0x7ffe67f8feb4,539887643,0,0x0,8
tick,0x7ffe67f8feb4,539903641,0,0x0,8
tick,0x7ffe67f8feb4,539919642,0,0x0,8
tick,0x7ffe67f8feb4,539935645,0,0x0,8
tick,0x7ffe67f8feb4,539951636,0,0x0,8
tick,0x7ffe67f8feb4,539967725,0,0x0,8
tick,0x7ffe67f8feb4,539983044,0,0x0,8
tick,0x7ffe67f8feb4,539999108,0,0x0,8
tick,0x7ffe67f8feb4,540015340,0,0x0,8
tick,0x7ffe67f8feb4,540030450,0,0x0,8
tick,0x7ffe67f8feb4,540045589,0,0x0,8
tick,0x7ffe67f8feb4,540060998,0,0x0,8
tick,0x7ffe67f8feb4,540076419,0,0x0,8
tick,0x7ffe67f8feb4,540091688,0,0x0,8
tick,0x7ffe67f8feb4,540107308,0,0x0,8
tick,0x7ffe67f8feb4,540123042,0,0x0,8
tick,0x7ffe67f8feb4,540138253,0,0x0,8
tick,0x7ffe67f8feb4,540153296,0,0x0,8
tick,0x7ffe67f8feb4,540168815,0,0x0,8
tick,0x7ffe67f8feb4,540184018,0,0x0,8
tick,0x7ffe67f8feb4,540200002,0,0x0,8
tick,0x7ffe67f8feb4,540216009,0,0x0,8
tick,0x7ffe67f8feb4,540231002,0,0x0,8
tick,0x7ffe67f8feb4,540246039,0,0x0,8
tick,0x7ffe67f8feb4,540262024,0,0x0,8
tick,0x7ffe67f8feb4,540278002,0,0x0,8
tick,0x7ffe67f8feb4,540294031,0,0x0,8
tick,0x7ffe67f8feb4,540310006,0,0x0,8
tick,0x7ffe67f8feb4,540325134,0,0x0,8
tick,0x7ffe67f8feb4,540340812,0,0x0,8
tick,0x7ffe67f8feb4,540356712,0,0x0,8
tick,0x7ffe67f8feb4,540372010,0,0x0,8
tick,0x7ffe67f8feb4,540387088,0,0x0,8
tick,0x7ffe67f8feb4,540403414,0,0x0,8
tick,0x7ffe67f8feb4,540419052,0,0x0,8
tick,0x7ffe67f8feb4,540433687,0,0x0,8
tick,0x7ffe67f8feb4,540448810,0,0x0,8
tick,0x7ffe67f8feb4,540464145,0,0x0,8
tick,0x7ffe67f8feb4,540479843,0,0x0,8
tick,0x7ffe67f8feb4,540495153,0,0x0,8
tick,0x7ffe67f8feb4,540510330,0,0x0,8
tick,0x7ffe67f8feb4,540525618,0,0x0,8
tick,0x7ffe67f8feb4,540541009,0,0x0,8
tick,0x7ffe67f8feb4,540557035,0,0x0,8
tick,0x7ffe67f8feb4,540573012,0,0x0,8
tick,0x7ffe67f8feb4,540588731,0,0x0,8
tick,0x7ffe67f8feb4,540604729,0,0x0,8
tick,0x7ffe67f8feb4,540619736,0,0x0,8
tick,0x7ffe67f8feb4,540635638,0,0x0,8
tick,0x7ffe67f8feb4,540650257,0,0x0,8
tick,0x7ffe67f8feb4,540665163,0,0x0,8
tick,0x7ffe67f8feb4,540680385,0,0x0,8
tick,0x7ffe67f8feb4,540696145,0,0x0,8
tick,0x7ffe67f8feb4,540711994,0,0x0,8
tick,0x7ffe67f8feb4,540728097,0,0x0,8
tick,0x7ffe67f8feb4,540743011,0,0x0,8
tick,0x7ffe67f8feb4,540759022,0,0x0,8
tick,0x7ffe67f8feb4,540774159,0,0x0,8
tick,0x7ffe67f8feb4,540790023,0,0x0,8
tick,0x7ffe67f8feb4,540805358,0,0x0,8
tick,0x7ffe67f8feb4,540821372,0,0x0,8
tick,0x7ffe67f8feb4,540837074,0,0x0,8
tick,0x7ffe67f8feb4,540853050,0,0x0,8
tick,0x7ffe67f8feb4,540869115,0,0x0,8
tick,0x7ffe67f8feb4,540885155,0,0x0,8
tick,0x7ffe67f8feb4,540901161,0,0x0,8
tick,0x7ffe67f8feb4,540917195,0,0x0,8
tick,0x7ffe67f8feb4,540933204,0,0x0,8
tick,0x7ffe67f8feb4,540948779,0,0x0,8
tick,0x7ffe67f8feb4,540964008,0,0x0,8
tick,0x7ffe67f8feb4,540979771,0,0x0,8
tick,0x7ffe67f8feb4,540995154,0,0x0,8
tick,0x7ffe67f8feb4,541009921,0,0x0,8
tick,0x7ffe67f8feb4,541025170,0,0x0,8
tick,0x7ffe67f8feb4,541040769,0,0x0,8
tick,0x7ffe67f8feb4,541056028,0,0x0,8
tick,0x7ffe67f8feb4,541072011,0,0x0,8
tick,0x7ffe67f8feb4,541088011,0,0x0,8
tick,0x7ffe67f8feb4,541103958,0,0x0,8
tick,0x7ffe67f8feb4,541119988,0,0x0,8
tick,0x7ffe67f8feb4,541136023,0,0x0,8
tick,0x7ffe67f8feb4,541150841,0,0x0,8
tick,0x7ffe67f8feb4,541165976,0,0x0,8
tick,0x7ffe67f8feb4,541180814,0,0x0,8
tick,0x7ffe67f8feb4,541196045,0,0x0,8
tick,0x7ffe67f8feb4,541211014,0,0x0,8
tick,0x7ffe67f8feb4,541227012,0,0x0,8
tick,0x7ffe67f8feb4,541243013,0,0x0,8
tick,0x7ffe67f8feb4,541259006,0,0x0,8
tick,0x7ffe67f8feb4,541274006,0,0x0,8
tick,0x7ffe67f8feb4,541290043,0,0x0,8
tick,0x7ffe67f8feb4,541306021,0,0x0,8
tick,0x7ffe67f8feb4,541322016,0,0x0,8
tick,0x7ffe67f8feb4,541338028,0,0x0,8
tick,0x7ffe67f8feb4,541353992,0,0x0,8
tick,0x7ffe67f8feb4,541370217,0,0x0,8
tick,0x7ffe67f8feb4,541385152,0,0x0,8
tick,0x7ffe67f8feb4,541401034,0,0x0,8
tick,0x7ffe67f8feb4,541416031,0,0x0,8
tick,0x7ffe67f8feb4,541432013,0,0x0,8
tick,0x7ffe67f8feb4,541448054,0,0x0,8
tick,0x7ffe67f8feb4,541464031,0,0x0,8
tick,0x7ffe67f8feb4,541479176,0,0x0,8
tick,0x7ffe67f8feb4,541495160,0,0x0,8
tick,0x7ffe67f8feb4,541510029,0,0x0,8
tick,0x7ffe67f8feb4,541525041,0,0x0,8
tick,0x7ffe67f8feb4,541540059,0,0x0,8
tick,0x7ffe67f8feb4,541556253,0,0x0,8
tick,0x7ffe67f8feb4,541572080,0,0x0,8
tick,0x7ffe67f8feb4,541588038,0,0x0,8
tick,0x7ffe67f8feb4,541604112,0,0x0,8
tick,0x7ffe67f8feb4,541620020,0,0x0,8
tick,0x7ffe67f8feb4,541635152,0,0x0,8
tick,0x7ffe67f8feb4,541650310,0,0x0,8
tick,0x7ffe67f8feb4,541666194,0,0x0,8
tick,0x7ffe67f8feb4,541681317,0,0x0,8
tick,0x7ffe67f8feb4,541697163,0,0x0,8
tick,0x7ffe67f8feb4,541713021,0,0x0,8
tick,0x7ffe67f8feb4,541729024,0,0x0,8
tick,0x7ffe67f8feb4,541744142,0,0x0,8
tick,0x7ffe67f8feb4,541760070,0,0x0,8
tick,0x7ffe67f8feb4,541775183,0,0x0,8
tick,0x7ffe67f8feb4,541791087,0,0x0,8
tick,0x7ffe67f8feb4,541806501,0,0x0,8
tick,0x7ffe67f8feb4,541822135,0,0x0,8
tick,0x7ffe67f8feb4,541838136,0,0x0,8
tick,0x7ffe67f8feb4,541853418,0,0x0,8
tick,0x7ffe67f8feb4,541868686,0,0x0,8
tick,0x7ffe67f8feb4,541884128,0,0x0,8
tick,0x7ffe67f8feb4,541899231,0,0x0,8
tick,0x7ffe67f8feb4,541915169,0,0x0,8
tick,0x7ffe67f8feb4,541930905,0,0x0,8
tick,0x7ffe67f8feb4,541946976,0,0x0,8
tick,0x7ffe67f8feb4,541962972,0,0x0,8
tick,0x7ffe67f8feb4,541978618,0,0x0,8
tick,0x7ffe67f8feb4,541994178,0,0x0,8
tick,0x7ffe67f8feb4,542009615,0,0x0,8
tick,0x7ffe67f8feb4,542025350,0,0x0,8
tick,0x7ffe67f8feb4,542041029,0,0x0,8
tick,0x7ffe67f8feb4,542057212,0,0x0,8
tick,0x7ffe67f8feb4,542072223,0,0x0,8
tick,0x7ffe67f8feb4,542087467,0,0x0,8
tick,0x7ffe67f8feb4,542103221,0,0x0,8
tick,0x7ffe67f8feb4,542118461,0,0x0,8
tick,0x7ffe67f8feb4,542134128,0,0x0,8
tick,0x7ffe67f8feb4,542150120,0,0x0,8
tick,0x7ffe67f8feb4,542165566,0,0x0,8
tick,0x7ffe67f8feb4,542181160,0,0x0,8
tick,0x7ffe67f8feb4,542196580,0,0x0,8
tick,0x7ffe67f8feb4,542212591,0,0x0,8
tick,0x7ffe67f8feb4,542227594,0,0x0,8
tick,0x7ffe67f8feb4,542243584,0,0x0,8
tick,0x7ffe67f8feb4,542259569,0,0x0,8
tick,0x7ffe67f8feb4,542275575,0,0x0,8
tick,0x7ffe67f8feb4,542291569,0,0x0,8
tick,0x7ffe67f8feb4,542307580,0,0x0,8
tick,0x7ffe67f8feb4,542323589,0,0x0,8
tick,0x7ffe67f8feb4,542339595,0,0x0,8
tick,0x7ffe67f8feb4,542355600,0,0x0,8
tick,0x7ffe67f8feb4,542371621,0,0x0,8
tick,0x7ffe67f8feb4,542387672,0,0x0,8
tick,0x7ffe67f8feb4,542403005,0,0x0,8
tick,0x7ffe67f8feb4,542419032,0,0x0,8
tick,0x7ffe67f8feb4,542435021,0,0x0,8
tick,0x7ffe67f8feb4,542450738,0,0x0,8
tick,0x7ffe67f8feb4,542466209,0,0x0,8
tick,0x7ffe67f8feb4,542481727,0,0x0,8
tick,0x7ffe67f8feb4,542497785,0,0x0,8
tick,0x7ffe67f8feb4,542513022,0,0x0,8
tick,0x7ffe67f8feb4,542528257,0,0x0,8
tick,0x7ffe67f8feb4,542543002,0,0x0,8
tick,0x7ffe67f8feb4,542558778,0,0x0,8
tick,0x7ffe67f8feb4,542574165,0,0x0,8
tick,0x7ffe67f8feb4,542589969,0,0x0,8
tick,0x7ffe67f8feb4,542605835,0,0x0,8
tick,0x7ffe67f8feb4,542621809,0,0x0,8
tick,0x7ffe67f8feb4,542636750,0,0x0,8
tick,0x7ffe67f8feb4,542651959,0,0x0,8
tick,0x7ffe67f8feb4,542667774,0,0x0,8
tick,0x7ffe67f8feb4,542683038,0,0x0,8
tick,0x7ffe67f8feb4,542698965,0,0x0,8
tick,0x7ffe67f8feb4,542714159,0,0x0,8
tick,0x7ffe67f8feb4,542729774,0,0x0,8
tick,0x7ffe67f8feb4,542745155,0,0x0,8
tick,0x7ffe67f8feb4,542760855,0,0x0,8
tick,0x7ffe67f8feb4,542776835,0,0x0,8
tick,0x7ffe67f8feb4,542792060,0,0x0,8
tick,0x7ffe67f8feb4,542807921,0,0x0,8
tick,0x7ffe67f8feb4,542823866,0,0x0,8
tick,0x7ffe67f8feb4,542839869,0,0x0,8
tick,0x7ffe67f8feb4,542855890,0,0x0,8
tick,0x7ffe67f8feb4,542871374,0,0x0,8
tick,0x7ffe67f8feb4,542886843,0,0x0,8
tick,0x7ffe67f8feb4,542901901,0,0x0,8
tick,0x7ffe67f8feb4,542917293,0,0x0,8
tick,0x7ffe67f8feb4,542933123,0,0x0,8
tick,0x7ffe67f8feb4,542949135,0,0x0,8
tick,0x7ffe67f8feb4,542964175,0,0x0,8
tick,0x7ffe67f8feb4,542979564,0,0x0,8
tick,0x7ffe67f8feb4,542995533,0,0x0,8
tick,0x7ffe67f8feb4,543010779,0,0x0,8
tick,0x7ffe67f8feb4,543026010,0,0x0,8
tick,0x7ffe67f8feb4,543042122,0,0x0,8
tick,0x7ffe67f8feb4,543057939,0,0x0,8
tick,0x7ffe67f8feb4,543073305,0,0x0,8
tick,0x7ffe67f8feb4,543088195,0,0x0,8
tick,0x7ffe67f8feb4,543104076,0,0x0,8
tick,0x7ffe67f8feb4,543119669,0,0x0,8
tick,0x7ffe67f8feb4,543135385,0,0x0,8
tick,0x7ffe67f8feb4,543150136,0,0x0,8
tick,0x7ffe67f8feb4,543165652,0,0x0,8
tick,0x7ffe67f8feb4,543181235,0,0x0,8
tick,0x7ffe67f8feb4,543196258,0,0x0,8
tick,0x7ffe67f8feb4,543211568,0,0x0,8
tick,0x7ffe67f8feb4,543226549,0,0x0,8
tick,0x7ffe67f8feb4,543242516,0,0x0,8
tick,0x7ffe67f8feb4,543258497,0,0x0,8
tick,0x7ffe67f8feb4,543274505,0,0x0,8
tick,0x7ffe67f8feb4,543290507,0,0x0,8
tick,0x7ffe67f8feb4,543305570,0,0x0,8
tick,0x7ffe67f8feb4,543321860,0,0x0,8
tick,0x7ffe67f8feb4,543337489,0,0x0,8
tick,0x7ffe67f8feb4,543353029,0,0x0,8
tick,0x7ffe67f8feb4,543368499,0,0x0,8
tick,0x7ffe67f8feb4,543384044,0,0x0,8
tick,0x7ffe67f8feb4,543399438,0,0x0,8
tick,0x7ffe67f8feb4,543415190,0,0x0,8
tick,0x7ffe67f8feb4,543430546,0,0x0,8
tick,0x7ffe67f8feb4,543446694,0,0x0,8
tick,0x7ffe67f8feb4,543461565,0,0x0,8
tick,0x7ffe67f8feb4,543476558,0,0x0,8
tick,0x7ffe67f8feb4,543492617,0,0x0,8
tick,0x7ffe67f8feb4,543508002,0,0x0,8
tick,0x7ffe67f8feb4,543524077,0,0x0,8
tick,0x7ffe67f8feb4,543539614,0,0x0,8
tick,0x7ffe67f8feb4,543554059,0,0x0,8
tick,0x7ffe67f8feb4,543569071,0,0x0,8
tick,0x7ffe67f8feb4,543585184,0,0x0,8
tick,0x7ffe67f8feb4,543601189,0,0x0,8
tick,0x7ffe67f8feb4,543616299,0,0x0,8
tick,0x7ffe67f8feb4,543632299,0,0x0,8
tick,0x7ffe67f8feb4,543648325,0,0x0,8
tick,0x7ffe67f8feb4,543663025,0,0x0,8
tick,0x7ffe67f8feb4,543678815,0,0x0,8
tick,0x7ffe67f8feb4,543693860,0,0x0,8
tick,0x7ffe67f8feb4,543708981,0,0x0,8
tick,0x7ffe67f8feb4,543725409,0,0x0,8
tick,0x7ffe67f8feb4,543740140,0,0x0,8
tick,0x7ffe67f8feb4,543756602,0,0x0,8
tick,0x7ffe67f8feb4,543771290,0,0x0,8
tick,0x7ffe67f8feb4,543786528,0,0x0,8
tick,0x7ffe67f8feb4,543801700,0,0x0,8
tick,0x7ffe67f8feb4,543817716,0,0x0,8
tick,0x7ffe67f8feb4,543833034,0,0x0,8
tick,0x7ffe67f8feb4,543848742,0,0x0,8
tick,0x7ffe67f8feb4,543864041,0,0x0,8
tick,0x7ffe67f8feb4,543879741,0,0x0,8
tick,0x7ffe67f8feb4,543895173,0,0x0,8
tick,0x7ffe67f8feb4,543910479,0,0x0,8
tick,0x7ffe67f8feb4,543926057,0,0x0,8
tick,0x7ffe67f8feb4,543942286,0,0x0,8
tick,0x7ffe67f8feb4,543958673,0,0x0,8
tick,0x7ffe67f8feb4,543973489,0,0x0,8
tick,0x7ffe67f8feb4,543989203,0,0x0,8
tick,0x7ffe67f8feb4,544005139,0,0x0,8
tick,0x7ffe67f8feb4,544021027,0,0x0,8
tick,0x7ffe67f8feb4,544037052,0,0x0,8
tick,0x7ffe67f8feb4,544053344,0,0x0,8
tick,0x7ffe67f8feb4,544069070,0,0x0,8
tick,0x7ffe67f8feb4,544084065,0,0x0,8
tick,0x7ffe67f8feb4,544100100,0,0x0,8
tick,0x7ffe67f8feb4,544116044,0,0x0,8
tick,0x7ffe67f8feb4,544132053,0,0x0,8
tick,0x7ffe67f8feb4,544148029,0,0x0,8
tick,0x7ffe67f8feb4,544164003,0,0x0,8
tick,0x7ffe67f8feb4,544179996,0,0x0,8
tick,0x7ffe67f8feb4,544196001,0,0x0,8
tick,0x7ffe67f8feb4,544211020,0,0x0,8
tick,0x7ffe67f8feb4,544226261,0,0x0,8
tick,0x7ffe67f8feb4,544242377,0,0x0,8
tick,0x7ffe67f8feb4,544257577,0,0x0,8
tick,0x7ffe67f8feb4,544273620,0,0x0,8
tick,0x7ffe67f8feb4,544288528,0,0x0,8
tick,0x7ffe67f8feb4,544304549,0,0x0,8
tick,0x7ffe67f8feb4,544320542,0,0x0,8
tick,0x7ffe67f8feb4,544336659,0,0x0,8
tick,0x7ffe67f8feb4,544352532,0,0x0,8
tick,0x7ffe67f8feb4,544368540,0,0x0,8
tick,0x7ffe67f8feb4,544384016,0,0x0,8
tick,0x7ffe67f8feb4,544400016,0,0x0,8
tick,0x7ffe67f8feb4,544415189,0,0x0,8
tick,0x7ffe67f8feb4,544430306,0,0x0,8
tick,0x7ffe67f8feb4,544446279,0,0x0,8
tick,0x7ffe67f8feb4,544461558,0,0x0,8
tick,0x7ffe67f8feb4,544477073,0,0x0,8
tick,0x7ffe67f8feb4,544492028,0,0x0,8
tick,0x7ffe67f8feb4,544508056,0,0x0,8
tick,0x7ffe67f8feb4,544524064,0,0x0,8
tick,0x7ffe67f8feb4,544540026,0,0x0,8
tick,0x7ffe67f8feb4,544555163,0,0x0,8
tick,0x7ffe67f8feb4,544571056,0,0x0,8
tick,0x7ffe67f8feb4,544587072,0,0x0,8
tick,0x7ffe67f8feb4,544603058,0,0x0,8
tick,0x7ffe67f8feb4,544618114,0,0x0,8
tick,0x7ffe67f8feb4,544634018,0,0x0,8
tick,0x7ffe67f8feb4,544649231,0,0x0,8
tick,0x7ffe67f8feb4,544665176,0,0x0,8
tick,0x7ffe67f8feb4,544681169,0,0x0,8
tick,0x7ffe67f8feb4,544697071,0,0x0,8
tick,0x7ffe67f8feb4,544713069,0,0x0,8
tick,0x7ffe67f8feb4,544729080,0,0x0,8
tick,0x7ffe67f8feb4,544744882,0,0x0,8
tick,0x7ffe67f8feb4,544760147,0,0x0,8
tick,0x7ffe67f8feb4,544776021,0,0x0,8
tick,0x7ffe67f8feb4,544791158,0,0x0,8
tick,0x7ffe67f8feb4,544807345,0,0x0,8
tick,0x7ffe67f8feb4,544823310,0,0x0,8
tick,0x7ffe67f8feb4,544839092,0,0x0,8
tick,0x7ffe67f8feb4,544854229,0,0x0,8
tick,0x7ffe67f8feb4,544869510,0,0x0,8
tick,0x7ffe67f8feb4,544885268,0,0x0,8
tick,0x7ffe67f8feb4,544901277,0,0x0,8
tick,0x7ffe67f8feb4,544917512,0,0x0,8
tick,0x7ffe67f8feb4,544933175,0,0x0,8
tick,0x7ffe67f8feb4,544948919,0,0x0,8
tick,0x7ffe67f8feb4,544964089,0,0x0,8
tick,0x7ffe67f8feb4,544979432,0,0x0,8
tick,0x7ffe67f8feb4,544995269,0,0x0,8
tick,0x7ffe67f8feb4,545010387,0,0x0,8
tick,0x7ffe67f8feb4,545026438,0,0x0,8
tick,0x7ffe67f8feb4,545042463,0,0x0,8
tick,0x7ffe67f8feb4,545057625,0,0x0,8
tick,0x7ffe67f8feb4,545073606,0,0x0,8
tick,0x7ffe67f8feb4,545088661,0,0x0,8
tick,0x7ffe67f8feb4,545104246,0,0x0,8
tick,0x7ffe67f8feb4,545119931,0,0x0,8
tick,0x7ffe67f8feb4,545135216,0,0x0,8
tick,0x7ffe67f8feb4,545150802,0,0x0,8
tick,0x7ffe67f8feb4,545166796,0,0x0,8
tick,0x7ffe67f8feb4,545182780,0,0x0,8
tick,0x7ffe67f8feb4,545198782,0,0x0,8
tick,0x7ffe67f8feb4,545214057,0,0x0,8
tick,0x7ffe67f8feb4,545229293,0,0x0,8
tick,0x7ffe67f8feb4,545244760,0,0x0,8
tick,0x7ffe67f8feb4,545260699,0,0x0,8
tick,0x7ffe67f8feb4,545276711,0,0x0,8
tick,0x7ffe67f8feb4,545292711,0,0x0,8
tick,0x7ffe67f8feb4,545308709,0,0x0,8
tick,0x7ffe67f8feb4,545324813,0,0x0,8
tick,0x7ffe67f8feb4,545340707,0,0x0,8
tick,0x7ffe67f8feb4,545356938,0,0x0,8
tick,0x7ffe67f8feb4,545371826,0,0x0,8
tick,0x7ffe67f8feb4,545387688,0,0x0,8
tick,0x7ffe67f8feb4,545403040,0,0x0,8
tick,0x7ffe67f8feb4,545418709,0,0x0,8
tick,0x7ffe67f8feb4,545434046,0,0x0,8
tick,0x7ffe67f8feb4,545449694,0,0x0,8
tick,0x7ffe67f8feb4,545465182,0,0x0,8
tick,0x7ffe67f8feb4,545480705,0,0x0,8
tick,0x7ffe67f8feb4,545496164,0,0x0,8
tick,0x7ffe67f8feb4,545511724,0,0x0,8
tick,0x7ffe67f8feb4,545527788,0,0x0,8
tick,0x7ffe67f8feb4,545543053,0,0x0,8
tick,0x7ffe67f8feb4,545559050,0,0x0,8
tick,0x7ffe67f8feb4,545575045,0,0x0,8
tick,0x7ffe67f8feb4,545591089,0,0x0,8
tick,0x7ffe67f8feb4,545606415,0,0x0,8
tick,0x7ffe67f8feb4,545621512,0,0x0,8
tick,0x7ffe67f8feb4,545637545,0,0x0,8
tick,0x7ffe67f8feb4,545653080,0,0x0,8
tick,0x7ffe67f8feb4,545668411,0,0x0,8
tick,0x7ffe67f8feb4,545684084,0,0x0,8
tick,0x7ffe67f8feb4,545699565,0,0x0,8
tick,0x7ffe67f8feb4,545715482,0,0x0,8
tick,0x7ffe67f8feb4,545730811,0,0x0,8
tick,0x7ffe67f8feb4,545746232,0,0x0,8
tick,0x7ffe67f8feb4,545761968,0,0x0,8
tick,0x7ffe67f8feb4,545777308,0,0x0,8
tick,0x7ffe67f8feb4,545793329,0,0x0,8
tick,0x7ffe67f8feb4,545809354,0,0x0,8
tick,0x7ffe67f8feb4,545825353,0,0x0,8
tick,0x7ffe67f8feb4,545841632,0,0x0,8
tick,0x7ffe67f8feb4,545856765,0,0x0,8
tick,0x7ffe67f8feb4,545872148,0,0x0,8
tick,0x7ffe67f8feb4,545887821,0,0x0,8
tick,0x7ffe67f8feb4,545903172,0,0x0,8
tick,0x7ffe67f8feb4,545918466,0,0x0,8
tick,0x7ffe67f8feb4,545934129,0,0x0,8
tick,0x7ffe67f8feb4,545949545,0,0x0,8
tick,0x7ffe67f8feb4,545965275,0,0x0,8
tick,0x7ffe67f8feb4,545980525,0,0x0,8
tick,0x7ffe67f8feb4,545996300,0,0x0,8
tick,0x7ffe67f8feb4,546011539,0,0x0,8
tick,0x7ffe67f8feb4,546026817,0,0x0,8
tick,0x7ffe67f8feb4,546042008,0,0x0,8
tick,0x7ffe67f8feb4,546057939,0,0x0,8
tick,0x7ffe67f8feb4,546073446,0,0x0,8
tick,0x7ffe67f8feb4,546089255,0,0x0,8
tick,0x7ffe67f8feb4,546104963,0,0x0,8
tick,0x7ffe67f8feb4,546121117,0,0x0,8
tick,0x7ffe67f8feb4,546136174,0,0x0,8
tick,0x7ffe67f8feb4,546152162,0,0x0,8
tick,0x7ffe67f8feb4,546168183,0,0x0,8
tick,0x7ffe67f8feb4,546184066,0,0x0,8
tick,0x7ffe67f8feb4,546199199,0,0x0,8
tick,0x7ffe67f8feb4,546214178,0,0x0,8
tick,0x7ffe67f8feb4,546230176,0,0x0,8
tick,0x7ffe67f8feb4,546246027,0,0x0,8
tick,0x7ffe67f8feb4,546262004,0,0x0,8
tick,0x7ffe67f8feb4,546278021,0,0x0,8
tick,0x7ffe67f8feb4,546294002,0,0x0,8
tick,0x7ffe67f8feb4,546310016,0,0x0,8
tick,0x7ffe67f8feb4,546326001,0,0x0,8
tick,0x7ffe67f8feb4,546342052,0,0x0,8
tick,0x7ffe67f8feb4,546358012,0,0x0,8
tick,0x7ffe67f8feb4,546373192,0,0x0,8
tick,0x7ffe67f8feb4,546389041,0,0x0,8
tick,0x7ffe67f8feb4,546404200,0,0x0,8
tick,0x7ffe67f8feb4,546420053,0,0x0,8
tick,0x7ffe67f8feb4,546435216,0,0x0,8
tick,0x7ffe67f8feb4,546451024,0,0x0,8
tick,0x7ffe67f8feb4,546466192,0,0x0,8
tick,0x7ffe67f8feb4,546481191,0,0x0,8
tick,0x7ffe67f8feb4,546497189,0,0x0,8
tick,0x7ffe67f8feb4,546513057,0,0x0,8
tick,0x7ffe67f8feb4,546528203,0,0x0,8
tick,0x7ffe67f8feb4,546543685,0,0x0,8
tick,0x7ffe67f8feb4,546559670,0,0x0,8
tick,0x7ffe67f8feb4,546575676,0,0x0,8
tick,0x7ffe67f8feb4,546590687,0,0x0,8
tick,0x7ffe67f8feb4,546606208,0,0x0,8
tick,0x7ffe67f8feb4,546621333,0,0x0,8
tick,0x7ffe67f8feb4,546636241,0,0x0,8
tick,0x7ffe67f8feb4,546651347,0,0x0,8
tick,0x7ffe67f8feb4,546667349,0,0x0,8
tick,0x7ffe67f8feb4,546683121,0,0x0,8
tick,0x7ffe67f8feb4,546698972,0,0x0,8
tick,0x7ffe67f8feb4,546713970,0,0x0,8
tick,0x7ffe67f8feb4,546728976,0,0x0,8
tick,0x7ffe67f8feb4,546744212,0,0x0,8
tick,0x7ffe67f8feb4,546759977,0,0x0,8
tick,0x7ffe67f8feb4,546775996,0,0x0,8
tick,0x7ffe67f8feb4,546791594,0,0x0,8
tick,0x7ffe67f8feb4,546806669,0,0x0,8
tick,0x7ffe67f8feb4,546822064,0,0x0,8
tick,0x7ffe67f8feb4,546837675,0,0x0,8
tick,0x7ffe67f8feb4,546853071,0,0x0,8
tick,0x7ffe67f8feb4,546868720,0,0x0,8
tick,0x7ffe67f8feb4,546884038,0,0x0,8
tick,0x7ffe67f8feb4,546899391,0,0x0,8
tick,0x7ffe67f8feb4,546915204,0,0x0,8
tick,0x7ffe67f8feb4,546930755,0,0x0,8
tick,0x7ffe67f8feb4,546946909,0,0x0,8
tick,0x7ffe67f8feb4,546962088,0,0x0,8
tick,0x7ffe67f8feb4,546977823,0,0x0,8
tick,0x7ffe67f8feb4,546993815,0,0x0,8
tick,0x7ffe67f8feb4,547009893,0,0x0,8
tick,0x7ffe67f8feb4,547025941,0,0x0,8
tick,0x7ffe67f8feb4,547041137,0,0x0,8
tick,0x7ffe67f8feb4,547056540,0,0x0,8
tick,0x7ffe67f8feb4,547071848,0,0x0,8
tick,0x7ffe67f8feb4,547087200,0,0x0,8
tick,0x7ffe67f8feb4,547102981,0,0x0,8
tick,0x7ffe67f8feb4,547118829,0,0x0,8
tick,0x7ffe67f8feb4,547134086,0,0x0,8
tick,0x7ffe67f8feb4,547149465,0,0x0,8
tick,0x7ffe67f8feb4,547165470,0,0x0,8
tick,0x7ffe67f8feb4,547180830,0,0x0,8
tick,0x7ffe67f8feb4,547196001,0,0x0,8
tick,0x7ffe67f8feb4,547211255,0,0x0,8
tick,0x7ffe67f8feb4,547226677,0,0x0,8
tick,0x7ffe67f8feb4,547242360,0,0x0,8
tick,0x7ffe67f8feb4,547257750,0,0x0,8
tick,0x7ffe67f8feb4,547273748,0,0x0,8
tick,0x7ffe67f8feb4,547289720,0,0x0,8
tick,0x7ffe67f8feb4,547305717,0,0x0,8
tick,0x7ffe67f8feb4,547321735,0,0x0,8
tick,0x7ffe67f8feb4,547336718,0,0x0,8
tick,0x7ffe67f8feb4,547352732,0,0x0,8
tick,0x7ffe67f8feb4,547367749,0,0x0,8
tick,0x7ffe67f8feb4,547383715,0,0x0,8
tick,0x7ffe67f8feb4,547398774,0,0x0,8
tick,0x7ffe67f8feb4,547414070,0,0x0,8
tick,0x7ffe67f8feb4,547430068,0,0x0,8
tick,0x7ffe67f8feb4,547445480,0,0x0,8
tick,0x7ffe67f8feb4,547460767,0,0x0,8
tick,0x7ffe67f8feb4,547476761,0,0x0,8
tick,0x7ffe67f8feb4,547492764,0,0x0,8
tick,0x7ffe67f8feb4,547508868,0,0x0,8
tick,0x7ffe67f8feb4,547524089,0,0x0,8
tick,0x7ffe67f8feb4,547540048,0,0x0,8
tick,0x7ffe67f8feb4,547555230,0,0x0,8
tick,0x7ffe67f8feb4,547570212,0,0x0,8
tick,0x7ffe67f8feb4,547585403,0,0x0,8
tick,0x7ffe67f8feb4,547601250,0,0x0,8
tick,0x7ffe67f8feb4,547616390,0,0x0,8
tick,0x7ffe67f8feb4,547632093,0,0x0,8
tick,0x7ffe67f8feb4,547647978,0,0x0,8
tick,0x7ffe67f8feb4,547663103,0,0x0,8
tick,0x7ffe67f8feb4,547679106,0,0x0,8
tick,0x7ffe67f8feb4,547695224,0,0x0,8
tick,0x7ffe67f8feb4,547711117,0,0x0,8
tick,0x7ffe67f8feb4,547727120,0,0x0,8
tick,0x7ffe67f8feb4,547742970,0,0x0,8
tick,0x7ffe67f8feb4,547757874,0,0x0,8
tick,0x7ffe67f8feb4,547773321,0,0x0,8
tick,0x7ffe67f8feb4,547788854,0,0x0,8
tick,0x7ffe67f8feb4,547804166,0,0x0,8
tick,0x7ffe67f8feb4,547819870,0,0x0,8
tick,0x7ffe67f8feb4,547835464,0,0x0,8
tick,0x7ffe67f8feb4,547851222,0,0x0,8
tick,0x7ffe67f8feb4,547867061,0,0x0,8
tick,0x7ffe67f8feb4,547883167,0,0x0,8
tick,0x7ffe67f8feb4,547898571,0,0x0,8
tick,0x7ffe67f8feb4,547914409,0,0x0,8
tick,0x7ffe67f8feb4,547929526,0,0x0,8
tick,0x7ffe67f8feb4,547945129,0,0x0,8
tick,0x7ffe67f8feb4,547961202,0,0x0,8
tick,0x7ffe67f8feb4,547977270,0,0x0,8
tick,0x7ffe67f8feb4,547993364,0,0x0,8
tick,0x7ffe67f8feb4,548009351,0,0x0,8
tick,0x7ffe67f8feb4,548024499,0,0x0,8
tick,0x7ffe67f8feb4,548040313,0,0x0,8
tick,0x7ffe67f8feb4,548055521,0,0x0,8
tick,0x7ffe67f8feb4,548071361,0,0x0,8
tick,0x7ffe67f8feb4,548087215,0,0x0,8
tick,0x7ffe67f8feb4,548102540,0,0x0,8
tick,0x7ffe67f8feb4,548118214,0,0x0,8
tick,0x7ffe67f8feb4,548134114,0,0x0,8
tick,0x7ffe67f8feb4,548149216,0,0x0,8
tick,0x7ffe67f8feb4,548165199,0,0x0,8
tick,0x7ffe67f8feb4,548181416,0,0x0,8
tick,0x7ffe67f8feb4,548197384,0,0x0,8
tick,0x7ffe67f8feb4,548213108,0,0x0,8
tick,0x7ffe67f8feb4,548228500,0,0x0,8
tick,0x7ffe67f8feb4,548244459,0,0x0,8
tick,0x7ffe67f8feb4,548260465,0,0x0,8
tick,0x7ffe67f8feb4,548275416,0,0x0,8
tick,0x7ffe67f8feb4,548291421,0,0x0,8
tick,0x7ffe67f8feb4,548307417,0,0x0,8
tick,0x7ffe67f8feb4,548323419,0,0x0,8
tick,0x7ffe67f8feb4,548339400,0,0x0,8
tick,0x7ffe67f8feb4,548355399,0,0x0,8
tick,0x7ffe67f8feb4,548370863,0,0x0,8
tick,0x7ffe67f8feb4,548386186,0,0x0,8
tick,0x7ffe67f8feb4,548401975,0,0x0,8
tick,0x7ffe67f8feb4,548417207,0,0x0,8
tick,0x7ffe67f8feb4,548433069,0,0x0,8
tick,0x7ffe67f8feb4,548449100,0,0x0,8
tick,0x7ffe67f8feb4,548465196,0,0x0,8
tick,0x7ffe67f8feb4,548480399,0,0x0,8
tick,0x7ffe67f8feb4,548496084,0,0x0,8
tick,0x7ffe67f8feb4,548512080,0,0x0,8
tick,0x7ffe67f8feb4,548528085,0,0x0,8
tick,0x7ffe67f8feb4,548544076,0,0x0,8
tick,0x7ffe67f8feb4,548559689,0,0x0,8
tick,0x7ffe67f8feb4,548575199,0,0x0,8
tick,0x7ffe67f8feb4,548590330,0,0x0,8
tick,0x7ffe67f8feb4,548606199,0,0x0,8
tick,0x7ffe67f8feb4,548622106,0,0x0,8
tick,0x7ffe67f8feb4,548637255,0,0x0,8
tick,0x7ffe67f8feb4,548652282,0,0x0,8
tick,0x7ffe67f8feb4,548667796,0,0x0,8
tick,0x7ffe67f8feb4,548683762,0,0x0,8
tick,0x7ffe67f8feb4,548699352,0,0x0,8
tick,0x7ffe67f8feb4,548714244,0,0x0,8
tick,0x7ffe67f8feb4,548730147,0,0x0,8
tick,0x7ffe67f8feb4,548746221,0,0x0,8
tick,0x7ffe67f8feb4,548762226,0,0x0,8
tick,0x7ffe67f8feb4,548778347,0,0x0,8
tick,0x7ffe67f8feb4,548793223,0,0x0,8
tick,0x7ffe67f8feb4,548808473,0,0x0,8
tick,0x7ffe67f8feb4,548824116,0,0x0,8
tick,0x7ffe67f8feb4,548839270,0,0x0,8
tick,0x7ffe67f8feb4,548854548,0,0x0,8
tick,0x7ffe67f8feb4,548869337,0,0x0,8
tick,0x7ffe67f8feb4,548885243,0,0x0,8
tick,0x7ffe67f8feb4,548901293,0,0x0,8
tick,0x7ffe67f8feb4,548916626,0,0x0,8
tick,0x7ffe67f8feb4,548931843,0,0x0,8
tick,0x7ffe67f8feb4,548947764,0,0x0,8
tick,0x7ffe67f8feb4,548963569,0,0x0,8
tick,0x7ffe67f8feb4,548979670,0,0x0,8
tick,0x7ffe67f8feb4,548995612,0,0x0,8
tick,0x7ffe67f8feb4,549011651,0,0x0,8
tick,0x7ffe67f8feb4,549027293,0,0x0,8
tick,0x7ffe67f8feb4,549042378,0,0x0,8
tick,0x7ffe67f8feb4,549058145,0,0x0,8
tick,0x7ffe67f8feb4,549074102,0,0x0,8
tick,0x7ffe67f8feb4,549089354,0,0x0,8
tick,0x7ffe67f8feb4,549105514,0,0x0,8
tick,0x7ffe67f8feb4,549120696,0,0x0,8
tick,0x7ffe67f8feb4,549136470,0,0x0,8
tick,0x7ffe67f8feb4,549152170,0,0x0,8
tick,0x7ffe67f8feb4,549167621,0,0x0,8
tick,0x7ffe67f8feb4,549183152,0,0x0,8
tick,0x7ffe67f8feb4,549198640,0,0x0,8
tick,0x7ffe67f8feb4,549214720,0,0x0,8
tick,0x7ffe67f8feb4,549229740,0,0x0,8
tick,0x7ffe67f8feb4,549245780,0,0x0,8
tick,0x7ffe67f8feb4,549261841,0,0x0,8
tick,0x7ffe67f8feb4,549276978,0,0x0,8
tick,0x7ffe67f8feb4,549292821,0,0x0,8
tick,0x7ffe67f8feb4,549308772,0,0x0,8
tick,0x7ffe67f8feb4,549324760,0,0x0,8
tick,0x7ffe67f8feb4,549340766,0,0x0,8
tick,0x7ffe67f8feb4,549356788,0,0x0,8
tick,0x7ffe67f8feb4,549372788,0,0x0,8
tick,0x7ffe67f8feb4,549388793,0,0x0,8
tick,0x7ffe67f8feb4,549404124,0,0x0,8
tick,0x7ffe67f8feb4,549418795,0,0x0,8
tick,0x7ffe67f8feb4,549434083,0,0x0,8
tick,0x7ffe67f8feb4,549449614,0,0x0,8
tick,0x7ffe67f8feb4,549465207,0,0x0,8
tick,0x7ffe67f8feb4,549480619,0,0x0,8
tick,0x7ffe67f8feb4,549495592,0,0x0,8
tick,0x7ffe67f8feb4,549511647,0,0x0,8
tick,0x7ffe67f8feb4,549526522,0,0x0,8
tick,0x7ffe67f8feb4,549542082,0,0x0,8
tick,0x7ffe67f8feb4,549557515,0,0x0,8
tick,0x7ffe67f8feb4,549573070,0,0x0,8
tick,0x7ffe67f8feb4,549588562,0,0x0,8
tick,0x7ffe67f8feb4,549603586,0,0x0,8
tick,0x7ffe67f8feb4,549619578,0,0x0,8
tick,0x7ffe67f8feb4,549635234,0,0x0,8
tick,0x7ffe67f8feb4,549651101,0,0x0,8
tick,0x7ffe67f8feb4,549666282,0,0x0,8
tick,0x7ffe67f8feb4,549681685,0,0x0,8
tick,0x7ffe67f8feb4,549697399,0,0x0,8
tick,0x7ffe67f8feb4,549712767,0,0x0,8
tick,0x7ffe67f8feb4,549728820,0,0x0,8
tick,0x7ffe67f8feb4,549744798,0,0x0,8
tick,0x7ffe67f8feb4,549760060,0,0x0,8
tick,0x7ffe67f8feb4,549775282,0,0x0,8
tick,0x7ffe67f8feb4,549790614,0,0x0,8
tick,0x7ffe67f8feb4,549806411,0,0x0,8
tick,0x7ffe67f8feb4,549822423,0,0x0,8
tick,0x7ffe67f8feb4,549838436,0,0x0,8
tick,0x7ffe67f8feb4,549854119,0,0x0,8
tick,0x7ffe67f8feb4,549869517,0,0x0,8
tick,0x7ffe67f8feb4,549885093,0,0x0,8
tick,0x7ffe67f8feb4,549900356,0,0x0,8
tick,0x7ffe67f8feb4,549916157,0,0x0,8
tick,0x7ffe67f8feb4,549931467,0,0x0,8
tick,0x7ffe67f8feb4,549946241,0,0x0,8
tick,0x7ffe67f8feb4,549961719,0,0x0,8
tick,0x7ffe67f8feb4,549977506,0,0x0,8
tick,0x7ffe67f8feb4,549993405,0,0x0,8
tick,0x7ffe67f8feb4,550008766,0,0x0,8
tick,0x7ffe67f8feb4,550024334,0,0x0,8
tick,0x7ffe67f8feb4,550039595,0,0x0,8
tick,0x7ffe67f8feb4,550055642,0,0x0,8
tick,0x7ffe67f8feb4,550071032,0,0x0,8
tick,0x7ffe67f8feb4,550087022,0,0x0,8
tick,0x7ffe67f8feb4,550102296,0,0x0,8
tick,0x7ffe67f8feb4,550118343,0,0x0,8
tick,0x7ffe67f8feb4,550134336,0,0x0,8
tick,0x7ffe67f8feb4,550149249,0,0x0,8
tick,0x7ffe67f8feb4,550164596,0,0x0,8
tick,0x7ffe67f8feb4,550180611,0,0x0,8
tick,0x7ffe67f8feb4,550196735,0,0x0,8
tick,0x7ffe67f8feb4,550212828,0,0x0,8
tick,0x7ffe67f8feb4,550228335,0,0x0,8
tick,0x7ffe67f8feb4,550243556,0,0x0,8
tick,0x7ffe67f8feb4,550259168,0,0x0,8
tick,0x7ffe67f8feb4,550275122,0,0x0,8
tick,0x7ffe67f8feb4,550291102,0,0x0,8
tick,0x7ffe67f8feb4,550307097,0,0x0,8
tick,0x7ffe67f8feb4,550323093,0,0x0,8
tick,0x7ffe67f8feb4,550339095,0,0x0,8
tick,0x7ffe67f8feb4,550355084,0,0x0,8
tick,0x7ffe67f8feb4,550371091,0,0x0,8
tick,0x7ffe67f8feb4,550387087,0,0x0,8
tick,0x7ffe67f8feb4,550403048,0,0x0,8
tick,0x7ffe67f8feb4,550419098,0,0x0,8
tick,0x7ffe67f8feb4,550435196,0,0x0,8
tick,0x7ffe67f8feb4,550450909,0,0x0,8
tick,0x7ffe67f8feb4,550466136,0,0x0,8
tick,0x7ffe67f8feb4,550481638,0,0x0,8
tick,0x7ffe67f8feb4,550497079,0,0x0,8
tick,0x7ffe67f8feb4,550513062,0,0x0,8
tick,0x7ffe67f8feb4,550529383,0,0x0,8
tick,0x7ffe67f8feb4,550544199,0,0x0,8
tick,0x7ffe67f8feb4,550559841,0,0x0,8
tick,0x7ffe67f8feb4,550575206,0,0x0,8
tick,0x7ffe67f8feb4,550590328,0,0x0,8
tick,0x7ffe67f8feb4,550605499,0,0x0,8
tick,0x7ffe67f8feb4,550621555,0,0x0,8
tick,0x7ffe67f8feb4,550637595,0,0x0,8
tick,0x7ffe67f8feb4,550653135,0,0x0,8
tick,0x7ffe67f8feb4,550668374,0,0x0,8
tick,0x7ffe67f8feb4,550684489,0,0x0,8
tick,0x7ffe67f8feb4,550699279,0,0x0,8
tick,0x7ffe67f8feb4,550715293,0,0x0,8
tick,0x7ffe67f8feb4,550731311,0,0x0,8
tick,0x7ffe67f8feb4,550747314,0,0x0,8
tick,0x7ffe67f8feb4,550763654,0,0x0,8
tick,0x7ffe67f8feb4,550779382,0,0x0,8
tick,0x7ffe67f8feb4,550795659,0,0x0,8
tick,0x7ffe67f8feb4,550810478,0,0x0,8
tick,0x7ffe67f8feb4,550826281,0,0x0,8
tick,0x7ffe67f8feb4,550842130,0,0x0,8
tick,0x7ffe67f8feb4,550857742,0,0x0,8
tick,0x7ffe67f8feb4,550873309,0,0x0,8
tick,0x7ffe67f8feb4,550889020,0,0x0,8
tick,0x7ffe67f8feb4,550904134,0,0x0,8
tick,0x7ffe67f8feb4,550920123,0,0x0,8
tick,0x7ffe67f8feb4,550935505,0,0x0,8
tick,0x7ffe67f8feb4,550951186,0,0x0,8
tick,0x7ffe67f8feb4,550966538,0,0x0,8
tick,0x7ffe67f8feb4,550982107,0,0x0,8
tick,0x7ffe67f8feb4,550998226,0,0x0,8
tick,0x7ffe67f8feb4,551014134,0,0x0,8
tick,0x7ffe67f8feb4,551030205,0,0x0,8
tick,0x7ffe67f8feb4,551045211,0,0x0,8
tick,0x7ffe67f8feb4,551061072,0,0x0,8
tick,0x7ffe67f8feb4,551076246,0,0x0,8
tick,0x7ffe67f8feb4,551091962,0,0x0,8
tick,0x7ffe67f8feb4,551107933,0,0x0,8
tick,0x7ffe67f8feb4,551123124,0,0x0,8
tick,0x7ffe67f8feb4,551139041,0,0x0,8
tick,0x7ffe67f8feb4,551154157,0,0x0,8
tick,0x7ffe67f8feb4,551169368,0,0x0,8
tick,0x7ffe67f8feb4,551184523,0,0x0,8
tick,0x7ffe67f8feb4,551199768,0,0x0,8
tick,0x7ffe67f8feb4,551215526,0,0x0,8
tick,0x7ffe67f8feb4,551231161,0,0x0,8
tick,0x7ffe67f8feb4,551247360,0,0x0,8
tick,0x7ffe67f8feb4,551262327,0,0x0,8
tick,0x7ffe67f8feb4,551277295,0,0x0,8
tick,0x7ffe67f8feb4,551293241,0,0x0,8
tick,0x7ffe67f8feb4,551309251,0,0x0,8
tick,0x7ffe67f8feb4,551325234,0,0x0,8
tick,0x7ffe67f8feb4,551341242,0,0x0,8
tick,0x7ffe67f8feb4,551357238,0,0x0,8
tick,0x7ffe67f8feb4,551373243,0,0x0,8
tick,0x7ffe67f8feb4,551388239,0,0x0,8
tick,0x7ffe67f8feb4,551404126,0,0x0,8
tick,0x7ffe67f8feb4,551419276,0,0x0,8
tick,0x7ffe67f8feb4,551434206,0,0x0,8
tick,0x7ffe67f8feb4,551450291,0,0x0,8
tick,0x7ffe67f8feb4,551466298,0,0x0,8
tick,0x7ffe67f8feb4,551482294,0,0x0,8
tick,0x7ffe67f8feb4,551498284,0,0x0,8
tick,0x7ffe67f8feb4,551514290,0,0x0,8
tick,0x7ffe67f8feb4,551529785,0,0x0,8
tick,0x7ffe67f8feb4,551545213,0,0x0,8
tick,0x7ffe67f8feb4,551560809,0,0x0,8
tick,0x7ffe67f8feb4,551576203,0,0x0,8
tick,0x7ffe67f8feb4,551591229,0,0x0,8
tick,0x7ffe67f8feb4,551606494,0,0x0,8
tick,0x7ffe67f8feb4,551621894,0,0x0,8
tick,0x7ffe67f8feb4,551637220,0,0x0,8
tick,0x7ffe67f8feb4,551653143,0,0x0,8
tick,0x7ffe67f8feb4,551669142,0,0x0,8
tick,0x7ffe67f8feb4,551684151,0,0x0,8
tick,0x7ffe67f8feb4,551699201,0,0x0,8
tick,0x7ffe67f8feb4,551714127,0,0x0,8
tick,0x7ffe67f8feb4,551729502,0,0x0,8
tick,0x7ffe67f8feb4,551745196,0,0x0,8
tick,0x7ffe67f8feb4,551760604,0,0x0,8
tick,0x7ffe67f8feb4,551776659,0,0x0,8
tick,0x7ffe67f8feb4,551792104,0,0x0,8
tick,0x7ffe67f8feb4,551807866,0,0x0,8
tick,0x7ffe67f8feb4,551823322,0,0x0,8
tick,0x7ffe67f8feb4,551838636,0,0x0,8
tick,0x7ffe67f8feb4,551854169,0,0x0,8
tick,0x7ffe67f8feb4,551869657,0,0x0,8
tick,0x7ffe67f8feb4,551884951,0,0x0,8
tick,0x7ffe67f8feb4,551900246,0,0x0,8
tick,0x7ffe67f8feb4,551915341,0,0x0,8
tick,0x7ffe67f8feb4,551931345,0,0x0,8
tick,0x7ffe67f8feb4,551946667,0,0x0,8
tick,0x7ffe67f8feb4,551962320,0,0x0,8
tick,0x7ffe67f8feb4,551978330,0,0x0,8
tick,0x7ffe67f8feb4,551994374,0,0x0,8
tick,0x7ffe67f8feb4,552010013,0,0x0,8
tick,0x7ffe67f8feb4,552025360,0,0x0,8
tick,0x7ffe67f8feb4,552041557,0,0x0,8
tick,0x7ffe67f8feb4,552057158,0,0x0,8
tick,0x7ffe67f8feb4,552072332,0,0x0,8
tick,0x7ffe67f8feb4,552088202,0,0x0,8
tick,0x7ffe67f8feb4,552103655,0,0x0,8
tick,0x7ffe67f8feb4,552119474,0,0x0,8
tick,0x7ffe67f8feb4,552135663,0,0x0,8
tick,0x7ffe67f8feb4,552151422,0,0x0,8
tick,0x7ffe67f8feb4,552167545,0,0x0,8
tick,0x7ffe67f8feb4,552183461,0,0x0,8
tick,0x7ffe67f8feb4,552199528,0,0x0,8
tick,0x7ffe67f8feb4,552215524,0,0x0,8
tick,0x7ffe67f8feb4,552231517,0,0x0,8
tick,0x7ffe67f8feb4,552248283,0,0x0,8
tick,0x7ffe67f8feb4,552263758,0,0x0,8
tick,0x7ffe67f8feb4,552279449,0,0x0,8
tick,0x7ffe67f8feb4,552295453,0,0x0,8
tick,0x7ffe67f8feb4,552311459,0,0x0,8
tick,0x7ffe67f8feb4,552327455,0,0x0,8
tick,0x7ffe67f8feb4,552343459,0,0x0,8
tick,0x7ffe67f8feb4,552359445,0,0x0,8
tick,0x7ffe67f8feb4,552375469,0,0x0,8
tick,0x7ffe67f8feb4,552391448,0,0x0,8
tick,0x7ffe67f8feb4,552407510,0,0x0,8
tick,0x7ffe67f8feb4,552423054,0,0x0,8
tick,0x7ffe67f8feb4,552438462,0,0x0,8
tick,0x7ffe67f8feb4,552454096,0,0x0,8
tick,0x7ffe67f8feb4,552469483,0,0x0,8
tick,0x7ffe67f8feb4,552485225,0,0x0,8
tick,0x7ffe67f8feb4,552500495,0,0x0,8
tick,0x7ffe67f8feb4,552516491,0,0x0,8
tick,0x7ffe67f8feb4,552532506,0,0x0,8
tick,0x7ffe67f8feb4,552547624,0,0x0,8
tick,0x7ffe67f8feb4,552563079,0,0x0,8
tick,0x7ffe67f8feb4,552578525,0,0x0,8
tick,0x7ffe67f8feb4,552594095,0,0x0,8
tick,0x7ffe67f8feb4,552609536,0,0x0,8
tick,0x7ffe67f8feb4,552625251,0,0x0,8
tick,0x7ffe67f8feb4,552640356,0,0x0,8
tick,0x7ffe67f8feb4,552656140,0,0x0,8
tick,0x7ffe67f8feb4,552671242,0,0x0,8
tick,0x7ffe67f8feb4,552686399,0,0x0,8
tick,0x7ffe67f8feb4,552701513,0,0x0,8
tick,0x7ffe67f8feb4,552717484,0,0x0,8
tick,0x7ffe67f8feb4,552732956,0,0x0,8
tick,0x7ffe67f8feb4,552748472,0,0x0,8
tick,0x7ffe67f8feb4,552764209,0,0x0,8
tick,0x7ffe67f8feb4,552779614,0,0x0,8
tick,0x7ffe67f8feb4,552795265,0,0x0,8
tick,0x7ffe67f8feb4,552810475,0,0x0,8
tick,0x7ffe67f8feb4,552826274,0,0x0,8
tick,0x7ffe67f8feb4,552841756,0,0x0,8
tick,0x7ffe67f8feb4,552857306,0,0x0,8
tick,0x7ffe67f8feb4,552873313,0,0x0,8
tick,0x7ffe67f8feb4,552888293,0,0x0,8
tick,0x7ffe67f8feb4,552904164,0,0x0,8
tick,0x7ffe67f8feb4,552919393,0,0x0,8
tick,0x7ffe67f8feb4,552935263,0,0x0,8
tick,0x7ffe67f8feb4,552951260,0,0x0,8
tick,0x7ffe67f8feb4,552967254,0,0x0,8
tick,0x7ffe67f8feb4,552983359,0,0x0,8
tick,0x7ffe67f8feb4,552998585,0,0x0,8
tick,0x7ffe67f8feb4,553014710,0,0x0,8
tick,0x7ffe67f8feb4,553030081,0,0x0,8
tick,0x7ffe67f8feb4,553045395,0,0x0,8
tick,0x7ffe67f8feb4,553060541,0,0x0,8
tick,0x7ffe67f8feb4,553076282,0,0x0,8
tick,0x7ffe67f8feb4,553091634,0,0x0,8
tick,0x7ffe67f8feb4,553107777,0,0x0,8
tick,0x7ffe67f8feb4,553123363,0,0x0,8
tick,0x7ffe67f8feb4,553138018,0,0x0,8
tick,0x7ffe67f8feb4,553153155,0,0x0,8
tick,0x7ffe67f8feb4,553169100,0,0x0,8
tick,0x7ffe67f8feb4,553184255,0,0x0,8
tick,0x7ffe67f8feb4,553199415,0,0x0,8
tick,0x7ffe67f8feb4,553215430,0,0x0,8
tick,0x7ffe67f8feb4,553230923,0,0x0,8
tick,0x7ffe67f8feb4,553246302,0,0x0,8
tick,0x7ffe67f8feb4,553261544,0,0x0,8
tick,0x7ffe67f8feb4,553276659,0,0x0,8
tick,0x7ffe67f8feb4,553292061,0,0x0,8
tick,0x7ffe67f8feb4,553307764,0,0x0,8
tick,0x7ffe67f8feb4,553323749,0,0x0,8
tick,0x7ffe67f8feb4,553339754,0,0x0,8
tick,0x7ffe67f8feb4,553355317,0,0x0,8
tick,0x7ffe67f8feb4,553371290,0,0x0,8
tick,0x7ffe67f8feb4,553387342,0,0x0,8
tick,0x7ffe67f8feb4,553403364,0,0x0,8
tick,0x7ffe67f8feb4,553419290,0,0x0,8
tick,0x7ffe67f8feb4,553434199,0,0x0,8
tick,0x7ffe67f8feb4,553449335,0,0x0,8
tick,0x7ffe67f8feb4,553465271,0,0x0,8
tick,0x7ffe67f8feb4,553480761,0,0x0,8
tick,0x7ffe67f8feb4,553496222,0,0x0,8
tick,0x7ffe67f8feb4,553511234,0,0x0,8
tick,0x7ffe67f8feb4,553526243,0,0x0,8
tick,0x7ffe67f8feb4,553542236,0,0x0,8
tick,0x7ffe67f8feb4,553558264,0,0x0,8
tick,0x7ffe67f8feb4,553574104,0,0x0,8
tick,0x7ffe67f8feb4,553589283,0,0x0,8
tick,0x7ffe67f8feb4,553605247,0,0x0,8
tick,0x7ffe67f8feb4,553620224,0,0x0,8
tick,0x7ffe67f8feb4,553635403,0,0x0,8
tick,0x7ffe67f8feb4,553651240,0,0x0,8
tick,0x7ffe67f8feb4,553667250,0,0x0,8
tick,0x7ffe67f8feb4,553683125,0,0x0,8
tick,0x7ffe67f8feb4,553698479,0,0x0,8
tick,0x7ffe67f8feb4,553713130,0,0x0,8
tick,0x7ffe67f8feb4,553728421,0,0x0,8
tick,0x7ffe67f8feb4,553743875,0,0x0,8
tick,0x7ffe67f8feb4,553758877,0,0x0,8
tick,0x7ffe67f8feb4,553774079,0,0x0,8
tick,0x7ffe67f8feb4,553789893,0,0x0,8
tick,0x7ffe67f8feb4,553805342,0,0x0,8
tick,0x7ffe67f8feb4,553820929,0,0x0,8
tick,0x7ffe67f8feb4,553836113,0,0x0,8
tick,0x7ffe67f8feb4,553852182,0,0x0,8
tick,0x7ffe67f8feb4,553868198,0,0x0,8
tick,0x7ffe67f8feb4,553884255,0,0x0,8
tick,0x7ffe67f8feb4,553900287,0,0x0,8
tick,0x7ffe67f8feb4,553916267,0,0x0,8
tick,0x7ffe67f8feb4,553931244,0,0x0,8
tick,0x7ffe67f8feb4,553946742,0,0x0,8
tick,0x7ffe67f8feb4,553962467,0,0x0,8
tick,0x7ffe67f8feb4,553978321,0,0x0,8
tick,0x7ffe67f8feb4,553994244,0,0x0,8
tick,0x7ffe67f8feb4,554009810,0,0x0,8
tick,0x7ffe67f8feb4,554025292,0,0x0,8
tick,0x7ffe67f8feb4,554040362,0,0x0,8
tick,0x7ffe67f8feb4,554055797,0,0x0,8
tick,0x7ffe67f8feb4,554071442,0,0x0,8
tick,0x7ffe67f8feb4,554086810,0,0x0,8
tick,0x7ffe67f8feb4,554102406,0,0x0,8
tick,0x7ffe67f8feb4,554117801,0,0x0,8
tick,0x7ffe67f8feb4,554133459,0,0x0,8
tick,0x7ffe67f8feb4,554149005,0,0x0,8
tick,0x7ffe67f8feb4,554164280,0,0x0,8
tick,0x7ffe67f8feb4,554179488,0,0x0,8
tick,0x7ffe67f8feb4,554195432,0,0x0,8
tick,0x7ffe67f8feb4,554211524,0,0x0,8
tick,0x7ffe67f8feb4,554226969,0,0x0,8
tick,0x7ffe67f8feb4,554242150,0,0x0,8
tick,0x7ffe67f8feb4,554257818,0,0x0,8
tick,0x7ffe67f8feb4,554273543,0,0x0,8
tick,0x7ffe67f8feb4,554289493,0,0x0,8
tick,0x7ffe67f8feb4,554305300,0,0x0,8
tick,0x7ffe67f8feb4,554320544,0,0x0,8
tick,0x7ffe67f8feb4,554336533,0,0x0,8
tick,0x7ffe67f8feb4,554351540,0,0x0,8
tick,0x7ffe67f8feb4,554367261,0,0x0,8
tick,0x7ffe67f8feb4,554383418,0,0x0,8
tick,0x7ffe67f8feb4,554399467,0,0x0,8
tick,0x7ffe67f8feb4,554415257,0,0x0,8
tick,0x7ffe67f8feb4,554431249,0,0x0,8
tick,0x7ffe67f8feb4,554447263,0,0x0,8
tick,0x7ffe67f8feb4,554463100,0,0x0,8
tick,0x7ffe67f8feb4,554479086,0,0x0,8
tick,0x7ffe67f8feb4,554495209,0,0x0,8
tick,0x7ffe67f8feb4,554511124,0,0x0,8
tick,0x7ffe67f8feb4,554526309,0,0x0,8
tick,0x7ffe67f8feb4,554541501,0,0x0,8
tick,0x7ffe67f8feb4,554557142,0,0x0,8
tick,0x7ffe67f8feb4,554573160,0,0x0,8
tick,0x7ffe67f8feb4,554589124,0,0x0,8
tick,0x7ffe67f8feb4,554605232,0,0x0,8
tick,0x7ffe67f8feb4,554621123,0,0x0,8
tick,0x7ffe67f8feb4,554636877,0,0x0,8
tick,0x7ffe67f8feb4,554652130,0,0x0,8
tick,0x7ffe67f8feb4,554668128,0,0x0,8
tick,0x7ffe67f8feb4,554684096,0,0x0,8
tick,0x7ffe67f8feb4,554700098,0,0x0,8
tick,0x7ffe67f8feb4,554715273,0,0x0,8
tick,0x7ffe67f8feb4,554730775,0,0x0,8
tick,0x7ffe67f8feb4,554746406,0,0x0,8
tick,0x7ffe67f8feb4,554761765,0,0x0,8
tick,0x7ffe67f8feb4,554777495,0,0x0,8
tick,0x7ffe67f8feb4,554793422,0,0x0,8
tick,0x7ffe67f8feb4,554809189,0,0x0,8
tick,0x7ffe67f8feb4,554824350,0,0x0,8
tick,0x7ffe67f8feb4,554840454,0,0x0,8
tick,0x7ffe67f8feb4,554855663,0,0x0,8
tick,0x7ffe67f8feb4,554871157,0,0x0,8
tick,0x7ffe67f8feb4,554886412,0,0x0,8
tick,0x7ffe67f8feb4,554902146,0,0x0,8
tick,0x7ffe67f8feb4,554917471,0,0x0,8
tick,0x7ffe67f8feb4,554933455,0,0x0,8
tick,0x7ffe67f8feb4,554949135,0,0x0,8
tick,0x7ffe67f8feb4,554964157,0,0x0,8
tick,0x7ffe67f8feb4,554979694,0,0x0,8
tick,0x7ffe67f8feb4,554995319,0,0x0,8
tick,0x7ffe67f8feb4,555011216,0,0x0,8
tick,0x7ffe67f8feb4,555027324,0,0x0,8
tick,0x7ffe67f8feb4,555042358,0,0x0,8
tick,0x7ffe67f8feb4,555058235,0,0x0,8
tick,0x7ffe67f8feb4,555074284,0,0x0,8
tick,0x7ffe67f8feb4,555089397,0,0x0,8
tick,0x7ffe67f8feb4,555105496,0,0x0,8
tick,0x7ffe67f8feb4,555120230,0,0x0,8
tick,0x7ffe67f8feb4,555136220,0,0x0,8
tick,0x7ffe67f8feb4,555152211,0,0x0,8
tick,0x7ffe67f8feb4,555168269,0,0x0,8
tick,0x7ffe67f8feb4,555184275,0,0x0,8
tick,0x7ffe67f8feb4,555200226,0,0x0,8
tick,0x7ffe67f8feb4,555215526,0,0x0,8
tick,0x7ffe67f8feb4,555230680,0,0x0,8
tick,0x7ffe67f8feb4,555245669,0,0x0,8
tick,0x7ffe67f8feb4,555261286,0,0x0,8
tick,0x7ffe67f8feb4,555276318,0,0x0,8
tick,0x7ffe67f8feb4,555292143,0,0x0,8
tick,0x7ffe67f8feb4,555307406,0,0x0,8
tick,0x7ffe67f8feb4,555323162,0,0x0,8
tick,0x7ffe67f8feb4,555339151,0,0x0,8
tick,0x7ffe67f8feb4,555355167,0,0x0,8
tick,0x7ffe67f8feb4,555371169,0,0x0,8
tick,0x7ffe67f8feb4,555387171,0,0x0,8
tick,0x7ffe67f8feb4,555403263,0,0x0,8
tick,0x7ffe67f8feb4,555419120,0,0x0,8
tick,0x7ffe67f8feb4,555435135,0,0x0,8
tick,0x7ffe67f8feb4,555451124,0,0x0,8
tick,0x7ffe67f8feb4,555466496,0,0x0,8
tick,0x7ffe67f8feb4,555482004,0,0x0,8
tick,0x7ffe67f8feb4,555498047,0,0x0,8
tick,0x7ffe67f8feb4,555513278,0,0x0,8
tick,0x7ffe67f8feb4,555529102,0,0x0,8
tick,0x7ffe67f8feb4,555544258,0,0x0,8
tick,0x7ffe67f8feb4,555560202,0,0x0,8
tick,0x7ffe67f8feb4,555575397,0,0x0,8
tick,0x7ffe67f8feb4,555591216,0,0x0,8
tick,0x7ffe67f8feb4,555606967,0,0x0,8
tick,0x7ffe67f8feb4,555622135,0,0x0,8
tick,0x7ffe67f8feb4,555638242,0,0x0,8
tick,0x7ffe67f8feb4,555654159,0,0x0,8
tick,0x7ffe67f8feb4,555670181,0,0x0,8
tick,0x7ffe67f8feb4,555686288,0,0x0,8
tick,0x7ffe67f8feb4,555702288,0,0x0,8
tick,0x7ffe67f8feb4,555718316,0,0x0,8
tick,0x7ffe67f8feb4,555734333,0,0x0,8
tick,0x7ffe67f8feb4,555749471,0,0x0,8
tick,0x7ffe67f8feb4,555765284,0,0x0,8
tick,0x7ffe67f8feb4,555780946,0,0x0,8
tick,0x7ffe67f8feb4,555796805,0,0x0,8
tick,0x7ffe67f8feb4,555812231,0,0x0,8
tick,0x7ffe67f8feb4,555828064,0,0x0,8
tick,0x7ffe67f8feb4,555844132,0,0x0,8
tick,0x7ffe67f8feb4,555859296,0,0x0,8
tick,0x7ffe67f8feb4,555875333,0,0x0,8
tick,0x7ffe67f8feb4,555891124,0,0x0,8
tick,0x7ffe67f8feb4,555906322,0,0x0,8
tick,0x7ffe67f8feb4,555921951,0,0x0,8
tick,0x7ffe67f8feb4,555937659,0,0x0,8
tick,0x7ffe67f8feb4,555953665,0,0x0,8
tick,0x7ffe67f8feb4,555969673,0,0x0,8
tick,0x7ffe67f8feb4,555985687,0,0x0,8
tick,0x7ffe67f8feb4,556001004,0,0x0,8
tick,0x7ffe67f8feb4,556016206,0,0x0,8
tick,0x7ffe67f8feb4,556031693,0,0x0,8
tick,0x7ffe67f8feb4,556046985,0,0x0,8
tick,0x7ffe67f8feb4,556062356,0,0x0,8
tick,0x7ffe67f8feb4,556077743,0,0x0,8
tick,0x7ffe67f8feb4,556093170,0,0x0,8
tick,0x7ffe67f8feb4,556108513,0,0x0,8
tick,0x7ffe67f8feb4,556124281,0,0x0,8
tick,0x7ffe67f8feb4,556139617,0,0x0,8
tick,0x7ffe67f8feb4,556154748,0,0x0,8
tick,0x7ffe67f8feb4,556169982,0,0x0,8
tick,0x7ffe67f8feb4,556185978,0,0x0,8
tick,0x7ffe67f8feb4,556202052,0,0x0,8
tick,0x7ffe67f8feb4,556218068,0,0x0,8
tick,0x7ffe67f8feb4,556233664,0,0x0,8
tick,0x7ffe67f8feb4,556249837,0,0x0,8
tick,0x7ffe67f8feb4,556265664,0,0x0,8
tick,0x7ffe67f8feb4,556281233,0,0x0,8
tick,0x7ffe67f8feb4,556296345,0,0x0,8
tick,0x7ffe67f8feb4,556311874,0,0x0,8
tick,0x7ffe67f8feb4,556326969,0,0x0,8
tick,0x7ffe67f8feb4,556342978,0,0x0,8
tick,0x7ffe67f8feb4,556358767,0,0x0,8
tick,0x7ffe67f8feb4,556374819,0,0x0,8
tick,0x7ffe67f8feb4,556390793,0,0x0,8
tick,0x7ffe67f8feb4,556405788,0,0x0,8
tick,0x7ffe67f8feb4,556421786,0,0x0,8
tick,0x7ffe67f8feb4,556437780,0,0x0,8
tick,0x7ffe67f8feb4,556453761,0,0x0,8
tick,0x7ffe67f8feb4,556469800,0,0x0,8
tick,0x7ffe67f8feb4,556484868,0,0x0,8
tick,0x7ffe67f8feb4,556499943,0,0x0,8
tick,0x7ffe67f8feb4,556515776,0,0x0,8
tick,0x7ffe67f8feb4,556530978,0,0x0,8
tick,0x7ffe67f8feb4,556546237,0,0x0,8
tick,0x7ffe67f8feb4,556561380,0,0x0,8
tick,0x7ffe67f8feb4,556577258,0,0x0,8
tick,0x7ffe67f8feb4,556593115,0,0x0,8
tick,0x7ffe67f8feb4,556608307,0,0x0,8
tick,0x7ffe67f8feb4,556624172,0,0x0,8
tick,0x7ffe67f8feb4,556639942,0,0x0,8
tick,0x7ffe67f8feb4,556655990,0,0x0,8
tick,0x7ffe67f8feb4,556671899,0,0x0,8
tick,0x7ffe67f8feb4,556687923,0,0x0,8
tick,0x7ffe67f8feb4,556703181,0,0x0,8
tick,0x7ffe67f8feb4,556719304,0,0x0,8
tick,0x7ffe67f8feb4,556735157,0,0x0,8
tick,0x7ffe67f8feb4,556750684,0,0x0,8
tick,0x7ffe67f8feb4,556765830,0,0x0,8
tick,0x7ffe67f8feb4,556781018,0,0x0,8
tick,0x7ffe67f8feb4,556796310,0,0x0,8
tick,0x7ffe67f8feb4,556811806,0,0x0,8
tick,0x7ffe67f8feb4,556826926,0,0x0,8
tick,0x7ffe67f8feb4,556842312,0,0x0,8
tick,0x7ffe67f8feb4,556857632,0,0x0,8
tick,0x7ffe67f8feb4,556873436,0,0x0,8
tick,0x7ffe67f8feb4,556888877,0,0x0,8
tick,0x7ffe67f8feb4,556904916,0,0x0,8
tick,0x7ffe67f8feb4,556920463,0,0x0,8
tick,0x7ffe67f8feb4,556936493,0,0x0,8
tick,0x7ffe67f8feb4,556951711,0,0x0,8
tick,0x7ffe67f8feb4,556967087,0,0x0,8
tick,0x7ffe67f8feb4,556982346,0,0x0,8
tick,0x7ffe67f8feb4,556998141,0,0x0,8
tick,0x7ffe67f8feb4,557014116,0,0x0,8
tick,0x7ffe67f8feb4,557030226,0,0x0,8
tick,0x7ffe67f8feb4,557046275,0,0x0,8
tick,0x7ffe67f8feb4,557062111,0,0x0,8
tick,0x7ffe67f8feb4,557078223,0,0x0,8
tick,0x7ffe67f8feb4,557094122,0,0x0,8
tick,0x7ffe67f8feb4,557109605,0,0x0,8
tick,0x7ffe67f8feb4,557124558,0,0x0,8
tick,0x7ffe67f8feb4,557140452,0,0x0,8
tick,0x7ffe67f8feb4,557155935,0,0x0,8
tick,0x7ffe67f8feb4,557171708,0,0x0,8
tick,0x7ffe67f8feb4,557187524,0,0x0,8
tick,0x7ffe67f8feb4,557202770,0,0x0,8
tick,0x7ffe67f8feb4,557217798,0,0x0,8
tick,0x7ffe67f8feb4,557233171,0,0x0,8
tick,0x7ffe67f8feb4,557248892,0,0x0,8
tick,0x7ffe67f8feb4,557264181,0,0x0,8
tick,0x7ffe67f8feb4,557279929,0,0x0,8
tick,0x7ffe67f8feb4,557295492,0,0x0,8
tick,0x7ffe67f8feb4,557310723,0,0x0,8
tick,0x7ffe67f8feb4,557325746,0,0x0,8
tick,0x7ffe67f8feb4,557341160,0,0x0,8
tick,0x7ffe67f8feb4,557357096,0,0x0,8
tick,0x7ffe67f8feb4,557372980,0,0x0,8
tick,0x7ffe67f8feb4,557389097,0,0x0,8
tick,0x7ffe67f8feb4,557405003,0,0x0,8
tick,0x7ffe67f8feb4,557420964,0,0x0,8
tick,0x7ffe67f8feb4,557436965,0,0x0,8
tick,0x7ffe67f8feb4,557452952,0,0x0,8
tick,0x7ffe67f8feb4,557469011,0,0x0,8
tick,0x7ffe67f8feb4,557484122,0,0x0,8
tick,0x7ffe67f8feb4,557500135,0,0x0,8
tick,0x7ffe67f8feb4,557515126,0,0x0,8
tick,0x7ffe67f8feb4,557530276,0,0x0,8
tick,0x7ffe67f8feb4,557545270,0,0x0,8
tick,0x7ffe67f8feb4,557560857,0,0x0,8
tick,0x7ffe67f8feb4,557576264,0,0x0,8
tick,0x7ffe67f8feb4,557591181,0,0x0,8
tick,0x7ffe67f8feb4,557606517,0,0x0,8
tick,0x7ffe67f8feb4,557622121,0,0x0,8
tick,0x7ffe67f8feb4,557637541,0,0x0,8
tick,0x7ffe67f8feb4,557653119,0,0x0,8
tick,0x7ffe67f8feb4,557668682,0,0x0,8
tick,0x7ffe67f8feb4,557684126,0,0x0,8
tick,0x7ffe67f8feb4,557700132,0,0x0,8
tick,0x7ffe67f8feb4,557716145,0,0x0,8
tick,0x7ffe67f8feb4,557731104,0,0x0,8
tick,0x7ffe67f8feb4,557746252,0,0x0,8
tick,0x7ffe67f8feb4,557762066,0,0x0,8
tick,0x7ffe67f8feb4,557778062,0,0x0,8
tick,0x7ffe67f8feb4,557793401,0,0x0,8
tick,0x7ffe67f8feb4,557809117,0,0x0,8
tick,0x7ffe67f8feb4,557824247,0,0x0,8
tick,0x7ffe67f8feb4,557839421,0,0x0,8
tick,0x7ffe67f8feb4,557855113,0,0x0,8
tick,0x7ffe67f8feb4,557871112,0,0x0,8
tick,0x7ffe67f8feb4,557887177,0,0x0,8
tick,0x7ffe67f8feb4,557903262,0,0x0,8
tick,0x7ffe67f8feb4,557918312,0,0x0,8
tick,0x7ffe67f8feb4,557934365,0,0x0,8
tick,0x7ffe67f8feb4,557949429,0,0x0,8
tick,0x7ffe67f8feb4,557965317,0,0x0,8
tick,0x7ffe67f8feb4,557980801,0,0x0,8
tick,0x7ffe67f8feb4,557996541,0,0x0,8
tick,0x7ffe67f8feb4,558011613,0,0x0,8
tick,0x7ffe67f8feb4,558026988,0,0x0,8
tick,0x7ffe67f8feb4,558043014,0,0x0,8
tick,0x7ffe67f8feb4,558059050,0,0x0,8
tick,0x7ffe67f8feb4,558074292,0,0x0,8
tick,0x7ffe67f8feb4,558089450,0,0x0,8
tick,0x7ffe67f8feb4,558105531,0,0x0,8
tick,0x7ffe67f8feb4,558120937,0,0x0,8
tick,0x7ffe67f8feb4,558136818,0,0x0,8
tick,0x7ffe67f8feb4,558152150,0,0x0,8
tick,0x7ffe67f8feb4,558167447,0,0x0,8
tick,0x7ffe67f8feb4,558183150,0,0x0,8
tick,0x7ffe67f8feb4,558198445,0,0x0,8
tick,0x7ffe67f8feb4,558213937,0,0x0,8
tick,0x7ffe67f8feb4,558229721,0,0x0,8
tick,0x7ffe67f8feb4,558244342,0,0x0,8
tick,0x7ffe67f8feb4,558260008,0,0x0,8
tick,0x7ffe67f8feb4,558275392,0,0x0,8
tick,0x7ffe67f8feb4,558291174,0,0x0,8
tick,0x7ffe67f8feb4,558306372,0,0x0,8
tick,0x7ffe67f8feb4,558322194,0,0x0,8
tick,0x7ffe67f8feb4,558338225,0,0x0,8
tick,0x7ffe67f8feb4,558354181,0,0x0,8
tick,0x7ffe67f8feb4,558369140,0,0x0,8
tick,0x7ffe67f8feb4,558385115,0,0x0,8
tick,0x7ffe67f8feb4,558401170,0,0x0,8
tick,0x7ffe67f8feb4,558417143,0,0x0,8
tick,0x7ffe67f8feb4,558432133,0,0x0,8
tick,0x7ffe67f8feb4,558448129,0,0x0,8
tick,0x7ffe67f8feb4,558464119,0,0x0,8
tick,0x7ffe67f8feb4,558479141,0,0x0,8
tick,0x7ffe67f8feb4,558494108,0,0x0,8
tick,0x7ffe67f8feb4,558509402,0,0x0,8
tick,0x7ffe67f8feb4,558525135,0,0x0,8
tick,0x7ffe67f8feb4,558540342,0,0x0,8
tick,0x7ffe67f8feb4,558556114,0,0x0,8
tick,0x7ffe67f8feb4,558571115,0,0x0,8
tick,0x7ffe67f8feb4,558587175,0,0x0,8
tick,0x7ffe67f8feb4,558603513,0,0x0,8
tick,0x7ffe67f8feb4,558618525,0,0x0,8
tick,0x7ffe67f8feb4,558634102,0,0x0,8
tick,0x7ffe67f8feb4,558650146,0,0x0,8
tick,0x7ffe67f8feb4,558666082,0,0x0,8
tick,0x7ffe67f8feb4,558681853,0,0x0,8
tick,0x7ffe67f8feb4,558697036,0,0x0,8
tick,0x7ffe67f8feb4,558712080,0,0x0,8
tick,0x7ffe67f8feb4,558727540,0,0x0,8
tick,0x7ffe67f8feb4,558742942,0,0x0,8
tick,0x7ffe67f8feb4,558757780,0,0x0,8
tick,0x7ffe67f8feb4,558773120,0,0x0,8
tick,0x7ffe67f8feb4,558789033,0,0x0,8
tick,0x7ffe67f8feb4,558804951,0,0x0,8
tick,0x7ffe67f8feb4,558820434,0,0x0,8
tick,0x7ffe67f8feb4,558836022,0,0x0,8
tick,0x7ffe67f8feb4,558851181,0,0x0,8
tick,0x7ffe67f8feb4,558866892,0,0x0,8
tick,0x7ffe67f8feb4,558882473,0,0x0,8
tick,0x7ffe67f8feb4,558897147,0,0x0,8
tick,0x7ffe67f8feb4,558912112,0,0x0,8
tick,0x7ffe67f8feb4,558928089,0,0x0,8
tick,0x7ffe67f8feb4,558943770,0,0x0,8
tick,0x7ffe67f8feb4,558959043,0,0x0,8
tick,0x7ffe67f8feb4,558975089,0,0x0,8
tick,0x7ffe67f8feb4,558990540,0,0x0,8
tick,0x7ffe67f8feb4,559006096,0,0x0,8
tick,0x7ffe67f8feb4,559022170,0,0x0,8
tick,0x7ffe67f8feb4,559037236,0,0x0,8
tick,0x7ffe67f8feb4,559053203,0,0x0,8
tick,0x7ffe67f8feb4,559069114,0,0x0,8
tick,0x7ffe67f8feb4,559084256,0,0x0,8
tick,0x7ffe67f8feb4,559099362,0,0x0,8
tick,0x7ffe67f8feb4,559114568,0,0x0,8
tick,0x7ffe67f8feb4,559130646,0,0x0,8
tick,0x7ffe67f8feb4,559145741,0,0x0,8
tick,0x7ffe67f8feb4,559161802,0,0x0,8
tick,0x7ffe67f8feb4,559177926,0,0x0,8
tick,0x7ffe67f8feb4,559193074,0,0x0,8
tick,0x7ffe67f8feb4,559208886,0,0x0,8
tick,0x7ffe67f8feb4,559224013,0,0x0,8
tick,0x7ffe67f8feb4,559239925,0,0x0,8
tick,0x7ffe67f8feb4,559254893,0,0x0,8
tick,0x7ffe67f8feb4,559271071,0,0x0,8
tick,0x7ffe67f8feb4,559286897,0,0x0,8
tick,0x7ffe67f8feb4,559302882,0,0x0,8
tick,0x7ffe67f8feb4,559318900,0,0x0,8
tick,0x7ffe67f8feb4,559334089,0,0x0,8
tick,0x7ffe67f8feb4,559348925,0,0x0,8
tick,0x7ffe67f8feb4,559364966,0,0x0,8
tick,0x7ffe67f8feb4,559380938,0,0x0,8
tick,0x7ffe67f8feb4,559395957,0,0x0,8
tick,0x7ffe67f8feb4,559410892,0,0x0,8
tick,0x7ffe67f8feb4,559425917,0,0x0,8
tick,0x7ffe67f8feb4,559441921,0,0x0,8
tick,0x7ffe67f8feb4,559457893,0,0x0,8
tick,0x7ffe67f8feb4,559472915,0,0x0,8
tick,0x7ffe67f8feb4,559488935,0,0x0,8
tick,0x7ffe67f8feb4,559504939,0,0x0,8
tick,0x7ffe67f8feb4,559521317,0,0x0,8
tick,0x7ffe67f8feb4,559536543,0,0x0,8
tick,0x7ffe67f8feb4,559551479,0,0x0,8
tick,0x7ffe67f8feb4,559567537,0,0x0,8
tick,0x7ffe67f8feb4,559583073,0,0x0,8
tick,0x7ffe67f8feb4,559598483,0,0x0,8
tick,0x7ffe67f8feb4,559614087,0,0x0,8
tick,0x7ffe67f8feb4,559629494,0,0x0,8
tick,0x7ffe67f8feb4,559644752,0,0x0,8
tick,0x7ffe67f8feb4,559660497,0,0x0,8
tick,0x7ffe67f8feb4,559675651,0,0x0,8
tick,0x7ffe67f8feb4,559691731,0,0x0,8
tick,0x7ffe67f8feb4,559707733,0,0x0,8
tick,0x7ffe67f8feb4,559723645,0,0x0,8
tick,0x7ffe67f8feb4,559738654,0,0x0,8
tick,0x7ffe67f8feb4,559755107,0,0x0,8
tick,0x7ffe67f8feb4,559769664,0,0x0,8
tick,0x7ffe67f8feb4,559785263,0,0x0,8
tick,0x7ffe67f8feb4,559800439,0,0x0,8
tick,0x7ffe67f8feb4,559816362,0,0x0,8
tick,0x7ffe67f8feb4,559832364,0,0x0,8
tick,0x7ffe67f8feb4,559848257,0,0x0,8
tick,0x7ffe67f8feb4,559864112,0,0x0,8
tick,0x7ffe67f8feb4,559879254,0,0x0,8
tick,0x7ffe67f8feb4,559895283,0,0x0,8
tick,0x7ffe67f8feb4,559910441,0,0x0,8
tick,0x7ffe67f8feb4,559925567,0,0x0,8
tick,0x7ffe67f8feb4,559941330,0,0x0,8
tick,0x7ffe67f8feb4,559956268,0,0x0,8
tick,0x7ffe67f8feb4,559971660,0,0x0,8
tick,0x7ffe67f8feb4,559987518,0,0x0,8
tick,0x7ffe67f8feb4,560003107,0,0x0,8
tick,0x7ffe67f8feb4,560018121,0,0x0,8
tick,0x7ffe67f8feb4,560033348,0,0x0,8
tick,0x7ffe67f8feb4,560048866,0,0x0,8
tick,0x7ffe67f8feb4,560064255,0,0x0,8
tick,0x7ffe67f8feb4,560079915,0,0x0,8
tick,0x7ffe67f8feb4,560095257,0,0x0,8
tick,0x7ffe67f8feb4,560110657,0,0x0,8
tick,0x7ffe67f8feb4,560126316,0,0x0,8
tick,0x7ffe67f8feb4,560142118,0,0x0,8
tick,0x7ffe67f8feb4,560158057,0,0x0,8
tick,0x7ffe67f8feb4,560172874,0,0x0,8
tick,0x7ffe67f8feb4,560188314,0,0x0,8
tick,0x7ffe67f8feb4,560203358,0,0x0,8
tick,0x7ffe67f8feb4,560219622,0,0x0,8
tick,0x7ffe67f8feb4,560235301,0,0x0,8
tick,0x7ffe67f8feb4,560250648,0,0x0,8
tick,0x7ffe67f8feb4,560265715,0,0x0,8
tick,0x7ffe67f8feb4,560281381,0,0x0,8
tick,0x7ffe67f8feb4,560296508,0,0x0,8
tick,0x7ffe67f8feb4,560311774,0,0x0,8
tick,0x7ffe67f8feb4,560327434,0,0x0,8
tick,0x7ffe67f8feb4,560343350,0,0x0,8
tick,0x7ffe67f8feb4,560358530,0,0x0,8
tick,0x7ffe67f8feb4,560374157,0,0x0,8
tick,0x7ffe67f8feb4,560390127,0,0x0,8
tick,0x7ffe67f8feb4,560406406,0,0x0,8
tick,0x7ffe67f8feb4,560422128,0,0x0,8
tick,0x7ffe67f8feb4,560438103,0,0x0,8
tick,0x7ffe67f8feb4,560454154,0,0x0,8
tick,0x7ffe67f8feb4,560470084,0,0x0,8
tick,0x7ffe67f8feb4,560486095,0,0x0,8
tick,0x7ffe67f8feb4,560502103,0,0x0,8
tick,0x7ffe67f8feb4,560518100,0,0x0,8
tick,0x7ffe67f8feb4,560533106,0,0x0,8
tick,0x7ffe67f8feb4,560548115,0,0x0,8
tick,0x7ffe67f8feb4,560564106,0,0x0,8
tick,0x7ffe67f8feb4,560579103,0,0x0,8
tick,0x7ffe67f8feb4,560594184,0,0x0,8
tick,0x7ffe67f8feb4,560609117,0,0x0,8
tick,0x7ffe67f8feb4,560625188,0,0x0,8
tick,0x7ffe67f8feb4,560640116,0,0x0,8
tick,0x7ffe67f8feb4,560655339,0,0x0,8
tick,0x7ffe67f8feb4,560670205,0,0x0,8
tick,0x7ffe67f8feb4,560685494,0,0x0,8
tick,0x7ffe67f8feb4,560700644,0,0x0,8
tick,0x7ffe67f8feb4,560716320,0,0x0,8
tick,0x7ffe67f8feb4,560731552,0,0x0,8
tick,0x7ffe67f8feb4,560747263,0,0x0,8
tick,0x7ffe67f8feb4,560763112,0,0x0,8
tick,0x7ffe67f8feb4,560779119,0,0x0,8
tick,0x7ffe67f8feb4,560794245,0,0x0,8
tick,0x7ffe67f8feb4,560810157,0,0x0,8
tick,0x7ffe67f8feb4,560825683,0,0x0,8
tick,0x7ffe67f8feb4,560841123,0,0x0,8
tick,0x7ffe67f8feb4,560857115,0,0x0,8
tick,0x7ffe67f8feb4,560873147,0,0x0,8
tick,0x7ffe67f8feb4,560889259,0,0x0,8
tick,0x7ffe67f8feb4,560904284,0,0x0,8
tick,0x7ffe67f8feb4,560920214,0,0x0,8
tick,0x7ffe67f8feb4,560935281,0,0x0,8
tick,0x7ffe67f8feb4,560951247,0,0x0,8
tick,0x7ffe67f8feb4,560966511,0,0x0,8
tick,0x7ffe67f8feb4,560981479,0,0x0,8
tick,0x7ffe67f8feb4,560997263,0,0x0,8
tick,0x7ffe67f8feb4,561013343,0,0x0,8
tick,0x7ffe67f8feb4,561028648,0,0x0,8
tick,0x7ffe67f8feb4,561044352,0,0x0,8
tick,0x7ffe67f8feb4,561060448,0,0x0,8
tick,0x7ffe67f8feb4,561076684,0,0x0,8
tick,0x7ffe67f8feb4,561092203,0,0x0,8
tick,0x7ffe67f8feb4,561108244,0,0x0,8
tick,0x7ffe67f8feb4,561123631,0,0x0,8
tick,0x7ffe67f8feb4,561138568,0,0x0,8
tick,0x7ffe67f8feb4,561154456,0,0x0,8
tick,0x7ffe67f8feb4,561169607,0,0x0,8
tick,0x7ffe67f8feb4,561185541,0,0x0,8
tick,0x7ffe67f8feb4,561201323,0,0x0,8
tick,0x7ffe67f8feb4,561216586,0,0x0,8
tick,0x7ffe67f8feb4,561231903,0,0x0,8
tick,0x7ffe67f8feb4,561247782,0,0x0,8
tick,0x7ffe67f8feb4,561263236,0,0x0,8
tick,0x7ffe67f8feb4,561278858,0,0x0,8
tick,0x7ffe67f8feb4,561294206,0,0x0,8
tick,0x7ffe67f8feb4,561309520,0,0x0,8
tick,0x7ffe67f8feb4,561325187,0,0x0,8
tick,0x7ffe67f8feb4,561341216,0,0x0,8
tick,0x7ffe67f8feb4,561357218,0,0x0,8
tick,0x7ffe67f8feb4,561372559,0,0x0,8
tick,0x7ffe67f8feb4,561388326,0,0x0,8
tick,0x7ffe67f8feb4,561404318,0,0x0,8
tick,0x7ffe67f8feb4,561420272,0,0x0,8
tick,0x7ffe67f8feb4,561435290,0,0x0,8
tick,0x7ffe67f8feb4,561451286,0,0x0,8
tick,0x7ffe67f8feb4,561467275,0,0x0,8
tick,0x7ffe67f8feb4,561483405,0,0x0,8
tick,0x7ffe67f8feb4,561499283,0,0x0,8
tick,0x7ffe67f8feb4,561515236,0,0x0,8
tick,0x7ffe67f8feb4,561530538,0,0x0,8
tick,0x7ffe67f8feb4,561545585,0,0x0,8
tick,0x7ffe67f8feb4,561561100,0,0x0,8
tick,0x7ffe67f8feb4,561576280,0,0x0,8
tick,0x7ffe67f8feb4,561591555,0,0x0,8
tick,0x7ffe67f8feb4,561607590,0,0x0,8
tick,0x7ffe67f8feb4,561623396,0,0x0,8
tick,0x7ffe67f8feb4,561639172,0,0x0,8
tick,0x7ffe67f8feb4,561655290,0,0x0,8
tick,0x7ffe67f8feb4,561670354,0,0x0,8
tick,0x7ffe67f8feb4,561685666,0,0x0,8
tick,0x7ffe67f8feb4,561700828,0,0x0,8
tick,0x7ffe67f8feb4,561716313,0,0x0,8
tick,0x7ffe67f8feb4,561732431,0,0x0,8
tick,0x7ffe67f8feb4,561748291,0,0x0,8
tick,0x7ffe67f8feb4,561764195,0,0x0,8
tick,0x7ffe67f8feb4,561779869,0,0x0,8
tick,0x7ffe67f8feb4,561795304,0,0x0,8
tick,0x7ffe67f8feb4,561810800,0,0x0,8
tick,0x7ffe67f8feb4,561826209,0,0x0,8
tick,0x7ffe67f8feb4,561841293,0,0x0,8
tick,0x7ffe67f8feb4,561857290,0,0x0,8
tick,0x7ffe67f8feb4,561873511,0,0x0,8
tick,0x7ffe67f8feb4,561888297,0,0x0,8
tick,0x7ffe67f8feb4,561903250,0,0x0,8
tick,0x7ffe67f8feb4,561918378,0,0x0,8
tick,0x7ffe67f8feb4,561934175,0,0x0,8
tick,0x7ffe67f8feb4,561949475,0,0x0,8
tick,0x7ffe67f8feb4,561965286,0,0x0,8
tick,0x7ffe67f8feb4,561980454,0,0x0,8
tick,0x7ffe67f8feb4,561996583,0,0x0,8
tick,0x7ffe67f8feb4,562012341,0,0x0,8
tick,0x7ffe67f8feb4,562027376,0,0x0,8
tick,0x7ffe67f8feb4,562043282,0,0x0,8
tick,0x7ffe67f8feb4,562058360,0,0x0,8
tick,0x7ffe67f8feb4,562073843,0,0x0,8
tick,0x7ffe67f8feb4,562089826,0,0x0,8
tick,0x7ffe67f8feb4,562105641,0,0x0,8
tick,0x7ffe67f8feb4,562121620,0,0x0,8
tick,0x7ffe67f8feb4,562137250,0,0x0,8
tick,0x7ffe67f8feb4,562152391,0,0x0,8
tick,0x7ffe67f8feb4,562167573,0,0x0,8
tick,0x7ffe67f8feb4,562183401,0,0x0,8
tick,0x7ffe67f8feb4,562198680,0,0x0,8
tick,0x7ffe67f8feb4,562214280,0,0x0,8
tick,0x7ffe67f8feb4,562229806,0,0x0,8
tick,0x7ffe67f8feb4,562245352,0,0x0,8
tick,0x7ffe67f8feb4,562260411,0,0x0,8
tick,0x7ffe67f8feb4,562276542,0,0x0,8
tick,0x7ffe67f8feb4,562292500,0,0x0,8
tick,0x7ffe67f8feb4,562308522,0,0x0,8
tick,0x7ffe67f8feb4,562324559,0,0x0,8
tick,0x7ffe67f8feb4,562340685,0,0x0,8
tick,0x7ffe67f8feb4,562356392,0,0x0,8
tick,0x7ffe67f8feb4,562371756,0,0x0,8
tick,0x7ffe67f8feb4,562387521,0,0x0,8
tick,0x7ffe67f8feb4,562403660,0,0x0,8
tick,0x7ffe67f8feb4,562419606,0,0x0,8
tick,0x7ffe67f8feb4,562435589,0,0x0,8
tick,0x7ffe67f8feb4,562450605,0,0x0,8
tick,0x7ffe67f8feb4,562466591,0,0x0,8
tick,0x7ffe67f8feb4,562482603,0,0x0,8
tick,0x7ffe67f8feb4,562498579,0,0x0,8
tick,0x7ffe67f8feb4,562514596,0,0x0,8
tick,0x7ffe67f8feb4,562529762,0,0x0,8
tick,0x7ffe67f8feb4,562545298,0,0x0,8
tick,0x7ffe67f8feb4,562560421,0,0x0,8
tick,0x7ffe67f8feb4,562575748,0,0x0,8
tick,0x7ffe67f8feb4,562590845,0,0x0,8
tick,0x7ffe67f8feb4,562605797,0,0x0,8
tick,0x7ffe67f8feb4,562621798,0,0x0,8
tick,0x7ffe67f8feb4,562636809,0,0x0,8
tick,0x7ffe67f8feb4,562652150,0,0x0,8
tick,0x7ffe67f8feb4,562668178,0,0x0,8
tick,0x7ffe67f8feb4,562684159,0,0x0,8
tick,0x7ffe67f8feb4,562699900,0,0x0,8
tick,0x7ffe67f8feb4,562715261,0,0x0,8
tick,0x7ffe67f8feb4,562730823,0,0x0,8
tick,0x7ffe67f8feb4,562746281,0,0x0,8
tick,0x7ffe67f8feb4,562761976,0,0x0,8
tick,0x7ffe67f8feb4,562777203,0,0x0,8
tick,0x7ffe67f8feb4,562793293,0,0x0,8
tick,0x7ffe67f8feb4,562808489,0,0x0,8
tick,0x7ffe67f8feb4,562824542,0,0x0,8
tick,0x7ffe67f8feb4,562841090,0,0x0,8
tick,0x7ffe67f8feb4,562856319,0,0x0,8
tick,0x7ffe67f8feb4,562871853,0,0x0,8
tick,0x7ffe67f8feb4,562887350,0,0x0,8
tick,0x7ffe67f8feb4,562903262,0,0x0,8
tick,0x7ffe67f8feb4,562918414,0,0x0,8
tick,0x7ffe67f8feb4,562934195,0,0x0,8
tick,0x7ffe67f8feb4,562950049,0,0x0,8
tick,0x7ffe67f8feb4,562965412,0,0x0,8
tick,0x7ffe67f8feb4,562981005,0,0x0,8
tick,0x7ffe67f8feb4,562996503,0,0x0,8
tick,0x7ffe67f8feb4,563012043,0,0x0,8
tick,0x7ffe67f8feb4,563027405,0,0x0,8
tick,0x7ffe67f8feb4,563043375,0,0x0,8
tick,0x7ffe67f8feb4,563059376,0,0x0,8
tick,0x7ffe67f8feb4,563075761,0,0x0,8
tick,0x7ffe67f8feb4,563090633,0,0x0,8
tick,0x7ffe67f8feb4,563105632,0,0x0,8
tick,0x7ffe67f8feb4,563121096,0,0x0,8
tick,0x7ffe67f8feb4,563136575,0,0x0,8
tick,0x7ffe67f8feb4,563151824,0,0x0,8
tick,0x7ffe67f8feb4,563167582,0,0x0,8
tick,0x7ffe67f8feb4,563182429,0,0x0,8
tick,0x7ffe67f8feb4,563197662,0,0x0,8
tick,0x7ffe67f8feb4,563213303,0,0x0,8
tick,0x7ffe67f8feb4,563228546,0,0x0,8
tick,0x7ffe67f8feb4,563243692,0,0x0,8
tick,0x7ffe67f8feb4,563259783,0,0x0,8
tick,0x7ffe67f8feb4,563275818,0,0x0,8
tick,0x7ffe67f8feb4,563291638,0,0x0,8
tick,0x7ffe67f8feb4,563306813,0,0x0,8
tick,0x7ffe67f8feb4,563322330,0,0x0,8
tick,0x7ffe67f8feb4,563337894,0,0x0,8
tick,0x7ffe67f8feb4,563353213,0,0x0,8
tick,0x7ffe67f8feb4,563368646,0,0x0,8
tick,0x7ffe67f8feb4,563384207,0,0x0,8
tick,0x7ffe67f8feb4,563400233,0,0x0,8
tick,0x7ffe67f8feb4,563415308,0,0x0,8
tick,0x7ffe67f8feb4,563431333,0,0x0,8
tick,0x7ffe67f8feb4,563447361,0,0x0,8
tick,0x7ffe67f8feb4,563463308,0,0x0,8
tick,0x7ffe67f8feb4,563479311,0,0x0,8
tick,0x7ffe67f8feb4,563495300,0,0x0,8
tick,0x7ffe67f8feb4,563511298,0,0x0,8
tick,0x7ffe67f8feb4,563527316,0,0x0,8
tick,0x7ffe67f8feb4,563543579,0,0x0,8
tick,0x7ffe67f8feb4,563558281,0,0x0,8
tick,0x7ffe67f8feb4,563573347,0,0x0,8
tick,0x7ffe67f8feb4,563588322,0,0x0,8
tick,0x7ffe67f8feb4,563604298,0,0x0,8
tick,0x7ffe67f8feb4,563620303,0,0x0,8
tick,0x7ffe67f8feb4,563636301,0,0x0,8
tick,0x7ffe67f8feb4,563651263,0,0x0,8
tick,0x7ffe67f8feb4,563666309,0,0x0,8
tick,0x7ffe67f8feb4,563681309,0,0x0,8
tick,0x7ffe67f8feb4,563696502,0,0x0,8
tick,0x7ffe67f8feb4,563712164,0,0x0,8
tick,0x7ffe67f8feb4,563728146,0,0x0,8
tick,0x7ffe67f8feb4,563744233,0,0x0,8
tick,0x7ffe67f8feb4,563759176,0,0x0,8
tick,0x7ffe67f8feb4,563775537,0,0x0,8
tick,0x7ffe67f8feb4,563791272,0,0x0,8
tick,0x7ffe67f8feb4,563806310,0,0x0,8
tick,0x7ffe67f8feb4,563822164,0,0x0,8
tick,0x7ffe67f8feb4,563838207,0,0x0,8
tick,0x7ffe67f8feb4,563853162,0,0x0,8
tick,0x7ffe67f8feb4,563869344,0,0x0,8
tick,0x7ffe67f8feb4,563884149,0,0x0,8
tick,0x7ffe67f8feb4,563900160,0,0x0,8
tick,0x7ffe67f8feb4,563916252,0,0x0,8
tick,0x7ffe67f8feb4,563932216,0,0x0,8
tick,0x7ffe67f8feb4,563948180,0,0x0,8
tick,0x7ffe67f8feb4,563964599,0,0x0,8
tick,0x7ffe67f8feb4,563979269,0,0x0,8
tick,0x7ffe67f8feb4,563994342,0,0x0,8
tick,0x7ffe67f8feb4,564011195,0,0x0,8
tick,0x7ffe67f8feb4,564026350,0,0x0,8
tick,0x7ffe67f8feb4,564041326,0,0x0,8
tick,0x7ffe67f8feb4,564057323,0,0x0,8
tick,0x7ffe67f8feb4,564072170,0,0x0,8
tick,0x7ffe67f8feb4,564087289,0,0x0,8
tick,0x7ffe67f8feb4,564103366,0,0x0,8
tick,0x7ffe67f8feb4,564119310,0,0x0,8
tick,0x7ffe67f8feb4,564135263,0,0x0,8
tick,0x7ffe67f8feb4,564150289,0,0x0,8
tick,0x7ffe67f8feb4,564165752,0,0x0,8
tick,0x7ffe67f8feb4,564181168,0,0x0,8
tick,0x7ffe67f8feb4,564197152,0,0x0,8
tick,0x7ffe67f8feb4,564213147,0,0x0,8
tick,0x7ffe67f8feb4,564229158,0,0x0,8
tick,0x7ffe67f8feb4,564244134,0,0x0,8
tick,0x7ffe67f8feb4,564259395,0,0x0,8
tick,0x7ffe67f8feb4,564275306,0,0x0,8
tick,0x7ffe67f8feb4,564291366,0,0x0,8
tick,0x7ffe67f8feb4,564307315,0,0x0,8
tick,0x7ffe67f8feb4,564323121,0,0x0,8
tick,0x7ffe67f8feb4,564339161,0,0x0,8
tick,0x7ffe67f8feb4,564354268,0,0x0,8
tick,0x7ffe67f8feb4,564370156,0,0x0,8
tick,0x7ffe67f8feb4,564385359,0,0x0,8
tick,0x7ffe67f8feb4,564400599,0,0x0,8
tick,0x7ffe67f8feb4,564416295,0,0x0,8
tick,0x7ffe67f8feb4,564432276,0,0x0,8
tick,0x7ffe67f8feb4,564447337,0,0x0,8
tick,0x7ffe67f8feb4,564463332,0,0x0,8
tick,0x7ffe67f8feb4,564479272,0,0x0,8
tick,0x7ffe67f8feb4,564495294,0,0x0,8
tick,0x7ffe67f8feb4,564511281,0,0x0,8
tick,0x7ffe67f8feb4,564527309,0,0x0,8
tick,0x7ffe67f8feb4,564542142,0,0x0,8
tick,0x7ffe67f8feb4,564557286,0,0x0,8
tick,0x7ffe67f8feb4,564573113,0,0x0,8
tick,0x7ffe67f8feb4,564588135,0,0x0,8
tick,0x7ffe67f8feb4,564603291,0,0x0,8
tick,0x7ffe67f8feb4,564618172,0,0x0,8
tick,0x7ffe67f8feb4,564634125,0,0x0,8
tick,0x7ffe67f8feb4,564650120,0,0x0,8
tick,0x7ffe67f8feb4,564666183,0,0x0,8
tick,0x7ffe67f8feb4,564681465,0,0x0,8
tick,0x7ffe67f8feb4,564697167,0,0x0,8
tick,0x7ffe67f8feb4,564713149,0,0x0,8
tick,0x7ffe67f8feb4,564728238,0,0x0,8
tick,0x7ffe67f8feb4,564744116,0,0x0,8
tick,0x7ffe67f8feb4,564759909,0,0x0,8
tick,0x7ffe67f8feb4,564775408,0,0x0,8
tick,0x7ffe67f8feb4,564791418,0,0x0,8
tick,0x7ffe67f8feb4,564807432,0,0x0,8
tick,0x7ffe67f8feb4,564823118,0,0x0,8
tick,0x7ffe67f8feb4,564838140,0,0x0,8
tick,0x7ffe67f8feb4,564853311,0,0x0,8
tick,0x7ffe67f8feb4,564869143,0,0x0,8
tick,0x7ffe67f8feb4,564884275,0,0x0,8
tick,0x7ffe67f8feb4,564900166,0,0x0,8
tick,0x7ffe67f8feb4,564916142,0,0x0,8
tick,0x7ffe67f8feb4,564932163,0,0x0,8
tick,0x7ffe67f8feb4,564947400,0,0x0,8
tick,0x7ffe67f8feb4,564962206,0,0x0,8
tick,0x7ffe67f8feb4,564978225,0,0x0,8
tick,0x7ffe67f8feb4,564993478,0,0x0,8
tick,0x7ffe67f8feb4,565009687,0,0x0,8
tick,0x7ffe67f8feb4,565025325,0,0x0,8
tick,0x7ffe67f8feb4,565041025,0,0x0,8
tick,0x7ffe67f8feb4,565056583,0,0x0,8
tick,0x7ffe67f8feb4,565071697,0,0x0,8
tick,0x7ffe67f8feb4,565087597,0,0x0,8
tick,0x7ffe67f8feb4,565103211,0,0x0,8
tick,0x7ffe67f8feb4,565118640,0,0x0,8
tick,0x7ffe67f8feb4,565134204,0,0x0,8
tick,0x7ffe67f8feb4,565150222,0,0x0,8
tick,0x7ffe67f8feb4,565165699,0,0x0,8
tick,0x7ffe67f8feb4,565181413,0,0x0,8
tick,0x7ffe67f8feb4,565196260,0,0x0,8
tick,0x7ffe67f8feb4,565212225,0,0x0,8
tick,0x7ffe67f8feb4,565228292,0,0x0,8
tick,0x7ffe67f8feb4,565244195,0,0x0,8
tick,0x7ffe67f8feb4,565260234,0,0x0,8
tick,0x7ffe67f8feb4,565275346,0,0x0,8
tick,0x7ffe67f8feb4,565290552,0,0x0,8
tick,0x7ffe67f8feb4,565306281,0,0x0,8
tick,0x7ffe67f8feb4,565321307,0,0x0,8
tick,0x7ffe67f8feb4,565336427,0,0x0,8
tick,0x7ffe67f8feb4,565352246,0,0x0,8
tick,0x7ffe67f8feb4,565367931,0,0x0,8
tick,0x7ffe67f8feb4,565383178,0,0x0,8
tick,0x7ffe67f8feb4,565399183,0,0x0,8
tick,0x7ffe67f8feb4,565414249,0,0x0,8
tick,0x7ffe67f8feb4,565430304,0,0x0,8
tick,0x7ffe67f8feb4,565446315,0,0x0,8
tick,0x7ffe67f8feb4,565462280,0,0x0,8
tick,0x7ffe67f8feb4,565477289,0,0x0,8
tick,0x7ffe67f8feb4,565493273,0,0x0,8
tick,0x7ffe67f8feb4,565509254,0,0x0,8
tick,0x7ffe67f8feb4,565525247,0,0x0,8
tick,0x7ffe67f8feb4,565541256,0,0x0,8
tick,0x7ffe67f8feb4,565557281,0,0x0,8
tick,0x7ffe67f8feb4,565573122,0,0x0,8
tick,0x7ffe67f8feb4,565588269,0,0x0,8
tick,0x7ffe67f8feb4,565604152,0,0x0,8
tick,0x7ffe67f8feb4,565619286,0,0x0,8
tick,0x7ffe67f8feb4,565635352,0,0x0,8
tick,0x7ffe67f8feb4,565651295,0,0x0,8
tick,0x7ffe67f8feb4,565667369,0,0x0,8
tick,0x7ffe67f8feb4,565683145,0,0x0,8
tick,0x7ffe67f8feb4,565698528,0,0x0,8
tick,0x7ffe67f8feb4,565714982,0,0x0,8
tick,0x7ffe67f8feb4,565730470,0,0x0,8
tick,0x7ffe67f8feb4,565746342,0,0x0,8
tick,0x7ffe67f8feb4,565761749,0,0x0,8
tick,0x7ffe67f8feb4,565777459,0,0x0,8
tick,0x7ffe67f8feb4,565793179,0,0x0,8
tick,0x7ffe67f8feb4,565809202,0,0x0,8
tick,0x7ffe67f8feb4,565824384,0,0x0,8
tick,0x7ffe67f8feb4,565839802,0,0x0,8
tick,0x7ffe67f8feb4,565855384,0,0x0,8
tick,0x7ffe67f8feb4,565870506,0,0x0,8
tick,0x7ffe67f8feb4,565886643,0,0x0,8
tick,0x7ffe67f8feb4,565902425,0,0x0,8
tick,0x7ffe67f8feb4,565917725,0,0x0,8
tick,0x7ffe67f8feb4,565933386,0,0x0,8
tick,0x7ffe67f8feb4,565948718,0,0x0,8
tick,0x7ffe67f8feb4,565964311,0,0x0,8
tick,0x7ffe67f8feb4,565980378,0,0x0,8
tick,0x7ffe67f8feb4,565996366,0,0x0,8
tick,0x7ffe67f8feb4,566012443,0,0x0,8
tick,0x7ffe67f8feb4,566028464,0,0x0,8
tick,0x7ffe67f8feb4,566043540,0,0x0,8
tick,0x7ffe67f8feb4,566059476,0,0x0,8
tick,0x7ffe67f8feb4,566075389,0,0x0,8
tick,0x7ffe67f8feb4,566090904,0,0x0,8
tick,0x7ffe67f8feb4,566106004,0,0x0,8
tick,0x7ffe67f8feb4,566121468,0,0x0,8
tick,0x7ffe67f8feb4,566136634,0,0x0,8
tick,0x7ffe67f8feb4,566152148,0,0x0,8
tick,0x7ffe67f8feb4,566167851,0,0x0,8
tick,0x7ffe67f8feb4,566183240,0,0x0,8
tick,0x7ffe67f8feb4,566199321,0,0x0,8
tick,0x7ffe67f8feb4,566215666,0,0x0,8
tick,0x7ffe67f8feb4,566231108,0,0x0,8
tick,0x7ffe67f8feb4,566246419,0,0x0,8
tick,0x7ffe67f8feb4,566262453,0,0x0,8
tick,0x7ffe67f8feb4,566277972,0,0x0,8
tick,0x7ffe67f8feb4,566293279,0,0x0,8
tick,0x7ffe67f8feb4,566309297,0,0x0,8
tick,0x7ffe67f8feb4,566325344,0,0x0,8
tick,0x7ffe67f8feb4,566340502,0,0x0,8
tick,0x7ffe67f8feb4,566355664,0,0x0,8
tick,0x7ffe67f8feb4,566373497,0,0x0,8
tick,0x7ffe67f8feb4,566388783,0,0x0,8
tick,0x7ffe67f8feb4,566404181,0,0x0,8
tick,0x7ffe67f8feb4,566420188,0,0x0,8
tick,0x7ffe67f8feb4,566435653,0,0x0,8
tick,0x7ffe67f8feb4,566451700,0,0x0,8
tick,0x7ffe67f8feb4,566467331,0,0x0,8
tick,0x7ffe67f8feb4,566483352,0,0x0,8
tick,0x7ffe67f8feb4,566499342,0,0x0,8
tick,0x7ffe67f8feb4,566515394,0,0x0,8
tick,0x7ffe67f8feb4,566531350,0,0x0,8
tick,0x7ffe67f8feb4,566547353,0,0x0,8
tick,0x7ffe67f8feb4,566563406,0,0x0,8
tick,0x7ffe67f8feb4,566579368,0,0x0,8
tick,0x7ffe67f8feb4,566595384,0,0x0,8
tick,0x7ffe67f8feb4,566611454,0,0x0,8
tick,0x7ffe67f8feb4,566626252,0,0x0,8
tick,0x7ffe67f8feb4,566641454,0,0x0,8
tick,0x7ffe67f8feb4,566657149,0,0x0,8
tick,0x7ffe67f8feb4,566673192,0,0x0,8
tick,0x7ffe67f8feb4,566689184,0,0x0,8
tick,0x7ffe67f8feb4,566704280,0,0x0,8
tick,0x7ffe67f8feb4,566719588,0,0x0,8
tick,0x7ffe67f8feb4,566735598,0,0x0,8
tick,0x7ffe67f8feb4,566751607,0,0x0,8
tick,0x7ffe67f8feb4,566766960,0,0x0,8
tick,0x7ffe67f8feb4,566782177,0,0x0,8
tick,0x7ffe67f8feb4,566796867,0,0x0,8
tick,0x7ffe67f8feb4,566812857,0,0x0,8
tick,0x7ffe67f8feb4,566828978,0,0x0,8
tick,0x7ffe67f8feb4,566843982,0,0x0,8
tick,0x7ffe67f8feb4,566860010,0,0x0,8
tick,0x7ffe67f8feb4,566876083,0,0x0,8
tick,0x7ffe67f8feb4,566891215,0,0x0,8
tick,0x7ffe67f8feb4,566907035,0,0x0,8
tick,0x7ffe67f8feb4,566923151,0,0x0,8
tick,0x7ffe67f8feb4,566938133,0,0x0,8
tick,0x7ffe67f8feb4,566953257,0,0x0,8
tick,0x7ffe67f8feb4,566968632,0,0x0,8
tick,0x7ffe67f8feb4,566984006,0,0x0,8
tick,0x7ffe67f8feb4,566999608,0,0x0,8
tick,0x7ffe67f8feb4,567015639,0,0x0,8
tick,0x7ffe67f8feb4,567031640,0,0x0,8
tick,0x7ffe67f8feb4,567047595,0,0x0,8
tick,0x7ffe67f8feb4,567063616,0,0x0,8
tick,0x7ffe67f8feb4,567078772,0,0x0,8
tick,0x7ffe67f8feb4,567094139,0,0x0,8
tick,0x7ffe67f8feb4,567109300,0,0x0,8
tick,0x7ffe67f8feb4,567124241,0,0x0,8
tick,0x7ffe67f8feb4,567140218,0,0x0,8
tick,0x7ffe67f8feb4,567155435,0,0x0,8
tick,0x7ffe67f8feb4,567170292,0,0x0,8
tick,0x7ffe67f8feb4,567185505,0,0x0,8
tick,0x7ffe67f8feb4,567201593,0,0x0,8
tick,0x7ffe67f8feb4,567216777,0,0x0,8
tick,0x7ffe67f8feb4,567231962,0,0x0,8
tick,0x7ffe67f8feb4,567247201,0,0x0,8
tick,0x7ffe67f8feb4,567264629,0,0x0,8
tick,0x7ffe67f8feb4,567279332,0,0x0,8
tick,0x7ffe67f8feb4,567294203,0,0x0,8
tick,0x7ffe67f8feb4,567309770,0,0x0,8
tick,0x7ffe67f8feb4,567325285,0,0x0,8
tick,0x7ffe67f8feb4,567340760,0,0x0,8
tick,0x7ffe67f8feb4,567356773,0,0x0,8
tick,0x7ffe67f8feb4,567371767,0,0x0,8
tick,0x7ffe67f8feb4,567387805,0,0x0,8
tick,0x7ffe67f8feb4,567403150,0,0x0,8
tick,0x7ffe67f8feb4,567419204,0,0x0,8
tick,0x7ffe67f8feb4,567434358,0,0x0,8
tick,0x7ffe67f8feb4,567450040,0,0x0,8
tick,0x7ffe67f8feb4,567466011,0,0x0,8
tick,0x7ffe67f8feb4,567482051,0,0x0,8
tick,0x7ffe67f8feb4,567498032,0,0x0,8
tick,0x7ffe67f8feb4,567514302,0,0x0,8
tick,0x7ffe67f8feb4,567530678,0,0x0,8
tick,0x7ffe67f8feb4,567546762,0,0x0,8
tick,0x7ffe67f8feb4,567562032,0,0x0,8
tick,0x7ffe67f8feb4,567578084,0,0x0,8
tick,0x7ffe67f8feb4,567593117,0,0x0,8
tick,0x7ffe67f8feb4,567609009,0,0x0,8
tick,0x7ffe67f8feb4,567624189,0,0x0,8
tick,0x7ffe67f8feb4,567640160,0,0x0,8
tick,0x7ffe67f8feb4,567655295,0,0x0,8
tick,0x7ffe67f8feb4,567671188,0,0x0,8
tick,0x7ffe67f8feb4,567686475,0,0x0,8
tick,0x7ffe67f8feb4,567702113,0,0x0,8
tick,0x7ffe67f8feb4,567718143,0,0x0,8
tick,0x7ffe67f8feb4,567733318,0,0x0,8
tick,0x7ffe67f8feb4,567749164,0,0x0,8
tick,0x7ffe67f8feb4,567764956,0,0x0,8
tick,0x7ffe67f8feb4,567780898,0,0x0,8
tick,0x7ffe67f8feb4,567796967,0,0x0,8
tick,0x7ffe67f8feb4,567811954,0,0x0,8
tick,0x7ffe67f8feb4,567827860,0,0x0,8
tick,0x7ffe67f8feb4,567843111,0,0x0,8
tick,0x7ffe67f8feb4,567858914,0,0x0,8
tick,0x7ffe67f8feb4,567874156,0,0x0,8
tick,0x7ffe67f8feb4,567889903,0,0x0,8
tick,0x7ffe67f8feb4,567905218,0,0x0,8
tick,0x7ffe67f8feb4,567919906,0,0x0,8
tick,0x7ffe67f8feb4,567935392,0,0x0,8
tick,0x7ffe67f8feb4,567950947,0,0x0,8
tick,0x7ffe67f8feb4,567967041,0,0x0,8
tick,0x7ffe67f8feb4,567982998,0,0x0,8
tick,0x7ffe67f8feb4,567998948,0,0x0,8
tick,0x7ffe67f8feb4,568014149,0,0x0,8
tick,0x7ffe67f8feb4,568030025,0,0x0,8
tick,0x7ffe67f8feb4,568045166,0,0x0,8
tick,0x7ffe67f8feb4,568060891,0,0x0,8
tick,0x7ffe67f8feb4,568076970,0,0x0,8
tick,0x7ffe67f8feb4,568092993,0,0x0,8
tick,0x7ffe67f8feb4,568108874,0,0x0,8
tick,0x7ffe67f8feb4,568124130,0,0x0,8
tick,0x7ffe67f8feb4,568139906,0,0x0,8
tick,0x7ffe67f8feb4,568154897,0,0x0,8
tick,0x7ffe67f8feb4,568170184,0,0x0,8
tick,0x7ffe67f8feb4,568185288,0,0x0,8
tick,0x7ffe67f8feb4,568201292,0,0x0,8
tick,0x7ffe67f8feb4,568217295,0,0x0,8
tick,0x7ffe67f8feb4,568233133,0,0x0,8
tick,0x7ffe67f8feb4,568248769,0,0x0,8
tick,0x7ffe67f8feb4,568264126,0,0x0,8
tick,0x7ffe67f8feb4,568280142,0,0x0,8
tick,0x7ffe67f8feb4,568296277,0,0x0,8
tick,0x7ffe67f8feb4,568312369,0,0x0,8
tick,0x7ffe67f8feb4,568327423,0,0x0,8
tick,0x7ffe67f8feb4,568343144,0,0x0,8
tick,0x7ffe67f8feb4,568359174,0,0x0,8
tick,0x7ffe67f8feb4,568375281,0,0x0,8
tick,0x7ffe67f8feb4,568390524,0,0x0,8
tick,0x7ffe67f8feb4,568406359,0,0x0,8
tick,0x7ffe67f8feb4,568421857,0,0x0,8
tick,0x7ffe67f8feb4,568437115,0,0x0,8
tick,0x7ffe67f8feb4,568452358,0,0x0,8
tick,0x7ffe67f8feb4,568467441,0,0x0,8
tick,0x7ffe67f8feb4,568483353,0,0x0,8
tick,0x7ffe67f8feb4,568499378,0,0x0,8
tick,0x7ffe67f8feb4,568515342,0,0x0,8
tick,0x7ffe67f8feb4,568531304,0,0x0,8
tick,0x7ffe67f8feb4,568547355,0,0x0,8
tick,0x7ffe67f8feb4,568562328,0,0x0,8
tick,0x7ffe67f8feb4,568577286,0,0x0,8
tick,0x7ffe67f8feb4,568593136,0,0x0,8
tick,0x7ffe67f8feb4,568609153,0,0x0,8
tick,0x7ffe67f8feb4,568624139,0,0x0,8
tick,0x7ffe67f8feb4,568639188,0,0x0,8
tick,0x7ffe67f8feb4,568655276,0,0x0,8
tick,0x7ffe67f8feb4,568671283,0,0x0,8
tick,0x7ffe67f8feb4,568686332,0,0x0,8
tick,0x7ffe67f8feb4,568702545,0,0x0,8
tick,0x7ffe67f8feb4,568718277,0,0x0,8
tick,0x7ffe67f8feb4,568734290,0,0x0,8
tick,0x7ffe67f8feb4,568750277,0,0x0,8
tick,0x7ffe67f8feb4,568766269,0,0x0,8
tick,0x7ffe67f8feb4,568782276,0,0x0,8
tick,0x7ffe67f8feb4,568798341,0,0x0,8
tick,0x7ffe67f8feb4,568814275,0,0x0,8
tick,0x7ffe67f8feb4,568830310,0,0x0,8
tick,0x7ffe67f8feb4,568846302,0,0x0,8
tick,0x7ffe67f8feb4,568862294,0,0x0,8
tick,0x7ffe67f8feb4,568878287,0,0x0,8
tick,0x7ffe67f8feb4,568893347,0,0x0,8
tick,0x7ffe67f8feb4,568909297,0,0x0,8
tick,0x7ffe67f8feb4,568925294,0,0x0,8
tick,0x7ffe67f8feb4,568941346,0,0x0,8
tick,0x7ffe67f8feb4,568957292,0,0x0,8
tick,0x7ffe67f8feb4,568973142,0,0x0,8
tick,0x7ffe67f8feb4,568989165,0,0x0,8
tick,0x7ffe67f8feb4,569005297,0,0x0,8
tick,0x7ffe67f8feb4,569020541,0,0x0,8
tick,0x7ffe67f8feb4,569036282,0,0x0,8
tick,0x7ffe67f8feb4,569052166,0,0x0,8
tick,0x7ffe67f8feb4,569067277,0,0x0,8
tick,0x7ffe67f8feb4,569083137,0,0x0,8
tick,0x7ffe67f8feb4,569098800,0,0x0,8
tick,0x7ffe67f8feb4,569122180,0,0x0,8
tick,0x7ffe67f8feb4,569130261,0,0x0,8
tick,0x7ffe67f8feb4,569145313,0,0x0,8
tick,0x7ffe67f8feb4,569161236,0,0x0,8
tick,0x7ffe67f8feb4,569177547,0,0x0,8
tick,0x7ffe67f8feb4,569206013,0,0x0,8
tick,0x7ffe67f8feb4,569209059,0,0x0,8
tick,0x7ffe67f8feb4,569224143,0,0x0,8
tick,0x7ffe67f8feb4,569240233,0,0x0,8
tick,0x7ffe67f8feb4,569255388,0,0x0,8
tick,0x7ffe67f8feb4,569270894,0,0x0,8
tick,0x7ffe67f8feb4,569286073,0,0x0,8
tick,0x7ffe67f8feb4,569301429,0,0x0,8
tick,0x7ffe67f8feb4,569317275,0,0x0,8
tick,0x7ffe67f8feb4,569333068,0,0x0,8
tick,0x7ffe67f8feb4,569348172,0,0x0,8
tick,0x7ffe67f8feb4,569364438,0,0x0,8
tick,0x7ffe67f8feb4,569380062,0,0x0,8
tick,0x7ffe67f8feb4,569396083,0,0x0,8
tick,0x7ffe67f8feb4,569412181,0,0x0,8
tick,0x7ffe67f8feb4,569428103,0,0x0,8
tick,0x7ffe67f8feb4,569444166,0,0x0,8
tick,0x7ffe67f8feb4,569460131,0,0x0,8
tick,0x7ffe67f8feb4,569476089,0,0x0,8
tick,0x7ffe67f8feb4,569492099,0,0x0,8
tick,0x7ffe67f8feb4,569508116,0,0x0,8
tick,0x7ffe67f8feb4,569524099,0,0x0,8
tick,0x7ffe67f8feb4,569540076,0,0x0,8
tick,0x7ffe67f8feb4,569556346,0,0x0,8
tick,0x7ffe67f8feb4,569572089,0,0x0,8
tick,0x7ffe67f8feb4,569588110,0,0x0,8
tick,0x7ffe67f8feb4,569604143,0,0x0,8
tick,0x7ffe67f8feb4,569620094,0,0x0,8
tick,0x7ffe67f8feb4,569636115,0,0x0,8
tick,0x7ffe67f8feb4,569652237,0,0x0,8
tick,0x7ffe67f8feb4,569668161,0,0x0,8
tick,0x7ffe67f8feb4,569684273,0,0x0,8
tick,0x7ffe67f8feb4,569700282,0,0x0,8
tick,0x7ffe67f8feb4,569716144,0,0x0,8
tick,0x7ffe67f8feb4,569732397,0,0x0,8
tick,0x7ffe67f8feb4,569748405,0,0x0,8
tick,0x7ffe67f8feb4,569763327,0,0x0,8
tick,0x7ffe67f8feb4,569779159,0,0x0,8
tick,0x7ffe67f8feb4,569794306,0,0x0,8
tick,0x7ffe67f8feb4,569810287,0,0x0,8
tick,0x7ffe67f8feb4,569826319,0,0x0,8
tick,0x7ffe67f8feb4,569841468,0,0x0,8
tick,0x7ffe67f8feb4,569857210,0,0x0,8
tick,0x7ffe67f8feb4,569873165,0,0x0,8
tick,0x7ffe67f8feb4,569888330,0,0x0,8
tick,0x7ffe67f8feb4,569904193,0,0x0,8
tick,0x7ffe67f8feb4,569920166,0,0x0,8
tick,0x7ffe67f8feb4,569935358,0,0x0,8
tick,0x7ffe67f8feb4,569951395,0,0x0,8
tick,0x7ffe67f8feb4,569967306,0,0x0,8
tick,0x7ffe67f8feb4,569983277,0,0x0,8
tick,0x7ffe67f8feb4,569998567,0,0x0,8
tick,0x7ffe67f8feb4,570014161,0,0x0,8
tick,0x7ffe67f8feb4,570029368,0,0x0,8
tick,0x7ffe67f8feb4,570044303,0,0x0,8
tick,0x7ffe67f8feb4,570059543,0,0x0,8
tick,0x7ffe67f8feb4,570075288,0,0x0,8
tick,0x7ffe67f8feb4,570090332,0,0x0,8
tick,0x7ffe67f8feb4,570105524,0,0x0,8
tick,0x7ffe67f8feb4,570121265,0,0x0,8
tick,0x7ffe67f8feb4,570137188,0,0x0,8
tick,0x7ffe67f8feb4,570153193,0,0x0,8
tick,0x7ffe67f8feb4,570169169,0,0x0,8
tick,0x7ffe67f8feb4,570185228,0,0x0,8
tick,0x7ffe67f8feb4,570201227,0,0x0,8
tick,0x7ffe67f8feb4,570217174,0,0x0,8
tick,0x7ffe67f8feb4,570233672,0,0x0,8
tick,0x7ffe67f8feb4,570249204,0,0x0,8
tick,0x7ffe67f8feb4,570264156,0,0x0,8
tick,0x7ffe67f8feb4,570279182,0,0x0,8
tick,0x7ffe67f8feb4,570295175,0,0x0,8
tick,0x7ffe67f8feb4,570311145,0,0x0,8
tick,0x7ffe67f8feb4,570326276,0,0x0,8
tick,0x7ffe67f8feb4,570341919,0,0x0,8
tick,0x7ffe67f8feb4,570357279,0,0x0,8
tick,0x7ffe67f8feb4,570373166,0,0x0,8
tick,0x7ffe67f8feb4,570389156,0,0x0,8
tick,0x7ffe67f8feb4,570404320,0,0x0,8
tick,0x7ffe67f8feb4,570419997,0,0x0,8
tick,0x7ffe67f8feb4,570435196,0,0x0,8
tick,0x7ffe67f8feb4,570450775,0,0x0,8
tick,0x7ffe67f8feb4,570466469,0,0x0,8
tick,0x7ffe67f8feb4,570481335,0,0x0,8
tick,0x7ffe67f8feb4,570497360,0,0x0,8
tick,0x7ffe67f8feb4,570513338,0,0x0,8
tick,0x7ffe67f8feb4,570529320,0,0x0,8
tick,0x7ffe67f8feb4,570550586,0,0x0,8
tick,0x7ffe67f8feb4,570561373,0,0x0,8
tick,0x7ffe67f8feb4,570580706,0,0x0,8
tick,0x7ffe67f8feb4,570593356,0,0x0,8
tick,0x7ffe67f8feb4,570609317,0,0x0,8
tick,0x7ffe67f8feb4,570625261,0,0x0,8
tick,0x7ffe67f8feb4,570641310,0,0x0,8
tick,0x7ffe67f8feb4,570656352,0,0x0,8
tick,0x7ffe67f8feb4,570671379,0,0x0,8
tick,0x7ffe67f8feb4,570686299,0,0x0,8
tick,0x7ffe67f8feb4,570702142,0,0x0,8
tick,0x7ffe67f8feb4,570717321,0,0x0,8
tick,0x7ffe67f8feb4,570733243,0,0x0,8
tick,0x7ffe67f8feb4,570748762,0,0x0,8
tick,0x7ffe67f8feb4,570764283,0,0x0,8
tick,0x7ffe67f8feb4,570780281,0,0x0,8
tick,0x7ffe67f8feb4,570796283,0,0x0,8
tick,0x7ffe67f8feb4,570812275,0,0x0,8
tick,0x7ffe67f8feb4,570828362,0,0x0,8
tick,0x7ffe67f8feb4,570844276,0,0x0,8
tick,0x7ffe67f8feb4,570860277,0,0x0,8
tick,0x7ffe67f8feb4,570876273,0,0x0,8
tick,0x7ffe67f8feb4,570892278,0,0x0,8
tick,0x7ffe67f8feb4,570908150,0,0x0,8
tick,0x7ffe67f8feb4,570923289,0,0x0,8
tick,0x7ffe67f8feb4,570939285,0,0x0,8
tick,0x7ffe67f8feb4,570955287,0,0x0,8
tick,0x7ffe67f8feb4,570970482,0,0x0,8
tick,0x7ffe67f8feb4,570986339,0,0x0,8
tick,0x7ffe67f8feb4,571002143,0,0x0,8
tick,0x7ffe67f8feb4,571017399,0,0x0,8
tick,0x7ffe67f8feb4,571032154,0,0x0,8
tick,0x7ffe67f8feb4,571047446,0,0x0,8
tick,0x7ffe67f8feb4,571063446,0,0x0,8
tick,0x7ffe67f8feb4,571078516,0,0x0,8
tick,0x7ffe67f8feb4,571094323,0,0x0,8
tick,0x7ffe67f8feb4,571109545,0,0x0,8
tick,0x7ffe67f8feb4,571125303,0,0x0,8
tick,0x7ffe67f8feb4,571140921,0,0x0,8
tick,0x7ffe67f8feb4,571156334,0,0x0,8
tick,0x7ffe67f8feb4,571172211,0,0x0,8
tick,0x7ffe67f8feb4,571187605,0,0x0,8
tick,0x7ffe67f8feb4,571203558,0,0x0,8
tick,0x7ffe67f8feb4,571219239,0,0x0,8
tick,0x7ffe67f8feb4,571234187,0,0x0,8
tick,0x7ffe67f8feb4,571250314,0,0x0,8
tick,0x7ffe67f8feb4,571265904,0,0x0,8
tick,0x7ffe67f8feb4,571280762,0,0x0,8
tick,0x7ffe67f8feb4,571295959,0,0x0,8
tick,0x7ffe67f8feb4,571311424,0,0x0,8
tick,0x7ffe67f8feb4,571326850,0,0x0,8
tick,0x7ffe67f8feb4,571342162,0,0x0,8
tick,0x7ffe67f8feb4,571358176,0,0x0,8
tick,0x7ffe67f8feb4,571374160,0,0x0,8
tick,0x7ffe67f8feb4,571390182,0,0x0,8
tick,0x7ffe67f8feb4,571405556,0,0x0,8
tick,0x7ffe67f8feb4,571420745,0,0x0,8
tick,0x7ffe67f8feb4,571436575,0,0x0,8
tick,0x7ffe67f8feb4,571452374,0,0x0,8
tick,0x7ffe67f8feb4,571468377,0,0x0,8
tick,0x7ffe67f8feb4,571484376,0,0x0,8
tick,0x7ffe67f8feb4,571500376,0,0x0,8
tick,0x7ffe67f8feb4,571516395,0,0x0,8
tick,0x7ffe67f8feb4,571531435,0,0x0,8
tick,0x7ffe67f8feb4,571547383,0,0x0,8
tick,0x7ffe67f8feb4,571563334,0,0x0,8
tick,0x7ffe67f8feb4,571578463,0,0x0,8
tick,0x7ffe67f8feb4,571594188,0,0x0,8
tick,0x7ffe67f8feb4,571609480,0,0x0,8
tick,0x7ffe67f8feb4,571625506,0,0x0,8
tick,0x7ffe67f8feb4,571641330,0,0x0,8
tick,0x7ffe67f8feb4,571656516,0,0x0,8
tick,0x7ffe67f8feb4,571671594,0,0x0,8
tick,0x7ffe67f8feb4,571687593,0,0x0,8
tick,0x7ffe67f8feb4,571702979,0,0x0,8
tick,0x7ffe67f8feb4,571718592,0,0x0,8
tick,0x7ffe67f8feb4,571734277,0,0x0,8
tick,0x7ffe67f8feb4,571753642,0,0x0,8
tick,0x7ffe67f8feb4,571765425,0,0x0,8
tick,0x7ffe67f8feb4,571782543,0,0x0,8
tick,0x7ffe67f8feb4,571797806,0,0x0,8
tick,0x7ffe67f8feb4,571814247,0,0x0,8
tick,0x7ffe67f8feb4,571829485,0,0x0,8
tick,0x7ffe67f8feb4,571845914,0,0x0,8
tick,0x7ffe67f8feb4,571861449,0,0x0,8
tick,0x7ffe67f8feb4,571877439,0,0x0,8
tick,0x7ffe67f8feb4,571893511,0,0x0,8
tick,0x7ffe67f8feb4,571909674,0,0x0,8
tick,0x7ffe67f8feb4,571925445,0,0x0,8
tick,0x7ffe67f8feb4,571941435,0,0x0,8
tick,0x7ffe67f8feb4,571957513,0,0x0,8
tick,0x7ffe67f8feb4,571973509,0,0x0,8
tick,0x7ffe67f8feb4,571989454,0,0x0,8
tick,0x7ffe67f8feb4,572005452,0,0x0,8
tick,0x7ffe67f8feb4,572021530,0,0x0,8
tick,0x7ffe67f8feb4,572036149,0,0x0,8
tick,0x7ffe67f8feb4,572051623,0,0x0,8
tick,0x7ffe67f8feb4,572067616,0,0x0,8
tick,0x7ffe67f8feb4,572083169,0,0x0,8
tick,0x7ffe67f8feb4,572098614,0,0x0,8
tick,0x7ffe67f8feb4,572114139,0,0x0,8
tick,0x7ffe67f8feb4,572129518,0,0x0,8
tick,0x7ffe67f8feb4,572145103,0,0x0,8
tick,0x7ffe67f8feb4,572160216,0,0x0,8
tick,0x7ffe67f8feb4,572175288,0,0x0,8
tick,0x7ffe67f8feb4,572190506,0,0x0,8
tick,0x7ffe67f8feb4,572205731,0,0x0,8
tick,0x7ffe67f8feb4,572221815,0,0x0,8
tick,0x7ffe67f8feb4,572237758,0,0x0,8
tick,0x7ffe67f8feb4,572253139,0,0x0,8
tick,0x7ffe67f8feb4,572269159,0,0x0,8
tick,0x7ffe67f8feb4,572284575,0,0x0,8
tick,0x7ffe67f8feb4,572300466,0,0x0,8
tick,0x7ffe67f8feb4,572315266,0,0x0,8
tick,0x7ffe67f8feb4,572331210,0,0x0,8
tick,0x7ffe67f8feb4,572346491,0,0x0,8
tick,0x7ffe67f8feb4,572361830,0,0x0,8
tick,0x7ffe67f8feb4,572377524,0,0x0,8
tick,0x7ffe67f8feb4,572393199,0,0x0,8
tick,0x7ffe67f8feb4,572409198,0,0x0,8
tick,0x7ffe67f8feb4,572424159,0,0x0,8
tick,0x7ffe67f8feb4,572440078,0,0x0,8
tick,0x7ffe67f8feb4,572455268,0,0x0,8
tick,0x7ffe67f8feb4,572471143,0,0x0,8
tick,0x7ffe67f8feb4,572487159,0,0x0,8
tick,0x7ffe67f8feb4,572502134,0,0x0,8
tick,0x7ffe67f8feb4,572518125,0,0x0,8
tick,0x7ffe67f8feb4,572534135,0,0x0,8
tick,0x7ffe67f8feb4,572550152,0,0x0,8
tick,0x7ffe67f8feb4,572565279,0,0x0,8
tick,0x7ffe67f8feb4,572581193,0,0x0,8
tick,0x7ffe67f8feb4,572596306,0,0x0,8
tick,0x7ffe67f8feb4,572611531,0,0x0,8
tick,0x7ffe67f8feb4,572627464,0,0x0,8
tick,0x7ffe67f8feb4,572642200,0,0x0,8
tick,0x7ffe67f8feb4,572658242,0,0x0,8
tick,0x7ffe67f8feb4,572674200,0,0x0,8
tick,0x7ffe67f8feb4,572689344,0,0x0,8
tick,0x7ffe67f8feb4,572704692,0,0x0,8
tick,0x7ffe67f8feb4,572720658,0,0x0,8
tick,0x7ffe67f8feb4,572736716,0,0x0,8
tick,0x7ffe67f8feb4,572752685,0,0x0,8
tick,0x7ffe67f8feb4,572768780,0,0x0,8
tick,0x7ffe67f8feb4,572784382,0,0x0,8
tick,0x7ffe67f8feb4,572799203,0,0x0,8
tick,0x7ffe67f8feb4,572814306,0,0x0,8
tick,0x7ffe67f8feb4,572830205,0,0x0,8
tick,0x7ffe67f8feb4,572845517,0,0x0,8
tick,0x7ffe67f8feb4,572860900,0,0x0,8
tick,0x7ffe67f8feb4,572876333,0,0x0,8
tick,0x7ffe67f8feb4,572892333,0,0x0,8
tick,0x7ffe67f8feb4,572908313,0,0x0,8
tick,0x7ffe67f8feb4,572923598,0,0x0,8
tick,0x7ffe67f8feb4,572939600,0,0x0,8
tick,0x7ffe67f8feb4,572955298,0,0x0,8
tick,0x7ffe67f8feb4,572971314,0,0x0,8
tick,0x7ffe67f8feb4,572987782,0,0x0,8
tick,0x7ffe67f8feb4,573002800,0,0x0,8
tick,0x7ffe67f8feb4,573018993,0,0x0,8
tick,0x7ffe67f8feb4,573035312,0,0x0,8
tick,0x7ffe67f8feb4,573050650,0,0x0,8
tick,0x7ffe67f8feb4,573066289,0,0x0,8
tick,0x7ffe67f8feb4,573081302,0,0x0,8
tick,0x7ffe67f8feb4,573096654,0,0x0,8
tick,0x7ffe67f8feb4,573112147,0,0x0,8
tick,0x7ffe67f8feb4,573127648,0,0x0,8
tick,0x7ffe67f8feb4,573142629,0,0x0,8
tick,0x7ffe67f8feb4,573158634,0,0x0,8
tick,0x7ffe67f8feb4,573174278,0,0x0,8
tick,0x7ffe67f8feb4,573189594,0,0x0,8
tick,0x7ffe67f8feb4,573205709,0,0x0,8
tick,0x7ffe67f8feb4,573221695,0,0x0,8
tick,0x7ffe67f8feb4,573236648,0,0x0,8
tick,0x7ffe67f8feb4,573252668,0,0x0,8
tick,0x7ffe67f8feb4,573268694,0,0x0,8
tick,0x7ffe67f8feb4,573284752,0,0x0,8
tick,0x7ffe67f8feb4,573300647,0,0x0,8
tick,0x7ffe67f8feb4,573316644,0,0x0,8
tick,0x7ffe67f8feb4,573332648,0,0x0,8
tick,0x7ffe67f8feb4,573348650,0,0x0,8
tick,0x7ffe67f8feb4,573364743,0,0x0,8
tick,0x7ffe67f8feb4,573380643,0,0x0,8
tick,0x7ffe67f8feb4,573396685,0,0x0,8
tick,0x7ffe67f8feb4,573412863,0,0x0,8
tick,0x7ffe67f8feb4,573428686,0,0x0,8
tick,0x7ffe67f8feb4,573444681,0,0x0,8
tick,0x7ffe67f8feb4,573460702,0,0x0,8
tick,0x7ffe67f8feb4,573476673,0,0x0,8
tick,0x7ffe67f8feb4,573491650,0,0x0,8
tick,0x7ffe67f8feb4,573507664,0,0x0,8
tick,0x7ffe67f8feb4,573522690,0,0x0,8
tick,0x7ffe67f8feb4,573538719,0,0x0,8
tick,0x7ffe67f8feb4,573553683,0,0x0,8
tick,0x7ffe67f8feb4,573569673,0,0x0,8
tick,0x7ffe67f8feb4,573585114,0,0x0,8
tick,0x7ffe67f8feb4,573600117,0,0x0,8
tick,0x7ffe67f8feb4,573615278,0,0x0,8
tick,0x7ffe67f8feb4,573630461,0,0x0,8
tick,0x7ffe67f8feb4,573646180,0,0x0,8
tick,0x7ffe67f8feb4,573661345,0,0x0,8
tick,0x7ffe67f8feb4,573677121,0,0x0,8
tick,0x7ffe67f8feb4,573692439,0,0x0,8
tick,0x7ffe67f8feb4,573708471,0,0x0,8
tick,0x7ffe67f8feb4,573723167,0,0x0,8
tick,0x7ffe67f8feb4,573737993,0,0x0,8
tick,0x7ffe67f8feb4,573754037,0,0x0,8
tick,0x7ffe67f8feb4,573769837,0,0x0,8
tick,0x7ffe67f8feb4,573785818,0,0x0,8
tick,0x7ffe67f8feb4,573801671,0,0x0,8
tick,0x7ffe67f8feb4,573816387,0,0x0,8
tick,0x7ffe67f8feb4,573832156,0,0x0,8
tick,0x7ffe67f8feb4,573847368,0,0x0,8
tick,0x7ffe67f8feb4,573863279,0,0x0,8
tick,0x7ffe67f8feb4,573878739,0,0x0,8
tick,0x7ffe67f8feb4,573894282,0,0x0,8
tick,0x7ffe67f8feb4,573909456,0,0x0,8
tick,0x7ffe67f8feb4,573924743,0,0x0,8
tick,0x7ffe67f8feb4,573940390,0,0x0,8
tick,0x7ffe67f8feb4,573956319,0,0x0,8
tick,0x7ffe67f8feb4,573971497,0,0x0,8
tick,0x7ffe67f8feb4,573987449,0,0x0,8
tick,0x7ffe67f8feb4,574002223,0,0x0,8
tick,0x7ffe67f8feb4,574018158,0,0x0,8
tick,0x7ffe67f8feb4,574033649,0,0x0,8
tick,0x7ffe67f8feb4,574049159,0,0x0,8
tick,0x7ffe67f8feb4,574064330,0,0x0,8
tick,0x7ffe67f8feb4,574080405,0,0x0,8
tick,0x7ffe67f8feb4,574096699,0,0x0,8
tick,0x7ffe67f8feb4,574112270,0,0x0,8
tick,0x7ffe67f8feb4,574127066,0,0x0,8
tick,0x7ffe67f8feb4,574142862,0,0x0,8
tick,0x7ffe67f8feb4,574158855,0,0x0,8
tick,0x7ffe67f8feb4,574174349,0,0x0,8
tick,0x7ffe67f8feb4,574189849,0,0x0,8
tick,0x7ffe67f8feb4,574205851,0,0x0,8
tick,0x7ffe67f8feb4,574221791,0,0x0,8
tick,0x7ffe67f8feb4,574237856,0,0x0,8
tick,0x7ffe67f8feb4,574253844,0,0x0,8
tick,0x7ffe67f8feb4,574269938,0,0x0,8
tick,0x7ffe67f8feb4,574285851,0,0x0,8
tick,0x7ffe67f8feb4,574301746,0,0x0,8
tick,0x7ffe67f8feb4,574316885,0,0x0,8
tick,0x7ffe67f8feb4,574332831,0,0x0,8
tick,0x7ffe67f8feb4,574348832,0,0x0,8
tick,0x7ffe67f8feb4,574364800,0,0x0,8
tick,0x7ffe67f8feb4,574379811,0,0x0,8
tick,0x7ffe67f8feb4,574395359,0,0x0,8
tick,0x7ffe67f8feb4,574410824,0,0x0,8
tick,0x7ffe67f8feb4,574426306,0,0x0,8
tick,0x7ffe67f8feb4,574442161,0,0x0,8
tick,0x7ffe67f8feb4,574457293,0,0x0,8
tick,0x7ffe67f8feb4,574473358,0,0x0,8
tick,0x7ffe67f8feb4,574488845,0,0x0,8
tick,0x7ffe67f8feb4,574504824,0,0x0,8
tick,0x7ffe67f8feb4,574520833,0,0x0,8
tick,0x7ffe67f8feb4,574536848,0,0x0,8
tick,0x7ffe67f8feb4,574552133,0,0x0,8
tick,0x7ffe67f8feb4,574567836,0,0x0,8
tick,0x7ffe67f8feb4,574583186,0,0x0,8
tick,0x7ffe67f8feb4,574599156,0,0x0,8
tick,0x7ffe67f8feb4,574614285,0,0x0,8
tick,0x7ffe67f8feb4,574630180,0,0x0,8
tick,0x7ffe67f8feb4,574646230,0,0x0,8
tick,0x7ffe67f8feb4,574661498,0,0x0,8
tick,0x7ffe67f8feb4,574677102,0,0x0,8
tick,0x7ffe67f8feb4,574692890,0,0x0,8
tick,0x7ffe67f8feb4,574708870,0,0x0,8
tick,0x7ffe67f8feb4,574725044,0,0x0,8
tick,0x7ffe67f8feb4,574740865,0,0x0,8
tick,0x7ffe67f8feb4,574756903,0,0x0,8
tick,0x7ffe67f8feb4,574772880,0,0x0,8
tick,0x7ffe67f8feb4,574788879,0,0x0,8
tick,0x7ffe67f8feb4,574804905,0,0x0,8
tick,0x7ffe67f8feb4,574820921,0,0x0,8
tick,0x7ffe67f8feb4,574836892,0,0x0,8
tick,0x7ffe67f8feb4,574853022,0,0x0,8
tick,0x7ffe67f8feb4,574868904,0,0x0,8
tick,0x7ffe67f8feb4,574884891,0,0x0,8
tick,0x7ffe67f8feb4,574900885,0,0x0,8
tick,0x7ffe67f8feb4,574916934,0,0x0,8
tick,0x7ffe67f8feb4,574932907,0,0x0,8
tick,0x7ffe67f8feb4,574948904,0,0x0,8
tick,0x7ffe67f8feb4,574964900,0,0x0,8
tick,0x7ffe67f8feb4,574980898,0,0x0,8
tick,0x7ffe67f8feb4,574996911,0,0x0,8
tick,0x7ffe67f8feb4,575012915,0,0x0,8
tick,0x7ffe67f8feb4,575028923,0,0x0,8
tick,0x7ffe67f8feb4,575044910,0,0x0,8
tick,0x7ffe67f8feb4,575060920,0,0x0,8
tick,0x7ffe67f8feb4,575076926,0,0x0,8
tick,0x7ffe67f8feb4,575092943,0,0x0,8
tick,0x7ffe67f8feb4,575108947,0,0x0,8
tick,0x7ffe67f8feb4,575124920,0,0x0,8
tick,0x7ffe67f8feb4,575140929,0,0x0,8
tick,0x7ffe67f8feb4,575156942,0,0x0,8
tick,0x7ffe67f8feb4,575172938,0,0x0,8
tick,0x7ffe67f8feb4,575189108,0,0x0,8
tick,0x7ffe67f8feb4,575204239,0,0x0,8
tick,0x7ffe67f8feb4,575220147,0,0x0,8
tick,0x7ffe67f8feb4,575235308,0,0x0,8
tick,0x7ffe67f8feb4,575251301,0,0x0,8
tick,0x7ffe67f8feb4,575266451,0,0x0,8
tick,0x7ffe67f8feb4,575281611,0,0x0,8
tick,0x7ffe67f8feb4,575297570,0,0x0,8
tick,0x7ffe67f8feb4,575313675,0,0x0,8
tick,0x7ffe67f8feb4,575329017,0,0x0,8
tick,0x7ffe67f8feb4,575344450,0,0x0,8
tick,0x7ffe67f8feb4,575359920,0,0x0,8
tick,0x7ffe67f8feb4,575375410,0,0x0,8
tick,0x7ffe67f8feb4,575390656,0,0x0,8
tick,0x7ffe67f8feb4,575406599,0,0x0,8
tick,0x7ffe67f8feb4,575422368,0,0x0,8
tick,0x7ffe67f8feb4,575437837,0,0x0,8
tick,0x7ffe67f8feb4,575453233,0,0x0,8
tick,0x7ffe67f8feb4,575468353,0,0x0,8
tick,0x7ffe67f8feb4,575484269,0,0x0,8
tick,0x7ffe67f8feb4,575499932,0,0x0,8
tick,0x7ffe67f8feb4,575515092,0,0x0,8
tick,0x7ffe67f8feb4,575530931,0,0x0,8
tick,0x7ffe67f8feb4,575546934,0,0x0,8
tick,0x7ffe67f8feb4,575562424,0,0x0,8
tick,0x7ffe67f8feb4,575577921,0,0x0,8
tick,0x7ffe67f8feb4,575593173,0,0x0,8
tick,0x7ffe67f8feb4,575609013,0,0x0,8
tick,0x7ffe67f8feb4,575624209,0,0x0,8
tick,0x7ffe67f8feb4,575640022,0,0x0,8
tick,0x7ffe67f8feb4,575655019,0,0x0,8
tick,0x7ffe67f8feb4,575670566,0,0x0,8
tick,0x7ffe67f8feb4,575685488,0,0x0,8
tick,0x7ffe67f8feb4,575701577,0,0x0,8
tick,0x7ffe67f8feb4,575717674,0,0x0,8
tick,0x7ffe67f8feb4,575733225,0,0x0,8
tick,0x7ffe67f8feb4,575749075,0,0x0,8
tick,0x7ffe67f8feb4,575764252,0,0x0,8
tick,0x7ffe67f8feb4,575780119,0,0x0,8
tick,0x7ffe67f8feb4,575795423,0,0x0,8
tick,0x7ffe67f8feb4,575810838,0,0x0,8
tick,0x7ffe67f8feb4,575826581,0,0x0,8
tick,0x7ffe67f8feb4,575841779,0,0x0,8
tick,0x7ffe67f8feb4,575857877,0,0x0,8
tick,0x7ffe67f8feb4,575872984,0,0x0,8
tick,0x7ffe67f8feb4,575888903,0,0x0,8
tick,0x7ffe67f8feb4,575904319,0,0x0,8
tick,0x7ffe67f8feb4,575920125,0,0x0,8
tick,0x7ffe67f8feb4,575935375,0,0x0,8
tick,0x7ffe67f8feb4,575951412,0,0x0,8
tick,0x7ffe67f8feb4,575967841,0,0x0,8
tick,0x7ffe67f8feb4,575983511,0,0x0,8
tick,0x7ffe67f8feb4,575998751,0,0x0,8
tick,0x7ffe67f8feb4,576014356,0,0x0,8
tick,0x7ffe67f8feb4,576030809,0,0x0,8
tick,0x7ffe67f8feb4,576045942,0,0x0,8
tick,0x7ffe67f8feb4,576060996,0,0x0,8
tick,0x7ffe67f8feb4,576076774,0,0x0,8
tick,0x7ffe67f8feb4,576092585,0,0x0,8
tick,0x7ffe67f8feb4,576107880,0,0x0,8
tick,0x7ffe67f8feb4,576123333,0,0x0,8
tick,0x7ffe67f8feb4,576139181,0,0x0,8
tick,0x7ffe67f8feb4,576155219,0,0x0,8
tick,0x7ffe67f8feb4,576170918,0,0x0,8
tick,0x7ffe67f8feb4,576185879,0,0x0,8
tick,0x7ffe67f8feb4,576201656,0,0x0,8
tick,0x7ffe67f8feb4,576217648,0,0x0,8
tick,0x7ffe67f8feb4,576233649,0,0x0,8
tick,0x7ffe67f8feb4,576249644,0,0x0,8
tick,0x7ffe67f8feb4,576265311,0,0x0,8
tick,0x7ffe67f8feb4,576281157,0,0x0,8
tick,0x7ffe67f8feb4,576296313,0,0x0,8
tick,0x7ffe67f8feb4,576311936,0,0x0,8
tick,0x7ffe67f8feb4,576327329,0,0x0,8
tick,0x7ffe67f8feb4,576343190,0,0x0,8
tick,0x7ffe67f8feb4,576358333,0,0x0,8
tick,0x7ffe67f8feb4,576374317,0,0x0,8
tick,0x7ffe67f8feb4,576390549,0,0x0,8
tick,0x7ffe67f8feb4,576406327,0,0x0,8
tick,0x7ffe67f8feb4,576422489,0,0x0,8
tick,0x7ffe67f8feb4,576437889,0,0x0,8
tick,0x7ffe67f8feb4,576453886,0,0x0,8
tick,0x7ffe67f8feb4,576469586,0,0x0,8
tick,0x7ffe67f8feb4,576485454,0,0x0,8
tick,0x7ffe67f8feb4,576501482,0,0x0,8
tick,0x7ffe67f8feb4,576516366,0,0x0,8
tick,0x7ffe67f8feb4,576531055,0,0x0,8
tick,0x7ffe67f8feb4,576546058,0,0x0,8
tick,0x7ffe67f8feb4,576562044,0,0x0,8
tick,0x7ffe67f8feb4,576578048,0,0x0,8
tick,0x7ffe67f8feb4,576594168,0,0x0,8
tick,0x7ffe67f8feb4,576610145,0,0x0,8
tick,0x7ffe67f8feb4,576625421,0,0x0,8
tick,0x7ffe67f8feb4,576640449,0,0x0,8
tick,0x7ffe67f8feb4,576656557,0,0x0,8
tick,0x7ffe67f8feb4,576672606,0,0x0,8
tick,0x7ffe67f8feb4,576688398,0,0x0,8
tick,0x7ffe67f8feb4,576704248,0,0x0,8
tick,0x7ffe67f8feb4,576720408,0,0x0,8
tick,0x7ffe67f8feb4,576736355,0,0x0,8
tick,0x7ffe67f8feb4,576751730,0,0x0,8
tick,0x7ffe67f8feb4,576767708,0,0x0,8
tick,0x7ffe67f8feb4,576783468,0,0x0,8
tick,0x7ffe67f8feb4,576799134,0,0x0,8
tick,0x7ffe67f8feb4,576814310,0,0x0,8
tick,0x7ffe67f8feb4,576830165,0,0x0,8
tick,0x7ffe67f8feb4,576845331,0,0x0,8
tick,0x7ffe67f8feb4,576861205,0,0x0,8
tick,0x7ffe67f8feb4,576876315,0,0x0,8
tick,0x7ffe67f8feb4,576892233,0,0x0,8
tick,0x7ffe67f8feb4,576907388,0,0x0,8
tick,0x7ffe67f8feb4,576922824,0,0x0,8
tick,0x7ffe67f8feb4,576938788,0,0x0,8
tick,0x7ffe67f8feb4,576954902,0,0x0,8
tick,0x7ffe67f8feb4,576970786,0,0x0,8
tick,0x7ffe67f8feb4,576986814,0,0x0,8
tick,0x7ffe67f8feb4,577002779,0,0x0,8
tick,0x7ffe67f8feb4,577018784,0,0x0,8
tick,0x7ffe67f8feb4,577034863,0,0x0,8
tick,0x7ffe67f8feb4,577050779,0,0x0,8
tick,0x7ffe67f8feb4,577066802,0,0x0,8
tick,0x7ffe67f8feb4,577082829,0,0x0,8
tick,0x7ffe67f8feb4,577097803,0,0x0,8
tick,0x7ffe67f8feb4,577113160,0,0x0,8
tick,0x7ffe67f8feb4,577128855,0,0x0,8
tick,0x7ffe67f8feb4,577144191,0,0x0,8
tick,0x7ffe67f8feb4,577159848,0,0x0,8
tick,0x7ffe67f8feb4,577175340,0,0x0,8
tick,0x7ffe67f8feb4,577190761,0,0x0,8
tick,0x7ffe67f8feb4,577206370,0,0x0,8
tick,0x7ffe67f8feb4,577221570,0,0x0,8
tick,0x7ffe67f8feb4,577237588,0,0x0,8
tick,0x7ffe67f8feb4,577253430,0,0x0,8
tick,0x7ffe67f8feb4,577269306,0,0x0,8
tick,0x7ffe67f8feb4,577284529,0,0x0,8
tick,0x7ffe67f8feb4,577299503,0,0x0,8
tick,0x7ffe67f8feb4,577314666,0,0x0,8
tick,0x7ffe67f8feb4,577330342,0,0x0,8
tick,0x7ffe67f8feb4,577345628,0,0x0,8
tick,0x7ffe67f8feb4,577360857,0,0x0,8
tick,0x7ffe67f8feb4,577376636,0,0x0,8
tick,0x7ffe67f8feb4,577392426,0,0x0,8
tick,0x7ffe67f8feb4,577408418,0,0x0,8
tick,0x7ffe67f8feb4,577424249,0,0x0,8
tick,0x7ffe67f8feb4,577439224,0,0x0,8
tick,0x7ffe67f8feb4,577454568,0,0x0,8
tick,0x7ffe67f8feb4,577470580,0,0x0,8
tick,0x7ffe67f8feb4,577486358,0,0x0,8
tick,0x7ffe67f8feb4,577501737,0,0x0,8
tick,0x7ffe67f8feb4,577517470,0,0x0,8
tick,0x7ffe67f8feb4,577532468,0,0x0,8
tick,0x7ffe67f8feb4,577548486,0,0x0,8
tick,0x7ffe67f8feb4,577564170,0,0x0,8
tick,0x7ffe67f8feb4,577579518,0,0x0,8
tick,0x7ffe67f8feb4,577595149,0,0x0,8
tick,0x7ffe67f8feb4,577610553,0,0x0,8
tick,0x7ffe67f8feb4,577626011,0,0x0,8
tick,0x7ffe67f8feb4,577641169,0,0x0,8
tick,0x7ffe67f8feb4,577657043,0,0x0,8
tick,0x7ffe67f8feb4,577672572,0,0x0,8
tick,0x7ffe67f8feb4,577688153,0,0x0,8
tick,0x7ffe67f8feb4,577703846,0,0x0,8
tick,0x7ffe67f8feb4,577719633,0,0x0,8
tick,0x7ffe67f8feb4,577735344,0,0x0,8
tick,0x7ffe67f8feb4,577751432,0,0x0,8
tick,0x7ffe67f8feb4,577766245,0,0x0,8
tick,0x7ffe67f8feb4,577781388,0,0x0,8
tick,0x7ffe67f8feb4,577796849,0,0x0,8
tick,0x7ffe67f8feb4,577812355,0,0x0,8
tick,0x7ffe67f8feb4,577827457,0,0x0,8
tick,0x7ffe67f8feb4,577842590,0,0x0,8
tick,0x7ffe67f8feb4,577858458,0,0x0,8
tick,0x7ffe67f8feb4,577873818,0,0x0,8
tick,0x7ffe67f8feb4,577889270,0,0x0,8
tick,0x7ffe67f8feb4,577905587,0,0x0,8
tick,0x7ffe67f8feb4,577921435,0,0x0,8
tick,0x7ffe67f8feb4,577936611,0,0x0,8
tick,0x7ffe67f8feb4,577952575,0,0x0,8
tick,0x7ffe67f8feb4,577968014,0,0x0,8
tick,0x7ffe67f8feb4,577983354,0,0x0,8
tick,0x7ffe67f8feb4,577998443,0,0x0,8
tick,0x7ffe67f8feb4,578014814,0,0x0,8
tick,0x7ffe67f8feb4,578030784,0,0x0,8
tick,0x7ffe67f8feb4,578046328,0,0x0,8
tick,0x7ffe67f8feb4,578061872,0,0x0,8
tick,0x7ffe67f8feb4,578077859,0,0x0,8
tick,0x7ffe67f8feb4,578093239,0,0x0,8
tick,0x7ffe67f8feb4,578108435,0,0x0,8
tick,0x7ffe67f8feb4,578124431,0,0x0,8
tick,0x7ffe67f8feb4,578140493,0,0x0,8
tick,0x7ffe67f8feb4,578156661,0,0x0,8
tick,0x7ffe67f8feb4,578171866,0,0x0,8
tick,0x7ffe67f8feb4,578187042,0,0x0,8
tick,0x7ffe67f8feb4,578202684,0,0x0,8
tick,0x7ffe67f8feb4,578217843,0,0x0,8
tick,0x7ffe67f8feb4,578233406,0,0x0,8
tick,0x7ffe67f8feb4,578248507,0,0x0,8
tick,0x7ffe67f8feb4,578264312,0,0x0,8
tick,0x7ffe67f8feb4,578279980,0,0x0,8
tick,0x7ffe67f8feb4,578295166,0,0x0,8
tick,0x7ffe67f8feb4,578310782,0,0x0,8
tick,0x7ffe67f8feb4,578326572,0,0x0,8
tick,0x7ffe67f8feb4,578342591,0,0x0,8
tick,0x7ffe67f8feb4,578358627,0,0x0,8
tick,0x7ffe67f8feb4,578374668,0,0x0,8
tick,0x7ffe67f8feb4,578390260,0,0x0,8
tick,0x7ffe67f8feb4,578405922,0,0x0,8
tick,0x7ffe67f8feb4,578421239,0,0x0,8
tick,0x7ffe67f8feb4,578436422,0,0x0,8
tick,0x7ffe67f8feb4,578452440,0,0x0,8
tick,0x7ffe67f8feb4,578468414,0,0x0,8
tick,0x7ffe67f8feb4,578484678,0,0x0,8
tick,0x7ffe67f8feb4,578500263,0,0x0,8
tick,0x7ffe67f8feb4,578515877,0,0x0,8
tick,0x7ffe67f8feb4,578531836,0,0x0,8
tick,0x7ffe67f8feb4,578547814,0,0x0,8
tick,0x7ffe67f8feb4,578563776,0,0x0,8
tick,0x7ffe67f8feb4,578578852,0,0x0,8
tick,0x7ffe67f8feb4,578594840,0,0x0,8
tick,0x7ffe67f8feb4,578610004,0,0x0,8
tick,0x7ffe67f8feb4,578625497,0,0x0,8
tick,0x7ffe67f8feb4,578641523,0,0x0,8
tick,0x7ffe67f8feb4,578657608,0,0x0,8
tick,0x7ffe67f8feb4,578673217,0,0x0,8
tick,0x7ffe67f8feb4,578688372,0,0x0,8
tick,0x7ffe67f8feb4,578703795,0,0x0,8
tick,0x7ffe67f8feb4,578718803,0,0x0,8
tick,0x7ffe67f8feb4,578734287,0,0x0,8
tick,0x7ffe67f8feb4,578749450,0,0x0,8
tick,0x7ffe67f8feb4,578765280,0,0x0,8
tick,0x7ffe67f8feb4,578780437,0,0x0,8
tick,0x7ffe67f8feb4,578795975,0,0x0,8
tick,0x7ffe67f8feb4,578811324,0,0x0,8
tick,0x7ffe67f8feb4,578826991,0,0x0,8
tick,0x7ffe67f8feb4,578842989,0,0x0,8
tick,0x7ffe67f8feb4,578858909,0,0x0,8
tick,0x7ffe67f8feb4,578874881,0,0x0,8
tick,0x7ffe67f8feb4,578891014,0,0x0,8
tick,0x7ffe67f8feb4,578906409,0,0x0,8
tick,0x7ffe67f8feb4,578921781,0,0x0,8
tick,0x7ffe67f8feb4,578936853,0,0x0,8
tick,0x7ffe67f8feb4,578952534,0,0x0,8
tick,0x7ffe67f8feb4,578967594,0,0x0,8
tick,0x7ffe67f8feb4,578982513,0,0x0,8
tick,0x7ffe67f8feb4,578998503,0,0x0,8
tick,0x7ffe67f8feb4,579014746,0,0x0,8
tick,0x7ffe67f8feb4,579029785,0,0x0,8
tick,0x7ffe67f8feb4,579045771,0,0x0,8
tick,0x7ffe67f8feb4,579062144,0,0x0,8
tick,0x7ffe67f8feb4,579077216,0,0x0,8
tick,0x7ffe67f8feb4,579092056,0,0x0,8
tick,0x7ffe67f8feb4,579107459,0,0x0,8
tick,0x7ffe67f8feb4,579123223,0,0x0,8
tick,0x7ffe67f8feb4,579139145,0,0x0,8
tick,0x7ffe67f8feb4,579155531,0,0x0,8
tick,0x7ffe67f8feb4,579171095,0,0x0,8
tick,0x7ffe67f8feb4,579186132,0,0x0,8
tick,0x7ffe67f8feb4,579201714,0,0x0,8
tick,0x7ffe67f8feb4,579217237,0,0x0,8
tick,0x7ffe67f8feb4,579233014,0,0x0,8
tick,0x7ffe67f8feb4,579248322,0,0x0,8
tick,0x7ffe67f8feb4,579264263,0,0x0,8
tick,0x7ffe67f8feb4,579279568,0,0x0,8
tick,0x7ffe67f8feb4,579295738,0,0x0,8
tick,0x7ffe67f8feb4,579311253,0,0x0,8
tick,0x7ffe67f8feb4,579327089,0,0x0,8
tick,0x7ffe67f8feb4,579342293,0,0x0,8
tick,0x7ffe67f8feb4,579358809,0,0x0,8
tick,0x7ffe67f8feb4,579374693,0,0x0,8
tick,0x7ffe67f8feb4,579389924,0,0x0,8
tick,0x7ffe67f8feb4,579406487,0,0x0,8
tick,0x7ffe67f8feb4,579422197,0,0x0,8
tick,0x7ffe67f8feb4,579438267,0,0x0,8
tick,0x7ffe67f8feb4,579453590,0,0x0,8
tick,0x7ffe67f8feb4,579469019,0,0x0,8
tick,0x7ffe67f8feb4,579484136,0,0x0,8
tick,0x7ffe67f8feb4,579499758,0,0x0,8
tick,0x7ffe67f8feb4,579517359,0,0x0,8
tick,0x7ffe67f8feb4,579530756,0,0x0,8
tick,0x7ffe67f8feb4,579546699,0,0x0,8
tick,0x7ffe67f8feb4,579562682,0,0x0,8
tick,0x7ffe67f8feb4,579578683,0,0x0,8
tick,0x7ffe67f8feb4,579594678,0,0x0,8
tick,0x7ffe67f8feb4,579610585,0,0x0,8
tick,0x7ffe67f8feb4,579626599,0,0x0,8
tick,0x7ffe67f8feb4,579642182,0,0x0,8
tick,0x7ffe67f8feb4,579657955,0,0x0,8
tick,0x7ffe67f8feb4,579673802,0,0x0,8
tick,0x7ffe67f8feb4,579689814,0,0x0,8
tick,0x7ffe67f8feb4,579705814,0,0x0,8
tick,0x7ffe67f8feb4,579720957,0,0x0,8
tick,0x7ffe67f8feb4,579737125,0,0x0,8
tick,0x7ffe67f8feb4,579752731,0,0x0,8
tick,0x7ffe67f8feb4,579767869,0,0x0,8
tick,0x7ffe67f8feb4,579783261,0,0x0,8
tick,0x7ffe67f8feb4,579799008,0,0x0,8
tick,0x7ffe67f8feb4,579814976,0,0x0,8
tick,0x7ffe67f8feb4,579830420,0,0x0,8
tick,0x7ffe67f8feb4,579845606,0,0x0,8
tick,0x7ffe67f8feb4,579860703,0,0x0,8
tick,0x7ffe67f8feb4,579876679,0,0x0,8
tick,0x7ffe67f8feb4,579892690,0,0x0,8
tick,0x7ffe67f8feb4,579908410,0,0x0,8
tick,0x7ffe67f8feb4,579924429,0,0x0,8
tick,0x7ffe67f8feb4,579939453,0,0x0,8
tick,0x7ffe67f8feb4,579955214,0,0x0,8
tick,0x7ffe67f8feb4,579971444,0,0x0,8
tick,0x7ffe67f8feb4,579987166,0,0x0,8
tick,0x7ffe67f8feb4,580002097,0,0x0,8
tick,0x7ffe67f8feb4,580017145,0,0x0,8
tick,0x7ffe67f8feb4,580032827,0,0x0,8
tick,0x7ffe67f8feb4,580047726,0,0x0,8
tick,0x7ffe67f8feb4,580063951,0,0x0,8
tick,0x7ffe67f8feb4,580079219,0,0x0,8
tick,0x7ffe67f8feb4,580095210,0,0x0,8
tick,0x7ffe67f8feb4,580110488,0,0x0,8
tick,0x7ffe67f8feb4,580126538,0,0x0,8
tick,0x7ffe67f8feb4,580141985,0,0x0,8
tick,0x7ffe67f8feb4,580157362,0,0x0,8
tick,0x7ffe67f8feb4,580172935,0,0x0,8
tick,0x7ffe67f8feb4,580188667,0,0x0,8
tick,0x7ffe67f8feb4,580203971,0,0x0,8
tick,0x7ffe67f8feb4,580219522,0,0x0,8
tick,0x7ffe67f8feb4,580234642,0,0x0,8
tick,0x7ffe67f8feb4,580250334,0,0x0,8
tick,0x7ffe67f8feb4,580265537,0,0x0,8
tick,0x7ffe67f8feb4,580281026,0,0x0,8
tick,0x7ffe67f8feb4,580296435,0,0x0,8
tick,0x7ffe67f8feb4,580311896,0,0x0,8
tick,0x7ffe67f8feb4,580327956,0,0x0,8
tick,0x7ffe67f8feb4,580343249,0,0x0,8
tick,0x7ffe67f8feb4,580359158,0,0x0,8
tick,0x7ffe67f8feb4,580375085,0,0x0,8
tick,0x7ffe67f8feb4,580390607,0,0x0,8
tick,0x7ffe67f8feb4,580406862,0,0x0,8
tick,0x7ffe67f8feb4,580422394,0,0x0,8
tick,0x7ffe67f8feb4,580437982,0,0x0,8
tick,0x7ffe67f8feb4,580453519,0,0x0,8
tick,0x7ffe67f8feb4,580469355,0,0x0,8
tick,0x7ffe67f8feb4,580485414,0,0x0,8
tick,0x7ffe67f8feb4,580501277,0,0x0,8
tick,0x7ffe67f8feb4,580517202,0,0x0,8
tick,0x7ffe67f8feb4,580533223,0,0x0,8
tick,0x7ffe67f8feb4,580549177,0,0x0,8
tick,0x7ffe67f8feb4,580565177,0,0x0,8
tick,0x7ffe67f8feb4,580581173,0,0x0,8
tick,0x7ffe67f8feb4,580596847,0,0x0,8
tick,0x7ffe67f8feb4,580611496,0,0x0,8
tick,0x7ffe67f8feb4,580627163,0,0x0,8
tick,0x7ffe67f8feb4,580642297,0,0x0,8
tick,0x7ffe67f8feb4,580657215,0,0x0,8
tick,0x7ffe67f8feb4,580672241,0,0x0,8
tick,0x7ffe67f8feb4,580687235,0,0x0,8
tick,0x7ffe67f8feb4,580703178,0,0x0,8
tick,0x7ffe67f8feb4,580719198,0,0x0,8
tick,0x7ffe67f8feb4,580734514,0,0x0,8
tick,0x7ffe67f8feb4,580749321,0,0x0,8
tick,0x7ffe67f8feb4,580765369,0,0x0,8
tick,0x7ffe67f8feb4,580780236,0,0x0,8
tick,0x7ffe67f8feb4,580795945,0,0x0,8
tick,0x7ffe67f8feb4,580811231,0,0x0,8
tick,0x7ffe67f8feb4,580827373,0,0x0,8
tick,0x7ffe67f8feb4,580843258,0,0x0,8
tick,0x7ffe67f8feb4,580859087,0,0x0,8
tick,0x7ffe67f8feb4,580874285,0,0x0,8
tick,0x7ffe67f8feb4,580889406,0,0x0,8
tick,0x7ffe67f8feb4,580905343,0,0x0,8
tick,0x7ffe67f8feb4,580920511,0,0x0,8
tick,0x7ffe67f8feb4,580936115,0,0x0,8
tick,0x7ffe67f8feb4,580952099,0,0x0,8
tick,0x7ffe67f8feb4,580967333,0,0x0,8
tick,0x7ffe67f8feb4,580983606,0,0x0,8
tick,0x7ffe67f8feb4,580998834,0,0x0,8
tick,0x7ffe67f8feb4,581014236,0,0x0,8
tick,0x7ffe67f8feb4,581030338,0,0x0,8
tick,0x7ffe67f8feb4,581045981,0,0x0,8
tick,0x7ffe67f8feb4,581062013,0,0x0,8
tick,0x7ffe67f8feb4,581077537,0,0x0,8
tick,0x7ffe67f8feb4,581093002,0,0x0,8
tick,0x7ffe67f8feb4,581108349,0,0x0,8
tick,0x7ffe67f8feb4,581123928,0,0x0,8
tick,0x7ffe67f8feb4,581139946,0,0x0,8
tick,0x7ffe67f8feb4,581155662,0,0x0,8
tick,0x7ffe67f8feb4,581171191,0,0x0,8
tick,0x7ffe67f8feb4,581186916,0,0x0,8
tick,0x7ffe67f8feb4,581202405,0,0x0,8
tick,0x7ffe67f8feb4,581217636,0,0x0,8
tick,0x7ffe67f8feb4,581232454,0,0x0,8
tick,0x7ffe67f8feb4,581247643,0,0x0,8
tick,0x7ffe67f8feb4,581262884,0,0x0,8
tick,0x7ffe67f8feb4,581278701,0,0x0,8
tick,0x7ffe67f8feb4,581293459,0,0x0,8
tick,0x7ffe67f8feb4,581309259,0,0x0,8
tick,0x7ffe67f8feb4,581324812,0,0x0,8
tick,0x7ffe67f8feb4,581340635,0,0x0,8
tick,0x7ffe67f8feb4,581356776,0,0x0,8
tick,0x7ffe67f8feb4,581372244,0,0x0,8
tick,0x7ffe67f8feb4,581387651,0,0x0,8
tick,0x7ffe67f8feb4,581402780,0,0x0,8
tick,0x7ffe67f8feb4,581418775,0,0x0,8
tick,0x7ffe67f8feb4,581434019,0,0x0,8
tick,0x7ffe67f8feb4,581450174,0,0x0,8
tick,0x7ffe67f8feb4,581465398,0,0x0,8
tick,0x7ffe67f8feb4,581480891,0,0x0,8
tick,0x7ffe67f8feb4,581496408,0,0x0,8
tick,0x7ffe67f8feb4,581512422,0,0x0,8
tick,0x7ffe67f8feb4,581527981,0,0x0,8
tick,0x7ffe67f8feb4,581543935,0,0x0,8
tick,0x7ffe67f8feb4,581558898,0,0x0,8
tick,0x7ffe67f8feb4,581574890,0,0x0,8
tick,0x7ffe67f8feb4,581590898,0,0x0,8
tick,0x7ffe67f8feb4,581606913,0,0x0,8
tick,0x7ffe67f8feb4,581622804,0,0x0,8
tick,0x7ffe67f8feb4,581638922,0,0x0,8
tick,0x7ffe67f8feb4,581654890,0,0x0,8
tick,0x7ffe67f8feb4,581670938,0,0x0,8
tick,0x7ffe67f8feb4,581686927,0,0x0,8
tick,0x7ffe67f8feb4,581702948,0,0x0,8
tick,0x7ffe67f8feb4,581718059,0,0x0,8
tick,0x7ffe67f8feb4,581733936,0,0x0,8
tick,0x7ffe67f8feb4,581749948,0,0x0,8
tick,0x7ffe67f8feb4,581764987,0,0x0,8
tick,0x7ffe67f8feb4,581781024,0,0x0,8
tick,0x7ffe67f8feb4,581797650,0,0x0,8
tick,0x7ffe67f8feb4,581812961,0,0x0,8
tick,0x7ffe67f8feb4,581828974,0,0x0,8
tick,0x7ffe67f8feb4,581844967,0,0x0,8
tick,0x7ffe67f8feb4,581861012,0,0x0,8
tick,0x7ffe67f8feb4,581876825,0,0x0,8
tick,0x7ffe67f8feb4,581892500,0,0x0,8
tick,0x7ffe67f8feb4,581908153,0,0x0,8
tick,0x7ffe67f8feb4,581923472,0,0x0,8
tick,0x7ffe67f8feb4,581939108,0,0x0,8
tick,0x7ffe67f8feb4,581954181,0,0x0,8
tick,0x7ffe67f8feb4,581969939,0,0x0,8
tick,0x7ffe67f8feb4,581984905,0,0x0,8
tick,0x7ffe67f8feb4,582000321,0,0x0,8
tick,0x7ffe67f8feb4,582016218,0,0x0,8
tick,0x7ffe67f8feb4,582031496,0,0x0,8
tick,0x7ffe67f8feb4,582047048,0,0x0,8
tick,0x7ffe67f8feb4,582062985,0,0x0,8
tick,0x7ffe67f8feb4,582079010,0,0x0,8
tick,0x7ffe67f8feb4,582095016,0,0x0,8
tick,0x7ffe67f8feb4,582110666,0,0x0,8
tick,0x7ffe67f8feb4,582127033,0,0x0,8
tick,0x7ffe67f8feb4,582142522,0,0x0,8
tick,0x7ffe67f8feb4,582157632,0,0x0,8
tick,0x7ffe67f8feb4,582172683,0,0x0,8
tick,0x7ffe67f8feb4,582188753,0,0x0,8
tick,0x7ffe67f8feb4,582203771,0,0x0,8
tick,0x7ffe67f8feb4,582219739,0,0x0,8
tick,0x7ffe67f8feb4,582235704,0,0x0,8
tick,0x7ffe67f8feb4,582251706,0,0x0,8
tick,0x7ffe67f8feb4,582267692,0,0x0,8
tick,0x7ffe67f8feb4,582283715,0,0x0,8
tick,0x7ffe67f8feb4,582299699,0,0x0,8
tick,0x7ffe67f8feb4,582315717,0,0x0,8
tick,0x7ffe67f8feb4,582331701,0,0x0,8
tick,0x7ffe67f8feb4,582347714,0,0x0,8
tick,0x7ffe67f8feb4,582363154,0,0x0,8
tick,0x7ffe67f8feb4,582378736,0,0x0,8
tick,0x7ffe67f8feb4,582394747,0,0x0,8
tick,0x7ffe67f8feb4,582409941,0,0x0,8
tick,0x7ffe67f8feb4,582425595,0,0x0,8
tick,0x7ffe67f8feb4,582441469,0,0x0,8
tick,0x7ffe67f8feb4,582456708,0,0x0,8
tick,0x7ffe67f8feb4,582472398,0,0x0,8
tick,0x7ffe67f8feb4,582488437,0,0x0,8
tick,0x7ffe67f8feb4,582503890,0,0x0,8
tick,0x7ffe67f8feb4,582519299,0,0x0,8
tick,0x7ffe67f8feb4,582535504,0,0x0,8
tick,0x7ffe67f8feb4,582550858,0,0x0,8
tick,0x7ffe67f8feb4,582566900,0,0x0,8
tick,0x7ffe67f8feb4,582582854,0,0x0,8
tick,0x7ffe67f8feb4,582598878,0,0x0,8
tick,0x7ffe67f8feb4,582614825,0,0x0,8
tick,0x7ffe67f8feb4,582630804,0,0x0,8
tick,0x7ffe67f8feb4,582646951,0,0x0,8
tick,0x7ffe67f8feb4,582663433,0,0x0,8
tick,0x7ffe67f8feb4,582678934,0,0x0,8
tick,0x7ffe67f8feb4,582694852,0,0x0,8
tick,0x7ffe67f8feb4,582710169,0,0x0,8
tick,0x7ffe67f8feb4,582725247,0,0x0,8
tick,0x7ffe67f8feb4,582741189,0,0x0,8
tick,0x7ffe67f8feb4,582757008,0,0x0,8
tick,0x7ffe67f8feb4,582772145,0,0x0,8
tick,0x7ffe67f8feb4,582787995,0,0x0,8
tick,0x7ffe67f8feb4,582804002,0,0x0,8
tick,0x7ffe67f8feb4,582820039,0,0x0,8
tick,0x7ffe67f8feb4,582836026,0,0x0,8
tick,0x7ffe67f8feb4,582852049,0,0x0,8
tick,0x7ffe67f8feb4,582868029,0,0x0,8
tick,0x7ffe67f8feb4,582884046,0,0x0,8
tick,0x7ffe67f8feb4,582900042,0,0x0,8
tick,0x7ffe67f8feb4,582916105,0,0x0,8
tick,0x7ffe67f8feb4,582931604,0,0x0,8
tick,0x7ffe67f8feb4,582946432,0,0x0,8
tick,0x7ffe67f8feb4,582962402,0,0x0,8
tick,0x7ffe67f8feb4,582978533,0,0x0,8
tick,0x7ffe67f8feb4,582994325,0,0x0,8
tick,0x7ffe67f8feb4,583009399,0,0x0,8
tick,0x7ffe67f8feb4,583024940,0,0x0,8
tick,0x7ffe67f8feb4,583040509,0,0x0,8
tick,0x7ffe67f8feb4,583056403,0,0x0,8
tick,0x7ffe67f8feb4,583072513,0,0x0,8
tick,0x7ffe67f8feb4,583087953,0,0x0,8
tick,0x7ffe67f8feb4,583104184,0,0x0,8
tick,0x7ffe67f8feb4,583119326,0,0x0,8
tick,0x7ffe67f8feb4,583135594,0,0x0,8
tick,0x7ffe67f8feb4,583151355,0,0x0,8
tick,0x7ffe67f8feb4,583167025,0,0x0,8
tick,0x7ffe67f8feb4,583182560,0,0x0,8
tick,0x7ffe67f8feb4,583197719,0,0x0,8
tick,0x7ffe67f8feb4,583213707,0,0x0,8
tick,0x7ffe67f8feb4,583229536,0,0x0,8
tick,0x7ffe67f8feb4,583244782,0,0x0,8
tick,0x7ffe67f8feb4,583260679,0,0x0,8
tick,0x7ffe67f8feb4,583276448,0,0x0,8
tick,0x7ffe67f8feb4,583291977,0,0x0,8
tick,0x7ffe67f8feb4,583307166,0,0x0,8
tick,0x7ffe67f8feb4,583322140,0,0x0,8
tick,0x7ffe67f8feb4,583337745,0,0x0,8
tick,0x7ffe67f8feb4,583353506,0,0x0,8
tick,0x7ffe67f8feb4,583369448,0,0x0,8
tick,0x7ffe67f8feb4,583384818,0,0x0,8
tick,0x7ffe67f8feb4,583400131,0,0x0,8
tick,0x7ffe67f8feb4,583416368,0,0x0,8
tick,0x7ffe67f8feb4,583432124,0,0x0,8
tick,0x7ffe67f8feb4,583448218,0,0x0,8
tick,0x7ffe67f8feb4,583464115,0,0x0,8
tick,0x7ffe67f8feb4,583480163,0,0x0,8
tick,0x7ffe67f8feb4,583495460,0,0x0,8
tick,0x7ffe67f8feb4,583510946,0,0x0,8
tick,0x7ffe67f8feb4,583526601,0,0x0,8
tick,0x7ffe67f8feb4,583542704,0,0x0,8
tick,0x7ffe67f8feb4,583557751,0,0x0,8
tick,0x7ffe67f8feb4,583573712,0,0x0,8
tick,0x7ffe67f8feb4,583588724,0,0x0,8
tick,0x7ffe67f8feb4,583604726,0,0x0,8
tick,0x7ffe67f8feb4,583620717,0,0x0,8
tick,0x7ffe67f8feb4,583636724,0,0x0,8
tick,0x7ffe67f8feb4,583652702,0,0x0,8
tick,0x7ffe67f8feb4,583668758,0,0x0,8
tick,0x7ffe67f8feb4,583683854,0,0x0,8
tick,0x7ffe67f8feb4,583699852,0,0x0,8
tick,0x7ffe67f8feb4,583715950,0,0x0,8
tick,0x7ffe67f8feb4,583732085,0,0x0,8
tick,0x7ffe67f8feb4,583748021,0,0x0,8
tick,0x7ffe67f8feb4,583764025,0,0x0,8
tick,0x7ffe67f8feb4,583779670,0,0x0,8
tick,0x7ffe67f8feb4,583795191,0,0x0,8
tick,0x7ffe67f8feb4,583810188,0,0x0,8
tick,0x7ffe67f8feb4,583825534,0,0x0,8
tick,0x7ffe67f8feb4,583841684,0,0x0,8
tick,0x7ffe67f8feb4,583856746,0,0x0,8
tick,0x7ffe67f8feb4,583872179,0,0x0,8
tick,0x7ffe67f8feb4,583887102,0,0x0,8
tick,0x7ffe67f8feb4,583902910,0,0x0,8
tick,0x7ffe67f8feb4,583918944,0,0x0,8
tick,0x7ffe67f8feb4,583934508,0,0x0,8
tick,0x7ffe67f8feb4,583950376,0,0x0,8
tick,0x7ffe67f8feb4,583966394,0,0x0,8
tick,0x7ffe67f8feb4,583982535,0,0x0,8
tick,0x7ffe67f8feb4,583997626,0,0x0,8
tick,0x7ffe67f8feb4,584013665,0,0x0,8
tick,0x7ffe67f8feb4,584029195,0,0x0,8
tick,0x7ffe67f8feb4,584044868,0,0x0,8
tick,0x7ffe67f8feb4,584060731,0,0x0,8
tick,0x7ffe67f8feb4,584075439,0,0x0,8
tick,0x7ffe67f8feb4,584090832,0,0x0,8
tick,0x7ffe67f8feb4,584106564,0,0x0,8
tick,0x7ffe67f8feb4,584122016,0,0x0,8
tick,0x7ffe67f8feb4,584137439,0,0x0,8
tick,0x7ffe67f8feb4,584153316,0,0x0,8
tick,0x7ffe67f8feb4,584169385,0,0x0,8
tick,0x7ffe67f8feb4,584184854,0,0x0,8
tick,0x7ffe67f8feb4,584200472,0,0x0,8
tick,0x7ffe67f8feb4,584216303,0,0x0,8
tick,0x7ffe67f8feb4,584232347,0,0x0,8
tick,0x7ffe67f8feb4,584248301,0,0x0,8
tick,0x7ffe67f8feb4,584264287,0,0x0,8
tick,0x7ffe67f8feb4,584280299,0,0x0,8
tick,0x7ffe67f8feb4,584296330,0,0x0,8
tick,0x7ffe67f8feb4,584314681,0,0x0,8
tick,0x7ffe67f8feb4,584328311,0,0x0,8
tick,0x7ffe67f8feb4,584343583,0,0x0,8
tick,0x7ffe67f8feb4,584359706,0,0x0,8
tick,0x7ffe67f8feb4,584375361,0,0x0,8
tick,0x7ffe67f8feb4,584390483,0,0x0,8
tick,0x7ffe67f8feb4,584406346,0,0x0,8
tick,0x7ffe67f8feb4,584422330,0,0x0,8
tick,0x7ffe67f8feb4,584438329,0,0x0,8
tick,0x7ffe67f8feb4,584454354,0,0x0,8
tick,0x7ffe67f8feb4,584470435,0,0x0,8
tick,0x7ffe67f8feb4,584486376,0,0x0,8
tick,0x7ffe67f8feb4,584502408,0,0x0,8
tick,0x7ffe67f8feb4,584518424,0,0x0,8
tick,0x7ffe67f8feb4,584534429,0,0x0,8
tick,0x7ffe67f8feb4,584550198,0,0x0,8
tick,0x7ffe67f8feb4,584566154,0,0x0,8
tick,0x7ffe67f8feb4,584582148,0,0x0,8
tick,0x7ffe67f8feb4,584598148,0,0x0,8
tick,0x7ffe67f8feb4,584614143,0,0x0,8
tick,0x7ffe67f8feb4,584630169,0,0x0,8
tick,0x7ffe67f8feb4,584646716,0,0x0,8
tick,0x7ffe67f8feb4,584662128,0,0x0,8
tick,0x7ffe67f8feb4,584678145,0,0x0,8
tick,0x7ffe67f8feb4,584693266,0,0x0,8
tick,0x7ffe67f8feb4,584709175,0,0x0,8
tick,0x7ffe67f8feb4,584724413,0,0x0,8
tick,0x7ffe67f8feb4,584740210,0,0x0,8
tick,0x7ffe67f8feb4,584756212,0,0x0,8
tick,0x7ffe67f8feb4,584771397,0,0x0,8
tick,0x7ffe67f8feb4,584786846,0,0x0,8
tick,0x7ffe67f8feb4,584802233,0,0x0,8
tick,0x7ffe67f8feb4,584818250,0,0x0,8
tick,0x7ffe67f8feb4,584834370,0,0x0,8
tick,0x7ffe67f8feb4,584850282,0,0x0,8
tick,0x7ffe67f8feb4,584866266,0,0x0,8
tick,0x7ffe67f8feb4,584881266,0,0x0,8
tick,0x7ffe67f8feb4,584897472,0,0x0,8
tick,0x7ffe67f8feb4,584913312,0,0x0,8
tick,0x7ffe67f8feb4,584929316,0,0x0,8
tick,0x7ffe67f8feb4,584945291,0,0x0,8
tick,0x7ffe67f8feb4,584960491,0,0x0,8
tick,0x7ffe67f8feb4,584976116,0,0x0,8
tick,0x7ffe67f8feb4,584991119,0,0x0,8
tick,0x7ffe67f8feb4,585005917,0,0x0,8
tick,0x7ffe67f8feb4,585021173,0,0x0,8
tick,0x7ffe67f8feb4,585036511,0,0x0,8
tick,0x7ffe67f8feb4,585052482,0,0x0,8
tick,0x7ffe67f8feb4,585068793,0,0x0,8
tick,0x7ffe67f8feb4,585085324,0,0x0,8
tick,0x7ffe67f8feb4,585100483,0,0x0,8
tick,0x7ffe67f8feb4,585116793,0,0x0,8
tick,0x7ffe67f8feb4,585132550,0,0x0,8
tick,0x7ffe67f8feb4,585148753,0,0x0,8
tick,0x7ffe67f8feb4,585165067,0,0x0,8
tick,0x7ffe67f8feb4,585180924,0,0x0,8
tick,0x7ffe67f8feb4,585197158,0,0x0,8
tick,0x7ffe67f8feb4,585212481,0,0x0,8
tick,0x7ffe67f8feb4,585228474,0,0x0,8
tick,0x7ffe67f8feb4,585244509,0,0x0,8
tick,0x7ffe67f8feb4,585260474,0,0x0,8
tick,0x7ffe67f8feb4,585276527,0,0x0,8
tick,0x7ffe67f8feb4,585292481,0,0x0,8
tick,0x7ffe67f8feb4,585308526,0,0x0,8
tick,0x7ffe67f8feb4,585324497,0,0x0,8
tick,0x7ffe67f8feb4,585340511,0,0x0,8
tick,0x7ffe67f8feb4,585356644,0,0x0,8
tick,0x7ffe67f8feb4,585371501,0,0x0,8
tick,0x7ffe67f8feb4,585387508,0,0x0,8
tick,0x7ffe67f8feb4,585402908,0,0x0,8
tick,0x7ffe67f8feb4,585418520,0,0x0,8
tick,0x7ffe67f8feb4,585434605,0,0x0,8
tick,0x7ffe67f8feb4,585450198,0,0x0,8
tick,0x7ffe67f8feb4,585465519,0,0x0,8
tick,0x7ffe67f8feb4,585481534,0,0x0,8
tick,0x7ffe67f8feb4,585497605,0,0x0,8
tick,0x7ffe67f8feb4,585513381,0,0x0,8
tick,0x7ffe67f8feb4,585528565,0,0x0,8
tick,0x7ffe67f8feb4,585544540,0,0x0,8
tick,0x7ffe67f8feb4,585559961,0,0x0,8
tick,0x7ffe67f8feb4,585575552,0,0x0,8
tick,0x7ffe67f8feb4,585591565,0,0x0,8
tick,0x7ffe67f8feb4,585607532,0,0x0,8
tick,0x7ffe67f8feb4,585623546,0,0x0,8
tick,0x7ffe67f8feb4,585639591,0,0x0,8
tick,0x7ffe67f8feb4,585655554,0,0x0,8
tick,0x7ffe67f8feb4,585671545,0,0x0,8
tick,0x7ffe67f8feb4,585687531,0,0x0,8
tick,0x7ffe67f8feb4,585703533,0,0x0,8
tick,0x7ffe67f8feb4,585719554,0,0x0,8
tick,0x7ffe67f8feb4,585735600,0,0x0,8
tick,0x7ffe67f8feb4,585751203,0,0x0,8
tick,0x7ffe67f8feb4,585766592,0,0x0,8
tick,0x7ffe67f8feb4,585782633,0,0x0,8
tick,0x7ffe67f8feb4,585798670,0,0x0,8
tick,0x7ffe67f8feb4,585814632,0,0x0,8
tick,0x7ffe67f8feb4,585829735,0,0x0,8
tick,0x7ffe67f8feb4,585844886,0,0x0,8
tick,0x7ffe67f8feb4,585859987,0,0x0,8
tick,0x7ffe67f8feb4,585875965,0,0x0,8
tick,0x7ffe67f8feb4,585891157,0,0x0,8
tick,0x7ffe67f8feb4,585907249,0,0x0,8
tick,0x7ffe67f8feb4,585922583,0,0x0,8
tick,0x7ffe67f8feb4,585937872,0,0x0,8
tick,0x7ffe67f8feb4,585953791,0,0x0,8
tick,0x7ffe67f8feb4,585970070,0,0x0,8
tick,0x7ffe67f8feb4,585985594,0,0x0,8
tick,0x7ffe67f8feb4,586000595,0,0x0,8
tick,0x7ffe67f8feb4,586016591,0,0x0,8
tick,0x7ffe67f8feb4,586032602,0,0x0,8
tick,0x7ffe67f8feb4,586048106,0,0x0,8
tick,0x7ffe67f8feb4,586063523,0,0x0,8
tick,0x7ffe67f8feb4,586078703,0,0x0,8
tick,0x7ffe67f8feb4,586094295,0,0x0,8
tick,0x7ffe67f8feb4,586109698,0,0x0,8
tick,0x7ffe67f8feb4,586125667,0,0x0,8
tick,0x7ffe67f8feb4,586140943,0,0x0,8
tick,0x7ffe67f8feb4,586156252,0,0x0,8
tick,0x7ffe67f8feb4,586171508,0,0x0,8
tick,0x7ffe67f8feb4,586186799,0,0x0,8
tick,0x7ffe67f8feb4,586201997,0,0x0,8
tick,0x7ffe67f8feb4,586217703,0,0x0,8
tick,0x7ffe67f8feb4,586233658,0,0x0,8
tick,0x7ffe67f8feb4,586249622,0,0x0,8
tick,0x7ffe67f8feb4,586265633,0,0x0,8
tick,0x7ffe67f8feb4,586281660,0,0x0,8
tick,0x7ffe67f8feb4,586297898,0,0x0,8
tick,0x7ffe67f8feb4,586313647,0,0x0,8
tick,0x7ffe67f8feb4,586329638,0,0x0,8
tick,0x7ffe67f8feb4,586344662,0,0x0,8
tick,0x7ffe67f8feb4,586360590,0,0x0,8
tick,0x7ffe67f8feb4,586375792,0,0x0,8
tick,0x7ffe67f8feb4,586390716,0,0x0,8
tick,0x7ffe67f8feb4,586405995,0,0x0,8
tick,0x7ffe67f8feb4,586421256,0,0x0,8
tick,0x7ffe67f8feb4,586436782,0,0x0,8
tick,0x7ffe67f8feb4,586452082,0,0x0,8
tick,0x7ffe67f8feb4,586468181,0,0x0,8
tick,0x7ffe67f8feb4,586484290,0,0x0,8
tick,0x7ffe67f8feb4,586499546,0,0x0,8
tick,0x7ffe67f8feb4,586515658,0,0x0,8
tick,0x7ffe67f8feb4,586531436,0,0x0,8
tick,0x7ffe67f8feb4,586546423,0,0x0,8
tick,0x7ffe67f8feb4,586561732,0,0x0,8
tick,0x7ffe67f8feb4,586577728,0,0x0,8
tick,0x7ffe67f8feb4,586593702,0,0x0,8
tick,0x7ffe67f8feb4,586609685,0,0x0,8
tick,0x7ffe67f8feb4,586625686,0,0x0,8
tick,0x7ffe67f8feb4,586641683,0,0x0,8
tick,0x7ffe67f8feb4,586657713,0,0x0,8
tick,0x7ffe67f8feb4,586673700,0,0x0,8
tick,0x7ffe67f8feb4,586689679,0,0x0,8
tick,0x7ffe67f8feb4,586705655,0,0x0,8
tick,0x7ffe67f8feb4,586721708,0,0x0,8
tick,0x7ffe67f8feb4,586737702,0,0x0,8
tick,0x7ffe67f8feb4,586752955,0,0x0,8
tick,0x7ffe67f8feb4,586768728,0,0x0,8
tick,0x7ffe67f8feb4,586784576,0,0x0,8
tick,0x7ffe67f8feb4,586799756,0,0x0,8
tick,0x7ffe67f8feb4,586815694,0,0x0,8
tick,0x7ffe67f8feb4,586831718,0,0x0,8
tick,0x7ffe67f8feb4,586847744,0,0x0,8
tick,0x7ffe67f8feb4,586863721,0,0x0,8
tick,0x7ffe67f8feb4,586879550,0,0x0,8
tick,0x7ffe67f8feb4,586894728,0,0x0,8
tick,0x7ffe67f8feb4,586910727,0,0x0,8
tick,0x7ffe67f8feb4,586926710,0,0x0,8
tick,0x7ffe67f8feb4,586942728,0,0x0,8
tick,0x7ffe67f8feb4,586958736,0,0x0,8
tick,0x7ffe67f8feb4,586974550,0,0x0,8
tick,0x7ffe67f8feb4,586989766,0,0x0,8
tick,0x7ffe67f8feb4,587005733,0,0x0,8
tick,0x7ffe67f8feb4,587021859,0,0x0,8
tick,0x7ffe67f8feb4,587037278,0,0x0,8
tick,0x7ffe67f8feb4,587053177,0,0x0,8
tick,0x7ffe67f8feb4,587068990,0,0x0,8
tick,0x7ffe67f8feb4,587084145,0,0x0,8
tick,0x7ffe67f8feb4,587100053,0,0x0,8
tick,0x7ffe67f8feb4,587115605,0,0x0,8
tick,0x7ffe67f8feb4,587131485,0,0x0,8
tick,0x7ffe67f8feb4,587147391,0,0x0,8
tick,0x7ffe67f8feb4,587162859,0,0x0,8
tick,0x7ffe67f8feb4,587178197,0,0x0,8
tick,0x7ffe67f8feb4,587193724,0,0x0,8
tick,0x7ffe67f8feb4,587209205,0,0x0,8
tick,0x7ffe67f8feb4,587225076,0,0x0,8
tick,0x7ffe67f8feb4,587240398,0,0x0,8
tick,0x7ffe67f8feb4,587255772,0,0x0,8
tick,0x7ffe67f8feb4,587271357,0,0x0,8
tick,0x7ffe67f8feb4,587286860,0,0x0,8
tick,0x7ffe67f8feb4,587302816,0,0x0,8
tick,0x7ffe67f8feb4,587318650,0,0x0,8
tick,0x7ffe67f8feb4,587334661,0,0x0,8
tick,0x7ffe67f8feb4,587350684,0,0x0,8
tick,0x7ffe67f8feb4,587365990,0,0x0,8
tick,0x7ffe67f8feb4,587381604,0,0x0,8
tick,0x7ffe67f8feb4,587397499,0,0x0,8
tick,0x7ffe67f8feb4,587413101,0,0x0,8
tick,0x7ffe67f8feb4,587428172,0,0x0,8
tick,0x7ffe67f8feb4,587442940,0,0x0,8
tick,0x7ffe67f8feb4,587458939,0,0x0,8
tick,0x7ffe67f8feb4,587475008,0,0x0,8
tick,0x7ffe67f8feb4,587491001,0,0x0,8
tick,0x7ffe67f8feb4,587507007,0,0x0,8
tick,0x7ffe67f8feb4,587522631,0,0x0,8
tick,0x7ffe67f8feb4,587537995,0,0x0,8
tick,0x7ffe67f8feb4,587553447,0,0x0,8
tick,0x7ffe67f8feb4,587568779,0,0x0,8
tick,0x7ffe67f8feb4,587584758,0,0x0,8
tick,0x7ffe67f8feb4,587600724,0,0x0,8
tick,0x7ffe67f8feb4,587616740,0,0x0,8
tick,0x7ffe67f8feb4,587632723,0,0x0,8
tick,0x7ffe67f8feb4,587648677,0,0x0,8
tick,0x7ffe67f8feb4,587664768,0,0x0,8
tick,0x7ffe67f8feb4,587680710,0,0x0,8
tick,0x7ffe67f8feb4,587696850,0,0x0,8
tick,0x7ffe67f8feb4,587712843,0,0x0,8
tick,0x7ffe67f8feb4,587728849,0,0x0,8
tick,0x7ffe67f8feb4,587744131,0,0x0,8
tick,0x7ffe67f8feb4,587759903,0,0x0,8
tick,0x7ffe67f8feb4,587775930,0,0x0,8
tick,0x7ffe67f8feb4,587791046,0,0x0,8
tick,0x7ffe67f8feb4,587806507,0,0x0,8
tick,0x7ffe67f8feb4,587821736,0,0x0,8
tick,0x7ffe67f8feb4,587837805,0,0x0,8
tick,0x7ffe67f8feb4,587853193,0,0x0,8
tick,0x7ffe67f8feb4,587868830,0,0x0,8
tick,0x7ffe67f8feb4,587884870,0,0x0,8
tick,0x7ffe67f8feb4,587900944,0,0x0,8
tick,0x7ffe67f8feb4,587916234,0,0x0,8
tick,0x7ffe67f8feb4,587931629,0,0x0,8
tick,0x7ffe67f8feb4,587947265,0,0x0,8
tick,0x7ffe67f8feb4,587963046,0,0x0,8
tick,0x7ffe67f8feb4,587978646,0,0x0,8
tick,0x7ffe67f8feb4,587994275,0,0x0,8
tick,0x7ffe67f8feb4,588010329,0,0x0,8
tick,0x7ffe67f8feb4,588025523,0,0x0,8
tick,0x7ffe67f8feb4,588040645,0,0x0,8
tick,0x7ffe67f8feb4,588056898,0,0x0,8
tick,0x7ffe67f8feb4,588072022,0,0x0,8
tick,0x7ffe67f8feb4,588087561,0,0x0,8
tick,0x7ffe67f8feb4,588103164,0,0x0,8
tick,0x7ffe67f8feb4,588119056,0,0x0,8
tick,0x7ffe67f8feb4,588134822,0,0x0,8
tick,0x7ffe67f8feb4,588150552,0,0x0,8
tick,0x7ffe67f8feb4,588166109,0,0x0,8
tick,0x7ffe67f8feb4,588181474,0,0x0,8
tick,0x7ffe67f8feb4,588196786,0,0x0,8
tick,0x7ffe67f8feb4,588212550,0,0x0,8
tick,0x7ffe67f8feb4,588228529,0,0x0,8
tick,0x7ffe67f8feb4,588244693,0,0x0,8
tick,0x7ffe67f8feb4,588259744,0,0x0,8
tick,0x7ffe67f8feb4,588274757,0,0x0,8
tick,0x7ffe67f8feb4,588290279,0,0x0,8
tick,0x7ffe67f8feb4,588305611,0,0x0,8
tick,0x7ffe67f8feb4,588320945,0,0x0,8
tick,0x7ffe67f8feb4,588336147,0,0x0,8
tick,0x7ffe67f8feb4,588351658,0,0x0,8
tick,0x7ffe67f8feb4,588366859,0,0x0,8
tick,0x7ffe67f8feb4,588381835,0,0x0,8
tick,0x7ffe67f8feb4,588397494,0,0x0,8
tick,0x7ffe67f8feb4,588413133,0,0x0,8
tick,0x7ffe67f8feb4,588429041,0,0x0,8
tick,0x7ffe67f8feb4,588444452,0,0x0,8
tick,0x7ffe67f8feb4,588459965,0,0x0,8
tick,0x7ffe67f8feb4,588475629,0,0x0,8
tick,0x7ffe67f8feb4,588490953,0,0x0,8
tick,0x7ffe67f8feb4,588506592,0,0x0,8
tick,0x7ffe67f8feb4,588521920,0,0x0,8
tick,0x7ffe67f8feb4,588536908,0,0x0,8
tick,0x7ffe67f8feb4,588552684,0,0x0,8
tick,0x7ffe67f8feb4,588568734,0,0x0,8
tick,0x7ffe67f8feb4,588585098,0,0x0,8
tick,0x7ffe67f8feb4,588600703,0,0x0,8
tick,0x7ffe67f8feb4,588615664,0,0x0,8
tick,0x7ffe67f8feb4,588631680,0,0x0,8
tick,0x7ffe67f8feb4,588647733,0,0x0,8
tick,0x7ffe67f8feb4,588663699,0,0x0,8
tick,0x7ffe67f8feb4,588679699,0,0x0,8
tick,0x7ffe67f8feb4,588695693,0,0x0,8
tick,0x7ffe67f8feb4,588711721,0,0x0,8
tick,0x7ffe67f8feb4,588727710,0,0x0,8
tick,0x7ffe67f8feb4,588743533,0,0x0,8
tick,0x7ffe67f8feb4,588759211,0,0x0,8
tick,0x7ffe67f8feb4,588775212,0,0x0,8
tick,0x7ffe67f8feb4,588790746,0,0x0,8
tick,0x7ffe67f8feb4,588806043,0,0x0,8
tick,0x7ffe67f8feb4,588822301,0,0x0,8
tick,0x7ffe67f8feb4,588837203,0,0x0,8
tick,0x7ffe67f8feb4,588852499,0,0x0,8
tick,0x7ffe67f8feb4,588868228,0,0x0,8
tick,0x7ffe67f8feb4,588883715,0,0x0,8
tick,0x7ffe67f8feb4,588899001,0,0x0,8
tick,0x7ffe67f8feb4,588914402,0,0x0,8
tick,0x7ffe67f8feb4,588929933,0,0x0,8
tick,0x7ffe67f8feb4,588945855,0,0x0,8
tick,0x7ffe67f8feb4,588961576,0,0x0,8
tick,0x7ffe67f8feb4,588977102,0,0x0,8
tick,0x7ffe67f8feb4,588992989,0,0x0,8
tick,0x7ffe67f8feb4,589008959,0,0x0,8
tick,0x7ffe67f8feb4,589024002,0,0x0,8
tick,0x7ffe67f8feb4,589040044,0,0x0,8
tick,0x7ffe67f8feb4,589055947,0,0x0,8
tick,0x7ffe67f8feb4,589071481,0,0x0,8
tick,0x7ffe67f8feb4,589086475,0,0x0,8
tick,0x7ffe67f8feb4,589101683,0,0x0,8
tick,0x7ffe67f8feb4,589117148,0,0x0,8
tick,0x7ffe67f8feb4,589132624,0,0x0,8
tick,0x7ffe67f8feb4,589148537,0,0x0,8
tick,0x7ffe67f8feb4,589163986,0,0x0,8
tick,0x7ffe67f8feb4,589179628,0,0x0,8
tick,0x7ffe67f8feb4,589195135,0,0x0,8
tick,0x7ffe67f8feb4,589210554,0,0x0,8
tick,0x7ffe67f8feb4,589226126,0,0x0,8
tick,0x7ffe67f8feb4,589241485,0,0x0,8
tick,0x7ffe67f8feb4,589257591,0,0x0,8
tick,0x7ffe67f8feb4,589273326,0,0x0,8
tick,0x7ffe67f8feb4,589289211,0,0x0,8
tick,0x7ffe67f8feb4,589304543,0,0x0,8
tick,0x7ffe67f8feb4,589320170,0,0x0,8
tick,0x7ffe67f8feb4,589335544,0,0x0,8
tick,0x7ffe67f8feb4,589351212,0,0x0,8
tick,0x7ffe67f8feb4,589367071,0,0x0,8
tick,0x7ffe67f8feb4,589382715,0,0x0,8
tick,0x7ffe67f8feb4,589397569,0,0x0,8
tick,0x7ffe67f8feb4,589412873,0,0x0,8
tick,0x7ffe67f8feb4,589428362,0,0x0,8
tick,0x7ffe67f8feb4,589444227,0,0x0,8
tick,0x7ffe67f8feb4,589460008,0,0x0,8
tick,0x7ffe67f8feb4,589476366,0,0x0,8
tick,0x7ffe67f8feb4,589492147,0,0x0,8
tick,0x7ffe67f8feb4,589507709,0,0x0,8
tick,0x7ffe67f8feb4,589523403,0,0x0,8
tick,0x7ffe67f8feb4,589539470,0,0x0,8
tick,0x7ffe67f8feb4,589555441,0,0x0,8
tick,0x7ffe67f8feb4,589571399,0,0x0,8
tick,0x7ffe67f8feb4,589587476,0,0x0,8
tick,0x7ffe67f8feb4,589603556,0,0x0,8
tick,0x7ffe67f8feb4,589619422,0,0x0,8
tick,0x7ffe67f8feb4,589635624,0,0x0,8
tick,0x7ffe67f8feb4,589650732,0,0x0,8
tick,0x7ffe67f8feb4,589666459,0,0x0,8
tick,0x7ffe67f8feb4,589682411,0,0x0,8
tick,0x7ffe67f8feb4,589698484,0,0x0,8
tick,0x7ffe67f8feb4,589714423,0,0x0,8
tick,0x7ffe67f8feb4,589730445,0,0x0,8
tick,0x7ffe67f8feb4,589746456,0,0x0,8
tick,0x7ffe67f8feb4,589762459,0,0x0,8
tick,0x7ffe67f8feb4,589778521,0,0x0,8
tick,0x7ffe67f8feb4,589794450,0,0x0,8
tick,0x7ffe67f8feb4,589810456,0,0x0,8
tick,0x7ffe67f8feb4,589826248,0,0x0,8
tick,0x7ffe67f8feb4,589842359,0,0x0,8
tick,0x7ffe67f8feb4,589858294,0,0x0,8
tick,0x7ffe67f8feb4,589874305,0,0x0,8
tick,0x7ffe67f8feb4,589890264,0,0x0,8
tick,0x7ffe67f8feb4,589906350,0,0x0,8
tick,0x7ffe67f8feb4,589921306,0,0x0,8
tick,0x7ffe67f8feb4,589937346,0,0x0,8
tick,0x7ffe67f8feb4,589953405,0,0x0,8
tick,0x7ffe67f8feb4,589969498,0,0x0,8
tick,0x7ffe67f8feb4,589985537,0,0x0,8
tick,0x7ffe67f8feb4,590001604,0,0x0,8
tick,0x7ffe67f8feb4,590016405,0,0x0,8
tick,0x7ffe67f8feb4,590032388,0,0x0,8
tick,0x7ffe67f8feb4,590048426,0,0x0,8
tick,0x7ffe67f8feb4,590064403,0,0x0,8
tick,0x7ffe67f8feb4,590080384,0,0x0,8
tick,0x7ffe67f8feb4,590096028,0,0x0,8
tick,0x7ffe67f8feb4,590111113,0,0x0,8
tick,0x7ffe67f8feb4,590126381,0,0x0,8
tick,0x7ffe67f8feb4,590142049,0,0x0,8
tick,0x7ffe67f8feb4,590158060,0,0x0,8
tick,0x7ffe67f8feb4,590173720,0,0x0,8
tick,0x7ffe67f8feb4,590189074,0,0x0,8
tick,0x7ffe67f8feb4,590205108,0,0x0,8
tick,0x7ffe67f8feb4,590220208,0,0x0,8
tick,0x7ffe67f8feb4,590236273,0,0x0,8
tick,0x7ffe67f8feb4,590252332,0,0x0,8
tick,0x7ffe67f8feb4,590268321,0,0x0,8
tick,0x7ffe67f8feb4,590284169,0,0x0,8
tick,0x7ffe67f8feb4,590300201,0,0x0,8
tick,0x7ffe67f8feb4,590316202,0,0x0,8
tick,0x7ffe67f8feb4,590332200,0,0x0,8
tick,0x7ffe67f8feb4,590348206,0,0x0,8
tick,0x7ffe67f8feb4,590363556,0,0x0,8
tick,0x7ffe67f8feb4,590379257,0,0x0,8
tick,0x7ffe67f8feb4,590395319,0,0x0,8
tick,0x7ffe67f8feb4,590410566,0,0x0,8
tick,0x7ffe67f8feb4,590426242,0,0x0,8
tick,0x7ffe67f8feb4,590441282,0,0x0,8
tick,0x7ffe67f8feb4,590456875,0,0x0,8
tick,0x7ffe67f8feb4,590472092,0,0x0,8
tick,0x7ffe67f8feb4,590487627,0,0x0,8
tick,0x7ffe67f8feb4,590503585,0,0x0,8
tick,0x7ffe67f8feb4,590518784,0,0x0,8
tick,0x7ffe67f8feb4,590534133,0,0x0,8
tick,0x7ffe67f8feb4,590550148,0,0x0,8
tick,0x7ffe67f8feb4,590565624,0,0x0,8
tick,0x7ffe67f8feb4,590581119,0,0x0,8
tick,0x7ffe67f8feb4,590596728,0,0x0,8
tick,0x7ffe67f8feb4,590612310,0,0x0,8
tick,0x7ffe67f8feb4,590628315,0,0x0,8
tick,0x7ffe67f8feb4,590644284,0,0x0,8
tick,0x7ffe67f8feb4,590659303,0,0x0,8
tick,0x7ffe67f8feb4,590675330,0,0x0,8
tick,0x7ffe67f8feb4,590691369,0,0x0,8
tick,0x7ffe67f8feb4,590707410,0,0x0,8
tick,0x7ffe67f8feb4,590722978,0,0x0,8
tick,0x7ffe67f8feb4,590738705,0,0x0,8
tick,0x7ffe67f8feb4,590754676,0,0x0,8
tick,0x7ffe67f8feb4,590770065,0,0x0,8
tick,0x7ffe67f8feb4,590785574,0,0x0,8
tick,0x7ffe67f8feb4,590800585,0,0x0,8
tick,0x7ffe67f8feb4,590816592,0,0x0,8
tick,0x7ffe67f8feb4,590832075,0,0x0,8
tick,0x7ffe67f8feb4,590848027,0,0x0,8
tick,0x7ffe67f8feb4,590863142,0,0x0,8
tick,0x7ffe67f8feb4,590878090,0,0x0,8
tick,0x7ffe67f8feb4,590893369,0,0x0,8
tick,0x7ffe67f8feb4,590908912,0,0x0,8
tick,0x7ffe67f8feb4,590924791,0,0x0,8
tick,0x7ffe67f8feb4,590940851,0,0x0,8
tick,0x7ffe67f8feb4,590956102,0,0x0,8
tick,0x7ffe67f8feb4,590971107,0,0x0,8
tick,0x7ffe67f8feb4,590987087,0,0x0,8
tick,0x7ffe67f8feb4,591002867,0,0x0,8
tick,0x7ffe67f8feb4,591018607,0,0x0,8
tick,0x7ffe67f8feb4,591034726,0,0x0,8
tick,0x7ffe67f8feb4,591050458,0,0x0,8
tick,0x7ffe67f8feb4,591066464,0,0x0,8
tick,0x7ffe67f8feb4,591082089,0,0x0,8
tick,0x7ffe67f8feb4,591097018,0,0x0,8
tick,0x7ffe67f8feb4,591112543,0,0x0,8
tick,0x7ffe67f8feb4,591127592,0,0x0,8
tick,0x7ffe67f8feb4,591143853,0,0x0,8
tick,0x7ffe67f8feb4,591159919,0,0x0,8
tick,0x7ffe67f8feb4,591174850,0,0x0,8
tick,0x7ffe67f8feb4,591190896,0,0x0,8
tick,0x7ffe67f8feb4,591206809,0,0x0,8
tick,0x7ffe67f8feb4,591222789,0,0x0,8
tick,0x7ffe67f8feb4,591238825,0,0x0,8
tick,0x7ffe67f8feb4,591255121,0,0x0,8
tick,0x7ffe67f8feb4,591270843,0,0x0,8
tick,0x7ffe67f8feb4,591286301,0,0x0,8
tick,0x7ffe67f8feb4,591301637,0,0x0,8
tick,0x7ffe67f8feb4,591317592,0,0x0,8
tick,0x7ffe67f8feb4,591332806,0,0x0,8
tick,0x7ffe67f8feb4,591348174,0,0x0,8
tick,0x7ffe67f8feb4,591363305,0,0x0,8
tick,0x7ffe67f8feb4,591378302,0,0x0,8
tick,0x7ffe67f8feb4,591393666,0,0x0,8
tick,0x7ffe67f8feb4,591409811,0,0x0,8
tick,0x7ffe67f8feb4,591424803,0,0x0,8
tick,0x7ffe67f8feb4,591440759,0,0x0,8
tick,0x7ffe67f8feb4,591456433,0,0x0,8
tick,0x7ffe67f8feb4,591471976,0,0x0,8
tick,0x7ffe67f8feb4,591487979,0,0x0,8
tick,0x7ffe67f8feb4,591504002,0,0x0,8
tick,0x7ffe67f8feb4,591520430,0,0x0,8
tick,0x7ffe67f8feb4,591535353,0,0x0,8
tick,0x7ffe67f8feb4,591550637,0,0x0,8
tick,0x7ffe67f8feb4,591566887,0,0x0,8
tick,0x7ffe67f8feb4,591582189,0,0x0,8
tick,0x7ffe67f8feb4,591597048,0,0x0,8
tick,0x7ffe67f8feb4,591612066,0,0x0,8
tick,0x7ffe67f8feb4,591628021,0,0x0,8
tick,0x7ffe67f8feb4,591643029,0,0x0,8
tick,0x7ffe67f8feb4,591659048,0,0x0,8
tick,0x7ffe67f8feb4,591674428,0,0x0,8
tick,0x7ffe67f8feb4,591690028,0,0x0,8
tick,0x7ffe67f8feb4,591705258,0,0x0,8
tick,0x7ffe67f8feb4,591721078,0,0x0,8
tick,0x7ffe67f8feb4,591737078,0,0x0,8
tick,0x7ffe67f8feb4,591752611,0,0x0,8
tick,0x7ffe67f8feb4,591768715,0,0x0,8
tick,0x7ffe67f8feb4,591784303,0,0x0,8
tick,0x7ffe67f8feb4,591821067,0,0x0,8
tick,0x7ffe67f8feb4,591831182,0,0x0,8
tick,0x7ffe67f8feb4,591846242,0,0x0,8
tick,0x7ffe67f8feb4,591862202,0,0x0,8
tick,0x7ffe67f8feb4,591877744,0,0x0,8
tick,0x7ffe67f8feb4,591893728,0,0x0,8
tick,0x7ffe67f8feb4,591909759,0,0x0,8
tick,0x7ffe67f8feb4,591925144,0,0x0,8
tick,0x7ffe67f8feb4,591940775,0,0x0,8
tick,0x7ffe67f8feb4,591956501,0,0x0,8
tick,0x7ffe67f8feb4,591972205,0,0x0,8
tick,0x7ffe67f8feb4,591987870,0,0x0,8
tick,0x7ffe67f8feb4,592003332,0,0x0,8
tick,0x7ffe67f8feb4,592018896,0,0x0,8
tick,0x7ffe67f8feb4,592034904,0,0x0,8
tick,0x7ffe67f8feb4,592049967,0,0x0,8
tick,0x7ffe67f8feb4,592065114,0,0x0,8
tick,0x7ffe67f8feb4,592081186,0,0x0,8
tick,0x7ffe67f8feb4,592096112,0,0x0,8
tick,0x7ffe67f8feb4,592112116,0,0x0,8
tick,0x7ffe67f8feb4,592127189,0,0x0,8
tick,0x7ffe67f8feb4,592143146,0,0x0,8
tick,0x7ffe67f8feb4,592159136,0,0x0,8
tick,0x7ffe67f8feb4,592175122,0,0x0,8
tick,0x7ffe67f8feb4,592191119,0,0x0,8
tick,0x7ffe67f8feb4,592206145,0,0x0,8
tick,0x7ffe67f8feb4,592222144,0,0x0,8
tick,0x7ffe67f8feb4,592238133,0,0x0,8
tick,0x7ffe67f8feb4,592253505,0,0x0,8
tick,0x7ffe67f8feb4,592269172,0,0x0,8
tick,0x7ffe67f8feb4,592285186,0,0x0,8
tick,0x7ffe67f8feb4,592301202,0,0x0,8
tick,0x7ffe67f8feb4,592317459,0,0x0,8
tick,0x7ffe67f8feb4,592332815,0,0x0,8
tick,0x7ffe67f8feb4,592348375,0,0x0,8
tick,0x7ffe67f8feb4,592364573,0,0x0,8
tick,0x7ffe67f8feb4,592380400,0,0x0,8
tick,0x7ffe67f8feb4,592396247,0,0x0,8
tick,0x7ffe67f8feb4,592411449,0,0x0,8
tick,0x7ffe67f8feb4,592426750,0,0x0,8
tick,0x7ffe67f8feb4,592442665,0,0x0,8
tick,0x7ffe67f8feb4,592457899,0,0x0,8
tick,0x7ffe67f8feb4,592473836,0,0x0,8
tick,0x7ffe67f8feb4,592489422,0,0x0,8
tick,0x7ffe67f8feb4,592505419,0,0x0,8
tick,0x7ffe67f8feb4,592520935,0,0x0,8
tick,0x7ffe67f8feb4,592536198,0,0x0,8
tick,0x7ffe67f8feb4,592551565,0,0x0,8
tick,0x7ffe67f8feb4,592567232,0,0x0,8
tick,0x7ffe67f8feb4,592582826,0,0x0,8
tick,0x7ffe67f8feb4,592598038,0,0x0,8
tick,0x7ffe67f8feb4,592613013,0,0x0,8
tick,0x7ffe67f8feb4,592628979,0,0x0,8
tick,0x7ffe67f8feb4,592645194,0,0x0,8
tick,0x7ffe67f8feb4,592660274,0,0x0,8
tick,0x7ffe67f8feb4,592675523,0,0x0,8
tick,0x7ffe67f8feb4,592690782,0,0x0,8
tick,0x7ffe67f8feb4,592706430,0,0x0,8
tick,0x7ffe67f8feb4,592722421,0,0x0,8
tick,0x7ffe67f8feb4,592737930,0,0x0,8
tick,0x7ffe67f8feb4,592753603,0,0x0,8
tick,0x7ffe67f8feb4,592768979,0,0x0,8
tick,0x7ffe67f8feb4,592785092,0,0x0,8
tick,0x7ffe67f8feb4,592800978,0,0x0,8
tick,0x7ffe67f8feb4,592816520,0,0x0,8
tick,0x7ffe67f8feb4,592831607,0,0x0,8
tick,0x7ffe67f8feb4,592847454,0,0x0,8
tick,0x7ffe67f8feb4,592862714,0,0x0,8
tick,0x7ffe67f8feb4,592877967,0,0x0,8
tick,0x7ffe67f8feb4,592893708,0,0x0,8
tick,0x7ffe67f8feb4,592909455,0,0x0,8
tick,0x7ffe67f8feb4,592924582,0,0x0,8
tick,0x7ffe67f8feb4,592940515,0,0x0,8
tick,0x7ffe67f8feb4,592955951,0,0x0,8
tick,0x7ffe67f8feb4,592971249,0,0x0,8
tick,0x7ffe67f8feb4,592986993,0,0x0,8
tick,0x7ffe67f8feb4,593002491,0,0x0,8
tick,0x7ffe67f8feb4,593017367,0,0x0,8
tick,0x7ffe67f8feb4,593032903,0,0x0,8
tick,0x7ffe67f8feb4,593048291,0,0x0,8
tick,0x7ffe67f8feb4,593063479,0,0x0,8
tick,0x7ffe67f8feb4,593079255,0,0x0,8
tick,0x7ffe67f8feb4,593095122,0,0x0,8
tick,0x7ffe67f8feb4,593111124,0,0x0,8
tick,0x7ffe67f8feb4,593126669,0,0x0,8
tick,0x7ffe67f8feb4,593142233,0,0x0,8
tick,0x7ffe67f8feb4,593157709,0,0x0,8
tick,0x7ffe67f8feb4,593173401,0,0x0,8
tick,0x7ffe67f8feb4,593189416,0,0x0,8
tick,0x7ffe67f8feb4,593205467,0,0x0,8
tick,0x7ffe67f8feb4,593221040,0,0x0,8
tick,0x7ffe67f8feb4,593236641,0,0x0,8
tick,0x7ffe67f8feb4,593251988,0,0x0,8
tick,0x7ffe67f8feb4,593267114,0,0x0,8
tick,0x7ffe67f8feb4,593283099,0,0x0,8
tick,0x7ffe67f8feb4,593299170,0,0x0,8
tick,0x7ffe67f8feb4,593314527,0,0x0,8
tick,0x7ffe67f8feb4,593330424,0,0x0,8
tick,0x7ffe67f8feb4,593345886,0,0x0,8
tick,0x7ffe67f8feb4,593361868,0,0x0,8
tick,0x7ffe67f8feb4,593377849,0,0x0,8
tick,0x7ffe67f8feb4,593393848,0,0x0,8
tick,0x7ffe67f8feb4,593409835,0,0x0,8
tick,0x7ffe67f8feb4,593425840,0,0x0,8
tick,0x7ffe67f8feb4,593441848,0,0x0,8
tick,0x7ffe67f8feb4,593457841,0,0x0,8
tick,0x7ffe67f8feb4,593473828,0,0x0,8
tick,0x7ffe67f8feb4,593490109,0,0x0,8
tick,0x7ffe67f8feb4,593506056,0,0x0,8
tick,0x7ffe67f8feb4,593521924,0,0x0,8
tick,0x7ffe67f8feb4,593536851,0,0x0,8
tick,0x7ffe67f8feb4,593552007,0,0x0,8
tick,0x7ffe67f8feb4,593567877,0,0x0,8
tick,0x7ffe67f8feb4,593583882,0,0x0,8
tick,0x7ffe67f8feb4,593599214,0,0x0,8
tick,0x7ffe67f8feb4,593615206,0,0x0,8
tick,0x7ffe67f8feb4,593631340,0,0x0,8
tick,0x7ffe67f8feb4,593647289,0,0x0,8
tick,0x7ffe67f8feb4,593663216,0,0x0,8
tick,0x7ffe67f8feb4,593679220,0,0x0,8
tick,0x7ffe67f8feb4,593695215,0,0x0,8
tick,0x7ffe67f8feb4,593711228,0,0x0,8
tick,0x7ffe67f8feb4,593727207,0,0x0,8
tick,0x7ffe67f8feb4,593743235,0,0x0,8
tick,0x7ffe67f8feb4,593759289,0,0x0,8
tick,0x7ffe67f8feb4,593774761,0,0x0,8
tick,0x7ffe67f8feb4,593790740,0,0x0,8
tick,0x7ffe67f8feb4,593806025,0,0x0,8
tick,0x7ffe67f8feb4,593821363,0,0x0,8
tick,0x7ffe67f8feb4,593836871,0,0x0,8
tick,0x7ffe67f8feb4,593851894,0,0x0,8
tick,0x7ffe67f8feb4,593867089,0,0x0,8
tick,0x7ffe67f8feb4,593882494,0,0x0,8
tick,0x7ffe67f8feb4,593898062,0,0x0,8
tick,0x7ffe67f8feb4,593913501,0,0x0,8
tick,0x7ffe67f8feb4,593928751,0,0x0,8
tick,0x7ffe67f8feb4,593944933,0,0x0,8
tick,0x7ffe67f8feb4,593960969,0,0x0,8
tick,0x7ffe67f8feb4,593977188,0,0x0,8
tick,0x7ffe67f8feb4,593992621,0,0x0,8
tick,0x7ffe67f8feb4,594008362,0,0x0,8
tick,0x7ffe67f8feb4,594023679,0,0x0,8
tick,0x7ffe67f8feb4,594039000,0,0x0,8
tick,0x7ffe67f8feb4,594054893,0,0x0,8
tick,0x7ffe67f8feb4,594071300,0,0x0,8
tick,0x7ffe67f8feb4,594087113,0,0x0,8
tick,0x7ffe67f8feb4,594102795,0,0x0,8
tick,0x7ffe67f8feb4,594118178,0,0x0,8
tick,0x7ffe67f8feb4,594134143,0,0x0,8
tick,0x7ffe67f8feb4,594149702,0,0x0,8
tick,0x7ffe67f8feb4,594165073,0,0x0,8
tick,0x7ffe67f8feb4,594180767,0,0x0,8
tick,0x7ffe67f8feb4,594196316,0,0x0,8
tick,0x7ffe67f8feb4,594212549,0,0x0,8
tick,0x7ffe67f8feb4,594227670,0,0x0,8
tick,0x7ffe67f8feb4,594243406,0,0x0,8
tick,0x7ffe67f8feb4,594258541,0,0x0,8
tick,0x7ffe67f8feb4,594274244,0,0x0,8
tick,0x7ffe67f8feb4,594289874,0,0x0,8
tick,0x7ffe67f8feb4,594305698,0,0x0,8
tick,0x7ffe67f8feb4,594321021,0,0x0,8
tick,0x7ffe67f8feb4,594337263,0,0x0,8
tick,0x7ffe67f8feb4,594353006,0,0x0,8
tick,0x7ffe67f8feb4,594368366,0,0x0,8
tick,0x7ffe67f8feb4,594383683,0,0x0,8
tick,0x7ffe67f8feb4,594399013,0,0x0,8
tick,0x7ffe67f8feb4,594414175,0,0x0,8
tick,0x7ffe67f8feb4,594429433,0,0x0,8
tick,0x7ffe67f8feb4,594444718,0,0x0,8
tick,0x7ffe67f8feb4,594459609,0,0x0,8
tick,0x7ffe67f8feb4,594474735,0,0x0,8
tick,0x7ffe67f8feb4,594490755,0,0x0,8
tick,0x7ffe67f8feb4,594506094,0,0x0,8
tick,0x7ffe67f8feb4,594521636,0,0x0,8
tick,0x7ffe67f8feb4,594537059,0,0x0,8
tick,0x7ffe67f8feb4,594552788,0,0x0,8
tick,0x7ffe67f8feb4,594568051,0,0x0,8
tick,0x7ffe67f8feb4,594583533,0,0x0,8
tick,0x7ffe67f8feb4,594598570,0,0x0,8
tick,0x7ffe67f8feb4,594614734,0,0x0,8
tick,0x7ffe67f8feb4,594630849,0,0x0,8
tick,0x7ffe67f8feb4,594646603,0,0x0,8
tick,0x7ffe67f8feb4,594662618,0,0x0,8
tick,0x7ffe67f8feb4,594678808,0,0x0,8
tick,0x7ffe67f8feb4,594694599,0,0x0,8
tick,0x7ffe67f8feb4,594709537,0,0x0,8
tick,0x7ffe67f8feb4,594724313,0,0x0,8
tick,0x7ffe67f8feb4,594739697,0,0x0,8
tick,0x7ffe67f8feb4,594755682,0,0x0,8
tick,0x7ffe67f8feb4,594770779,0,0x0,8
tick,0x7ffe67f8feb4,594786806,0,0x0,8
tick,0x7ffe67f8feb4,594801853,0,0x0,8
tick,0x7ffe67f8feb4,594817655,0,0x0,8
tick,0x7ffe67f8feb4,594833885,0,0x0,8
tick,0x7ffe67f8feb4,594849122,0,0x0,8
tick,0x7ffe67f8feb4,594864300,0,0x0,8
tick,0x7ffe67f8feb4,594879373,0,0x0,8
tick,0x7ffe67f8feb4,594895051,0,0x0,8
tick,0x7ffe67f8feb4,594910783,0,0x0,8
tick,0x7ffe67f8feb4,594926946,0,0x0,8
tick,0x7ffe67f8feb4,594942588,0,0x0,8
tick,0x7ffe67f8feb4,594958190,0,0x0,8
tick,0x7ffe67f8feb4,594973764,0,0x0,8
tick,0x7ffe67f8feb4,594990300,0,0x0,8
tick,0x7ffe67f8feb4,595005648,0,0x0,8
tick,0x7ffe67f8feb4,595021620,0,0x0,8
tick,0x7ffe67f8feb4,595037244,0,0x0,8
tick,0x7ffe67f8feb4,595053011,0,0x0,8
tick,0x7ffe67f8feb4,595068226,0,0x0,8
tick,0x7ffe67f8feb4,595083785,0,0x0,8
tick,0x7ffe67f8feb4,595099271,0,0x0,8
tick,0x7ffe67f8feb4,595114724,0,0x0,8
tick,0x7ffe67f8feb4,595130045,0,0x0,8
tick,0x7ffe67f8feb4,595145834,0,0x0,8
tick,0x7ffe67f8feb4,595161691,0,0x0,8
tick,0x7ffe67f8feb4,595177505,0,0x0,8
tick,0x7ffe67f8feb4,595193505,0,0x0,8
tick,0x7ffe67f8feb4,595208774,0,0x0,8
tick,0x7ffe67f8feb4,595224841,0,0x0,8
tick,0x7ffe67f8feb4,595240386,0,0x0,8
tick,0x7ffe67f8feb4,595256182,0,0x0,8
tick,0x7ffe67f8feb4,595272248,0,0x0,8
tick,0x7ffe67f8feb4,595287823,0,0x0,8
tick,0x7ffe67f8feb4,595303565,0,0x0,8
tick,0x7ffe67f8feb4,595319573,0,0x0,8
tick,0x7ffe67f8feb4,595335349,0,0x0,8
tick,0x7ffe67f8feb4,595350887,0,0x0,8
tick,0x7ffe67f8feb4,595366999,0,0x0,8
tick,0x7ffe67f8feb4,595382283,0,0x0,8
tick,0x7ffe67f8feb4,595398015,0,0x0,8
tick,0x7ffe67f8feb4,595413634,0,0x0,8
tick,0x7ffe67f8feb4,595429325,0,0x0,8
tick,0x7ffe67f8feb4,595444923,0,0x0,8
tick,0x7ffe67f8feb4,595460107,0,0x0,8
tick,0x7ffe67f8feb4,595475392,0,0x0,8
tick,0x7ffe67f8feb4,595491366,0,0x0,8
tick,0x7ffe67f8feb4,595507236,0,0x0,8
tick,0x7ffe67f8feb4,595522977,0,0x0,8
tick,0x7ffe67f8feb4,595537854,0,0x0,8
tick,0x7ffe67f8feb4,595553192,0,0x0,8
tick,0x7ffe67f8feb4,595568319,0,0x0,8
tick,0x7ffe67f8feb4,595583818,0,0x0,8
tick,0x7ffe67f8feb4,595599628,0,0x0,8
tick,0x7ffe67f8feb4,595615533,0,0x0,8
tick,0x7ffe67f8feb4,595630703,0,0x0,8
tick,0x7ffe67f8feb4,595646443,0,0x0,8
tick,0x7ffe67f8feb4,595662551,0,0x0,8
tick,0x7ffe67f8feb4,595677427,0,0x0,8
tick,0x7ffe67f8feb4,595693453,0,0x0,8
tick,0x7ffe67f8feb4,595708383,0,0x0,8
tick,0x7ffe67f8feb4,595724347,0,0x0,8
tick,0x7ffe67f8feb4,595739476,0,0x0,8
tick,0x7ffe67f8feb4,595755407,0,0x0,8
tick,0x7ffe67f8feb4,595771479,0,0x0,8
tick,0x7ffe67f8feb4,595787668,0,0x0,8
tick,0x7ffe67f8feb4,595803371,0,0x0,8
tick,0x7ffe67f8feb4,595819736,0,0x0,8
tick,0x7ffe67f8feb4,595835341,0,0x0,8
tick,0x7ffe67f8feb4,595851199,0,0x0,8
tick,0x7ffe67f8feb4,595867328,0,0x0,8
tick,0x7ffe67f8feb4,595883296,0,0x0,8
tick,0x7ffe67f8feb4,595899321,0,0x0,8
tick,0x7ffe67f8feb4,595915485,0,0x0,8
tick,0x7ffe67f8feb4,595931475,0,0x0,8
tick,0x7ffe67f8feb4,595947081,0,0x0,8
tick,0x7ffe67f8feb4,595962170,0,0x0,8
tick,0x7ffe67f8feb4,595977406,0,0x0,8
tick,0x7ffe67f8feb4,595993496,0,0x0,8
tick,0x7ffe67f8feb4,596009213,0,0x0,8
tick,0x7ffe67f8feb4,596024371,0,0x0,8
tick,0x7ffe67f8feb4,596039496,0,0x0,8
tick,0x7ffe67f8feb4,596055234,0,0x0,8
tick,0x7ffe67f8feb4,596070866,0,0x0,8
tick,0x7ffe67f8feb4,596087026,0,0x0,8
tick,0x7ffe67f8feb4,596102516,0,0x0,8
tick,0x7ffe67f8feb4,596117836,0,0x0,8
tick,0x7ffe67f8feb4,596133702,0,0x0,8
tick,0x7ffe67f8feb4,596149318,0,0x0,8
tick,0x7ffe67f8feb4,596165039,0,0x0,8
tick,0x7ffe67f8feb4,596180578,0,0x0,8
tick,0x7ffe67f8feb4,596196156,0,0x0,8
tick,0x7ffe67f8feb4,596211567,0,0x0,8
tick,0x7ffe67f8feb4,596227426,0,0x0,8
tick,0x7ffe67f8feb4,596242382,0,0x0,8
tick,0x7ffe67f8feb4,596257946,0,0x0,8
tick,0x7ffe67f8feb4,596273479,0,0x0,8
tick,0x7ffe67f8feb4,596289103,0,0x0,8
tick,0x7ffe67f8feb4,596304913,0,0x0,8
tick,0x7ffe67f8feb4,596320481,0,0x0,8
tick,0x7ffe67f8feb4,596335871,0,0x0,8
tick,0x7ffe67f8feb4,596351244,0,0x0,8
tick,0x7ffe67f8feb4,596367253,0,0x0,8
tick,0x7ffe67f8feb4,596383482,0,0x0,8
tick,0x7ffe67f8feb4,596398163,0,0x0,8
tick,0x7ffe67f8feb4,596413935,0,0x0,8
tick,0x7ffe67f8feb4,596429399,0,0x0,8
tick,0x7ffe67f8feb4,596445217,0,0x0,8
tick,0x7ffe67f8feb4,596461072,0,0x0,8
tick,0x7ffe67f8feb4,596476870,0,0x0,8
tick,0x7ffe67f8feb4,596491856,0,0x0,8
tick,0x7ffe67f8feb4,596507666,0,0x0,8
tick,0x7ffe67f8feb4,596522753,0,0x0,8
tick,0x7ffe67f8feb4,596537929,0,0x0,8
tick,0x7ffe67f8feb4,596553244,0,0x0,8
tick,0x7ffe67f8feb4,596569238,0,0x0,8
tick,0x7ffe67f8feb4,596585268,0,0x0,8
tick,0x7ffe67f8feb4,596600912,0,0x0,8
tick,0x7ffe67f8feb4,596616562,0,0x0,8
tick,0x7ffe67f8feb4,596631959,0,0x0,8
tick,0x7ffe67f8feb4,596647416,0,0x0,8
tick,0x7ffe67f8feb4,596663315,0,0x0,8
tick,0x7ffe67f8feb4,596679278,0,0x0,8
tick,0x7ffe67f8feb4,596695295,0,0x0,8
tick,0x7ffe67f8feb4,596711291,0,0x0,8
tick,0x7ffe67f8feb4,596726284,0,0x0,8
tick,0x7ffe67f8feb4,596742295,0,0x0,8
tick,0x7ffe67f8feb4,596757287,0,0x0,8
tick,0x7ffe67f8feb4,596773332,0,0x0,8
tick,0x7ffe67f8feb4,596788592,0,0x0,8
tick,0x7ffe67f8feb4,596804274,0,0x0,8
tick,0x7ffe67f8feb4,596819922,0,0x0,8
tick,0x7ffe67f8feb4,596835588,0,0x0,8
tick,0x7ffe67f8feb4,596851786,0,0x0,8
tick,0x7ffe67f8feb4,596866799,0,0x0,8
tick,0x7ffe67f8feb4,596881988,0,0x0,8
tick,0x7ffe67f8feb4,596897299,0,0x0,8
tick,0x7ffe67f8feb4,596913226,0,0x0,8
tick,0x7ffe67f8feb4,596928862,0,0x0,8
tick,0x7ffe67f8feb4,596944274,0,0x0,8
tick,0x7ffe67f8feb4,596959547,0,0x0,8
tick,0x7ffe67f8feb4,596974986,0,0x0,8
tick,0x7ffe67f8feb4,596990848,0,0x0,8
tick,0x7ffe67f8feb4,597006842,0,0x0,8
tick,0x7ffe67f8feb4,597022515,0,0x0,8
tick,0x7ffe67f8feb4,597038250,0,0x0,8
tick,0x7ffe67f8feb4,597053754,0,0x0,8
tick,0x7ffe67f8feb4,597069436,0,0x0,8
tick,0x7ffe67f8feb4,597085224,0,0x0,8
tick,0x7ffe67f8feb4,597100547,0,0x0,8
tick,0x7ffe67f8feb4,597116801,0,0x0,8
tick,0x7ffe67f8feb4,597132150,0,0x0,8
tick,0x7ffe67f8feb4,597147705,0,0x0,8
tick,0x7ffe67f8feb4,597163654,0,0x0,8
tick,0x7ffe67f8feb4,597179317,0,0x0,8
tick,0x7ffe67f8feb4,597194533,0,0x0,8
tick,0x7ffe67f8feb4,597210543,0,0x0,8
tick,0x7ffe67f8feb4,597226468,0,0x0,8
tick,0x7ffe67f8feb4,597242558,0,0x0,8
tick,0x7ffe67f8feb4,597258609,0,0x0,8
tick,0x7ffe67f8feb4,597274076,0,0x0,8
tick,0x7ffe67f8feb4,597289597,0,0x0,8
tick,0x7ffe67f8feb4,597305129,0,0x0,8
tick,0x7ffe67f8feb4,597321320,0,0x0,8
tick,0x7ffe67f8feb4,597336704,0,0x0,8
tick,0x7ffe67f8feb4,597352120,0,0x0,8
tick,0x7ffe67f8feb4,597367427,0,0x0,8
tick,0x7ffe67f8feb4,597383126,0,0x0,8
tick,0x7ffe67f8feb4,597399077,0,0x0,8
tick,0x7ffe67f8feb4,597415391,0,0x0,8
tick,0x7ffe67f8feb4,597431176,0,0x0,8
tick,0x7ffe67f8feb4,597446708,0,0x0,8
tick,0x7ffe67f8feb4,597462303,0,0x0,8
tick,0x7ffe67f8feb4,597478090,0,0x0,8
tick,0x7ffe67f8feb4,597493459,0,0x0,8
tick,0x7ffe67f8feb4,597509109,0,0x0,8
tick,0x7ffe67f8feb4,597524431,0,0x0,8
tick,0x7ffe67f8feb4,597540322,0,0x0,8
tick,0x7ffe67f8feb4,597555786,0,0x0,8
tick,0x7ffe67f8feb4,597571152,0,0x0,8
tick,0x7ffe67f8feb4,597586675,0,0x0,8
tick,0x7ffe67f8feb4,597602889,0,0x0,8
tick,0x7ffe67f8feb4,597618295,0,0x0,8
tick,0x7ffe67f8feb4,597633426,0,0x0,8
tick,0x7ffe67f8feb4,597649602,0,0x0,8
tick,0x7ffe67f8feb4,597665638,0,0x0,8
tick,0x7ffe67f8feb4,597681576,0,0x0,8
tick,0x7ffe67f8feb4,597697536,0,0x0,8
tick,0x7ffe67f8feb4,597713528,0,0x0,8
tick,0x7ffe67f8feb4,597729544,0,0x0,8
tick,0x7ffe67f8feb4,597745595,0,0x0,8
tick,0x7ffe67f8feb4,597761680,0,0x0,8
tick,0x7ffe67f8feb4,597777690,0,0x0,8
tick,0x7ffe67f8feb4,597793718,0,0x0,8
tick,0x7ffe67f8feb4,597809149,0,0x0,8
tick,0x7ffe67f8feb4,597824562,0,0x0,8
tick,0x7ffe67f8feb4,597840126,0,0x0,8
tick,0x7ffe67f8feb4,597855869,0,0x0,8
tick,0x7ffe67f8feb4,597871439,0,0x0,8
tick,0x7ffe67f8feb4,597886869,0,0x0,8
tick,0x7ffe67f8feb4,597902105,0,0x0,8
tick,0x7ffe67f8feb4,597917006,0,0x0,8
tick,0x7ffe67f8feb4,597932706,0,0x0,8
tick,0x7ffe67f8feb4,597947800,0,0x0,8
tick,0x7ffe67f8feb4,597963495,0,0x0,8
tick,0x7ffe67f8feb4,597979339,0,0x0,8
tick,0x7ffe67f8feb4,597995307,0,0x0,8
tick,0x7ffe67f8feb4,598011339,0,0x0,8
tick,0x7ffe67f8feb4,598026388,0,0x0,8
tick,0x7ffe67f8feb4,598041870,0,0x0,8
tick,0x7ffe67f8feb4,598057111,0,0x0,8
tick,0x7ffe67f8feb4,598072883,0,0x0,8
tick,0x7ffe67f8feb4,598088224,0,0x0,8
tick,0x7ffe67f8feb4,598103759,0,0x0,8
tick,0x7ffe67f8feb4,598119570,0,0x0,8
tick,0x7ffe67f8feb4,598135337,0,0x0,8
tick,0x7ffe67f8feb4,598150396,0,0x0,8
tick,0x7ffe67f8feb4,598166088,0,0x0,8
tick,0x7ffe67f8feb4,598180973,0,0x0,8
tick,0x7ffe67f8feb4,598197089,0,0x0,8
tick,0x7ffe67f8feb4,598212882,0,0x0,8
tick,0x7ffe67f8feb4,598228920,0,0x0,8
tick,0x7ffe67f8feb4,598244946,0,0x0,8
tick,0x7ffe67f8feb4,598260970,0,0x0,8
tick,0x7ffe67f8feb4,598276514,0,0x0,8
tick,0x7ffe67f8feb4,598291193,0,0x0,8
tick,0x7ffe67f8feb4,598306628,0,0x0,8
tick,0x7ffe67f8feb4,598322155,0,0x0,8
tick,0x7ffe67f8feb4,598337784,0,0x0,8
tick,0x7ffe67f8feb4,598353429,0,0x0,8
tick,0x7ffe67f8feb4,598369232,0,0x0,8
tick,0x7ffe67f8feb4,598384710,0,0x0,8
tick,0x7ffe67f8feb4,598400173,0,0x0,8
tick,0x7ffe67f8feb4,598416432,0,0x0,8
tick,0x7ffe67f8feb4,598432217,0,0x0,8
tick,0x7ffe67f8feb4,598448397,0,0x0,8
tick,0x7ffe67f8feb4,598464702,0,0x0,8
tick,0x7ffe67f8feb4,598480213,0,0x0,8
tick,0x7ffe67f8feb4,598496208,0,0x0,8
tick,0x7ffe67f8feb4,598512269,0,0x0,8
tick,0x7ffe67f8feb4,598528352,0,0x0,8
tick,0x7ffe67f8feb4,598544319,0,0x0,8
tick,0x7ffe67f8feb4,598560314,0,0x0,8
tick,0x7ffe67f8feb4,598575237,0,0x0,8
tick,0x7ffe67f8feb4,598590374,0,0x0,8
tick,0x7ffe67f8feb4,598606243,0,0x0,8
tick,0x7ffe67f8feb4,598622256,0,0x0,8
tick,0x7ffe67f8feb4,598637840,0,0x0,8
tick,0x7ffe67f8feb4,598652886,0,0x0,8
tick,0x7ffe67f8feb4,598668904,0,0x0,8
tick,0x7ffe67f8feb4,598684892,0,0x0,8
tick,0x7ffe67f8feb4,598699904,0,0x0,8
tick,0x7ffe67f8feb4,598715889,0,0x0,8
tick,0x7ffe67f8feb4,598731882,0,0x0,8
tick,0x7ffe67f8feb4,598747871,0,0x0,8
tick,0x7ffe67f8feb4,598763895,0,0x0,8
tick,0x7ffe67f8feb4,598779936,0,0x0,8
tick,0x7ffe67f8feb4,598795728,0,0x0,8
tick,0x7ffe67f8feb4,598811356,0,0x0,8
tick,0x7ffe67f8feb4,598826710,0,0x0,8
tick,0x7ffe67f8feb4,598841901,0,0x0,8
tick,0x7ffe67f8feb4,598857846,0,0x0,8
tick,0x7ffe67f8feb4,598873319,0,0x0,8
tick,0x7ffe67f8feb4,598888382,0,0x0,8
tick,0x7ffe67f8feb4,598903755,0,0x0,8
tick,0x7ffe67f8feb4,598919524,0,0x0,8
tick,0x7ffe67f8feb4,598935002,0,0x0,8
tick,0x7ffe67f8feb4,598951044,0,0x0,8
tick,0x7ffe67f8feb4,598967008,0,0x0,8
tick,0x7ffe67f8feb4,598982134,0,0x0,8
tick,0x7ffe67f8feb4,598997692,0,0x0,8
tick,0x7ffe67f8feb4,599013322,0,0x0,8
tick,0x7ffe67f8feb4,599029340,0,0x0,8
tick,0x7ffe67f8feb4,599045110,0,0x0,8
tick,0x7ffe67f8feb4,599061112,0,0x0,8
tick,0x7ffe67f8feb4,599076745,0,0x0,8
tick,0x7ffe67f8feb4,599091762,0,0x0,8
tick,0x7ffe67f8feb4,599106753,0,0x0,8
tick,0x7ffe67f8feb4,599123006,0,0x0,8
tick,0x7ffe67f8feb4,599138084,0,0x0,8
tick,0x7ffe67f8feb4,599153508,0,0x0,8
tick,0x7ffe67f8feb4,599168400,0,0x0,8
tick,0x7ffe67f8feb4,599184172,0,0x0,8
tick,0x7ffe67f8feb4,599200376,0,0x0,8
tick,0x7ffe67f8feb4,599216209,0,0x0,8
tick,0x7ffe67f8feb4,599232208,0,0x0,8
tick,0x7ffe67f8feb4,599247431,0,0x0,8
tick,0x7ffe67f8feb4,599263217,0,0x0,8
tick,0x7ffe67f8feb4,599279234,0,0x0,8
tick,0x7ffe67f8feb4,599295286,0,0x0,8
tick,0x7ffe67f8feb4,599310760,0,0x0,8
tick,0x7ffe67f8feb4,599326258,0,0x0,8
tick,0x7ffe67f8feb4,599342035,0,0x0,8
tick,0x7ffe67f8feb4,599358002,0,0x0,8
tick,0x7ffe67f8feb4,599373739,0,0x0,8
tick,0x7ffe67f8feb4,599389092,0,0x0,8
tick,0x7ffe67f8feb4,599404245,0,0x0,8
tick,0x7ffe67f8feb4,599420017,0,0x0,8
tick,0x7ffe67f8feb4,599435381,0,0x0,8
tick,0x7ffe67f8feb4,599450774,0,0x0,8
tick,0x7ffe67f8feb4,599465612,0,0x0,8
tick,0x7ffe67f8feb4,599480840,0,0x0,8
tick,0x7ffe67f8feb4,599496100,0,0x0,8
tick,0x7ffe67f8feb4,599512117,0,0x0,8
tick,0x7ffe67f8feb4,599528026,0,0x0,8
tick,0x7ffe67f8feb4,599543318,0,0x0,8
tick,0x7ffe67f8feb4,599559298,0,0x0,8
tick,0x7ffe67f8feb4,599575806,0,0x0,8
tick,0x7ffe67f8feb4,599590299,0,0x0,8
tick,0x7ffe67f8feb4,599606315,0,0x0,8
tick,0x7ffe67f8feb4,599622318,0,0x0,8
tick,0x7ffe67f8feb4,599638379,0,0x0,8
tick,0x7ffe67f8feb4,599654288,0,0x0,8
tick,0x7ffe67f8feb4,599670543,0,0x0,8
tick,0x7ffe67f8feb4,599686372,0,0x0,8
tick,0x7ffe67f8feb4,599702291,0,0x0,8
tick,0x7ffe67f8feb4,599718280,0,0x0,8
tick,0x7ffe67f8feb4,599734270,0,0x0,8
tick,0x7ffe67f8feb4,599750280,0,0x0,8
tick,0x7ffe67f8feb4,599766298,0,0x0,8
tick,0x7ffe67f8feb4,599781845,0,0x0,8
tick,0x7ffe67f8feb4,599797698,0,0x0,8
tick,0x7ffe67f8feb4,599813714,0,0x0,8
tick,0x7ffe67f8feb4,599829069,0,0x0,8
tick,0x7ffe67f8feb4,599844612,0,0x0,8
tick,0x7ffe67f8feb4,599859745,0,0x0,8
tick,0x7ffe67f8feb4,599875786,0,0x0,8
tick,0x7ffe67f8feb4,599891776,0,0x0,8
tick,0x7ffe67f8feb4,599907297,0,0x0,8
tick,0x7ffe67f8feb4,599922324,0,0x0,8
tick,0x7ffe67f8feb4,599938306,0,0x0,8
tick,0x7ffe67f8feb4,599954344,0,0x0,8
tick,0x7ffe67f8feb4,599969757,0,0x0,8
tick,0x7ffe67f8feb4,599985407,0,0x0,8
tick,0x7ffe67f8feb4,600001375,0,0x0,8
tick,0x7ffe67f8feb4,600017405,0,0x0,8
tick,0x7ffe67f8feb4,600032779,0,0x0,8
tick,0x7ffe67f8feb4,600048839,0,0x0,8
tick,0x7ffe67f8feb4,600064213,0,0x0,8
tick,0x7ffe67f8feb4,600080285,0,0x0,8
tick,0x7ffe67f8feb4,600096471,0,0x0,8
tick,0x7ffe67f8feb4,600112038,0,0x0,8
tick,0x7ffe67f8feb4,600127918,0,0x0,8
tick,0x7ffe67f8feb4,600143626,0,0x0,8
tick,0x7ffe67f8feb4,600159548,0,0x0,8
tick,0x7ffe67f8feb4,600175746,0,0x0,8
tick,0x7ffe67f8feb4,600191457,0,0x0,8
tick,0x7ffe67f8feb4,600207018,0,0x0,8
tick,0x7ffe67f8feb4,600221954,0,0x0,8
tick,0x7ffe67f8feb4,600237272,0,0x0,8
tick,0x7ffe67f8feb4,600253299,0,0x0,8
tick,0x7ffe67f8feb4,600268361,0,0x0,8
tick,0x7ffe67f8feb4,600283778,0,0x0,8
tick,0x7ffe67f8feb4,600299770,0,0x0,8
tick,0x7ffe67f8feb4,600315742,0,0x0,8
tick,0x7ffe67f8feb4,600330868,0,0x0,8
tick,0x7ffe67f8feb4,600346663,0,0x0,8
tick,0x7ffe67f8feb4,600361976,0,0x0,8
tick,0x7ffe67f8feb4,600377105,0,0x0,8
tick,0x7ffe67f8feb4,600392830,0,0x0,8
tick,0x7ffe67f8feb4,600408226,0,0x0,8
tick,0x7ffe67f8feb4,600424092,0,0x0,8
tick,0x7ffe67f8feb4,600439327,0,0x0,8
tick,0x7ffe67f8feb4,600455107,0,0x0,8
tick,0x7ffe67f8feb4,600470356,0,0x0,8
tick,0x7ffe67f8feb4,600486093,0,0x0,8
tick,0x7ffe67f8feb4,600502374,0,0x0,8
tick,0x7ffe67f8feb4,600518110,0,0x0,8
tick,0x7ffe67f8feb4,600534419,0,0x0,8
tick,0x7ffe67f8feb4,600550219,0,0x0,8
tick,0x7ffe67f8feb4,600566155,0,0x0,8
tick,0x7ffe67f8feb4,600582171,0,0x0,8
tick,0x7ffe67f8feb4,600598156,0,0x0,8
tick,0x7ffe67f8feb4,600614181,0,0x0,8
tick,0x7ffe67f8feb4,600630234,0,0x0,8
tick,0x7ffe67f8feb4,600646301,0,0x0,8
tick,0x7ffe67f8feb4,600661862,0,0x0,8
tick,0x7ffe67f8feb4,600677882,0,0x0,8
tick,0x7ffe67f8feb4,600694168,0,0x0,8
tick,0x7ffe67f8feb4,600709920,0,0x0,8
tick,0x7ffe67f8feb4,600725914,0,0x0,8
tick,0x7ffe67f8feb4,600741912,0,0x0,8
tick,0x7ffe67f8feb4,600757921,0,0x0,8
tick,0x7ffe67f8feb4,600773926,0,0x0,8
tick,0x7ffe67f8feb4,600789939,0,0x0,8
tick,0x7ffe67f8feb4,600805967,0,0x0,8
tick,0x7ffe67f8feb4,600821984,0,0x0,8
tick,0x7ffe67f8feb4,600837850,0,0x0,8
tick,0x7ffe67f8feb4,600853009,0,0x0,8
tick,0x7ffe67f8feb4,600868857,0,0x0,8
tick,0x7ffe67f8feb4,600884855,0,0x0,8
tick,0x7ffe67f8feb4,600900865,0,0x0,8
tick,0x7ffe67f8feb4,600916155,0,0x0,8
tick,0x7ffe67f8feb4,600931901,0,0x0,8
tick,0x7ffe67f8feb4,600947870,0,0x0,8
tick,0x7ffe67f8feb4,600963884,0,0x0,8
tick,0x7ffe67f8feb4,600979223,0,0x0,8
tick,0x7ffe67f8feb4,600994876,0,0x0,8
tick,0x7ffe67f8feb4,601010890,0,0x0,8
tick,0x7ffe67f8feb4,601026836,0,0x0,8
tick,0x7ffe67f8feb4,601041806,0,0x0,8
tick,0x7ffe67f8feb4,601057868,0,0x0,8
tick,0x7ffe67f8feb4,601073880,0,0x0,8
tick,0x7ffe67f8feb4,601089885,0,0x0,8
tick,0x7ffe67f8feb4,601105884,0,0x0,8
tick,0x7ffe67f8feb4,601121887,0,0x0,8
tick,0x7ffe67f8feb4,601137900,0,0x0,8
tick,0x7ffe67f8feb4,601153909,0,0x0,8
tick,0x7ffe67f8feb4,601169326,0,0x0,8
tick,0x7ffe67f8feb4,601184562,0,0x0,8
tick,0x7ffe67f8feb4,601200437,0,0x0,8
tick,0x7ffe67f8feb4,601215782,0,0x0,8
tick,0x7ffe67f8feb4,601231918,0,0x0,8
tick,0x7ffe67f8feb4,601247882,0,0x0,8
tick,0x7ffe67f8feb4,601264560,0,0x0,8
tick,0x7ffe67f8feb4,601279929,0,0x0,8
tick,0x7ffe67f8feb4,601295916,0,0x0,8
tick,0x7ffe67f8feb4,601311682,0,0x0,8
tick,0x7ffe67f8feb4,601326915,0,0x0,8
tick,0x7ffe67f8feb4,601342056,0,0x0,8
tick,0x7ffe67f8feb4,601357500,0,0x0,8
tick,0x7ffe67f8feb4,601372990,0,0x0,8
tick,0x7ffe67f8feb4,601388725,0,0x0,8
tick,0x7ffe67f8feb4,601404246,0,0x0,8
tick,0x7ffe67f8feb4,601420196,0,0x0,8
tick,0x7ffe67f8feb4,601435766,0,0x0,8
tick,0x7ffe67f8feb4,601452011,0,0x0,8
tick,0x7ffe67f8feb4,601467150,0,0x0,8
tick,0x7ffe67f8feb4,601482455,0,0x0,8
tick,0x7ffe67f8feb4,601498473,0,0x0,8
tick,0x7ffe67f8feb4,601514471,0,0x0,8
tick,0x7ffe67f8feb4,601530486,0,0x0,8
tick,0x7ffe67f8feb4,601546428,0,0x0,8
tick,0x7ffe67f8feb4,601562447,0,0x0,8
tick,0x7ffe67f8feb4,601578448,0,0x0,8
tick,0x7ffe67f8feb4,601594445,0,0x0,8
tick,0x7ffe67f8feb4,601610458,0,0x0,8
tick,0x7ffe67f8feb4,601626461,0,0x0,8
tick,0x7ffe67f8feb4,601642465,0,0x0,8
tick,0x7ffe67f8feb4,601658477,0,0x0,8
tick,0x7ffe67f8feb4,601673727,0,0x0,8
tick,0x7ffe67f8feb4,601689441,0,0x0,8
tick,0x7ffe67f8feb4,601705458,0,0x0,8
tick,0x7ffe67f8feb4,601721472,0,0x0,8
tick,0x7ffe67f8feb4,601736464,0,0x0,8
tick,0x7ffe67f8feb4,601752468,0,0x0,8
tick,0x7ffe67f8feb4,601768471,0,0x0,8
tick,0x7ffe67f8feb4,601784483,0,0x0,8
tick,0x7ffe67f8feb4,601800474,0,0x0,8
tick,0x7ffe67f8feb4,601815994,0,0x0,8
tick,0x7ffe67f8feb4,601832137,0,0x0,8
tick,0x7ffe67f8feb4,601848080,0,0x0,8
tick,0x7ffe67f8feb4,601864024,0,0x0,8
tick,0x7ffe67f8feb4,601880074,0,0x0,8
tick,0x7ffe67f8feb4,601895994,0,0x0,8
tick,0x7ffe67f8feb4,601911228,0,0x0,8
tick,0x7ffe67f8feb4,601927020,0,0x0,8
tick,0x7ffe67f8feb4,601942999,0,0x0,8
tick,0x7ffe67f8feb4,601959108,0,0x0,8
tick,0x7ffe67f8feb4,601975256,0,0x0,8
tick,0x7ffe67f8feb4,601991044,0,0x0,8
tick,0x7ffe67f8feb4,602006975,0,0x0,8
tick,0x7ffe67f8feb4,602023005,0,0x0,8
tick,0x7ffe67f8feb4,602038988,0,0x0,8
tick,0x7ffe67f8feb4,602054998,0,0x0,8
tick,0x7ffe67f8feb4,602071048,0,0x0,8
tick,0x7ffe67f8feb4,602086235,0,0x0,8
tick,0x7ffe67f8feb4,602101423,0,0x0,8
tick,0x7ffe67f8feb4,602117471,0,0x0,8
tick,0x7ffe67f8feb4,602133511,0,0x0,8
tick,0x7ffe67f8feb4,602149762,0,0x0,8
tick,0x7ffe67f8feb4,602165458,0,0x0,8
tick,0x7ffe67f8feb4,602181505,0,0x0,8
tick,0x7ffe67f8feb4,602197226,0,0x0,8
tick,0x7ffe67f8feb4,602212753,0,0x0,8
tick,0x7ffe67f8feb4,602227953,0,0x0,8
tick,0x7ffe67f8feb4,602244037,0,0x0,8
tick,0x7ffe67f8feb4,602259461,0,0x0,8
tick,0x7ffe67f8feb4,602274621,0,0x0,8
tick,0x7ffe67f8feb4,602290106,0,0x0,8
tick,0x7ffe67f8feb4,602306062,0,0x0,8
tick,0x7ffe67f8feb4,602321443,0,0x0,8
tick,0x7ffe67f8feb4,602337099,0,0x0,8
tick,0x7ffe67f8feb4,602353108,0,0x0,8
tick,0x7ffe67f8feb4,602369073,0,0x0,8
tick,0x7ffe67f8feb4,602385075,0,0x0,8
tick,0x7ffe67f8feb4,602401098,0,0x0,8
tick,0x7ffe67f8feb4,602417094,0,0x0,8
tick,0x7ffe67f8feb4,602433161,0,0x0,8
tick,0x7ffe67f8feb4,602449083,0,0x0,8
tick,0x7ffe67f8feb4,602465091,0,0x0,8
tick,0x7ffe67f8feb4,602481090,0,0x0,8
tick,0x7ffe67f8feb4,602497341,0,0x0,8
tick,0x7ffe67f8feb4,602513097,0,0x0,8
tick,0x7ffe67f8feb4,602529147,0,0x0,8
tick,0x7ffe67f8feb4,602545089,0,0x0,8
tick,0x7ffe67f8feb4,602561088,0,0x0,8
tick,0x7ffe67f8feb4,602577120,0,0x0,8
tick,0x7ffe67f8feb4,602593102,0,0x0,8
tick,0x7ffe67f8feb4,602609104,0,0x0,8
tick,0x7ffe67f8feb4,602625146,0,0x0,8
tick,0x7ffe67f8feb4,602641115,0,0x0,8
tick,0x7ffe67f8feb4,602657117,0,0x0,8
tick,0x7ffe67f8feb4,602673116,0,0x0,8
tick,0x7ffe67f8feb4,602689131,0,0x0,8
tick,0x7ffe67f8feb4,602705107,0,0x0,8
tick,0x7ffe67f8feb4,602720273,0,0x0,8
tick,0x7ffe67f8feb4,602736150,0,0x0,8
tick,0x7ffe67f8feb4,602751142,0,0x0,8
tick,0x7ffe67f8feb4,602767163,0,0x0,8
tick,0x7ffe67f8feb4,602783157,0,0x0,8
tick,0x7ffe67f8feb4,602799136,0,0x0,8
tick,0x7ffe67f8feb4,602814318,0,0x0,8
tick,0x7ffe67f8feb4,602829228,0,0x0,8
tick,0x7ffe67f8feb4,602844333,0,0x0,8
tick,0x7ffe67f8feb4,602859675,0,0x0,8
tick,0x7ffe67f8feb4,602875088,0,0x0,8
tick,0x7ffe67f8feb4,602890353,0,0x0,8
tick,0x7ffe67f8feb4,602906471,0,0x0,8
tick,0x7ffe67f8feb4,602922249,0,0x0,8
tick,0x7ffe67f8feb4,602938213,0,0x0,8
tick,0x7ffe67f8feb4,602954230,0,0x0,8
tick,0x7ffe67f8feb4,602970289,0,0x0,8
tick,0x7ffe67f8feb4,602986234,0,0x0,8
tick,0x7ffe67f8feb4,603002225,0,0x0,8
tick,0x7ffe67f8feb4,603018299,0,0x0,8
tick,0x7ffe67f8feb4,603034276,0,0x0,8
tick,0x7ffe67f8feb4,603049503,0,0x0,8
tick,0x7ffe67f8feb4,603065238,0,0x0,8
tick,0x7ffe67f8feb4,603081301,0,0x0,8
tick,0x7ffe67f8feb4,603097214,0,0x0,8
tick,0x7ffe67f8feb4,603113206,0,0x0,8
tick,0x7ffe67f8feb4,603129253,0,0x0,8
tick,0x7ffe67f8feb4,603145327,0,0x0,8
tick,0x7ffe67f8feb4,603161215,0,0x0,8
tick,0x7ffe67f8feb4,603177240,0,0x0,8
tick,0x7ffe67f8feb4,603193244,0,0x0,8
tick,0x7ffe67f8feb4,603209317,0,0x0,8
tick,0x7ffe67f8feb4,603225250,0,0x0,8
tick,0x7ffe67f8feb4,603241242,0,0x0,8
tick,0x7ffe67f8feb4,603257261,0,0x0,8
tick,0x7ffe67f8feb4,603272432,0,0x0,8
tick,0x7ffe67f8feb4,603288476,0,0x0,8
tick,0x7ffe67f8feb4,603303242,0,0x0,8
tick,0x7ffe67f8feb4,603318380,0,0x0,8
tick,0x7ffe67f8feb4,603334398,0,0x0,8
tick,0x7ffe67f8feb4,603350422,0,0x0,8
tick,0x7ffe67f8feb4,603366446,0,0x0,8
tick,0x7ffe67f8feb4,603382452,0,0x0,8
tick,0x7ffe67f8feb4,603398358,0,0x0,8
tick,0x7ffe67f8feb4,603414284,0,0x0,8
tick,0x7ffe67f8feb4,603430285,0,0x0,8
tick,0x7ffe67f8feb4,603446315,0,0x0,8
tick,0x7ffe67f8feb4,603462305,0,0x0,8
tick,0x7ffe67f8feb4,603478366,0,0x0,8
tick,0x7ffe67f8feb4,603493566,0,0x0,8
tick,0x7ffe67f8feb4,603509531,0,0x0,8
tick,0x7ffe67f8feb4,603525573,0,0x0,8
tick,0x7ffe67f8feb4,603541578,0,0x0,8
tick,0x7ffe67f8feb4,603557565,0,0x0,8
tick,0x7ffe67f8feb4,603573248,0,0x0,8
tick,0x7ffe67f8feb4,603589261,0,0x0,8
tick,0x7ffe67f8feb4,603604678,0,0x0,8
tick,0x7ffe67f8feb4,603620248,0,0x0,8
tick,0x7ffe67f8feb4,603635967,0,0x0,8
tick,0x7ffe67f8feb4,603651239,0,0x0,8
tick,0x7ffe67f8feb4,603667252,0,0x0,8
tick,0x7ffe67f8feb4,603682616,0,0x0,8
tick,0x7ffe67f8feb4,603698666,0,0x0,8
tick,0x7ffe67f8feb4,603713618,0,0x0,8
tick,0x7ffe67f8feb4,603729541,0,0x0,8
tick,0x7ffe67f8feb4,603745502,0,0x0,8
tick,0x7ffe67f8feb4,603761492,0,0x0,8
tick,0x7ffe67f8feb4,603777512,0,0x0,8
tick,0x7ffe67f8feb4,603793280,0,0x0,8
tick,0x7ffe67f8feb4,603809279,0,0x0,8
tick,0x7ffe67f8feb4,603825283,0,0x0,8
tick,0x7ffe67f8feb4,603841297,0,0x0,8
tick,0x7ffe67f8feb4,603857321,0,0x0,8
tick,0x7ffe67f8feb4,603873298,0,0x0,8
tick,0x7ffe67f8feb4,603889322,0,0x0,8
tick,0x7ffe67f8feb4,603905322,0,0x0,8
tick,0x7ffe67f8feb4,603921299,0,0x0,8
tick,0x7ffe67f8feb4,603937306,0,0x0,8
tick,0x7ffe67f8feb4,603952575,0,0x0,8
tick,0x7ffe67f8feb4,603968363,0,0x0,8
tick,0x7ffe67f8feb4,603984326,0,0x0,8
tick,0x7ffe67f8feb4,604000096,0,0x0,8
tick,0x7ffe67f8feb4,604015990,0,0x0,8
tick,0x7ffe67f8feb4,604031998,0,0x0,8
tick,0x7ffe67f8feb4,604048102,0,0x0,8
tick,0x7ffe67f8feb4,604063623,0,0x0,8
tick,0x7ffe67f8feb4,604079128,0,0x0,8
tick,0x7ffe67f8feb4,604094308,0,0x0,8
tick,0x7ffe67f8feb4,604109580,0,0x0,8
tick,0x7ffe67f8feb4,604124814,0,0x0,8
tick,0x7ffe67f8feb4,604140667,0,0x0,8
tick,0x7ffe67f8feb4,604156062,0,0x0,8
tick,0x7ffe67f8feb4,604171663,0,0x0,8
tick,0x7ffe67f8feb4,604187488,0,0x0,8
tick,0x7ffe67f8feb4,604203226,0,0x0,8
tick,0x7ffe67f8feb4,604219013,0,0x0,8
tick,0x7ffe67f8feb4,604235076,0,0x0,8
tick,0x7ffe67f8feb4,604250825,0,0x0,8
tick,0x7ffe67f8feb4,604266619,0,0x0,8
tick,0x7ffe67f8feb4,604282681,0,0x0,8
tick,0x7ffe67f8feb4,604298777,0,0x0,8
tick,0x7ffe67f8feb4,604314167,0,0x0,8
tick,0x7ffe67f8feb4,604330223,0,0x0,8
tick,0x7ffe67f8feb4,604346023,0,0x0,8
tick,0x7ffe67f8feb4,604361026,0,0x0,8
tick,0x7ffe67f8feb4,604377087,0,0x0,8
tick,0x7ffe67f8feb4,604392481,0,0x0,8
tick,0x7ffe67f8feb4,604407589,0,0x0,8
tick,0x7ffe67f8feb4,604423412,0,0x0,8
tick,0x7ffe67f8feb4,604439218,0,0x0,8
tick,0x7ffe67f8feb4,604454646,0,0x0,8
tick,0x7ffe67f8feb4,604469960,0,0x0,8
tick,0x7ffe67f8feb4,604485470,0,0x0,8
tick,0x7ffe67f8feb4,604501471,0,0x0,8
tick,0x7ffe67f8feb4,604517214,0,0x0,8
tick,0x7ffe67f8feb4,604533238,0,0x0,8
tick,0x7ffe67f8feb4,604549447,0,0x0,8
tick,0x7ffe67f8feb4,604564910,0,0x0,8
tick,0x7ffe67f8feb4,604580847,0,0x0,8
tick,0x7ffe67f8feb4,604595850,0,0x0,8
tick,0x7ffe67f8feb4,604611352,0,0x0,8
tick,0x7ffe67f8feb4,604626530,0,0x0,8
tick,0x7ffe67f8feb4,604641912,0,0x0,8
tick,0x7ffe67f8feb4,604657759,0,0x0,8
tick,0x7ffe67f8feb4,604673269,0,0x0,8
tick,0x7ffe67f8feb4,604688675,0,0x0,8
tick,0x7ffe67f8feb4,604704501,0,0x0,8
tick,0x7ffe67f8feb4,604719694,0,0x0,8
tick,0x7ffe67f8feb4,604736148,0,0x0,8
tick,0x7ffe67f8feb4,604752057,0,0x0,8
tick,0x7ffe67f8feb4,604767027,0,0x0,8
tick,0x7ffe67f8feb4,604783003,0,0x0,8
tick,0x7ffe67f8feb4,604798982,0,0x0,8
tick,0x7ffe67f8feb4,604814982,0,0x0,8
tick,0x7ffe67f8feb4,604831102,0,0x0,8
tick,0x7ffe67f8feb4,604846296,0,0x0,8
tick,0x7ffe67f8feb4,604861613,0,0x0,8
tick,0x7ffe67f8feb4,604877296,0,0x0,8
tick,0x7ffe67f8feb4,604893055,0,0x0,8
tick,0x7ffe67f8feb4,604907670,0,0x0,8
tick,0x7ffe67f8feb4,604923549,0,0x0,8
tick,0x7ffe67f8feb4,604938805,0,0x0,8
tick,0x7ffe67f8feb4,604954177,0,0x0,8
tick,0x7ffe67f8feb4,604970068,0,0x0,8
tick,0x7ffe67f8feb4,604984665,0,0x0,8
tick,0x7ffe67f8feb4,604999940,0,0x0,8
tick,0x7ffe67f8feb4,605015591,0,0x0,8
tick,0x7ffe67f8feb4,605031536,0,0x0,8
tick,0x7ffe67f8feb4,605047586,0,0x0,8
tick,0x7ffe67f8feb4,605062749,0,0x0,8
tick,0x7ffe67f8feb4,605078756,0,0x0,8
tick,0x7ffe67f8feb4,605094219,0,0x0,8
tick,0x7ffe67f8feb4,605110256,0,0x0,8
tick,0x7ffe67f8feb4,605125767,0,0x0,8
tick,0x7ffe67f8feb4,605141598,0,0x0,8
tick,0x7ffe67f8feb4,605157630,0,0x0,8
tick,0x7ffe67f8feb4,605173810,0,0x0,8
tick,0x7ffe67f8feb4,605189833,0,0x0,8
tick,0x7ffe67f8feb4,605205397,0,0x0,8
tick,0x7ffe67f8feb4,605220628,0,0x0,8
tick,0x7ffe67f8feb4,605236662,0,0x0,8
tick,0x7ffe67f8feb4,605252660,0,0x0,8
tick,0x7ffe67f8feb4,605268367,0,0x0,8
tick,0x7ffe67f8feb4,605283925,0,0x0,8
tick,0x7ffe67f8feb4,605299524,0,0x0,8
tick,0x7ffe67f8feb4,605315467,0,0x0,8
tick,0x7ffe67f8feb4,605331206,0,0x0,8
tick,0x7ffe67f8feb4,605346966,0,0x0,8
tick,0x7ffe67f8feb4,605362864,0,0x0,8
tick,0x7ffe67f8feb4,605378121,0,0x0,8
tick,0x7ffe67f8feb4,605393778,0,0x0,8
tick,0x7ffe67f8feb4,605409625,0,0x0,8
tick,0x7ffe67f8feb4,605424939,0,0x0,8
tick,0x7ffe67f8feb4,605440540,0,0x0,8
tick,0x7ffe67f8feb4,605455904,0,0x0,8
tick,0x7ffe67f8feb4,605471786,0,0x0,8
tick,0x7ffe67f8feb4,605487112,0,0x0,8
tick,0x7ffe67f8feb4,605502464,0,0x0,8
tick,0x7ffe67f8feb4,605517698,0,0x0,8
tick,0x7ffe67f8feb4,605533142,0,0x0,8
tick,0x7ffe67f8feb4,605548158,0,0x0,8
tick,0x7ffe67f8feb4,605563251,0,0x0,8
tick,0x7ffe67f8feb4,605578814,0,0x0,8
tick,0x7ffe67f8feb4,605595268,0,0x0,8
tick,0x7ffe67f8feb4,605611532,0,0x0,8
tick,0x7ffe67f8feb4,605627567,0,0x0,8
tick,0x7ffe67f8feb4,605643083,0,0x0,8
tick,0x7ffe67f8feb4,605659100,0,0x0,8
tick,0x7ffe67f8feb4,605675330,0,0x0,8
tick,0x7ffe67f8feb4,605690619,0,0x0,8
tick,0x7ffe67f8feb4,605706261,0,0x0,8
tick,0x7ffe67f8feb4,605721931,0,0x0,8
tick,0x7ffe67f8feb4,605737853,0,0x0,8
tick,0x7ffe67f8feb4,605753101,0,0x0,8
tick,0x7ffe67f8feb4,605768118,0,0x0,8
tick,0x7ffe67f8feb4,605784232,0,0x0,8
tick,0x7ffe67f8feb4,605800043,0,0x0,8
tick,0x7ffe67f8feb4,605815612,0,0x0,8
tick,0x7ffe67f8feb4,605830738,0,0x0,8
tick,0x7ffe67f8feb4,605846627,0,0x0,8
tick,0x7ffe67f8feb4,605861660,0,0x0,8
tick,0x7ffe67f8feb4,605877745,0,0x0,8
tick,0x7ffe67f8feb4,605893712,0,0x0,8
tick,0x7ffe67f8feb4,605909618,0,0x0,8
tick,0x7ffe67f8feb4,605925203,0,0x0,8
tick,0x7ffe67f8feb4,605940660,0,0x0,8
tick,0x7ffe67f8feb4,605956338,0,0x0,8
tick,0x7ffe67f8feb4,605972038,0,0x0,8
tick,0x7ffe67f8feb4,605987762,0,0x0,8
tick,0x7ffe67f8feb4,606002894,0,0x0,8
tick,0x7ffe67f8feb4,606018703,0,0x0,8
tick,0x7ffe67f8feb4,606033891,0,0x0,8
tick,0x7ffe67f8feb4,606049649,0,0x0,8
tick,0x7ffe67f8feb4,606064895,0,0x0,8
tick,0x7ffe67f8feb4,606080162,0,0x0,8
tick,0x7ffe67f8feb4,606095904,0,0x0,8
tick,0x7ffe67f8feb4,606111174,0,0x0,8
tick,0x7ffe67f8feb4,606126930,0,0x0,8
tick,0x7ffe67f8feb4,606142234,0,0x0,8
tick,0x7ffe67f8feb4,606158294,0,0x0,8
tick,0x7ffe67f8feb4,606173735,0,0x0,8
tick,0x7ffe67f8feb4,606189703,0,0x0,8
tick,0x7ffe67f8feb4,606205065,0,0x0,8
tick,0x7ffe67f8feb4,606220696,0,0x0,8
tick,0x7ffe67f8feb4,606236715,0,0x0,8
tick,0x7ffe67f8feb4,606252825,0,0x0,8
tick,0x7ffe67f8feb4,606267836,0,0x0,8
tick,0x7ffe67f8feb4,606283667,0,0x0,8
tick,0x7ffe67f8feb4,606299666,0,0x0,8
tick,0x7ffe67f8feb4,606315457,0,0x0,8
tick,0x7ffe67f8feb4,606330695,0,0x0,8
tick,0x7ffe67f8feb4,606346517,0,0x0,8
tick,0x7ffe67f8feb4,606361670,0,0x0,8
tick,0x7ffe67f8feb4,606377538,0,0x0,8
tick,0x7ffe67f8feb4,606393552,0,0x0,8
tick,0x7ffe67f8feb4,606408676,0,0x0,8
tick,0x7ffe67f8feb4,606424053,0,0x0,8
tick,0x7ffe67f8feb4,606440038,0,0x0,8
tick,0x7ffe67f8feb4,606455906,0,0x0,8
tick,0x7ffe67f8feb4,606471263,0,0x0,8
tick,0x7ffe67f8feb4,606486743,0,0x0,8
tick,0x7ffe67f8feb4,606502705,0,0x0,8
tick,0x7ffe67f8feb4,606518337,0,0x0,8
tick,0x7ffe67f8feb4,606533520,0,0x0,8
tick,0x7ffe67f8feb4,606548578,0,0x0,8
tick,0x7ffe67f8feb4,606564569,0,0x0,8
tick,0x7ffe67f8feb4,606579608,0,0x0,8
tick,0x7ffe67f8feb4,606594764,0,0x0,8
tick,0x7ffe67f8feb4,606610659,0,0x0,8
tick,0x7ffe67f8feb4,606626094,0,0x0,8
tick,0x7ffe67f8feb4,606642113,0,0x0,8
tick,0x7ffe67f8feb4,606657727,0,0x0,8
tick,0x7ffe67f8feb4,606673256,0,0x0,8
tick,0x7ffe67f8feb4,606688792,0,0x0,8
tick,0x7ffe67f8feb4,606704320,0,0x0,8
tick,0x7ffe67f8feb4,606720349,0,0x0,8
tick,0x7ffe67f8feb4,606735989,0,0x0,8
tick,0x7ffe67f8feb4,606751290,0,0x0,8
tick,0x7ffe67f8feb4,606766912,0,0x0,8
tick,0x7ffe67f8feb4,606782775,0,0x0,8
tick,0x7ffe67f8feb4,606798805,0,0x0,8
tick,0x7ffe67f8feb4,606814795,0,0x0,8
tick,0x7ffe67f8feb4,606830801,0,0x0,8
tick,0x7ffe67f8feb4,606846792,0,0x0,8
tick,0x7ffe67f8feb4,606862759,0,0x0,8
tick,0x7ffe67f8feb4,606878821,0,0x0,8
tick,0x7ffe67f8feb4,606894756,0,0x0,8
tick,0x7ffe67f8feb4,606910791,0,0x0,8
tick,0x7ffe67f8feb4,606926891,0,0x0,8
tick,0x7ffe67f8feb4,606942783,0,0x0,8
tick,0x7ffe67f8feb4,606958790,0,0x0,8
tick,0x7ffe67f8feb4,606974374,0,0x0,8
tick,0x7ffe67f8feb4,606989784,0,0x0,8
tick,0x7ffe67f8feb4,607005797,0,0x0,8
tick,0x7ffe67f8feb4,607021728,0,0x0,8
tick,0x7ffe67f8feb4,607037898,0,0x0,8
tick,0x7ffe67f8feb4,607053786,0,0x0,8
tick,0x7ffe67f8feb4,607069793,0,0x0,8
tick,0x7ffe67f8feb4,607085864,0,0x0,8
tick,0x7ffe67f8feb4,607102098,0,0x0,8
tick,0x7ffe67f8feb4,607116837,0,0x0,8
tick,0x7ffe67f8feb4,607132910,0,0x0,8
tick,0x7ffe67f8feb4,607148324,0,0x0,8
tick,0x7ffe67f8feb4,607163581,0,0x0,8
tick,0x7ffe67f8feb4,607179435,0,0x0,8
tick,0x7ffe67f8feb4,607194759,0,0x0,8
tick,0x7ffe67f8feb4,607209953,0,0x0,8
tick,0x7ffe67f8feb4,607225500,0,0x0,8
tick,0x7ffe67f8feb4,607241109,0,0x0,8
tick,0x7ffe67f8feb4,607257061,0,0x0,8
tick,0x7ffe67f8feb4,607272328,0,0x0,8
tick,0x7ffe67f8feb4,607288269,0,0x0,8
tick,0x7ffe67f8feb4,607303636,0,0x0,8
tick,0x7ffe67f8feb4,607318800,0,0x0,8
tick,0x7ffe67f8feb4,607334535,0,0x0,8
tick,0x7ffe67f8feb4,607349936,0,0x0,8
tick,0x7ffe67f8feb4,607365753,0,0x0,8
tick,0x7ffe67f8feb4,607380928,0,0x0,8
tick,0x7ffe67f8feb4,607396527,0,0x0,8
tick,0x7ffe67f8feb4,607412534,0,0x0,8
tick,0x7ffe67f8feb4,607428141,0,0x0,8
tick,0x7ffe67f8feb4,607443841,0,0x0,8
tick,0x7ffe67f8feb4,607459871,0,0x0,8
tick,0x7ffe67f8feb4,607475435,0,0x0,8
tick,0x7ffe67f8feb4,607490800,0,0x0,8
tick,0x7ffe67f8feb4,607506656,0,0x0,8
tick,0x7ffe67f8feb4,607522097,0,0x0,8
tick,0x7ffe67f8feb4,607537857,0,0x0,8
tick,0x7ffe67f8feb4,607552859,0,0x0,8
tick,0x7ffe67f8feb4,607569337,0,0x0,8
tick,0x7ffe67f8feb4,607584895,0,0x0,8
tick,0x7ffe67f8feb4,607600933,0,0x0,8
tick,0x7ffe67f8feb4,607616256,0,0x0,8
tick,0x7ffe67f8feb4,607631404,0,0x0,8
tick,0x7ffe67f8feb4,607647613,0,0x0,8
tick,0x7ffe67f8feb4,607662906,0,0x0,8
tick,0x7ffe67f8feb4,607678964,0,0x0,8
tick,0x7ffe67f8feb4,607695157,0,0x0,8
tick,0x7ffe67f8feb4,607711438,0,0x0,8
tick,0x7ffe67f8feb4,607727474,0,0x0,8
tick,0x7ffe67f8feb4,607743459,0,0x0,8
tick,0x7ffe67f8feb4,607758845,0,0x0,8
tick,0x7ffe67f8feb4,607774916,0,0x0,8
tick,0x7ffe67f8feb4,607790912,0,0x0,8
tick,0x7ffe67f8feb4,607806898,0,0x0,8
tick,0x7ffe67f8feb4,607822866,0,0x0,8
tick,0x7ffe67f8feb4,607838878,0,0x0,8
tick,0x7ffe67f8feb4,607854822,0,0x0,8
tick,0x7ffe67f8feb4,607870904,0,0x0,8
tick,0x7ffe67f8feb4,607886935,0,0x0,8
tick,0x7ffe67f8feb4,607902889,0,0x0,8
tick,0x7ffe67f8feb4,607917951,0,0x0,8
tick,0x7ffe67f8feb4,607933967,0,0x0,8
tick,0x7ffe67f8feb4,607949932,0,0x0,8
tick,0x7ffe67f8feb4,607965318,0,0x0,8
tick,0x7ffe67f8feb4,607980527,0,0x0,8
tick,0x7ffe67f8feb4,607996197,0,0x0,8
tick,0x7ffe67f8feb4,608011375,0,0x0,8
tick,0x7ffe67f8feb4,608027058,0,0x0,8
tick,0x7ffe67f8feb4,608043420,0,0x0,8
tick,0x7ffe67f8feb4,608058208,0,0x0,8
tick,0x7ffe67f8feb4,608073730,0,0x0,8
tick,0x7ffe67f8feb4,608089751,0,0x0,8
tick,0x7ffe67f8feb4,608105673,0,0x0,8
tick,0x7ffe67f8feb4,608121676,0,0x0,8
tick,0x7ffe67f8feb4,608137718,0,0x0,8
tick,0x7ffe67f8feb4,608153712,0,0x0,8
tick,0x7ffe67f8feb4,608168958,0,0x0,8
tick,0x7ffe67f8feb4,608184921,0,0x0,8
tick,0x7ffe67f8feb4,608200342,0,0x0,8
tick,0x7ffe67f8feb4,608215732,0,0x0,8
tick,0x7ffe67f8feb4,608231524,0,0x0,8
tick,0x7ffe67f8feb4,608247390,0,0x0,8
tick,0x7ffe67f8feb4,608262880,0,0x0,8
tick,0x7ffe67f8feb4,608278932,0,0x0,8
tick,0x7ffe67f8feb4,608295053,0,0x0,8
tick,0x7ffe67f8feb4,608310336,0,0x0,8
tick,0x7ffe67f8feb4,608325732,0,0x0,8
tick,0x7ffe67f8feb4,608341054,0,0x0,8
tick,0x7ffe67f8feb4,608356390,0,0x0,8
tick,0x7ffe67f8feb4,608372418,0,0x0,8
tick,0x7ffe67f8feb4,608388196,0,0x0,8
tick,0x7ffe67f8feb4,608403583,0,0x0,8
tick,0x7ffe67f8feb4,608419281,0,0x0,8
tick,0x7ffe67f8feb4,608434711,0,0x0,8
tick,0x7ffe67f8feb4,608450498,0,0x0,8
tick,0x7ffe67f8feb4,608465972,0,0x0,8
tick,0x7ffe67f8feb4,608481304,0,0x0,8
tick,0x7ffe67f8feb4,608496666,0,0x0,8
tick,0x7ffe67f8feb4,608511842,0,0x0,8
tick,0x7ffe67f8feb4,608526966,0,0x0,8
tick,0x7ffe67f8feb4,608542143,0,0x0,8
tick,0x7ffe67f8feb4,608557251,0,0x0,8
tick,0x7ffe67f8feb4,608573252,0,0x0,8
tick,0x7ffe67f8feb4,608588645,0,0x0,8
tick,0x7ffe67f8feb4,608604621,0,0x0,8
tick,0x7ffe67f8feb4,608620442,0,0x0,8
tick,0x7ffe67f8feb4,608635963,0,0x0,8
tick,0x7ffe67f8feb4,608651321,0,0x0,8
tick,0x7ffe67f8feb4,608667461,0,0x0,8
tick,0x7ffe67f8feb4,608682958,0,0x0,8
tick,0x7ffe67f8feb4,608697977,0,0x0,8
tick,0x7ffe67f8feb4,608713553,0,0x0,8
tick,0x7ffe67f8feb4,608729298,0,0x0,8
tick,0x7ffe67f8feb4,608745581,0,0x0,8
tick,0x7ffe67f8feb4,608760616,0,0x0,8
tick,0x7ffe67f8feb4,608776223,0,0x0,8
tick,0x7ffe67f8feb4,608792522,0,0x0,8
tick,0x7ffe67f8feb4,608807498,0,0x0,8
tick,0x7ffe67f8feb4,608823464,0,0x0,8
tick,0x7ffe67f8feb4,608839470,0,0x0,8
tick,0x7ffe67f8feb4,608855462,0,0x0,8
tick,0x7ffe67f8feb4,608871551,0,0x0,8
tick,0x7ffe67f8feb4,608886620,0,0x0,8
tick,0x7ffe67f8feb4,608901727,0,0x0,8
tick,0x7ffe67f8feb4,608917368,0,0x0,8
tick,0x7ffe67f8feb4,608932767,0,0x0,8
tick,0x7ffe67f8feb4,608948393,0,0x0,8
tick,0x7ffe67f8feb4,608963731,0,0x0,8
tick,0x7ffe67f8feb4,608978979,0,0x0,8
tick,0x7ffe67f8feb4,608994201,0,0x0,8
tick,0x7ffe67f8feb4,609009608,0,0x0,8
tick,0x7ffe67f8feb4,609025433,0,0x0,8
tick,0x7ffe67f8feb4,609040503,0,0x0,8
tick,0x7ffe67f8feb4,609056534,0,0x0,8
tick,0x7ffe67f8feb4,609072141,0,0x0,8
tick,0x7ffe67f8feb4,609087357,0,0x0,8
tick,0x7ffe67f8feb4,609102975,0,0x0,8
tick,0x7ffe67f8feb4,609118448,0,0x0,8
tick,0x7ffe67f8feb4,609134328,0,0x0,8
tick,0x7ffe67f8feb4,609150288,0,0x0,8
tick,0x7ffe67f8feb4,609166489,0,0x0,8
tick,0x7ffe67f8feb4,609182122,0,0x0,8
tick,0x7ffe67f8feb4,609198161,0,0x0,8
tick,0x7ffe67f8feb4,609213266,0,0x0,8
tick,0x7ffe67f8feb4,609229064,0,0x0,8
tick,0x7ffe67f8feb4,609244263,0,0x0,8
tick,0x7ffe67f8feb4,609259469,0,0x0,8
tick,0x7ffe67f8feb4,609275495,0,0x0,8
tick,0x7ffe67f8feb4,609291447,0,0x0,8
tick,0x7ffe67f8feb4,609306550,0,0x0,8
tick,0x7ffe67f8feb4,609321469,0,0x0,8
tick,0x7ffe67f8feb4,609337609,0,0x0,8
tick,0x7ffe67f8feb4,609352608,0,0x0,8
tick,0x7ffe67f8feb4,609367729,0,0x0,8
tick,0x7ffe67f8feb4,609383744,0,0x0,8
tick,0x7ffe67f8feb4,609399755,0,0x0,8
tick,0x7ffe67f8feb4,609415742,0,0x0,8
tick,0x7ffe67f8feb4,609431780,0,0x0,8
tick,0x7ffe67f8feb4,609447762,0,0x0,8
tick,0x7ffe67f8feb4,609463766,0,0x0,8
tick,0x7ffe67f8feb4,609478883,0,0x0,8
tick,0x7ffe67f8feb4,609494713,0,0x0,8
tick,0x7ffe67f8feb4,609510775,0,0x0,8
tick,0x7ffe67f8feb4,609526813,0,0x0,8
tick,0x7ffe67f8feb4,609542792,0,0x0,8
tick,0x7ffe67f8feb4,609558782,0,0x0,8
tick,0x7ffe67f8feb4,609575460,0,0x0,8
tick,0x7ffe67f8feb4,609591116,0,0x0,8
tick,0x7ffe67f8feb4,609606876,0,0x0,8
tick,0x7ffe67f8feb4,609623515,0,0x0,8
tick,0x7ffe67f8feb4,609638198,0,0x0,8
tick,0x7ffe67f8feb4,609654065,0,0x0,8
tick,0x7ffe67f8feb4,609670076,0,0x0,8
tick,0x7ffe67f8feb4,609686082,0,0x0,8
tick,0x7ffe67f8feb4,609702134,0,0x0,8
tick,0x7ffe67f8feb4,609718213,0,0x0,8
tick,0x7ffe67f8feb4,609734080,0,0x0,8
tick,0x7ffe67f8feb4,609749078,0,0x0,8
tick,0x7ffe67f8feb4,609765074,0,0x0,8
tick,0x7ffe67f8feb4,609781114,0,0x0,8
tick,0x7ffe67f8feb4,609797091,0,0x0,8
tick,0x7ffe67f8feb4,609812089,0,0x0,8
tick,0x7ffe67f8feb4,609828071,0,0x0,8
tick,0x7ffe67f8feb4,609844076,0,0x0,8
tick,0x7ffe67f8feb4,609860093,0,0x0,8
tick,0x7ffe67f8feb4,609876213,0,0x0,8
tick,0x7ffe67f8feb4,609892121,0,0x0,8
tick,0x7ffe67f8feb4,609908238,0,0x0,8
tick,0x7ffe67f8feb4,609924120,0,0x0,8
tick,0x7ffe67f8feb4,609940190,0,0x0,8
tick,0x7ffe67f8feb4,609956179,0,0x0,8
tick,0x7ffe67f8feb4,609972228,0,0x0,8
tick,0x7ffe67f8feb4,609988308,0,0x0,8
tick,0x7ffe67f8feb4,610003246,0,0x0,8
tick,0x7ffe67f8feb4,610019219,0,0x0,8
tick,0x7ffe67f8feb4,610034683,0,0x0,8
tick,0x7ffe67f8feb4,610050230,0,0x0,8
tick,0x7ffe67f8feb4,610066232,0,0x0,8
tick,0x7ffe67f8feb4,610082225,0,0x0,8
tick,0x7ffe67f8feb4,610098237,0,0x0,8
tick,0x7ffe67f8feb4,610114237,0,0x0,8
tick,0x7ffe67f8feb4,610130229,0,0x0,8
tick,0x7ffe67f8feb4,610146263,0,0x0,8
tick,0x7ffe67f8feb4,610162249,0,0x0,8
tick,0x7ffe67f8feb4,610178061,0,0x0,8
tick,0x7ffe67f8feb4,610193254,0,0x0,8
tick,0x7ffe67f8feb4,610209040,0,0x0,8
tick,0x7ffe67f8feb4,610224442,0,0x0,8
tick,0x7ffe67f8feb4,610240048,0,0x0,8
tick,0x7ffe67f8feb4,610256069,0,0x0,8
tick,0x7ffe67f8feb4,610271681,0,0x0,8
tick,0x7ffe67f8feb4,610287085,0,0x0,8
tick,0x7ffe67f8feb4,610302244,0,0x0,8
tick,0x7ffe67f8feb4,610318058,0,0x0,8
tick,0x7ffe67f8feb4,610334063,0,0x0,8
tick,0x7ffe67f8feb4,610349266,0,0x0,8
tick,0x7ffe67f8feb4,610364668,0,0x0,8
tick,0x7ffe67f8feb4,610380437,0,0x0,8
tick,0x7ffe67f8feb4,610395708,0,0x0,8
tick,0x7ffe67f8feb4,610410923,0,0x0,8
tick,0x7ffe67f8feb4,610426382,0,0x0,8
tick,0x7ffe67f8feb4,610442092,0,0x0,8
tick,0x7ffe67f8feb4,610458097,0,0x0,8
tick,0x7ffe67f8feb4,610473301,0,0x0,8
tick,0x7ffe67f8feb4,610489128,0,0x0,8
tick,0x7ffe67f8feb4,610504588,0,0x0,8
tick,0x7ffe67f8feb4,610520140,0,0x0,8
tick,0x7ffe67f8feb4,610535351,0,0x0,8
tick,0x7ffe67f8feb4,610551349,0,0x0,8
tick,0x7ffe67f8feb4,610567068,0,0x0,8
tick,0x7ffe67f8feb4,610583582,0,0x0,8
tick,0x7ffe67f8feb4,610599197,0,0x0,8
tick,0x7ffe67f8feb4,610613968,0,0x0,8
tick,0x7ffe67f8feb4,610629350,0,0x0,8
tick,0x7ffe67f8feb4,610644915,0,0x0,8
tick,0x7ffe67f8feb4,610660290,0,0x0,8
tick,0x7ffe67f8feb4,610676029,0,0x0,8
tick,0x7ffe67f8feb4,610691109,0,0x0,8
tick,0x7ffe67f8feb4,610706416,0,0x0,8
tick,0x7ffe67f8feb4,610722383,0,0x0,8
tick,0x7ffe67f8feb4,610738101,0,0x0,8
tick,0x7ffe67f8feb4,610754159,0,0x0,8
tick,0x7ffe67f8feb4,610769730,0,0x0,8
tick,0x7ffe67f8feb4,610784155,0,0x0,8
tick,0x7ffe67f8feb4,610799340,0,0x0,8
tick,0x7ffe67f8feb4,610814742,0,0x0,8
tick,0x7ffe67f8feb4,610830766,0,0x0,8
tick,0x7ffe67f8feb4,610846725,0,0x0,8
tick,0x7ffe67f8feb4,610862746,0,0x0,8
tick,0x7ffe67f8feb4,610878071,0,0x0,8
tick,0x7ffe67f8feb4,610893526,0,0x0,8
tick,0x7ffe67f8feb4,610908792,0,0x0,8
tick,0x7ffe67f8feb4,610924501,0,0x0,8
tick,0x7ffe67f8feb4,610940199,0,0x0,8
tick,0x7ffe67f8feb4,610956088,0,0x0,8
tick,0x7ffe67f8feb4,610971636,0,0x0,8
tick,0x7ffe67f8feb4,610987408,0,0x0,8
tick,0x7ffe67f8feb4,611004891,0,0x0,8
tick,0x7ffe67f8feb4,611018744,0,0x0,8
tick,0x7ffe67f8feb4,611035541,0,0x0,8
tick,0x7ffe67f8feb4,611051326,0,0x0,8
tick,0x7ffe67f8feb4,611066844,0,0x0,8
tick,0x7ffe67f8feb4,611081752,0,0x0,8
tick,0x7ffe67f8feb4,611098467,0,0x0,8
tick,0x7ffe67f8feb4,611113751,0,0x0,8
tick,0x7ffe67f8feb4,611130247,0,0x0,8
tick,0x7ffe67f8feb4,611145767,0,0x0,8
tick,0x7ffe67f8feb4,611161783,0,0x0,8
tick,0x7ffe67f8feb4,611177811,0,0x0,8
tick,0x7ffe67f8feb4,611193783,0,0x0,8
tick,0x7ffe67f8feb4,611208770,0,0x0,8
tick,0x7ffe67f8feb4,611224778,0,0x0,8
tick,0x7ffe67f8feb4,611241010,0,0x0,8
tick,0x7ffe67f8feb4,611257450,0,0x0,8
tick,0x7ffe67f8feb4,611272980,0,0x0,8
tick,0x7ffe67f8feb4,611288217,0,0x0,8
tick,0x7ffe67f8feb4,611303608,0,0x0,8
tick,0x7ffe67f8feb4,611318218,0,0x0,8
tick,0x7ffe67f8feb4,611333476,0,0x0,8
tick,0x7ffe67f8feb4,611349081,0,0x0,8
tick,0x7ffe67f8feb4,611364427,0,0x0,8
tick,0x7ffe67f8feb4,611380074,0,0x0,8
tick,0x7ffe67f8feb4,611395087,0,0x0,8
tick,0x7ffe67f8feb4,611410254,0,0x0,8
tick,0x7ffe67f8feb4,611426093,0,0x0,8
tick,0x7ffe67f8feb4,611442081,0,0x0,8
tick,0x7ffe67f8feb4,611458079,0,0x0,8
tick,0x7ffe67f8feb4,611473339,0,0x0,8
tick,0x7ffe67f8feb4,611488228,0,0x0,8
tick,0x7ffe67f8feb4,611504069,0,0x0,8
tick,0x7ffe67f8feb4,611519239,0,0x0,8
tick,0x7ffe67f8feb4,611534474,0,0x0,8
tick,0x7ffe67f8feb4,611550465,0,0x0,8
tick,0x7ffe67f8feb4,611566535,0,0x0,8
tick,0x7ffe67f8feb4,611582227,0,0x0,8
tick,0x7ffe67f8feb4,611598075,0,0x0,8
tick,0x7ffe67f8feb4,611614079,0,0x0,8
tick,0x7ffe67f8feb4,611629476,0,0x0,8
tick,0x7ffe67f8feb4,611644476,0,0x0,8
tick,0x7ffe67f8feb4,611660126,0,0x0,8
tick,0x7ffe67f8feb4,611675079,0,0x0,8
tick,0x7ffe67f8feb4,611690516,0,0x0,8
tick,0x7ffe67f8feb4,611706601,0,0x0,8
tick,0x7ffe67f8feb4,611722494,0,0x0,8
tick,0x7ffe67f8feb4,611738096,0,0x0,8
tick,0x7ffe67f8feb4,611753495,0,0x0,8
tick,0x7ffe67f8feb4,611769073,0,0x0,8
tick,0x7ffe67f8feb4,611784081,0,0x0,8
tick,0x7ffe67f8feb4,611800093,0,0x0,8
tick,0x7ffe67f8feb4,611815529,0,0x0,8
tick,0x7ffe67f8feb4,611831521,0,0x0,8
tick,0x7ffe67f8feb4,611847523,0,0x0,8
tick,0x7ffe67f8feb4,611863517,0,0x0,8
tick,0x7ffe67f8feb4,611879513,0,0x0,8
tick,0x7ffe67f8feb4,611894928,0,0x0,8
tick,0x7ffe67f8feb4,611910542,0,0x0,8
tick,0x7ffe67f8feb4,611926263,0,0x0,8
tick,0x7ffe67f8feb4,611941533,0,0x0,8
tick,0x7ffe67f8feb4,611957613,0,0x0,8
tick,0x7ffe67f8feb4,611973564,0,0x0,8
tick,0x7ffe67f8feb4,611988671,0,0x0,8
tick,0x7ffe67f8feb4,612004516,0,0x0,8
tick,0x7ffe67f8feb4,612019556,0,0x0,8
tick,0x7ffe67f8feb4,612034988,0,0x0,8
tick,0x7ffe67f8feb4,612050541,0,0x0,8
tick,0x7ffe67f8feb4,612065883,0,0x0,8
tick,0x7ffe67f8feb4,612081877,0,0x0,8
tick,0x7ffe67f8feb4,612096878,0,0x0,8
tick,0x7ffe67f8feb4,612112034,0,0x0,8
tick,0x7ffe67f8feb4,612127156,0,0x0,8
tick,0x7ffe67f8feb4,612142430,0,0x0,8
tick,0x7ffe67f8feb4,612158493,0,0x0,8
tick,0x7ffe67f8feb4,612174614,0,0x0,8
tick,0x7ffe67f8feb4,612190230,0,0x0,8
tick,0x7ffe67f8feb4,612205960,0,0x0,8
tick,0x7ffe67f8feb4,612221656,0,0x0,8
tick,0x7ffe67f8feb4,612237689,0,0x0,8
tick,0x7ffe67f8feb4,612252969,0,0x0,8
tick,0x7ffe67f8feb4,612268600,0,0x0,8
tick,0x7ffe67f8feb4,612284560,0,0x0,8
tick,0x7ffe67f8feb4,612300354,0,0x0,8
tick,0x7ffe67f8feb4,612316422,0,0x0,8
tick,0x7ffe67f8feb4,612332020,0,0x0,8
tick,0x7ffe67f8feb4,612348153,0,0x0,8
tick,0x7ffe67f8feb4,612363692,0,0x0,8
tick,0x7ffe67f8feb4,612379621,0,0x0,8
tick,0x7ffe67f8feb4,612395600,0,0x0,8
tick,0x7ffe67f8feb4,612411967,0,0x0,8
tick,0x7ffe67f8feb4,612427609,0,0x0,8
tick,0x7ffe67f8feb4,612443393,0,0x0,8
tick,0x7ffe67f8feb4,612458626,0,0x0,8
tick,0x7ffe67f8feb4,612474658,0,0x0,8
tick,0x7ffe67f8feb4,612490581,0,0x0,8
tick,0x7ffe67f8feb4,612505583,0,0x0,8
tick,0x7ffe67f8feb4,612521579,0,0x0,8
tick,0x7ffe67f8feb4,612536728,0,0x0,8
tick,0x7ffe67f8feb4,612551389,0,0x0,8
tick,0x7ffe67f8feb4,612566391,0,0x0,8
tick,0x7ffe67f8feb4,612581581,0,0x0,8
tick,0x7ffe67f8feb4,612597596,0,0x0,8
tick,0x7ffe67f8feb4,612613505,0,0x0,8
tick,0x7ffe67f8feb4,612628689,0,0x0,8
tick,0x7ffe67f8feb4,612643458,0,0x0,8
tick,0x7ffe67f8feb4,612659512,0,0x0,8
tick,0x7ffe67f8feb4,612675535,0,0x0,8
tick,0x7ffe67f8feb4,612690383,0,0x0,8
tick,0x7ffe67f8feb4,612706309,0,0x0,8
tick,0x7ffe67f8feb4,612722401,0,0x0,8
tick,0x7ffe67f8feb4,612738337,0,0x0,8
tick,0x7ffe67f8feb4,612753559,0,0x0,8
tick,0x7ffe67f8feb4,612769337,0,0x0,8
tick,0x7ffe67f8feb4,612784564,0,0x0,8
tick,0x7ffe67f8feb4,612800408,0,0x0,8
tick,0x7ffe67f8feb4,612815653,0,0x0,8
tick,0x7ffe67f8feb4,612831108,0,0x0,8
tick,0x7ffe67f8feb4,612847091,0,0x0,8
tick,0x7ffe67f8feb4,612863116,0,0x0,8
tick,0x7ffe67f8feb4,612879212,0,0x0,8
tick,0x7ffe67f8feb4,612894554,0,0x0,8
tick,0x7ffe67f8feb4,612909799,0,0x0,8
tick,0x7ffe67f8feb4,612925168,0,0x0,8
tick,0x7ffe67f8feb4,612940166,0,0x0,8
tick,0x7ffe67f8feb4,612955323,0,0x0,8
tick,0x7ffe67f8feb4,612971383,0,0x0,8
tick,0x7ffe67f8feb4,612986687,0,0x0,8
tick,0x7ffe67f8feb4,613002698,0,0x0,8
tick,0x7ffe67f8feb4,613018723,0,0x0,8
tick,0x7ffe67f8feb4,613033586,0,0x0,8
tick,0x7ffe67f8feb4,613048853,0,0x0,8
tick,0x7ffe67f8feb4,613064609,0,0x0,8
tick,0x7ffe67f8feb4,613079745,0,0x0,8
tick,0x7ffe67f8feb4,613095439,0,0x0,8
tick,0x7ffe67f8feb4,613111463,0,0x0,8
tick,0x7ffe67f8feb4,613127477,0,0x0,8
tick,0x7ffe67f8feb4,613142583,0,0x0,8
tick,0x7ffe67f8feb4,613158162,0,0x0,8
tick,0x7ffe67f8feb4,613173609,0,0x0,8
tick,0x7ffe67f8feb4,613188802,0,0x0,8
tick,0x7ffe67f8feb4,613204751,0,0x0,8
tick,0x7ffe67f8feb4,613219903,0,0x0,8
tick,0x7ffe67f8feb4,613235920,0,0x0,8
tick,0x7ffe67f8feb4,613251455,0,0x0,8
tick,0x7ffe67f8feb4,613267056,0,0x0,8
tick,0x7ffe67f8feb4,613282794,0,0x0,8
tick,0x7ffe67f8feb4,613298529,0,0x0,8
tick,0x7ffe67f8feb4,613313890,0,0x0,8
tick,0x7ffe67f8feb4,613329574,0,0x0,8
tick,0x7ffe67f8feb4,613345243,0,0x0,8
tick,0x7ffe67f8feb4,613360791,0,0x0,8
tick,0x7ffe67f8feb4,613377198,0,0x0,8
tick,0x7ffe67f8feb4,613392093,0,0x0,8
tick,0x7ffe67f8feb4,613408184,0,0x0,8
tick,0x7ffe67f8feb4,613423464,0,0x0,8
tick,0x7ffe67f8feb4,613439302,0,0x0,8
tick,0x7ffe67f8feb4,613454081,0,0x0,8
tick,0x7ffe67f8feb4,613469889,0,0x0,8
tick,0x7ffe67f8feb4,613484825,0,0x0,8
tick,0x7ffe67f8feb4,613500898,0,0x0,8
tick,0x7ffe67f8feb4,613516102,0,0x0,8
tick,0x7ffe67f8feb4,613532464,0,0x0,8
tick,0x7ffe67f8feb4,613548120,0,0x0,8
tick,0x7ffe67f8feb4,613564126,0,0x0,8
tick,0x7ffe67f8feb4,613580126,0,0x0,8
tick,0x7ffe67f8feb4,613595419,0,0x0,8
tick,0x7ffe67f8feb4,613611243,0,0x0,8
tick,0x7ffe67f8feb4,613626523,0,0x0,8
tick,0x7ffe67f8feb4,613641409,0,0x0,8
tick,0x7ffe67f8feb4,613657423,0,0x0,8
tick,0x7ffe67f8feb4,613672549,0,0x0,8
tick,0x7ffe67f8feb4,613687791,0,0x0,8
tick,0x7ffe67f8feb4,613703556,0,0x0,8
tick,0x7ffe67f8feb4,613718845,0,0x0,8
tick,0x7ffe67f8feb4,613734569,0,0x0,8
tick,0x7ffe67f8feb4,613749838,0,0x0,8
tick,0x7ffe67f8feb4,613765862,0,0x0,8
tick,0x7ffe67f8feb4,613781410,0,0x0,8
tick,0x7ffe67f8feb4,613796769,0,0x0,8
tick,0x7ffe67f8feb4,613811761,0,0x0,8
tick,0x7ffe67f8feb4,613827788,0,0x0,8
tick,0x7ffe67f8feb4,613842757,0,0x0,8
tick,0x7ffe67f8feb4,613859041,0,0x0,8
tick,0x7ffe67f8feb4,613874743,0,0x0,8
tick,0x7ffe67f8feb4,613890835,0,0x0,8
tick,0x7ffe67f8feb4,613905565,0,0x0,8
tick,0x7ffe67f8feb4,613921512,0,0x0,8
tick,0x7ffe67f8feb4,613936421,0,0x0,8
tick,0x7ffe67f8feb4,613951406,0,0x0,8
tick,0x7ffe67f8feb4,613967148,0,0x0,8
tick,0x7ffe67f8feb4,613982564,0,0x0,8
tick,0x7ffe67f8feb4,613997849,0,0x0,8
tick,0x7ffe67f8feb4,614013583,0,0x0,8
tick,0x7ffe67f8feb4,614028834,0,0x0,8
tick,0x7ffe67f8feb4,614043858,0,0x0,8
tick,0x7ffe67f8feb4,614059847,0,0x0,8
tick,0x7ffe67f8feb4,614075704,0,0x0,8
tick,0x7ffe67f8feb4,614091423,0,0x0,8
tick,0x7ffe67f8feb4,614106568,0,0x0,8
tick,0x7ffe67f8feb4,614122434,0,0x0,8
tick,0x7ffe67f8feb4,614137838,0,0x0,8
tick,0x7ffe67f8feb4,614153624,0,0x0,8
tick,0x7ffe67f8feb4,614169637,0,0x0,8
tick,0x7ffe67f8feb4,614185089,0,0x0,8
tick,0x7ffe67f8feb4,614200841,0,0x0,8
tick,0x7ffe67f8feb4,614216819,0,0x0,8
tick,0x7ffe67f8feb4,614232600,0,0x0,8
tick,0x7ffe67f8feb4,614247385,0,0x0,8
tick,0x7ffe67f8feb4,614262584,0,0x0,8
tick,0x7ffe67f8feb4,614277895,0,0x0,8
tick,0x7ffe67f8feb4,614293995,0,0x0,8
tick,0x7ffe67f8feb4,614309127,0,0x0,8
tick,0x7ffe67f8feb4,614324566,0,0x0,8
tick,0x7ffe67f8feb4,614339517,0,0x0,8
tick,0x7ffe67f8feb4,614355492,0,0x0,8
tick,0x7ffe67f8feb4,614371810,0,0x0,8
tick,0x7ffe67f8feb4,614387498,0,0x0,8
tick,0x7ffe67f8feb4,614403047,0,0x0,8
tick,0x7ffe67f8feb4,614418538,0,0x0,8
tick,0x7ffe67f8feb4,614433736,0,0x0,8
tick,0x7ffe67f8feb4,614449559,0,0x0,8
tick,0x7ffe67f8feb4,614465067,0,0x0,8
tick,0x7ffe67f8feb4,614480292,0,0x0,8
tick,0x7ffe67f8feb4,614495814,0,0x0,8
tick,0x7ffe67f8feb4,614511471,0,0x0,8
tick,0x7ffe67f8feb4,614526471,0,0x0,8
tick,0x7ffe67f8feb4,614541385,0,0x0,8
tick,0x7ffe67f8feb4,614557460,0,0x0,8
tick,0x7ffe67f8feb4,614573486,0,0x0,8
tick,0x7ffe67f8feb4,614589164,0,0x0,8
tick,0x7ffe67f8feb4,614604692,0,0x0,8
tick,0x7ffe67f8feb4,614619929,0,0x0,8
tick,0x7ffe67f8feb4,614635708,0,0x0,8
tick,0x7ffe67f8feb4,614650926,0,0x0,8
tick,0x7ffe67f8feb4,614666939,0,0x0,8
tick,0x7ffe67f8feb4,614682933,0,0x0,8
tick,0x7ffe67f8feb4,614698271,0,0x0,8
tick,0x7ffe67f8feb4,614713606,0,0x0,8
tick,0x7ffe67f8feb4,614728961,0,0x0,8
tick,0x7ffe67f8feb4,614744597,0,0x0,8
tick,0x7ffe67f8feb4,614760640,0,0x0,8
tick,0x7ffe67f8feb4,614776185,0,0x0,8
tick,0x7ffe67f8feb4,614791412,0,0x0,8
tick,0x7ffe67f8feb4,614806973,0,0x0,8
tick,0x7ffe67f8feb4,614822402,0,0x0,8
tick,0x7ffe67f8feb4,614838012,0,0x0,8
tick,0x7ffe67f8feb4,614853985,0,0x0,8
tick,0x7ffe67f8feb4,614869984,0,0x0,8
tick,0x7ffe67f8feb4,614885982,0,0x0,8
tick,0x7ffe67f8feb4,614901502,0,0x0,8
tick,0x7ffe67f8feb4,614916668,0,0x0,8
tick,0x7ffe67f8feb4,614932413,0,0x0,8
tick,0x7ffe67f8feb4,614947985,0,0x0,8
tick,0x7ffe67f8feb4,614963765,0,0x0,8
tick,0x7ffe67f8feb4,614979575,0,0x0,8
tick,0x7ffe67f8feb4,614995306,0,0x0,8
tick,0x7ffe67f8feb4,615011310,0,0x0,8
tick,0x7ffe67f8feb4,615027031,0,0x0,8
tick,0x7ffe67f8feb4,615042476,0,0x0,8
tick,0x7ffe67f8feb4,615058021,0,0x0,8
tick,0x7ffe67f8feb4,615073592,0,0x0,8
tick,0x7ffe67f8feb4,615088830,0,0x0,8
tick,0x7ffe67f8feb4,615103592,0,0x0,8
tick,0x7ffe67f8feb4,615119123,0,0x0,8
tick,0x7ffe67f8feb4,615134861,0,0x0,8
tick,0x7ffe67f8feb4,615150007,0,0x0,8
tick,0x7ffe67f8feb4,615166004,0,0x0,8
tick,0x7ffe67f8feb4,615181481,0,0x0,8
tick,0x7ffe67f8feb4,615197178,0,0x0,8
tick,0x7ffe67f8feb4,615212635,0,0x0,8
tick,0x7ffe67f8feb4,615228750,0,0x0,8
tick,0x7ffe67f8feb4,615244787,0,0x0,8
tick,0x7ffe67f8feb4,615260452,0,0x0,8
tick,0x7ffe67f8feb4,615275836,0,0x0,8
tick,0x7ffe67f8feb4,615291474,0,0x0,8
tick,0x7ffe67f8feb4,615306922,0,0x0,8
tick,0x7ffe67f8feb4,615322508,0,0x0,8
tick,0x7ffe67f8feb4,615337313,0,0x0,8
tick,0x7ffe67f8feb4,615352545,0,0x0,8
tick,0x7ffe67f8feb4,615368620,0,0x0,8
tick,0x7ffe67f8feb4,615383853,0,0x0,8
tick,0x7ffe67f8feb4,615399588,0,0x0,8
tick,0x7ffe67f8feb4,615414913,0,0x0,8
tick,0x7ffe67f8feb4,615430384,0,0x0,8
tick,0x7ffe67f8feb4,615446227,0,0x0,8
tick,0x7ffe67f8feb4,615461466,0,0x0,8
tick,0x7ffe67f8feb4,615477218,0,0x0,8
tick,0x7ffe67f8feb4,615492548,0,0x0,8
tick,0x7ffe67f8feb4,615507913,0,0x0,8
tick,0x7ffe67f8feb4,615523547,0,0x0,8
tick,0x7ffe67f8feb4,615538946,0,0x0,8
tick,0x7ffe67f8feb4,615554993,0,0x0,8
tick,0x7ffe67f8feb4,615569972,0,0x0,8
tick,0x7ffe67f8feb4,615585757,0,0x0,8
tick,0x7ffe67f8feb4,615600769,0,0x0,8
tick,0x7ffe67f8feb4,615615884,0,0x0,8
tick,0x7ffe67f8feb4,615631542,0,0x0,8
tick,0x7ffe67f8feb4,615646872,0,0x0,8
tick,0x7ffe67f8feb4,615662727,0,0x0,8
tick,0x7ffe67f8feb4,615678725,0,0x0,8
tick,0x7ffe67f8feb4,615694251,0,0x0,8
tick,0x7ffe67f8feb4,615709382,0,0x0,8
tick,0x7ffe67f8feb4,615724868,0,0x0,8
tick,0x7ffe67f8feb4,615739683,0,0x0,8
tick,0x7ffe67f8feb4,615754622,0,0x0,8
tick,0x7ffe67f8feb4,615770267,0,0x0,8
tick,0x7ffe67f8feb4,615785874,0,0x0,8
tick,0x7ffe67f8feb4,615800569,0,0x0,8
tick,0x7ffe67f8feb4,615816015,0,0x0,8
tick,0x7ffe67f8feb4,615831557,0,0x0,8
tick,0x7ffe67f8feb4,615846889,0,0x0,8
tick,0x7ffe67f8feb4,615862807,0,0x0,8
tick,0x7ffe67f8feb4,615878798,0,0x0,8
tick,0x7ffe67f8feb4,615894820,0,0x0,8
tick,0x7ffe67f8feb4,615909897,0,0x0,8
tick,0x7ffe67f8feb4,615925627,0,0x0,8
tick,0x7ffe67f8feb4,615940695,0,0x0,8
tick,0x7ffe67f8feb4,615956531,0,0x0,8
tick,0x7ffe67f8feb4,615971738,0,0x0,8
tick,0x7ffe67f8feb4,615986890,0,0x0,8
tick,0x7ffe67f8feb4,616002139,0,0x0,8
tick,0x7ffe67f8feb4,616017452,0,0x0,8
tick,0x7ffe67f8feb4,616032518,0,0x0,8
tick,0x7ffe67f8feb4,616047683,0,0x0,8
tick,0x7ffe67f8feb4,616063697,0,0x0,8
tick,0x7ffe67f8feb4,616079576,0,0x0,8
tick,0x7ffe67f8feb4,616095561,0,0x0,8
tick,0x7ffe67f8feb4,616111521,0,0x0,8
tick,0x7ffe67f8feb4,616126753,0,0x0,8
tick,0x7ffe67f8feb4,616142749,0,0x0,8
tick,0x7ffe67f8feb4,616158095,0,0x0,8
tick,0x7ffe67f8feb4,616173864,0,0x0,8
tick,0x7ffe67f8feb4,616189124,0,0x0,8
tick,0x7ffe67f8feb4,616204902,0,0x0,8
tick,0x7ffe67f8feb4,616220292,0,0x0,8
tick,0x7ffe67f8feb4,616236185,0,0x0,8
tick,0x7ffe67f8feb4,616251539,0,0x0,8
tick,0x7ffe67f8feb4,616266714,0,0x0,8
tick,0x7ffe67f8feb4,616282741,0,0x0,8
tick,0x7ffe67f8feb4,616298516,0,0x0,8
tick,0x7ffe67f8feb4,616313669,0,0x0,8
tick,0x7ffe67f8feb4,616328729,0,0x0,8
tick,0x7ffe67f8feb4,616343988,0,0x0,8
tick,0x7ffe67f8feb4,616359333,0,0x0,8
tick,0x7ffe67f8feb4,616374933,0,0x0,8
tick,0x7ffe67f8feb4,616390592,0,0x0,8
tick,0x7ffe67f8feb4,616405708,0,0x0,8
tick,0x7ffe67f8feb4,616421577,0,0x0,8
tick,0x7ffe67f8feb4,616437502,0,0x0,8
tick,0x7ffe67f8feb4,616452654,0,0x0,8
tick,0x7ffe67f8feb4,616468344,0,0x0,8
tick,0x7ffe67f8feb4,616483919,0,0x0,8
tick,0x7ffe67f8feb4,616499452,0,0x0,8
tick,0x7ffe67f8feb4,616515654,0,0x0,8
tick,0x7ffe67f8feb4,616531695,0,0x0,8
tick,0x7ffe67f8feb4,616546777,0,0x0,8
tick,0x7ffe67f8feb4,616562682,0,0x0,8
tick,0x7ffe67f8feb4,616578743,0,0x0,8
tick,0x7ffe67f8feb4,616594037,0,0x0,8
tick,0x7ffe67f8feb4,616609635,0,0x0,8
tick,0x7ffe67f8feb4,616625308,0,0x0,8
tick,0x7ffe67f8feb4,616640702,0,0x0,8
tick,0x7ffe67f8feb4,616656792,0,0x0,8
tick,0x7ffe67f8feb4,616673003,0,0x0,8
tick,0x7ffe67f8feb4,616688385,0,0x0,8
tick,0x7ffe67f8feb4,616703497,0,0x0,8
tick,0x7ffe67f8feb4,616719011,0,0x0,8
tick,0x7ffe67f8feb4,616734274,0,0x0,8
tick,0x7ffe67f8feb4,616749558,0,0x0,8
tick,0x7ffe67f8feb4,616765017,0,0x0,8
tick,0x7ffe67f8feb4,616780803,0,0x0,8
tick,0x7ffe67f8feb4,616796797,0,0x0,8
tick,0x7ffe67f8feb4,616812967,0,0x0,8
tick,0x7ffe67f8feb4,616828655,0,0x0,8
tick,0x7ffe67f8feb4,616843897,0,0x0,8
tick,0x7ffe67f8feb4,616858794,0,0x0,8
tick,0x7ffe67f8feb4,616874758,0,0x0,8
tick,0x7ffe67f8feb4,616890755,0,0x0,8
tick,0x7ffe67f8feb4,616906756,0,0x0,8
tick,0x7ffe67f8feb4,616922763,0,0x0,8
tick,0x7ffe67f8feb4,616938758,0,0x0,8
tick,0x7ffe67f8feb4,616954780,0,0x0,8
tick,0x7ffe67f8feb4,616970790,0,0x0,8
tick,0x7ffe67f8feb4,616986974,0,0x0,8
tick,0x7ffe67f8feb4,617002091,0,0x0,8
tick,0x7ffe67f8feb4,617017045,0,0x0,8
tick,0x7ffe67f8feb4,617032695,0,0x0,8
tick,0x7ffe67f8feb4,617047915,0,0x0,8
tick,0x7ffe67f8feb4,617063376,0,0x0,8
tick,0x7ffe67f8feb4,617078951,0,0x0,8
tick,0x7ffe67f8feb4,617094408,0,0x0,8
tick,0x7ffe67f8feb4,617110399,0,0x0,8
tick,0x7ffe67f8feb4,617125868,0,0x0,8
tick,0x7ffe67f8feb4,617141566,0,0x0,8
tick,0x7ffe67f8feb4,617157015,0,0x0,8
tick,0x7ffe67f8feb4,617172516,0,0x0,8
tick,0x7ffe67f8feb4,617188381,0,0x0,8
tick,0x7ffe67f8feb4,617204625,0,0x0,8
tick,0x7ffe67f8feb4,617220197,0,0x0,8
tick,0x7ffe67f8feb4,617235880,0,0x0,8
tick,0x7ffe67f8feb4,617251508,0,0x0,8
tick,0x7ffe67f8feb4,617267239,0,0x0,8
tick,0x7ffe67f8feb4,617282551,0,0x0,8
tick,0x7ffe67f8feb4,617298466,0,0x0,8
tick,0x7ffe67f8feb4,617314713,0,0x0,8
tick,0x7ffe67f8feb4,617329958,0,0x0,8
tick,0x7ffe67f8feb4,617345886,0,0x0,8
tick,0x7ffe67f8feb4,617360903,0,0x0,8
tick,0x7ffe67f8feb4,617376418,0,0x0,8
tick,0x7ffe67f8feb4,617392454,0,0x0,8
tick,0x7ffe67f8feb4,617408712,0,0x0,8
tick,0x7ffe67f8feb4,617424325,0,0x0,8
tick,0x7ffe67f8feb4,617440219,0,0x0,8
tick,0x7ffe67f8feb4,617455529,0,0x0,8
tick,0x7ffe67f8feb4,617470769,0,0x0,8
tick,0x7ffe67f8feb4,617486878,0,0x0,8
tick,0x7ffe67f8feb4,617502455,0,0x0,8
tick,0x7ffe67f8feb4,617517919,0,0x0,8
tick,0x7ffe67f8feb4,617533123,0,0x0,8
tick,0x7ffe67f8feb4,617548104,0,0x0,8
tick,0x7ffe67f8feb4,617563593,0,0x0,8
tick,0x7ffe67f8feb4,617579595,0,0x0,8
tick,0x7ffe67f8feb4,617595328,0,0x0,8
tick,0x7ffe67f8feb4,617610778,0,0x0,8
tick,0x7ffe67f8feb4,617626111,0,0x0,8
tick,0x7ffe67f8feb4,617642008,0,0x0,8
tick,0x7ffe67f8feb4,617657584,0,0x0,8
tick,0x7ffe67f8feb4,617673222,0,0x0,8
tick,0x7ffe67f8feb4,617688865,0,0x0,8
tick,0x7ffe67f8feb4,617704886,0,0x0,8
tick,0x7ffe67f8feb4,617720448,0,0x0,8
tick,0x7ffe67f8feb4,617735930,0,0x0,8
tick,0x7ffe67f8feb4,617751247,0,0x0,8
tick,0x7ffe67f8feb4,617766955,0,0x0,8
tick,0x7ffe67f8feb4,617782150,0,0x0,8
tick,0x7ffe67f8feb4,617798160,0,0x0,8
tick,0x7ffe67f8feb4,617814173,0,0x0,8
tick,0x7ffe67f8feb4,617829635,0,0x0,8
tick,0x7ffe67f8feb4,617845253,0,0x0,8
tick,0x7ffe67f8feb4,617861429,0,0x0,8
tick,0x7ffe67f8feb4,617877401,0,0x0,8
tick,0x7ffe67f8feb4,617893591,0,0x0,8
tick,0x7ffe67f8feb4,617909371,0,0x0,8
tick,0x7ffe67f8feb4,617925368,0,0x0,8
tick,0x7ffe67f8feb4,617941358,0,0x0,8
tick,0x7ffe67f8feb4,617957372,0,0x0,8
tick,0x7ffe67f8feb4,617973421,0,0x0,8
tick,0x7ffe67f8feb4,617989357,0,0x0,8
tick,0x7ffe67f8feb4,618005366,0,0x0,8
tick,0x7ffe67f8feb4,618021383,0,0x0,8
tick,0x7ffe67f8feb4,618037374,0,0x0,8
tick,0x7ffe67f8feb4,618053357,0,0x0,8
tick,0x7ffe67f8feb4,618069363,0,0x0,8
tick,0x7ffe67f8feb4,618084690,0,0x0,8
tick,0x7ffe67f8feb4,618099926,0,0x0,8
tick,0x7ffe67f8feb4,618115034,0,0x0,8
tick,0x7ffe67f8feb4,618130718,0,0x0,8
tick,0x7ffe67f8feb4,618146147,0,0x0,8
tick,0x7ffe67f8feb4,618161467,0,0x0,8
tick,0x7ffe67f8feb4,618177497,0,0x0,8
tick,0x7ffe67f8feb4,618193024,0,0x0,8
tick,0x7ffe67f8feb4,618209045,0,0x0,8
tick,0x7ffe67f8feb4,618224277,0,0x0,8
tick,0x7ffe67f8feb4,618239644,0,0x0,8
tick,0x7ffe67f8feb4,618255558,0,0x0,8
tick,0x7ffe67f8feb4,618271063,0,0x0,8
tick,0x7ffe67f8feb4,618286611,0,0x0,8
tick,0x7ffe67f8feb4,618302003,0,0x0,8
tick,0x7ffe67f8feb4,618317114,0,0x0,8
tick,0x7ffe67f8feb4,618332724,0,0x0,8
tick,0x7ffe67f8feb4,618348127,0,0x0,8
tick,0x7ffe67f8feb4,618363444,0,0x0,8
tick,0x7ffe67f8feb4,618379513,0,0x0,8
tick,0x7ffe67f8feb4,618395063,0,0x0,8
tick,0x7ffe67f8feb4,618410537,0,0x0,8
tick,0x7ffe67f8feb4,618426442,0,0x0,8
tick,0x7ffe67f8feb4,618441984,0,0x0,8
tick,0x7ffe67f8feb4,618457548,0,0x0,8
tick,0x7ffe67f8feb4,618473439,0,0x0,8
tick,0x7ffe67f8feb4,618488564,0,0x0,8
tick,0x7ffe67f8feb4,618504560,0,0x0,8
tick,0x7ffe67f8feb4,618520004,0,0x0,8
tick,0x7ffe67f8feb4,618536005,0,0x0,8
tick,0x7ffe67f8feb4,618551816,0,0x0,8
tick,0x7ffe67f8feb4,618566802,0,0x0,8
tick,0x7ffe67f8feb4,618582199,0,0x0,8
tick,0x7ffe67f8feb4,618597867,0,0x0,8
tick,0x7ffe67f8feb4,618613451,0,0x0,8
tick,0x7ffe67f8feb4,618629326,0,0x0,8
tick,0x7ffe67f8feb4,618644776,0,0x0,8
tick,0x7ffe67f8feb4,618660621,0,0x0,8
tick,0x7ffe67f8feb4,618676248,0,0x0,8
tick,0x7ffe67f8feb4,618691660,0,0x0,8
tick,0x7ffe67f8feb4,618707570,0,0x0,8
tick,0x7ffe67f8feb4,618723065,0,0x0,8
tick,0x7ffe67f8feb4,618738534,0,0x0,8
tick,0x7ffe67f8feb4,618754170,0,0x0,8
tick,0x7ffe67f8feb4,618769631,0,0x0,8
tick,0x7ffe67f8feb4,618784781,0,0x0,8
tick,0x7ffe67f8feb4,618800947,0,0x0,8
tick,0x7ffe67f8feb4,618815973,0,0x0,8
tick,0x7ffe67f8feb4,618831770,0,0x0,8
tick,0x7ffe67f8feb4,618847117,0,0x0,8
tick,0x7ffe67f8feb4,618862370,0,0x0,8
tick,0x7ffe67f8feb4,618878339,0,0x0,8
tick,0x7ffe67f8feb4,618894344,0,0x0,8
tick,0x7ffe67f8feb4,618909322,0,0x0,8
tick,0x7ffe67f8feb4,618925668,0,0x0,8
tick,0x7ffe67f8feb4,618941882,0,0x0,8
tick,0x7ffe67f8feb4,618957267,0,0x0,8
tick,0x7ffe67f8feb4,618972668,0,0x0,8
tick,0x7ffe67f8feb4,618988005,0,0x0,8
tick,0x7ffe67f8feb4,619003631,0,0x0,8
tick,0x7ffe67f8feb4,619019662,0,0x0,8
tick,0x7ffe67f8feb4,619035269,0,0x0,8
tick,0x7ffe67f8feb4,619050802,0,0x0,8
tick,0x7ffe67f8feb4,619066043,0,0x0,8
tick,0x7ffe67f8feb4,619082032,0,0x0,8
tick,0x7ffe67f8feb4,619097829,0,0x0,8
tick,0x7ffe67f8feb4,619113229,0,0x0,8
tick,0x7ffe67f8feb4,619128318,0,0x0,8
tick,0x7ffe67f8feb4,619144301,0,0x0,8
tick,0x7ffe67f8feb4,619160484,0,0x0,8
tick,0x7ffe67f8feb4,619176701,0,0x0,8
tick,0x7ffe67f8feb4,619191458,0,0x0,8
tick,0x7ffe67f8feb4,619207266,0,0x0,8
tick,0x7ffe67f8feb4,619223332,0,0x0,8
tick,0x7ffe67f8feb4,619238638,0,0x0,8
tick,0x7ffe67f8feb4,619254292,0,0x0,8
tick,0x7ffe67f8feb4,619270281,0,0x0,8
tick,0x7ffe67f8feb4,619286368,0,0x0,8
tick,0x7ffe67f8feb4,619302321,0,0x0,8
tick,0x7ffe67f8feb4,619318280,0,0x0,8
tick,0x7ffe67f8feb4,619334309,0,0x0,8
tick,0x7ffe67f8feb4,619350341,0,0x0,8
tick,0x7ffe67f8feb4,619366302,0,0x0,8
tick,0x7ffe67f8feb4,619381697,0,0x0,8
tick,0x7ffe67f8feb4,619397699,0,0x0,8
tick,0x7ffe67f8feb4,619413557,0,0x0,8
tick,0x7ffe67f8feb4,619429594,0,0x0,8
tick,0x7ffe67f8feb4,619444673,0,0x0,8
tick,0x7ffe67f8feb4,619460480,0,0x0,8
tick,0x7ffe67f8feb4,619475677,0,0x0,8
tick,0x7ffe67f8feb4,619491670,0,0x0,8
tick,0x7ffe67f8feb4,619507695,0,0x0,8
tick,0x7ffe67f8feb4,619523717,0,0x0,8
tick,0x7ffe67f8feb4,619539718,0,0x0,8
tick,0x7ffe67f8feb4,619554804,0,0x0,8
tick,0x7ffe67f8feb4,619570705,0,0x0,8
tick,0x7ffe67f8feb4,619586700,0,0x0,8
tick,0x7ffe67f8feb4,619602729,0,0x0,8
tick,0x7ffe67f8feb4,619618702,0,0x0,8
tick,0x7ffe67f8feb4,619634230,0,0x0,8
tick,0x7ffe67f8feb4,619650270,0,0x0,8
tick,0x7ffe67f8feb4,619665608,0,0x0,8
tick,0x7ffe67f8feb4,619680938,0,0x0,8
tick,0x7ffe67f8feb4,619696611,0,0x0,8
tick,0x7ffe67f8feb4,619712616,0,0x0,8
tick,0x7ffe67f8feb4,619728440,0,0x0,8
tick,0x7ffe67f8feb4,619743590,0,0x0,8
tick,0x7ffe67f8feb4,619759596,0,0x0,8
tick,0x7ffe67f8feb4,619775655,0,0x0,8
tick,0x7ffe67f8feb4,619791637,0,0x0,8
tick,0x7ffe67f8feb4,619807604,0,0x0,8
tick,0x7ffe67f8feb4,619823604,0,0x0,8
tick,0x7ffe67f8feb4,619839623,0,0x0,8
tick,0x7ffe67f8feb4,619855768,0,0x0,8
tick,0x7ffe67f8feb4,619871749,0,0x0,8
tick,0x7ffe67f8feb4,619887750,0,0x0,8
tick,0x7ffe67f8feb4,619903729,0,0x0,8
tick,0x7ffe67f8feb4,619919730,0,0x0,8
tick,0x7ffe67f8feb4,619935723,0,0x0,8
tick,0x7ffe67f8feb4,619951760,0,0x0,8
tick,0x7ffe67f8feb4,619967773,0,0x0,8
tick,0x7ffe67f8feb4,619983751,0,0x0,8
tick,0x7ffe67f8feb4,619999959,0,0x0,8
tick,0x7ffe67f8feb4,620015746,0,0x0,8
tick,0x7ffe67f8feb4,620031757,0,0x0,8
tick,0x7ffe67f8feb4,620047813,0,0x0,8
tick,0x7ffe67f8feb4,620063754,0,0x0,8
tick,0x7ffe67f8feb4,620078894,0,0x0,8
tick,0x7ffe67f8feb4,620094834,0,0x0,8
tick,0x7ffe67f8feb4,620110784,0,0x0,8
tick,0x7ffe67f8feb4,620126764,0,0x0,8
tick,0x7ffe67f8feb4,620142798,0,0x0,8
tick,0x7ffe67f8feb4,620158826,0,0x0,8
tick,0x7ffe67f8feb4,620174802,0,0x0,8
tick,0x7ffe67f8feb4,620189869,0,0x0,8
tick,0x7ffe67f8feb4,620205175,0,0x0,8
tick,0x7ffe67f8feb4,620221148,0,0x0,8
tick,0x7ffe67f8feb4,620236829,0,0x0,8
tick,0x7ffe67f8feb4,620252791,0,0x0,8
tick,0x7ffe67f8feb4,620268785,0,0x0,8
tick,0x7ffe67f8feb4,620284787,0,0x0,8
tick,0x7ffe67f8feb4,620300897,0,0x0,8
tick,0x7ffe67f8feb4,620316916,0,0x0,8
tick,0x7ffe67f8feb4,620332781,0,0x0,8
tick,0x7ffe67f8feb4,620348784,0,0x0,8
tick,0x7ffe67f8feb4,620364849,0,0x0,8
tick,0x7ffe67f8feb4,620380811,0,0x0,8
tick,0x7ffe67f8feb4,620396856,0,0x0,8
tick,0x7ffe67f8feb4,620412787,0,0x0,8
tick,0x7ffe67f8feb4,620428851,0,0x0,8
tick,0x7ffe67f8feb4,620444630,0,0x0,8
tick,0x7ffe67f8feb4,620459816,0,0x0,8
tick,0x7ffe67f8feb4,620475819,0,0x0,8
tick,0x7ffe67f8feb4,620491817,0,0x0,8
tick,0x7ffe67f8feb4,620507849,0,0x0,8
tick,0x7ffe67f8feb4,620548919,0,0x0,8
tick,0x7ffe67f8feb4,620555830,0,0x0,8
tick,0x7ffe67f8feb4,620580562,0,0x0,8
tick,0x7ffe67f8feb4,620587822,0,0x0,8
tick,0x7ffe67f8feb4,620603831,0,0x0,8
tick,0x7ffe67f8feb4,620619844,0,0x0,8
tick,0x7ffe67f8feb4,620635823,0,0x0,8
tick,0x7ffe67f8feb4,620651853,0,0x0,8
tick,0x7ffe67f8feb4,620667824,0,0x0,8
tick,0x7ffe67f8feb4,620682867,0,0x0,8
tick,0x7ffe67f8feb4,620698926,0,0x0,8
tick,0x7ffe67f8feb4,620714872,0,0x0,8
tick,0x7ffe67f8feb4,620730868,0,0x0,8
tick,0x7ffe67f8feb4,620746049,0,0x0,8
tick,0x7ffe67f8feb4,620762035,0,0x0,8
tick,0x7ffe67f8feb4,620777880,0,0x0,8
tick,0x7ffe67f8feb4,620793900,0,0x0,8
tick,0x7ffe67f8feb4,620809934,0,0x0,8
tick,0x7ffe67f8feb4,620825937,0,0x0,8
tick,0x7ffe67f8feb4,620841884,0,0x0,8
tick,0x7ffe67f8feb4,620857998,0,0x0,8
tick,0x7ffe67f8feb4,620873710,0,0x0,8
tick,0x7ffe67f8feb4,620889664,0,0x0,8
tick,0x7ffe67f8feb4,620905665,0,0x0,8
tick,0x7ffe67f8feb4,620921661,0,0x0,8
tick,0x7ffe67f8feb4,620937677,0,0x0,8
tick,0x7ffe67f8feb4,620952895,0,0x0,8
tick,0x7ffe67f8feb4,620968892,0,0x0,8
tick,0x7ffe67f8feb4,620984579,0,0x0,8
tick,0x7ffe67f8feb4,621000293,0,0x0,8
tick,0x7ffe67f8feb4,621015854,0,0x0,8
tick,0x7ffe67f8feb4,621031847,0,0x0,8
tick,0x7ffe67f8feb4,621047954,0,0x0,8
tick,0x7ffe67f8feb4,621063557,0,0x0,8
tick,0x7ffe67f8feb4,621078898,0,0x0,8
tick,0x7ffe67f8feb4,621093912,0,0x0,8
tick,0x7ffe67f8feb4,621109100,0,0x0,8
tick,0x7ffe67f8feb4,621124422,0,0x0,8
tick,0x7ffe67f8feb4,621140453,0,0x0,8
tick,0x7ffe67f8feb4,621155985,0,0x0,8
tick,0x7ffe67f8feb4,621171959,0,0x0,8
tick,0x7ffe67f8feb4,621188021,0,0x0,8
tick,0x7ffe67f8feb4,621204018,0,0x0,8
tick,0x7ffe67f8feb4,621218993,0,0x0,8
tick,0x7ffe67f8feb4,621235141,0,0x0,8
tick,0x7ffe67f8feb4,621250526,0,0x0,8
tick,0x7ffe67f8feb4,621266428,0,0x0,8
tick,0x7ffe67f8feb4,621281137,0,0x0,8
tick,0x7ffe67f8feb4,621297058,0,0x0,8
tick,0x7ffe67f8feb4,621313023,0,0x0,8
tick,0x7ffe67f8feb4,621329031,0,0x0,8
tick,0x7ffe67f8feb4,621344310,0,0x0,8
tick,0x7ffe67f8feb4,621360026,0,0x0,8
tick,0x7ffe67f8feb4,621375441,0,0x0,8
tick,0x7ffe67f8feb4,621390568,0,0x0,8
tick,0x7ffe67f8feb4,621406061,0,0x0,8
tick,0x7ffe67f8feb4,621421442,0,0x0,8
tick,0x7ffe67f8feb4,621436917,0,0x0,8
tick,0x7ffe67f8feb4,621453047,0,0x0,8
tick,0x7ffe67f8feb4,621469063,0,0x0,8
tick,0x7ffe67f8feb4,621485166,0,0x0,8
tick,0x7ffe67f8feb4,621501077,0,0x0,8
tick,0x7ffe67f8feb4,621517113,0,0x0,8
tick,0x7ffe67f8feb4,621532725,0,0x0,8
tick,0x7ffe67f8feb4,621548467,0,0x0,8
tick,0x7ffe67f8feb4,621564386,0,0x0,8
tick,0x7ffe67f8feb4,621580025,0,0x0,8
tick,0x7ffe67f8feb4,621596025,0,0x0,8
tick,0x7ffe67f8feb4,621611496,0,0x0,8
tick,0x7ffe67f8feb4,621627094,0,0x0,8
tick,0x7ffe67f8feb4,621643035,0,0x0,8
tick,0x7ffe67f8feb4,621657883,0,0x0,8
tick,0x7ffe67f8feb4,621673143,0,0x0,8
tick,0x7ffe67f8feb4,621688476,0,0x0,8
tick,0x7ffe67f8feb4,621704145,0,0x0,8
tick,0x7ffe67f8feb4,621719733,0,0x0,8
tick,0x7ffe67f8feb4,621735126,0,0x0,8
tick,0x7ffe67f8feb4,621751224,0,0x0,8
tick,0x7ffe67f8feb4,621766696,0,0x0,8
tick,0x7ffe67f8feb4,621781833,0,0x0,8
tick,0x7ffe67f8feb4,621797088,0,0x0,8
tick,0x7ffe67f8feb4,621812332,0,0x0,8
tick,0x7ffe67f8feb4,621827418,0,0x0,8
tick,0x7ffe67f8feb4,621843408,0,0x0,8
tick,0x7ffe67f8feb4,621858290,0,0x0,8
tick,0x7ffe67f8feb4,621873592,0,0x0,8
tick,0x7ffe67f8feb4,621889228,0,0x0,8
tick,0x7ffe67f8feb4,621905274,0,0x0,8
tick,0x7ffe67f8feb4,621921297,0,0x0,8
tick,0x7ffe67f8feb4,621937360,0,0x0,8
tick,0x7ffe67f8feb4,621953277,0,0x0,8
tick,0x7ffe67f8feb4,621969363,0,0x0,8
tick,0x7ffe67f8feb4,621985539,0,0x0,8
tick,0x7ffe67f8feb4,622001396,0,0x0,8
tick,0x7ffe67f8feb4,622017296,0,0x0,8
tick,0x7ffe67f8feb4,622032311,0,0x0,8
tick,0x7ffe67f8feb4,622048268,0,0x0,8
tick,0x7ffe67f8feb4,622063442,0,0x0,8
tick,0x7ffe67f8feb4,622079272,0,0x0,8
tick,0x7ffe67f8feb4,622095310,0,0x0,8
tick,0x7ffe67f8feb4,622111072,0,0x0,8
tick,0x7ffe67f8feb4,622126074,0,0x0,8
tick,0x7ffe67f8feb4,622142033,0,0x0,8
tick,0x7ffe67f8feb4,622158074,0,0x0,8
tick,0x7ffe67f8feb4,622174096,0,0x0,8
tick,0x7ffe67f8feb4,622190091,0,0x0,8
tick,0x7ffe67f8feb4,622206117,0,0x0,8
tick,0x7ffe67f8feb4,622222103,0,0x0,8
tick,0x7ffe67f8feb4,622237108,0,0x0,8
tick,0x7ffe67f8feb4,622253113,0,0x0,8
tick,0x7ffe67f8feb4,622269094,0,0x0,8
tick,0x7ffe67f8feb4,622284097,0,0x0,8
tick,0x7ffe67f8feb4,622300095,0,0x0,8
tick,0x7ffe67f8feb4,622316094,0,0x0,8
tick,0x7ffe67f8feb4,622332116,0,0x0,8
tick,0x7ffe67f8feb4,622348125,0,0x0,8
tick,0x7ffe67f8feb4,622364106,0,0x0,8
tick,0x7ffe67f8feb4,622380112,0,0x0,8
tick,0x7ffe67f8feb4,622396141,0,0x0,8
tick,0x7ffe67f8feb4,622412111,0,0x0,8
tick,0x7ffe67f8feb4,622428126,0,0x0,8
tick,0x7ffe67f8feb4,622444109,0,0x0,8
tick,0x7ffe67f8feb4,622460131,0,0x0,8
tick,0x7ffe67f8feb4,622475138,0,0x0,8
tick,0x7ffe67f8feb4,622491130,0,0x0,8
tick,0x7ffe67f8feb4,622506343,0,0x0,8
tick,0x7ffe67f8feb4,622522134,0,0x0,8
tick,0x7ffe67f8feb4,622537151,0,0x0,8
tick,0x7ffe67f8feb4,622553226,0,0x0,8
tick,0x7ffe67f8feb4,622569249,0,0x0,8
tick,0x7ffe67f8feb4,622585175,0,0x0,8
tick,0x7ffe67f8feb4,622601468,0,0x0,8
tick,0x7ffe67f8feb4,622617164,0,0x0,8
tick,0x7ffe67f8feb4,622633195,0,0x0,8
tick,0x7ffe67f8feb4,622649151,0,0x0,8
tick,0x7ffe67f8feb4,622665181,0,0x0,8
tick,0x7ffe67f8feb4,622681182,0,0x0,8
tick,0x7ffe67f8feb4,622696401,0,0x0,8
tick,0x7ffe67f8feb4,622712402,0,0x0,8
tick,0x7ffe67f8feb4,622728406,0,0x0,8
tick,0x7ffe67f8feb4,622744443,0,0x0,8
tick,0x7ffe67f8feb4,622760432,0,0x0,8
tick,0x7ffe67f8feb4,622775650,0,0x0,8
tick,0x7ffe67f8feb4,622791467,0,0x0,8
tick,0x7ffe67f8feb4,622807458,0,0x0,8
tick,0x7ffe67f8feb4,622822778,0,0x0,8
tick,0x7ffe67f8feb4,622838477,0,0x0,8
tick,0x7ffe67f8feb4,622854191,0,0x0,8
tick,0x7ffe67f8feb4,622870203,0,0x0,8
tick,0x7ffe67f8feb4,622886204,0,0x0,8
tick,0x7ffe67f8feb4,622902306,0,0x0,8
tick,0x7ffe67f8feb4,622918585,0,0x0,8
tick,0x7ffe67f8feb4,622934664,0,0x0,8
tick,0x7ffe67f8feb4,622950191,0,0x0,8
tick,0x7ffe67f8feb4,622966217,0,0x0,8
tick,0x7ffe67f8feb4,622981325,0,0x0,8
tick,0x7ffe67f8feb4,622997225,0,0x0,8
tick,0x7ffe67f8feb4,623013306,0,0x0,8
tick,0x7ffe67f8feb4,623029527,0,0x0,8
tick,0x7ffe67f8feb4,623045266,0,0x0,8
tick,0x7ffe67f8feb4,623060364,0,0x0,8
tick,0x7ffe67f8feb4,623075748,0,0x0,8
tick,0x7ffe67f8feb4,623091253,0,0x0,8
tick,0x7ffe67f8feb4,623106478,0,0x0,8
tick,0x7ffe67f8feb4,623122234,0,0x0,8
tick,0x7ffe67f8feb4,623137500,0,0x0,8
tick,0x7ffe67f8feb4,623153445,0,0x0,8
tick,0x7ffe67f8feb4,623169559,0,0x0,8
tick,0x7ffe67f8feb4,623185573,0,0x0,8
tick,0x7ffe67f8feb4,623201268,0,0x0,8
tick,0x7ffe67f8feb4,623216574,0,0x0,8
tick,0x7ffe67f8feb4,623231759,0,0x0,8
tick,0x7ffe67f8feb4,623247137,0,0x0,8
tick,0x7ffe67f8feb4,623262204,0,0x0,8
tick,0x7ffe67f8feb4,623278115,0,0x0,8
tick,0x7ffe67f8feb4,623294115,0,0x0,8
tick,0x7ffe67f8feb4,623310307,0,0x0,8
tick,0x7ffe67f8feb4,623325264,0,0x0,8
tick,0x7ffe67f8feb4,623340713,0,0x0,8
tick,0x7ffe67f8feb4,623356251,0,0x0,8
tick,0x7ffe67f8feb4,623372272,0,0x0,8
tick,0x7ffe67f8feb4,623388261,0,0x0,8
tick,0x7ffe67f8feb4,623404245,0,0x0,8
tick,0x7ffe67f8feb4,623420267,0,0x0,8
tick,0x7ffe67f8feb4,623436267,0,0x0,8
tick,0x7ffe67f8feb4,623451646,0,0x0,8
tick,0x7ffe67f8feb4,623467292,0,0x0,8
tick,0x7ffe67f8feb4,623483289,0,0x0,8
tick,0x7ffe67f8feb4,623499355,0,0x0,8
tick,0x7ffe67f8feb4,623514472,0,0x0,8
tick,0x7ffe67f8feb4,623530305,0,0x0,8
tick,0x7ffe67f8feb4,623546294,0,0x0,8
tick,0x7ffe67f8feb4,623562319,0,0x0,8
tick,0x7ffe67f8feb4,623578343,0,0x0,8
tick,0x7ffe67f8feb4,623594319,0,0x0,8
tick,0x7ffe67f8feb4,623610320,0,0x0,8
tick,0x7ffe67f8feb4,623625734,0,0x0,8
tick,0x7ffe67f8feb4,623641305,0,0x0,8
tick,0x7ffe67f8feb4,623657315,0,0x0,8
tick,0x7ffe67f8feb4,623673137,0,0x0,8
tick,0x7ffe67f8feb4,623688339,0,0x0,8
tick,0x7ffe67f8feb4,623704323,0,0x0,8
tick,0x7ffe67f8feb4,623720331,0,0x0,8
tick,0x7ffe67f8feb4,623736329,0,0x0,8
tick,0x7ffe67f8feb4,623752342,0,0x0,8
tick,0x7ffe67f8feb4,623768336,0,0x0,8
tick,0x7ffe67f8feb4,623784326,0,0x0,8
tick,0x7ffe67f8feb4,623800336,0,0x0,8
tick,0x7ffe67f8feb4,623815350,0,0x0,8
tick,0x7ffe67f8feb4,623831301,0,0x0,8
tick,0x7ffe67f8feb4,623847326,0,0x0,8
tick,0x7ffe67f8feb4,623862479,0,0x0,8
tick,0x7ffe67f8feb4,623878306,0,0x0,8
tick,0x7ffe67f8feb4,623894302,0,0x0,8
tick,0x7ffe67f8feb4,623910345,0,0x0,8
tick,0x7ffe67f8feb4,623926321,0,0x0,8
tick,0x7ffe67f8feb4,623942334,0,0x0,8
tick,0x7ffe67f8feb4,623958337,0,0x0,8
tick,0x7ffe67f8feb4,623974323,0,0x0,8
tick,0x7ffe67f8feb4,623990340,0,0x0,8
tick,0x7ffe67f8feb4,624005826,0,0x0,8
tick,0x7ffe67f8feb4,624020982,0,0x0,8
tick,0x7ffe67f8feb4,624036632,0,0x0,8
tick,0x7ffe67f8feb4,624052072,0,0x0,8
tick,0x7ffe67f8feb4,624067634,0,0x0,8
tick,0x7ffe67f8feb4,624083662,0,0x0,8
tick,0x7ffe67f8feb4,624099383,0,0x0,8
tick,0x7ffe67f8feb4,624114709,0,0x0,8
tick,0x7ffe67f8feb4,624130564,0,0x0,8
tick,0x7ffe67f8feb4,624145578,0,0x0,8
tick,0x7ffe67f8feb4,624161619,0,0x0,8
tick,0x7ffe67f8feb4,624177576,0,0x0,8
tick,0x7ffe67f8feb4,624193403,0,0x0,8
tick,0x7ffe67f8feb4,624209399,0,0x0,8
tick,0x7ffe67f8feb4,624225429,0,0x0,8
tick,0x7ffe67f8feb4,624241417,0,0x0,8
tick,0x7ffe67f8feb4,624256448,0,0x0,8
tick,0x7ffe67f8feb4,624272476,0,0x0,8
tick,0x7ffe67f8feb4,624287960,0,0x0,8
tick,0x7ffe67f8feb4,624304028,0,0x0,8
tick,0x7ffe67f8feb4,624319666,0,0x0,8
tick,0x7ffe67f8feb4,624334369,0,0x0,8
tick,0x7ffe67f8feb4,624350605,0,0x0,8
tick,0x7ffe67f8feb4,624366278,0,0x0,8
tick,0x7ffe67f8feb4,624382155,0,0x0,8
tick,0x7ffe67f8feb4,624397517,0,0x0,8
tick,0x7ffe67f8feb4,624413064,0,0x0,8
tick,0x7ffe67f8feb4,624428173,0,0x0,8
tick,0x7ffe67f8feb4,624444668,0,0x0,8
tick,0x7ffe67f8feb4,624459608,0,0x0,8
tick,0x7ffe67f8feb4,624474927,0,0x0,8
tick,0x7ffe67f8feb4,624490356,0,0x0,8
tick,0x7ffe67f8feb4,624505252,0,0x0,8
tick,0x7ffe67f8feb4,624520488,0,0x0,8
tick,0x7ffe67f8feb4,624536307,0,0x0,8
tick,0x7ffe67f8feb4,624551177,0,0x0,8
tick,0x7ffe67f8feb4,624567455,0,0x0,8
tick,0x7ffe67f8feb4,624582580,0,0x0,8
tick,0x7ffe67f8feb4,624598328,0,0x0,8
tick,0x7ffe67f8feb4,624614290,0,0x0,8
tick,0x7ffe67f8feb4,624629882,0,0x0,8
tick,0x7ffe67f8feb4,624645862,0,0x0,8
tick,0x7ffe67f8feb4,624661331,0,0x0,8
tick,0x7ffe67f8feb4,624676696,0,0x0,8
tick,0x7ffe67f8feb4,624691866,0,0x0,8
tick,0x7ffe67f8feb4,624708000,0,0x0,8
tick,0x7ffe67f8feb4,624723898,0,0x0,8
tick,0x7ffe67f8feb4,624739856,0,0x0,8
tick,0x7ffe67f8feb4,624755972,0,0x0,8
tick,0x7ffe67f8feb4,624790919,0,0x0,8
tick,0x7ffe67f8feb4,624806197,0,0x0,8
tick,0x7ffe67f8feb4,624818856,0,0x0,8
tick,0x7ffe67f8feb4,624834867,0,0x0,8
tick,0x7ffe67f8feb4,624850869,0,0x0,8
tick,0x7ffe67f8feb4,624866971,0,0x0,8
tick,0x7ffe67f8feb4,624882891,0,0x0,8
tick,0x7ffe67f8feb4,624898874,0,0x0,8
tick,0x7ffe67f8feb4,624914903,0,0x0,8
tick,0x7ffe67f8feb4,624930942,0,0x0,8
tick,0x7ffe67f8feb4,624946893,0,0x0,8
tick,0x7ffe67f8feb4,624962163,0,0x0,8
tick,0x7ffe67f8feb4,624977878,0,0x0,8
tick,0x7ffe67f8feb4,624993519,0,0x0,8
tick,0x7ffe67f8feb4,625009603,0,0x0,8
tick,0x7ffe67f8feb4,625025555,0,0x0,8
tick,0x7ffe67f8feb4,625041529,0,0x0,8
tick,0x7ffe67f8feb4,625057532,0,0x0,8
tick,0x7ffe67f8feb4,625073547,0,0x0,8
tick,0x7ffe67f8feb4,625089526,0,0x0,8
tick,0x7ffe67f8feb4,625105554,0,0x0,8
tick,0x7ffe67f8feb4,625121540,0,0x0,8
tick,0x7ffe67f8feb4,625137582,0,0x0,8
tick,0x7ffe67f8feb4,625153592,0,0x0,8
tick,0x7ffe67f8feb4,625169567,0,0x0,8
tick,0x7ffe67f8feb4,625185570,0,0x0,8
tick,0x7ffe67f8feb4,625201575,0,0x0,8
tick,0x7ffe67f8feb4,625217569,0,0x0,8
tick,0x7ffe67f8feb4,625233582,0,0x0,8
tick,0x7ffe67f8feb4,625248689,0,0x0,8
tick,0x7ffe67f8feb4,625264547,0,0x0,8
tick,0x7ffe67f8feb4,625279726,0,0x0,8
tick,0x7ffe67f8feb4,625295566,0,0x0,8
tick,0x7ffe67f8feb4,625311375,0,0x0,8
tick,0x7ffe67f8feb4,625326583,0,0x0,8
tick,0x7ffe67f8feb4,625342569,0,0x0,8
tick,0x7ffe67f8feb4,625358596,0,0x0,8
tick,0x7ffe67f8feb4,625374580,0,0x0,8
tick,0x7ffe67f8feb4,625390095,0,0x0,8
tick,0x7ffe67f8feb4,625405592,0,0x0,8
tick,0x7ffe67f8feb4,625421618,0,0x0,8
tick,0x7ffe67f8feb4,625437900,0,0x0,8
tick,0x7ffe67f8feb4,625453757,0,0x0,8
tick,0x7ffe67f8feb4,625469466,0,0x0,8
tick,0x7ffe67f8feb4,625485462,0,0x0,8
tick,0x7ffe67f8feb4,625500615,0,0x0,8
tick,0x7ffe67f8feb4,625516479,0,0x0,8
tick,0x7ffe67f8feb4,625531656,0,0x0,8
tick,0x7ffe67f8feb4,625547498,0,0x0,8
tick,0x7ffe67f8feb4,625563504,0,0x0,8
tick,0x7ffe67f8feb4,625578668,0,0x0,8
tick,0x7ffe67f8feb4,625594640,0,0x0,8
tick,0x7ffe67f8feb4,625610922,0,0x0,8
tick,0x7ffe67f8feb4,625626634,0,0x0,8
tick,0x7ffe67f8feb4,625642645,0,0x0,8
tick,0x7ffe67f8feb4,625658632,0,0x0,8
tick,0x7ffe67f8feb4,625673865,0,0x0,8
tick,0x7ffe67f8feb4,625689676,0,0x0,8
tick,0x7ffe67f8feb4,625705660,0,0x0,8
tick,0x7ffe67f8feb4,625721758,0,0x0,8
tick,0x7ffe67f8feb4,625738044,0,0x0,8
tick,0x7ffe67f8feb4,625753687,0,0x0,8
tick,0x7ffe67f8feb4,625768851,0,0x0,8
tick,0x7ffe67f8feb4,625784899,0,0x0,8
tick,0x7ffe67f8feb4,625800712,0,0x0,8
tick,0x7ffe67f8feb4,625816776,0,0x0,8
tick,0x7ffe67f8feb4,625833479,0,0x0,8
tick,0x7ffe67f8feb4,625848788,0,0x0,8
tick,0x7ffe67f8feb4,625865182,0,0x0,8
tick,0x7ffe67f8feb4,625880795,0,0x0,8
tick,0x7ffe67f8feb4,625896793,0,0x0,8
tick,0x7ffe67f8feb4,625913336,0,0x0,8
tick,0x7ffe67f8feb4,625928697,0,0x0,8
tick,0x7ffe67f8feb4,625944693,0,0x0,8
tick,0x7ffe67f8feb4,625959701,0,0x0,8
tick,0x7ffe67f8feb4,625975703,0,0x0,8
tick,0x7ffe67f8feb4,625991720,0,0x0,8
tick,0x7ffe67f8feb4,626007712,0,0x0,8
tick,0x7ffe67f8feb4,626023726,0,0x0,8
tick,0x7ffe67f8feb4,626039718,0,0x0,8
tick,0x7ffe67f8feb4,626055688,0,0x0,8
tick,0x7ffe67f8feb4,626071730,0,0x0,8
tick,0x7ffe67f8feb4,626087733,0,0x0,8
tick,0x7ffe67f8feb4,626103682,0,0x0,8
tick,0x7ffe67f8feb4,626119685,0,0x0,8
tick,0x7ffe67f8feb4,626135707,0,0x0,8
tick,0x7ffe67f8feb4,626151691,0,0x0,8
tick,0x7ffe67f8feb4,626167682,0,0x0,8
tick,0x7ffe67f8feb4,626183690,0,0x0,8
tick,0x7ffe67f8feb4,626199680,0,0x0,8
tick,0x7ffe67f8feb4,626215637,0,0x0,8
tick,0x7ffe67f8feb4,626230978,0,0x0,8
tick,0x7ffe67f8feb4,626246706,0,0x0,8
tick,0x7ffe67f8feb4,626262709,0,0x0,8
tick,0x7ffe67f8feb4,626278690,0,0x0,8
tick,0x7ffe67f8feb4,626293857,0,0x0,8
tick,0x7ffe67f8feb4,626309718,0,0x0,8
tick,0x7ffe67f8feb4,626325713,0,0x0,8
tick,0x7ffe67f8feb4,626341750,0,0x0,8
tick,0x7ffe67f8feb4,626357729,0,0x0,8
tick,0x7ffe67f8feb4,626373710,0,0x0,8
tick,0x7ffe67f8feb4,626389723,0,0x0,8
tick,0x7ffe67f8feb4,626405755,0,0x0,8
tick,0x7ffe67f8feb4,626421886,0,0x0,8
tick,0x7ffe67f8feb4,626438084,0,0x0,8
tick,0x7ffe67f8feb4,626453709,0,0x0,8
tick,0x7ffe67f8feb4,626469691,0,0x0,8
tick,0x7ffe67f8feb4,626484725,0,0x0,8
tick,0x7ffe67f8feb4,626500727,0,0x0,8
tick,0x7ffe67f8feb4,626515740,0,0x0,8
tick,0x7ffe67f8feb4,626531759,0,0x0,8
tick,0x7ffe67f8feb4,626547762,0,0x0,8
tick,0x7ffe67f8feb4,626563819,0,0x0,8
tick,0x7ffe67f8feb4,626579740,0,0x0,8
tick,0x7ffe67f8feb4,626594911,0,0x0,8
tick,0x7ffe67f8feb4,626610308,0,0x0,8
tick,0x7ffe67f8feb4,626626366,0,0x0,8
tick,0x7ffe67f8feb4,626641586,0,0x0,8
tick,0x7ffe67f8feb4,626656780,0,0x0,8
tick,0x7ffe67f8feb4,626672787,0,0x0,8
tick,0x7ffe67f8feb4,626688838,0,0x0,8
tick,0x7ffe67f8feb4,626705110,0,0x0,8
tick,0x7ffe67f8feb4,626720773,0,0x0,8
tick,0x7ffe67f8feb4,626736724,0,0x0,8
tick,0x7ffe67f8feb4,626751870,0,0x0,8
tick,0x7ffe67f8feb4,626767719,0,0x0,8
tick,0x7ffe67f8feb4,626782826,0,0x0,8
tick,0x7ffe67f8feb4,626798784,0,0x0,8
tick,0x7ffe67f8feb4,626814228,0,0x0,8
tick,0x7ffe67f8feb4,626829793,0,0x0,8
tick,0x7ffe67f8feb4,626845795,0,0x0,8
tick,0x7ffe67f8feb4,626861805,0,0x0,8
tick,0x7ffe67f8feb4,626877808,0,0x0,8
tick,0x7ffe67f8feb4,626893815,0,0x0,8
tick,0x7ffe67f8feb4,626909840,0,0x0,8
tick,0x7ffe67f8feb4,626925815,0,0x0,8
tick,0x7ffe67f8feb4,626941843,0,0x0,8
tick,0x7ffe67f8feb4,626957853,0,0x0,8
tick,0x7ffe67f8feb4,626973807,0,0x0,8
tick,0x7ffe67f8feb4,626989803,0,0x0,8
tick,0x7ffe67f8feb4,627005814,0,0x0,8
tick,0x7ffe67f8feb4,627021605,0,0x0,8
tick,0x7ffe67f8feb4,627036837,0,0x0,8
tick,0x7ffe67f8feb4,627052870,0,0x0,8
tick,0x7ffe67f8feb4,627068898,0,0x0,8
tick,0x7ffe67f8feb4,627084898,0,0x0,8
tick,0x7ffe67f8feb4,627100414,0,0x0,8
tick,0x7ffe67f8feb4,627116490,0,0x0,8
tick,0x7ffe67f8feb4,627131945,0,0x0,8
tick,0x7ffe67f8feb4,627147074,0,0x0,8
tick,0x7ffe67f8feb4,627162441,0,0x0,8
tick,0x7ffe67f8feb4,627178507,0,0x0,8
tick,0x7ffe67f8feb4,627193842,0,0x0,8
tick,0x7ffe67f8feb4,627209021,0,0x0,8
tick,0x7ffe67f8feb4,627224551,0,0x0,8
tick,0x7ffe67f8feb4,627240579,0,0x0,8
tick,0x7ffe67f8feb4,627255913,0,0x0,8
tick,0x7ffe67f8feb4,627271730,0,0x0,8
tick,0x7ffe67f8feb4,627287050,0,0x0,8
tick,0x7ffe67f8feb4,627303004,0,0x0,8
tick,0x7ffe67f8feb4,627319027,0,0x0,8
tick,0x7ffe67f8feb4,627335231,0,0x0,8
tick,0x7ffe67f8feb4,627350952,0,0x0,8
tick,0x7ffe67f8feb4,627366909,0,0x0,8
tick,0x7ffe67f8feb4,627382907,0,0x0,8
tick,0x7ffe67f8feb4,627398922,0,0x0,8
tick,0x7ffe67f8feb4,627414936,0,0x0,8
tick,0x7ffe67f8feb4,627430339,0,0x0,8
tick,0x7ffe67f8feb4,627446012,0,0x0,8
tick,0x7ffe67f8feb4,627461215,0,0x0,8
tick,0x7ffe67f8feb4,627476465,0,0x0,8
tick,0x7ffe67f8feb4,627492473,0,0x0,8
tick,0x7ffe67f8feb4,627507960,0,0x0,8
tick,0x7ffe67f8feb4,627523999,0,0x0,8
tick,0x7ffe67f8feb4,627539969,0,0x0,8
tick,0x7ffe67f8feb4,627555463,0,0x0,8
tick,0x7ffe67f8feb4,627571266,0,0x0,8
tick,0x7ffe67f8feb4,627586443,0,0x0,8
tick,0x7ffe67f8feb4,627602258,0,0x0,8
tick,0x7ffe67f8feb4,627617708,0,0x0,8
tick,0x7ffe67f8feb4,627633752,0,0x0,8
tick,0x7ffe67f8feb4,627649827,0,0x0,8
tick,0x7ffe67f8feb4,627665886,0,0x0,8
tick,0x7ffe67f8feb4,627681532,0,0x0,8
tick,0x7ffe67f8feb4,627697599,0,0x0,8
tick,0x7ffe67f8feb4,627712481,0,0x0,8
tick,0x7ffe67f8feb4,627728497,0,0x0,8
tick,0x7ffe67f8feb4,627743763,0,0x0,8
tick,0x7ffe67f8feb4,627759774,0,0x0,8
tick,0x7ffe67f8feb4,627774940,0,0x0,8
tick,0x7ffe67f8feb4,627790578,0,0x0,8
tick,0x7ffe67f8feb4,627806379,0,0x0,8
tick,0x7ffe67f8feb4,627822671,0,0x0,8
tick,0x7ffe67f8feb4,627838117,0,0x0,8
tick,0x7ffe67f8feb4,627853242,0,0x0,8
tick,0x7ffe67f8feb4,627868438,0,0x0,8
tick,0x7ffe67f8feb4,627883601,0,0x0,8
tick,0x7ffe67f8feb4,627899117,0,0x0,8
tick,0x7ffe67f8feb4,627913986,0,0x0,8
tick,0x7ffe67f8feb4,627929276,0,0x0,8
tick,0x7ffe67f8feb4,627944784,0,0x0,8
tick,0x7ffe67f8feb4,627960533,0,0x0,8
tick,0x7ffe67f8feb4,627976571,0,0x0,8
tick,0x7ffe67f8feb4,627992519,0,0x0,8
tick,0x7ffe67f8feb4,628008535,0,0x0,8
tick,0x7ffe67f8feb4,628024429,0,0x0,8
tick,0x7ffe67f8feb4,628040455,0,0x0,8
tick,0x7ffe67f8feb4,628056218,0,0x0,8
tick,0x7ffe67f8feb4,628071996,0,0x0,8
tick,0x7ffe67f8feb4,628087232,0,0x0,8
tick,0x7ffe67f8feb4,628102456,0,0x0,8
tick,0x7ffe67f8feb4,628118316,0,0x0,8
tick,0x7ffe67f8feb4,628133884,0,0x0,8
tick,0x7ffe67f8feb4,628149026,0,0x0,8
tick,0x7ffe67f8feb4,628165047,0,0x0,8
tick,0x7ffe67f8feb4,628180945,0,0x0,8
tick,0x7ffe67f8feb4,628197001,0,0x0,8
tick,0x7ffe67f8feb4,628213015,0,0x0,8
tick,0x7ffe67f8feb4,628227842,0,0x0,8
tick,0x7ffe67f8feb4,628243032,0,0x0,8
tick,0x7ffe67f8feb4,628258570,0,0x0,8
tick,0x7ffe67f8feb4,628274103,0,0x0,8
tick,0x7ffe67f8feb4,628289713,0,0x0,8
tick,0x7ffe67f8feb4,628305875,0,0x0,8
tick,0x7ffe67f8feb4,628321635,0,0x0,8
tick,0x7ffe67f8feb4,628337280,0,0x0,8
tick,0x7ffe67f8feb4,628352385,0,0x0,8
tick,0x7ffe67f8feb4,628368399,0,0x0,8
tick,0x7ffe67f8feb4,628383634,0,0x0,8
tick,0x7ffe67f8feb4,628398617,0,0x0,8
tick,0x7ffe67f8feb4,628414530,0,0x0,8
tick,0x7ffe67f8feb4,628430068,0,0x0,8
tick,0x7ffe67f8feb4,628445704,0,0x0,8
tick,0x7ffe67f8feb4,628461125,0,0x0,8
tick,0x7ffe67f8feb4,628477132,0,0x0,8
tick,0x7ffe67f8feb4,628492314,0,0x0,8
tick,0x7ffe67f8feb4,628507868,0,0x0,8
tick,0x7ffe67f8feb4,628523328,0,0x0,8
tick,0x7ffe67f8feb4,628538456,0,0x0,8
tick,0x7ffe67f8feb4,628553551,0,0x0,8
tick,0x7ffe67f8feb4,628568873,0,0x0,8
tick,0x7ffe67f8feb4,628584789,0,0x0,8
tick,0x7ffe67f8feb4,628600643,0,0x0,8
tick,0x7ffe67f8feb4,628616332,0,0x0,8
tick,0x7ffe67f8feb4,628631373,0,0x0,8
tick,0x7ffe67f8feb4,628647225,0,0x0,8
tick,0x7ffe67f8feb4,628662379,0,0x0,8
tick,0x7ffe67f8feb4,628678430,0,0x0,8
tick,0x7ffe67f8feb4,628694036,0,0x0,8
tick,0x7ffe67f8feb4,628709588,0,0x0,8
tick,0x7ffe67f8feb4,628725685,0,0x0,8
tick,0x7ffe67f8feb4,628742213,0,0x0,8
tick,0x7ffe67f8feb4,628757919,0,0x0,8
tick,0x7ffe67f8feb4,628773866,0,0x0,8
tick,0x7ffe67f8feb4,628789087,0,0x0,8
tick,0x7ffe67f8feb4,628805079,0,0x0,8
tick,0x7ffe67f8feb4,628821089,0,0x0,8
tick,0x7ffe67f8feb4,628837159,0,0x0,8
tick,0x7ffe67f8feb4,628852390,0,0x0,8
tick,0x7ffe67f8feb4,628868130,0,0x0,8
tick,0x7ffe67f8feb4,628883305,0,0x0,8
tick,0x7ffe67f8feb4,628899125,0,0x0,8
tick,0x7ffe67f8feb4,628915154,0,0x0,8
tick,0x7ffe67f8feb4,628931196,0,0x0,8
tick,0x7ffe67f8feb4,628947163,0,0x0,8
tick,0x7ffe67f8feb4,628963354,0,0x0,8
tick,0x7ffe67f8feb4,628979199,0,0x0,8
tick,0x7ffe67f8feb4,628995152,0,0x0,8
tick,0x7ffe67f8feb4,629010297,0,0x0,8
tick,0x7ffe67f8feb4,629026172,0,0x0,8
tick,0x7ffe67f8feb4,629042126,0,0x0,8
tick,0x7ffe67f8feb4,629058185,0,0x0,8
tick,0x7ffe67f8feb4,629074147,0,0x0,8
tick,0x7ffe67f8feb4,629090128,0,0x0,8
tick,0x7ffe67f8feb4,629105469,0,0x0,8
tick,0x7ffe67f8feb4,629121388,0,0x0,8
tick,0x7ffe67f8feb4,629137144,0,0x0,8
tick,0x7ffe67f8feb4,629152756,0,0x0,8
tick,0x7ffe67f8feb4,629168179,0,0x0,8
tick,0x7ffe67f8feb4,629183482,0,0x0,8
tick,0x7ffe67f8feb4,629199177,0,0x0,8
tick,0x7ffe67f8feb4,629214463,0,0x0,8
tick,0x7ffe67f8feb4,629230229,0,0x0,8
tick,0x7ffe67f8feb4,629245512,0,0x0,8
tick,0x7ffe67f8feb4,629261385,0,0x0,8
tick,0x7ffe67f8feb4,629277565,0,0x0,8
tick,0x7ffe67f8feb4,629292501,0,0x0,8
tick,0x7ffe67f8feb4,629308507,0,0x0,8
tick,0x7ffe67f8feb4,629323660,0,0x0,8
tick,0x7ffe67f8feb4,629339051,0,0x0,8
tick,0x7ffe67f8feb4,629354529,0,0x0,8
tick,0x7ffe67f8feb4,629369760,0,0x0,8
tick,0x7ffe67f8feb4,629385110,0,0x0,8
tick,0x7ffe67f8feb4,629400543,0,0x0,8
tick,0x7ffe67f8feb4,629416012,0,0x0,8
tick,0x7ffe67f8feb4,629431358,0,0x0,8
tick,0x7ffe67f8feb4,629446791,0,0x0,8
tick,0x7ffe67f8feb4,629462486,0,0x0,8
tick,0x7ffe67f8feb4,629478487,0,0x0,8
tick,0x7ffe67f8feb4,629494476,0,0x0,8
tick,0x7ffe67f8feb4,629510149,0,0x0,8
tick,0x7ffe67f8feb4,629526162,0,0x0,8
tick,0x7ffe67f8feb4,629542260,0,0x0,8
tick,0x7ffe67f8feb4,629558283,0,0x0,8
tick,0x7ffe67f8feb4,629574515,0,0x0,8
tick,0x7ffe67f8feb4,629589370,0,0x0,8
tick,0x7ffe67f8feb4,629605357,0,0x0,8
tick,0x7ffe67f8feb4,629621324,0,0x0,8
tick,0x7ffe67f8feb4,629637345,0,0x0,8
tick,0x7ffe67f8feb4,629653357,0,0x0,8
tick,0x7ffe67f8feb4,629669404,0,0x0,8
tick,0x7ffe67f8feb4,629685535,0,0x0,8
tick,0x7ffe67f8feb4,629701290,0,0x0,8
tick,0x7ffe67f8feb4,629717277,0,0x0,8
tick,0x7ffe67f8feb4,629733225,0,0x0,8
tick,0x7ffe67f8feb4,629749245,0,0x0,8
tick,0x7ffe67f8feb4,629765254,0,0x0,8
tick,0x7ffe67f8feb4,629781288,0,0x0,8
tick,0x7ffe67f8feb4,629797357,0,0x0,8
tick,0x7ffe67f8feb4,629813236,0,0x0,8
tick,0x7ffe67f8feb4,629829294,0,0x0,8
tick,0x7ffe67f8feb4,629845239,0,0x0,8
tick,0x7ffe67f8feb4,629861249,0,0x0,8
tick,0x7ffe67f8feb4,629877278,0,0x0,8
tick,0x7ffe67f8feb4,629893256,0,0x0,8
tick,0x7ffe67f8feb4,629909265,0,0x0,8
tick,0x7ffe67f8feb4,629925501,0,0x0,8
tick,0x7ffe67f8feb4,629941262,0,0x0,8
tick,0x7ffe67f8feb4,629957259,0,0x0,8
tick,0x7ffe67f8feb4,629973258,0,0x0,8
tick,0x7ffe67f8feb4,629989260,0,0x0,8
tick,0x7ffe67f8feb4,630005254,0,0x0,8
tick,0x7ffe67f8feb4,630021275,0,0x0,8
tick,0x7ffe67f8feb4,630037255,0,0x0,8
tick,0x7ffe67f8feb4,630053270,0,0x0,8
tick,0x7ffe67f8feb4,630069309,0,0x0,8
tick,0x7ffe67f8feb4,630085278,0,0x0,8
tick,0x7ffe67f8feb4,630101290,0,0x0,8
tick,0x7ffe67f8feb4,630117335,0,0x0,8
tick,0x7ffe67f8feb4,630133287,0,0x0,8
tick,0x7ffe67f8feb4,630149306,0,0x0,8
tick,0x7ffe67f8feb4,630165303,0,0x0,8
tick,0x7ffe67f8feb4,630181290,0,0x0,8
tick,0x7ffe67f8feb4,630197373,0,0x0,8
tick,0x7ffe67f8feb4,630212996,0,0x0,8
tick,0x7ffe67f8feb4,630228323,0,0x0,8
tick,0x7ffe67f8feb4,630243853,0,0x0,8
tick,0x7ffe67f8feb4,630259893,0,0x0,8
tick,0x7ffe67f8feb4,630275907,0,0x0,8
tick,0x7ffe67f8feb4,630291063,0,0x0,8
tick,0x7ffe67f8feb4,630307195,0,0x0,8
tick,0x7ffe67f8feb4,630322547,0,0x0,8
tick,0x7ffe67f8feb4,630338463,0,0x0,8
tick,0x7ffe67f8feb4,630353955,0,0x0,8
tick,0x7ffe67f8feb4,630370183,0,0x0,8
tick,0x7ffe67f8feb4,630385524,0,0x0,8
tick,0x7ffe67f8feb4,630400894,0,0x0,8
tick,0x7ffe67f8feb4,630416367,0,0x0,8
tick,0x7ffe67f8feb4,630431662,0,0x0,8
tick,0x7ffe67f8feb4,630447450,0,0x0,8
tick,0x7ffe67f8feb4,630463196,0,0x0,8
tick,0x7ffe67f8feb4,630478528,0,0x0,8
tick,0x7ffe67f8feb4,630494559,0,0x0,8
tick,0x7ffe67f8feb4,630510526,0,0x0,8
tick,0x7ffe67f8feb4,630525468,0,0x0,8
tick,0x7ffe67f8feb4,630541442,0,0x0,8
tick,0x7ffe67f8feb4,630556630,0,0x0,8
tick,0x7ffe67f8feb4,630571912,0,0x0,8
tick,0x7ffe67f8feb4,630588168,0,0x0,8
tick,0x7ffe67f8feb4,630603926,0,0x0,8
tick,0x7ffe67f8feb4,630619750,0,0x0,8
tick,0x7ffe67f8feb4,630634922,0,0x0,8
tick,0x7ffe67f8feb4,630650638,0,0x0,8
tick,0x7ffe67f8feb4,630665933,0,0x0,8
tick,0x7ffe67f8feb4,630681964,0,0x0,8
tick,0x7ffe67f8feb4,630697952,0,0x0,8
tick,0x7ffe67f8feb4,630713991,0,0x0,8
tick,0x7ffe67f8feb4,630730010,0,0x0,8
tick,0x7ffe67f8feb4,630745796,0,0x0,8
tick,0x7ffe67f8feb4,630761420,0,0x0,8
tick,0x7ffe67f8feb4,630777436,0,0x0,8
tick,0x7ffe67f8feb4,630793537,0,0x0,8
tick,0x7ffe67f8feb4,630809316,0,0x0,8
tick,0x7ffe67f8feb4,630824903,0,0x0,8
tick,0x7ffe67f8feb4,630840221,0,0x0,8
tick,0x7ffe67f8feb4,630856685,0,0x0,8
tick,0x7ffe67f8feb4,630872195,0,0x0,8
tick,0x7ffe67f8feb4,630888135,0,0x0,8
tick,0x7ffe67f8feb4,630903975,0,0x0,8
tick,0x7ffe67f8feb4,630919230,0,0x0,8
tick,0x7ffe67f8feb4,630935564,0,0x0,8
tick,0x7ffe67f8feb4,630951050,0,0x0,8
tick,0x7ffe67f8feb4,630966459,0,0x0,8
tick,0x7ffe67f8feb4,630982009,0,0x0,8
tick,0x7ffe67f8feb4,630998041,0,0x0,8
tick,0x7ffe67f8feb4,631014054,0,0x0,8
tick,0x7ffe67f8feb4,631030047,0,0x0,8
tick,0x7ffe67f8feb4,631046367,0,0x0,8
tick,0x7ffe67f8feb4,631062040,0,0x0,8
tick,0x7ffe67f8feb4,631078118,0,0x0,8
tick,0x7ffe67f8feb4,631094016,0,0x0,8
tick,0x7ffe67f8feb4,631110262,0,0x0,8
tick,0x7ffe67f8feb4,631126150,0,0x0,8
tick,0x7ffe67f8feb4,631140981,0,0x0,8
tick,0x7ffe67f8feb4,631157009,0,0x0,8
tick,0x7ffe67f8feb4,631172225,0,0x0,8
tick,0x7ffe67f8feb4,631187995,0,0x0,8
tick,0x7ffe67f8feb4,631204103,0,0x0,8
tick,0x7ffe67f8feb4,631220019,0,0x0,8
tick,0x7ffe67f8feb4,631235316,0,0x0,8
tick,0x7ffe67f8feb4,631251105,0,0x0,8
tick,0x7ffe67f8feb4,631266832,0,0x0,8
tick,0x7ffe67f8feb4,631282037,0,0x0,8
tick,0x7ffe67f8feb4,631298055,0,0x0,8
tick,0x7ffe67f8feb4,631313596,0,0x0,8
tick,0x7ffe67f8feb4,631329273,0,0x0,8
tick,0x7ffe67f8feb4,631344946,0,0x0,8
tick,0x7ffe67f8feb4,631360312,0,0x0,8
tick,0x7ffe67f8feb4,631376397,0,0x0,8
tick,0x7ffe67f8feb4,631391207,0,0x0,8
tick,0x7ffe67f8feb4,631407236,0,0x0,8
tick,0x7ffe67f8feb4,631422380,0,0x0,8
tick,0x7ffe67f8feb4,631438239,0,0x0,8
tick,0x7ffe67f8feb4,631454308,0,0x0,8
tick,0x7ffe67f8feb4,631469671,0,0x0,8
tick,0x7ffe67f8feb4,631484797,0,0x0,8
tick,0x7ffe67f8feb4,631499813,0,0x0,8
tick,0x7ffe67f8feb4,631515684,0,0x0,8
tick,0x7ffe67f8feb4,631530868,0,0x0,8
tick,0x7ffe67f8feb4,631546419,0,0x0,8
tick,0x7ffe67f8feb4,631562232,0,0x0,8
tick,0x7ffe67f8feb4,631578281,0,0x0,8
tick,0x7ffe67f8feb4,631593125,0,0x0,8
tick,0x7ffe67f8feb4,631609006,0,0x0,8
tick,0x7ffe67f8feb4,631624969,0,0x0,8
tick,0x7ffe67f8feb4,631640914,0,0x0,8
tick,0x7ffe67f8feb4,631656670,0,0x0,8
tick,0x7ffe67f8feb4,631671576,0,0x0,8
tick,0x7ffe67f8feb4,631687209,0,0x0,8
tick,0x7ffe67f8feb4,631702594,0,0x0,8
tick,0x7ffe67f8feb4,631717799,0,0x0,8
tick,0x7ffe67f8feb4,631733411,0,0x0,8
tick,0x7ffe67f8feb4,631749423,0,0x0,8
tick,0x7ffe67f8feb4,631765102,0,0x0,8
tick,0x7ffe67f8feb4,631781319,0,0x0,8
tick,0x7ffe67f8feb4,631797067,0,0x0,8
tick,0x7ffe67f8feb4,631812260,0,0x0,8
tick,0x7ffe67f8feb4,631827831,0,0x0,8
tick,0x7ffe67f8feb4,631843186,0,0x0,8
tick,0x7ffe67f8feb4,631858803,0,0x0,8
tick,0x7ffe67f8feb4,631874475,0,0x0,8
tick,0x7ffe67f8feb4,631890319,0,0x0,8
tick,0x7ffe67f8feb4,631906561,0,0x0,8
tick,0x7ffe67f8feb4,631922116,0,0x0,8
tick,0x7ffe67f8feb4,631937932,0,0x0,8
tick,0x7ffe67f8feb4,631953286,0,0x0,8
tick,0x7ffe67f8feb4,631968031,0,0x0,8
tick,0x7ffe67f8feb4,631982949,0,0x0,8
tick,0x7ffe67f8feb4,631999222,0,0x0,8
tick,0x7ffe67f8feb4,632014970,0,0x0,8
tick,0x7ffe67f8feb4,632030671,0,0x0,8
tick,0x7ffe67f8feb4,632045996,0,0x0,8
tick,0x7ffe67f8feb4,632061011,0,0x0,8
tick,0x7ffe67f8feb4,632076164,0,0x0,8
tick,0x7ffe67f8feb4,632091523,0,0x0,8
tick,0x7ffe67f8feb4,632107595,0,0x0,8
tick,0x7ffe67f8feb4,632123068,0,0x0,8
tick,0x7ffe67f8feb4,632138273,0,0x0,8
tick,0x7ffe67f8feb4,632154650,0,0x0,8
tick,0x7ffe67f8feb4,632170465,0,0x0,8
tick,0x7ffe67f8feb4,632186858,0,0x0,8
tick,0x7ffe67f8feb4,632202869,0,0x0,8
tick,0x7ffe67f8feb4,632218277,0,0x0,8
tick,0x7ffe67f8feb4,632233813,0,0x0,8
tick,0x7ffe67f8feb4,632249460,0,0x0,8
tick,0x7ffe67f8feb4,632265538,0,0x0,8
tick,0x7ffe67f8feb4,632280659,0,0x0,8
tick,0x7ffe67f8feb4,632295851,0,0x0,8
tick,0x7ffe67f8feb4,632311872,0,0x0,8
tick,0x7ffe67f8feb4,632327146,0,0x0,8
tick,0x7ffe67f8feb4,632342755,0,0x0,8
tick,0x7ffe67f8feb4,632357903,0,0x0,8
tick,0x7ffe67f8feb4,632373418,0,0x0,8
tick,0x7ffe67f8feb4,632389619,0,0x0,8
tick,0x7ffe67f8feb4,632405052,0,0x0,8
tick,0x7ffe67f8feb4,632420522,0,0x0,8
tick,0x7ffe67f8feb4,632436590,0,0x0,8
tick,0x7ffe67f8feb4,632452120,0,0x0,8
tick,0x7ffe67f8feb4,632467494,0,0x0,8
tick,0x7ffe67f8feb4,632483242,0,0x0,8
tick,0x7ffe67f8feb4,632499539,0,0x0,8
tick,0x7ffe67f8feb4,632515346,0,0x0,8
tick,0x7ffe67f8feb4,632530596,0,0x0,8
tick,0x7ffe67f8feb4,632545604,0,0x0,8
tick,0x7ffe67f8feb4,632561558,0,0x0,8
tick,0x7ffe67f8feb4,632577053,0,0x0,8
tick,0x7ffe67f8feb4,632592313,0,0x0,8
tick,0x7ffe67f8feb4,632607595,0,0x0,8
tick,0x7ffe67f8feb4,632622463,0,0x0,8
tick,0x7ffe67f8feb4,632637635,0,0x0,8
tick,0x7ffe67f8feb4,632653154,0,0x0,8
tick,0x7ffe67f8feb4,632669175,0,0x0,8
tick,0x7ffe67f8feb4,632684453,0,0x0,8
tick,0x7ffe67f8feb4,632700450,0,0x0,8
tick,0x7ffe67f8feb4,632715334,0,0x0,8
tick,0x7ffe67f8feb4,632731059,0,0x0,8
tick,0x7ffe67f8feb4,632746560,0,0x0,8
tick,0x7ffe67f8feb4,632762999,0,0x0,8
tick,0x7ffe67f8feb4,632778012,0,0x0,8
tick,0x7ffe67f8feb4,632793552,0,0x0,8
tick,0x7ffe67f8feb4,632808683,0,0x0,8
tick,0x7ffe67f8feb4,632824337,0,0x0,8
tick,0x7ffe67f8feb4,632839910,0,0x0,8
tick,0x7ffe67f8feb4,632855313,0,0x0,8
tick,0x7ffe67f8feb4,632870979,0,0x0,8
tick,0x7ffe67f8feb4,632887177,0,0x0,8
tick,0x7ffe67f8feb4,632902636,0,0x0,8
tick,0x7ffe67f8feb4,632918374,0,0x0,8
tick,0x7ffe67f8feb4,632934189,0,0x0,8
tick,0x7ffe67f8feb4,632949573,0,0x0,8
tick,0x7ffe67f8feb4,632965656,0,0x0,8
tick,0x7ffe67f8feb4,632979992,0,0x0,8
tick,0x7ffe67f8feb4,632996019,0,0x0,8
tick,0x7ffe67f8feb4,633012007,0,0x0,8
tick,0x7ffe67f8feb4,633028038,0,0x0,8
tick,0x7ffe67f8feb4,633043970,0,0x0,8
tick,0x7ffe67f8feb4,633060072,0,0x0,8
tick,0x7ffe67f8feb4,633075210,0,0x0,8
tick,0x7ffe67f8feb4,633091126,0,0x0,8
tick,0x7ffe67f8feb4,633106708,0,0x0,8
tick,0x7ffe67f8feb4,633122291,0,0x0,8
tick,0x7ffe67f8feb4,633137543,0,0x0,8
tick,0x7ffe67f8feb4,633152577,0,0x0,8
tick,0x7ffe67f8feb4,633167850,0,0x0,8
tick,0x7ffe67f8feb4,633183522,0,0x0,8
tick,0x7ffe67f8feb4,633199440,0,0x0,8
tick,0x7ffe67f8feb4,633215691,0,0x0,8
tick,0x7ffe67f8feb4,633231669,0,0x0,8
tick,0x7ffe67f8feb4,633246590,0,0x0,8
tick,0x7ffe67f8feb4,633262625,0,0x0,8
tick,0x7ffe67f8feb4,633277802,0,0x0,8
tick,0x7ffe67f8feb4,633292885,0,0x0,8
tick,0x7ffe67f8feb4,633308135,0,0x0,8
tick,0x7ffe67f8feb4,633323630,0,0x0,8
tick,0x7ffe67f8feb4,633339247,0,0x0,8
tick,0x7ffe67f8feb4,633354780,0,0x0,8
tick,0x7ffe67f8feb4,633369750,0,0x0,8
tick,0x7ffe67f8feb4,633384867,0,0x0,8
tick,0x7ffe67f8feb4,633400332,0,0x0,8
tick,0x7ffe67f8feb4,633416718,0,0x0,8
tick,0x7ffe67f8feb4,633432693,0,0x0,8
tick,0x7ffe67f8feb4,633447805,0,0x0,8
tick,0x7ffe67f8feb4,633463475,0,0x0,8
tick,0x7ffe67f8feb4,633480002,0,0x0,8
tick,0x7ffe67f8feb4,633495236,0,0x0,8
tick,0x7ffe67f8feb4,633510361,0,0x0,8
tick,0x7ffe67f8feb4,633526466,0,0x0,8
tick,0x7ffe67f8feb4,633542743,0,0x0,8
tick,0x7ffe67f8feb4,633557758,0,0x0,8
tick,0x7ffe67f8feb4,633573561,0,0x0,8
tick,0x7ffe67f8feb4,633588686,0,0x0,8
tick,0x7ffe67f8feb4,633604812,0,0x0,8
tick,0x7ffe67f8feb4,633620665,0,0x0,8
tick,0x7ffe67f8feb4,633635734,0,0x0,8
tick,0x7ffe67f8feb4,633651382,0,0x0,8
tick,0x7ffe67f8feb4,633666503,0,0x0,8
tick,0x7ffe67f8feb4,633682396,0,0x0,8
tick,0x7ffe67f8feb4,633698403,0,0x0,8
tick,0x7ffe67f8feb4,633714424,0,0x0,8
tick,0x7ffe67f8feb4,633730408,0,0x0,8
tick,0x7ffe67f8feb4,633746041,0,0x0,8
tick,0x7ffe67f8feb4,633761355,0,0x0,8
tick,0x7ffe67f8feb4,633777076,0,0x0,8
tick,0x7ffe67f8feb4,633792539,0,0x0,8
tick,0x7ffe67f8feb4,633808390,0,0x0,8
tick,0x7ffe67f8feb4,633824616,0,0x0,8
tick,0x7ffe67f8feb4,633840565,0,0x0,8
tick,0x7ffe67f8feb4,633855669,0,0x0,8
tick,0x7ffe67f8feb4,633871036,0,0x0,8
tick,0x7ffe67f8feb4,633886850,0,0x0,8
tick,0x7ffe67f8feb4,633902303,0,0x0,8
tick,0x7ffe67f8feb4,633917832,0,0x0,8
tick,0x7ffe67f8feb4,633933288,0,0x0,8
tick,0x7ffe67f8feb4,633948618,0,0x0,8
tick,0x7ffe67f8feb4,633964392,0,0x0,8
tick,0x7ffe67f8feb4,633979724,0,0x0,8
tick,0x7ffe67f8feb4,633995809,0,0x0,8
tick,0x7ffe67f8feb4,634011733,0,0x0,8
tick,0x7ffe67f8feb4,634027715,0,0x0,8
tick,0x7ffe67f8feb4,634043707,0,0x0,8
tick,0x7ffe67f8feb4,634059694,0,0x0,8
tick,0x7ffe67f8feb4,634075397,0,0x0,8
tick,0x7ffe67f8feb4,634091392,0,0x0,8
tick,0x7ffe67f8feb4,634107426,0,0x0,8
tick,0x7ffe67f8feb4,634123460,0,0x0,8
tick,0x7ffe67f8feb4,634139436,0,0x0,8
tick,0x7ffe67f8feb4,634154605,0,0x0,8
tick,0x7ffe67f8feb4,634169490,0,0x0,8
tick,0x7ffe67f8feb4,634185074,0,0x0,8
tick,0x7ffe67f8feb4,634200905,0,0x0,8
tick,0x7ffe67f8feb4,634216455,0,0x0,8
tick,0x7ffe67f8feb4,634232057,0,0x0,8
tick,0x7ffe67f8feb4,634248068,0,0x0,8
tick,0x7ffe67f8feb4,634264083,0,0x0,8
tick,0x7ffe67f8feb4,634280086,0,0x0,8
tick,0x7ffe67f8feb4,634296107,0,0x0,8
tick,0x7ffe67f8feb4,634312078,0,0x0,8
tick,0x7ffe67f8feb4,634328104,0,0x0,8
tick,0x7ffe67f8feb4,634344110,0,0x0,8
tick,0x7ffe67f8feb4,634359709,0,0x0,8
tick,0x7ffe67f8feb4,634375078,0,0x0,8
tick,0x7ffe67f8feb4,634390369,0,0x0,8
tick,0x7ffe67f8feb4,634406124,0,0x0,8
tick,0x7ffe67f8feb4,634421263,0,0x0,8
tick,0x7ffe67f8feb4,634436871,0,0x0,8
tick,0x7ffe67f8feb4,634451887,0,0x0,8
tick,0x7ffe67f8feb4,634467599,0,0x0,8
tick,0x7ffe67f8feb4,634482940,0,0x0,8
tick,0x7ffe67f8feb4,634498587,0,0x0,8
tick,0x7ffe67f8feb4,634514556,0,0x0,8
tick,0x7ffe67f8feb4,634530594,0,0x0,8
tick,0x7ffe67f8feb4,634545684,0,0x0,8
tick,0x7ffe67f8feb4,634561705,0,0x0,8
tick,0x7ffe67f8feb4,634576983,0,0x0,8
tick,0x7ffe67f8feb4,634592629,0,0x0,8
tick,0x7ffe67f8feb4,634608403,0,0x0,8
tick,0x7ffe67f8feb4,634624271,0,0x0,8
tick,0x7ffe67f8feb4,634639824,0,0x0,8
tick,0x7ffe67f8feb4,634655644,0,0x0,8
tick,0x7ffe67f8feb4,634671820,0,0x0,8
tick,0x7ffe67f8feb4,634687164,0,0x0,8
tick,0x7ffe67f8feb4,634702551,0,0x0,8
tick,0x7ffe67f8feb4,634717808,0,0x0,8
tick,0x7ffe67f8feb4,634733336,0,0x0,8
tick,0x7ffe67f8feb4,634748479,0,0x0,8
tick,0x7ffe67f8feb4,634763634,0,0x0,8
tick,0x7ffe67f8feb4,634778729,0,0x0,8
tick,0x7ffe67f8feb4,634794466,0,0x0,8
tick,0x7ffe67f8feb4,634808968,0,0x0,8
tick,0x7ffe67f8feb4,634824280,0,0x0,8
tick,0x7ffe67f8feb4,634839485,0,0x0,8
tick,0x7ffe67f8feb4,634854753,0,0x0,8
tick,0x7ffe67f8feb4,634869736,0,0x0,8
tick,0x7ffe67f8feb4,634885932,0,0x0,8
tick,0x7ffe67f8feb4,634901333,0,0x0,8
tick,0x7ffe67f8feb4,634917296,0,0x0,8
tick,0x7ffe67f8feb4,634932608,0,0x0,8
tick,0x7ffe67f8feb4,634948315,0,0x0,8
tick,0x7ffe67f8feb4,634963610,0,0x0,8
tick,0x7ffe67f8feb4,634979679,0,0x0,8
tick,0x7ffe67f8feb4,634995602,0,0x0,8
tick,0x7ffe67f8feb4,635010914,0,0x0,8
tick,0x7ffe67f8feb4,635026380,0,0x0,8
tick,0x7ffe67f8feb4,635042362,0,0x0,8
tick,0x7ffe67f8feb4,635058378,0,0x0,8
tick,0x7ffe67f8feb4,635074359,0,0x0,8
tick,0x7ffe67f8feb4,635090421,0,0x0,8
tick,0x7ffe67f8feb4,635106339,0,0x0,8
tick,0x7ffe67f8feb4,635121812,0,0x0,8
tick,0x7ffe67f8feb4,635137812,0,0x0,8
tick,0x7ffe67f8feb4,635153835,0,0x0,8
tick,0x7ffe67f8feb4,635169815,0,0x0,8
tick,0x7ffe67f8feb4,635185805,0,0x0,8
tick,0x7ffe67f8feb4,635201889,0,0x0,8
tick,0x7ffe67f8feb4,635217816,0,0x0,8
tick,0x7ffe67f8feb4,635233815,0,0x0,8
tick,0x7ffe67f8feb4,635249895,0,0x0,8
tick,0x7ffe67f8feb4,635265806,0,0x0,8
tick,0x7ffe67f8feb4,635281816,0,0x0,8
tick,0x7ffe67f8feb4,635297806,0,0x0,8
tick,0x7ffe67f8feb4,635313820,0,0x0,8
tick,0x7ffe67f8feb4,635329816,0,0x0,8
tick,0x7ffe67f8feb4,635345715,0,0x0,8
tick,0x7ffe67f8feb4,635361730,0,0x0,8
tick,0x7ffe67f8feb4,635377717,0,0x0,8
tick,0x7ffe67f8feb4,635393743,0,0x0,8
tick,0x7ffe67f8feb4,635409711,0,0x0,8
tick,0x7ffe67f8feb4,635425724,0,0x0,8
tick,0x7ffe67f8feb4,635441030,0,0x0,8
tick,0x7ffe67f8feb4,635457071,0,0x0,8
tick,0x7ffe67f8feb4,635473044,0,0x0,8
tick,0x7ffe67f8feb4,635489061,0,0x0,8
tick,0x7ffe67f8feb4,635505058,0,0x0,8
tick,0x7ffe67f8feb4,635521159,0,0x0,8
tick,0x7ffe67f8feb4,635537152,0,0x0,8
tick,0x7ffe67f8feb4,635553139,0,0x0,8
tick,0x7ffe67f8feb4,635569147,0,0x0,8
tick,0x7ffe67f8feb4,635585153,0,0x0,8
tick,0x7ffe67f8feb4,635601141,0,0x0,8
tick,0x7ffe67f8feb4,635617159,0,0x0,8
tick,0x7ffe67f8feb4,635633147,0,0x0,8
tick,0x7ffe67f8feb4,635649135,0,0x0,8
tick,0x7ffe67f8feb4,635665159,0,0x0,8
tick,0x7ffe67f8feb4,635680851,0,0x0,8
tick,0x7ffe67f8feb4,635696844,0,0x0,8
tick,0x7ffe67f8feb4,635712868,0,0x0,8
tick,0x7ffe67f8feb4,635728832,0,0x0,8
tick,0x7ffe67f8feb4,635744842,0,0x0,8
tick,0x7ffe67f8feb4,635760856,0,0x0,8
tick,0x7ffe67f8feb4,635776920,0,0x0,8
tick,0x7ffe67f8feb4,635792856,0,0x0,8
tick,0x7ffe67f8feb4,635808857,0,0x0,8
tick,0x7ffe67f8feb4,635824852,0,0x0,8
tick,0x7ffe67f8feb4,635840852,0,0x0,8
tick,0x7ffe67f8feb4,635856863,0,0x0,8
tick,0x7ffe67f8feb4,635872857,0,0x0,8
tick,0x7ffe67f8feb4,635888863,0,0x0,8
tick,0x7ffe67f8feb4,635904938,0,0x0,8
tick,0x7ffe67f8feb4,635920868,0,0x0,8
tick,0x7ffe67f8feb4,635936872,0,0x0,8
tick,0x7ffe67f8feb4,635952862,0,0x0,8
tick,0x7ffe67f8feb4,635968868,0,0x0,8
tick,0x7ffe67f8feb4,635984874,0,0x0,8
tick,0x7ffe67f8feb4,636001008,0,0x0,8
tick,0x7ffe67f8feb4,636016912,0,0x0,8
tick,0x7ffe67f8feb4,636032904,0,0x0,8
tick,0x7ffe67f8feb4,636048889,0,0x0,8
tick,0x7ffe67f8feb4,636065194,0,0x0,8
tick,0x7ffe67f8feb4,636081106,0,0x0,8
tick,0x7ffe67f8feb4,636096876,0,0x0,8
tick,0x7ffe67f8feb4,636112174,0,0x0,8
tick,0x7ffe67f8feb4,636128181,0,0x0,8
tick,0x7ffe67f8feb4,636144199,0,0x0,8
tick,0x7ffe67f8feb4,636160181,0,0x0,8
tick,0x7ffe67f8feb4,636176175,0,0x0,8
tick,0x7ffe67f8feb4,636192222,0,0x0,8
tick,0x7ffe67f8feb4,636208199,0,0x0,8
tick,0x7ffe67f8feb4,636223409,0,0x0,8
tick,0x7ffe67f8feb4,636239225,0,0x0,8
tick,0x7ffe67f8feb4,636255217,0,0x0,8
tick,0x7ffe67f8feb4,636271229,0,0x0,8
tick,0x7ffe67f8feb4,636287209,0,0x0,8
tick,0x7ffe67f8feb4,636303268,0,0x0,8
tick,0x7ffe67f8feb4,636319264,0,0x0,8
tick,0x7ffe67f8feb4,636335784,0,0x0,8
tick,0x7ffe67f8feb4,636351254,0,0x0,8
tick,0x7ffe67f8feb4,636367242,0,0x0,8
tick,0x7ffe67f8feb4,636383251,0,0x0,8
tick,0x7ffe67f8feb4,636399438,0,0x0,8
tick,0x7ffe67f8feb4,636415280,0,0x0,8
tick,0x7ffe67f8feb4,636431418,0,0x0,8
tick,0x7ffe67f8feb4,636446247,0,0x0,8
tick,0x7ffe67f8feb4,636461391,0,0x0,8
tick,0x7ffe67f8feb4,636477711,0,0x0,8
tick,0x7ffe67f8feb4,636493426,0,0x0,8
tick,0x7ffe67f8feb4,636509443,0,0x0,8
tick,0x7ffe67f8feb4,636525472,0,0x0,8
tick,0x7ffe67f8feb4,636541432,0,0x0,8
tick,0x7ffe67f8feb4,636557437,0,0x0,8
tick,0x7ffe67f8feb4,636573435,0,0x0,8
tick,0x7ffe67f8feb4,636588625,0,0x0,8
tick,0x7ffe67f8feb4,636604610,0,0x0,8
tick,0x7ffe67f8feb4,636619892,0,0x0,8
tick,0x7ffe67f8feb4,636635608,0,0x0,8
tick,0x7ffe67f8feb4,636651636,0,0x0,8
tick,0x7ffe67f8feb4,636667716,0,0x0,8
tick,0x7ffe67f8feb4,636683626,0,0x0,8
tick,0x7ffe67f8feb4,636699656,0,0x0,8
tick,0x7ffe67f8feb4,636715940,0,0x0,8
tick,0x7ffe67f8feb4,636731948,0,0x0,8
tick,0x7ffe67f8feb4,636747679,0,0x0,8
tick,0x7ffe67f8feb4,636763666,0,0x0,8
tick,0x7ffe67f8feb4,636779719,0,0x0,8
tick,0x7ffe67f8feb4,636795657,0,0x0,8
tick,0x7ffe67f8feb4,636810658,0,0x0,8
tick,0x7ffe67f8feb4,636825795,0,0x0,8
tick,0x7ffe67f8feb4,636840794,0,0x0,8
tick,0x7ffe67f8feb4,636855810,0,0x0,8
tick,0x7ffe67f8feb4,636870974,0,0x0,8
tick,0x7ffe67f8feb4,636886294,0,0x0,8
tick,0x7ffe67f8feb4,636902367,0,0x0,8
tick,0x7ffe67f8feb4,636918557,0,0x0,8
tick,0x7ffe67f8feb4,636934013,0,0x0,8
tick,0x7ffe67f8feb4,636949993,0,0x0,8
tick,0x7ffe67f8feb4,636966025,0,0x0,8
tick,0x7ffe67f8feb4,636981977,0,0x0,8
tick,0x7ffe67f8feb4,636996929,0,0x0,8
tick,0x7ffe67f8feb4,637012945,0,0x0,8
tick,0x7ffe67f8feb4,637028822,0,0x0,8
tick,0x7ffe67f8feb4,637044574,0,0x0,8
tick,0x7ffe67f8feb4,637059809,0,0x0,8
tick,0x7ffe67f8feb4,637075819,0,0x0,8
tick,0x7ffe67f8feb4,637091863,0,0x0,8
tick,0x7ffe67f8feb4,637107818,0,0x0,8
tick,0x7ffe67f8feb4,637123817,0,0x0,8
tick,0x7ffe67f8feb4,637140040,0,0x0,8
tick,0x7ffe67f8feb4,637155842,0,0x0,8
tick,0x7ffe67f8feb4,637171834,0,0x0,8
tick,0x7ffe67f8feb4,637187899,0,0x0,8
tick,0x7ffe67f8feb4,637202851,0,0x0,8
tick,0x7ffe67f8feb4,637218368,0,0x0,8
tick,0x7ffe67f8feb4,637234367,0,0x0,8
tick,0x7ffe67f8feb4,637250391,0,0x0,8
tick,0x7ffe67f8feb4,637266382,0,0x0,8
tick,0x7ffe67f8feb4,637282385,0,0x0,8
tick,0x7ffe67f8feb4,637298399,0,0x0,8
tick,0x7ffe67f8feb4,637314413,0,0x0,8
tick,0x7ffe67f8feb4,637330389,0,0x0,8
tick,0x7ffe67f8feb4,637346415,0,0x0,8
tick,0x7ffe67f8feb4,637361827,0,0x0,8
tick,0x7ffe67f8feb4,637377933,0,0x0,8
tick,0x7ffe67f8feb4,637393810,0,0x0,8
tick,0x7ffe67f8feb4,637409892,0,0x0,8
tick,0x7ffe67f8feb4,637425276,0,0x0,8
tick,0x7ffe67f8feb4,637440458,0,0x0,8
tick,0x7ffe67f8feb4,637455541,0,0x0,8
tick,0x7ffe67f8feb4,637470854,0,0x0,8
tick,0x7ffe67f8feb4,637486866,0,0x0,8
tick,0x7ffe67f8feb4,637502055,0,0x0,8
tick,0x7ffe67f8feb4,637517891,0,0x0,8
tick,0x7ffe67f8feb4,637533932,0,0x0,8
tick,0x7ffe67f8feb4,637549551,0,0x0,8
tick,0x7ffe67f8feb4,637565052,0,0x0,8
tick,0x7ffe67f8feb4,637580245,0,0x0,8
tick,0x7ffe67f8feb4,637595557,0,0x0,8
tick,0x7ffe67f8feb4,637611419,0,0x0,8
tick,0x7ffe67f8feb4,637627450,0,0x0,8
tick,0x7ffe67f8feb4,637642606,0,0x0,8
tick,0x7ffe67f8feb4,637658477,0,0x0,8
tick,0x7ffe67f8feb4,637673665,0,0x0,8
tick,0x7ffe67f8feb4,637689509,0,0x0,8
tick,0x7ffe67f8feb4,637704689,0,0x0,8
tick,0x7ffe67f8feb4,637720075,0,0x0,8
tick,0x7ffe67f8feb4,637735848,0,0x0,8
tick,0x7ffe67f8feb4,637751948,0,0x0,8
tick,0x7ffe67f8feb4,637767820,0,0x0,8
tick,0x7ffe67f8feb4,637783831,0,0x0,8
tick,0x7ffe67f8feb4,637799967,0,0x0,8
tick,0x7ffe67f8feb4,637815394,0,0x0,8
tick,0x7ffe67f8feb4,637830463,0,0x0,8
tick,0x7ffe67f8feb4,637846495,0,0x0,8
tick,0x7ffe67f8feb4,637862456,0,0x0,8
tick,0x7ffe67f8feb4,637878469,0,0x0,8
tick,0x7ffe67f8feb4,637894463,0,0x0,8
tick,0x7ffe67f8feb4,637910474,0,0x0,8
tick,0x7ffe67f8feb4,637926481,0,0x0,8
tick,0x7ffe67f8feb4,637942484,0,0x0,8
tick,0x7ffe67f8feb4,637958526,0,0x0,8
tick,0x7ffe67f8feb4,637974351,0,0x0,8
tick,0x7ffe67f8feb4,637990361,0,0x0,8
tick,0x7ffe67f8feb4,638005481,0,0x0,8
tick,0x7ffe67f8feb4,638021496,0,0x0,8
tick,0x7ffe67f8feb4,638037513,0,0x0,8
tick,0x7ffe67f8feb4,638052969,0,0x0,8
tick,0x7ffe67f8feb4,638068948,0,0x0,8
tick,0x7ffe67f8feb4,638084759,0,0x0,8
tick,0x7ffe67f8feb4,638100749,0,0x0,8
tick,0x7ffe67f8feb4,638116777,0,0x0,8
tick,0x7ffe67f8feb4,638133333,0,0x0,8
tick,0x7ffe67f8feb4,638148549,0,0x0,8
tick,0x7ffe67f8feb4,638163793,0,0x0,8
tick,0x7ffe67f8feb4,638179818,0,0x0,8
tick,0x7ffe67f8feb4,638195822,0,0x0,8
tick,0x7ffe67f8feb4,638211843,0,0x0,8
tick,0x7ffe67f8feb4,638227528,0,0x0,8
tick,0x7ffe67f8feb4,638242859,0,0x0,8
tick,0x7ffe67f8feb4,638259027,0,0x0,8
tick,0x7ffe67f8feb4,638274206,0,0x0,8
tick,0x7ffe67f8feb4,638289403,0,0x0,8
tick,0x7ffe67f8feb4,638304576,0,0x0,8
tick,0x7ffe67f8feb4,638319589,0,0x0,8
tick,0x7ffe67f8feb4,638335589,0,0x0,8
tick,0x7ffe67f8feb4,638351135,0,0x0,8
tick,0x7ffe67f8feb4,638366583,0,0x0,8
tick,0x7ffe67f8feb4,638382058,0,0x0,8
tick,0x7ffe67f8feb4,638397212,0,0x0,8
tick,0x7ffe67f8feb4,638412850,0,0x0,8
tick,0x7ffe67f8feb4,638428873,0,0x0,8
tick,0x7ffe67f8feb4,638444716,0,0x0,8
tick,0x7ffe67f8feb4,638460524,0,0x0,8
tick,0x7ffe67f8feb4,638475857,0,0x0,8
tick,0x7ffe67f8feb4,638491456,0,0x0,8
tick,0x7ffe67f8feb4,638506921,0,0x0,8
tick,0x7ffe67f8feb4,638523177,0,0x0,8
tick,0x7ffe67f8feb4,638538463,0,0x0,8
tick,0x7ffe67f8feb4,638553931,0,0x0,8
tick,0x7ffe67f8feb4,638569117,0,0x0,8
tick,0x7ffe67f8feb4,638585101,0,0x0,8
tick,0x7ffe67f8feb4,638600333,0,0x0,8
tick,0x7ffe67f8feb4,638616323,0,0x0,8
tick,0x7ffe67f8feb4,638631791,0,0x0,8
tick,0x7ffe67f8feb4,638647072,0,0x0,8
tick,0x7ffe67f8feb4,638663029,0,0x0,8
tick,0x7ffe67f8feb4,638679044,0,0x0,8
tick,0x7ffe67f8feb4,638694184,0,0x0,8
tick,0x7ffe67f8feb4,638709985,0,0x0,8
tick,0x7ffe67f8feb4,638726170,0,0x0,8
tick,0x7ffe67f8feb4,638741379,0,0x0,8
tick,0x7ffe67f8feb4,638756615,0,0x0,8
tick,0x7ffe67f8feb4,638772613,0,0x0,8
tick,0x7ffe67f8feb4,638787829,0,0x0,8
tick,0x7ffe67f8feb4,638803821,0,0x0,8
tick,0x7ffe67f8feb4,638819705,0,0x0,8
tick,0x7ffe67f8feb4,638835759,0,0x0,8
tick,0x7ffe67f8feb4,638851717,0,0x0,8
tick,0x7ffe67f8feb4,638867779,0,0x0,8
tick,0x7ffe67f8feb4,638882922,0,0x0,8
tick,0x7ffe67f8feb4,638898766,0,0x0,8
tick,0x7ffe67f8feb4,638914639,0,0x0,8
tick,0x7ffe67f8feb4,638929803,0,0x0,8
tick,0x7ffe67f8feb4,638945534,0,0x0,8
tick,0x7ffe67f8feb4,638961581,0,0x0,8
tick,0x7ffe67f8feb4,638977620,0,0x0,8
tick,0x7ffe67f8feb4,638992892,0,0x0,8
tick,0x7ffe67f8feb4,639008514,0,0x0,8
tick,0x7ffe67f8feb4,639024550,0,0x0,8
tick,0x7ffe67f8feb4,639039733,0,0x0,8
tick,0x7ffe67f8feb4,639055712,0,0x0,8
tick,0x7ffe67f8feb4,639071684,0,0x0,8
tick,0x7ffe67f8feb4,639087665,0,0x0,8
tick,0x7ffe67f8feb4,639103666,0,0x0,8
tick,0x7ffe67f8feb4,639119703,0,0x0,8
tick,0x7ffe67f8feb4,639135697,0,0x0,8
tick,0x7ffe67f8feb4,639151698,0,0x0,8
tick,0x7ffe67f8feb4,639167758,0,0x0,8
tick,0x7ffe67f8feb4,639183776,0,0x0,8
tick,0x7ffe67f8feb4,639199815,0,0x0,8
tick,0x7ffe67f8feb4,639216079,0,0x0,8
tick,0x7ffe67f8feb4,639231540,0,0x0,8
tick,0x7ffe67f8feb4,639246786,0,0x0,8
tick,0x7ffe67f8feb4,639262433,0,0x0,8
tick,0x7ffe67f8feb4,639277471,0,0x0,8
tick,0x7ffe67f8feb4,639292810,0,0x0,8
tick,0x7ffe67f8feb4,639307786,0,0x0,8
tick,0x7ffe67f8feb4,639324193,0,0x0,8
tick,0x7ffe67f8feb4,639339692,0,0x0,8
tick,0x7ffe67f8feb4,639355173,0,0x0,8
tick,0x7ffe67f8feb4,639370762,0,0x0,8
tick,0x7ffe67f8feb4,639385958,0,0x0,8
tick,0x7ffe67f8feb4,639401342,0,0x0,8
tick,0x7ffe67f8feb4,639416726,0,0x0,8
tick,0x7ffe67f8feb4,639432432,0,0x0,8
tick,0x7ffe67f8feb4,639447589,0,0x0,8
tick,0x7ffe67f8feb4,639463050,0,0x0,8
tick,0x7ffe67f8feb4,639478489,0,0x0,8
tick,0x7ffe67f8feb4,639494572,0,0x0,8
tick,0x7ffe67f8feb4,639509807,0,0x0,8
tick,0x7ffe67f8feb4,639525620,0,0x0,8
tick,0x7ffe67f8feb4,639541751,0,0x0,8
tick,0x7ffe67f8feb4,639557100,0,0x0,8
tick,0x7ffe67f8feb4,639572813,0,0x0,8
tick,0x7ffe67f8feb4,639588109,0,0x0,8
tick,0x7ffe67f8feb4,639604132,0,0x0,8
tick,0x7ffe67f8feb4,639619360,0,0x0,8
tick,0x7ffe67f8feb4,639634673,0,0x0,8
tick,0x7ffe67f8feb4,639650384,0,0x0,8
tick,0x7ffe67f8feb4,639666867,0,0x0,8
tick,0x7ffe67f8feb4,639681905,0,0x0,8
tick,0x7ffe67f8feb4,639697165,0,0x0,8
tick,0x7ffe67f8feb4,639712924,0,0x0,8
tick,0x7ffe67f8feb4,639728906,0,0x0,8
tick,0x7ffe67f8feb4,639744665,0,0x0,8
tick,0x7ffe67f8feb4,639760692,0,0x0,8
tick,0x7ffe67f8feb4,639775999,0,0x0,8
tick,0x7ffe67f8feb4,639792280,0,0x0,8
tick,0x7ffe67f8feb4,639808128,0,0x0,8
tick,0x7ffe67f8feb4,639823568,0,0x0,8
tick,0x7ffe67f8feb4,639839283,0,0x0,8
tick,0x7ffe67f8feb4,639854732,0,0x0,8
tick,0x7ffe67f8feb4,639870700,0,0x0,8
tick,0x7ffe67f8feb4,639885956,0,0x0,8
tick,0x7ffe67f8feb4,639901536,0,0x0,8
tick,0x7ffe67f8feb4,639916570,0,0x0,8
tick,0x7ffe67f8feb4,639931687,0,0x0,8
tick,0x7ffe67f8feb4,639947030,0,0x0,8
tick,0x7ffe67f8feb4,639962094,0,0x0,8
tick,0x7ffe67f8feb4,639978138,0,0x0,8
tick,0x7ffe67f8feb4,639994051,0,0x0,8
tick,0x7ffe67f8feb4,640009370,0,0x0,8
tick,0x7ffe67f8feb4,640025198,0,0x0,8
tick,0x7ffe67f8feb4,640041107,0,0x0,8
tick,0x7ffe67f8feb4,640056111,0,0x0,8
tick,0x7ffe67f8feb4,640072030,0,0x0,8
tick,0x7ffe67f8feb4,640088035,0,0x0,8
tick,0x7ffe67f8feb4,640103051,0,0x0,8
tick,0x7ffe67f8feb4,640119049,0,0x0,8
tick,0x7ffe67f8feb4,640135008,0,0x0,8
tick,0x7ffe67f8feb4,640150826,0,0x0,8
tick,0x7ffe67f8feb4,640166816,0,0x0,8
tick,0x7ffe67f8feb4,640182801,0,0x0,8
tick,0x7ffe67f8feb4,640198815,0,0x0,8
tick,0x7ffe67f8feb4,640214809,0,0x0,8
tick,0x7ffe67f8feb4,640230819,0,0x0,8
tick,0x7ffe67f8feb4,640246841,0,0x0,8
tick,0x7ffe67f8feb4,640262823,0,0x0,8
tick,0x7ffe67f8feb4,640278845,0,0x0,8
tick,0x7ffe67f8feb4,640294822,0,0x0,8
tick,0x7ffe67f8feb4,640310839,0,0x0,8
tick,0x7ffe67f8feb4,640326838,0,0x0,8
tick,0x7ffe67f8feb4,640342845,0,0x0,8
tick,0x7ffe67f8feb4,640358853,0,0x0,8
tick,0x7ffe67f8feb4,640374849,0,0x0,8
tick,0x7ffe67f8feb4,640390862,0,0x0,8
tick,0x7ffe67f8feb4,640406873,0,0x0,8
tick,0x7ffe67f8feb4,640422862,0,0x0,8
tick,0x7ffe67f8feb4,640438414,0,0x0,8
tick,0x7ffe67f8feb4,640454446,0,0x0,8
tick,0x7ffe67f8feb4,640470476,0,0x0,8
tick,0x7ffe67f8feb4,640486495,0,0x0,8
tick,0x7ffe67f8feb4,640502183,0,0x0,8
tick,0x7ffe67f8feb4,640517471,0,0x0,8
tick,0x7ffe67f8feb4,640532902,0,0x0,8
tick,0x7ffe67f8feb4,640548582,0,0x0,8
tick,0x7ffe67f8feb4,640564136,0,0x0,8
tick,0x7ffe67f8feb4,640579585,0,0x0,8
tick,0x7ffe67f8feb4,640595187,0,0x0,8
tick,0x7ffe67f8feb4,640610769,0,0x0,8
tick,0x7ffe67f8feb4,640626374,0,0x0,8
tick,0x7ffe67f8feb4,640641525,0,0x0,8
tick,0x7ffe67f8feb4,640656955,0,0x0,8
tick,0x7ffe67f8feb4,640672547,0,0x0,8
tick,0x7ffe67f8feb4,640687882,0,0x0,8
tick,0x7ffe67f8feb4,640703916,0,0x0,8
tick,0x7ffe67f8feb4,640719439,0,0x0,8
tick,0x7ffe67f8feb4,640734895,0,0x0,8
tick,0x7ffe67f8feb4,640750904,0,0x0,8
tick,0x7ffe67f8feb4,640766910,0,0x0,8
tick,0x7ffe67f8feb4,640781921,0,0x0,8
tick,0x7ffe67f8feb4,640796985,0,0x0,8
tick,0x7ffe67f8feb4,640812758,0,0x0,8
tick,0x7ffe67f8feb4,640828752,0,0x0,8
tick,0x7ffe67f8feb4,640843987,0,0x0,8
tick,0x7ffe67f8feb4,640860007,0,0x0,8
tick,0x7ffe67f8feb4,640875442,0,0x0,8
tick,0x7ffe67f8feb4,640891416,0,0x0,8
tick,0x7ffe67f8feb4,640907441,0,0x0,8
tick,0x7ffe67f8feb4,640922715,0,0x0,8
tick,0x7ffe67f8feb4,640937940,0,0x0,8
tick,0x7ffe67f8feb4,640953988,0,0x0,8
tick,0x7ffe67f8feb4,640969968,0,0x0,8
tick,0x7ffe67f8feb4,640985001,0,0x0,8
tick,0x7ffe67f8feb4,641001083,0,0x0,8
tick,0x7ffe67f8feb4,641016298,0,0x0,8
tick,0x7ffe67f8feb4,641031940,0,0x0,8
tick,0x7ffe67f8feb4,641047992,0,0x0,8
tick,0x7ffe67f8feb4,641064030,0,0x0,8
tick,0x7ffe67f8feb4,641080000,0,0x0,8
tick,0x7ffe67f8feb4,641096002,0,0x0,8
tick,0x7ffe67f8feb4,641112001,0,0x0,8
tick,0x7ffe67f8feb4,641128001,0,0x0,8
tick,0x7ffe67f8feb4,641142952,0,0x0,8
tick,0x7ffe67f8feb4,641158556,0,0x0,8
tick,0x7ffe67f8feb4,641173861,0,0x0,8
tick,0x7ffe67f8feb4,641189180,0,0x0,8
tick,0x7ffe67f8feb4,641204856,0,0x0,8
tick,0x7ffe67f8feb4,641220798,0,0x0,8
tick,0x7ffe67f8feb4,641236811,0,0x0,8
tick,0x7ffe67f8feb4,641252540,0,0x0,8
tick,0x7ffe67f8feb4,641267887,0,0x0,8
tick,0x7ffe67f8feb4,641282989,0,0x0,8
tick,0x7ffe67f8feb4,641298299,0,0x0,8
tick,0x7ffe67f8feb4,641313840,0,0x0,8
tick,0x7ffe67f8feb4,641329754,0,0x0,8
tick,0x7ffe67f8feb4,641345545,0,0x0,8
tick,0x7ffe67f8feb4,641361298,0,0x0,8
tick,0x7ffe67f8feb4,641376992,0,0x0,8
tick,0x7ffe67f8feb4,641392055,0,0x0,8
tick,0x7ffe67f8feb4,641407754,0,0x0,8
tick,0x7ffe67f8feb4,641423121,0,0x0,8
tick,0x7ffe67f8feb4,641439114,0,0x0,8
tick,0x7ffe67f8feb4,641454484,0,0x0,8
tick,0x7ffe67f8feb4,641470005,0,0x0,8
tick,0x7ffe67f8feb4,641485739,0,0x0,8
tick,0x7ffe67f8feb4,641501119,0,0x0,8
tick,0x7ffe67f8feb4,641515739,0,0x0,8
tick,0x7ffe67f8feb4,641531407,0,0x0,8
tick,0x7ffe67f8feb4,641546522,0,0x0,8
tick,0x7ffe67f8feb4,641562104,0,0x0,8
tick,0x7ffe67f8feb4,641578095,0,0x0,8
tick,0x7ffe67f8feb4,641594312,0,0x0,8
tick,0x7ffe67f8feb4,641610051,0,0x0,8
tick,0x7ffe67f8feb4,641626265,0,0x0,8
tick,0x7ffe67f8feb4,641641866,0,0x0,8
tick,0x7ffe67f8feb4,641657888,0,0x0,8
tick,0x7ffe67f8feb4,641673855,0,0x0,8
tick,0x7ffe67f8feb4,641689057,0,0x0,8
tick,0x7ffe67f8feb4,641705026,0,0x0,8
tick,0x7ffe67f8feb4,641720292,0,0x0,8
tick,0x7ffe67f8feb4,641736280,0,0x0,8
tick,0x7ffe67f8feb4,641752127,0,0x0,8
tick,0x7ffe67f8feb4,641767299,0,0x0,8
tick,0x7ffe67f8feb4,641783320,0,0x0,8
tick,0x7ffe67f8feb4,641799087,0,0x0,8
tick,0x7ffe67f8feb4,641814412,0,0x0,8
tick,0x7ffe67f8feb4,641829977,0,0x0,8
tick,0x7ffe67f8feb4,641845397,0,0x0,8
tick,0x7ffe67f8feb4,641861463,0,0x0,8
tick,0x7ffe67f8feb4,641876681,0,0x0,8
tick,0x7ffe67f8feb4,641892517,0,0x0,8
tick,0x7ffe67f8feb4,641908493,0,0x0,8
tick,0x7ffe67f8feb4,641924180,0,0x0,8
tick,0x7ffe67f8feb4,641940098,0,0x0,8
tick,0x7ffe67f8feb4,641956131,0,0x0,8
tick,0x7ffe67f8feb4,641972150,0,0x0,8
tick,0x7ffe67f8feb4,641988184,0,0x0,8
tick,0x7ffe67f8feb4,642003667,0,0x0,8
tick,0x7ffe67f8feb4,642019197,0,0x0,8
tick,0x7ffe67f8feb4,642035151,0,0x0,8
tick,0x7ffe67f8feb4,642051160,0,0x0,8
tick,0x7ffe67f8feb4,642067110,0,0x0,8
tick,0x7ffe67f8feb4,642083096,0,0x0,8
tick,0x7ffe67f8feb4,642099096,0,0x0,8
tick,0x7ffe67f8feb4,642115108,0,0x0,8
tick,0x7ffe67f8feb4,642131123,0,0x0,8
tick,0x7ffe67f8feb4,642147072,0,0x0,8
tick,0x7ffe67f8feb4,642163093,0,0x0,8
tick,0x7ffe67f8feb4,642179105,0,0x0,8
tick,0x7ffe67f8feb4,642194267,0,0x0,8
tick,0x7ffe67f8feb4,642210136,0,0x0,8
tick,0x7ffe67f8feb4,642225539,0,0x0,8
tick,0x7ffe67f8feb4,642241350,0,0x0,8
tick,0x7ffe67f8feb4,642256550,0,0x0,8
tick,0x7ffe67f8feb4,642272543,0,0x0,8
tick,0x7ffe67f8feb4,642287797,0,0x0,8
tick,0x7ffe67f8feb4,642303247,0,0x0,8
tick,0x7ffe67f8feb4,642319275,0,0x0,8
tick,0x7ffe67f8feb4,642334996,0,0x0,8
tick,0x7ffe67f8feb4,642350256,0,0x0,8
tick,0x7ffe67f8feb4,642366568,0,0x0,8
tick,0x7ffe67f8feb4,642382072,0,0x0,8
tick,0x7ffe67f8feb4,642397710,0,0x0,8
tick,0x7ffe67f8feb4,642413588,0,0x0,8
tick,0x7ffe67f8feb4,642429466,0,0x0,8
tick,0x7ffe67f8feb4,642444711,0,0x0,8
tick,0x7ffe67f8feb4,642459876,0,0x0,8
tick,0x7ffe67f8feb4,642475707,0,0x0,8
tick,0x7ffe67f8feb4,642491039,0,0x0,8
tick,0x7ffe67f8feb4,642506714,0,0x0,8
tick,0x7ffe67f8feb4,642522474,0,0x0,8
tick,0x7ffe67f8feb4,642537893,0,0x0,8
tick,0x7ffe67f8feb4,642553863,0,0x0,8
tick,0x7ffe67f8feb4,642569315,0,0x0,8
tick,0x7ffe67f8feb4,642584913,0,0x0,8
tick,0x7ffe67f8feb4,642600822,0,0x0,8
tick,0x7ffe67f8feb4,642617023,0,0x0,8
tick,0x7ffe67f8feb4,642632490,0,0x0,8
tick,0x7ffe67f8feb4,642648161,0,0x0,8
tick,0x7ffe67f8feb4,642664162,0,0x0,8
tick,0x7ffe67f8feb4,642679619,0,0x0,8
tick,0x7ffe67f8feb4,642695194,0,0x0,8
tick,0x7ffe67f8feb4,642711450,0,0x0,8
tick,0x7ffe67f8feb4,642727156,0,0x0,8
tick,0x7ffe67f8feb4,642743178,0,0x0,8
tick,0x7ffe67f8feb4,642758429,0,0x0,8
tick,0x7ffe67f8feb4,642774265,0,0x0,8
tick,0x7ffe67f8feb4,642790418,0,0x0,8
tick,0x7ffe67f8feb4,642805494,0,0x0,8
tick,0x7ffe67f8feb4,642821129,0,0x0,8
tick,0x7ffe67f8feb4,642836233,0,0x0,8
tick,0x7ffe67f8feb4,642851449,0,0x0,8
tick,0x7ffe67f8feb4,642866711,0,0x0,8
tick,0x7ffe67f8feb4,642882256,0,0x0,8
tick,0x7ffe67f8feb4,642898271,0,0x0,8
tick,0x7ffe67f8feb4,642913476,0,0x0,8
tick,0x7ffe67f8feb4,642929227,0,0x0,8
tick,0x7ffe67f8feb4,642944339,0,0x0,8
tick,0x7ffe67f8feb4,642960338,0,0x0,8
tick,0x7ffe67f8feb4,642975882,0,0x0,8
tick,0x7ffe67f8feb4,642991243,0,0x0,8
tick,0x7ffe67f8feb4,643007240,0,0x0,8
tick,0x7ffe67f8feb4,643022983,0,0x0,8
tick,0x7ffe67f8feb4,643038423,0,0x0,8
tick,0x7ffe67f8feb4,643053499,0,0x0,8
tick,0x7ffe67f8feb4,643068675,0,0x0,8
tick,0x7ffe67f8feb4,643084644,0,0x0,8
tick,0x7ffe67f8feb4,643100637,0,0x0,8
tick,0x7ffe67f8feb4,643115634,0,0x0,8
tick,0x7ffe67f8feb4,643131206,0,0x0,8
tick,0x7ffe67f8feb4,643146660,0,0x0,8
tick,0x7ffe67f8feb4,643162276,0,0x0,8
tick,0x7ffe67f8feb4,643178312,0,0x0,8
tick,0x7ffe67f8feb4,643193435,0,0x0,8
tick,0x7ffe67f8feb4,643209416,0,0x0,8
tick,0x7ffe67f8feb4,643225285,0,0x0,8
tick,0x7ffe67f8feb4,643240671,0,0x0,8
tick,0x7ffe67f8feb4,643256277,0,0x0,8
tick,0x7ffe67f8feb4,643272290,0,0x0,8
tick,0x7ffe67f8feb4,643288313,0,0x0,8
tick,0x7ffe67f8feb4,643303335,0,0x0,8
tick,0x7ffe67f8feb4,643319378,0,0x0,8
tick,0x7ffe67f8feb4,643334527,0,0x0,8
tick,0x7ffe67f8feb4,643350316,0,0x0,8
tick,0x7ffe67f8feb4,643365060,0,0x0,8
tick,0x7ffe67f8feb4,643380754,0,0x0,8
tick,0x7ffe67f8feb4,643396409,0,0x0,8
tick,0x7ffe67f8feb4,643412474,0,0x0,8
tick,0x7ffe67f8feb4,643427553,0,0x0,8
tick,0x7ffe67f8feb4,643443215,0,0x0,8
tick,0x7ffe67f8feb4,643458339,0,0x0,8
tick,0x7ffe67f8feb4,643473710,0,0x0,8
tick,0x7ffe67f8feb4,643489348,0,0x0,8
tick,0x7ffe67f8feb4,643504779,0,0x0,8
tick,0x7ffe67f8feb4,643520362,0,0x0,8
tick,0x7ffe67f8feb4,643536121,0,0x0,8
tick,0x7ffe67f8feb4,643552107,0,0x0,8
tick,0x7ffe67f8feb4,643568005,0,0x0,8
tick,0x7ffe67f8feb4,643583626,0,0x0,8
tick,0x7ffe67f8feb4,643599723,0,0x0,8
tick,0x7ffe67f8feb4,643615334,0,0x0,8
tick,0x7ffe67f8feb4,643631354,0,0x0,8
tick,0x7ffe67f8feb4,643647359,0,0x0,8
tick,0x7ffe67f8feb4,643663344,0,0x0,8
tick,0x7ffe67f8feb4,643679425,0,0x0,8
tick,0x7ffe67f8feb4,643695341,0,0x0,8
tick,0x7ffe67f8feb4,643711365,0,0x0,8
tick,0x7ffe67f8feb4,643727367,0,0x0,8
tick,0x7ffe67f8feb4,643743460,0,0x0,8
tick,0x7ffe67f8feb4,643759456,0,0x0,8
tick,0x7ffe67f8feb4,643774663,0,0x0,8
tick,0x7ffe67f8feb4,643789821,0,0x0,8
tick,0x7ffe67f8feb4,643805368,0,0x0,8
tick,0x7ffe67f8feb4,643821093,0,0x0,8
tick,0x7ffe67f8feb4,643836728,0,0x0,8
tick,0x7ffe67f8feb4,643852447,0,0x0,8
tick,0x7ffe67f8feb4,643867828,0,0x0,8
tick,0x7ffe67f8feb4,643883321,0,0x0,8
tick,0x7ffe67f8feb4,643898560,0,0x0,8
tick,0x7ffe67f8feb4,643914126,0,0x0,8
tick,0x7ffe67f8feb4,643929507,0,0x0,8
tick,0x7ffe67f8feb4,643945528,0,0x0,8
tick,0x7ffe67f8feb4,643960878,0,0x0,8
tick,0x7ffe67f8feb4,643976363,0,0x0,8
tick,0x7ffe67f8feb4,643991421,0,0x0,8
tick,0x7ffe67f8feb4,644006692,0,0x0,8
tick,0x7ffe67f8feb4,644022122,0,0x0,8
tick,0x7ffe67f8feb4,644037385,0,0x0,8
tick,0x7ffe67f8feb4,644052659,0,0x0,8
tick,0x7ffe67f8feb4,644067812,0,0x0,8
tick,0x7ffe67f8feb4,644083322,0,0x0,8
tick,0x7ffe67f8feb4,644099002,0,0x0,8
tick,0x7ffe67f8feb4,644115019,0,0x0,8
tick,0x7ffe67f8feb4,644131174,0,0x0,8
tick,0x7ffe67f8feb4,644147205,0,0x0,8
tick,0x7ffe67f8feb4,644162030,0,0x0,8
tick,0x7ffe67f8feb4,644178079,0,0x0,8
tick,0x7ffe67f8feb4,644194049,0,0x0,8
tick,0x7ffe67f8feb4,644210064,0,0x0,8
tick,0x7ffe67f8feb4,644225008,0,0x0,8
tick,0x7ffe67f8feb4,644241016,0,0x0,8
tick,0x7ffe67f8feb4,644256030,0,0x0,8
tick,0x7ffe67f8feb4,644272042,0,0x0,8
tick,0x7ffe67f8feb4,644287476,0,0x0,8
tick,0x7ffe67f8feb4,644303444,0,0x0,8
tick,0x7ffe67f8feb4,644319448,0,0x0,8
tick,0x7ffe67f8feb4,644335451,0,0x0,8
tick,0x7ffe67f8feb4,644351442,0,0x0,8
tick,0x7ffe67f8feb4,644367473,0,0x0,8
tick,0x7ffe67f8feb4,644383467,0,0x0,8
tick,0x7ffe67f8feb4,644399521,0,0x0,8
tick,0x7ffe67f8feb4,644415488,0,0x0,8
tick,0x7ffe67f8feb4,644430592,0,0x0,8
tick,0x7ffe67f8feb4,644445914,0,0x0,8
tick,0x7ffe67f8feb4,644461511,0,0x0,8
tick,0x7ffe67f8feb4,644477496,0,0x0,8
tick,0x7ffe67f8feb4,644492979,0,0x0,8
tick,0x7ffe67f8feb4,644508498,0,0x0,8
tick,0x7ffe67f8feb4,644524512,0,0x0,8
tick,0x7ffe67f8feb4,644540467,0,0x0,8
tick,0x7ffe67f8feb4,644556500,0,0x0,8
tick,0x7ffe67f8feb4,644572506,0,0x0,8
tick,0x7ffe67f8feb4,644588482,0,0x0,8
tick,0x7ffe67f8feb4,644604451,0,0x0,8
tick,0x7ffe67f8feb4,644620467,0,0x0,8
tick,0x7ffe67f8feb4,644636467,0,0x0,8
tick,0x7ffe67f8feb4,644651879,0,0x0,8
tick,0x7ffe67f8feb4,644667878,0,0x0,8
tick,0x7ffe67f8feb4,644683887,0,0x0,8
tick,0x7ffe67f8feb4,644699532,0,0x0,8
tick,0x7ffe67f8feb4,644714868,0,0x0,8
tick,0x7ffe67f8feb4,644730857,0,0x0,8
tick,0x7ffe67f8feb4,644746867,0,0x0,8
tick,0x7ffe67f8feb4,644762871,0,0x0,8
tick,0x7ffe67f8feb4,644778518,0,0x0,8
tick,0x7ffe67f8feb4,644794204,0,0x0,8
tick,0x7ffe67f8feb4,644809537,0,0x0,8
tick,0x7ffe67f8feb4,644825534,0,0x0,8
tick,0x7ffe67f8feb4,644841575,0,0x0,8
tick,0x7ffe67f8feb4,644857625,0,0x0,8
tick,0x7ffe67f8feb4,644873147,0,0x0,8
tick,0x7ffe67f8feb4,644888548,0,0x0,8
tick,0x7ffe67f8feb4,644903854,0,0x0,8
tick,0x7ffe67f8feb4,644919797,0,0x0,8
tick,0x7ffe67f8feb4,644935394,0,0x0,8
tick,0x7ffe67f8feb4,644950903,0,0x0,8
tick,0x7ffe67f8feb4,644966151,0,0x0,8
tick,0x7ffe67f8feb4,644981297,0,0x0,8
tick,0x7ffe67f8feb4,644997348,0,0x0,8
tick,0x7ffe67f8feb4,645012158,0,0x0,8
tick,0x7ffe67f8feb4,645028100,0,0x0,8
tick,0x7ffe67f8feb4,645043421,0,0x0,8
tick,0x7ffe67f8feb4,645059688,0,0x0,8
tick,0x7ffe67f8feb4,645074614,0,0x0,8
tick,0x7ffe67f8feb4,645090640,0,0x0,8
tick,0x7ffe67f8feb4,645106731,0,0x0,8
tick,0x7ffe67f8feb4,645122598,0,0x0,8
tick,0x7ffe67f8feb4,645137600,0,0x0,8
tick,0x7ffe67f8feb4,645153425,0,0x0,8
tick,0x7ffe67f8feb4,645168558,0,0x0,8
tick,0x7ffe67f8feb4,645184581,0,0x0,8
tick,0x7ffe67f8feb4,645200607,0,0x0,8
tick,0x7ffe67f8feb4,645216625,0,0x0,8
tick,0x7ffe67f8feb4,645232597,0,0x0,8
tick,0x7ffe67f8feb4,645248578,0,0x0,8
tick,0x7ffe67f8feb4,645264472,0,0x0,8
tick,0x7ffe67f8feb4,645280592,0,0x0,8
tick,0x7ffe67f8feb4,645296606,0,0x0,8
tick,0x7ffe67f8feb4,645312554,0,0x0,8
tick,0x7ffe67f8feb4,645328598,0,0x0,8
tick,0x7ffe67f8feb4,645344588,0,0x0,8
tick,0x7ffe67f8feb4,645360609,0,0x0,8
tick,0x7ffe67f8feb4,645376682,0,0x0,8
tick,0x7ffe67f8feb4,645392613,0,0x0,8
tick,0x7ffe67f8feb4,645408663,0,0x0,8
tick,0x7ffe67f8feb4,645424684,0,0x0,8
tick,0x7ffe67f8feb4,645440545,0,0x0,8
tick,0x7ffe67f8feb4,645455655,0,0x0,8
tick,0x7ffe67f8feb4,645471649,0,0x0,8
tick,0x7ffe67f8feb4,645487668,0,0x0,8
tick,0x7ffe67f8feb4,645503684,0,0x0,8
tick,0x7ffe67f8feb4,645519692,0,0x0,8
tick,0x7ffe67f8feb4,645535669,0,0x0,8
tick,0x7ffe67f8feb4,645550819,0,0x0,8
tick,0x7ffe67f8feb4,645566657,0,0x0,8
tick,0x7ffe67f8feb4,645581821,0,0x0,8
tick,0x7ffe67f8feb4,645596870,0,0x0,8
tick,0x7ffe67f8feb4,645612316,0,0x0,8
tick,0x7ffe67f8feb4,645628314,0,0x0,8
tick,0x7ffe67f8feb4,645643673,0,0x0,8
tick,0x7ffe67f8feb4,645659291,0,0x0,8
tick,0x7ffe67f8feb4,645674651,0,0x0,8
tick,0x7ffe67f8feb4,645690726,0,0x0,8
tick,0x7ffe67f8feb4,645706423,0,0x0,8
tick,0x7ffe67f8feb4,645721834,0,0x0,8
tick,0x7ffe67f8feb4,645737824,0,0x0,8
tick,0x7ffe67f8feb4,645753501,0,0x0,8
tick,0x7ffe67f8feb4,645769340,0,0x0,8
tick,0x7ffe67f8feb4,645785007,0,0x0,8
tick,0x7ffe67f8feb4,645800431,0,0x0,8
tick,0x7ffe67f8feb4,645815941,0,0x0,8
tick,0x7ffe67f8feb4,645832003,0,0x0,8
tick,0x7ffe67f8feb4,645847261,0,0x0,8
tick,0x7ffe67f8feb4,645862954,0,0x0,8
tick,0x7ffe67f8feb4,645879171,0,0x0,8
tick,0x7ffe67f8feb4,645894293,0,0x0,8
tick,0x7ffe67f8feb4,645910109,0,0x0,8
tick,0x7ffe67f8feb4,645925973,0,0x0,8
tick,0x7ffe67f8feb4,645941369,0,0x0,8
tick,0x7ffe67f8feb4,645956387,0,0x0,8
tick,0x7ffe67f8feb4,645971514,0,0x0,8
tick,0x7ffe67f8feb4,645987554,0,0x0,8
tick,0x7ffe67f8feb4,646003200,0,0x0,8
tick,0x7ffe67f8feb4,646019003,0,0x0,8
tick,0x7ffe67f8feb4,646035229,0,0x0,8
tick,0x7ffe67f8feb4,646050225,0,0x0,8
tick,0x7ffe67f8feb4,646065749,0,0x0,8
tick,0x7ffe67f8feb4,646083340,0,0x0,8
tick,0x7ffe67f8feb4,646097946,0,0x0,8
tick,0x7ffe67f8feb4,646113743,0,0x0,8
tick,0x7ffe67f8feb4,646130038,0,0x0,8
tick,0x7ffe67f8feb4,646145742,0,0x0,8
tick,0x7ffe67f8feb4,646161720,0,0x0,8
tick,0x7ffe67f8feb4,646177720,0,0x0,8
tick,0x7ffe67f8feb4,646193747,0,0x0,8
tick,0x7ffe67f8feb4,646209764,0,0x0,8
tick,0x7ffe67f8feb4,646225799,0,0x0,8
tick,0x7ffe67f8feb4,646241807,0,0x0,8
tick,0x7ffe67f8feb4,646256785,0,0x0,8
tick,0x7ffe67f8feb4,646272751,0,0x0,8
tick,0x7ffe67f8feb4,646288734,0,0x0,8
tick,0x7ffe67f8feb4,646304590,0,0x0,8
tick,0x7ffe67f8feb4,646319756,0,0x0,8
tick,0x7ffe67f8feb4,646335743,0,0x0,8
tick,0x7ffe67f8feb4,646351767,0,0x0,8
tick,0x7ffe67f8feb4,646367760,0,0x0,8
tick,0x7ffe67f8feb4,646383751,0,0x0,8
tick,0x7ffe67f8feb4,646399759,0,0x0,8
tick,0x7ffe67f8feb4,646415760,0,0x0,8
tick,0x7ffe67f8feb4,646431760,0,0x0,8
tick,0x7ffe67f8feb4,646447788,0,0x0,8
tick,0x7ffe67f8feb4,646463809,0,0x0,8
tick,0x7ffe67f8feb4,646479791,0,0x0,8
tick,0x7ffe67f8feb4,646495770,0,0x0,8
tick,0x7ffe67f8feb4,646511153,0,0x0,8
tick,0x7ffe67f8feb4,646526792,0,0x0,8
tick,0x7ffe67f8feb4,646542791,0,0x0,8
tick,0x7ffe67f8feb4,646558808,0,0x0,8
tick,0x7ffe67f8feb4,646574546,0,0x0,8
tick,0x7ffe67f8feb4,646589828,0,0x0,8
tick,0x7ffe67f8feb4,646605841,0,0x0,8
tick,0x7ffe67f8feb4,646621842,0,0x0,8
tick,0x7ffe67f8feb4,646637805,0,0x0,8
tick,0x7ffe67f8feb4,646653810,0,0x0,8
tick,0x7ffe67f8feb4,646669808,0,0x0,8
tick,0x7ffe67f8feb4,646685847,0,0x0,8
tick,0x7ffe67f8feb4,646701827,0,0x0,8
tick,0x7ffe67f8feb4,646717782,0,0x0,8
tick,0x7ffe67f8feb4,646733807,0,0x0,8
tick,0x7ffe67f8feb4,646749797,0,0x0,8
tick,0x7ffe67f8feb4,646765407,0,0x0,8
tick,0x7ffe67f8feb4,646780860,0,0x0,8
tick,0x7ffe67f8feb4,646796788,0,0x0,8
tick,0x7ffe67f8feb4,646812871,0,0x0,8
tick,0x7ffe67f8feb4,646828103,0,0x0,8
tick,0x7ffe67f8feb4,646844465,0,0x0,8
tick,0x7ffe67f8feb4,646859794,0,0x0,8
tick,0x7ffe67f8feb4,646875727,0,0x0,8
tick,0x7ffe67f8feb4,646891176,0,0x0,8
tick,0x7ffe67f8feb4,646907244,0,0x0,8
tick,0x7ffe67f8feb4,646922480,0,0x0,8
tick,0x7ffe67f8feb4,646938518,0,0x0,8
tick,0x7ffe67f8feb4,646953914,0,0x0,8
tick,0x7ffe67f8feb4,646969847,0,0x0,8
tick,0x7ffe67f8feb4,646986204,0,0x0,8
tick,0x7ffe67f8feb4,647001320,0,0x0,8
tick,0x7ffe67f8feb4,647017507,0,0x0,8
tick,0x7ffe67f8feb4,647032644,0,0x0,8
tick,0x7ffe67f8feb4,647047712,0,0x0,8
tick,0x7ffe67f8feb4,647063958,0,0x0,8
tick,0x7ffe67f8feb4,647078961,0,0x0,8
tick,0x7ffe67f8feb4,647094459,0,0x0,8
tick,0x7ffe67f8feb4,647109833,0,0x0,8
tick,0x7ffe67f8feb4,647125891,0,0x0,8
tick,0x7ffe67f8feb4,647141887,0,0x0,8
tick,0x7ffe67f8feb4,647156926,0,0x0,8
tick,0x7ffe67f8feb4,647172335,0,0x0,8
tick,0x7ffe67f8feb4,647188186,0,0x0,8
tick,0x7ffe67f8feb4,647203907,0,0x0,8
tick,0x7ffe67f8feb4,647219141,0,0x0,8
tick,0x7ffe67f8feb4,647234595,0,0x0,8
tick,0x7ffe67f8feb4,647249698,0,0x0,8
tick,0x7ffe67f8feb4,647264976,0,0x0,8
tick,0x7ffe67f8feb4,647280374,0,0x0,8
tick,0x7ffe67f8feb4,647295928,0,0x0,8
tick,0x7ffe67f8feb4,647311849,0,0x0,8
tick,0x7ffe67f8feb4,647327760,0,0x0,8
tick,0x7ffe67f8feb4,647343786,0,0x0,8
tick,0x7ffe67f8feb4,647359268,0,0x0,8
tick,0x7ffe67f8feb4,647374920,0,0x0,8
tick,0x7ffe67f8feb4,647390213,0,0x0,8
tick,0x7ffe67f8feb4,647406470,0,0x0,8
tick,0x7ffe67f8feb4,647422355,0,0x0,8
tick,0x7ffe67f8feb4,647437539,0,0x0,8
tick,0x7ffe67f8feb4,647453293,0,0x0,8
tick,0x7ffe67f8feb4,647468936,0,0x0,8
tick,0x7ffe67f8feb4,647485069,0,0x0,8
tick,0x7ffe67f8feb4,647500663,0,0x0,8
tick,0x7ffe67f8feb4,647516497,0,0x0,8
tick,0x7ffe67f8feb4,647531866,0,0x0,8
tick,0x7ffe67f8feb4,647547502,0,0x0,8
tick,0x7ffe67f8feb4,647562987,0,0x0,8
tick,0x7ffe67f8feb4,647578984,0,0x0,8
tick,0x7ffe67f8feb4,647594009,0,0x0,8
tick,0x7ffe67f8feb4,647610031,0,0x0,8
tick,0x7ffe67f8feb4,647625269,0,0x0,8
tick,0x7ffe67f8feb4,647640984,0,0x0,8
tick,0x7ffe67f8feb4,647656992,0,0x0,8
tick,0x7ffe67f8feb4,647672862,0,0x0,8
tick,0x7ffe67f8feb4,647688892,0,0x0,8
tick,0x7ffe67f8feb4,647704731,0,0x0,8
tick,0x7ffe67f8feb4,647719970,0,0x0,8
tick,0x7ffe67f8feb4,647735966,0,0x0,8
tick,0x7ffe67f8feb4,647751998,0,0x0,8
tick,0x7ffe67f8feb4,647767969,0,0x0,8
tick,0x7ffe67f8feb4,647783970,0,0x0,8
tick,0x7ffe67f8feb4,647799961,0,0x0,8
tick,0x7ffe67f8feb4,647815964,0,0x0,8
tick,0x7ffe67f8feb4,647831993,0,0x0,8
tick,0x7ffe67f8feb4,647847996,0,0x0,8
tick,0x7ffe67f8feb4,647863988,0,0x0,8
tick,0x7ffe67f8feb4,647880000,0,0x0,8
tick,0x7ffe67f8feb4,647895990,0,0x0,8
tick,0x7ffe67f8feb4,647911569,0,0x0,8
tick,0x7ffe67f8feb4,647927252,0,0x0,8
tick,0x7ffe67f8feb4,647942248,0,0x0,8
tick,0x7ffe67f8feb4,647958242,0,0x0,8
tick,0x7ffe67f8feb4,647974001,0,0x0,8
tick,0x7ffe67f8feb4,647990022,0,0x0,8
tick,0x7ffe67f8feb4,648006005,0,0x0,8
tick,0x7ffe67f8feb4,648022348,0,0x0,8
tick,0x7ffe67f8feb4,648038056,0,0x0,8
tick,0x7ffe67f8feb4,648053810,0,0x0,8
tick,0x7ffe67f8feb4,648069048,0,0x0,8
tick,0x7ffe67f8feb4,648085039,0,0x0,8
tick,0x7ffe67f8feb4,648100331,0,0x0,8
tick,0x7ffe67f8feb4,648116057,0,0x0,8
tick,0x7ffe67f8feb4,648132044,0,0x0,8
tick,0x7ffe67f8feb4,648148027,0,0x0,8
tick,0x7ffe67f8feb4,648164035,0,0x0,8
tick,0x7ffe67f8feb4,648180028,0,0x0,8
tick,0x7ffe67f8feb4,648196016,0,0x0,8
tick,0x7ffe67f8feb4,648211861,0,0x0,8
tick,0x7ffe67f8feb4,648227534,0,0x0,8
tick,0x7ffe67f8feb4,648243073,0,0x0,8
tick,0x7ffe67f8feb4,648258338,0,0x0,8
tick,0x7ffe67f8feb4,648273453,0,0x0,8
tick,0x7ffe67f8feb4,648288589,0,0x0,8
tick,0x7ffe67f8feb4,648304641,0,0x0,8
tick,0x7ffe67f8feb4,648320276,0,0x0,8
tick,0x7ffe67f8feb4,648335081,0,0x0,8
tick,0x7ffe67f8feb4,648350611,0,0x0,8
tick,0x7ffe67f8feb4,648365885,0,0x0,8
tick,0x7ffe67f8feb4,648381570,0,0x0,8
tick,0x7ffe67f8feb4,648397586,0,0x0,8
tick,0x7ffe67f8feb4,648413612,0,0x0,8
tick,0x7ffe67f8feb4,648429639,0,0x0,8
tick,0x7ffe67f8feb4,648445503,0,0x0,8
tick,0x7ffe67f8feb4,648461496,0,0x0,8
tick,0x7ffe67f8feb4,648477563,0,0x0,8
tick,0x7ffe67f8feb4,648492778,0,0x0,8
tick,0x7ffe67f8feb4,648508033,0,0x0,8
tick,0x7ffe67f8feb4,648523577,0,0x0,8
tick,0x7ffe67f8feb4,648539103,0,0x0,8
tick,0x7ffe67f8feb4,648554673,0,0x0,8
tick,0x7ffe67f8feb4,648570102,0,0x0,8
tick,0x7ffe67f8feb4,648586218,0,0x0,8
tick,0x7ffe67f8feb4,648601936,0,0x0,8
tick,0x7ffe67f8feb4,648617806,0,0x0,8
tick,0x7ffe67f8feb4,648633898,0,0x0,8
tick,0x7ffe67f8feb4,648649061,0,0x0,8
tick,0x7ffe67f8feb4,648664267,0,0x0,8
tick,0x7ffe67f8feb4,648680417,0,0x0,8
tick,0x7ffe67f8feb4,648695786,0,0x0,8
tick,0x7ffe67f8feb4,648710752,0,0x0,8
tick,0x7ffe67f8feb4,648726584,0,0x0,8
tick,0x7ffe67f8feb4,648741984,0,0x0,8
tick,0x7ffe67f8feb4,648757891,0,0x0,8
tick,0x7ffe67f8feb4,648773951,0,0x0,8
tick,0x7ffe67f8feb4,648790182,0,0x0,8
tick,0x7ffe67f8feb4,648805190,0,0x0,8
tick,0x7ffe67f8feb4,648820348,0,0x0,8
tick,0x7ffe67f8feb4,648836639,0,0x0,8
tick,0x7ffe67f8feb4,648851916,0,0x0,8
tick,0x7ffe67f8feb4,648868350,0,0x0,8
tick,0x7ffe67f8feb4,648884360,0,0x0,8
tick,0x7ffe67f8feb4,648899909,0,0x0,8
tick,0x7ffe67f8feb4,648915237,0,0x0,8
tick,0x7ffe67f8feb4,648930687,0,0x0,8
tick,0x7ffe67f8feb4,648945584,0,0x0,8
tick,0x7ffe67f8feb4,648961208,0,0x0,8
tick,0x7ffe67f8feb4,648976765,0,0x0,8
tick,0x7ffe67f8feb4,648992789,0,0x0,8
tick,0x7ffe67f8feb4,649007794,0,0x0,8
tick,0x7ffe67f8feb4,649022922,0,0x0,8
tick,0x7ffe67f8feb4,649038175,0,0x0,8
tick,0x7ffe67f8feb4,649054049,0,0x0,8
tick,0x7ffe67f8feb4,649069211,0,0x0,8
tick,0x7ffe67f8feb4,649084453,0,0x0,8
tick,0x7ffe67f8feb4,649099900,0,0x0,8
tick,0x7ffe67f8feb4,649115527,0,0x0,8
tick,0x7ffe67f8feb4,649130744,0,0x0,8
tick,0x7ffe67f8feb4,649146027,0,0x0,8
tick,0x7ffe67f8feb4,649161999,0,0x0,8
tick,0x7ffe67f8feb4,649178676,0,0x0,8
tick,0x7ffe67f8feb4,649194178,0,0x0,8
tick,0x7ffe67f8feb4,649208985,0,0x0,8
tick,0x7ffe67f8feb4,649224997,0,0x0,8
tick,0x7ffe67f8feb4,649241034,0,0x0,8
tick,0x7ffe67f8feb4,649257013,0,0x0,8
tick,0x7ffe67f8feb4,649272027,0,0x0,8
tick,0x7ffe67f8feb4,649288069,0,0x0,8
tick,0x7ffe67f8feb4,649303997,0,0x0,8
tick,0x7ffe67f8feb4,649320000,0,0x0,8
tick,0x7ffe67f8feb4,649336062,0,0x0,8
tick,0x7ffe67f8feb4,649352346,0,0x0,8
tick,0x7ffe67f8feb4,649368072,0,0x0,8
tick,0x7ffe67f8feb4,649384017,0,0x0,8
tick,0x7ffe67f8feb4,649400016,0,0x0,8
tick,0x7ffe67f8feb4,649416028,0,0x0,8
tick,0x7ffe67f8feb4,649432337,0,0x0,8
tick,0x7ffe67f8feb4,649448084,0,0x0,8
tick,0x7ffe67f8feb4,649464082,0,0x0,8
tick,0x7ffe67f8feb4,649480161,0,0x0,8
tick,0x7ffe67f8feb4,649496078,0,0x0,8
tick,0x7ffe67f8feb4,649512454,0,0x0,8
tick,0x7ffe67f8feb4,649528386,0,0x0,8
tick,0x7ffe67f8feb4,649543213,0,0x0,8
tick,0x7ffe67f8feb4,649559215,0,0x0,8
tick,0x7ffe67f8feb4,649574398,0,0x0,8
tick,0x7ffe67f8feb4,649589372,0,0x0,8
tick,0x7ffe67f8feb4,649605033,0,0x0,8
tick,0x7ffe67f8feb4,649620367,0,0x0,8
tick,0x7ffe67f8feb4,649635542,0,0x0,8
tick,0x7ffe67f8feb4,649651553,0,0x0,8
tick,0x7ffe67f8feb4,649666930,0,0x0,8
tick,0x7ffe67f8feb4,649682932,0,0x0,8
tick,0x7ffe67f8feb4,649698948,0,0x0,8
tick,0x7ffe67f8feb4,649714958,0,0x0,8
tick,0x7ffe67f8feb4,649730955,0,0x0,8
tick,0x7ffe67f8feb4,649747185,0,0x0,8
tick,0x7ffe67f8feb4,649763119,0,0x0,8
tick,0x7ffe67f8feb4,649779181,0,0x0,8
tick,0x7ffe67f8feb4,649794208,0,0x0,8
tick,0x7ffe67f8feb4,649810184,0,0x0,8
tick,0x7ffe67f8feb4,649825666,0,0x0,8
tick,0x7ffe67f8feb4,649841205,0,0x0,8
tick,0x7ffe67f8feb4,649857308,0,0x0,8
tick,0x7ffe67f8feb4,649873132,0,0x0,8
tick,0x7ffe67f8feb4,649889231,0,0x0,8
tick,0x7ffe67f8feb4,649905125,0,0x0,8
tick,0x7ffe67f8feb4,649921193,0,0x0,8
tick,0x7ffe67f8feb4,649937201,0,0x0,8
tick,0x7ffe67f8feb4,649953108,0,0x0,8
tick,0x7ffe67f8feb4,649968249,0,0x0,8
tick,0x7ffe67f8feb4,649984061,0,0x0,8
tick,0x7ffe67f8feb4,650000086,0,0x0,8
tick,0x7ffe67f8feb4,650016056,0,0x0,8
tick,0x7ffe67f8feb4,650031228,0,0x0,8
tick,0x7ffe67f8feb4,650047118,0,0x0,8
tick,0x7ffe67f8feb4,650062703,0,0x0,8
tick,0x7ffe67f8feb4,650078045,0,0x0,8
tick,0x7ffe67f8feb4,650093198,0,0x0,8
tick,0x7ffe67f8feb4,650109056,0,0x0,8
tick,0x7ffe67f8feb4,650124279,0,0x0,8
tick,0x7ffe67f8feb4,650140021,0,0x0,8
tick,0x7ffe67f8feb4,650156008,0,0x0,8
tick,0x7ffe67f8feb4,650171984,0,0x0,8
tick,0x7ffe67f8feb4,650188010,0,0x0,8
tick,0x7ffe67f8feb4,650203540,0,0x0,8
tick,0x7ffe67f8feb4,650219002,0,0x0,8
tick,0x7ffe67f8feb4,650235049,0,0x0,8
tick,0x7ffe67f8feb4,650250890,0,0x0,8
tick,0x7ffe67f8feb4,650266084,0,0x0,8
tick,0x7ffe67f8feb4,650281412,0,0x0,8
tick,0x7ffe67f8feb4,650297436,0,0x0,8
tick,0x7ffe67f8feb4,650313437,0,0x0,8
tick,0x7ffe67f8feb4,650329143,0,0x0,8
tick,0x7ffe67f8feb4,650345250,0,0x0,8
tick,0x7ffe67f8feb4,650360184,0,0x0,8
tick,0x7ffe67f8feb4,650376061,0,0x0,8
tick,0x7ffe67f8feb4,650391269,0,0x0,8
tick,0x7ffe67f8feb4,650406959,0,0x0,8
tick,0x7ffe67f8feb4,650423022,0,0x0,8
tick,0x7ffe67f8feb4,650438006,0,0x0,8
tick,0x7ffe67f8feb4,650453191,0,0x0,8
tick,0x7ffe67f8feb4,650468978,0,0x0,8
tick,0x7ffe67f8feb4,650485037,0,0x0,8
tick,0x7ffe67f8feb4,650500986,0,0x0,8
tick,0x7ffe67f8feb4,650517540,0,0x0,8
tick,0x7ffe67f8feb4,650532994,0,0x0,8
tick,0x7ffe67f8feb4,650549014,0,0x0,8
tick,0x7ffe67f8feb4,650565382,0,0x0,8
tick,0x7ffe67f8feb4,650581297,0,0x0,8
tick,0x7ffe67f8feb4,650597098,0,0x0,8
tick,0x7ffe67f8feb4,650613136,0,0x0,8
tick,0x7ffe67f8feb4,650629088,0,0x0,8
tick,0x7ffe67f8feb4,650645083,0,0x0,8
tick,0x7ffe67f8feb4,650661195,0,0x0,8
tick,0x7ffe67f8feb4,650675880,0,0x0,8
tick,0x7ffe67f8feb4,650691201,0,0x0,8
tick,0x7ffe67f8feb4,650706433,0,0x0,8
tick,0x7ffe67f8feb4,650721449,0,0x0,8
tick,0x7ffe67f8feb4,650736423,0,0x0,8
tick,0x7ffe67f8feb4,650752417,0,0x0,8
tick,0x7ffe67f8feb4,650768453,0,0x0,8
tick,0x7ffe67f8feb4,650784452,0,0x0,8
tick,0x7ffe67f8feb4,650800430,0,0x0,8
tick,0x7ffe67f8feb4,650816427,0,0x0,8
tick,0x7ffe67f8feb4,650832429,0,0x0,8
tick,0x7ffe67f8feb4,650848447,0,0x0,8
tick,0x7ffe67f8feb4,650864439,0,0x0,8
tick,0x7ffe67f8feb4,650880071,0,0x0,8
tick,0x7ffe67f8feb4,650895209,0,0x0,8
tick,0x7ffe67f8feb4,650911212,0,0x0,8
tick,0x7ffe67f8feb4,650926476,0,0x0,8
tick,0x7ffe67f8feb4,650942207,0,0x0,8
tick,0x7ffe67f8feb4,650957450,0,0x0,8
tick,0x7ffe67f8feb4,650973215,0,0x0,8
tick,0x7ffe67f8feb4,650989078,0,0x0,8
tick,0x7ffe67f8feb4,651004221,0,0x0,8
tick,0x7ffe67f8feb4,651020047,0,0x0,8
tick,0x7ffe67f8feb4,651035502,0,0x0,8
tick,0x7ffe67f8feb4,651051047,0,0x0,8
tick,0x7ffe67f8feb4,651067050,0,0x0,8
tick,0x7ffe67f8feb4,651082845,0,0x0,8
tick,0x7ffe67f8feb4,651098047,0,0x0,8
tick,0x7ffe67f8feb4,651114033,0,0x0,8
tick,0x7ffe67f8feb4,651129068,0,0x0,8
tick,0x7ffe67f8feb4,651144476,0,0x0,8
tick,0x7ffe67f8feb4,651160458,0,0x0,8
tick,0x7ffe67f8feb4,651176477,0,0x0,8
tick,0x7ffe67f8feb4,651192479,0,0x0,8
tick,0x7ffe67f8feb4,651208046,0,0x0,8
tick,0x7ffe67f8feb4,651224114,0,0x0,8
tick,0x7ffe67f8feb4,651239149,0,0x0,8
tick,0x7ffe67f8feb4,651254362,0,0x0,8
tick,0x7ffe67f8feb4,651270088,0,0x0,8
tick,0x7ffe67f8feb4,651284916,0,0x0,8
tick,0x7ffe67f8feb4,651300218,0,0x0,8
tick,0x7ffe67f8feb4,651315268,0,0x0,8
tick,0x7ffe67f8feb4,651330992,0,0x0,8
tick,0x7ffe67f8feb4,651346441,0,0x0,8
tick,0x7ffe67f8feb4,651361453,0,0x0,8
tick,0x7ffe67f8feb4,651377656,0,0x0,8
tick,0x7ffe67f8feb4,651392791,0,0x0,8
tick,0x7ffe67f8feb4,651407890,0,0x0,8
tick,0x7ffe67f8feb4,651423325,0,0x0,8
tick,0x7ffe67f8feb4,651438635,0,0x0,8
tick,0x7ffe67f8feb4,651454606,0,0x0,8
tick,0x7ffe67f8feb4,651469754,0,0x0,8
tick,0x7ffe67f8feb4,651485076,0,0x0,8
tick,0x7ffe67f8feb4,651500203,0,0x0,8
tick,0x7ffe67f8feb4,651516206,0,0x0,8
tick,0x7ffe67f8feb4,651532220,0,0x0,8
tick,0x7ffe67f8feb4,651548223,0,0x0,8
tick,0x7ffe67f8feb4,651564220,0,0x0,8
tick,0x7ffe67f8feb4,651579778,0,0x0,8
tick,0x7ffe67f8feb4,651595598,0,0x0,8
tick,0x7ffe67f8feb4,651611090,0,0x0,8
tick,0x7ffe67f8feb4,651626593,0,0x0,8
tick,0x7ffe67f8feb4,651641867,0,0x0,8
tick,0x7ffe67f8feb4,651657096,0,0x0,8
tick,0x7ffe67f8feb4,651672532,0,0x0,8
tick,0x7ffe67f8feb4,651687892,0,0x0,8
tick,0x7ffe67f8feb4,651704320,0,0x0,8
tick,0x7ffe67f8feb4,651719591,0,0x0,8
tick,0x7ffe67f8feb4,651735623,0,0x0,8
tick,0x7ffe67f8feb4,651751606,0,0x0,8
tick,0x7ffe67f8feb4,651767583,0,0x0,8
tick,0x7ffe67f8feb4,651783621,0,0x0,8
tick,0x7ffe67f8feb4,651799614,0,0x0,8
tick,0x7ffe67f8feb4,651815600,0,0x0,8
tick,0x7ffe67f8feb4,651831782,0,0x0,8
tick,0x7ffe67f8feb4,651847723,0,0x0,8
tick,0x7ffe67f8feb4,651863661,0,0x0,8
tick,0x7ffe67f8feb4,651878757,0,0x0,8
tick,0x7ffe67f8feb4,651894345,0,0x0,8
tick,0x7ffe67f8feb4,651909617,0,0x0,8
tick,0x7ffe67f8feb4,651924818,0,0x0,8
tick,0x7ffe67f8feb4,651940824,0,0x0,8
tick,0x7ffe67f8feb4,651956596,0,0x0,8
tick,0x7ffe67f8feb4,651972542,0,0x0,8
tick,0x7ffe67f8feb4,651988551,0,0x0,8
tick,0x7ffe67f8feb4,652004631,0,0x0,8
tick,0x7ffe67f8feb4,652020637,0,0x0,8
tick,0x7ffe67f8feb4,652036634,0,0x0,8
tick,0x7ffe67f8feb4,652052015,0,0x0,8
tick,0x7ffe67f8feb4,652067642,0,0x0,8
tick,0x7ffe67f8feb4,652082965,0,0x0,8
tick,0x7ffe67f8feb4,652098671,0,0x0,8
tick,0x7ffe67f8feb4,652114697,0,0x0,8
tick,0x7ffe67f8feb4,652130627,0,0x0,8
tick,0x7ffe67f8feb4,652146381,0,0x0,8
tick,0x7ffe67f8feb4,652162503,0,0x0,8
tick,0x7ffe67f8feb4,652178372,0,0x0,8
tick,0x7ffe67f8feb4,652194368,0,0x0,8
tick,0x7ffe67f8feb4,652210393,0,0x0,8
tick,0x7ffe67f8feb4,652225642,0,0x0,8
tick,0x7ffe67f8feb4,652240639,0,0x0,8
tick,0x7ffe67f8feb4,652256739,0,0x0,8
tick,0x7ffe67f8feb4,652271647,0,0x0,8
tick,0x7ffe67f8feb4,652287773,0,0x0,8
tick,0x7ffe67f8feb4,652302657,0,0x0,8
tick,0x7ffe67f8feb4,652317652,0,0x0,8
tick,0x7ffe67f8feb4,652333655,0,0x0,8
tick,0x7ffe67f8feb4,652349668,0,0x0,8
tick,0x7ffe67f8feb4,652365658,0,0x0,8
tick,0x7ffe67f8feb4,652381662,0,0x0,8
tick,0x7ffe67f8feb4,652397683,0,0x0,8
tick,0x7ffe67f8feb4,652413743,0,0x0,8
tick,0x7ffe67f8feb4,652429665,0,0x0,8
tick,0x7ffe67f8feb4,652445657,0,0x0,8
tick,0x7ffe67f8feb4,652461655,0,0x0,8
tick,0x7ffe67f8feb4,652477670,0,0x0,8
tick,0x7ffe67f8feb4,652493700,0,0x0,8
tick,0x7ffe67f8feb4,652509712,0,0x0,8
tick,0x7ffe67f8feb4,652525301,0,0x0,8
tick,0x7ffe67f8feb4,652540500,0,0x0,8
tick,0x7ffe67f8feb4,652556079,0,0x0,8
tick,0x7ffe67f8feb4,652572179,0,0x0,8
tick,0x7ffe67f8feb4,652588183,0,0x0,8
tick,0x7ffe67f8feb4,652603549,0,0x0,8
tick,0x7ffe67f8feb4,652619523,0,0x0,8
tick,0x7ffe67f8feb4,652635321,0,0x0,8
tick,0x7ffe67f8feb4,652651264,0,0x0,8
tick,0x7ffe67f8feb4,652667004,0,0x0,8
tick,0x7ffe67f8feb4,652682393,0,0x0,8
tick,0x7ffe67f8feb4,652698046,0,0x0,8
tick,0x7ffe67f8feb4,652713476,0,0x0,8
tick,0x7ffe67f8feb4,652729639,0,0x0,8
tick,0x7ffe67f8feb4,652745326,0,0x0,8
tick,0x7ffe67f8feb4,652760499,0,0x0,8
tick,0x7ffe67f8feb4,652776301,0,0x0,8
tick,0x7ffe67f8feb4,652791688,0,0x0,8
tick,0x7ffe67f8feb4,652807688,0,0x0,8
tick,0x7ffe67f8feb4,652823646,0,0x0,8
tick,0x7ffe67f8feb4,652839595,0,0x0,8
tick,0x7ffe67f8feb4,652855512,0,0x0,8
tick,0x7ffe67f8feb4,652871516,0,0x0,8
tick,0x7ffe67f8feb4,652887530,0,0x0,8
tick,0x7ffe67f8feb4,652903406,0,0x0,8
tick,0x7ffe67f8feb4,652919218,0,0x0,8
tick,0x7ffe67f8feb4,652934867,0,0x0,8
tick,0x7ffe67f8feb4,652950647,0,0x0,8
tick,0x7ffe67f8feb4,652966497,0,0x0,8
tick,0x7ffe67f8feb4,652982503,0,0x0,8
tick,0x7ffe67f8feb4,652997681,0,0x0,8
tick,0x7ffe67f8feb4,653013061,0,0x0,8
tick,0x7ffe67f8feb4,653028341,0,0x0,8
tick,0x7ffe67f8feb4,653043734,0,0x0,8
tick,0x7ffe67f8feb4,653058755,0,0x0,8
tick,0x7ffe67f8feb4,653074016,0,0x0,8
tick,0x7ffe67f8feb4,653089126,0,0x0,8
tick,0x7ffe67f8feb4,653104928,0,0x0,8
tick,0x7ffe67f8feb4,653120808,0,0x0,8
tick,0x7ffe67f8feb4,653136807,0,0x0,8
tick,0x7ffe67f8feb4,653152805,0,0x0,8
tick,0x7ffe67f8feb4,653168792,0,0x0,8
tick,0x7ffe67f8feb4,653183803,0,0x0,8
tick,0x7ffe67f8feb4,653199799,0,0x0,8
tick,0x7ffe67f8feb4,653215807,0,0x0,8
tick,0x7ffe67f8feb4,653230804,0,0x0,8
tick,0x7ffe67f8feb4,653245942,0,0x0,8
tick,0x7ffe67f8feb4,653261112,0,0x0,8
tick,0x7ffe67f8feb4,653277047,0,0x0,8
tick,0x7ffe67f8feb4,653293115,0,0x0,8
tick,0x7ffe67f8feb4,653308633,0,0x0,8
tick,0x7ffe67f8feb4,653324820,0,0x0,8
tick,0x7ffe67f8feb4,653340921,0,0x0,8
tick,0x7ffe67f8feb4,653356919,0,0x0,8
tick,0x7ffe67f8feb4,653372616,0,0x0,8
tick,0x7ffe67f8feb4,653388001,0,0x0,8
tick,0x7ffe67f8feb4,653403648,0,0x0,8
tick,0x7ffe67f8feb4,653418719,0,0x0,8
tick,0x7ffe67f8feb4,653434006,0,0x0,8
tick,0x7ffe67f8feb4,653448607,0,0x0,8
tick,0x7ffe67f8feb4,653464503,0,0x0,8
tick,0x7ffe67f8feb4,653480277,0,0x0,8
tick,0x7ffe67f8feb4,653495799,0,0x0,8
tick,0x7ffe67f8feb4,653511215,0,0x0,8
tick,0x7ffe67f8feb4,653527177,0,0x0,8
tick,0x7ffe67f8feb4,653542229,0,0x0,8
tick,0x7ffe67f8feb4,653558034,0,0x0,8
tick,0x7ffe67f8feb4,653573802,0,0x0,8
tick,0x7ffe67f8feb4,653589739,0,0x0,8
tick,0x7ffe67f8feb4,653605078,0,0x0,8
tick,0x7ffe67f8feb4,653621304,0,0x0,8
tick,0x7ffe67f8feb4,653636396,0,0x0,8
tick,0x7ffe67f8feb4,653652433,0,0x0,8
tick,0x7ffe67f8feb4,653668404,0,0x0,8
tick,0x7ffe67f8feb4,653684040,0,0x0,8
tick,0x7ffe67f8feb4,653699972,0,0x0,8
tick,0x7ffe67f8feb4,653715585,0,0x0,8
tick,0x7ffe67f8feb4,653730886,0,0x0,8
tick,0x7ffe67f8feb4,653746490,0,0x0,8
tick,0x7ffe67f8feb4,653762363,0,0x0,8
tick,0x7ffe67f8feb4,653777556,0,0x0,8
tick,0x7ffe67f8feb4,653793016,0,0x0,8
tick,0x7ffe67f8feb4,653808365,0,0x0,8
tick,0x7ffe67f8feb4,653823773,0,0x0,8
tick,0x7ffe67f8feb4,653838927,0,0x0,8
tick,0x7ffe67f8feb4,653854137,0,0x0,8
tick,0x7ffe67f8feb4,653870316,0,0x0,8
tick,0x7ffe67f8feb4,653886178,0,0x0,8
tick,0x7ffe67f8feb4,653901967,0,0x0,8
tick,0x7ffe67f8feb4,653917203,0,0x0,8
tick,0x7ffe67f8feb4,653933278,0,0x0,8
tick,0x7ffe67f8feb4,653948802,0,0x0,8
tick,0x7ffe67f8feb4,653964467,0,0x0,8
tick,0x7ffe67f8feb4,653979962,0,0x0,8
tick,0x7ffe67f8feb4,653994980,0,0x0,8
tick,0x7ffe67f8feb4,654010192,0,0x0,8
tick,0x7ffe67f8feb4,654025667,0,0x0,8
tick,0x7ffe67f8feb4,654041507,0,0x0,8
tick,0x7ffe67f8feb4,654057168,0,0x0,8
tick,0x7ffe67f8feb4,654073107,0,0x0,8
tick,0x7ffe67f8feb4,654088661,0,0x0,8
tick,0x7ffe67f8feb4,654104199,0,0x0,8
tick,0x7ffe67f8feb4,654120051,0,0x0,8
tick,0x7ffe67f8feb4,654135878,0,0x0,8
tick,0x7ffe67f8feb4,654150865,0,0x0,8
tick,0x7ffe67f8feb4,654166836,0,0x0,8
tick,0x7ffe67f8feb4,654182834,0,0x0,8
tick,0x7ffe67f8feb4,654198801,0,0x0,8
tick,0x7ffe67f8feb4,654214798,0,0x0,8
tick,0x7ffe67f8feb4,654230381,0,0x0,8
tick,0x7ffe67f8feb4,654245571,0,0x0,8
tick,0x7ffe67f8feb4,654261106,0,0x0,8
tick,0x7ffe67f8feb4,654276598,0,0x0,8
tick,0x7ffe67f8feb4,654291810,0,0x0,8
tick,0x7ffe67f8feb4,654307675,0,0x0,8
tick,0x7ffe67f8feb4,654323577,0,0x0,8
tick,0x7ffe67f8feb4,654338958,0,0x0,8
tick,0x7ffe67f8feb4,654354732,0,0x0,8
tick,0x7ffe67f8feb4,654369876,0,0x0,8
tick,0x7ffe67f8feb4,654386021,0,0x0,8
tick,0x7ffe67f8feb4,654401861,0,0x0,8
tick,0x7ffe67f8feb4,654418025,0,0x0,8
tick,0x7ffe67f8feb4,654433397,0,0x0,8
tick,0x7ffe67f8feb4,654448939,0,0x0,8
tick,0x7ffe67f8feb4,654464550,0,0x0,8
tick,0x7ffe67f8feb4,654480078,0,0x0,8
tick,0x7ffe67f8feb4,654494984,0,0x0,8
tick,0x7ffe67f8feb4,654510714,0,0x0,8
tick,0x7ffe67f8feb4,654526165,0,0x0,8
tick,0x7ffe67f8feb4,654541781,0,0x0,8
tick,0x7ffe67f8feb4,654557955,0,0x0,8
tick,0x7ffe67f8feb4,654573573,0,0x0,8
tick,0x7ffe67f8feb4,654589319,0,0x0,8
tick,0x7ffe67f8feb4,654605090,0,0x0,8
tick,0x7ffe67f8feb4,654621033,0,0x0,8
tick,0x7ffe67f8feb4,654637108,0,0x0,8
tick,0x7ffe67f8feb4,654653522,0,0x0,8
tick,0x7ffe67f8feb4,654669186,0,0x0,8
tick,0x7ffe67f8feb4,654684912,0,0x0,8
tick,0x7ffe67f8feb4,654700906,0,0x0,8
tick,0x7ffe67f8feb4,654716529,0,0x0,8
tick,0x7ffe67f8feb4,654732305,0,0x0,8
tick,0x7ffe67f8feb4,654747790,0,0x0,8
tick,0x7ffe67f8feb4,654763220,0,0x0,8
tick,0x7ffe67f8feb4,654778582,0,0x0,8
tick,0x7ffe67f8feb4,654794126,0,0x0,8
tick,0x7ffe67f8feb4,654809642,0,0x0,8
tick,0x7ffe67f8feb4,654825411,0,0x0,8
tick,0x7ffe67f8feb4,654840415,0,0x0,8
tick,0x7ffe67f8feb4,654856475,0,0x0,8
tick,0x7ffe67f8feb4,654871838,0,0x0,8
tick,0x7ffe67f8feb4,654887286,0,0x0,8
tick,0x7ffe67f8feb4,654902597,0,0x0,8
tick,0x7ffe67f8feb4,654918640,0,0x0,8
tick,0x7ffe67f8feb4,654934655,0,0x0,8
tick,0x7ffe67f8feb4,654950101,0,0x0,8
tick,0x7ffe67f8feb4,654966179,0,0x0,8
tick,0x7ffe67f8feb4,654982004,0,0x0,8
tick,0x7ffe67f8feb4,654997917,0,0x0,8
tick,0x7ffe67f8feb4,655013024,0,0x0,8
tick,0x7ffe67f8feb4,655028916,0,0x0,8
tick,0x7ffe67f8feb4,655044381,0,0x0,8
tick,0x7ffe67f8feb4,655059792,0,0x0,8
tick,0x7ffe67f8feb4,655075233,0,0x0,8
tick,0x7ffe67f8feb4,655091434,0,0x0,8
tick,0x7ffe67f8feb4,655105787,0,0x0,8
tick,0x7ffe67f8feb4,655120916,0,0x0,8
tick,0x7ffe67f8feb4,655136949,0,0x0,8
tick,0x7ffe67f8feb4,655152940,0,0x0,8
tick,0x7ffe67f8feb4,655168131,0,0x0,8
tick,0x7ffe67f8feb4,655184141,0,0x0,8
tick,0x7ffe67f8feb4,655200101,0,0x0,8
tick,0x7ffe67f8feb4,655216104,0,0x0,8
tick,0x7ffe67f8feb4,655231140,0,0x0,8
tick,0x7ffe67f8feb4,655247173,0,0x0,8
tick,0x7ffe67f8feb4,655262321,0,0x0,8
tick,0x7ffe67f8feb4,655278068,0,0x0,8
tick,0x7ffe67f8feb4,655294154,0,0x0,8
tick,0x7ffe67f8feb4,655309456,0,0x0,8
tick,0x7ffe67f8feb4,655325054,0,0x0,8
tick,0x7ffe67f8feb4,655340194,0,0x0,8
tick,0x7ffe67f8feb4,655356151,0,0x0,8
tick,0x7ffe67f8feb4,655371712,0,0x0,8
tick,0x7ffe67f8feb4,655387088,0,0x0,8
tick,0x7ffe67f8feb4,655403108,0,0x0,8
tick,0x7ffe67f8feb4,655419092,0,0x0,8
tick,0x7ffe67f8feb4,655435128,0,0x0,8
tick,0x7ffe67f8feb4,655450520,0,0x0,8
tick,0x7ffe67f8feb4,655465862,0,0x0,8
tick,0x7ffe67f8feb4,655481528,0,0x0,8
tick,0x7ffe67f8feb4,655497145,0,0x0,8
tick,0x7ffe67f8feb4,655512608,0,0x0,8
tick,0x7ffe67f8feb4,655527968,0,0x0,8
tick,0x7ffe67f8feb4,655543474,0,0x0,8
tick,0x7ffe67f8feb4,655558546,0,0x0,8
tick,0x7ffe67f8feb4,655574813,0,0x0,8
tick,0x7ffe67f8feb4,655589765,0,0x0,8
tick,0x7ffe67f8feb4,655605339,0,0x0,8
tick,0x7ffe67f8feb4,655620771,0,0x0,8
tick,0x7ffe67f8feb4,655636025,0,0x0,8
tick,0x7ffe67f8feb4,655652033,0,0x0,8
tick,0x7ffe67f8feb4,655667856,0,0x0,8
tick,0x7ffe67f8feb4,655683636,0,0x0,8
tick,0x7ffe67f8feb4,655698701,0,0x0,8
tick,0x7ffe67f8feb4,655714447,0,0x0,8
tick,0x7ffe67f8feb4,655730031,0,0x0,8
tick,0x7ffe67f8feb4,655745334,0,0x0,8
tick,0x7ffe67f8feb4,655760526,0,0x0,8
tick,0x7ffe67f8feb4,655776733,0,0x0,8
tick,0x7ffe67f8feb4,655791974,0,0x0,8
tick,0x7ffe67f8feb4,655807813,0,0x0,8
tick,0x7ffe67f8feb4,655823613,0,0x0,8
tick,0x7ffe67f8feb4,655838864,0,0x0,8
tick,0x7ffe67f8feb4,655854525,0,0x0,8
tick,0x7ffe67f8feb4,655870612,0,0x0,8
tick,0x7ffe67f8feb4,655885737,0,0x0,8
tick,0x7ffe67f8feb4,655901143,0,0x0,8
tick,0x7ffe67f8feb4,655917025,0,0x0,8
tick,0x7ffe67f8feb4,655932319,0,0x0,8
tick,0x7ffe67f8feb4,655947611,0,0x0,8
tick,0x7ffe67f8feb4,655962595,0,0x0,8
tick,0x7ffe67f8feb4,655978604,0,0x0,8
tick,0x7ffe67f8feb4,655994021,0,0x0,8
tick,0x7ffe67f8feb4,656009858,0,0x0,8
tick,0x7ffe67f8feb4,656025159,0,0x0,8
tick,0x7ffe67f8feb4,656041866,0,0x0,8
tick,0x7ffe67f8feb4,656057147,0,0x0,8
tick,0x7ffe67f8feb4,656072568,0,0x0,8
tick,0x7ffe67f8feb4,656088142,0,0x0,8
tick,0x7ffe67f8feb4,656104379,0,0x0,8
tick,0x7ffe67f8feb4,656120195,0,0x0,8
tick,0x7ffe67f8feb4,656136205,0,0x0,8
tick,0x7ffe67f8feb4,656152264,0,0x0,8
tick,0x7ffe67f8feb4,656168205,0,0x0,8
tick,0x7ffe67f8feb4,656184144,0,0x0,8
tick,0x7ffe67f8feb4,656200152,0,0x0,8
tick,0x7ffe67f8feb4,656216144,0,0x0,8
tick,0x7ffe67f8feb4,656232231,0,0x0,8
tick,0x7ffe67f8feb4,656248229,0,0x0,8
tick,0x7ffe67f8feb4,656264307,0,0x0,8
tick,0x7ffe67f8feb4,656279560,0,0x0,8
tick,0x7ffe67f8feb4,656295257,0,0x0,8
tick,0x7ffe67f8feb4,656310703,0,0x0,8
tick,0x7ffe67f8feb4,656326843,0,0x0,8
tick,0x7ffe67f8feb4,656342189,0,0x0,8
tick,0x7ffe67f8feb4,656357454,0,0x0,8
tick,0x7ffe67f8feb4,656373396,0,0x0,8
tick,0x7ffe67f8feb4,656388635,0,0x0,8
tick,0x7ffe67f8feb4,656403737,0,0x0,8
tick,0x7ffe67f8feb4,656419117,0,0x0,8
tick,0x7ffe67f8feb4,656434829,0,0x0,8
tick,0x7ffe67f8feb4,656450263,0,0x0,8
tick,0x7ffe67f8feb4,656465330,0,0x0,8
tick,0x7ffe67f8feb4,656481324,0,0x0,8
tick,0x7ffe67f8feb4,656497478,0,0x0,8
tick,0x7ffe67f8feb4,656513235,0,0x0,8
tick,0x7ffe67f8feb4,656528832,0,0x0,8
tick,0x7ffe67f8feb4,656545032,0,0x0,8
tick,0x7ffe67f8feb4,656561006,0,0x0,8
tick,0x7ffe67f8feb4,656577008,0,0x0,8
tick,0x7ffe67f8feb4,656593010,0,0x0,8
tick,0x7ffe67f8feb4,656608952,0,0x0,8
tick,0x7ffe67f8feb4,656624308,0,0x0,8
tick,0x7ffe67f8feb4,656640007,0,0x0,8
tick,0x7ffe67f8feb4,656656253,0,0x0,8
tick,0x7ffe67f8feb4,656672387,0,0x0,8
tick,0x7ffe67f8feb4,656687395,0,0x0,8
tick,0x7ffe67f8feb4,656703249,0,0x0,8
tick,0x7ffe67f8feb4,656719303,0,0x0,8
tick,0x7ffe67f8feb4,656735337,0,0x0,8
tick,0x7ffe67f8feb4,656750902,0,0x0,8
tick,0x7ffe67f8feb4,656766463,0,0x0,8
tick,0x7ffe67f8feb4,656782018,0,0x0,8
tick,0x7ffe67f8feb4,656796917,0,0x0,8
tick,0x7ffe67f8feb4,656812354,0,0x0,8
tick,0x7ffe67f8feb4,656827821,0,0x0,8
tick,0x7ffe67f8feb4,656844234,0,0x0,8
tick,0x7ffe67f8feb4,656859959,0,0x0,8
tick,0x7ffe67f8feb4,656875247,0,0x0,8
tick,0x7ffe67f8feb4,656890354,0,0x0,8
tick,0x7ffe67f8feb4,656905966,0,0x0,8
tick,0x7ffe67f8feb4,656921614,0,0x0,8
tick,0x7ffe67f8feb4,656937593,0,0x0,8
tick,0x7ffe67f8feb4,656953586,0,0x0,8
tick,0x7ffe67f8feb4,656969617,0,0x0,8
tick,0x7ffe67f8feb4,656985222,0,0x0,8
tick,0x7ffe67f8feb4,657000469,0,0x0,8
tick,0x7ffe67f8feb4,657016374,0,0x0,8
tick,0x7ffe67f8feb4,657031984,0,0x0,8
tick,0x7ffe67f8feb4,657047052,0,0x0,8
tick,0x7ffe67f8feb4,657062746,0,0x0,8
tick,0x7ffe67f8feb4,657077807,0,0x0,8
tick,0x7ffe67f8feb4,657093970,0,0x0,8
tick,0x7ffe67f8feb4,657109883,0,0x0,8
tick,0x7ffe67f8feb4,657125889,0,0x0,8
tick,0x7ffe67f8feb4,657141232,0,0x0,8
tick,0x7ffe67f8feb4,657156972,0,0x0,8
tick,0x7ffe67f8feb4,657172519,0,0x0,8
tick,0x7ffe67f8feb4,657188512,0,0x0,8
tick,0x7ffe67f8feb4,657204520,0,0x0,8
tick,0x7ffe67f8feb4,657220498,0,0x0,8
tick,0x7ffe67f8feb4,657236571,0,0x0,8
tick,0x7ffe67f8feb4,657252643,0,0x0,8
tick,0x7ffe67f8feb4,657268532,0,0x0,8
tick,0x7ffe67f8feb4,657283689,0,0x0,8
tick,0x7ffe67f8feb4,657299565,0,0x0,8
tick,0x7ffe67f8feb4,657314701,0,0x0,8
tick,0x7ffe67f8feb4,657330639,0,0x0,8
tick,0x7ffe67f8feb4,657346050,0,0x0,8
tick,0x7ffe67f8feb4,657361399,0,0x0,8
tick,0x7ffe67f8feb4,657377110,0,0x0,8
tick,0x7ffe67f8feb4,657392264,0,0x0,8
tick,0x7ffe67f8feb4,657407513,0,0x0,8
tick,0x7ffe67f8feb4,657423527,0,0x0,8
tick,0x7ffe67f8feb4,657438783,0,0x0,8
tick,0x7ffe67f8feb4,657454811,0,0x0,8
tick,0x7ffe67f8feb4,657470827,0,0x0,8
tick,0x7ffe67f8feb4,657486830,0,0x0,8
tick,0x7ffe67f8feb4,657502370,0,0x0,8
tick,0x7ffe67f8feb4,657517953,0,0x0,8
tick,0x7ffe67f8feb4,657532663,0,0x0,8
tick,0x7ffe67f8feb4,657547708,0,0x0,8
tick,0x7ffe67f8feb4,657563700,0,0x0,8
tick,0x7ffe67f8feb4,657579507,0,0x0,8
tick,0x7ffe67f8feb4,657595354,0,0x0,8
tick,0x7ffe67f8feb4,657610484,0,0x0,8
tick,0x7ffe67f8feb4,657626266,0,0x0,8
tick,0x7ffe67f8feb4,657641449,0,0x0,8
tick,0x7ffe67f8feb4,657656430,0,0x0,8
tick,0x7ffe67f8feb4,657671627,0,0x0,8
tick,0x7ffe67f8feb4,657687388,0,0x0,8
tick,0x7ffe67f8feb4,657703171,0,0x0,8
tick,0x7ffe67f8feb4,657718778,0,0x0,8
tick,0x7ffe67f8feb4,657734367,0,0x0,8
tick,0x7ffe67f8feb4,657749595,0,0x0,8
tick,0x7ffe67f8feb4,657764924,0,0x0,8
tick,0x7ffe67f8feb4,657780227,0,0x0,8
tick,0x7ffe67f8feb4,657796010,0,0x0,8
tick,0x7ffe67f8feb4,657811631,0,0x0,8
tick,0x7ffe67f8feb4,657827356,0,0x0,8
tick,0x7ffe67f8feb4,657843000,0,0x0,8
tick,0x7ffe67f8feb4,657858329,0,0x0,8
tick,0x7ffe67f8feb4,657873967,0,0x0,8
tick,0x7ffe67f8feb4,657889702,0,0x0,8
tick,0x7ffe67f8feb4,657905650,0,0x0,8
tick,0x7ffe67f8feb4,657920971,0,0x0,8
tick,0x7ffe67f8feb4,657936609,0,0x0,8
tick,0x7ffe67f8feb4,657951920,0,0x0,8
tick,0x7ffe67f8feb4,657967284,0,0x0,8
tick,0x7ffe67f8feb4,657982419,0,0x0,8
tick,0x7ffe67f8feb4,657998666,0,0x0,8
tick,0x7ffe67f8feb4,658014675,0,0x0,8
tick,0x7ffe67f8feb4,658030536,0,0x0,8
tick,0x7ffe67f8feb4,658045713,0,0x0,8
tick,0x7ffe67f8feb4,658061217,0,0x0,8
tick,0x7ffe67f8feb4,658077002,0,0x0,8
tick,0x7ffe67f8feb4,658092393,0,0x0,8
tick,0x7ffe67f8feb4,658107540,0,0x0,8
tick,0x7ffe67f8feb4,658123235,0,0x0,8
tick,0x7ffe67f8feb4,658139280,0,0x0,8
tick,0x7ffe67f8feb4,658154680,0,0x0,8
tick,0x7ffe67f8feb4,658170301,0,0x0,8
tick,0x7ffe67f8feb4,658185718,0,0x0,8
tick,0x7ffe67f8feb4,658201851,0,0x0,8
tick,0x7ffe67f8feb4,658216623,0,0x0,8
tick,0x7ffe67f8feb4,658232638,0,0x0,8
tick,0x7ffe67f8feb4,658248627,0,0x0,8
tick,0x7ffe67f8feb4,658264636,0,0x0,8
tick,0x7ffe67f8feb4,658279658,0,0x0,8
tick,0x7ffe67f8feb4,658295724,0,0x0,8
tick,0x7ffe67f8feb4,658311318,0,0x0,8
tick,0x7ffe67f8feb4,658327229,0,0x0,8
tick,0x7ffe67f8feb4,658343256,0,0x0,8
tick,0x7ffe67f8feb4,658358389,0,0x0,8
tick,0x7ffe67f8feb4,658374631,0,0x0,8
tick,0x7ffe67f8feb4,658389894,0,0x0,8
tick,0x7ffe67f8feb4,658405808,0,0x0,8
tick,0x7ffe67f8feb4,658421805,0,0x0,8
tick,0x7ffe67f8feb4,658438330,0,0x0,8
tick,0x7ffe67f8feb4,658453835,0,0x0,8
tick,0x7ffe67f8feb4,658469074,0,0x0,8
tick,0x7ffe67f8feb4,658483940,0,0x0,8
tick,0x7ffe67f8feb4,658499175,0,0x0,8
tick,0x7ffe67f8feb4,658514649,0,0x0,8
tick,0x7ffe67f8feb4,658529807,0,0x0,8
tick,0x7ffe67f8feb4,658545174,0,0x0,8
tick,0x7ffe67f8feb4,658560771,0,0x0,8
tick,0x7ffe67f8feb4,658576507,0,0x0,8
tick,0x7ffe67f8feb4,658591675,0,0x0,8
tick,0x7ffe67f8feb4,658606845,0,0x0,8
tick,0x7ffe67f8feb4,658622735,0,0x0,8
tick,0x7ffe67f8feb4,658638221,0,0x0,8
tick,0x7ffe67f8feb4,658653552,0,0x0,8
tick,0x7ffe67f8feb4,658668554,0,0x0,8
tick,0x7ffe67f8feb4,658684044,0,0x0,8
tick,0x7ffe67f8feb4,658699665,0,0x0,8
tick,0x7ffe67f8feb4,658714916,0,0x0,8
tick,0x7ffe67f8feb4,658730590,0,0x0,8
tick,0x7ffe67f8feb4,658746502,0,0x0,8
tick,0x7ffe67f8feb4,658761633,0,0x0,8
tick,0x7ffe67f8feb4,658777644,0,0x0,8
tick,0x7ffe67f8feb4,658793639,0,0x0,8
tick,0x7ffe67f8feb4,658809640,0,0x0,8
tick,0x7ffe67f8feb4,658824665,0,0x0,8
tick,0x7ffe67f8feb4,658840707,0,0x0,8
tick,0x7ffe67f8feb4,658856738,0,0x0,8
tick,0x7ffe67f8feb4,658872716,0,0x0,8
tick,0x7ffe67f8feb4,658888035,0,0x0,8
tick,0x7ffe67f8feb4,658904412,0,0x0,8
tick,0x7ffe67f8feb4,658918804,0,0x0,8
tick,0x7ffe67f8feb4,658934681,0,0x0,8
tick,0x7ffe67f8feb4,658950696,0,0x0,8
tick,0x7ffe67f8feb4,658966479,0,0x0,8
tick,0x7ffe67f8feb4,658981692,0,0x0,8
tick,0x7ffe67f8feb4,658997681,0,0x0,8
tick,0x7ffe67f8feb4,659012847,0,0x0,8
tick,0x7ffe67f8feb4,659028683,0,0x0,8
tick,0x7ffe67f8feb4,659044375,0,0x0,8
tick,0x7ffe67f8feb4,659059688,0,0x0,8
tick,0x7ffe67f8feb4,659075704,0,0x0,8
tick,0x7ffe67f8feb4,659091739,0,0x0,8
tick,0x7ffe67f8feb4,659107747,0,0x0,8
tick,0x7ffe67f8feb4,659123714,0,0x0,8
tick,0x7ffe67f8feb4,659139719,0,0x0,8
tick,0x7ffe67f8feb4,659155698,0,0x0,8
tick,0x7ffe67f8feb4,659171731,0,0x0,8
tick,0x7ffe67f8feb4,659187831,0,0x0,8
tick,0x7ffe67f8feb4,659203702,0,0x0,8
tick,0x7ffe67f8feb4,659219696,0,0x0,8
tick,0x7ffe67f8feb4,659235702,0,0x0,8
tick,0x7ffe67f8feb4,659251620,0,0x0,8
tick,0x7ffe67f8feb4,659267713,0,0x0,8
tick,0x7ffe67f8feb4,659283756,0,0x0,8
tick,0x7ffe67f8feb4,659299743,0,0x0,8
tick,0x7ffe67f8feb4,659315539,0,0x0,8
tick,0x7ffe67f8feb4,659330557,0,0x0,8
tick,0x7ffe67f8feb4,659346476,0,0x0,8
tick,0x7ffe67f8feb4,659361548,0,0x0,8
tick,0x7ffe67f8feb4,659377550,0,0x0,8
tick,0x7ffe67f8feb4,659393565,0,0x0,8
tick,0x7ffe67f8feb4,659408773,0,0x0,8
tick,0x7ffe67f8feb4,659424797,0,0x0,8
tick,0x7ffe67f8feb4,659440804,0,0x0,8
tick,0x7ffe67f8feb4,659456753,0,0x0,8
tick,0x7ffe67f8feb4,659472755,0,0x0,8
tick,0x7ffe67f8feb4,659488831,0,0x0,8
tick,0x7ffe67f8feb4,659504868,0,0x0,8
tick,0x7ffe67f8feb4,659520763,0,0x0,8
tick,0x7ffe67f8feb4,659536635,0,0x0,8
tick,0x7ffe67f8feb4,659552606,0,0x0,8
tick,0x7ffe67f8feb4,659568602,0,0x0,8
tick,0x7ffe67f8feb4,659584609,0,0x0,8
tick,0x7ffe67f8feb4,659600618,0,0x0,8
tick,0x7ffe67f8feb4,659616927,0,0x0,8
tick,0x7ffe67f8feb4,659632201,0,0x0,8
tick,0x7ffe67f8feb4,659647467,0,0x0,8
tick,0x7ffe67f8feb4,659663046,0,0x0,8
tick,0x7ffe67f8feb4,659678568,0,0x0,8
tick,0x7ffe67f8feb4,659693744,0,0x0,8
tick,0x7ffe67f8feb4,659709312,0,0x0,8
tick,0x7ffe67f8feb4,659725006,0,0x0,8
tick,0x7ffe67f8feb4,659740647,0,0x0,8
tick,0x7ffe67f8feb4,659756254,0,0x0,8
tick,0x7ffe67f8feb4,659771762,0,0x0,8
tick,0x7ffe67f8feb4,659787027,0,0x0,8
tick,0x7ffe67f8feb4,659803116,0,0x0,8
tick,0x7ffe67f8feb4,659818931,0,0x0,8
tick,0x7ffe67f8feb4,659834075,0,0x0,8
tick,0x7ffe67f8feb4,659849358,0,0x0,8
tick,0x7ffe67f8feb4,659864832,0,0x0,8
tick,0x7ffe67f8feb4,659880415,0,0x0,8
tick,0x7ffe67f8feb4,659896168,0,0x0,8
tick,0x7ffe67f8feb4,659911472,0,0x0,8
tick,0x7ffe67f8feb4,659927229,0,0x0,8
tick,0x7ffe67f8feb4,659942650,0,0x0,8
tick,0x7ffe67f8feb4,659958145,0,0x0,8
tick,0x7ffe67f8feb4,659974132,0,0x0,8
tick,0x7ffe67f8feb4,659989454,0,0x0,8
tick,0x7ffe67f8feb4,660005144,0,0x0,8
tick,0x7ffe67f8feb4,660021296,0,0x0,8
tick,0x7ffe67f8feb4,660036446,0,0x0,8
tick,0x7ffe67f8feb4,660051810,0,0x0,8
tick,0x7ffe67f8feb4,660066868,0,0x0,8
tick,0x7ffe67f8feb4,660082365,0,0x0,8
tick,0x7ffe67f8feb4,660097603,0,0x0,8
tick,0x7ffe67f8feb4,660113344,0,0x0,8
tick,0x7ffe67f8feb4,660128657,0,0x0,8
tick,0x7ffe67f8feb4,660144962,0,0x0,8
tick,0x7ffe67f8feb4,660160798,0,0x0,8
tick,0x7ffe67f8feb4,660176599,0,0x0,8
tick,0x7ffe67f8feb4,660192623,0,0x0,8
tick,0x7ffe67f8feb4,660208612,0,0x0,8
tick,0x7ffe67f8feb4,660224597,0,0x0,8
tick,0x7ffe67f8feb4,660240588,0,0x0,8
tick,0x7ffe67f8feb4,660256620,0,0x0,8
tick,0x7ffe67f8feb4,660272625,0,0x0,8
tick,0x7ffe67f8feb4,660288372,0,0x0,8
tick,0x7ffe67f8feb4,660303732,0,0x0,8
tick,0x7ffe67f8feb4,660319804,0,0x0,8
tick,0x7ffe67f8feb4,660334931,0,0x0,8
tick,0x7ffe67f8feb4,660350275,0,0x0,8
tick,0x7ffe67f8feb4,660365968,0,0x0,8
tick,0x7ffe67f8feb4,660381390,0,0x0,8
tick,0x7ffe67f8feb4,660396760,0,0x0,8
tick,0x7ffe67f8feb4,660412262,0,0x0,8
tick,0x7ffe67f8feb4,660427166,0,0x0,8
tick,0x7ffe67f8feb4,660442512,0,0x0,8
tick,0x7ffe67f8feb4,660458324,0,0x0,8
tick,0x7ffe67f8feb4,660474247,0,0x0,8
tick,0x7ffe67f8feb4,660490224,0,0x0,8
tick,0x7ffe67f8feb4,660506226,0,0x0,8
tick,0x7ffe67f8feb4,660521285,0,0x0,8
tick,0x7ffe67f8feb4,660537284,0,0x0,8
tick,0x7ffe67f8feb4,660553228,0,0x0,8
tick,0x7ffe67f8feb4,660569222,0,0x0,8
tick,0x7ffe67f8feb4,660585223,0,0x0,8
tick,0x7ffe67f8feb4,660601287,0,0x0,8
tick,0x7ffe67f8feb4,660616465,0,0x0,8
tick,0x7ffe67f8feb4,660631927,0,0x0,8
tick,0x7ffe67f8feb4,660647464,0,0x0,8
tick,0x7ffe67f8feb4,660662862,0,0x0,8
tick,0x7ffe67f8feb4,660678946,0,0x0,8
tick,0x7ffe67f8feb4,660694345,0,0x0,8
tick,0x7ffe67f8feb4,660709987,0,0x0,8
tick,0x7ffe67f8feb4,660725431,0,0x0,8
tick,0x7ffe67f8feb4,660741095,0,0x0,8
tick,0x7ffe67f8feb4,660756794,0,0x0,8
tick,0x7ffe67f8feb4,660772002,0,0x0,8
tick,0x7ffe67f8feb4,660787772,0,0x0,8
tick,0x7ffe67f8feb4,660803043,0,0x0,8
tick,0x7ffe67f8feb4,660818116,0,0x0,8
tick,0x7ffe67f8feb4,660833411,0,0x0,8
tick,0x7ffe67f8feb4,660849300,0,0x0,8
tick,0x7ffe67f8feb4,660865503,0,0x0,8
tick,0x7ffe67f8feb4,660880872,0,0x0,8
tick,0x7ffe67f8feb4,660897107,0,0x0,8
tick,0x7ffe67f8feb4,660913093,0,0x0,8
tick,0x7ffe67f8feb4,660927960,0,0x0,8
tick,0x7ffe67f8feb4,660944571,0,0x0,8
tick,0x7ffe67f8feb4,660959422,0,0x0,8
tick,0x7ffe67f8feb4,660975485,0,0x0,8
tick,0x7ffe67f8feb4,660991396,0,0x0,8
tick,0x7ffe67f8feb4,661006942,0,0x0,8
tick,0x7ffe67f8feb4,661022747,0,0x0,8
tick,0x7ffe67f8feb4,661037958,0,0x0,8
tick,0x7ffe67f8feb4,661053382,0,0x0,8
tick,0x7ffe67f8feb4,661069108,0,0x0,8
tick,0x7ffe67f8feb4,661084606,0,0x0,8
tick,0x7ffe67f8feb4,661100113,0,0x0,8
tick,0x7ffe67f8feb4,661115049,0,0x0,8
tick,0x7ffe67f8feb4,661130993,0,0x0,8
tick,0x7ffe67f8feb4,661147032,0,0x0,8
tick,0x7ffe67f8feb4,661162996,0,0x0,8
tick,0x7ffe67f8feb4,661179044,0,0x0,8
tick,0x7ffe67f8feb4,661194906,0,0x0,8
tick,0x7ffe67f8feb4,661210883,0,0x0,8
tick,0x7ffe67f8feb4,661226928,0,0x0,8
tick,0x7ffe67f8feb4,661242868,0,0x0,8
tick,0x7ffe67f8feb4,661258874,0,0x0,8
tick,0x7ffe67f8feb4,661274024,0,0x0,8
tick,0x7ffe67f8feb4,661290055,0,0x0,8
tick,0x7ffe67f8feb4,661306306,0,0x0,8
tick,0x7ffe67f8feb4,661322035,0,0x0,8
tick,0x7ffe67f8feb4,661338049,0,0x0,8
tick,0x7ffe67f8feb4,661354050,0,0x0,8
tick,0x7ffe67f8feb4,661370094,0,0x0,8
tick,0x7ffe67f8feb4,661386099,0,0x0,8
tick,0x7ffe67f8feb4,661401592,0,0x0,8
tick,0x7ffe67f8feb4,661417401,0,0x0,8
tick,0x7ffe67f8feb4,661433424,0,0x0,8
tick,0x7ffe67f8feb4,661449287,0,0x0,8
tick,0x7ffe67f8feb4,661464904,0,0x0,8
tick,0x7ffe67f8feb4,661480355,0,0x0,8
tick,0x7ffe67f8feb4,661496339,0,0x0,8
tick,0x7ffe67f8feb4,661511885,0,0x0,8
tick,0x7ffe67f8feb4,661527819,0,0x0,8
tick,0x7ffe67f8feb4,661543051,0,0x0,8
tick,0x7ffe67f8feb4,661558376,0,0x0,8
tick,0x7ffe67f8feb4,661574160,0,0x0,8
tick,0x7ffe67f8feb4,661590078,0,0x0,8
tick,0x7ffe67f8feb4,661605523,0,0x0,8
tick,0x7ffe67f8feb4,661621200,0,0x0,8
tick,0x7ffe67f8feb4,661636277,0,0x0,8
tick,0x7ffe67f8feb4,661651471,0,0x0,8
tick,0x7ffe67f8feb4,661667438,0,0x0,8
tick,0x7ffe67f8feb4,661682967,0,0x0,8
tick,0x7ffe67f8feb4,661699057,0,0x0,8
tick,0x7ffe67f8feb4,661715010,0,0x0,8
tick,0x7ffe67f8feb4,661730367,0,0x0,8
tick,0x7ffe67f8feb4,661746246,0,0x0,8
tick,0x7ffe67f8feb4,661761421,0,0x0,8
tick,0x7ffe67f8feb4,661776607,0,0x0,8
tick,0x7ffe67f8feb4,661792535,0,0x0,8
tick,0x7ffe67f8feb4,661808580,0,0x0,8
tick,0x7ffe67f8feb4,661824603,0,0x0,8
tick,0x7ffe67f8feb4,661840082,0,0x0,8
tick,0x7ffe67f8feb4,661855848,0,0x0,8
tick,0x7ffe67f8feb4,661871301,0,0x0,8
tick,0x7ffe67f8feb4,661886764,0,0x0,8
tick,0x7ffe67f8feb4,661901908,0,0x0,8
tick,0x7ffe67f8feb4,661917925,0,0x0,8
tick,0x7ffe67f8feb4,661933581,0,0x0,8
tick,0x7ffe67f8feb4,661948905,0,0x0,8
tick,0x7ffe67f8feb4,661964461,0,0x0,8
tick,0x7ffe67f8feb4,661980211,0,0x0,8
tick,0x7ffe67f8feb4,661995915,0,0x0,8
tick,0x7ffe67f8feb4,662011443,0,0x0,8
tick,0x7ffe67f8feb4,662027109,0,0x0,8
tick,0x7ffe67f8feb4,662043188,0,0x0,8
tick,0x7ffe67f8feb4,662058485,0,0x0,8
tick,0x7ffe67f8feb4,662073869,0,0x0,8
tick,0x7ffe67f8feb4,662090026,0,0x0,8
tick,0x7ffe67f8feb4,662105328,0,0x0,8
tick,0x7ffe67f8feb4,662121093,0,0x0,8
tick,0x7ffe67f8feb4,662136463,0,0x0,8
tick,0x7ffe67f8feb4,662151911,0,0x0,8
tick,0x7ffe67f8feb4,662167114,0,0x0,8
tick,0x7ffe67f8feb4,662182656,0,0x0,8
tick,0x7ffe67f8feb4,662197695,0,0x0,8
tick,0x7ffe67f8feb4,662213690,0,0x0,8
tick,0x7ffe67f8feb4,662229681,0,0x0,8
tick,0x7ffe67f8feb4,662244692,0,0x0,8
tick,0x7ffe67f8feb4,662260677,0,0x0,8
tick,0x7ffe67f8feb4,662276722,0,0x0,8
tick,0x7ffe67f8feb4,662292793,0,0x0,8
tick,0x7ffe67f8feb4,662307855,0,0x0,8
tick,0x7ffe67f8feb4,662323245,0,0x0,8
tick,0x7ffe67f8feb4,662339173,0,0x0,8
tick,0x7ffe67f8feb4,662354931,0,0x0,8
tick,0x7ffe67f8feb4,662370176,0,0x0,8
tick,0x7ffe67f8feb4,662386211,0,0x0,8
tick,0x7ffe67f8feb4,662402211,0,0x0,8
tick,0x7ffe67f8feb4,662418194,0,0x0,8
tick,0x7ffe67f8feb4,662434184,0,0x0,8
tick,0x7ffe67f8feb4,662450199,0,0x0,8
tick,0x7ffe67f8feb4,662466258,0,0x0,8
tick,0x7ffe67f8feb4,662482204,0,0x0,8
tick,0x7ffe67f8feb4,662498234,0,0x0,8
tick,0x7ffe67f8feb4,662514220,0,0x0,8
tick,0x7ffe67f8feb4,662530228,0,0x0,8
tick,0x7ffe67f8feb4,662546217,0,0x0,8
tick,0x7ffe67f8feb4,662562222,0,0x0,8
tick,0x7ffe67f8feb4,662577597,0,0x0,8
tick,0x7ffe67f8feb4,662592974,0,0x0,8
tick,0x7ffe67f8feb4,662608612,0,0x0,8
tick,0x7ffe67f8feb4,662624660,0,0x0,8
tick,0x7ffe67f8feb4,662641153,0,0x0,8
tick,0x7ffe67f8feb4,662656269,0,0x0,8
tick,0x7ffe67f8feb4,662671472,0,0x0,8
tick,0x7ffe67f8feb4,662686869,0,0x0,8
tick,0x7ffe67f8feb4,662703141,0,0x0,8
tick,0x7ffe67f8feb4,662718906,0,0x0,8
tick,0x7ffe67f8feb4,662734343,0,0x0,8
tick,0x7ffe67f8feb4,662749933,0,0x0,8
tick,0x7ffe67f8feb4,662765260,0,0x0,8
tick,0x7ffe67f8feb4,662780454,0,0x0,8
tick,0x7ffe67f8feb4,662796281,0,0x0,8
tick,0x7ffe67f8feb4,662811453,0,0x0,8
tick,0x7ffe67f8feb4,662827293,0,0x0,8
tick,0x7ffe67f8feb4,662843255,0,0x0,8
tick,0x7ffe67f8feb4,662859267,0,0x0,8
tick,0x7ffe67f8feb4,662875272,0,0x0,8
tick,0x7ffe67f8feb4,662891299,0,0x0,8
tick,0x7ffe67f8feb4,662907349,0,0x0,8
tick,0x7ffe67f8feb4,662923302,0,0x0,8
tick,0x7ffe67f8feb4,662939269,0,0x0,8
tick,0x7ffe67f8feb4,662955300,0,0x0,8
tick,0x7ffe67f8feb4,662971360,0,0x0,8
tick,0x7ffe67f8feb4,662987290,0,0x0,8
tick,0x7ffe67f8feb4,663003297,0,0x0,8
tick,0x7ffe67f8feb4,663019288,0,0x0,8
tick,0x7ffe67f8feb4,663035296,0,0x0,8
tick,0x7ffe67f8feb4,663051272,0,0x0,8
tick,0x7ffe67f8feb4,663067301,0,0x0,8
tick,0x7ffe67f8feb4,663083294,0,0x0,8
tick,0x7ffe67f8feb4,663099306,0,0x0,8
tick,0x7ffe67f8feb4,663115309,0,0x0,8
tick,0x7ffe67f8feb4,663131486,0,0x0,8
tick,0x7ffe67f8feb4,663147331,0,0x0,8
tick,0x7ffe67f8feb4,663163308,0,0x0,8
tick,0x7ffe67f8feb4,663179299,0,0x0,8
tick,0x7ffe67f8feb4,663194313,0,0x0,8
tick,0x7ffe67f8feb4,663210348,0,0x0,8
tick,0x7ffe67f8feb4,663226306,0,0x0,8
tick,0x7ffe67f8feb4,663242311,0,0x0,8
tick,0x7ffe67f8feb4,663258342,0,0x0,8
tick,0x7ffe67f8feb4,663274305,0,0x0,8
tick,0x7ffe67f8feb4,663290333,0,0x0,8
tick,0x7ffe67f8feb4,663306218,0,0x0,8
tick,0x7ffe67f8feb4,663322231,0,0x0,8
tick,0x7ffe67f8feb4,663338233,0,0x0,8
tick,0x7ffe67f8feb4,663354229,0,0x0,8
tick,0x7ffe67f8feb4,663370254,0,0x0,8
tick,0x7ffe67f8feb4,663386380,0,0x0,8
tick,0x7ffe67f8feb4,663401545,0,0x0,8
tick,0x7ffe67f8feb4,663417510,0,0x0,8
tick,0x7ffe67f8feb4,663433409,0,0x0,8
tick,0x7ffe67f8feb4,663448877,0,0x0,8
tick,0x7ffe67f8feb4,663464532,0,0x0,8
tick,0x7ffe67f8feb4,663479906,0,0x0,8
tick,0x7ffe67f8feb4,663495477,0,0x0,8
tick,0x7ffe67f8feb4,663511017,0,0x0,8
tick,0x7ffe67f8feb4,663526991,0,0x0,8
tick,0x7ffe67f8feb4,663543011,0,0x0,8
tick,0x7ffe67f8feb4,663559055,0,0x0,8
tick,0x7ffe67f8feb4,663574606,0,0x0,8
tick,0x7ffe67f8feb4,663590341,0,0x0,8
tick,0x7ffe67f8feb4,663606065,0,0x0,8
tick,0x7ffe67f8feb4,663621792,0,0x0,8
tick,0x7ffe67f8feb4,663637718,0,0x0,8
tick,0x7ffe67f8feb4,663653437,0,0x0,8
tick,0x7ffe67f8feb4,663668766,0,0x0,8
tick,0x7ffe67f8feb4,663684060,0,0x0,8
tick,0x7ffe67f8feb4,663699808,0,0x0,8
tick,0x7ffe67f8feb4,663715433,0,0x0,8
tick,0x7ffe67f8feb4,663731422,0,0x0,8
tick,0x7ffe67f8feb4,663747472,0,0x0,8
tick,0x7ffe67f8feb4,663763469,0,0x0,8
tick,0x7ffe67f8feb4,663779467,0,0x0,8
tick,0x7ffe67f8feb4,663795472,0,0x0,8
tick,0x7ffe67f8feb4,663810839,0,0x0,8
tick,0x7ffe67f8feb4,663826467,0,0x0,8
tick,0x7ffe67f8feb4,663842123,0,0x0,8
tick,0x7ffe67f8feb4,663857486,0,0x0,8
tick,0x7ffe67f8feb4,663872868,0,0x0,8
tick,0x7ffe67f8feb4,663888778,0,0x0,8
tick,0x7ffe67f8feb4,663904254,0,0x0,8
tick,0x7ffe67f8feb4,663920414,0,0x0,8
tick,0x7ffe67f8feb4,663935673,0,0x0,8
tick,0x7ffe67f8feb4,663951514,0,0x0,8
tick,0x7ffe67f8feb4,663966454,0,0x0,8
tick,0x7ffe67f8feb4,663982157,0,0x0,8
tick,0x7ffe67f8feb4,663998130,0,0x0,8
tick,0x7ffe67f8feb4,664013691,0,0x0,8
tick,0x7ffe67f8feb4,664029404,0,0x0,8
tick,0x7ffe67f8feb4,664044885,0,0x0,8
tick,0x7ffe67f8feb4,664060500,0,0x0,8
tick,0x7ffe67f8feb4,664076093,0,0x0,8
tick,0x7ffe67f8feb4,664091862,0,0x0,8
tick,0x7ffe67f8feb4,664106892,0,0x0,8
tick,0x7ffe67f8feb4,664122456,0,0x0,8
tick,0x7ffe67f8feb4,664138106,0,0x0,8
tick,0x7ffe67f8feb4,664153876,0,0x0,8
tick,0x7ffe67f8feb4,664168832,0,0x0,8
tick,0x7ffe67f8feb4,664184585,0,0x0,8
tick,0x7ffe67f8feb4,664199406,0,0x0,8
tick,0x7ffe67f8feb4,664214806,0,0x0,8
tick,0x7ffe67f8feb4,664230582,0,0x0,8
tick,0x7ffe67f8feb4,664246577,0,0x0,8
tick,0x7ffe67f8feb4,664262541,0,0x0,8
tick,0x7ffe67f8feb4,664278561,0,0x0,8
tick,0x7ffe67f8feb4,664294555,0,0x0,8
tick,0x7ffe67f8feb4,664310325,0,0x0,8
tick,0x7ffe67f8feb4,664325896,0,0x0,8
tick,0x7ffe67f8feb4,664341179,0,0x0,8
tick,0x7ffe67f8feb4,664357288,0,0x0,8
tick,0x7ffe67f8feb4,664372471,0,0x0,8
tick,0x7ffe67f8feb4,664387368,0,0x0,8
tick,0x7ffe67f8feb4,664402915,0,0x0,8
tick,0x7ffe67f8feb4,664418095,0,0x0,8
tick,0x7ffe67f8feb4,664433565,0,0x0,8
tick,0x7ffe67f8feb4,664449445,0,0x0,8
tick,0x7ffe67f8feb4,664465078,0,0x0,8
tick,0x7ffe67f8feb4,664480732,0,0x0,8
tick,0x7ffe67f8feb4,664495667,0,0x0,8
tick,0x7ffe67f8feb4,664511413,0,0x0,8
tick,0x7ffe67f8feb4,664526972,0,0x0,8
tick,0x7ffe67f8feb4,664541703,0,0x0,8
tick,0x7ffe67f8feb4,664557228,0,0x0,8
tick,0x7ffe67f8feb4,664573202,0,0x0,8
tick,0x7ffe67f8feb4,664589238,0,0x0,8
tick,0x7ffe67f8feb4,664604455,0,0x0,8
tick,0x7ffe67f8feb4,664620243,0,0x0,8
tick,0x7ffe67f8feb4,664635537,0,0x0,8
tick,0x7ffe67f8feb4,664651545,0,0x0,8
tick,0x7ffe67f8feb4,664667562,0,0x0,8
tick,0x7ffe67f8feb4,664682905,0,0x0,8
tick,0x7ffe67f8feb4,664698046,0,0x0,8
tick,0x7ffe67f8feb4,664713543,0,0x0,8
tick,0x7ffe67f8feb4,664729548,0,0x0,8
tick,0x7ffe67f8feb4,664745546,0,0x0,8
tick,0x7ffe67f8feb4,664761566,0,0x0,8
tick,0x7ffe67f8feb4,664777635,0,0x0,8
tick,0x7ffe67f8feb4,664793353,0,0x0,8
tick,0x7ffe67f8feb4,664808664,0,0x0,8
tick,0x7ffe67f8feb4,664823965,0,0x0,8
tick,0x7ffe67f8feb4,664839732,0,0x0,8
tick,0x7ffe67f8feb4,664854995,0,0x0,8
tick,0x7ffe67f8feb4,664870976,0,0x0,8
tick,0x7ffe67f8feb4,664887065,0,0x0,8
tick,0x7ffe67f8feb4,664903318,0,0x0,8
tick,0x7ffe67f8feb4,664919402,0,0x0,8
tick,0x7ffe67f8feb4,664934905,0,0x0,8
tick,0x7ffe67f8feb4,664951001,0,0x0,8
tick,0x7ffe67f8feb4,664966241,0,0x0,8
tick,0x7ffe67f8feb4,664981422,0,0x0,8
tick,0x7ffe67f8feb4,664997574,0,0x0,8
tick,0x7ffe67f8feb4,665013632,0,0x0,8
tick,0x7ffe67f8feb4,665029642,0,0x0,8
tick,0x7ffe67f8feb4,665045665,0,0x0,8
tick,0x7ffe67f8feb4,665061664,0,0x0,8
tick,0x7ffe67f8feb4,665077696,0,0x0,8
tick,0x7ffe67f8feb4,665093359,0,0x0,8
tick,0x7ffe67f8feb4,665108859,0,0x0,8
tick,0x7ffe67f8feb4,665124085,0,0x0,8
tick,0x7ffe67f8feb4,665139487,0,0x0,8
tick,0x7ffe67f8feb4,665154797,0,0x0,8
tick,0x7ffe67f8feb4,665169799,0,0x0,8
tick,0x7ffe67f8feb4,665186214,0,0x0,8
tick,0x7ffe67f8feb4,665201817,0,0x0,8
tick,0x7ffe67f8feb4,665217352,0,0x0,8
tick,0x7ffe67f8feb4,665233277,0,0x0,8
tick,0x7ffe67f8feb4,665249245,0,0x0,8
tick,0x7ffe67f8feb4,665265241,0,0x0,8
tick,0x7ffe67f8feb4,665281270,0,0x0,8
tick,0x7ffe67f8feb4,665297303,0,0x0,8
tick,0x7ffe67f8feb4,665313540,0,0x0,8
tick,0x7ffe67f8feb4,665328990,0,0x0,8
tick,0x7ffe67f8feb4,665344970,0,0x0,8
tick,0x7ffe67f8feb4,665360706,0,0x0,8
tick,0x7ffe67f8feb4,665376873,0,0x0,8
tick,0x7ffe67f8feb4,665392154,0,0x0,8
tick,0x7ffe67f8feb4,665407538,0,0x0,8
tick,0x7ffe67f8feb4,665423049,0,0x0,8
tick,0x7ffe67f8feb4,665439375,0,0x0,8
tick,0x7ffe67f8feb4,665454691,0,0x0,8
tick,0x7ffe67f8feb4,665470478,0,0x0,8
tick,0x7ffe67f8feb4,665486242,0,0x0,8
tick,0x7ffe67f8feb4,665501789,0,0x0,8
tick,0x7ffe67f8feb4,665517682,0,0x0,8
tick,0x7ffe67f8feb4,665533254,0,0x0,8
tick,0x7ffe67f8feb4,665548248,0,0x0,8
tick,0x7ffe67f8feb4,665564151,0,0x0,8
tick,0x7ffe67f8feb4,665579445,0,0x0,8
tick,0x7ffe67f8feb4,665595791,0,0x0,8
tick,0x7ffe67f8feb4,665611387,0,0x0,8
tick,0x7ffe67f8feb4,665626910,0,0x0,8
tick,0x7ffe67f8feb4,665642074,0,0x0,8
tick,0x7ffe67f8feb4,665657618,0,0x0,8
tick,0x7ffe67f8feb4,665672911,0,0x0,8
tick,0x7ffe67f8feb4,665688777,0,0x0,8
tick,0x7ffe67f8feb4,665704045,0,0x0,8
tick,0x7ffe67f8feb4,665719872,0,0x0,8
tick,0x7ffe67f8feb4,665735203,0,0x0,8
tick,0x7ffe67f8feb4,665750890,0,0x0,8
tick,0x7ffe67f8feb4,665766701,0,0x0,8
tick,0x7ffe67f8feb4,665782213,0,0x0,8
tick,0x7ffe67f8feb4,665797815,0,0x0,8
tick,0x7ffe67f8feb4,665813275,0,0x0,8
tick,0x7ffe67f8feb4,665828766,0,0x0,8
tick,0x7ffe67f8feb4,665844797,0,0x0,8
tick,0x7ffe67f8feb4,665860939,0,0x0,8
tick,0x7ffe67f8feb4,665877010,0,0x0,8
tick,0x7ffe67f8feb4,665892792,0,0x0,8
tick,0x7ffe67f8feb4,665908296,0,0x0,8
tick,0x7ffe67f8feb4,665924015,0,0x0,8
tick,0x7ffe67f8feb4,665939889,0,0x0,8
tick,0x7ffe67f8feb4,665955989,0,0x0,8
tick,0x7ffe67f8feb4,665971824,0,0x0,8
tick,0x7ffe67f8feb4,665986993,0,0x0,8
tick,0x7ffe67f8feb4,666003007,0,0x0,8
tick,0x7ffe67f8feb4,666019061,0,0x0,8
tick,0x7ffe67f8feb4,666035020,0,0x0,8
tick,0x7ffe67f8feb4,666050423,0,0x0,8
tick,0x7ffe67f8feb4,666065719,0,0x0,8
tick,0x7ffe67f8feb4,666081136,0,0x0,8
tick,0x7ffe67f8feb4,666097110,0,0x0,8
tick,0x7ffe67f8feb4,666112238,0,0x0,8
tick,0x7ffe67f8feb4,666127778,0,0x0,8
tick,0x7ffe67f8feb4,666143162,0,0x0,8
tick,0x7ffe67f8feb4,666158945,0,0x0,8
tick,0x7ffe67f8feb4,666175019,0,0x0,8
tick,0x7ffe67f8feb4,666191316,0,0x0,8
tick,0x7ffe67f8feb4,666207340,0,0x0,8
tick,0x7ffe67f8feb4,666222940,0,0x0,8
tick,0x7ffe67f8feb4,666238900,0,0x0,8
tick,0x7ffe67f8feb4,666254887,0,0x0,8
tick,0x7ffe67f8feb4,666270902,0,0x0,8
tick,0x7ffe67f8feb4,666286552,0,0x0,8
tick,0x7ffe67f8feb4,666301859,0,0x0,8
tick,0x7ffe67f8feb4,666317198,0,0x0,8
tick,0x7ffe67f8feb4,666332556,0,0x0,8
tick,0x7ffe67f8feb4,666348143,0,0x0,8
tick,0x7ffe67f8feb4,666364144,0,0x0,8
tick,0x7ffe67f8feb4,666380126,0,0x0,8
tick,0x7ffe67f8feb4,666396126,0,0x0,8
tick,0x7ffe67f8feb4,666412123,0,0x0,8
tick,0x7ffe67f8feb4,666428159,0,0x0,8
tick,0x7ffe67f8feb4,666444124,0,0x0,8
tick,0x7ffe67f8feb4,666459726,0,0x0,8
tick,0x7ffe67f8feb4,666475259,0,0x0,8
tick,0x7ffe67f8feb4,666490872,0,0x0,8
tick,0x7ffe67f8feb4,666506285,0,0x0,8
tick,0x7ffe67f8feb4,666521637,0,0x0,8
tick,0x7ffe67f8feb4,666537506,0,0x0,8
tick,0x7ffe67f8feb4,666553024,0,0x0,8
tick,0x7ffe67f8feb4,666568793,0,0x0,8
tick,0x7ffe67f8feb4,666584695,0,0x0,8
tick,0x7ffe67f8feb4,666600011,0,0x0,8
tick,0x7ffe67f8feb4,666615728,0,0x0,8
tick,0x7ffe67f8feb4,666631579,0,0x0,8
tick,0x7ffe67f8feb4,666647019,0,0x0,8
tick,0x7ffe67f8feb4,666663035,0,0x0,8
tick,0x7ffe67f8feb4,666679103,0,0x0,8
tick,0x7ffe67f8feb4,666694597,0,0x0,8
tick,0x7ffe67f8feb4,666710216,0,0x0,8
tick,0x7ffe67f8feb4,666725882,0,0x0,8
tick,0x7ffe67f8feb4,666740889,0,0x0,8
tick,0x7ffe67f8feb4,666756213,0,0x0,8
tick,0x7ffe67f8feb4,666772005,0,0x0,8
tick,0x7ffe67f8feb4,666787205,0,0x0,8
tick,0x7ffe67f8feb4,666802905,0,0x0,8
tick,0x7ffe67f8feb4,666818131,0,0x0,8
tick,0x7ffe67f8feb4,666834346,0,0x0,8
tick,0x7ffe67f8feb4,666849890,0,0x0,8
tick,0x7ffe67f8feb4,666865952,0,0x0,8
tick,0x7ffe67f8feb4,666880949,0,0x0,8
tick,0x7ffe67f8feb4,666897044,0,0x0,8
tick,0x7ffe67f8feb4,666913630,0,0x0,8
tick,0x7ffe67f8feb4,666928031,0,0x0,8
tick,0x7ffe67f8feb4,666943083,0,0x0,8
tick,0x7ffe67f8feb4,666959106,0,0x0,8
tick,0x7ffe67f8feb4,666974613,0,0x0,8
tick,0x7ffe67f8feb4,666990100,0,0x0,8
tick,0x7ffe67f8feb4,667005518,0,0x0,8
tick,0x7ffe67f8feb4,667021000,0,0x0,8
tick,0x7ffe67f8feb4,667036599,0,0x0,8
tick,0x7ffe67f8feb4,667051978,0,0x0,8
tick,0x7ffe67f8feb4,667068008,0,0x0,8
tick,0x7ffe67f8feb4,667083659,0,0x0,8
tick,0x7ffe67f8feb4,667099093,0,0x0,8
tick,0x7ffe67f8feb4,667114512,0,0x0,8
tick,0x7ffe67f8feb4,667130121,0,0x0,8
tick,0x7ffe67f8feb4,667145812,0,0x0,8
tick,0x7ffe67f8feb4,667161121,0,0x0,8
tick,0x7ffe67f8feb4,667176832,0,0x0,8
tick,0x7ffe67f8feb4,667192079,0,0x0,8
tick,0x7ffe67f8feb4,667207687,0,0x0,8
tick,0x7ffe67f8feb4,667222898,0,0x0,8
tick,0x7ffe67f8feb4,667237799,0,0x0,8
tick,0x7ffe67f8feb4,667253788,0,0x0,8
tick,0x7ffe67f8feb4,667269762,0,0x0,8
tick,0x7ffe67f8feb4,667285966,0,0x0,8
tick,0x7ffe67f8feb4,667301758,0,0x0,8
tick,0x7ffe67f8feb4,667317273,0,0x0,8
tick,0x7ffe67f8feb4,667332256,0,0x0,8
tick,0x7ffe67f8feb4,667347789,0,0x0,8
tick,0x7ffe67f8feb4,667363747,0,0x0,8
tick,0x7ffe67f8feb4,667379084,0,0x0,8
tick,0x7ffe67f8feb4,667394944,0,0x0,8
tick,0x7ffe67f8feb4,667410968,0,0x0,8
tick,0x7ffe67f8feb4,667426417,0,0x0,8
tick,0x7ffe67f8feb4,667441642,0,0x0,8
tick,0x7ffe67f8feb4,667457713,0,0x0,8
tick,0x7ffe67f8feb4,667473185,0,0x0,8
tick,0x7ffe67f8feb4,667489255,0,0x0,8
tick,0x7ffe67f8feb4,667505191,0,0x0,8
tick,0x7ffe67f8feb4,667520086,0,0x0,8
tick,0x7ffe67f8feb4,667535522,0,0x0,8
tick,0x7ffe67f8feb4,667550536,0,0x0,8
tick,0x7ffe67f8feb4,667566039,0,0x0,8
tick,0x7ffe67f8feb4,667581688,0,0x0,8
tick,0x7ffe67f8feb4,667598075,0,0x0,8
tick,0x7ffe67f8feb4,667613659,0,0x0,8
tick,0x7ffe67f8feb4,667629157,0,0x0,8
tick,0x7ffe67f8feb4,667644754,0,0x0,8
tick,0x7ffe67f8feb4,667660093,0,0x0,8
tick,0x7ffe67f8feb4,667676028,0,0x0,8
tick,0x7ffe67f8feb4,667691758,0,0x0,8
tick,0x7ffe67f8feb4,667706849,0,0x0,8
tick,0x7ffe67f8feb4,667722739,0,0x0,8
tick,0x7ffe67f8feb4,667738057,0,0x0,8
tick,0x7ffe67f8feb4,667753715,0,0x0,8
tick,0x7ffe67f8feb4,667769748,0,0x0,8
tick,0x7ffe67f8feb4,667785587,0,0x0,8
tick,0x7ffe67f8feb4,667801477,0,0x0,8
tick,0x7ffe67f8feb4,667816425,0,0x0,8
tick,0x7ffe67f8feb4,667832201,0,0x0,8
tick,0x7ffe67f8feb4,667847302,0,0x0,8
tick,0x7ffe67f8feb4,667862806,0,0x0,8
tick,0x7ffe67f8feb4,667878144,0,0x0,8
tick,0x7ffe67f8feb4,667893340,0,0x0,8
tick,0x7ffe67f8feb4,667909461,0,0x0,8
tick,0x7ffe67f8feb4,667924741,0,0x0,8
tick,0x7ffe67f8feb4,667940116,0,0x0,8
tick,0x7ffe67f8feb4,667955516,0,0x0,8
tick,0x7ffe67f8feb4,667971113,0,0x0,8
tick,0x7ffe67f8feb4,667986733,0,0x0,8
tick,0x7ffe67f8feb4,668002261,0,0x0,8
tick,0x7ffe67f8feb4,668018077,0,0x0,8
tick,0x7ffe67f8feb4,668033063,0,0x0,8
tick,0x7ffe67f8feb4,668048497,0,0x0,8
tick,0x7ffe67f8feb4,668064507,0,0x0,8
tick,0x7ffe67f8feb4,668080387,0,0x0,8
tick,0x7ffe67f8feb4,668096311,0,0x0,8
tick,0x7ffe67f8feb4,668112214,0,0x0,8
tick,0x7ffe67f8feb4,668127612,0,0x0,8
tick,0x7ffe67f8feb4,668143607,0,0x0,8
tick,0x7ffe67f8feb4,668159615,0,0x0,8
tick,0x7ffe67f8feb4,668175075,0,0x0,8
tick,0x7ffe67f8feb4,668190654,0,0x0,8
tick,0x7ffe67f8feb4,668206640,0,0x0,8
tick,0x7ffe67f8feb4,668221668,0,0x0,8
tick,0x7ffe67f8feb4,668237108,0,0x0,8
tick,0x7ffe67f8feb4,668252591,0,0x0,8
tick,0x7ffe67f8feb4,668268586,0,0x0,8
tick,0x7ffe67f8feb4,668284566,0,0x0,8
tick,0x7ffe67f8feb4,668300573,0,0x0,8
tick,0x7ffe67f8feb4,668316569,0,0x0,8
tick,0x7ffe67f8feb4,668332581,0,0x0,8
tick,0x7ffe67f8feb4,668348652,0,0x0,8
tick,0x7ffe67f8feb4,668364366,0,0x0,8
tick,0x7ffe67f8feb4,668379674,0,0x0,8
tick,0x7ffe67f8feb4,668395699,0,0x0,8
tick,0x7ffe67f8feb4,668411155,0,0x0,8
tick,0x7ffe67f8feb4,668427216,0,0x0,8
tick,0x7ffe67f8feb4,668442591,0,0x0,8
tick,0x7ffe67f8feb4,668458234,0,0x0,8
tick,0x7ffe67f8feb4,668473633,0,0x0,8
tick,0x7ffe67f8feb4,668488646,0,0x0,8
tick,0x7ffe67f8feb4,668504744,0,0x0,8
tick,0x7ffe67f8feb4,668520542,0,0x0,8
tick,0x7ffe67f8feb4,668535812,0,0x0,8
tick,0x7ffe67f8feb4,668550796,0,0x0,8
tick,0x7ffe67f8feb4,668566846,0,0x0,8
tick,0x7ffe67f8feb4,668582177,0,0x0,8
tick,0x7ffe67f8feb4,668597273,0,0x0,8
tick,0x7ffe67f8feb4,668613186,0,0x0,8
tick,0x7ffe67f8feb4,668629148,0,0x0,8
tick,0x7ffe67f8feb4,668645138,0,0x0,8
tick,0x7ffe67f8feb4,668661157,0,0x0,8
tick,0x7ffe67f8feb4,668677147,0,0x0,8
tick,0x7ffe67f8feb4,668693135,0,0x0,8
tick,0x7ffe67f8feb4,668709148,0,0x0,8
tick,0x7ffe67f8feb4,668725178,0,0x0,8
tick,0x7ffe67f8feb4,668741155,0,0x0,8
tick,0x7ffe67f8feb4,668757183,0,0x0,8
tick,0x7ffe67f8feb4,668773163,0,0x0,8
tick,0x7ffe67f8feb4,668789158,0,0x0,8
tick,0x7ffe67f8feb4,668805108,0,0x0,8
tick,0x7ffe67f8feb4,668820569,0,0x0,8
tick,0x7ffe67f8feb4,668836194,0,0x0,8
tick,0x7ffe67f8feb4,668852183,0,0x0,8
tick,0x7ffe67f8feb4,668868177,0,0x0,8
tick,0x7ffe67f8feb4,668884211,0,0x0,8
tick,0x7ffe67f8feb4,668900183,0,0x0,8
tick,0x7ffe67f8feb4,668916198,0,0x0,8
tick,0x7ffe67f8feb4,668932181,0,0x0,8
tick,0x7ffe67f8feb4,668948231,0,0x0,8
tick,0x7ffe67f8feb4,668964215,0,0x0,8
tick,0x7ffe67f8feb4,668980207,0,0x0,8
tick,0x7ffe67f8feb4,668996187,0,0x0,8
tick,0x7ffe67f8feb4,669012223,0,0x0,8
tick,0x7ffe67f8feb4,669028228,0,0x0,8
tick,0x7ffe67f8feb4,669044212,0,0x0,8
tick,0x7ffe67f8feb4,669059238,0,0x0,8
tick,0x7ffe67f8feb4,669075210,0,0x0,8
tick,0x7ffe67f8feb4,669091215,0,0x0,8
tick,0x7ffe67f8feb4,669107213,0,0x0,8
tick,0x7ffe67f8feb4,669123234,0,0x0,8
tick,0x7ffe67f8feb4,669139207,0,0x0,8
tick,0x7ffe67f8feb4,669155220,0,0x0,8
tick,0x7ffe67f8feb4,669171219,0,0x0,8
tick,0x7ffe67f8feb4,669187220,0,0x0,8
tick,0x7ffe67f8feb4,669203234,0,0x0,8
tick,0x7ffe67f8feb4,669219250,0,0x0,8
tick,0x7ffe67f8feb4,669235232,0,0x0,8
tick,0x7ffe67f8feb4,669251270,0,0x0,8
tick,0x7ffe67f8feb4,669267263,0,0x0,8
tick,0x7ffe67f8feb4,669283238,0,0x0,8
tick,0x7ffe67f8feb4,669299229,0,0x0,8
tick,0x7ffe67f8feb4,669315242,0,0x0,8
tick,0x7ffe67f8feb4,669331228,0,0x0,8
tick,0x7ffe67f8feb4,669347236,0,0x0,8
tick,0x7ffe67f8feb4,669362823,0,0x0,8
tick,0x7ffe67f8feb4,669378253,0,0x0,8
tick,0x7ffe67f8feb4,669394263,0,0x0,8
tick,0x7ffe67f8feb4,669409567,0,0x0,8
tick,0x7ffe67f8feb4,669425095,0,0x0,8
tick,0x7ffe67f8feb4,669440531,0,0x0,8
tick,0x7ffe67f8feb4,669456319,0,0x0,8
tick,0x7ffe67f8feb4,669471859,0,0x0,8
tick,0x7ffe67f8feb4,669487054,0,0x0,8
tick,0x7ffe67f8feb4,669502668,0,0x0,8
tick,0x7ffe67f8feb4,669518344,0,0x0,8
tick,0x7ffe67f8feb4,669533836,0,0x0,8
tick,0x7ffe67f8feb4,669549377,0,0x0,8
tick,0x7ffe67f8feb4,669564858,0,0x0,8
tick,0x7ffe67f8feb4,669579871,0,0x0,8
tick,0x7ffe67f8feb4,669595487,0,0x0,8
tick,0x7ffe67f8feb4,669610575,0,0x0,8
tick,0x7ffe67f8feb4,669626042,0,0x0,8
tick,0x7ffe67f8feb4,669641961,0,0x0,8
tick,0x7ffe67f8feb4,669657780,0,0x0,8
tick,0x7ffe67f8feb4,669673430,0,0x0,8
tick,0x7ffe67f8feb4,669689478,0,0x0,8
tick,0x7ffe67f8feb4,669705173,0,0x0,8
tick,0x7ffe67f8feb4,669720628,0,0x0,8
tick,0x7ffe67f8feb4,669735866,0,0x0,8
tick,0x7ffe67f8feb4,669751840,0,0x0,8
tick,0x7ffe67f8feb4,669767780,0,0x0,8
tick,0x7ffe67f8feb4,669783706,0,0x0,8
tick,0x7ffe67f8feb4,669799318,0,0x0,8
tick,0x7ffe67f8feb4,669815340,0,0x0,8
tick,0x7ffe67f8feb4,669831500,0,0x0,8
tick,0x7ffe67f8feb4,669846335,0,0x0,8
tick,0x7ffe67f8feb4,669861361,0,0x0,8
tick,0x7ffe67f8feb4,669877334,0,0x0,8
tick,0x7ffe67f8feb4,669893350,0,0x0,8
tick,0x7ffe67f8feb4,669909403,0,0x0,8
tick,0x7ffe67f8feb4,669924568,0,0x0,8
tick,0x7ffe67f8feb4,669940397,0,0x0,8
tick,0x7ffe67f8feb4,669955385,0,0x0,8
tick,0x7ffe67f8feb4,669971365,0,0x0,8
tick,0x7ffe67f8feb4,669987403,0,0x0,8
tick,0x7ffe67f8feb4,670003343,0,0x0,8
tick,0x7ffe67f8feb4,670019387,0,0x0,8
tick,0x7ffe67f8feb4,670035423,0,0x0,8
tick,0x7ffe67f8feb4,670051396,0,0x0,8
tick,0x7ffe67f8feb4,670067500,0,0x0,8
tick,0x7ffe67f8feb4,670082850,0,0x0,8
tick,0x7ffe67f8feb4,670098406,0,0x0,8
tick,0x7ffe67f8feb4,670113634,0,0x0,8
tick,0x7ffe67f8feb4,670129085,0,0x0,8
tick,0x7ffe67f8feb4,670144423,0,0x0,8
tick,0x7ffe67f8feb4,670159964,0,0x0,8
tick,0x7ffe67f8feb4,670175478,0,0x0,8
tick,0x7ffe67f8feb4,670190709,0,0x0,8
tick,0x7ffe67f8feb4,670206676,0,0x0,8
tick,0x7ffe67f8feb4,670222686,0,0x0,8
tick,0x7ffe67f8feb4,670238474,0,0x0,8
tick,0x7ffe67f8feb4,670253664,0,0x0,8
tick,0x7ffe67f8feb4,670269115,0,0x0,8
tick,0x7ffe67f8feb4,670285091,0,0x0,8
tick,0x7ffe67f8feb4,670300092,0,0x0,8
tick,0x7ffe67f8feb4,670316092,0,0x0,8
tick,0x7ffe67f8feb4,670331774,0,0x0,8
tick,0x7ffe67f8feb4,670347187,0,0x0,8
tick,0x7ffe67f8feb4,670362006,0,0x0,8
tick,0x7ffe67f8feb4,670377406,0,0x0,8
tick,0x7ffe67f8feb4,670392588,0,0x0,8
tick,0x7ffe67f8feb4,670408672,0,0x0,8
tick,0x7ffe67f8feb4,670424045,0,0x0,8
tick,0x7ffe67f8feb4,670439474,0,0x0,8
tick,0x7ffe67f8feb4,670454476,0,0x0,8
tick,0x7ffe67f8feb4,670470287,0,0x0,8
tick,0x7ffe67f8feb4,670485251,0,0x0,8
tick,0x7ffe67f8feb4,670501402,0,0x0,8
tick,0x7ffe67f8feb4,670516423,0,0x0,8
tick,0x7ffe67f8feb4,670532339,0,0x0,8
tick,0x7ffe67f8feb4,670547438,0,0x0,8
tick,0x7ffe67f8feb4,670563432,0,0x0,8
tick,0x7ffe67f8feb4,670578562,0,0x0,8
tick,0x7ffe67f8feb4,670594020,0,0x0,8
tick,0x7ffe67f8feb4,670609573,0,0x0,8
tick,0x7ffe67f8feb4,670624990,0,0x0,8
tick,0x7ffe67f8feb4,670640579,0,0x0,8
tick,0x7ffe67f8feb4,670656453,0,0x0,8
tick,0x7ffe67f8feb4,670672454,0,0x0,8
tick,0x7ffe67f8feb4,670688059,0,0x0,8
tick,0x7ffe67f8feb4,670703463,0,0x0,8
tick,0x7ffe67f8feb4,670719527,0,0x0,8
tick,0x7ffe67f8feb4,670734958,0,0x0,8
tick,0x7ffe67f8feb4,670750463,0,0x0,8
tick,0x7ffe67f8feb4,670766459,0,0x0,8
tick,0x7ffe67f8feb4,670781822,0,0x0,8
tick,0x7ffe67f8feb4,670797481,0,0x0,8
tick,0x7ffe67f8feb4,670813478,0,0x0,8
tick,0x7ffe67f8feb4,670829465,0,0x0,8
tick,0x7ffe67f8feb4,670845477,0,0x0,8
tick,0x7ffe67f8feb4,670860795,0,0x0,8
tick,0x7ffe67f8feb4,670875483,0,0x0,8
tick,0x7ffe67f8feb4,670891471,0,0x0,8
tick,0x7ffe67f8feb4,670907490,0,0x0,8
tick,0x7ffe67f8feb4,670923482,0,0x0,8
tick,0x7ffe67f8feb4,670939483,0,0x0,8
tick,0x7ffe67f8feb4,670955483,0,0x0,8
tick,0x7ffe67f8feb4,670971501,0,0x0,8
tick,0x7ffe67f8feb4,670987522,0,0x0,8
tick,0x7ffe67f8feb4,671003513,0,0x0,8
tick,0x7ffe67f8feb4,671019552,0,0x0,8
tick,0x7ffe67f8feb4,671035471,0,0x0,8
tick,0x7ffe67f8feb4,671051500,0,0x0,8
tick,0x7ffe67f8feb4,671067687,0,0x0,8
tick,0x7ffe67f8feb4,671083513,0,0x0,8
tick,0x7ffe67f8feb4,671099519,0,0x0,8
tick,0x7ffe67f8feb4,671115543,0,0x0,8
tick,0x7ffe67f8feb4,671131512,0,0x0,8
tick,0x7ffe67f8feb4,671147518,0,0x0,8
tick,0x7ffe67f8feb4,671163534,0,0x0,8
tick,0x7ffe67f8feb4,671179447,0,0x0,8
tick,0x7ffe67f8feb4,671195276,0,0x0,8
tick,0x7ffe67f8feb4,671211298,0,0x0,8
tick,0x7ffe67f8feb4,671226564,0,0x0,8
tick,0x7ffe67f8feb4,671242306,0,0x0,8
tick,0x7ffe67f8feb4,671257565,0,0x0,8
tick,0x7ffe67f8feb4,671272988,0,0x0,8
tick,0x7ffe67f8feb4,671288966,0,0x0,8
tick,0x7ffe67f8feb4,671304964,0,0x0,8
tick,0x7ffe67f8feb4,671320969,0,0x0,8
tick,0x7ffe67f8feb4,671337125,0,0x0,8
tick,0x7ffe67f8feb4,671352630,0,0x0,8
tick,0x7ffe67f8feb4,671368555,0,0x0,8
tick,0x7ffe67f8feb4,671384566,0,0x0,8
tick,0x7ffe67f8feb4,671400737,0,0x0,8
tick,0x7ffe67f8feb4,671416583,0,0x0,8
tick,0x7ffe67f8feb4,671432553,0,0x0,8
tick,0x7ffe67f8feb4,671448562,0,0x0,8
tick,0x7ffe67f8feb4,671464569,0,0x0,8
tick,0x7ffe67f8feb4,671480625,0,0x0,8
tick,0x7ffe67f8feb4,671496573,0,0x0,8
tick,0x7ffe67f8feb4,671512016,0,0x0,8
tick,0x7ffe67f8feb4,671527582,0,0x0,8
tick,0x7ffe67f8feb4,671543484,0,0x0,8
tick,0x7ffe67f8feb4,671558639,0,0x0,8
tick,0x7ffe67f8feb4,671574602,0,0x0,8
tick,0x7ffe67f8feb4,671589840,0,0x0,8
tick,0x7ffe67f8feb4,671605599,0,0x0,8
tick,0x7ffe67f8feb4,671621530,0,0x0,8
tick,0x7ffe67f8feb4,671637635,0,0x0,8
tick,0x7ffe67f8feb4,671652877,0,0x0,8
tick,0x7ffe67f8feb4,671668455,0,0x0,8
tick,0x7ffe67f8feb4,671683702,0,0x0,8
tick,0x7ffe67f8feb4,671699604,0,0x0,8
tick,0x7ffe67f8feb4,671715595,0,0x0,8
tick,0x7ffe67f8feb4,671731610,0,0x0,8
tick,0x7ffe67f8feb4,671747606,0,0x0,8
tick,0x7ffe67f8feb4,671763606,0,0x0,8
tick,0x7ffe67f8feb4,671779612,0,0x0,8
tick,0x7ffe67f8feb4,671795612,0,0x0,8
tick,0x7ffe67f8feb4,671811624,0,0x0,8
tick,0x7ffe67f8feb4,671827650,0,0x0,8
tick,0x7ffe67f8feb4,671843720,0,0x0,8
tick,0x7ffe67f8feb4,671858908,0,0x0,8
tick,0x7ffe67f8feb4,671874327,0,0x0,8
tick,0x7ffe67f8feb4,671889748,0,0x0,8
tick,0x7ffe67f8feb4,671905516,0,0x0,8
tick,0x7ffe67f8feb4,671920867,0,0x0,8
tick,0x7ffe67f8feb4,671937124,0,0x0,8
tick,0x7ffe67f8feb4,671952385,0,0x0,8
tick,0x7ffe67f8feb4,671968009,0,0x0,8
tick,0x7ffe67f8feb4,671983724,0,0x0,8
tick,0x7ffe67f8feb4,671999285,0,0x0,8
tick,0x7ffe67f8feb4,672014734,0,0x0,8
tick,0x7ffe67f8feb4,672030517,0,0x0,8
tick,0x7ffe67f8feb4,672046166,0,0x0,8
tick,0x7ffe67f8feb4,672061877,0,0x0,8
tick,0x7ffe67f8feb4,672078222,0,0x0,8
tick,0x7ffe67f8feb4,672094291,0,0x0,8
tick,0x7ffe67f8feb4,672110103,0,0x0,8
tick,0x7ffe67f8feb4,672125611,0,0x0,8
tick,0x7ffe67f8feb4,672140861,0,0x0,8
tick,0x7ffe67f8feb4,672156254,0,0x0,8
tick,0x7ffe67f8feb4,672171589,0,0x0,8
tick,0x7ffe67f8feb4,672186575,0,0x0,8
tick,0x7ffe67f8feb4,672202554,0,0x0,8
tick,0x7ffe67f8feb4,672218583,0,0x0,8
tick,0x7ffe67f8feb4,672234624,0,0x0,8
tick,0x7ffe67f8feb4,672250329,0,0x0,8
tick,0x7ffe67f8feb4,672265290,0,0x0,8
tick,0x7ffe67f8feb4,672280678,0,0x0,8
tick,0x7ffe67f8feb4,672296453,0,0x0,8
tick,0x7ffe67f8feb4,672312446,0,0x0,8
tick,0x7ffe67f8feb4,672328434,0,0x0,8
tick,0x7ffe67f8feb4,672344067,0,0x0,8
tick,0x7ffe67f8feb4,672359662,0,0x0,8
tick,0x7ffe67f8feb4,672375355,0,0x0,8
tick,0x7ffe67f8feb4,672391171,0,0x0,8
tick,0x7ffe67f8feb4,672407013,0,0x0,8
tick,0x7ffe67f8feb4,672422327,0,0x0,8
tick,0x7ffe67f8feb4,672438314,0,0x0,8
tick,0x7ffe67f8feb4,672453770,0,0x0,8
tick,0x7ffe67f8feb4,672469758,0,0x0,8
tick,0x7ffe67f8feb4,672485822,0,0x0,8
tick,0x7ffe67f8feb4,672501781,0,0x0,8
tick,0x7ffe67f8feb4,672517520,0,0x0,8
tick,0x7ffe67f8feb4,672533461,0,0x0,8
tick,0x7ffe67f8feb4,672549300,0,0x0,8
tick,0x7ffe67f8feb4,672564883,0,0x0,8
tick,0x7ffe67f8feb4,672580200,0,0x0,8
tick,0x7ffe67f8feb4,672596196,0,0x0,8
tick,0x7ffe67f8feb4,672612131,0,0x0,8
tick,0x7ffe67f8feb4,672627843,0,0x0,8
tick,0x7ffe67f8feb4,672643103,0,0x0,8
tick,0x7ffe67f8feb4,672658977,0,0x0,8
tick,0x7ffe67f8feb4,672674789,0,0x0,8
tick,0x7ffe67f8feb4,672689856,0,0x0,8
tick,0x7ffe67f8feb4,672705476,0,0x0,8
tick,0x7ffe67f8feb4,672721332,0,0x0,8
tick,0x7ffe67f8feb4,672737146,0,0x0,8
tick,0x7ffe67f8feb4,672753179,0,0x0,8
tick,0x7ffe67f8feb4,672769176,0,0x0,8
tick,0x7ffe67f8feb4,672784480,0,0x0,8
tick,0x7ffe67f8feb4,672800037,0,0x0,8
tick,0x7ffe67f8feb4,672815554,0,0x0,8
tick,0x7ffe67f8feb4,672831002,0,0x0,8
tick,0x7ffe67f8feb4,672846353,0,0x0,8
tick,0x7ffe67f8feb4,672862151,0,0x0,8
tick,0x7ffe67f8feb4,672877290,0,0x0,8
tick,0x7ffe67f8feb4,672892872,0,0x0,8
tick,0x7ffe67f8feb4,672908474,0,0x0,8
tick,0x7ffe67f8feb4,672924376,0,0x0,8
tick,0x7ffe67f8feb4,672940318,0,0x0,8
tick,0x7ffe67f8feb4,672956241,0,0x0,8
tick,0x7ffe67f8feb4,672971744,0,0x0,8
tick,0x7ffe67f8feb4,672987036,0,0x0,8
tick,0x7ffe67f8feb4,673001815,0,0x0,8
tick,0x7ffe67f8feb4,673017828,0,0x0,8
tick,0x7ffe67f8feb4,673033654,0,0x0,8
tick,0x7ffe67f8feb4,673048946,0,0x0,8
tick,0x7ffe67f8feb4,673064581,0,0x0,8
tick,0x7ffe67f8feb4,673080036,0,0x0,8
tick,0x7ffe67f8feb4,673095821,0,0x0,8
tick,0x7ffe67f8feb4,673110928,0,0x0,8
tick,0x7ffe67f8feb4,673126699,0,0x0,8
tick,0x7ffe67f8feb4,673141799,0,0x0,8
tick,0x7ffe67f8feb4,673157396,0,0x0,8
tick,0x7ffe67f8feb4,673172909,0,0x0,8
tick,0x7ffe67f8feb4,673188113,0,0x0,8
tick,0x7ffe67f8feb4,673202915,0,0x0,8
tick,0x7ffe67f8feb4,673218870,0,0x0,8
tick,0x7ffe67f8feb4,673234189,0,0x0,8
tick,0x7ffe67f8feb4,673249822,0,0x0,8
tick,0x7ffe67f8feb4,673265516,0,0x0,8
tick,0x7ffe67f8feb4,673280866,0,0x0,8
tick,0x7ffe67f8feb4,673296814,0,0x0,8
tick,0x7ffe67f8feb4,673312824,0,0x0,8
tick,0x7ffe67f8feb4,673328798,0,0x0,8
tick,0x7ffe67f8feb4,673344341,0,0x0,8
tick,0x7ffe67f8feb4,673359813,0,0x0,8
tick,0x7ffe67f8feb4,673375871,0,0x0,8
tick,0x7ffe67f8feb4,673391886,0,0x0,8
tick,0x7ffe67f8feb4,673407870,0,0x0,8
tick,0x7ffe67f8feb4,673423323,0,0x0,8
tick,0x7ffe67f8feb4,673438909,0,0x0,8
tick,0x7ffe67f8feb4,673454320,0,0x0,8
tick,0x7ffe67f8feb4,673469876,0,0x0,8
tick,0x7ffe67f8feb4,673485879,0,0x0,8
tick,0x7ffe67f8feb4,673500809,0,0x0,8
tick,0x7ffe67f8feb4,673516836,0,0x0,8
tick,0x7ffe67f8feb4,673532786,0,0x0,8
tick,0x7ffe67f8feb4,673548789,0,0x0,8
tick,0x7ffe67f8feb4,673563882,0,0x0,8
tick,0x7ffe67f8feb4,673579890,0,0x0,8
tick,0x7ffe67f8feb4,673594899,0,0x0,8
tick,0x7ffe67f8feb4,673609903,0,0x0,8
tick,0x7ffe67f8feb4,673624929,0,0x0,8
tick,0x7ffe67f8feb4,673640929,0,0x0,8
tick,0x7ffe67f8feb4,673656460,0,0x0,8
tick,0x7ffe67f8feb4,673671481,0,0x0,8
tick,0x7ffe67f8feb4,673686925,0,0x0,8
tick,0x7ffe67f8feb4,673702941,0,0x0,8
tick,0x7ffe67f8feb4,673719054,0,0x0,8
tick,0x7ffe67f8feb4,673734984,0,0x0,8
tick,0x7ffe67f8feb4,673750976,0,0x0,8
tick,0x7ffe67f8feb4,673766685,0,0x0,8
tick,0x7ffe67f8feb4,673781815,0,0x0,8
tick,0x7ffe67f8feb4,673796971,0,0x0,8
tick,0x7ffe67f8feb4,673812659,0,0x0,8
tick,0x7ffe67f8feb4,673828633,0,0x0,8
tick,0x7ffe67f8feb4,673843958,0,0x0,8
tick,0x7ffe67f8feb4,673859936,0,0x0,8
tick,0x7ffe67f8feb4,673875943,0,0x0,8
tick,0x7ffe67f8feb4,673891943,0,0x0,8
tick,0x7ffe67f8feb4,673907945,0,0x0,8
tick,0x7ffe67f8feb4,673923966,0,0x0,8
tick,0x7ffe67f8feb4,673939942,0,0x0,8
tick,0x7ffe67f8feb4,673955280,0,0x0,8
tick,0x7ffe67f8feb4,673970744,0,0x0,8
tick,0x7ffe67f8feb4,673986771,0,0x0,8
tick,0x7ffe67f8feb4,674002347,0,0x0,8
tick,0x7ffe67f8feb4,674017283,0,0x0,8
tick,0x7ffe67f8feb4,674032933,0,0x0,8
tick,0x7ffe67f8feb4,674048549,0,0x0,8
tick,0x7ffe67f8feb4,674064206,0,0x0,8
tick,0x7ffe67f8feb4,674080000,0,0x0,8
tick,0x7ffe67f8feb4,674095736,0,0x0,8
tick,0x7ffe67f8feb4,674111117,0,0x0,8
tick,0x7ffe67f8feb4,674126573,0,0x0,8
tick,0x7ffe67f8feb4,674142206,0,0x0,8
tick,0x7ffe67f8feb4,674157702,0,0x0,8
tick,0x7ffe67f8feb4,674172647,0,0x0,8
tick,0x7ffe67f8feb4,674188654,0,0x0,8
tick,0x7ffe67f8feb4,674204568,0,0x0,8
tick,0x7ffe67f8feb4,674220566,0,0x0,8
tick,0x7ffe67f8feb4,674235904,0,0x0,8
tick,0x7ffe67f8feb4,674251182,0,0x0,8
tick,0x7ffe67f8feb4,674267276,0,0x0,8
tick,0x7ffe67f8feb4,674283019,0,0x0,8
tick,0x7ffe67f8feb4,674298956,0,0x0,8
tick,0x7ffe67f8feb4,674315098,0,0x0,8
tick,0x7ffe67f8feb4,674331006,0,0x0,8
tick,0x7ffe67f8feb4,674347261,0,0x0,8
tick,0x7ffe67f8feb4,674362719,0,0x0,8
tick,0x7ffe67f8feb4,674378008,0,0x0,8
tick,0x7ffe67f8feb4,674393509,0,0x0,8
tick,0x7ffe67f8feb4,674409071,0,0x0,8
tick,0x7ffe67f8feb4,674424255,0,0x0,8
tick,0x7ffe67f8feb4,674440105,0,0x0,8
tick,0x7ffe67f8feb4,674456126,0,0x0,8
tick,0x7ffe67f8feb4,674471791,0,0x0,8
tick,0x7ffe67f8feb4,674487556,0,0x0,8
tick,0x7ffe67f8feb4,674502954,0,0x0,8
tick,0x7ffe67f8feb4,674518857,0,0x0,8
tick,0x7ffe67f8feb4,674534472,0,0x0,8
tick,0x7ffe67f8feb4,674549877,0,0x0,8
tick,0x7ffe67f8feb4,674565641,0,0x0,8
tick,0x7ffe67f8feb4,674580971,0,0x0,8
tick,0x7ffe67f8feb4,674596385,0,0x0,8
tick,0x7ffe67f8feb4,674611431,0,0x0,8
tick,0x7ffe67f8feb4,674626681,0,0x0,8
tick,0x7ffe67f8feb4,674642620,0,0x0,8
tick,0x7ffe67f8feb4,674657790,0,0x0,8
tick,0x7ffe67f8feb4,674673539,0,0x0,8
tick,0x7ffe67f8feb4,674689451,0,0x0,8
tick,0x7ffe67f8feb4,674704710,0,0x0,8
tick,0x7ffe67f8feb4,674720528,0,0x0,8
tick,0x7ffe67f8feb4,674736545,0,0x0,8
tick,0x7ffe67f8feb4,674751908,0,0x0,8
tick,0x7ffe67f8feb4,674767858,0,0x0,8
tick,0x7ffe67f8feb4,674783080,0,0x0,8
tick,0x7ffe67f8feb4,674798892,0,0x0,8
tick,0x7ffe67f8feb4,674814093,0,0x0,8
tick,0x7ffe67f8feb4,674829541,0,0x0,8
tick,0x7ffe67f8feb4,674845081,0,0x0,8
tick,0x7ffe67f8feb4,674861107,0,0x0,8
tick,0x7ffe67f8feb4,674877165,0,0x0,8
tick,0x7ffe67f8feb4,674893113,0,0x0,8
tick,0x7ffe67f8feb4,674909089,0,0x0,8
tick,0x7ffe67f8feb4,674925106,0,0x0,8
tick,0x7ffe67f8feb4,674941117,0,0x0,8
tick,0x7ffe67f8feb4,674957101,0,0x0,8
tick,0x7ffe67f8feb4,674973115,0,0x0,8
tick,0x7ffe67f8feb4,674988688,0,0x0,8
tick,0x7ffe67f8feb4,675004685,0,0x0,8
tick,0x7ffe67f8feb4,675020727,0,0x0,8
tick,0x7ffe67f8feb4,675035875,0,0x0,8
tick,0x7ffe67f8feb4,675051713,0,0x0,8
tick,0x7ffe67f8feb4,675067114,0,0x0,8
tick,0x7ffe67f8feb4,675082344,0,0x0,8
tick,0x7ffe67f8feb4,675098090,0,0x0,8
tick,0x7ffe67f8feb4,675113611,0,0x0,8
tick,0x7ffe67f8feb4,675129872,0,0x0,8
tick,0x7ffe67f8feb4,675144935,0,0x0,8
tick,0x7ffe67f8feb4,675160526,0,0x0,8
tick,0x7ffe67f8feb4,675176471,0,0x0,8
tick,0x7ffe67f8feb4,675192349,0,0x0,8
tick,0x7ffe67f8feb4,675208167,0,0x0,8
tick,0x7ffe67f8feb4,675223423,0,0x0,8
tick,0x7ffe67f8feb4,675239168,0,0x0,8
tick,0x7ffe67f8feb4,675255146,0,0x0,8
tick,0x7ffe67f8feb4,675271145,0,0x0,8
tick,0x7ffe67f8feb4,675287186,0,0x0,8
tick,0x7ffe67f8feb4,675303227,0,0x0,8
tick,0x7ffe67f8feb4,675319146,0,0x0,8
tick,0x7ffe67f8feb4,675335143,0,0x0,8
tick,0x7ffe67f8feb4,675351158,0,0x0,8
tick,0x7ffe67f8feb4,675367104,0,0x0,8
tick,0x7ffe67f8feb4,675383161,0,0x0,8
tick,0x7ffe67f8feb4,675399216,0,0x0,8
tick,0x7ffe67f8feb4,675415169,0,0x0,8
tick,0x7ffe67f8feb4,675431197,0,0x0,8
tick,0x7ffe67f8feb4,675447198,0,0x0,8
tick,0x7ffe67f8feb4,675462393,0,0x0,8
tick,0x7ffe67f8feb4,675478176,0,0x0,8
tick,0x7ffe67f8feb4,675494205,0,0x0,8
tick,0x7ffe67f8feb4,675510210,0,0x0,8
tick,0x7ffe67f8feb4,675526257,0,0x0,8
tick,0x7ffe67f8feb4,675541353,0,0x0,8
tick,0x7ffe67f8feb4,675557020,0,0x0,8
tick,0x7ffe67f8feb4,675572250,0,0x0,8
tick,0x7ffe67f8feb4,675588232,0,0x0,8
tick,0x7ffe67f8feb4,675604223,0,0x0,8
tick,0x7ffe67f8feb4,675620216,0,0x0,8
tick,0x7ffe67f8feb4,675636215,0,0x0,8
tick,0x7ffe67f8feb4,675652252,0,0x0,8
tick,0x7ffe67f8feb4,675668373,0,0x0,8
tick,0x7ffe67f8feb4,675683630,0,0x0,8
tick,0x7ffe67f8feb4,675699709,0,0x0,8
tick,0x7ffe67f8feb4,675715119,0,0x0,8
tick,0x7ffe67f8feb4,675731182,0,0x0,8
tick,0x7ffe67f8feb4,675746477,0,0x0,8
tick,0x7ffe67f8feb4,675762052,0,0x0,8
tick,0x7ffe67f8feb4,675777176,0,0x0,8
tick,0x7ffe67f8feb4,675793030,0,0x0,8
tick,0x7ffe67f8feb4,675808305,0,0x0,8
tick,0x7ffe67f8feb4,675823639,0,0x0,8
tick,0x7ffe67f8feb4,675839325,0,0x0,8
tick,0x7ffe67f8feb4,675855321,0,0x0,8
tick,0x7ffe67f8feb4,675870973,0,0x0,8
tick,0x7ffe67f8feb4,675886322,0,0x0,8
tick,0x7ffe67f8feb4,675901832,0,0x0,8
tick,0x7ffe67f8feb4,675917525,0,0x0,8
tick,0x7ffe67f8feb4,675933249,0,0x0,8
tick,0x7ffe67f8feb4,675948934,0,0x0,8
tick,0x7ffe67f8feb4,675964706,0,0x0,8
tick,0x7ffe67f8feb4,675980717,0,0x0,8
tick,0x7ffe67f8feb4,675996256,0,0x0,8
tick,0x7ffe67f8feb4,676012275,0,0x0,8
tick,0x7ffe67f8feb4,676028284,0,0x0,8
tick,0x7ffe67f8feb4,676044309,0,0x0,8
tick,0x7ffe67f8feb4,676060120,0,0x0,8
tick,0x7ffe67f8feb4,676076141,0,0x0,8
tick,0x7ffe67f8feb4,676092149,0,0x0,8
tick,0x7ffe67f8feb4,676108193,0,0x0,8
tick,0x7ffe67f8feb4,676124193,0,0x0,8
tick,0x7ffe67f8feb4,676140202,0,0x0,8
tick,0x7ffe67f8feb4,676156251,0,0x0,8
tick,0x7ffe67f8feb4,676171325,0,0x0,8
tick,0x7ffe67f8feb4,676187121,0,0x0,8
tick,0x7ffe67f8feb4,676202481,0,0x0,8
tick,0x7ffe67f8feb4,676218113,0,0x0,8
tick,0x7ffe67f8feb4,676256540,0,0x0,8
tick,0x7ffe67f8feb4,676266219,0,0x0,8
tick,0x7ffe67f8feb4,676282140,0,0x0,8
tick,0x7ffe67f8feb4,676301492,0,0x0,8
tick,0x7ffe67f8feb4,676313177,0,0x0,8
tick,0x7ffe67f8feb4,676329135,0,0x0,8
tick,0x7ffe67f8feb4,676345131,0,0x0,8
tick,0x7ffe67f8feb4,676361126,0,0x0,8
tick,0x7ffe67f8feb4,676377137,0,0x0,8
tick,0x7ffe67f8feb4,676393138,0,0x0,8
tick,0x7ffe67f8feb4,676409155,0,0x0,8
tick,0x7ffe67f8feb4,676425156,0,0x0,8
tick,0x7ffe67f8feb4,676441149,0,0x0,8
tick,0x7ffe67f8feb4,676457164,0,0x0,8
tick,0x7ffe67f8feb4,676473190,0,0x0,8
tick,0x7ffe67f8feb4,676489843,0,0x0,8
tick,0x7ffe67f8feb4,676505468,0,0x0,8
tick,0x7ffe67f8feb4,676521156,0,0x0,8
tick,0x7ffe67f8feb4,676537158,0,0x0,8
tick,0x7ffe67f8feb4,676552328,0,0x0,8
tick,0x7ffe67f8feb4,676568171,0,0x0,8
tick,0x7ffe67f8feb4,676583309,0,0x0,8
tick,0x7ffe67f8feb4,676599184,0,0x0,8
tick,0x7ffe67f8feb4,676614186,0,0x0,8
tick,0x7ffe67f8feb4,676629387,0,0x0,8
tick,0x7ffe67f8feb4,676645243,0,0x0,8
tick,0x7ffe67f8feb4,676661151,0,0x0,8
tick,0x7ffe67f8feb4,676677209,0,0x0,8
tick,0x7ffe67f8feb4,676693226,0,0x0,8
tick,0x7ffe67f8feb4,676709221,0,0x0,8
tick,0x7ffe67f8feb4,676725225,0,0x0,8
tick,0x7ffe67f8feb4,676741229,0,0x0,8
tick,0x7ffe67f8feb4,676757294,0,0x0,8
tick,0x7ffe67f8feb4,676773368,0,0x0,8
tick,0x7ffe67f8feb4,676789323,0,0x0,8
tick,0x7ffe67f8feb4,676805403,0,0x0,8
tick,0x7ffe67f8feb4,676821263,0,0x0,8
tick,0x7ffe67f8feb4,676837356,0,0x0,8
tick,0x7ffe67f8feb4,676853265,0,0x0,8
tick,0x7ffe67f8feb4,676869256,0,0x0,8
tick,0x7ffe67f8feb4,676885260,0,0x0,8
tick,0x7ffe67f8feb4,676901264,0,0x0,8
tick,0x7ffe67f8feb4,676917287,0,0x0,8
tick,0x7ffe67f8feb4,676933256,0,0x0,8
tick,0x7ffe67f8feb4,676949268,0,0x0,8
tick,0x7ffe67f8feb4,676965238,0,0x0,8
tick,0x7ffe67f8feb4,676981258,0,0x0,8
tick,0x7ffe67f8feb4,676996693,0,0x0,8
tick,0x7ffe67f8feb4,677012686,0,0x0,8
tick,0x7ffe67f8feb4,677028744,0,0x0,8
tick,0x7ffe67f8feb4,677044726,0,0x0,8
tick,0x7ffe67f8feb4,677059743,0,0x0,8
tick,0x7ffe67f8feb4,677075110,0,0x0,8
tick,0x7ffe67f8feb4,677090808,0,0x0,8
tick,0x7ffe67f8feb4,677106481,0,0x0,8
tick,0x7ffe67f8feb4,677122121,0,0x0,8
tick,0x7ffe67f8feb4,677136994,0,0x0,8
tick,0x7ffe67f8feb4,677152461,0,0x0,8
tick,0x7ffe67f8feb4,677168307,0,0x0,8
tick,0x7ffe67f8feb4,677183989,0,0x0,8
tick,0x7ffe67f8feb4,677199400,0,0x0,8
tick,0x7ffe67f8feb4,677214729,0,0x0,8
tick,0x7ffe67f8feb4,677230055,0,0x0,8
tick,0x7ffe67f8feb4,677245683,0,0x0,8
tick,0x7ffe67f8feb4,677261639,0,0x0,8
tick,0x7ffe67f8feb4,677277636,0,0x0,8
tick,0x7ffe67f8feb4,677292879,0,0x0,8
tick,0x7ffe67f8feb4,677308357,0,0x0,8
tick,0x7ffe67f8feb4,677324350,0,0x0,8
tick,0x7ffe67f8feb4,677340344,0,0x0,8
tick,0x7ffe67f8feb4,677356334,0,0x0,8
tick,0x7ffe67f8feb4,677372314,0,0x0,8
tick,0x7ffe67f8feb4,677388296,0,0x0,8
tick,0x7ffe67f8feb4,677404310,0,0x0,8
tick,0x7ffe67f8feb4,677420314,0,0x0,8
tick,0x7ffe67f8feb4,677436309,0,0x0,8
tick,0x7ffe67f8feb4,677452324,0,0x0,8
tick,0x7ffe67f8feb4,677468404,0,0x0,8
tick,0x7ffe67f8feb4,677483528,0,0x0,8
tick,0x7ffe67f8feb4,677499484,0,0x0,8
tick,0x7ffe67f8feb4,677515370,0,0x0,8
tick,0x7ffe67f8feb4,677531593,0,0x0,8
tick,0x7ffe67f8feb4,677546776,0,0x0,8
tick,0x7ffe67f8feb4,677562124,0,0x0,8
tick,0x7ffe67f8feb4,677577365,0,0x0,8
tick,0x7ffe67f8feb4,677592584,0,0x0,8
tick,0x7ffe67f8feb4,677608345,0,0x0,8
tick,0x7ffe67f8feb4,677623796,0,0x0,8
tick,0x7ffe67f8feb4,677639709,0,0x0,8
tick,0x7ffe67f8feb4,677655123,0,0x0,8
tick,0x7ffe67f8feb4,677671056,0,0x0,8
tick,0x7ffe67f8feb4,677686727,0,0x0,8
tick,0x7ffe67f8feb4,677702372,0,0x0,8
tick,0x7ffe67f8feb4,677718235,0,0x0,8
tick,0x7ffe67f8feb4,677734415,0,0x0,8
tick,0x7ffe67f8feb4,677749283,0,0x0,8
tick,0x7ffe67f8feb4,677765722,0,0x0,8
tick,0x7ffe67f8feb4,677781436,0,0x0,8
tick,0x7ffe67f8feb4,677797744,0,0x0,8
tick,0x7ffe67f8feb4,677813435,0,0x0,8
tick,0x7ffe67f8feb4,677829387,0,0x0,8
tick,0x7ffe67f8feb4,677845387,0,0x0,8
tick,0x7ffe67f8feb4,677860514,0,0x0,8
tick,0x7ffe67f8feb4,677876383,0,0x0,8
tick,0x7ffe67f8feb4,677892446,0,0x0,8
tick,0x7ffe67f8feb4,677908721,0,0x0,8
tick,0x7ffe67f8feb4,677924000,0,0x0,8
tick,0x7ffe67f8feb4,677939617,0,0x0,8
tick,0x7ffe67f8feb4,677954700,0,0x0,8
tick,0x7ffe67f8feb4,677970515,0,0x0,8
tick,0x7ffe67f8feb4,677985681,0,0x0,8
tick,0x7ffe67f8feb4,678001542,0,0x0,8
tick,0x7ffe67f8feb4,678017403,0,0x0,8
tick,0x7ffe67f8feb4,678032534,0,0x0,8
tick,0x7ffe67f8feb4,678048462,0,0x0,8
tick,0x7ffe67f8feb4,678064331,0,0x0,8
tick,0x7ffe67f8feb4,678079468,0,0x0,8
tick,0x7ffe67f8feb4,678094744,0,0x0,8
tick,0x7ffe67f8feb4,678110366,0,0x0,8
tick,0x7ffe67f8feb4,678125579,0,0x0,8
tick,0x7ffe67f8feb4,678140870,0,0x0,8
tick,0x7ffe67f8feb4,678156324,0,0x0,8
tick,0x7ffe67f8feb4,678172020,0,0x0,8
tick,0x7ffe67f8feb4,678187640,0,0x0,8
tick,0x7ffe67f8feb4,678203058,0,0x0,8
tick,0x7ffe67f8feb4,678218920,0,0x0,8
tick,0x7ffe67f8feb4,678234847,0,0x0,8
tick,0x7ffe67f8feb4,678249435,0,0x0,8
tick,0x7ffe67f8feb4,678264949,0,0x0,8
tick,0x7ffe67f8feb4,678280613,0,0x0,8
tick,0x7ffe67f8feb4,678296911,0,0x0,8
tick,0x7ffe67f8feb4,678312722,0,0x0,8
tick,0x7ffe67f8feb4,678328700,0,0x0,8
tick,0x7ffe67f8feb4,678344663,0,0x0,8
tick,0x7ffe67f8feb4,678360665,0,0x0,8
tick,0x7ffe67f8feb4,678376665,0,0x0,8
tick,0x7ffe67f8feb4,678392660,0,0x0,8
tick,0x7ffe67f8feb4,678408679,0,0x0,8
tick,0x7ffe67f8feb4,678424708,0,0x0,8
tick,0x7ffe67f8feb4,678439951,0,0x0,8
tick,0x7ffe67f8feb4,678455662,0,0x0,8
tick,0x7ffe67f8feb4,678471534,0,0x0,8
tick,0x7ffe67f8feb4,678487589,0,0x0,8
tick,0x7ffe67f8feb4,678503056,0,0x0,8
tick,0x7ffe67f8feb4,678518663,0,0x0,8
tick,0x7ffe67f8feb4,678534524,0,0x0,8
tick,0x7ffe67f8feb4,678549677,0,0x0,8
tick,0x7ffe67f8feb4,678565533,0,0x0,8
tick,0x7ffe67f8feb4,678580671,0,0x0,8
tick,0x7ffe67f8feb4,678596753,0,0x0,8
tick,0x7ffe67f8feb4,678611702,0,0x0,8
tick,0x7ffe67f8feb4,678627675,0,0x0,8
tick,0x7ffe67f8feb4,678642838,0,0x0,8
tick,0x7ffe67f8feb4,678658824,0,0x0,8
tick,0x7ffe67f8feb4,678674787,0,0x0,8
tick,0x7ffe67f8feb4,678690289,0,0x0,8
tick,0x7ffe67f8feb4,678705279,0,0x0,8
tick,0x7ffe67f8feb4,678720578,0,0x0,8
tick,0x7ffe67f8feb4,678735917,0,0x0,8
tick,0x7ffe67f8feb4,678752036,0,0x0,8
tick,0x7ffe67f8feb4,678767348,0,0x0,8
tick,0x7ffe67f8feb4,678782633,0,0x0,8
tick,0x7ffe67f8feb4,678797662,0,0x0,8
tick,0x7ffe67f8feb4,678813707,0,0x0,8
tick,0x7ffe67f8feb4,678829564,0,0x0,8
tick,0x7ffe67f8feb4,678845237,0,0x0,8
tick,0x7ffe67f8feb4,678860597,0,0x0,8
tick,0x7ffe67f8feb4,678876463,0,0x0,8
tick,0x7ffe67f8feb4,678891638,0,0x0,8
tick,0x7ffe67f8feb4,678907589,0,0x0,8
tick,0x7ffe67f8feb4,678922631,0,0x0,8
tick,0x7ffe67f8feb4,678938812,0,0x0,8
tick,0x7ffe67f8feb4,678954823,0,0x0,8
tick,0x7ffe67f8feb4,678970833,0,0x0,8
tick,0x7ffe67f8feb4,678986606,0,0x0,8
tick,0x7ffe67f8feb4,679001886,0,0x0,8
tick,0x7ffe67f8feb4,679016823,0,0x0,8
tick,0x7ffe67f8feb4,679032717,0,0x0,8
tick,0x7ffe67f8feb4,679048231,0,0x0,8
tick,0x7ffe67f8feb4,679063565,0,0x0,8
tick,0x7ffe67f8feb4,679079531,0,0x0,8
tick,0x7ffe67f8feb4,679094827,0,0x0,8
tick,0x7ffe67f8feb4,679110962,0,0x0,8
tick,0x7ffe67f8feb4,679125731,0,0x0,8
tick,0x7ffe67f8feb4,679141780,0,0x0,8
tick,0x7ffe67f8feb4,679157169,0,0x0,8
tick,0x7ffe67f8feb4,679172901,0,0x0,8
tick,0x7ffe67f8feb4,679194503,0,0x0,8
tick,0x7ffe67f8feb4,679203779,0,0x0,8
tick,0x7ffe67f8feb4,679219950,0,0x0,8
tick,0x7ffe67f8feb4,679236464,0,0x0,8
tick,0x7ffe67f8feb4,679251788,0,0x0,8
tick,0x7ffe67f8feb4,679267809,0,0x0,8
tick,0x7ffe67f8feb4,679283805,0,0x0,8
tick,0x7ffe67f8feb4,679299778,0,0x0,8
tick,0x7ffe67f8feb4,679315900,0,0x0,8
tick,0x7ffe67f8feb4,679332103,0,0x0,8
tick,0x7ffe67f8feb4,679348073,0,0x0,8
tick,0x7ffe67f8feb4,679363909,0,0x0,8
tick,0x7ffe67f8feb4,679379823,0,0x0,8
tick,0x7ffe67f8feb4,679395813,0,0x0,8
tick,0x7ffe67f8feb4,679410822,0,0x0,8
tick,0x7ffe67f8feb4,679426859,0,0x0,8
tick,0x7ffe67f8feb4,679442809,0,0x0,8
tick,0x7ffe67f8feb4,679458857,0,0x0,8
tick,0x7ffe67f8feb4,679474786,0,0x0,8
tick,0x7ffe67f8feb4,679490497,0,0x0,8
tick,0x7ffe67f8feb4,679505719,0,0x0,8
tick,0x7ffe67f8feb4,679521542,0,0x0,8
tick,0x7ffe67f8feb4,679537669,0,0x0,8
tick,0x7ffe67f8feb4,679553049,0,0x0,8
tick,0x7ffe67f8feb4,679569039,0,0x0,8
tick,0x7ffe67f8feb4,679584745,0,0x0,8
tick,0x7ffe67f8feb4,679600554,0,0x0,8
tick,0x7ffe67f8feb4,679615947,0,0x0,8
tick,0x7ffe67f8feb4,679631524,0,0x0,8
tick,0x7ffe67f8feb4,679646840,0,0x0,8
tick,0x7ffe67f8feb4,679662712,0,0x0,8
tick,0x7ffe67f8feb4,679678702,0,0x0,8
tick,0x7ffe67f8feb4,679694719,0,0x0,8
tick,0x7ffe67f8feb4,679710727,0,0x0,8
tick,0x7ffe67f8feb4,679726749,0,0x0,8
tick,0x7ffe67f8feb4,679742795,0,0x0,8
tick,0x7ffe67f8feb4,679758177,0,0x0,8
tick,0x7ffe67f8feb4,679773909,0,0x0,8
tick,0x7ffe67f8feb4,679789835,0,0x0,8
tick,0x7ffe67f8feb4,679805523,0,0x0,8
tick,0x7ffe67f8feb4,679820670,0,0x0,8
tick,0x7ffe67f8feb4,679836680,0,0x0,8
tick,0x7ffe67f8feb4,679852203,0,0x0,8
tick,0x7ffe67f8feb4,679868208,0,0x0,8
tick,0x7ffe67f8feb4,679883559,0,0x0,8
tick,0x7ffe67f8feb4,679899254,0,0x0,8
tick,0x7ffe67f8feb4,679915280,0,0x0,8
tick,0x7ffe67f8feb4,679930523,0,0x0,8
tick,0x7ffe67f8feb4,679945853,0,0x0,8
tick,0x7ffe67f8feb4,679961895,0,0x0,8
tick,0x7ffe67f8feb4,679977893,0,0x0,8
tick,0x7ffe67f8feb4,679993876,0,0x0,8
tick,0x7ffe67f8feb4,680009904,0,0x0,8
tick,0x7ffe67f8feb4,680025909,0,0x0,8
tick,0x7ffe67f8feb4,680041085,0,0x0,8
tick,0x7ffe67f8feb4,680056477,0,0x0,8
tick,0x7ffe67f8feb4,680071854,0,0x0,8
tick,0x7ffe67f8feb4,680087441,0,0x0,8
tick,0x7ffe67f8feb4,680102903,0,0x0,8
tick,0x7ffe67f8feb4,680118661,0,0x0,8
tick,0x7ffe67f8feb4,680134226,0,0x0,8
tick,0x7ffe67f8feb4,680149663,0,0x0,8
tick,0x7ffe67f8feb4,680166206,0,0x0,8
tick,0x7ffe67f8feb4,680182501,0,0x0,8
tick,0x7ffe67f8feb4,680197758,0,0x0,8
tick,0x7ffe67f8feb4,680213048,0,0x0,8
tick,0x7ffe67f8feb4,680228248,0,0x0,8
tick,0x7ffe67f8feb4,680243287,0,0x0,8
tick,0x7ffe67f8feb4,680259470,0,0x0,8
tick,0x7ffe67f8feb4,680276362,0,0x0,8
tick,0x7ffe67f8feb4,680291489,0,0x0,8
tick,0x7ffe67f8feb4,680307141,0,0x0,8
tick,0x7ffe67f8feb4,680323170,0,0x0,8
tick,0x7ffe67f8feb4,680339144,0,0x0,8
tick,0x7ffe67f8feb4,680355193,0,0x0,8
tick,0x7ffe67f8feb4,680370148,0,0x0,8
tick,0x7ffe67f8feb4,680386040,0,0x0,8
tick,0x7ffe67f8feb4,680401981,0,0x0,8
tick,0x7ffe67f8feb4,680417673,0,0x0,8
tick,0x7ffe67f8feb4,680433696,0,0x0,8
tick,0x7ffe67f8feb4,680449733,0,0x0,8
tick,0x7ffe67f8feb4,680465675,0,0x0,8
tick,0x7ffe67f8feb4,680481689,0,0x0,8
tick,0x7ffe67f8feb4,680497665,0,0x0,8
tick,0x7ffe67f8feb4,680512881,0,0x0,8
tick,0x7ffe67f8feb4,680528783,0,0x0,8
tick,0x7ffe67f8feb4,680544965,0,0x0,8
tick,0x7ffe67f8feb4,680560704,0,0x0,8
tick,0x7ffe67f8feb4,680576915,0,0x0,8
tick,0x7ffe67f8feb4,680592829,0,0x0,8
tick,0x7ffe67f8feb4,680608844,0,0x0,8
tick,0x7ffe67f8feb4,680624672,0,0x0,8
tick,0x7ffe67f8feb4,680640691,0,0x0,8
tick,0x7ffe67f8feb4,680656696,0,0x0,8
tick,0x7ffe67f8feb4,680671977,0,0x0,8
tick,0x7ffe67f8feb4,680687340,0,0x0,8
tick,0x7ffe67f8feb4,680702753,0,0x0,8
tick,0x7ffe67f8feb4,680718763,0,0x0,8
tick,0x7ffe67f8feb4,680733821,0,0x0,8
tick,0x7ffe67f8feb4,680749741,0,0x0,8
tick,0x7ffe67f8feb4,680764751,0,0x0,8
tick,0x7ffe67f8feb4,680780752,0,0x0,8
tick,0x7ffe67f8feb4,680795979,0,0x0,8
tick,0x7ffe67f8feb4,680811758,0,0x0,8
tick,0x7ffe67f8feb4,680827796,0,0x0,8
tick,0x7ffe67f8feb4,680843793,0,0x0,8
tick,0x7ffe67f8feb4,680859131,0,0x0,8
tick,0x7ffe67f8feb4,680874838,0,0x0,8
tick,0x7ffe67f8feb4,680890903,0,0x0,8
tick,0x7ffe67f8feb4,680905992,0,0x0,8
tick,0x7ffe67f8feb4,680921034,0,0x0,8
tick,0x7ffe67f8feb4,680936989,0,0x0,8
tick,0x7ffe67f8feb4,680952998,0,0x0,8
tick,0x7ffe67f8feb4,680968983,0,0x0,8
tick,0x7ffe67f8feb4,680985001,0,0x0,8
tick,0x7ffe67f8feb4,681000978,0,0x0,8
tick,0x7ffe67f8feb4,681016537,0,0x0,8
tick,0x7ffe67f8feb4,681032484,0,0x0,8
tick,0x7ffe67f8feb4,681048485,0,0x0,8
tick,0x7ffe67f8feb4,681063819,0,0x0,8
tick,0x7ffe67f8feb4,681078990,0,0x0,8
tick,0x7ffe67f8feb4,681095020,0,0x0,8
tick,0x7ffe67f8feb4,681110493,0,0x0,8
tick,0x7ffe67f8feb4,681126102,0,0x0,8
tick,0x7ffe67f8feb4,681141058,0,0x0,8
tick,0x7ffe67f8feb4,681157034,0,0x0,8
tick,0x7ffe67f8feb4,681173085,0,0x0,8
tick,0x7ffe67f8feb4,681188212,0,0x0,8
tick,0x7ffe67f8feb4,681203931,0,0x0,8
tick,0x7ffe67f8feb4,681219267,0,0x0,8
tick,0x7ffe67f8feb4,681234886,0,0x0,8
tick,0x7ffe67f8feb4,681250317,0,0x0,8
tick,0x7ffe67f8feb4,681265133,0,0x0,8
tick,0x7ffe67f8feb4,681280664,0,0x0,8
tick,0x7ffe67f8feb4,681296286,0,0x0,8
tick,0x7ffe67f8feb4,681311396,0,0x0,8
tick,0x7ffe67f8feb4,681327410,0,0x0,8
tick,0x7ffe67f8feb4,681343364,0,0x0,8
tick,0x7ffe67f8feb4,681359393,0,0x0,8
tick,0x7ffe67f8feb4,681374078,0,0x0,8
tick,0x7ffe67f8feb4,681389456,0,0x0,8
tick,0x7ffe67f8feb4,681405098,0,0x0,8
tick,0x7ffe67f8feb4,681420467,0,0x0,8
tick,0x7ffe67f8feb4,681436052,0,0x0,8
tick,0x7ffe67f8feb4,681451411,0,0x0,8
tick,0x7ffe67f8feb4,681467505,0,0x0,8
tick,0x7ffe67f8feb4,681482904,0,0x0,8
tick,0x7ffe67f8feb4,681498901,0,0x0,8
tick,0x7ffe67f8feb4,681514212,0,0x0,8
tick,0x7ffe67f8feb4,681529743,0,0x0,8
tick,0x7ffe67f8feb4,681545634,0,0x0,8
tick,0x7ffe67f8feb4,681561019,0,0x0,8
tick,0x7ffe67f8feb4,681576577,0,0x0,8
tick,0x7ffe67f8feb4,681591533,0,0x0,8
tick,0x7ffe67f8feb4,681607040,0,0x0,8
tick,0x7ffe67f8feb4,681622665,0,0x0,8
tick,0x7ffe67f8feb4,681638038,0,0x0,8
tick,0x7ffe67f8feb4,681653507,0,0x0,8
tick,0x7ffe67f8feb4,681669292,0,0x0,8
tick,0x7ffe67f8feb4,681684435,0,0x0,8
tick,0x7ffe67f8feb4,681700114,0,0x0,8
tick,0x7ffe67f8feb4,681716130,0,0x0,8
tick,0x7ffe67f8feb4,681732256,0,0x0,8
tick,0x7ffe67f8feb4,681748252,0,0x0,8
tick,0x7ffe67f8feb4,681763900,0,0x0,8
tick,0x7ffe67f8feb4,681779975,0,0x0,8
tick,0x7ffe67f8feb4,681795878,0,0x0,8
tick,0x7ffe67f8feb4,681811221,0,0x0,8
tick,0x7ffe67f8feb4,681826710,0,0x0,8
tick,0x7ffe67f8feb4,681841821,0,0x0,8
tick,0x7ffe67f8feb4,681857708,0,0x0,8
tick,0x7ffe67f8feb4,681873336,0,0x0,8
tick,0x7ffe67f8feb4,681888448,0,0x0,8
tick,0x7ffe67f8feb4,681904152,0,0x0,8
tick,0x7ffe67f8feb4,681920088,0,0x0,8
tick,0x7ffe67f8feb4,681934905,0,0x0,8
tick,0x7ffe67f8feb4,681950389,0,0x0,8
tick,0x7ffe67f8feb4,681965940,0,0x0,8
tick,0x7ffe67f8feb4,681981176,0,0x0,8
tick,0x7ffe67f8feb4,681997253,0,0x0,8
tick,0x7ffe67f8feb4,682012435,0,0x0,8
tick,0x7ffe67f8feb4,682028338,0,0x0,8
tick,0x7ffe67f8feb4,682043912,0,0x0,8
tick,0x7ffe67f8feb4,682058828,0,0x0,8
tick,0x7ffe67f8feb4,682074175,0,0x0,8
tick,0x7ffe67f8feb4,682089553,0,0x0,8
tick,0x7ffe67f8feb4,682105313,0,0x0,8
tick,0x7ffe67f8feb4,682120847,0,0x0,8
tick,0x7ffe67f8feb4,682136333,0,0x0,8
tick,0x7ffe67f8feb4,682151858,0,0x0,8
tick,0x7ffe67f8feb4,682167705,0,0x0,8
tick,0x7ffe67f8feb4,682183183,0,0x0,8
tick,0x7ffe67f8feb4,682198887,0,0x0,8
tick,0x7ffe67f8feb4,682215008,0,0x0,8
tick,0x7ffe67f8feb4,682230228,0,0x0,8
tick,0x7ffe67f8feb4,682246043,0,0x0,8
tick,0x7ffe67f8feb4,682262085,0,0x0,8
tick,0x7ffe67f8feb4,682277607,0,0x0,8
tick,0x7ffe67f8feb4,682293158,0,0x0,8
tick,0x7ffe67f8feb4,682308195,0,0x0,8
tick,0x7ffe67f8feb4,682324288,0,0x0,8
tick,0x7ffe67f8feb4,682339760,0,0x0,8
tick,0x7ffe67f8feb4,682354714,0,0x0,8
tick,0x7ffe67f8feb4,682370711,0,0x0,8
tick,0x7ffe67f8feb4,682386706,0,0x0,8
tick,0x7ffe67f8feb4,682401698,0,0x0,8
tick,0x7ffe67f8feb4,682417767,0,0x0,8
tick,0x7ffe67f8feb4,682434031,0,0x0,8
tick,0x7ffe67f8feb4,682449416,0,0x0,8
tick,0x7ffe67f8feb4,682464958,0,0x0,8
tick,0x7ffe67f8feb4,682479684,0,0x0,8
tick,0x7ffe67f8feb4,682495397,0,0x0,8
tick,0x7ffe67f8feb4,682510914,0,0x0,8
tick,0x7ffe67f8feb4,682525996,0,0x0,8
tick,0x7ffe67f8feb4,682542113,0,0x0,8
tick,0x7ffe67f8feb4,682556652,0,0x0,8
tick,0x7ffe67f8feb4,682572143,0,0x0,8
tick,0x7ffe67f8feb4,682587286,0,0x0,8
tick,0x7ffe67f8feb4,682603381,0,0x0,8
tick,0x7ffe67f8feb4,682619233,0,0x0,8
tick,0x7ffe67f8feb4,682634562,0,0x0,8
tick,0x7ffe67f8feb4,682650186,0,0x0,8
tick,0x7ffe67f8feb4,682665548,0,0x0,8
tick,0x7ffe67f8feb4,682680758,0,0x0,8
tick,0x7ffe67f8feb4,682696752,0,0x0,8
tick,0x7ffe67f8feb4,682712137,0,0x0,8
tick,0x7ffe67f8feb4,682727945,0,0x0,8
tick,0x7ffe67f8feb4,682743040,0,0x0,8
tick,0x7ffe67f8feb4,682758961,0,0x0,8
tick,0x7ffe67f8feb4,682774907,0,0x0,8
tick,0x7ffe67f8feb4,682790181,0,0x0,8
tick,0x7ffe67f8feb4,682805107,0,0x0,8
tick,0x7ffe67f8feb4,682821168,0,0x0,8
tick,0x7ffe67f8feb4,682837351,0,0x0,8
tick,0x7ffe67f8feb4,682852704,0,0x0,8
tick,0x7ffe67f8feb4,682868704,0,0x0,8
tick,0x7ffe67f8feb4,682884467,0,0x0,8
tick,0x7ffe67f8feb4,682900731,0,0x0,8
tick,0x7ffe67f8feb4,682916777,0,0x0,8
tick,0x7ffe67f8feb4,682932228,0,0x0,8
tick,0x7ffe67f8feb4,682947934,0,0x0,8
tick,0x7ffe67f8feb4,682963898,0,0x0,8
tick,0x7ffe67f8feb4,682979775,0,0x0,8
tick,0x7ffe67f8feb4,682995836,0,0x0,8
tick,0x7ffe67f8feb4,683011592,0,0x0,8
tick,0x7ffe67f8feb4,683027075,0,0x0,8
tick,0x7ffe67f8feb4,683042600,0,0x0,8
tick,0x7ffe67f8feb4,683058306,0,0x0,8
tick,0x7ffe67f8feb4,683074175,0,0x0,8
tick,0x7ffe67f8feb4,683089687,0,0x0,8
tick,0x7ffe67f8feb4,683105105,0,0x0,8
tick,0x7ffe67f8feb4,683121029,0,0x0,8
tick,0x7ffe67f8feb4,683136111,0,0x0,8
tick,0x7ffe67f8feb4,683151328,0,0x0,8
tick,0x7ffe67f8feb4,683166719,0,0x0,8
tick,0x7ffe67f8feb4,683182026,0,0x0,8
tick,0x7ffe67f8feb4,683197764,0,0x0,8
tick,0x7ffe67f8feb4,683212997,0,0x0,8
tick,0x7ffe67f8feb4,683228243,0,0x0,8
tick,0x7ffe67f8feb4,683243961,0,0x0,8
tick,0x7ffe67f8feb4,683259919,0,0x0,8
tick,0x7ffe67f8feb4,683275527,0,0x0,8
tick,0x7ffe67f8feb4,683290948,0,0x0,8
tick,0x7ffe67f8feb4,683306246,0,0x0,8
tick,0x7ffe67f8feb4,683322008,0,0x0,8
tick,0x7ffe67f8feb4,683337244,0,0x0,8
tick,0x7ffe67f8feb4,683353689,0,0x0,8
tick,0x7ffe67f8feb4,683369557,0,0x0,8
tick,0x7ffe67f8feb4,683385549,0,0x0,8
tick,0x7ffe67f8feb4,683401575,0,0x0,8
tick,0x7ffe67f8feb4,683417587,0,0x0,8
tick,0x7ffe67f8feb4,683432608,0,0x0,8
tick,0x7ffe67f8feb4,683448655,0,0x0,8
tick,0x7ffe67f8feb4,683463877,0,0x0,8
tick,0x7ffe67f8feb4,683479543,0,0x0,8
tick,0x7ffe67f8feb4,683495249,0,0x0,8
tick,0x7ffe67f8feb4,683510636,0,0x0,8
tick,0x7ffe67f8feb4,683526031,0,0x0,8
tick,0x7ffe67f8feb4,683541434,0,0x0,8
tick,0x7ffe67f8feb4,683557096,0,0x0,8
tick,0x7ffe67f8feb4,683572341,0,0x0,8
tick,0x7ffe67f8feb4,683587753,0,0x0,8
tick,0x7ffe67f8feb4,683603275,0,0x0,8
tick,0x7ffe67f8feb4,683619165,0,0x0,8
tick,0x7ffe67f8feb4,683635198,0,0x0,8
tick,0x7ffe67f8feb4,683651456,0,0x0,8
tick,0x7ffe67f8feb4,683666583,0,0x0,8
tick,0x7ffe67f8feb4,683681966,0,0x0,8
tick,0x7ffe67f8feb4,683697193,0,0x0,8
tick,0x7ffe67f8feb4,683713208,0,0x0,8
tick,0x7ffe67f8feb4,683728729,0,0x0,8
tick,0x7ffe67f8feb4,683744313,0,0x0,8
tick,0x7ffe67f8feb4,683760308,0,0x0,8
tick,0x7ffe67f8feb4,683775795,0,0x0,8
tick,0x7ffe67f8feb4,683791067,0,0x0,8
tick,0x7ffe67f8feb4,683806128,0,0x0,8
tick,0x7ffe67f8feb4,683821542,0,0x0,8
tick,0x7ffe67f8feb4,683837208,0,0x0,8
tick,0x7ffe67f8feb4,683852264,0,0x0,8
tick,0x7ffe67f8feb4,683867698,0,0x0,8
tick,0x7ffe67f8feb4,683883177,0,0x0,8
tick,0x7ffe67f8feb4,683899029,0,0x0,8
tick,0x7ffe67f8feb4,683914704,0,0x0,8
tick,0x7ffe67f8feb4,683929725,0,0x0,8
tick,0x7ffe67f8feb4,683945951,0,0x0,8
tick,0x7ffe67f8feb4,683961117,0,0x0,8
tick,0x7ffe67f8feb4,683977094,0,0x0,8
tick,0x7ffe67f8feb4,683992943,0,0x0,8
tick,0x7ffe67f8feb4,684008699,0,0x0,8
tick,0x7ffe67f8feb4,684024898,0,0x0,8
tick,0x7ffe67f8feb4,684040787,0,0x0,8
tick,0x7ffe67f8feb4,684056374,0,0x0,8
tick,0x7ffe67f8feb4,684072418,0,0x0,8
tick,0x7ffe67f8feb4,684087257,0,0x0,8
tick,0x7ffe67f8feb4,684102926,0,0x0,8
tick,0x7ffe67f8feb4,684118885,0,0x0,8
tick,0x7ffe67f8feb4,684135022,0,0x0,8
tick,0x7ffe67f8feb4,684150819,0,0x0,8
tick,0x7ffe67f8feb4,684166018,0,0x0,8
tick,0x7ffe67f8feb4,684182286,0,0x0,8
tick,0x7ffe67f8feb4,684197067,0,0x0,8
tick,0x7ffe67f8feb4,684212470,0,0x0,8
tick,0x7ffe67f8feb4,684228106,0,0x0,8
tick,0x7ffe67f8feb4,684243517,0,0x0,8
tick,0x7ffe67f8feb4,684259738,0,0x0,8
tick,0x7ffe67f8feb4,684275180,0,0x0,8
tick,0x7ffe67f8feb4,684291320,0,0x0,8
tick,0x7ffe67f8feb4,684306616,0,0x0,8
tick,0x7ffe67f8feb4,684322330,0,0x0,8
tick,0x7ffe67f8feb4,684338175,0,0x0,8
tick,0x7ffe67f8feb4,684353283,0,0x0,8
tick,0x7ffe67f8feb4,684368850,0,0x0,8
tick,0x7ffe67f8feb4,684384861,0,0x0,8
tick,0x7ffe67f8feb4,684400794,0,0x0,8
tick,0x7ffe67f8feb4,684416801,0,0x0,8
tick,0x7ffe67f8feb4,684432845,0,0x0,8
tick,0x7ffe67f8feb4,684447936,0,0x0,8
tick,0x7ffe67f8feb4,684463929,0,0x0,8
tick,0x7ffe67f8feb4,684479635,0,0x0,8
tick,0x7ffe67f8feb4,684494417,0,0x0,8
tick,0x7ffe67f8feb4,684509826,0,0x0,8
tick,0x7ffe67f8feb4,684525206,0,0x0,8
tick,0x7ffe67f8feb4,684540800,0,0x0,8
tick,0x7ffe67f8feb4,684556083,0,0x0,8
tick,0x7ffe67f8feb4,684571306,0,0x0,8
tick,0x7ffe67f8feb4,684586950,0,0x0,8
tick,0x7ffe67f8feb4,684601905,0,0x0,8
tick,0x7ffe67f8feb4,684617273,0,0x0,8
tick,0x7ffe67f8feb4,684633204,0,0x0,8
tick,0x7ffe67f8feb4,684649097,0,0x0,8
tick,0x7ffe67f8feb4,684665157,0,0x0,8
tick,0x7ffe67f8feb4,684681180,0,0x0,8
tick,0x7ffe67f8feb4,684696707,0,0x0,8
tick,0x7ffe67f8feb4,684712289,0,0x0,8
tick,0x7ffe67f8feb4,684728010,0,0x0,8
tick,0x7ffe67f8feb4,684743463,0,0x0,8
tick,0x7ffe67f8feb4,684759344,0,0x0,8
tick,0x7ffe67f8feb4,684775372,0,0x0,8
tick,0x7ffe67f8feb4,684790396,0,0x0,8
tick,0x7ffe67f8feb4,684805893,0,0x0,8
tick,0x7ffe67f8feb4,684821042,0,0x0,8
tick,0x7ffe67f8feb4,684836869,0,0x0,8
tick,0x7ffe67f8feb4,684851948,0,0x0,8
tick,0x7ffe67f8feb4,684867438,0,0x0,8
tick,0x7ffe67f8feb4,684883365,0,0x0,8
tick,0x7ffe67f8feb4,684898693,0,0x0,8
tick,0x7ffe67f8feb4,684915083,0,0x0,8
tick,0x7ffe67f8feb4,684931062,0,0x0,8
tick,0x7ffe67f8feb4,684946902,0,0x0,8
tick,0x7ffe67f8feb4,684962189,0,0x0,8
tick,0x7ffe67f8feb4,684977409,0,0x0,8
tick,0x7ffe67f8feb4,684993251,0,0x0,8
tick,0x7ffe67f8feb4,685008138,0,0x0,8
tick,0x7ffe67f8feb4,685024146,0,0x0,8
tick,0x7ffe67f8feb4,685040143,0,0x0,8
tick,0x7ffe67f8feb4,685056144,0,0x0,8
tick,0x7ffe67f8feb4,685072156,0,0x0,8
tick,0x7ffe67f8feb4,685088154,0,0x0,8
tick,0x7ffe67f8feb4,685104145,0,0x0,8
tick,0x7ffe67f8feb4,685120145,0,0x0,8
tick,0x7ffe67f8feb4,685136133,0,0x0,8
tick,0x7ffe67f8feb4,685151857,0,0x0,8
tick,0x7ffe67f8feb4,685167859,0,0x0,8
tick,0x7ffe67f8feb4,685183291,0,0x0,8
tick,0x7ffe67f8feb4,685198918,0,0x0,8
tick,0x7ffe67f8feb4,685214612,0,0x0,8
tick,0x7ffe67f8feb4,685230357,0,0x0,8
tick,0x7ffe67f8feb4,685245486,0,0x0,8
tick,0x7ffe67f8feb4,685260924,0,0x0,8
tick,0x7ffe67f8feb4,685276926,0,0x0,8
tick,0x7ffe67f8feb4,685292426,0,0x0,8
tick,0x7ffe67f8feb4,685307823,0,0x0,8
tick,0x7ffe67f8feb4,685323180,0,0x0,8
tick,0x7ffe67f8feb4,685339066,0,0x0,8
tick,0x7ffe67f8feb4,685354881,0,0x0,8
tick,0x7ffe67f8feb4,685370247,0,0x0,8
tick,0x7ffe67f8feb4,685386228,0,0x0,8
tick,0x7ffe67f8feb4,685402218,0,0x0,8
tick,0x7ffe67f8feb4,685418218,0,0x0,8
tick,0x7ffe67f8feb4,685433911,0,0x0,8
tick,0x7ffe67f8feb4,685449264,0,0x0,8
tick,0x7ffe67f8feb4,685465281,0,0x0,8
tick,0x7ffe67f8feb4,685480713,0,0x0,8
tick,0x7ffe67f8feb4,685496017,0,0x0,8
tick,0x7ffe67f8feb4,685511633,0,0x0,8
tick,0x7ffe67f8feb4,685527038,0,0x0,8
tick,0x7ffe67f8feb4,685542539,0,0x0,8
tick,0x7ffe67f8feb4,685558522,0,0x0,8
tick,0x7ffe67f8feb4,685573711,0,0x0,8
tick,0x7ffe67f8feb4,685589591,0,0x0,8
tick,0x7ffe67f8feb4,685605373,0,0x0,8
tick,0x7ffe67f8feb4,685620840,0,0x0,8
tick,0x7ffe67f8feb4,685636388,0,0x0,8
tick,0x7ffe67f8feb4,685651774,0,0x0,8
tick,0x7ffe67f8feb4,685666651,0,0x0,8
tick,0x7ffe67f8feb4,685681832,0,0x0,8
tick,0x7ffe67f8feb4,685697361,0,0x0,8
tick,0x7ffe67f8feb4,685712578,0,0x0,8
tick,0x7ffe67f8feb4,685728819,0,0x0,8
tick,0x7ffe67f8feb4,685744503,0,0x0,8
tick,0x7ffe67f8feb4,685760261,0,0x0,8
tick,0x7ffe67f8feb4,685775969,0,0x0,8
tick,0x7ffe67f8feb4,685791388,0,0x0,8
tick,0x7ffe67f8feb4,685807113,0,0x0,8
tick,0x7ffe67f8feb4,685822202,0,0x0,8
tick,0x7ffe67f8feb4,685837521,0,0x0,8
tick,0x7ffe67f8feb4,685853186,0,0x0,8
tick,0x7ffe67f8feb4,685869298,0,0x0,8
tick,0x7ffe67f8feb4,685884539,0,0x0,8
tick,0x7ffe67f8feb4,685900079,0,0x0,8
tick,0x7ffe67f8feb4,685915907,0,0x0,8
tick,0x7ffe67f8feb4,685931560,0,0x0,8
tick,0x7ffe67f8feb4,685946864,0,0x0,8
tick,0x7ffe67f8feb4,685962066,0,0x0,8
tick,0x7ffe67f8feb4,685978106,0,0x0,8
tick,0x7ffe67f8feb4,685993563,0,0x0,8
tick,0x7ffe67f8feb4,686009360,0,0x0,8
tick,0x7ffe67f8feb4,686025250,0,0x0,8
tick,0x7ffe67f8feb4,686040442,0,0x0,8
tick,0x7ffe67f8feb4,686056749,0,0x0,8
tick,0x7ffe67f8feb4,686072945,0,0x0,8
tick,0x7ffe67f8feb4,686088333,0,0x0,8
tick,0x7ffe67f8feb4,686104348,0,0x0,8
tick,0x7ffe67f8feb4,686119839,0,0x0,8
tick,0x7ffe67f8feb4,686135792,0,0x0,8
tick,0x7ffe67f8feb4,686151377,0,0x0,8
tick,0x7ffe67f8feb4,686167468,0,0x0,8
tick,0x7ffe67f8feb4,686182659,0,0x0,8
tick,0x7ffe67f8feb4,686198277,0,0x0,8
tick,0x7ffe67f8feb4,686214484,0,0x0,8
tick,0x7ffe67f8feb4,686229899,0,0x0,8
tick,0x7ffe67f8feb4,686245879,0,0x0,8
tick,0x7ffe67f8feb4,686261834,0,0x0,8
tick,0x7ffe67f8feb4,686277847,0,0x0,8
tick,0x7ffe67f8feb4,686293810,0,0x0,8
tick,0x7ffe67f8feb4,686309811,0,0x0,8
tick,0x7ffe67f8feb4,686326250,0,0x0,8
tick,0x7ffe67f8feb4,686341836,0,0x0,8
tick,0x7ffe67f8feb4,686357845,0,0x0,8
tick,0x7ffe67f8feb4,686373855,0,0x0,8
tick,0x7ffe67f8feb4,686389821,0,0x0,8
tick,0x7ffe67f8feb4,686405829,0,0x0,8
tick,0x7ffe67f8feb4,686421829,0,0x0,8
tick,0x7ffe67f8feb4,686437823,0,0x0,8
tick,0x7ffe67f8feb4,686453837,0,0x0,8
tick,0x7ffe67f8feb4,686469839,0,0x0,8
tick,0x7ffe67f8feb4,686485868,0,0x0,8
tick,0x7ffe67f8feb4,686501907,0,0x0,8
tick,0x7ffe67f8feb4,686517852,0,0x0,8
tick,0x7ffe67f8feb4,686532874,0,0x0,8
tick,0x7ffe67f8feb4,686548899,0,0x0,8
tick,0x7ffe67f8feb4,686564775,0,0x0,8
tick,0x7ffe67f8feb4,686579896,0,0x0,8
tick,0x7ffe67f8feb4,686594919,0,0x0,8
tick,0x7ffe67f8feb4,686610103,0,0x0,8
tick,0x7ffe67f8feb4,686626128,0,0x0,8
tick,0x7ffe67f8feb4,686642117,0,0x0,8
tick,0x7ffe67f8feb4,686658136,0,0x0,8
tick,0x7ffe67f8feb4,686673364,0,0x0,8
tick,0x7ffe67f8feb4,686689086,0,0x0,8
tick,0x7ffe67f8feb4,686705075,0,0x0,8
tick,0x7ffe67f8feb4,686720596,0,0x0,8
tick,0x7ffe67f8feb4,686736545,0,0x0,8
tick,0x7ffe67f8feb4,686752048,0,0x0,8
tick,0x7ffe67f8feb4,686767335,0,0x0,8
tick,0x7ffe67f8feb4,686783225,0,0x0,8
tick,0x7ffe67f8feb4,686798903,0,0x0,8
tick,0x7ffe67f8feb4,686815057,0,0x0,8
tick,0x7ffe67f8feb4,686830500,0,0x0,8
tick,0x7ffe67f8feb4,686846225,0,0x0,8
tick,0x7ffe67f8feb4,686862228,0,0x0,8
tick,0x7ffe67f8feb4,686878225,0,0x0,8
tick,0x7ffe67f8feb4,686893905,0,0x0,8
tick,0x7ffe67f8feb4,686909266,0,0x0,8
tick,0x7ffe67f8feb4,686924956,0,0x0,8
tick,0x7ffe67f8feb4,686940950,0,0x0,8
tick,0x7ffe67f8feb4,686956219,0,0x0,8
tick,0x7ffe67f8feb4,686971346,0,0x0,8
tick,0x7ffe67f8feb4,686986955,0,0x0,8
tick,0x7ffe67f8feb4,687003196,0,0x0,8
tick,0x7ffe67f8feb4,687018303,0,0x0,8
tick,0x7ffe67f8feb4,687033438,0,0x0,8
tick,0x7ffe67f8feb4,687049084,0,0x0,8
tick,0x7ffe67f8feb4,687064613,0,0x0,8
tick,0x7ffe67f8feb4,687080038,0,0x0,8
tick,0x7ffe67f8feb4,687096002,0,0x0,8
tick,0x7ffe67f8feb4,687111780,0,0x0,8
tick,0x7ffe67f8feb4,687127433,0,0x0,8
tick,0x7ffe67f8feb4,687143027,0,0x0,8
tick,0x7ffe67f8feb4,687158853,0,0x0,8
tick,0x7ffe67f8feb4,687174424,0,0x0,8
tick,0x7ffe67f8feb4,687189984,0,0x0,8
tick,0x7ffe67f8feb4,687205344,0,0x0,8
tick,0x7ffe67f8feb4,687220992,0,0x0,8
tick,0x7ffe67f8feb4,687236437,0,0x0,8
tick,0x7ffe67f8feb4,687252055,0,0x0,8
tick,0x7ffe67f8feb4,687267671,0,0x0,8
tick,0x7ffe67f8feb4,687283637,0,0x0,8
tick,0x7ffe67f8feb4,687299158,0,0x0,8
tick,0x7ffe67f8feb4,687314543,0,0x0,8
tick,0x7ffe67f8feb4,687330635,0,0x0,8
tick,0x7ffe67f8feb4,687345480,0,0x0,8
tick,0x7ffe67f8feb4,687361285,0,0x0,8
tick,0x7ffe67f8feb4,687377440,0,0x0,8
tick,0x7ffe67f8feb4,687392380,0,0x0,8
tick,0x7ffe67f8feb4,687408351,0,0x0,8
tick,0x7ffe67f8feb4,687424356,0,0x0,8
tick,0x7ffe67f8feb4,687440346,0,0x0,8
tick,0x7ffe67f8feb4,687456349,0,0x0,8
tick,0x7ffe67f8feb4,687472379,0,0x0,8
tick,0x7ffe67f8feb4,687488535,0,0x0,8
tick,0x7ffe67f8feb4,687504689,0,0x0,8
tick,0x7ffe67f8feb4,687520237,0,0x0,8
tick,0x7ffe67f8feb4,687536169,0,0x0,8
tick,0x7ffe67f8feb4,687551788,0,0x0,8
tick,0x7ffe67f8feb4,687566986,0,0x0,8
tick,0x7ffe67f8feb4,687582474,0,0x0,8
tick,0x7ffe67f8feb4,687597723,0,0x0,8
tick,0x7ffe67f8feb4,687612996,0,0x0,8
tick,0x7ffe67f8feb4,687628794,0,0x0,8
tick,0x7ffe67f8feb4,687644279,0,0x0,8
tick,0x7ffe67f8feb4,687659499,0,0x0,8
tick,0x7ffe67f8feb4,687674660,0,0x0,8
tick,0x7ffe67f8feb4,687690197,0,0x0,8
tick,0x7ffe67f8feb4,687705325,0,0x0,8
tick,0x7ffe67f8feb4,687720848,0,0x0,8
tick,0x7ffe67f8feb4,687736414,0,0x0,8
tick,0x7ffe67f8feb4,687752252,0,0x0,8
tick,0x7ffe67f8feb4,687767627,0,0x0,8
tick,0x7ffe67f8feb4,687782950,0,0x0,8
tick,0x7ffe67f8feb4,687798622,0,0x0,8
tick,0x7ffe67f8feb4,687814202,0,0x0,8
tick,0x7ffe67f8feb4,687830593,0,0x0,8
tick,0x7ffe67f8feb4,687845683,0,0x0,8
tick,0x7ffe67f8feb4,687860306,0,0x0,8
tick,0x7ffe67f8feb4,687876650,0,0x0,8
tick,0x7ffe67f8feb4,687891543,0,0x0,8
tick,0x7ffe67f8feb4,687911100,0,0x0,8
tick,0x7ffe67f8feb4,687923040,0,0x0,8
tick,0x7ffe67f8feb4,687938478,0,0x0,8
tick,0x7ffe67f8feb4,687954128,0,0x0,8
tick,0x7ffe67f8feb4,687970186,0,0x0,8
tick,0x7ffe67f8feb4,687986350,0,0x0,8
tick,0x7ffe67f8feb4,688001120,0,0x0,8
tick,0x7ffe67f8feb4,688019214,0,0x0,8
tick,0x7ffe67f8feb4,688033223,0,0x0,8
tick,0x7ffe67f8feb4,688049140,0,0x0,8
tick,0x7ffe67f8feb4,688065069,0,0x0,8
tick,0x7ffe67f8feb4,688081083,0,0x0,8
tick,0x7ffe67f8feb4,688097119,0,0x0,8
tick,0x7ffe67f8feb4,688113055,0,0x0,8
tick,0x7ffe67f8feb4,688129054,0,0x0,8
tick,0x7ffe67f8feb4,688144988,0,0x0,8
tick,0x7ffe67f8feb4,688160155,0,0x0,8
tick,0x7ffe67f8feb4,688176084,0,0x0,8
tick,0x7ffe67f8feb4,688192077,0,0x0,8
tick,0x7ffe67f8feb4,688208089,0,0x0,8
tick,0x7ffe67f8feb4,688224091,0,0x0,8
tick,0x7ffe67f8feb4,688240138,0,0x0,8
tick,0x7ffe67f8feb4,688256162,0,0x0,8
tick,0x7ffe67f8feb4,688272159,0,0x0,8
tick,0x7ffe67f8feb4,688288372,0,0x0,8
tick,0x7ffe67f8feb4,688304110,0,0x0,8
tick,0x7ffe67f8feb4,688319125,0,0x0,8
tick,0x7ffe67f8feb4,688335141,0,0x0,8
tick,0x7ffe67f8feb4,688351156,0,0x0,8
tick,0x7ffe67f8feb4,688367197,0,0x0,8
tick,0x7ffe67f8feb4,688382528,0,0x0,8
tick,0x7ffe67f8feb4,688398528,0,0x0,8
tick,0x7ffe67f8feb4,688414512,0,0x0,8
tick,0x7ffe67f8feb4,688430534,0,0x0,8
tick,0x7ffe67f8feb4,688446526,0,0x0,8
tick,0x7ffe67f8feb4,688462517,0,0x0,8
tick,0x7ffe67f8feb4,688478563,0,0x0,8
tick,0x7ffe67f8feb4,688494589,0,0x0,8
tick,0x7ffe67f8feb4,688510175,0,0x0,8
tick,0x7ffe67f8feb4,688526184,0,0x0,8
tick,0x7ffe67f8feb4,688542168,0,0x0,8
tick,0x7ffe67f8feb4,688558161,0,0x0,8
tick,0x7ffe67f8feb4,688574174,0,0x0,8
tick,0x7ffe67f8feb4,688589297,0,0x0,8
tick,0x7ffe67f8feb4,688605099,0,0x0,8
tick,0x7ffe67f8feb4,688621114,0,0x0,8
tick,0x7ffe67f8feb4,688636720,0,0x0,8
tick,0x7ffe67f8feb4,688652403,0,0x0,8
tick,0x7ffe67f8feb4,688667788,0,0x0,8
tick,0x7ffe67f8feb4,688683543,0,0x0,8
tick,0x7ffe67f8feb4,688699363,0,0x0,8
tick,0x7ffe67f8feb4,688714613,0,0x0,8
tick,0x7ffe67f8feb4,688730866,0,0x0,8
tick,0x7ffe67f8feb4,688746227,0,0x0,8
tick,0x7ffe67f8feb4,688761863,0,0x0,8
tick,0x7ffe67f8feb4,688777104,0,0x0,8
tick,0x7ffe67f8feb4,688793160,0,0x0,8
tick,0x7ffe67f8feb4,688808103,0,0x0,8
tick,0x7ffe67f8feb4,688824062,0,0x0,8
tick,0x7ffe67f8feb4,688839421,0,0x0,8
tick,0x7ffe67f8feb4,688855517,0,0x0,8
tick,0x7ffe67f8feb4,688870624,0,0x0,8
tick,0x7ffe67f8feb4,688886232,0,0x0,8
tick,0x7ffe67f8feb4,688902238,0,0x0,8
tick,0x7ffe67f8feb4,688917944,0,0x0,8
tick,0x7ffe67f8feb4,688933113,0,0x0,8
tick,0x7ffe67f8feb4,688948265,0,0x0,8
tick,0x7ffe67f8feb4,688963698,0,0x0,8
tick,0x7ffe67f8feb4,688979400,0,0x0,8
tick,0x7ffe67f8feb4,688994881,0,0x0,8
tick,0x7ffe67f8feb4,689010406,0,0x0,8
tick,0x7ffe67f8feb4,689026235,0,0x0,8
tick,0x7ffe67f8feb4,689041659,0,0x0,8
tick,0x7ffe67f8feb4,689056911,0,0x0,8
tick,0x7ffe67f8feb4,689072080,0,0x0,8
tick,0x7ffe67f8feb4,689087767,0,0x0,8
tick,0x7ffe67f8feb4,689103551,0,0x0,8
tick,0x7ffe67f8feb4,689119241,0,0x0,8
tick,0x7ffe67f8feb4,689135621,0,0x0,8
tick,0x7ffe67f8feb4,689151167,0,0x0,8
tick,0x7ffe67f8feb4,689166951,0,0x0,8
tick,0x7ffe67f8feb4,689182483,0,0x0,8
tick,0x7ffe67f8feb4,689197582,0,0x0,8
tick,0x7ffe67f8feb4,689213505,0,0x0,8
tick,0x7ffe67f8feb4,689228613,0,0x0,8
tick,0x7ffe67f8feb4,689244413,0,0x0,8
tick,0x7ffe67f8feb4,689259736,0,0x0,8
tick,0x7ffe67f8feb4,689275139,0,0x0,8
tick,0x7ffe67f8feb4,689290773,0,0x0,8
tick,0x7ffe67f8feb4,689305897,0,0x0,8
tick,0x7ffe67f8feb4,689321931,0,0x0,8
tick,0x7ffe67f8feb4,689337029,0,0x0,8
tick,0x7ffe67f8feb4,689352487,0,0x0,8
tick,0x7ffe67f8feb4,689367652,0,0x0,8
tick,0x7ffe67f8feb4,689383338,0,0x0,8
tick,0x7ffe67f8feb4,689399267,0,0x0,8
tick,0x7ffe67f8feb4,689415252,0,0x0,8
tick,0x7ffe67f8feb4,689431261,0,0x0,8
tick,0x7ffe67f8feb4,689447257,0,0x0,8
tick,0x7ffe67f8feb4,689463515,0,0x0,8
tick,0x7ffe67f8feb4,689479271,0,0x0,8
tick,0x7ffe67f8feb4,689494256,0,0x0,8
tick,0x7ffe67f8feb4,689509873,0,0x0,8
tick,0x7ffe67f8feb4,689526047,0,0x0,8
tick,0x7ffe67f8feb4,689541028,0,0x0,8
tick,0x7ffe67f8feb4,689556694,0,0x0,8
tick,0x7ffe67f8feb4,689572609,0,0x0,8
tick,0x7ffe67f8feb4,689587603,0,0x0,8
tick,0x7ffe67f8feb4,689603964,0,0x0,8
tick,0x7ffe67f8feb4,689619677,0,0x0,8
tick,0x7ffe67f8feb4,689635780,0,0x0,8
tick,0x7ffe67f8feb4,689651178,0,0x0,8
tick,0x7ffe67f8feb4,689666388,0,0x0,8
tick,0x7ffe67f8feb4,689682606,0,0x0,8
tick,0x7ffe67f8feb4,689698335,0,0x0,8
tick,0x7ffe67f8feb4,689713827,0,0x0,8
tick,0x7ffe67f8feb4,689729822,0,0x0,8
tick,0x7ffe67f8feb4,689745789,0,0x0,8
tick,0x7ffe67f8feb4,689761369,0,0x0,8
tick,0x7ffe67f8feb4,689776752,0,0x0,8
tick,0x7ffe67f8feb4,689792191,0,0x0,8
tick,0x7ffe67f8feb4,689808226,0,0x0,8
tick,0x7ffe67f8feb4,689823458,0,0x0,8
tick,0x7ffe67f8feb4,689839306,0,0x0,8
tick,0x7ffe67f8feb4,689855195,0,0x0,8
tick,0x7ffe67f8feb4,689870336,0,0x0,8
tick,0x7ffe67f8feb4,689886381,0,0x0,8
tick,0x7ffe67f8feb4,689901715,0,0x0,8
tick,0x7ffe67f8feb4,689917778,0,0x0,8
tick,0x7ffe67f8feb4,689933115,0,0x0,8
tick,0x7ffe67f8feb4,689948155,0,0x0,8
tick,0x7ffe67f8feb4,689963198,0,0x0,8
tick,0x7ffe67f8feb4,689978690,0,0x0,8
tick,0x7ffe67f8feb4,689993773,0,0x0,8
tick,0x7ffe67f8feb4,690009274,0,0x0,8
tick,0x7ffe67f8feb4,690025212,0,0x0,8
tick,0x7ffe67f8feb4,690040605,0,0x0,8
tick,0x7ffe67f8feb4,690056726,0,0x0,8
tick,0x7ffe67f8feb4,690072659,0,0x0,8
tick,0x7ffe67f8feb4,690088483,0,0x0,8
tick,0x7ffe67f8feb4,690103911,0,0x0,8
tick,0x7ffe67f8feb4,690120011,0,0x0,8
tick,0x7ffe67f8feb4,690135478,0,0x0,8
tick,0x7ffe67f8feb4,690150878,0,0x0,8
tick,0x7ffe67f8feb4,690166591,0,0x0,8
tick,0x7ffe67f8feb4,690181780,0,0x0,8
tick,0x7ffe67f8feb4,690197275,0,0x0,8
tick,0x7ffe67f8feb4,690212116,0,0x0,8
tick,0x7ffe67f8feb4,690227478,0,0x0,8
tick,0x7ffe67f8feb4,690243038,0,0x0,8
tick,0x7ffe67f8feb4,690259177,0,0x0,8
tick,0x7ffe67f8feb4,690274517,0,0x0,8
tick,0x7ffe67f8feb4,690289929,0,0x0,8
tick,0x7ffe67f8feb4,690305775,0,0x0,8
tick,0x7ffe67f8feb4,690321789,0,0x0,8
tick,0x7ffe67f8feb4,690337775,0,0x0,8
tick,0x7ffe67f8feb4,690353188,0,0x0,8
tick,0x7ffe67f8feb4,690368786,0,0x0,8
tick,0x7ffe67f8feb4,690384468,0,0x0,8
tick,0x7ffe67f8feb4,690400464,0,0x0,8
tick,0x7ffe67f8feb4,690416390,0,0x0,8
tick,0x7ffe67f8feb4,690432404,0,0x0,8
tick,0x7ffe67f8feb4,690448388,0,0x0,8
tick,0x7ffe67f8feb4,690464053,0,0x0,8
tick,0x7ffe67f8feb4,690479203,0,0x0,8
tick,0x7ffe67f8feb4,690494140,0,0x0,8
tick,0x7ffe67f8feb4,690510134,0,0x0,8
tick,0x7ffe67f8feb4,690526208,0,0x0,8
tick,0x7ffe67f8feb4,690541244,0,0x0,8
tick,0x7ffe67f8feb4,690556618,0,0x0,8
tick,0x7ffe67f8feb4,690571993,0,0x0,8
tick,0x7ffe67f8feb4,690587749,0,0x0,8
tick,0x7ffe67f8feb4,690603688,0,0x0,8
tick,0x7ffe67f8feb4,690619835,0,0x0,8
tick,0x7ffe67f8feb4,690635078,0,0x0,8
tick,0x7ffe67f8feb4,690650327,0,0x0,8
tick,0x7ffe67f8feb4,690666585,0,0x0,8
tick,0x7ffe67f8feb4,690682414,0,0x0,8
tick,0x7ffe67f8feb4,690698440,0,0x0,8
tick,0x7ffe67f8feb4,690714051,0,0x0,8
tick,0x7ffe67f8feb4,690729589,0,0x0,8
tick,0x7ffe67f8feb4,690745339,0,0x0,8
tick,0x7ffe67f8feb4,690761613,0,0x0,8
tick,0x7ffe67f8feb4,690777552,0,0x0,8
tick,0x7ffe67f8feb4,690793356,0,0x0,8
tick,0x7ffe67f8feb4,690808772,0,0x0,8
tick,0x7ffe67f8feb4,690823998,0,0x0,8
tick,0x7ffe67f8feb4,690839521,0,0x0,8
tick,0x7ffe67f8feb4,690855401,0,0x0,8
tick,0x7ffe67f8feb4,690871025,0,0x0,8
tick,0x7ffe67f8feb4,690887528,0,0x0,8
tick,0x7ffe67f8feb4,690903147,0,0x0,8
tick,0x7ffe67f8feb4,690918187,0,0x0,8
tick,0x7ffe67f8feb4,690933464,0,0x0,8
tick,0x7ffe67f8feb4,690949134,0,0x0,8
tick,0x7ffe67f8feb4,690964316,0,0x0,8
tick,0x7ffe67f8feb4,690979624,0,0x0,8
tick,0x7ffe67f8feb4,690995659,0,0x0,8
tick,0x7ffe67f8feb4,691011072,0,0x0,8
tick,0x7ffe67f8feb4,691025875,0,0x0,8
tick,0x7ffe67f8feb4,691041340,0,0x0,8
tick,0x7ffe67f8feb4,691057249,0,0x0,8
tick,0x7ffe67f8feb4,691072341,0,0x0,8
tick,0x7ffe67f8feb4,691088201,0,0x0,8
tick,0x7ffe67f8feb4,691103246,0,0x0,8
tick,0x7ffe67f8feb4,691119456,0,0x0,8
tick,0x7ffe67f8feb4,691134834,0,0x0,8
tick,0x7ffe67f8feb4,691150424,0,0x0,8
tick,0x7ffe67f8feb4,691166180,0,0x0,8
tick,0x7ffe67f8feb4,691181470,0,0x0,8
tick,0x7ffe67f8feb4,691196528,0,0x0,8
tick,0x7ffe67f8feb4,691212349,0,0x0,8
tick,0x7ffe67f8feb4,691227610,0,0x0,8
tick,0x7ffe67f8feb4,691243662,0,0x0,8
tick,0x7ffe67f8feb4,691259581,0,0x0,8
tick,0x7ffe67f8feb4,691275730,0,0x0,8
tick,0x7ffe67f8feb4,691291574,0,0x0,8
tick,0x7ffe67f8feb4,691307608,0,0x0,8
tick,0x7ffe67f8feb4,691323594,0,0x0,8
tick,0x7ffe67f8feb4,691338723,0,0x0,8
tick,0x7ffe67f8feb4,691354620,0,0x0,8
tick,0x7ffe67f8feb4,691370671,0,0x0,8
tick,0x7ffe67f8feb4,691386799,0,0x0,8
tick,0x7ffe67f8feb4,691401608,0,0x0,8
tick,0x7ffe67f8feb4,691417603,0,0x0,8
tick,0x7ffe67f8feb4,691433586,0,0x0,8
tick,0x7ffe67f8feb4,691449648,0,0x0,8
tick,0x7ffe67f8feb4,691465662,0,0x0,8
tick,0x7ffe67f8feb4,691481771,0,0x0,8
tick,0x7ffe67f8feb4,691497631,0,0x0,8
tick,0x7ffe67f8feb4,691513674,0,0x0,8
tick,0x7ffe67f8feb4,691529704,0,0x0,8
tick,0x7ffe67f8feb4,691545683,0,0x0,8
tick,0x7ffe67f8feb4,691560954,0,0x0,8
tick,0x7ffe67f8feb4,691576355,0,0x0,8
tick,0x7ffe67f8feb4,691591725,0,0x0,8
tick,0x7ffe67f8feb4,691607603,0,0x0,8
tick,0x7ffe67f8feb4,691623049,0,0x0,8
tick,0x7ffe67f8feb4,691638451,0,0x0,8
tick,0x7ffe67f8feb4,691654526,0,0x0,8
tick,0x7ffe67f8feb4,691670344,0,0x0,8
tick,0x7ffe67f8feb4,691686251,0,0x0,8
tick,0x7ffe67f8feb4,691702070,0,0x0,8
tick,0x7ffe67f8feb4,691717306,0,0x0,8
tick,0x7ffe67f8feb4,691732996,0,0x0,8
tick,0x7ffe67f8feb4,691748995,0,0x0,8
tick,0x7ffe67f8feb4,691764309,0,0x0,8
tick,0x7ffe67f8feb4,691779698,0,0x0,8
tick,0x7ffe67f8feb4,691794909,0,0x0,8
tick,0x7ffe67f8feb4,691810924,0,0x0,8
tick,0x7ffe67f8feb4,691826109,0,0x0,8
tick,0x7ffe67f8feb4,691842181,0,0x0,8
tick,0x7ffe67f8feb4,691857700,0,0x0,8
tick,0x7ffe67f8feb4,691873567,0,0x0,8
tick,0x7ffe67f8feb4,691889584,0,0x0,8
tick,0x7ffe67f8feb4,691905784,0,0x0,8
tick,0x7ffe67f8feb4,691921682,0,0x0,8
tick,0x7ffe67f8feb4,691937734,0,0x0,8
tick,0x7ffe67f8feb4,691953811,0,0x0,8
tick,0x7ffe67f8feb4,691969688,0,0x0,8
tick,0x7ffe67f8feb4,691985546,0,0x0,8
tick,0x7ffe67f8feb4,692000716,0,0x0,8
tick,0x7ffe67f8feb4,692016524,0,0x0,8
tick,0x7ffe67f8feb4,692032506,0,0x0,8
tick,0x7ffe67f8feb4,692048542,0,0x0,8
tick,0x7ffe67f8feb4,692064522,0,0x0,8
tick,0x7ffe67f8feb4,692080528,0,0x0,8
tick,0x7ffe67f8feb4,692096564,0,0x0,8
tick,0x7ffe67f8feb4,692112572,0,0x0,8
tick,0x7ffe67f8feb4,692128592,0,0x0,8
tick,0x7ffe67f8feb4,692143770,0,0x0,8
tick,0x7ffe67f8feb4,692159679,0,0x0,8
tick,0x7ffe67f8feb4,692175722,0,0x0,8
tick,0x7ffe67f8feb4,692191741,0,0x0,8
tick,0x7ffe67f8feb4,692207732,0,0x0,8
tick,0x7ffe67f8feb4,692223144,0,0x0,8
tick,0x7ffe67f8feb4,692239189,0,0x0,8
tick,0x7ffe67f8feb4,692255178,0,0x0,8
tick,0x7ffe67f8feb4,692270415,0,0x0,8
tick,0x7ffe67f8feb4,692286334,0,0x0,8
tick,0x7ffe67f8feb4,692302077,0,0x0,8
tick,0x7ffe67f8feb4,692318127,0,0x0,8
tick,0x7ffe67f8feb4,692333375,0,0x0,8
tick,0x7ffe67f8feb4,692348548,0,0x0,8
tick,0x7ffe67f8feb4,692364473,0,0x0,8
tick,0x7ffe67f8feb4,692379818,0,0x0,8
tick,0x7ffe67f8feb4,692395403,0,0x0,8
tick,0x7ffe67f8feb4,692411335,0,0x0,8
tick,0x7ffe67f8feb4,692427313,0,0x0,8
tick,0x7ffe67f8feb4,692443323,0,0x0,8
tick,0x7ffe67f8feb4,692459317,0,0x0,8
tick,0x7ffe67f8feb4,692474795,0,0x0,8
tick,0x7ffe67f8feb4,692490466,0,0x0,8
tick,0x7ffe67f8feb4,692506576,0,0x0,8
tick,0x7ffe67f8feb4,692521747,0,0x0,8
tick,0x7ffe67f8feb4,692536984,0,0x0,8
tick,0x7ffe67f8feb4,692552627,0,0x0,8
tick,0x7ffe67f8feb4,692568669,0,0x0,8
tick,0x7ffe67f8feb4,692584235,0,0x0,8
tick,0x7ffe67f8feb4,692600336,0,0x0,8
tick,0x7ffe67f8feb4,692616733,0,0x0,8
tick,0x7ffe67f8feb4,692632022,0,0x0,8
tick,0x7ffe67f8feb4,692647638,0,0x0,8
tick,0x7ffe67f8feb4,692662981,0,0x0,8
tick,0x7ffe67f8feb4,692678201,0,0x0,8
tick,0x7ffe67f8feb4,692694258,0,0x0,8
tick,0x7ffe67f8feb4,692710207,0,0x0,8
tick,0x7ffe67f8feb4,692725698,0,0x0,8
tick,0x7ffe67f8feb4,692741255,0,0x0,8
tick,0x7ffe67f8feb4,692756476,0,0x0,8
tick,0x7ffe67f8feb4,692771853,0,0x0,8
tick,0x7ffe67f8feb4,692787906,0,0x0,8
tick,0x7ffe67f8feb4,692803849,0,0x0,8
tick,0x7ffe67f8feb4,692819848,0,0x0,8
tick,0x7ffe67f8feb4,692835769,0,0x0,8
tick,0x7ffe67f8feb4,692851804,0,0x0,8
tick,0x7ffe67f8feb4,692867820,0,0x0,8
tick,0x7ffe67f8feb4,692883827,0,0x0,8
tick,0x7ffe67f8feb4,692899825,0,0x0,8
tick,0x7ffe67f8feb4,692915834,0,0x0,8
tick,0x7ffe67f8feb4,692931855,0,0x0,8
tick,0x7ffe67f8feb4,692947848,0,0x0,8
tick,0x7ffe67f8feb4,692963793,0,0x0,8
tick,0x7ffe67f8feb4,692979821,0,0x0,8
tick,0x7ffe67f8feb4,692995625,0,0x0,8
tick,0x7ffe67f8feb4,693011618,0,0x0,8
tick,0x7ffe67f8feb4,693027627,0,0x0,8
tick,0x7ffe67f8feb4,693042882,0,0x0,8
tick,0x7ffe67f8feb4,693058872,0,0x0,8
tick,0x7ffe67f8feb4,693074868,0,0x0,8
tick,0x7ffe67f8feb4,693089861,0,0x0,8
tick,0x7ffe67f8feb4,693105867,0,0x0,8
tick,0x7ffe67f8feb4,693121894,0,0x0,8
tick,0x7ffe67f8feb4,693138240,0,0x0,8
tick,0x7ffe67f8feb4,693153861,0,0x0,8
tick,0x7ffe67f8feb4,693169877,0,0x0,8
tick,0x7ffe67f8feb4,693185899,0,0x0,8
tick,0x7ffe67f8feb4,693201886,0,0x0,8
tick,0x7ffe67f8feb4,693217900,0,0x0,8
tick,0x7ffe67f8feb4,693233880,0,0x0,8
tick,0x7ffe67f8feb4,693249891,0,0x0,8
tick,0x7ffe67f8feb4,693265900,0,0x0,8
tick,0x7ffe67f8feb4,693281718,0,0x0,8
tick,0x7ffe67f8feb4,693296889,0,0x0,8
tick,0x7ffe67f8feb4,693312906,0,0x0,8
tick,0x7ffe67f8feb4,693328917,0,0x0,8
tick,0x7ffe67f8feb4,693344926,0,0x0,8
tick,0x7ffe67f8feb4,693360075,0,0x0,8
tick,0x7ffe67f8feb4,693375916,0,0x0,8
tick,0x7ffe67f8feb4,693391432,0,0x0,8
tick,0x7ffe67f8feb4,693406927,0,0x0,8
tick,0x7ffe67f8feb4,693422916,0,0x0,8
tick,0x7ffe67f8feb4,693438916,0,0x0,8
tick,0x7ffe67f8feb4,693455245,0,0x0,8
tick,0x7ffe67f8feb4,693470931,0,0x0,8
tick,0x7ffe67f8feb4,693486948,0,0x0,8
tick,0x7ffe67f8feb4,693502951,0,0x0,8
tick,0x7ffe67f8feb4,693518981,0,0x0,8
tick,0x7ffe67f8feb4,693535018,0,0x0,8
tick,0x7ffe67f8feb4,693551007,0,0x0,8
tick,0x7ffe67f8feb4,693566995,0,0x0,8
tick,0x7ffe67f8feb4,693583022,0,0x0,8
tick,0x7ffe67f8feb4,693598272,0,0x0,8
tick,0x7ffe67f8feb4,693613977,0,0x0,8
tick,0x7ffe67f8feb4,693629098,0,0x0,8
tick,0x7ffe67f8feb4,693644755,0,0x0,8
tick,0x7ffe67f8feb4,693660223,0,0x0,8
tick,0x7ffe67f8feb4,693675452,0,0x0,8
tick,0x7ffe67f8feb4,693691262,0,0x0,8
tick,0x7ffe67f8feb4,693706479,0,0x0,8
tick,0x7ffe67f8feb4,693721657,0,0x0,8
tick,0x7ffe67f8feb4,693736615,0,0x0,8
tick,0x7ffe67f8feb4,693752284,0,0x0,8
tick,0x7ffe67f8feb4,693767192,0,0x0,8
tick,0x7ffe67f8feb4,693782886,0,0x0,8
tick,0x7ffe67f8feb4,693798631,0,0x0,8
tick,0x7ffe67f8feb4,693813899,0,0x0,8
tick,0x7ffe67f8feb4,693829674,0,0x0,8
tick,0x7ffe67f8feb4,693845697,0,0x0,8
tick,0x7ffe67f8feb4,693861798,0,0x0,8
tick,0x7ffe67f8feb4,693878154,0,0x0,8
tick,0x7ffe67f8feb4,693893280,0,0x0,8
tick,0x7ffe67f8feb4,693908685,0,0x0,8
tick,0x7ffe67f8feb4,693924720,0,0x0,8
tick,0x7ffe67f8feb4,693940413,0,0x0,8
tick,0x7ffe67f8feb4,693956293,0,0x0,8
tick,0x7ffe67f8feb4,693971115,0,0x0,8
tick,0x7ffe67f8feb4,693986301,0,0x0,8
tick,0x7ffe67f8feb4,694002404,0,0x0,8
tick,0x7ffe67f8feb4,694018387,0,0x0,8
tick,0x7ffe67f8feb4,694034313,0,0x0,8
tick,0x7ffe67f8feb4,694049747,0,0x0,8
tick,0x7ffe67f8feb4,694065389,0,0x0,8
tick,0x7ffe67f8feb4,694080512,0,0x0,8
tick,0x7ffe67f8feb4,694095595,0,0x0,8
tick,0x7ffe67f8feb4,694111599,0,0x0,8
tick,0x7ffe67f8feb4,694127066,0,0x0,8
tick,0x7ffe67f8feb4,694143060,0,0x0,8
tick,0x7ffe67f8feb4,694159320,0,0x0,8
tick,0x7ffe67f8feb4,694174594,0,0x0,8
tick,0x7ffe67f8feb4,694189790,0,0x0,8
tick,0x7ffe67f8feb4,694205497,0,0x0,8
tick,0x7ffe67f8feb4,694220944,0,0x0,8
tick,0x7ffe67f8feb4,694236488,0,0x0,8
tick,0x7ffe67f8feb4,694252201,0,0x0,8
tick,0x7ffe67f8feb4,694267485,0,0x0,8
tick,0x7ffe67f8feb4,694283417,0,0x0,8
tick,0x7ffe67f8feb4,694299453,0,0x0,8
tick,0x7ffe67f8feb4,694314519,0,0x0,8
tick,0x7ffe67f8feb4,694330587,0,0x0,8
tick,0x7ffe67f8feb4,694346152,0,0x0,8
tick,0x7ffe67f8feb4,694361991,0,0x0,8
tick,0x7ffe67f8feb4,694377756,0,0x0,8
tick,0x7ffe67f8feb4,694393758,0,0x0,8
tick,0x7ffe67f8feb4,694409757,0,0x0,8
tick,0x7ffe67f8feb4,694425575,0,0x0,8
tick,0x7ffe67f8feb4,694441584,0,0x0,8
tick,0x7ffe67f8feb4,694457580,0,0x0,8
tick,0x7ffe67f8feb4,694473565,0,0x0,8
tick,0x7ffe67f8feb4,694489274,0,0x0,8
tick,0x7ffe67f8feb4,694504715,0,0x0,8
tick,0x7ffe67f8feb4,694520303,0,0x0,8
tick,0x7ffe67f8feb4,694536332,0,0x0,8
tick,0x7ffe67f8feb4,694551560,0,0x0,8
tick,0x7ffe67f8feb4,694567655,0,0x0,8
tick,0x7ffe67f8feb4,694583094,0,0x0,8
tick,0x7ffe67f8feb4,694598236,0,0x0,8
tick,0x7ffe67f8feb4,694613819,0,0x0,8
tick,0x7ffe67f8feb4,694629181,0,0x0,8
tick,0x7ffe67f8feb4,694644517,0,0x0,8
tick,0x7ffe67f8feb4,694659865,0,0x0,8
tick,0x7ffe67f8feb4,694675506,0,0x0,8
tick,0x7ffe67f8feb4,694691557,0,0x0,8
tick,0x7ffe67f8feb4,694707570,0,0x0,8
tick,0x7ffe67f8feb4,694723204,0,0x0,8
tick,0x7ffe67f8feb4,694738921,0,0x0,8
tick,0x7ffe67f8feb4,694755051,0,0x0,8
tick,0x7ffe67f8feb4,694770408,0,0x0,8
tick,0x7ffe67f8feb4,694786810,0,0x0,8
tick,0x7ffe67f8feb4,694802525,0,0x0,8
tick,0x7ffe67f8feb4,694818420,0,0x0,8
tick,0x7ffe67f8feb4,694833948,0,0x0,8
tick,0x7ffe67f8feb4,694849154,0,0x0,8
tick,0x7ffe67f8feb4,694865657,0,0x0,8
tick,0x7ffe67f8feb4,694880990,0,0x0,8
tick,0x7ffe67f8feb4,694897069,0,0x0,8
tick,0x7ffe67f8feb4,694912595,0,0x0,8
tick,0x7ffe67f8feb4,694928326,0,0x0,8
tick,0x7ffe67f8feb4,694943965,0,0x0,8
tick,0x7ffe67f8feb4,694959202,0,0x0,8
tick,0x7ffe67f8feb4,694975782,0,0x0,8
tick,0x7ffe67f8feb4,694991156,0,0x0,8
tick,0x7ffe67f8feb4,695006553,0,0x0,8
tick,0x7ffe67f8feb4,695022447,0,0x0,8
tick,0x7ffe67f8feb4,695037558,0,0x0,8
tick,0x7ffe67f8feb4,695052996,0,0x0,8
tick,0x7ffe67f8feb4,695068803,0,0x0,8
tick,0x7ffe67f8feb4,695084581,0,0x0,8
tick,0x7ffe67f8feb4,695100599,0,0x0,8
tick,0x7ffe67f8feb4,695115996,0,0x0,8
tick,0x7ffe67f8feb4,695131562,0,0x0,8
tick,0x7ffe67f8feb4,695146874,0,0x0,8
tick,0x7ffe67f8feb4,695162279,0,0x0,8
tick,0x7ffe67f8feb4,695178123,0,0x0,8
tick,0x7ffe67f8feb4,695193590,0,0x0,8
tick,0x7ffe67f8feb4,695208584,0,0x0,8
tick,0x7ffe67f8feb4,695224144,0,0x0,8
tick,0x7ffe67f8feb4,695240018,0,0x0,8
tick,0x7ffe67f8feb4,695255213,0,0x0,8
tick,0x7ffe67f8feb4,695271298,0,0x0,8
tick,0x7ffe67f8feb4,695286747,0,0x0,8
tick,0x7ffe67f8feb4,695301941,0,0x0,8
tick,0x7ffe67f8feb4,695317674,0,0x0,8
tick,0x7ffe67f8feb4,695333433,0,0x0,8
tick,0x7ffe67f8feb4,695348730,0,0x0,8
tick,0x7ffe67f8feb4,695364075,0,0x0,8
tick,0x7ffe67f8feb4,695379089,0,0x0,8
tick,0x7ffe67f8feb4,695394544,0,0x0,8
tick,0x7ffe67f8feb4,695410305,0,0x0,8
tick,0x7ffe67f8feb4,695425843,0,0x0,8
tick,0x7ffe67f8feb4,695441922,0,0x0,8
tick,0x7ffe67f8feb4,695457809,0,0x0,8
tick,0x7ffe67f8feb4,695473785,0,0x0,8
tick,0x7ffe67f8feb4,695489607,0,0x0,8
tick,0x7ffe67f8feb4,695504812,0,0x0,8
tick,0x7ffe67f8feb4,695520011,0,0x0,8
tick,0x7ffe67f8feb4,695535023,0,0x0,8
tick,0x7ffe67f8feb4,695551094,0,0x0,8
tick,0x7ffe67f8feb4,695566358,0,0x0,8
tick,0x7ffe67f8feb4,695582349,0,0x0,8
tick,0x7ffe67f8feb4,695597308,0,0x0,8
tick,0x7ffe67f8feb4,695612404,0,0x0,8
tick,0x7ffe67f8feb4,695628261,0,0x0,8
tick,0x7ffe67f8feb4,695644293,0,0x0,8
tick,0x7ffe67f8feb4,695660246,0,0x0,8
tick,0x7ffe67f8feb4,695676259,0,0x0,8
tick,0x7ffe67f8feb4,695692275,0,0x0,8
tick,0x7ffe67f8feb4,695708457,0,0x0,8
tick,0x7ffe67f8feb4,695723768,0,0x0,8
tick,0x7ffe67f8feb4,695739266,0,0x0,8
tick,0x7ffe67f8feb4,695755244,0,0x0,8
tick,0x7ffe67f8feb4,695771239,0,0x0,8
tick,0x7ffe67f8feb4,695786275,0,0x0,8
tick,0x7ffe67f8feb4,695801427,0,0x0,8
tick,0x7ffe67f8feb4,695817505,0,0x0,8
tick,0x7ffe67f8feb4,695833216,0,0x0,8
tick,0x7ffe67f8feb4,695848290,0,0x0,8
tick,0x7ffe67f8feb4,695864281,0,0x0,8
tick,0x7ffe67f8feb4,695880325,0,0x0,8
tick,0x7ffe67f8feb4,695896294,0,0x0,8
tick,0x7ffe67f8feb4,695912303,0,0x0,8
tick,0x7ffe67f8feb4,695928306,0,0x0,8
tick,0x7ffe67f8feb4,695944308,0,0x0,8
tick,0x7ffe67f8feb4,695959328,0,0x0,8
tick,0x7ffe67f8feb4,695975332,0,0x0,8
tick,0x7ffe67f8feb4,695991314,0,0x0,8
tick,0x7ffe67f8feb4,696007313,0,0x0,8
tick,0x7ffe67f8feb4,696023296,0,0x0,8
tick,0x7ffe67f8feb4,696039308,0,0x0,8
tick,0x7ffe67f8feb4,696054296,0,0x0,8
tick,0x7ffe67f8feb4,696070302,0,0x0,8
tick,0x7ffe67f8feb4,696086310,0,0x0,8
tick,0x7ffe67f8feb4,696102337,0,0x0,8
tick,0x7ffe67f8feb4,696118323,0,0x0,8
tick,0x7ffe67f8feb4,696134325,0,0x0,8
tick,0x7ffe67f8feb4,696149597,0,0x0,8
tick,0x7ffe67f8feb4,696164862,0,0x0,8
tick,0x7ffe67f8feb4,696180882,0,0x0,8
tick,0x7ffe67f8feb4,696196887,0,0x0,8
tick,0x7ffe67f8feb4,696212885,0,0x0,8
tick,0x7ffe67f8feb4,696228343,0,0x0,8
tick,0x7ffe67f8feb4,696244356,0,0x0,8
tick,0x7ffe67f8feb4,696260393,0,0x0,8
tick,0x7ffe67f8feb4,696276393,0,0x0,8
tick,0x7ffe67f8feb4,696292396,0,0x0,8
tick,0x7ffe67f8feb4,696307747,0,0x0,8
tick,0x7ffe67f8feb4,696323705,0,0x0,8
tick,0x7ffe67f8feb4,696339609,0,0x0,8
tick,0x7ffe67f8feb4,696354832,0,0x0,8
tick,0x7ffe67f8feb4,696370615,0,0x0,8
tick,0x7ffe67f8feb4,696386602,0,0x0,8
tick,0x7ffe67f8feb4,696402595,0,0x0,8
tick,0x7ffe67f8feb4,696418580,0,0x0,8
tick,0x7ffe67f8feb4,696434585,0,0x0,8
tick,0x7ffe67f8feb4,696450640,0,0x0,8
tick,0x7ffe67f8feb4,696466596,0,0x0,8
tick,0x7ffe67f8feb4,696482585,0,0x0,8
tick,0x7ffe67f8feb4,696498588,0,0x0,8
tick,0x7ffe67f8feb4,696514121,0,0x0,8
tick,0x7ffe67f8feb4,696529612,0,0x0,8
tick,0x7ffe67f8feb4,696545625,0,0x0,8
tick,0x7ffe67f8feb4,696561179,0,0x0,8
tick,0x7ffe67f8feb4,696576701,0,0x0,8
tick,0x7ffe67f8feb4,696592677,0,0x0,8
tick,0x7ffe67f8feb4,696608312,0,0x0,8
tick,0x7ffe67f8feb4,696624287,0,0x0,8
tick,0x7ffe67f8feb4,696639447,0,0x0,8
tick,0x7ffe67f8feb4,696655378,0,0x0,8
tick,0x7ffe67f8feb4,696670538,0,0x0,8
tick,0x7ffe67f8feb4,696686218,0,0x0,8
tick,0x7ffe67f8feb4,696701960,0,0x0,8
tick,0x7ffe67f8feb4,696717198,0,0x0,8
tick,0x7ffe67f8feb4,696733065,0,0x0,8
tick,0x7ffe67f8feb4,696748678,0,0x0,8
tick,0x7ffe67f8feb4,696764705,0,0x0,8
tick,0x7ffe67f8feb4,696781226,0,0x0,8
tick,0x7ffe67f8feb4,696796257,0,0x0,8
tick,0x7ffe67f8feb4,696811216,0,0x0,8
tick,0x7ffe67f8feb4,696827263,0,0x0,8
tick,0x7ffe67f8feb4,696842942,0,0x0,8
tick,0x7ffe67f8feb4,696858515,0,0x0,8
tick,0x7ffe67f8feb4,696873456,0,0x0,8
tick,0x7ffe67f8feb4,696888285,0,0x0,8
tick,0x7ffe67f8feb4,696903580,0,0x0,8
tick,0x7ffe67f8feb4,696918892,0,0x0,8
tick,0x7ffe67f8feb4,696934574,0,0x0,8
tick,0x7ffe67f8feb4,696949709,0,0x0,8
tick,0x7ffe67f8feb4,696965382,0,0x0,8
tick,0x7ffe67f8feb4,696980886,0,0x0,8
tick,0x7ffe67f8feb4,696996954,0,0x0,8
tick,0x7ffe67f8feb4,697012413,0,0x0,8
tick,0x7ffe67f8feb4,697027832,0,0x0,8
tick,0x7ffe67f8feb4,697043772,0,0x0,8
tick,0x7ffe67f8feb4,697059777,0,0x0,8
tick,0x7ffe67f8feb4,697075388,0,0x0,8
tick,0x7ffe67f8feb4,697090689,0,0x0,8
tick,0x7ffe67f8feb4,697105982,0,0x0,8
tick,0x7ffe67f8feb4,697122312,0,0x0,8
tick,0x7ffe67f8feb4,697137755,0,0x0,8
tick,0x7ffe67f8feb4,697153898,0,0x0,8
tick,0x7ffe67f8feb4,697169061,0,0x0,8
tick,0x7ffe67f8feb4,697184599,0,0x0,8
tick,0x7ffe67f8feb4,697200096,0,0x0,8
tick,0x7ffe67f8feb4,697215723,0,0x0,8
tick,0x7ffe67f8feb4,697231625,0,0x0,8
tick,0x7ffe67f8feb4,697246936,0,0x0,8
tick,0x7ffe67f8feb4,697262907,0,0x0,8
tick,0x7ffe67f8feb4,697277830,0,0x0,8
tick,0x7ffe67f8feb4,697293833,0,0x0,8
tick,0x7ffe67f8feb4,697309307,0,0x0,8
tick,0x7ffe67f8feb4,697324797,0,0x0,8
tick,0x7ffe67f8feb4,697340229,0,0x0,8
tick,0x7ffe67f8feb4,697356284,0,0x0,8
tick,0x7ffe67f8feb4,697371295,0,0x0,8
tick,0x7ffe67f8feb4,697387017,0,0x0,8
tick,0x7ffe67f8feb4,697402775,0,0x0,8
tick,0x7ffe67f8feb4,697418766,0,0x0,8
tick,0x7ffe67f8feb4,697434073,0,0x0,8
tick,0x7ffe67f8feb4,697449515,0,0x0,8
tick,0x7ffe67f8feb4,697464779,0,0x0,8
tick,0x7ffe67f8feb4,697480471,0,0x0,8
tick,0x7ffe67f8feb4,697495436,0,0x0,8
tick,0x7ffe67f8feb4,697511443,0,0x0,8
tick,0x7ffe67f8feb4,697527450,0,0x0,8
tick,0x7ffe67f8feb4,697543500,0,0x0,8
tick,0x7ffe67f8feb4,697559106,0,0x0,8
tick,0x7ffe67f8feb4,697574147,0,0x0,8
tick,0x7ffe67f8feb4,697589184,0,0x0,8
tick,0x7ffe67f8feb4,697605194,0,0x0,8
tick,0x7ffe67f8feb4,697621138,0,0x0,8
tick,0x7ffe67f8feb4,697636361,0,0x0,8
tick,0x7ffe67f8feb4,697651481,0,0x0,8
tick,0x7ffe67f8feb4,697667365,0,0x0,8
tick,0x7ffe67f8feb4,697683430,0,0x0,8
tick,0x7ffe67f8feb4,697699208,0,0x0,8
tick,0x7ffe67f8feb4,697715064,0,0x0,8
tick,0x7ffe67f8feb4,697730285,0,0x0,8
tick,0x7ffe67f8feb4,697745274,0,0x0,8
tick,0x7ffe67f8feb4,697760924,0,0x0,8
tick,0x7ffe67f8feb4,697776218,0,0x0,8
tick,0x7ffe67f8feb4,697791134,0,0x0,8
tick,0x7ffe67f8feb4,697806686,0,0x0,8
tick,0x7ffe67f8feb4,697821491,0,0x0,8
tick,0x7ffe67f8feb4,697837639,0,0x0,8
tick,0x7ffe67f8feb4,697852883,0,0x0,8
tick,0x7ffe67f8feb4,697868278,0,0x0,8
tick,0x7ffe67f8feb4,697884482,0,0x0,8
tick,0x7ffe67f8feb4,697899965,0,0x0,8
tick,0x7ffe67f8feb4,697915321,0,0x0,8
tick,0x7ffe67f8feb4,697931095,0,0x0,8
tick,0x7ffe67f8feb4,697946868,0,0x0,8
tick,0x7ffe67f8feb4,697962341,0,0x0,8
tick,0x7ffe67f8feb4,697978107,0,0x0,8
tick,0x7ffe67f8feb4,697993646,0,0x0,8
tick,0x7ffe67f8feb4,698008885,0,0x0,8
tick,0x7ffe67f8feb4,698025046,0,0x0,8
tick,0x7ffe67f8feb4,698041082,0,0x0,8
tick,0x7ffe67f8feb4,698057073,0,0x0,8
tick,0x7ffe67f8feb4,698072319,0,0x0,8
tick,0x7ffe67f8feb4,698087551,0,0x0,8
tick,0x7ffe67f8feb4,698102964,0,0x0,8
tick,0x7ffe67f8feb4,698118597,0,0x0,8
tick,0x7ffe67f8feb4,698133902,0,0x0,8
tick,0x7ffe67f8feb4,698149837,0,0x0,8
tick,0x7ffe67f8feb4,698166124,0,0x0,8
tick,0x7ffe67f8feb4,698181856,0,0x0,8
tick,0x7ffe67f8feb4,698197879,0,0x0,8
tick,0x7ffe67f8feb4,698213036,0,0x0,8
tick,0x7ffe67f8feb4,698229062,0,0x0,8
tick,0x7ffe67f8feb4,698244397,0,0x0,8
tick,0x7ffe67f8feb4,698259574,0,0x0,8
tick,0x7ffe67f8feb4,698275358,0,0x0,8
tick,0x7ffe67f8feb4,698291722,0,0x0,8
tick,0x7ffe67f8feb4,698307804,0,0x0,8
tick,0x7ffe67f8feb4,698323309,0,0x0,8
tick,0x7ffe67f8feb4,698339244,0,0x0,8
tick,0x7ffe67f8feb4,698355276,0,0x0,8
tick,0x7ffe67f8feb4,698370708,0,0x0,8
tick,0x7ffe67f8feb4,698385735,0,0x0,8
tick,0x7ffe67f8feb4,698401799,0,0x0,8
tick,0x7ffe67f8feb4,698417773,0,0x0,8
tick,0x7ffe67f8feb4,698433306,0,0x0,8
tick,0x7ffe67f8feb4,698448820,0,0x0,8
tick,0x7ffe67f8feb4,698464476,0,0x0,8
tick,0x7ffe67f8feb4,698480511,0,0x0,8
tick,0x7ffe67f8feb4,698496564,0,0x0,8
tick,0x7ffe67f8feb4,698512491,0,0x0,8
tick,0x7ffe67f8feb4,698528511,0,0x0,8
tick,0x7ffe67f8feb4,698544511,0,0x0,8
tick,0x7ffe67f8feb4,698559659,0,0x0,8
tick,0x7ffe67f8feb4,698575784,0,0x0,8
tick,0x7ffe67f8feb4,698591292,0,0x0,8
tick,0x7ffe67f8feb4,698606651,0,0x0,8
tick,0x7ffe67f8feb4,698622180,0,0x0,8
tick,0x7ffe67f8feb4,698637691,0,0x0,8
tick,0x7ffe67f8feb4,698653172,0,0x0,8
tick,0x7ffe67f8feb4,698668454,0,0x0,8
tick,0x7ffe67f8feb4,698684748,0,0x0,8
tick,0x7ffe67f8feb4,698699913,0,0x0,8
tick,0x7ffe67f8feb4,698715123,0,0x0,8
tick,0x7ffe67f8feb4,698730297,0,0x0,8
tick,0x7ffe67f8feb4,698746304,0,0x0,8
tick,0x7ffe67f8feb4,698762243,0,0x0,8
tick,0x7ffe67f8feb4,698777418,0,0x0,8
tick,0x7ffe67f8feb4,698793139,0,0x0,8
tick,0x7ffe67f8feb4,698808652,0,0x0,8
tick,0x7ffe67f8feb4,698824693,0,0x0,8
tick,0x7ffe67f8feb4,698840060,0,0x0,8
tick,0x7ffe67f8feb4,698856004,0,0x0,8
tick,0x7ffe67f8feb4,698871826,0,0x0,8
tick,0x7ffe67f8feb4,698887647,0,0x0,8
tick,0x7ffe67f8feb4,698904097,0,0x0,8
tick,0x7ffe67f8feb4,698919721,0,0x0,8
tick,0x7ffe67f8feb4,698935419,0,0x0,8
tick,0x7ffe67f8feb4,698951362,0,0x0,8
tick,0x7ffe67f8feb4,698966970,0,0x0,8
tick,0x7ffe67f8feb4,698983302,0,0x0,8
tick,0x7ffe67f8feb4,698998987,0,0x0,8
tick,0x7ffe67f8feb4,699014472,0,0x0,8
tick,0x7ffe67f8feb4,699030385,0,0x0,8
tick,0x7ffe67f8feb4,699045631,0,0x0,8
tick,0x7ffe67f8feb4,699061107,0,0x0,8
tick,0x7ffe67f8feb4,699076840,0,0x0,8
tick,0x7ffe67f8feb4,699091976,0,0x0,8
tick,0x7ffe67f8feb4,699107852,0,0x0,8
tick,0x7ffe67f8feb4,699123003,0,0x0,8
tick,0x7ffe67f8feb4,699138923,0,0x0,8
tick,0x7ffe67f8feb4,699154764,0,0x0,8
tick,0x7ffe67f8feb4,699170079,0,0x0,8
tick,0x7ffe67f8feb4,699185612,0,0x0,8
tick,0x7ffe67f8feb4,699201032,0,0x0,8
tick,0x7ffe67f8feb4,699216932,0,0x0,8
tick,0x7ffe67f8feb4,699233217,0,0x0,8
tick,0x7ffe67f8feb4,699248030,0,0x0,8
tick,0x7ffe67f8feb4,699263357,0,0x0,8
tick,0x7ffe67f8feb4,699278768,0,0x0,8
tick,0x7ffe67f8feb4,699294330,0,0x0,8
tick,0x7ffe67f8feb4,699309509,0,0x0,8
tick,0x7ffe67f8feb4,699325399,0,0x0,8
tick,0x7ffe67f8feb4,699341667,0,0x0,8
tick,0x7ffe67f8feb4,699357004,0,0x0,8
tick,0x7ffe67f8feb4,699372479,0,0x0,8
tick,0x7ffe67f8feb4,699388200,0,0x0,8
tick,0x7ffe67f8feb4,699404012,0,0x0,8
tick,0x7ffe67f8feb4,699419618,0,0x0,8
tick,0x7ffe67f8feb4,699434626,0,0x0,8
tick,0x7ffe67f8feb4,699449987,0,0x0,8
tick,0x7ffe67f8feb4,699465243,0,0x0,8
tick,0x7ffe67f8feb4,699481256,0,0x0,8
tick,0x7ffe67f8feb4,699497016,0,0x0,8
tick,0x7ffe67f8feb4,699512976,0,0x0,8
tick,0x7ffe67f8feb4,699528967,0,0x0,8
tick,0x7ffe67f8feb4,699544962,0,0x0,8
tick,0x7ffe67f8feb4,699561023,0,0x0,8
tick,0x7ffe67f8feb4,699576777,0,0x0,8
tick,0x7ffe67f8feb4,699591919,0,0x0,8
tick,0x7ffe67f8feb4,699606717,0,0x0,8
tick,0x7ffe67f8feb4,699622365,0,0x0,8
tick,0x7ffe67f8feb4,699637726,0,0x0,8
tick,0x7ffe67f8feb4,699653784,0,0x0,8
tick,0x7ffe67f8feb4,699668804,0,0x0,8
tick,0x7ffe67f8feb4,699684749,0,0x0,8
tick,0x7ffe67f8feb4,699700381,0,0x0,8
tick,0x7ffe67f8feb4,699716293,0,0x0,8
tick,0x7ffe67f8feb4,699732281,0,0x0,8
tick,0x7ffe67f8feb4,699748294,0,0x0,8
tick,0x7ffe67f8feb4,699764335,0,0x0,8
tick,0x7ffe67f8feb4,699780501,0,0x0,8
tick,0x7ffe67f8feb4,699796369,0,0x0,8
tick,0x7ffe67f8feb4,699812579,0,0x0,8
tick,0x7ffe67f8feb4,699828495,0,0x0,8
tick,0x7ffe67f8feb4,699844304,0,0x0,8
tick,0x7ffe67f8feb4,699860346,0,0x0,8
tick,0x7ffe67f8feb4,699876330,0,0x0,8
tick,0x7ffe67f8feb4,699892329,0,0x0,8
tick,0x7ffe67f8feb4,699908351,0,0x0,8
tick,0x7ffe67f8feb4,699924348,0,0x0,8
tick,0x7ffe67f8feb4,699940348,0,0x0,8
tick,0x7ffe67f8feb4,699956368,0,0x0,8
tick,0x7ffe67f8feb4,699972403,0,0x0,8
tick,0x7ffe67f8feb4,699988398,0,0x0,8
tick,0x7ffe67f8feb4,700004427,0,0x0,8
tick,0x7ffe67f8feb4,700020391,0,0x0,8
tick,0x7ffe67f8feb4,700036386,0,0x0,8
tick,0x7ffe67f8feb4,700051387,0,0x0,8
tick,0x7ffe67f8feb4,700067403,0,0x0,8
tick,0x7ffe67f8feb4,700083494,0,0x0,8
tick,0x7ffe67f8feb4,700099418,0,0x0,8
tick,0x7ffe67f8feb4,700115425,0,0x0,8
tick,0x7ffe67f8feb4,700131427,0,0x0,8
tick,0x7ffe67f8feb4,700147539,0,0x0,8
tick,0x7ffe67f8feb4,700163491,0,0x0,8
tick,0x7ffe67f8feb4,700179474,0,0x0,8
tick,0x7ffe67f8feb4,700195572,0,0x0,8
tick,0x7ffe67f8feb4,700211435,0,0x0,8
tick,0x7ffe67f8feb4,700227488,0,0x0,8
tick,0x7ffe67f8feb4,700243476,0,0x0,8
tick,0x7ffe67f8feb4,700259454,0,0x0,8
tick,0x7ffe67f8feb4,700275487,0,0x0,8
tick,0x7ffe67f8feb4,700291500,0,0x0,8
tick,0x7ffe67f8feb4,700307510,0,0x0,8
tick,0x7ffe67f8feb4,700323519,0,0x0,8
tick,0x7ffe67f8feb4,700338674,0,0x0,8
tick,0x7ffe67f8feb4,700353841,0,0x0,8
tick,0x7ffe67f8feb4,700369394,0,0x0,8
tick,0x7ffe67f8feb4,700385153,0,0x0,8
tick,0x7ffe67f8feb4,700401072,0,0x0,8
tick,0x7ffe67f8feb4,700416823,0,0x0,8
tick,0x7ffe67f8feb4,700431946,0,0x0,8
tick,0x7ffe67f8feb4,700447945,0,0x0,8
tick,0x7ffe67f8feb4,700463951,0,0x0,8
tick,0x7ffe67f8feb4,700479258,0,0x0,8
tick,0x7ffe67f8feb4,700494684,0,0x0,8
tick,0x7ffe67f8feb4,700509824,0,0x0,8
tick,0x7ffe67f8feb4,700526022,0,0x0,8
tick,0x7ffe67f8feb4,700541794,0,0x0,8
tick,0x7ffe67f8feb4,700557777,0,0x0,8
tick,0x7ffe67f8feb4,700573768,0,0x0,8
tick,0x7ffe67f8feb4,700589294,0,0x0,8
tick,0x7ffe67f8feb4,700604924,0,0x0,8
tick,0x7ffe67f8feb4,700620591,0,0x0,8
tick,0x7ffe67f8feb4,700636828,0,0x0,8
tick,0x7ffe67f8feb4,700651710,0,0x0,8
tick,0x7ffe67f8feb4,700667719,0,0x0,8
tick,0x7ffe67f8feb4,700682617,0,0x0,8
tick,0x7ffe67f8feb4,700698650,0,0x0,8
tick,0x7ffe67f8feb4,700713700,0,0x0,8
tick,0x7ffe67f8feb4,700729110,0,0x0,8
tick,0x7ffe67f8feb4,700744494,0,0x0,8
tick,0x7ffe67f8feb4,700760332,0,0x0,8
tick,0x7ffe67f8feb4,700775603,0,0x0,8
tick,0x7ffe67f8feb4,700791035,0,0x0,8
tick,0x7ffe67f8feb4,700806861,0,0x0,8
tick,0x7ffe67f8feb4,700822164,0,0x0,8
tick,0x7ffe67f8feb4,700837885,0,0x0,8
tick,0x7ffe67f8feb4,700853679,0,0x0,8
tick,0x7ffe67f8feb4,700869396,0,0x0,8
tick,0x7ffe67f8feb4,700884969,0,0x0,8
tick,0x7ffe67f8feb4,700900503,0,0x0,8
tick,0x7ffe67f8feb4,700916575,0,0x0,8
tick,0x7ffe67f8feb4,700932500,0,0x0,8
tick,0x7ffe67f8feb4,700948021,0,0x0,8
tick,0x7ffe67f8feb4,700963678,0,0x0,8
tick,0x7ffe67f8feb4,700978444,0,0x0,8
tick,0x7ffe67f8feb4,700993967,0,0x0,8
tick,0x7ffe67f8feb4,701009159,0,0x0,8
tick,0x7ffe67f8feb4,701024306,0,0x0,8
tick,0x7ffe67f8feb4,701040578,0,0x0,8
tick,0x7ffe67f8feb4,701056390,0,0x0,8
tick,0x7ffe67f8feb4,701071801,0,0x0,8
tick,0x7ffe67f8feb4,701086987,0,0x0,8
tick,0x7ffe67f8feb4,701102566,0,0x0,8
tick,0x7ffe67f8feb4,701118557,0,0x0,8
tick,0x7ffe67f8feb4,701134572,0,0x0,8
tick,0x7ffe67f8feb4,701150244,0,0x0,8
tick,0x7ffe67f8feb4,701166171,0,0x0,8
tick,0x7ffe67f8feb4,701182184,0,0x0,8
tick,0x7ffe67f8feb4,701198207,0,0x0,8
tick,0x7ffe67f8feb4,701214202,0,0x0,8
tick,0x7ffe67f8feb4,701230228,0,0x0,8
tick,0x7ffe67f8feb4,701245755,0,0x0,8
tick,0x7ffe67f8feb4,701261185,0,0x0,8
tick,0x7ffe67f8feb4,701276803,0,0x0,8
tick,0x7ffe67f8feb4,701292419,0,0x0,8
tick,0x7ffe67f8feb4,701308473,0,0x0,8
tick,0x7ffe67f8feb4,701323426,0,0x0,8
tick,0x7ffe67f8feb4,701339452,0,0x0,8
tick,0x7ffe67f8feb4,701354404,0,0x0,8
tick,0x7ffe67f8feb4,701370399,0,0x0,8
tick,0x7ffe67f8feb4,701386455,0,0x0,8
tick,0x7ffe67f8feb4,701402450,0,0x0,8
tick,0x7ffe67f8feb4,701418420,0,0x0,8
tick,0x7ffe67f8feb4,701434419,0,0x0,8
tick,0x7ffe67f8feb4,701449793,0,0x0,8
tick,0x7ffe67f8feb4,701465733,0,0x0,8
tick,0x7ffe67f8feb4,701481722,0,0x0,8
tick,0x7ffe67f8feb4,701497754,0,0x0,8
tick,0x7ffe67f8feb4,701513009,0,0x0,8
tick,0x7ffe67f8feb4,701528791,0,0x0,8
tick,0x7ffe67f8feb4,701544785,0,0x0,8
tick,0x7ffe67f8feb4,701560806,0,0x0,8
tick,0x7ffe67f8feb4,701576802,0,0x0,8
tick,0x7ffe67f8feb4,701592770,0,0x0,8
tick,0x7ffe67f8feb4,701608787,0,0x0,8
tick,0x7ffe67f8feb4,701624794,0,0x0,8
tick,0x7ffe67f8feb4,701640799,0,0x0,8
tick,0x7ffe67f8feb4,701656822,0,0x0,8
tick,0x7ffe67f8feb4,701672839,0,0x0,8
tick,0x7ffe67f8feb4,701688828,0,0x0,8
tick,0x7ffe67f8feb4,701704922,0,0x0,8
tick,0x7ffe67f8feb4,701720801,0,0x0,8
tick,0x7ffe67f8feb4,701736078,0,0x0,8
tick,0x7ffe67f8feb4,701751785,0,0x0,8
tick,0x7ffe67f8feb4,701767788,0,0x0,8
tick,0x7ffe67f8feb4,701783236,0,0x0,8
tick,0x7ffe67f8feb4,701798864,0,0x0,8
tick,0x7ffe67f8feb4,701814873,0,0x0,8
tick,0x7ffe67f8feb4,701830522,0,0x0,8
tick,0x7ffe67f8feb4,701845875,0,0x0,8
tick,0x7ffe67f8feb4,701861021,0,0x0,8
tick,0x7ffe67f8feb4,701877017,0,0x0,8
tick,0x7ffe67f8feb4,701892169,0,0x0,8
tick,0x7ffe67f8feb4,701908044,0,0x0,8
tick,0x7ffe67f8feb4,701924086,0,0x0,8
tick,0x7ffe67f8feb4,701939799,0,0x0,8
tick,0x7ffe67f8feb4,701955242,0,0x0,8
tick,0x7ffe67f8feb4,701970388,0,0x0,8
tick,0x7ffe67f8feb4,701986679,0,0x0,8
tick,0x7ffe67f8feb4,702002775,0,0x0,8
tick,0x7ffe67f8feb4,702019176,0,0x0,8
tick,0x7ffe67f8feb4,702035229,0,0x0,8
tick,0x7ffe67f8feb4,702050784,0,0x0,8
tick,0x7ffe67f8feb4,702066518,0,0x0,8
tick,0x7ffe67f8feb4,702082177,0,0x0,8
tick,0x7ffe67f8feb4,702097920,0,0x0,8
tick,0x7ffe67f8feb4,702113138,0,0x0,8
tick,0x7ffe67f8feb4,702128372,0,0x0,8
tick,0x7ffe67f8feb4,702144145,0,0x0,8
tick,0x7ffe67f8feb4,702160073,0,0x0,8
tick,0x7ffe67f8feb4,702176075,0,0x0,8
tick,0x7ffe67f8feb4,702191798,0,0x0,8
tick,0x7ffe67f8feb4,702207079,0,0x0,8
tick,0x7ffe67f8feb4,702223131,0,0x0,8
tick,0x7ffe67f8feb4,702238659,0,0x0,8
tick,0x7ffe67f8feb4,702256423,0,0x0,8
tick,0x7ffe67f8feb4,702269665,0,0x0,8
tick,0x7ffe67f8feb4,702285659,0,0x0,8
tick,0x7ffe67f8feb4,702300775,0,0x0,8
tick,0x7ffe67f8feb4,702316133,0,0x0,8
tick,0x7ffe67f8feb4,702332088,0,0x0,8
tick,0x7ffe67f8feb4,702347984,0,0x0,8
tick,0x7ffe67f8feb4,702364010,0,0x0,8
tick,0x7ffe67f8feb4,702379126,0,0x0,8
tick,0x7ffe67f8feb4,702395339,0,0x0,8
tick,0x7ffe67f8feb4,702410529,0,0x0,8
tick,0x7ffe67f8feb4,702425767,0,0x0,8
tick,0x7ffe67f8feb4,702440748,0,0x0,8
tick,0x7ffe67f8feb4,702456873,0,0x0,8
tick,0x7ffe67f8feb4,702473054,0,0x0,8
tick,0x7ffe67f8feb4,702488251,0,0x0,8
tick,0x7ffe67f8feb4,702503826,0,0x0,8
tick,0x7ffe67f8feb4,702519238,0,0x0,8
tick,0x7ffe67f8feb4,702535229,0,0x0,8
tick,0x7ffe67f8feb4,702551232,0,0x0,8
tick,0x7ffe67f8feb4,702567192,0,0x0,8
tick,0x7ffe67f8feb4,702583199,0,0x0,8
tick,0x7ffe67f8feb4,702599286,0,0x0,8
tick,0x7ffe67f8feb4,702615238,0,0x0,8
tick,0x7ffe67f8feb4,702631229,0,0x0,8
tick,0x7ffe67f8feb4,702646781,0,0x0,8
tick,0x7ffe67f8feb4,702661952,0,0x0,8
tick,0x7ffe67f8feb4,702677837,0,0x0,8
tick,0x7ffe67f8feb4,702693896,0,0x0,8
tick,0x7ffe67f8feb4,702709382,0,0x0,8
tick,0x7ffe67f8feb4,702724798,0,0x0,8
tick,0x7ffe67f8feb4,702740816,0,0x0,8
tick,0x7ffe67f8feb4,702756015,0,0x0,8
tick,0x7ffe67f8feb4,702771193,0,0x0,8
tick,0x7ffe67f8feb4,702786470,0,0x0,8
tick,0x7ffe67f8feb4,702802258,0,0x0,8
tick,0x7ffe67f8feb4,702817587,0,0x0,8
tick,0x7ffe67f8feb4,702833746,0,0x0,8
tick,0x7ffe67f8feb4,702849191,0,0x0,8
tick,0x7ffe67f8feb4,702865201,0,0x0,8
tick,0x7ffe67f8feb4,702881310,0,0x0,8
tick,0x7ffe67f8feb4,702896274,0,0x0,8
tick,0x7ffe67f8feb4,702911813,0,0x0,8
tick,0x7ffe67f8feb4,702927412,0,0x0,8
tick,0x7ffe67f8feb4,702942531,0,0x0,8
tick,0x7ffe67f8feb4,702958492,0,0x0,8
tick,0x7ffe67f8feb4,702974463,0,0x0,8
tick,0x7ffe67f8feb4,702990061,0,0x0,8
tick,0x7ffe67f8feb4,703006256,0,0x0,8
tick,0x7ffe67f8feb4,703021559,0,0x0,8
tick,0x7ffe67f8feb4,703037072,0,0x0,8
tick,0x7ffe67f8feb4,703052906,0,0x0,8
tick,0x7ffe67f8feb4,703068400,0,0x0,8
tick,0x7ffe67f8feb4,703084019,0,0x0,8
tick,0x7ffe67f8feb4,703099452,0,0x0,8
tick,0x7ffe67f8feb4,703115117,0,0x0,8
tick,0x7ffe67f8feb4,703130443,0,0x0,8
tick,0x7ffe67f8feb4,703146435,0,0x0,8
tick,0x7ffe67f8feb4,703161520,0,0x0,8
tick,0x7ffe67f8feb4,703176406,0,0x0,8
tick,0x7ffe67f8feb4,703191592,0,0x0,8
tick,0x7ffe67f8feb4,703207492,0,0x0,8
tick,0x7ffe67f8feb4,703222611,0,0x0,8
tick,0x7ffe67f8feb4,703238674,0,0x0,8
tick,0x7ffe67f8feb4,703254522,0,0x0,8
tick,0x7ffe67f8feb4,703269982,0,0x0,8
tick,0x7ffe67f8feb4,703285385,0,0x0,8
tick,0x7ffe67f8feb4,703301080,0,0x0,8
tick,0x7ffe67f8feb4,703317112,0,0x0,8
tick,0x7ffe67f8feb4,703333103,0,0x0,8
tick,0x7ffe67f8feb4,703348772,0,0x0,8
tick,0x7ffe67f8feb4,703364017,0,0x0,8
tick,0x7ffe67f8feb4,703379458,0,0x0,8
tick,0x7ffe67f8feb4,703395036,0,0x0,8
tick,0x7ffe67f8feb4,703410513,0,0x0,8
tick,0x7ffe67f8feb4,703425564,0,0x0,8
tick,0x7ffe67f8feb4,703441473,0,0x0,8
tick,0x7ffe67f8feb4,703457505,0,0x0,8
tick,0x7ffe67f8feb4,703473410,0,0x0,8
tick,0x7ffe67f8feb4,703488961,0,0x0,8
tick,0x7ffe67f8feb4,703504066,0,0x0,8
tick,0x7ffe67f8feb4,703520544,0,0x0,8
tick,0x7ffe67f8feb4,703536221,0,0x0,8
tick,0x7ffe67f8feb4,703552189,0,0x0,8
tick,0x7ffe67f8feb4,703568197,0,0x0,8
tick,0x7ffe67f8feb4,703584207,0,0x0,8
tick,0x7ffe67f8feb4,703600216,0,0x0,8
tick,0x7ffe67f8feb4,703616191,0,0x0,8
tick,0x7ffe67f8feb4,703631730,0,0x0,8
tick,0x7ffe67f8feb4,703647285,0,0x0,8
tick,0x7ffe67f8feb4,703662779,0,0x0,8
tick,0x7ffe67f8feb4,703678768,0,0x0,8
tick,0x7ffe67f8feb4,703693908,0,0x0,8
tick,0x7ffe67f8feb4,703709045,0,0x0,8
tick,0x7ffe67f8feb4,703724931,0,0x0,8
tick,0x7ffe67f8feb4,703740034,0,0x0,8
tick,0x7ffe67f8feb4,703755938,0,0x0,8
tick,0x7ffe67f8feb4,703771280,0,0x0,8
tick,0x7ffe67f8feb4,703786244,0,0x0,8
tick,0x7ffe67f8feb4,703802266,0,0x0,8
tick,0x7ffe67f8feb4,703817746,0,0x0,8
tick,0x7ffe67f8feb4,703833686,0,0x0,8
tick,0x7ffe67f8feb4,703848956,0,0x0,8
tick,0x7ffe67f8feb4,703864741,0,0x0,8
tick,0x7ffe67f8feb4,703880445,0,0x0,8
tick,0x7ffe67f8feb4,703896680,0,0x0,8
tick,0x7ffe67f8feb4,703912596,0,0x0,8
tick,0x7ffe67f8feb4,703928463,0,0x0,8
tick,0x7ffe67f8feb4,703943958,0,0x0,8
tick,0x7ffe67f8feb4,703959257,0,0x0,8
tick,0x7ffe67f8feb4,703975857,0,0x0,8
tick,0x7ffe67f8feb4,703991025,0,0x0,8
tick,0x7ffe67f8feb4,704006070,0,0x0,8
tick,0x7ffe67f8feb4,704022116,0,0x0,8
tick,0x7ffe67f8feb4,704038031,0,0x0,8
tick,0x7ffe67f8feb4,704054094,0,0x0,8
tick,0x7ffe67f8feb4,704070120,0,0x0,8
tick,0x7ffe67f8feb4,704086054,0,0x0,8
tick,0x7ffe67f8feb4,704102076,0,0x0,8
tick,0x7ffe67f8feb4,704118057,0,0x0,8
tick,0x7ffe67f8feb4,704134048,0,0x0,8
tick,0x7ffe67f8feb4,704150035,0,0x0,8
tick,0x7ffe67f8feb4,704165271,0,0x0,8
tick,0x7ffe67f8feb4,704181288,0,0x0,8
tick,0x7ffe67f8feb4,704197061,0,0x0,8
tick,0x7ffe67f8feb4,704213091,0,0x0,8
tick,0x7ffe67f8feb4,704229090,0,0x0,8
tick,0x7ffe67f8feb4,704245103,0,0x0,8
tick,0x7ffe67f8feb4,704261109,0,0x0,8
tick,0x7ffe67f8feb4,704277106,0,0x0,8
tick,0x7ffe67f8feb4,704293113,0,0x0,8
tick,0x7ffe67f8feb4,704309592,0,0x0,8
tick,0x7ffe67f8feb4,704325814,0,0x0,8
tick,0x7ffe67f8feb4,704341869,0,0x0,8
tick,0x7ffe67f8feb4,704357115,0,0x0,8
tick,0x7ffe67f8feb4,704372763,0,0x0,8
tick,0x7ffe67f8feb4,704388761,0,0x0,8
tick,0x7ffe67f8feb4,704404141,0,0x0,8
tick,0x7ffe67f8feb4,704419932,0,0x0,8
tick,0x7ffe67f8feb4,704435023,0,0x0,8
tick,0x7ffe67f8feb4,704450940,0,0x0,8
tick,0x7ffe67f8feb4,704466460,0,0x0,8
tick,0x7ffe67f8feb4,704482262,0,0x0,8
tick,0x7ffe67f8feb4,704498619,0,0x0,8
tick,0x7ffe67f8feb4,704514497,0,0x0,8
tick,0x7ffe67f8feb4,704529969,0,0x0,8
tick,0x7ffe67f8feb4,704545000,0,0x0,8
tick,0x7ffe67f8feb4,704560948,0,0x0,8
tick,0x7ffe67f8feb4,704576957,0,0x0,8
tick,0x7ffe67f8feb4,704592945,0,0x0,8
tick,0x7ffe67f8feb4,704608934,0,0x0,8
tick,0x7ffe67f8feb4,704624950,0,0x0,8
tick,0x7ffe67f8feb4,704640946,0,0x0,8
tick,0x7ffe67f8feb4,704657041,0,0x0,8
tick,0x7ffe67f8feb4,704673075,0,0x0,8
tick,0x7ffe67f8feb4,704688114,0,0x0,8
tick,0x7ffe67f8feb4,704704009,0,0x0,8
tick,0x7ffe67f8feb4,704719530,0,0x0,8
tick,0x7ffe67f8feb4,704735365,0,0x0,8
tick,0x7ffe67f8feb4,704750852,0,0x0,8
tick,0x7ffe67f8feb4,704766104,0,0x0,8
tick,0x7ffe67f8feb4,704781514,0,0x0,8
tick,0x7ffe67f8feb4,704797564,0,0x0,8
tick,0x7ffe67f8feb4,704813119,0,0x0,8
tick,0x7ffe67f8feb4,704828955,0,0x0,8
tick,0x7ffe67f8feb4,704844596,0,0x0,8
tick,0x7ffe67f8feb4,704860069,0,0x0,8
tick,0x7ffe67f8feb4,704875415,0,0x0,8
tick,0x7ffe67f8feb4,704891436,0,0x0,8
tick,0x7ffe67f8feb4,704906518,0,0x0,8
tick,0x7ffe67f8feb4,704921961,0,0x0,8
tick,0x7ffe67f8feb4,704937081,0,0x0,8
tick,0x7ffe67f8feb4,704952782,0,0x0,8
tick,0x7ffe67f8feb4,704968817,0,0x0,8
tick,0x7ffe67f8feb4,704984423,0,0x0,8
tick,0x7ffe67f8feb4,704999401,0,0x0,8
tick,0x7ffe67f8feb4,705015519,0,0x0,8
tick,0x7ffe67f8feb4,705030790,0,0x0,8
tick,0x7ffe67f8feb4,705046934,0,0x0,8
tick,0x7ffe67f8feb4,705062800,0,0x0,8
tick,0x7ffe67f8feb4,705078841,0,0x0,8
tick,0x7ffe67f8feb4,705094892,0,0x0,8
tick,0x7ffe67f8feb4,705110863,0,0x0,8
tick,0x7ffe67f8feb4,705126862,0,0x0,8
tick,0x7ffe67f8feb4,705142826,0,0x0,8
tick,0x7ffe67f8feb4,705158787,0,0x0,8
tick,0x7ffe67f8feb4,705174844,0,0x0,8
tick,0x7ffe67f8feb4,705190810,0,0x0,8
tick,0x7ffe67f8feb4,705206822,0,0x0,8
tick,0x7ffe67f8feb4,705222810,0,0x0,8
tick,0x7ffe67f8feb4,705238261,0,0x0,8
tick,0x7ffe67f8feb4,705253329,0,0x0,8
tick,0x7ffe67f8feb4,705269001,0,0x0,8
tick,0x7ffe67f8feb4,705285163,0,0x0,8
tick,0x7ffe67f8feb4,705301134,0,0x0,8
tick,0x7ffe67f8feb4,705316351,0,0x0,8
tick,0x7ffe67f8feb4,705332294,0,0x0,8
tick,0x7ffe67f8feb4,705348305,0,0x0,8
tick,0x7ffe67f8feb4,705363497,0,0x0,8
tick,0x7ffe67f8feb4,705379550,0,0x0,8
tick,0x7ffe67f8feb4,705395536,0,0x0,8
tick,0x7ffe67f8feb4,705411546,0,0x0,8
tick,0x7ffe67f8feb4,705427542,0,0x0,8
tick,0x7ffe67f8feb4,705443564,0,0x0,8
tick,0x7ffe67f8feb4,705459631,0,0x0,8
tick,0x7ffe67f8feb4,705474822,0,0x0,8
tick,0x7ffe67f8feb4,705490891,0,0x0,8
tick,0x7ffe67f8feb4,705506557,0,0x0,8
tick,0x7ffe67f8feb4,705522639,0,0x0,8
tick,0x7ffe67f8feb4,705537656,0,0x0,8
tick,0x7ffe67f8feb4,705552674,0,0x0,8
tick,0x7ffe67f8feb4,705568845,0,0x0,8
tick,0x7ffe67f8feb4,705584655,0,0x0,8
tick,0x7ffe67f8feb4,705600641,0,0x0,8
tick,0x7ffe67f8feb4,705616413,0,0x0,8
tick,0x7ffe67f8feb4,705632475,0,0x0,8
tick,0x7ffe67f8feb4,705647779,0,0x0,8
tick,0x7ffe67f8feb4,705663229,0,0x0,8
tick,0x7ffe67f8feb4,705678790,0,0x0,8
tick,0x7ffe67f8feb4,705693951,0,0x0,8
tick,0x7ffe67f8feb4,705709828,0,0x0,8
tick,0x7ffe67f8feb4,705725375,0,0x0,8
tick,0x7ffe67f8feb4,705741430,0,0x0,8
tick,0x7ffe67f8feb4,705757488,0,0x0,8
tick,0x7ffe67f8feb4,705773499,0,0x0,8
tick,0x7ffe67f8feb4,705788912,0,0x0,8
tick,0x7ffe67f8feb4,705804903,0,0x0,8
tick,0x7ffe67f8feb4,705821130,0,0x0,8
tick,0x7ffe67f8feb4,705837150,0,0x0,8
tick,0x7ffe67f8feb4,705853068,0,0x0,8
tick,0x7ffe67f8feb4,705868304,0,0x0,8
tick,0x7ffe67f8feb4,705883638,0,0x0,8
tick,0x7ffe67f8feb4,705899144,0,0x0,8
tick,0x7ffe67f8feb4,705914704,0,0x0,8
tick,0x7ffe67f8feb4,705930362,0,0x0,8
tick,0x7ffe67f8feb4,705946435,0,0x0,8
tick,0x7ffe67f8feb4,705961514,0,0x0,8
tick,0x7ffe67f8feb4,705977077,0,0x0,8
tick,0x7ffe67f8feb4,705992332,0,0x0,8
tick,0x7ffe67f8feb4,706008317,0,0x0,8
tick,0x7ffe67f8feb4,706024164,0,0x0,8
tick,0x7ffe67f8feb4,706040251,0,0x0,8
tick,0x7ffe67f8feb4,706055822,0,0x0,8
tick,0x7ffe67f8feb4,706070994,0,0x0,8
tick,0x7ffe67f8feb4,706087007,0,0x0,8
tick,0x7ffe67f8feb4,706102286,0,0x0,8
tick,0x7ffe67f8feb4,706118049,0,0x0,8
tick,0x7ffe67f8feb4,706133245,0,0x0,8
tick,0x7ffe67f8feb4,706149411,0,0x0,8
tick,0x7ffe67f8feb4,706164735,0,0x0,8
tick,0x7ffe67f8feb4,706180704,0,0x0,8
tick,0x7ffe67f8feb4,706196447,0,0x0,8
tick,0x7ffe67f8feb4,706212447,0,0x0,8
tick,0x7ffe67f8feb4,706228367,0,0x0,8
tick,0x7ffe67f8feb4,706243723,0,0x0,8
tick,0x7ffe67f8feb4,706259498,0,0x0,8
tick,0x7ffe67f8feb4,706275217,0,0x0,8
tick,0x7ffe67f8feb4,706290242,0,0x0,8
tick,0x7ffe67f8feb4,706306102,0,0x0,8
tick,0x7ffe67f8feb4,706322109,0,0x0,8
tick,0x7ffe67f8feb4,706337114,0,0x0,8
tick,0x7ffe67f8feb4,706353140,0,0x0,8
tick,0x7ffe67f8feb4,706368478,0,0x0,8
tick,0x7ffe67f8feb4,706384139,0,0x0,8
tick,0x7ffe67f8feb4,706399294,0,0x0,8
tick,0x7ffe67f8feb4,706414679,0,0x0,8
tick,0x7ffe67f8feb4,706429325,0,0x0,8
tick,0x7ffe67f8feb4,706445613,0,0x0,8
tick,0x7ffe67f8feb4,706460499,0,0x0,8
tick,0x7ffe67f8feb4,706476715,0,0x0,8
tick,0x7ffe67f8feb4,706491579,0,0x0,8
tick,0x7ffe67f8feb4,706507101,0,0x0,8
tick,0x7ffe67f8feb4,706522688,0,0x0,8
tick,0x7ffe67f8feb4,706538734,0,0x0,8
tick,0x7ffe67f8feb4,706554025,0,0x0,8
tick,0x7ffe67f8feb4,706570002,0,0x0,8
tick,0x7ffe67f8feb4,706585961,0,0x0,8
tick,0x7ffe67f8feb4,706601969,0,0x0,8
tick,0x7ffe67f8feb4,706616970,0,0x0,8
tick,0x7ffe67f8feb4,706632957,0,0x0,8
tick,0x7ffe67f8feb4,706648980,0,0x0,8
tick,0x7ffe67f8feb4,706665000,0,0x0,8
tick,0x7ffe67f8feb4,706681224,0,0x0,8
tick,0x7ffe67f8feb4,706697162,0,0x0,8
tick,0x7ffe67f8feb4,706712572,0,0x0,8
tick,0x7ffe67f8feb4,706727929,0,0x0,8
tick,0x7ffe67f8feb4,706743729,0,0x0,8
tick,0x7ffe67f8feb4,706759407,0,0x0,8
tick,0x7ffe67f8feb4,706774956,0,0x0,8
tick,0x7ffe67f8feb4,706790735,0,0x0,8
tick,0x7ffe67f8feb4,706806340,0,0x0,8
tick,0x7ffe67f8feb4,706821996,0,0x0,8
tick,0x7ffe67f8feb4,706837963,0,0x0,8
tick,0x7ffe67f8feb4,706853961,0,0x0,8
tick,0x7ffe67f8feb4,706869948,0,0x0,8
tick,0x7ffe67f8feb4,706885975,0,0x0,8
tick,0x7ffe67f8feb4,706901985,0,0x0,8
tick,0x7ffe67f8feb4,706917966,0,0x0,8
tick,0x7ffe67f8feb4,706933187,0,0x0,8
tick,0x7ffe67f8feb4,706949010,0,0x0,8
tick,0x7ffe67f8feb4,706964223,0,0x0,8
tick,0x7ffe67f8feb4,706979976,0,0x0,8
tick,0x7ffe67f8feb4,706995974,0,0x0,8
tick,0x7ffe67f8feb4,707011987,0,0x0,8
tick,0x7ffe67f8feb4,707027968,0,0x0,8
tick,0x7ffe67f8feb4,707043978,0,0x0,8
tick,0x7ffe67f8feb4,707059243,0,0x0,8
tick,0x7ffe67f8feb4,707075001,0,0x0,8
tick,0x7ffe67f8feb4,707091012,0,0x0,8
tick,0x7ffe67f8feb4,707106985,0,0x0,8
tick,0x7ffe67f8feb4,707122021,0,0x0,8
tick,0x7ffe67f8feb4,707138013,0,0x0,8
tick,0x7ffe67f8feb4,707154031,0,0x0,8
tick,0x7ffe67f8feb4,707170028,0,0x0,8
tick,0x7ffe67f8feb4,707185657,0,0x0,8
tick,0x7ffe67f8feb4,707200990,0,0x0,8
tick,0x7ffe67f8feb4,707217065,0,0x0,8
tick,0x7ffe67f8feb4,707233031,0,0x0,8
tick,0x7ffe67f8feb4,707249105,0,0x0,8
tick,0x7ffe67f8feb4,707265113,0,0x0,8
tick,0x7ffe67f8feb4,707280444,0,0x0,8
tick,0x7ffe67f8feb4,707295963,0,0x0,8
tick,0x7ffe67f8feb4,707311178,0,0x0,8
tick,0x7ffe67f8feb4,707327232,0,0x0,8
tick,0x7ffe67f8feb4,707342778,0,0x0,8
tick,0x7ffe67f8feb4,707358040,0,0x0,8
tick,0x7ffe67f8feb4,707373538,0,0x0,8
tick,0x7ffe67f8feb4,707389452,0,0x0,8
tick,0x7ffe67f8feb4,707405680,0,0x0,8
tick,0x7ffe67f8feb4,707421402,0,0x0,8
tick,0x7ffe67f8feb4,707437816,0,0x0,8
tick,0x7ffe67f8feb4,707452871,0,0x0,8
tick,0x7ffe67f8feb4,707469162,0,0x0,8
tick,0x7ffe67f8feb4,707484851,0,0x0,8
tick,0x7ffe67f8feb4,707500185,0,0x0,8
tick,0x7ffe67f8feb4,707516051,0,0x0,8
tick,0x7ffe67f8feb4,707532344,0,0x0,8
tick,0x7ffe67f8feb4,707547628,0,0x0,8
tick,0x7ffe67f8feb4,707563088,0,0x0,8
tick,0x7ffe67f8feb4,707579011,0,0x0,8
tick,0x7ffe67f8feb4,707595038,0,0x0,8
tick,0x7ffe67f8feb4,707611035,0,0x0,8
tick,0x7ffe67f8feb4,707627044,0,0x0,8
tick,0x7ffe67f8feb4,707642736,0,0x0,8
tick,0x7ffe67f8feb4,707658790,0,0x0,8
tick,0x7ffe67f8feb4,707674653,0,0x0,8
tick,0x7ffe67f8feb4,707690402,0,0x0,8
tick,0x7ffe67f8feb4,707706086,0,0x0,8
tick,0x7ffe67f8feb4,707722087,0,0x0,8
tick,0x7ffe67f8feb4,707738099,0,0x0,8
tick,0x7ffe67f8feb4,707754083,0,0x0,8
tick,0x7ffe67f8feb4,707770104,0,0x0,8
tick,0x7ffe67f8feb4,707785855,0,0x0,8
tick,0x7ffe67f8feb4,707801073,0,0x0,8
tick,0x7ffe67f8feb4,707816416,0,0x0,8
tick,0x7ffe67f8feb4,707832452,0,0x0,8
tick,0x7ffe67f8feb4,707848115,0,0x0,8
tick,0x7ffe67f8feb4,707863622,0,0x0,8
tick,0x7ffe67f8feb4,707879115,0,0x0,8
tick,0x7ffe67f8feb4,707894633,0,0x0,8
tick,0x7ffe67f8feb4,707910148,0,0x0,8
tick,0x7ffe67f8feb4,707925643,0,0x0,8
tick,0x7ffe67f8feb4,707941672,0,0x0,8
tick,0x7ffe67f8feb4,707957556,0,0x0,8
tick,0x7ffe67f8feb4,707973101,0,0x0,8
tick,0x7ffe67f8feb4,707988397,0,0x0,8
tick,0x7ffe67f8feb4,708004132,0,0x0,8
tick,0x7ffe67f8feb4,708019418,0,0x0,8
tick,0x7ffe67f8feb4,708035476,0,0x0,8
tick,0x7ffe67f8feb4,708050579,0,0x0,8
tick,0x7ffe67f8feb4,708066542,0,0x0,8
tick,0x7ffe67f8feb4,708081816,0,0x0,8
tick,0x7ffe67f8feb4,708097213,0,0x0,8
tick,0x7ffe67f8feb4,708112842,0,0x0,8
tick,0x7ffe67f8feb4,708128151,0,0x0,8
tick,0x7ffe67f8feb4,708144143,0,0x0,8
tick,0x7ffe67f8feb4,708159399,0,0x0,8
tick,0x7ffe67f8feb4,708174606,0,0x0,8
tick,0x7ffe67f8feb4,708190402,0,0x0,8
tick,0x7ffe67f8feb4,708206182,0,0x0,8
tick,0x7ffe67f8feb4,708221802,0,0x0,8
tick,0x7ffe67f8feb4,708238470,0,0x0,8
tick,0x7ffe67f8feb4,708253781,0,0x0,8
tick,0x7ffe67f8feb4,708268979,0,0x0,8
tick,0x7ffe67f8feb4,708285047,0,0x0,8
tick,0x7ffe67f8feb4,708300284,0,0x0,8
tick,0x7ffe67f8feb4,708315459,0,0x0,8
tick,0x7ffe67f8feb4,708330426,0,0x0,8
tick,0x7ffe67f8feb4,708346174,0,0x0,8
tick,0x7ffe67f8feb4,708361114,0,0x0,8
tick,0x7ffe67f8feb4,708377103,0,0x0,8
tick,0x7ffe67f8feb4,708392353,0,0x0,8
tick,0x7ffe67f8feb4,708408394,0,0x0,8
tick,0x7ffe67f8feb4,708423535,0,0x0,8
tick,0x7ffe67f8feb4,708439239,0,0x0,8
tick,0x7ffe67f8feb4,708455275,0,0x0,8
tick,0x7ffe67f8feb4,708471282,0,0x0,8
tick,0x7ffe67f8feb4,708486808,0,0x0,8
tick,0x7ffe67f8feb4,708502063,0,0x0,8
tick,0x7ffe67f8feb4,708518133,0,0x0,8
tick,0x7ffe67f8feb4,708533874,0,0x0,8
tick,0x7ffe67f8feb4,708549232,0,0x0,8
tick,0x7ffe67f8feb4,708565063,0,0x0,8
tick,0x7ffe67f8feb4,708580108,0,0x0,8
tick,0x7ffe67f8feb4,708596083,0,0x0,8
tick,0x7ffe67f8feb4,708612080,0,0x0,8
tick,0x7ffe67f8feb4,708628085,0,0x0,8
tick,0x7ffe67f8feb4,708643140,0,0x0,8
tick,0x7ffe67f8feb4,708659229,0,0x0,8
tick,0x7ffe67f8feb4,708674514,0,0x0,8
tick,0x7ffe67f8feb4,708689786,0,0x0,8
tick,0x7ffe67f8feb4,708704850,0,0x0,8
tick,0x7ffe67f8feb4,708720525,0,0x0,8
tick,0x7ffe67f8feb4,708736240,0,0x0,8
tick,0x7ffe67f8feb4,708751856,0,0x0,8
tick,0x7ffe67f8feb4,708767568,0,0x0,8
tick,0x7ffe67f8feb4,708783333,0,0x0,8
tick,0x7ffe67f8feb4,708799369,0,0x0,8
tick,0x7ffe67f8feb4,708815189,0,0x0,8
tick,0x7ffe67f8feb4,708830815,0,0x0,8
tick,0x7ffe67f8feb4,708846715,0,0x0,8
tick,0x7ffe67f8feb4,708862469,0,0x0,8
tick,0x7ffe67f8feb4,708877787,0,0x0,8
tick,0x7ffe67f8feb4,708893302,0,0x0,8
tick,0x7ffe67f8feb4,708908584,0,0x0,8
tick,0x7ffe67f8feb4,708924361,0,0x0,8
tick,0x7ffe67f8feb4,708940231,0,0x0,8
tick,0x7ffe67f8feb4,708956222,0,0x0,8
tick,0x7ffe67f8feb4,708971812,0,0x0,8
tick,0x7ffe67f8feb4,708987748,0,0x0,8
tick,0x7ffe67f8feb4,709003279,0,0x0,8
tick,0x7ffe67f8feb4,709018751,0,0x0,8
tick,0x7ffe67f8feb4,709034752,0,0x0,8
tick,0x7ffe67f8feb4,709050404,0,0x0,8
tick,0x7ffe67f8feb4,709066229,0,0x0,8
tick,0x7ffe67f8feb4,709081609,0,0x0,8
tick,0x7ffe67f8feb4,709096951,0,0x0,8
tick,0x7ffe67f8feb4,709112342,0,0x0,8
tick,0x7ffe67f8feb4,709128193,0,0x0,8
tick,0x7ffe67f8feb4,709143943,0,0x0,8
tick,0x7ffe67f8feb4,709159013,0,0x0,8
tick,0x7ffe67f8feb4,709174468,0,0x0,8
tick,0x7ffe67f8feb4,709190267,0,0x0,8
tick,0x7ffe67f8feb4,709205412,0,0x0,8
tick,0x7ffe67f8feb4,709220872,0,0x0,8
tick,0x7ffe67f8feb4,709236303,0,0x0,8
tick,0x7ffe67f8feb4,709251680,0,0x0,8
tick,0x7ffe67f8feb4,709267019,0,0x0,8
tick,0x7ffe67f8feb4,709283223,0,0x0,8
tick,0x7ffe67f8feb4,709298257,0,0x0,8
tick,0x7ffe67f8feb4,709314512,0,0x0,8
tick,0x7ffe67f8feb4,709329635,0,0x0,8
tick,0x7ffe67f8feb4,709345770,0,0x0,8
tick,0x7ffe67f8feb4,709361335,0,0x0,8
tick,0x7ffe67f8feb4,709377349,0,0x0,8
tick,0x7ffe67f8feb4,709393357,0,0x0,8
tick,0x7ffe67f8feb4,709408358,0,0x0,8
tick,0x7ffe67f8feb4,709424111,0,0x0,8
tick,0x7ffe67f8feb4,709438894,0,0x0,8
tick,0x7ffe67f8feb4,709454757,0,0x0,8
tick,0x7ffe67f8feb4,709469532,0,0x0,8
tick,0x7ffe67f8feb4,709485531,0,0x0,8
tick,0x7ffe67f8feb4,709501556,0,0x0,8
tick,0x7ffe67f8feb4,709517562,0,0x0,8
tick,0x7ffe67f8feb4,709533558,0,0x0,8
tick,0x7ffe67f8feb4,709549550,0,0x0,8
tick,0x7ffe67f8feb4,709565563,0,0x0,8
tick,0x7ffe67f8feb4,709581565,0,0x0,8
tick,0x7ffe67f8feb4,709597551,0,0x0,8
tick,0x7ffe67f8feb4,709613552,0,0x0,8
tick,0x7ffe67f8feb4,709629567,0,0x0,8
tick,0x7ffe67f8feb4,709645284,0,0x0,8
tick,0x7ffe67f8feb4,709660572,0,0x0,8
tick,0x7ffe67f8feb4,709676401,0,0x0,8
tick,0x7ffe67f8feb4,709691951,0,0x0,8
tick,0x7ffe67f8feb4,709707400,0,0x0,8
tick,0x7ffe67f8feb4,709723871,0,0x0,8
tick,0x7ffe67f8feb4,709739461,0,0x0,8
tick,0x7ffe67f8feb4,709755389,0,0x0,8
tick,0x7ffe67f8feb4,709781697,0,0x0,8
tick,0x7ffe67f8feb4,709787365,0,0x0,8
tick,0x7ffe67f8feb4,709803403,0,0x0,8
tick,0x7ffe67f8feb4,709819392,0,0x0,8
tick,0x7ffe67f8feb4,709835286,0,0x0,8
tick,0x7ffe67f8feb4,709851316,0,0x0,8
tick,0x7ffe67f8feb4,709867056,0,0x0,8
tick,0x7ffe67f8feb4,709883047,0,0x0,8
tick,0x7ffe67f8feb4,709898416,0,0x0,8
tick,0x7ffe67f8feb4,709914429,0,0x0,8
tick,0x7ffe67f8feb4,709930423,0,0x0,8
tick,0x7ffe67f8feb4,709946462,0,0x0,8
tick,0x7ffe67f8feb4,709962460,0,0x0,8
tick,0x7ffe67f8feb4,709978473,0,0x0,8
tick,0x7ffe67f8feb4,709994488,0,0x0,8
tick,0x7ffe67f8feb4,710010482,0,0x0,8
tick,0x7ffe67f8feb4,710026582,0,0x0,8
tick,0x7ffe67f8feb4,710042430,0,0x0,8
tick,0x7ffe67f8feb4,710058544,0,0x0,8
tick,0x7ffe67f8feb4,710073592,0,0x0,8
tick,0x7ffe67f8feb4,710089687,0,0x0,8
tick,0x7ffe67f8feb4,710106174,0,0x0,8
tick,0x7ffe67f8feb4,710121440,0,0x0,8
tick,0x7ffe67f8feb4,710137447,0,0x0,8
tick,0x7ffe67f8feb4,710153470,0,0x0,8
tick,0x7ffe67f8feb4,710169456,0,0x0,8
tick,0x7ffe67f8feb4,710185459,0,0x0,8
tick,0x7ffe67f8feb4,710201471,0,0x0,8
tick,0x7ffe67f8feb4,710217591,0,0x0,8
tick,0x7ffe67f8feb4,710233386,0,0x0,8
tick,0x7ffe67f8feb4,710248567,0,0x0,8
tick,0x7ffe67f8feb4,710264110,0,0x0,8
tick,0x7ffe67f8feb4,710279499,0,0x0,8
tick,0x7ffe67f8feb4,710295028,0,0x0,8
tick,0x7ffe67f8feb4,710310269,0,0x0,8
tick,0x7ffe67f8feb4,710325522,0,0x0,8
tick,0x7ffe67f8feb4,710341557,0,0x0,8
tick,0x7ffe67f8feb4,710357524,0,0x0,8
tick,0x7ffe67f8feb4,710373849,0,0x0,8
tick,0x7ffe67f8feb4,710389965,0,0x0,8
tick,0x7ffe67f8feb4,710405762,0,0x0,8
tick,0x7ffe67f8feb4,710421618,0,0x0,8
tick,0x7ffe67f8feb4,710437704,0,0x0,8
tick,0x7ffe67f8feb4,710453685,0,0x0,8
tick,0x7ffe67f8feb4,710469532,0,0x0,8
tick,0x7ffe67f8feb4,710484558,0,0x0,8
tick,0x7ffe67f8feb4,710500537,0,0x0,8
tick,0x7ffe67f8feb4,710516537,0,0x0,8
tick,0x7ffe67f8feb4,710532552,0,0x0,8
tick,0x7ffe67f8feb4,710548562,0,0x0,8
tick,0x7ffe67f8feb4,710564588,0,0x0,8
tick,0x7ffe67f8feb4,710580599,0,0x0,8
tick,0x7ffe67f8feb4,710596582,0,0x0,8
tick,0x7ffe67f8feb4,710612573,0,0x0,8
tick,0x7ffe67f8feb4,710628590,0,0x0,8
tick,0x7ffe67f8feb4,710644600,0,0x0,8
tick,0x7ffe67f8feb4,710660595,0,0x0,8
tick,0x7ffe67f8feb4,710676609,0,0x0,8
tick,0x7ffe67f8feb4,710692616,0,0x0,8
tick,0x7ffe67f8feb4,710708632,0,0x0,8
tick,0x7ffe67f8feb4,710724623,0,0x0,8
tick,0x7ffe67f8feb4,710740712,0,0x0,8
tick,0x7ffe67f8feb4,710756904,0,0x0,8
tick,0x7ffe67f8feb4,710772616,0,0x0,8
tick,0x7ffe67f8feb4,710787644,0,0x0,8
tick,0x7ffe67f8feb4,710803561,0,0x0,8
tick,0x7ffe67f8feb4,710818760,0,0x0,8
tick,0x7ffe67f8feb4,710834671,0,0x0,8
tick,0x7ffe67f8feb4,710850671,0,0x0,8
tick,0x7ffe67f8feb4,710866573,0,0x0,8
tick,0x7ffe67f8feb4,710882604,0,0x0,8
tick,0x7ffe67f8feb4,710898598,0,0x0,8
tick,0x7ffe67f8feb4,710914590,0,0x0,8
tick,0x7ffe67f8feb4,710929613,0,0x0,8
tick,0x7ffe67f8feb4,710945716,0,0x0,8
tick,0x7ffe67f8feb4,710961620,0,0x0,8
tick,0x7ffe67f8feb4,710977650,0,0x0,8
tick,0x7ffe67f8feb4,710993457,0,0x0,8
tick,0x7ffe67f8feb4,711009476,0,0x0,8
tick,0x7ffe67f8feb4,711024823,0,0x0,8
tick,0x7ffe67f8feb4,711040856,0,0x0,8
tick,0x7ffe67f8feb4,711056222,0,0x0,8
tick,0x7ffe67f8feb4,711071604,0,0x0,8
tick,0x7ffe67f8feb4,711087195,0,0x0,8
tick,0x7ffe67f8feb4,711102885,0,0x0,8
tick,0x7ffe67f8feb4,711119068,0,0x0,8
tick,0x7ffe67f8feb4,711134744,0,0x0,8
tick,0x7ffe67f8feb4,711150663,0,0x0,8
tick,0x7ffe67f8feb4,711165915,0,0x0,8
tick,0x7ffe67f8feb4,711181233,0,0x0,8
tick,0x7ffe67f8feb4,711196678,0,0x0,8
tick,0x7ffe67f8feb4,711212698,0,0x0,8
tick,0x7ffe67f8feb4,711227549,0,0x0,8
tick,0x7ffe67f8feb4,711242653,0,0x0,8
tick,0x7ffe67f8feb4,711258668,0,0x0,8
tick,0x7ffe67f8feb4,711274649,0,0x0,8
tick,0x7ffe67f8feb4,711290645,0,0x0,8
tick,0x7ffe67f8feb4,711306627,0,0x0,8
tick,0x7ffe67f8feb4,711322056,0,0x0,8
tick,0x7ffe67f8feb4,711337159,0,0x0,8
tick,0x7ffe67f8feb4,711352697,0,0x0,8
tick,0x7ffe67f8feb4,711368720,0,0x0,8
tick,0x7ffe67f8feb4,711383985,0,0x0,8
tick,0x7ffe67f8feb4,711399166,0,0x0,8
tick,0x7ffe67f8feb4,711415520,0,0x0,8
tick,0x7ffe67f8feb4,711431571,0,0x0,8
tick,0x7ffe67f8feb4,711447310,0,0x0,8
tick,0x7ffe67f8feb4,711462896,0,0x0,8
tick,0x7ffe67f8feb4,711478840,0,0x0,8
tick,0x7ffe67f8feb4,711494358,0,0x0,8
tick,0x7ffe67f8feb4,711510341,0,0x0,8
tick,0x7ffe67f8feb4,711526405,0,0x0,8
tick,0x7ffe67f8feb4,711542430,0,0x0,8
tick,0x7ffe67f8feb4,711557697,0,0x0,8
tick,0x7ffe67f8feb4,711573252,0,0x0,8
tick,0x7ffe67f8feb4,711589032,0,0x0,8
tick,0x7ffe67f8feb4,711604777,0,0x0,8
tick,0x7ffe67f8feb4,711620756,0,0x0,8
tick,0x7ffe67f8feb4,711636781,0,0x0,8
tick,0x7ffe67f8feb4,711652444,0,0x0,8
tick,0x7ffe67f8feb4,711667800,0,0x0,8
tick,0x7ffe67f8feb4,711683850,0,0x0,8
tick,0x7ffe67f8feb4,711699935,0,0x0,8
tick,0x7ffe67f8feb4,711716160,0,0x0,8
tick,0x7ffe67f8feb4,711731631,0,0x0,8
tick,0x7ffe67f8feb4,711746904,0,0x0,8
tick,0x7ffe67f8feb4,711762255,0,0x0,8
tick,0x7ffe67f8feb4,711777980,0,0x0,8
tick,0x7ffe67f8feb4,711794060,0,0x0,8
tick,0x7ffe67f8feb4,711810103,0,0x0,8
tick,0x7ffe67f8feb4,711826037,0,0x0,8
tick,0x7ffe67f8feb4,711842042,0,0x0,8
tick,0x7ffe67f8feb4,711857376,0,0x0,8
tick,0x7ffe67f8feb4,711873038,0,0x0,8
tick,0x7ffe67f8feb4,711888284,0,0x0,8
tick,0x7ffe67f8feb4,711903722,0,0x0,8
tick,0x7ffe67f8feb4,711919999,0,0x0,8
tick,0x7ffe67f8feb4,711935359,0,0x0,8
tick,0x7ffe67f8feb4,711950590,0,0x0,8
tick,0x7ffe67f8feb4,711965852,0,0x0,8
tick,0x7ffe67f8feb4,711981635,0,0x0,8
tick,0x7ffe67f8feb4,711996834,0,0x0,8
tick,0x7ffe67f8feb4,712012506,0,0x0,8
tick,0x7ffe67f8feb4,712027872,0,0x0,8
tick,0x7ffe67f8feb4,712043534,0,0x0,8
tick,0x7ffe67f8feb4,712058721,0,0x0,8
tick,0x7ffe67f8feb4,712074432,0,0x0,8
tick,0x7ffe67f8feb4,712089798,0,0x0,8
tick,0x7ffe67f8feb4,712105008,0,0x0,8
tick,0x7ffe67f8feb4,712120340,0,0x0,8
tick,0x7ffe67f8feb4,712135809,0,0x0,8
tick,0x7ffe67f8feb4,712151141,0,0x0,8
tick,0x7ffe67f8feb4,712166661,0,0x0,8
tick,0x7ffe67f8feb4,712182704,0,0x0,8
tick,0x7ffe67f8feb4,712198745,0,0x0,8
tick,0x7ffe67f8feb4,712214736,0,0x0,8
tick,0x7ffe67f8feb4,712230746,0,0x0,8
tick,0x7ffe67f8feb4,712246446,0,0x0,8
tick,0x7ffe67f8feb4,712261480,0,0x0,8
tick,0x7ffe67f8feb4,712277475,0,0x0,8
tick,0x7ffe67f8feb4,712292802,0,0x0,8
tick,0x7ffe67f8feb4,712308495,0,0x0,8
tick,0x7ffe67f8feb4,712324564,0,0x0,8
tick,0x7ffe67f8feb4,712340727,0,0x0,8
tick,0x7ffe67f8feb4,712355807,0,0x0,8
tick,0x7ffe67f8feb4,712371558,0,0x0,8
tick,0x7ffe67f8feb4,712386833,0,0x0,8
tick,0x7ffe67f8feb4,712402614,0,0x0,8
tick,0x7ffe67f8feb4,712417823,0,0x0,8
tick,0x7ffe67f8feb4,712434023,0,0x0,8
tick,0x7ffe67f8feb4,712449810,0,0x0,8
tick,0x7ffe67f8feb4,712465791,0,0x0,8
tick,0x7ffe67f8feb4,712480811,0,0x0,8
tick,0x7ffe67f8feb4,712496001,0,0x0,8
tick,0x7ffe67f8feb4,712511893,0,0x0,8
tick,0x7ffe67f8feb4,712527294,0,0x0,8
tick,0x7ffe67f8feb4,712543288,0,0x0,8
tick,0x7ffe67f8feb4,712559263,0,0x0,8
tick,0x7ffe67f8feb4,712575470,0,0x0,8
tick,0x7ffe67f8feb4,712590833,0,0x0,8
tick,0x7ffe67f8feb4,712606536,0,0x0,8
tick,0x7ffe67f8feb4,712622558,0,0x0,8
tick,0x7ffe67f8feb4,712639480,0,0x0,8
tick,0x7ffe67f8feb4,712654570,0,0x0,8
tick,0x7ffe67f8feb4,712669771,0,0x0,8
tick,0x7ffe67f8feb4,712685556,0,0x0,8
tick,0x7ffe67f8feb4,712701576,0,0x0,8
tick,0x7ffe67f8feb4,712717575,0,0x0,8
tick,0x7ffe67f8feb4,712733599,0,0x0,8
tick,0x7ffe67f8feb4,712749422,0,0x0,8
tick,0x7ffe67f8feb4,712764559,0,0x0,8
tick,0x7ffe67f8feb4,712780631,0,0x0,8
tick,0x7ffe67f8feb4,712795864,0,0x0,8
tick,0x7ffe67f8feb4,712811296,0,0x0,8
tick,0x7ffe67f8feb4,712826874,0,0x0,8
tick,0x7ffe67f8feb4,712842853,0,0x0,8
tick,0x7ffe67f8feb4,712858869,0,0x0,8
tick,0x7ffe67f8feb4,712874938,0,0x0,8
tick,0x7ffe67f8feb4,712890682,0,0x0,8
tick,0x7ffe67f8feb4,712905896,0,0x0,8
tick,0x7ffe67f8feb4,712921862,0,0x0,8
tick,0x7ffe67f8feb4,712937890,0,0x0,8
tick,0x7ffe67f8feb4,712953932,0,0x0,8
tick,0x7ffe67f8feb4,712969874,0,0x0,8
tick,0x7ffe67f8feb4,712985865,0,0x0,8
tick,0x7ffe67f8feb4,713001872,0,0x0,8
tick,0x7ffe67f8feb4,713017919,0,0x0,8
tick,0x7ffe67f8feb4,713033881,0,0x0,8
tick,0x7ffe67f8feb4,713049893,0,0x0,8
tick,0x7ffe67f8feb4,713065891,0,0x0,8
tick,0x7ffe67f8feb4,713081906,0,0x0,8
tick,0x7ffe67f8feb4,713097903,0,0x0,8
tick,0x7ffe67f8feb4,713113523,0,0x0,8
tick,0x7ffe67f8feb4,713128886,0,0x0,8
tick,0x7ffe67f8feb4,713144974,0,0x0,8
tick,0x7ffe67f8feb4,713160351,0,0x0,8
tick,0x7ffe67f8feb4,713176444,0,0x0,8
tick,0x7ffe67f8feb4,713191673,0,0x0,8
tick,0x7ffe67f8feb4,713207289,0,0x0,8
tick,0x7ffe67f8feb4,713222914,0,0x0,8
tick,0x7ffe67f8feb4,713239138,0,0x0,8
tick,0x7ffe67f8feb4,713254839,0,0x0,8
tick,0x7ffe67f8feb4,713269962,0,0x0,8
tick,0x7ffe67f8feb4,713285979,0,0x0,8
tick,0x7ffe67f8feb4,713301387,0,0x0,8
tick,0x7ffe67f8feb4,713316829,0,0x0,8
tick,0x7ffe67f8feb4,713332816,0,0x0,8
tick,0x7ffe67f8feb4,713348845,0,0x0,8
tick,0x7ffe67f8feb4,713363961,0,0x0,8
tick,0x7ffe67f8feb4,713380037,0,0x0,8
tick,0x7ffe67f8feb4,713395366,0,0x0,8
tick,0x7ffe67f8feb4,713410500,0,0x0,8
tick,0x7ffe67f8feb4,713426171,0,0x0,8
tick,0x7ffe67f8feb4,713442165,0,0x0,8
tick,0x7ffe67f8feb4,713458185,0,0x0,8
tick,0x7ffe67f8feb4,713473316,0,0x0,8
tick,0x7ffe67f8feb4,713488984,0,0x0,8
tick,0x7ffe67f8feb4,713504506,0,0x0,8
tick,0x7ffe67f8feb4,713519969,0,0x0,8
tick,0x7ffe67f8feb4,713535009,0,0x0,8
tick,0x7ffe67f8feb4,713550537,0,0x0,8
tick,0x7ffe67f8feb4,713565802,0,0x0,8
tick,0x7ffe67f8feb4,713581347,0,0x0,8
tick,0x7ffe67f8feb4,713597041,0,0x0,8
tick,0x7ffe67f8feb4,713613021,0,0x0,8
tick,0x7ffe67f8feb4,713629035,0,0x0,8
tick,0x7ffe67f8feb4,713645021,0,0x0,8
tick,0x7ffe67f8feb4,713661224,0,0x0,8
tick,0x7ffe67f8feb4,713676508,0,0x0,8
tick,0x7ffe67f8feb4,713691719,0,0x0,8
tick,0x7ffe67f8feb4,713706567,0,0x0,8
tick,0x7ffe67f8feb4,713722605,0,0x0,8
tick,0x7ffe67f8feb4,713737714,0,0x0,8
tick,0x7ffe67f8feb4,713752999,0,0x0,8
tick,0x7ffe67f8feb4,713768755,0,0x0,8
tick,0x7ffe67f8feb4,713784064,0,0x0,8
tick,0x7ffe67f8feb4,713799770,0,0x0,8
tick,0x7ffe67f8feb4,713814970,0,0x0,8
tick,0x7ffe67f8feb4,713830640,0,0x0,8
tick,0x7ffe67f8feb4,713846272,0,0x0,8
tick,0x7ffe67f8feb4,713861611,0,0x0,8
tick,0x7ffe67f8feb4,713877880,0,0x0,8
tick,0x7ffe67f8feb4,713893651,0,0x0,8
tick,0x7ffe67f8feb4,713909071,0,0x0,8
tick,0x7ffe67f8feb4,713924637,0,0x0,8
tick,0x7ffe67f8feb4,713940651,0,0x0,8
tick,0x7ffe67f8feb4,713955859,0,0x0,8
tick,0x7ffe67f8feb4,713971797,0,0x0,8
tick,0x7ffe67f8feb4,713987814,0,0x0,8
tick,0x7ffe67f8feb4,714003041,0,0x0,8
tick,0x7ffe67f8feb4,714018363,0,0x0,8
tick,0x7ffe67f8feb4,714034352,0,0x0,8
tick,0x7ffe67f8feb4,714050357,0,0x0,8
tick,0x7ffe67f8feb4,714066088,0,0x0,8
tick,0x7ffe67f8feb4,714081444,0,0x0,8
tick,0x7ffe67f8feb4,714096780,0,0x0,8
tick,0x7ffe67f8feb4,714112433,0,0x0,8
tick,0x7ffe67f8feb4,714127960,0,0x0,8
tick,0x7ffe67f8feb4,714143956,0,0x0,8
tick,0x7ffe67f8feb4,714159232,0,0x0,8
tick,0x7ffe67f8feb4,714174818,0,0x0,8
tick,0x7ffe67f8feb4,714190429,0,0x0,8
tick,0x7ffe67f8feb4,714206280,0,0x0,8
tick,0x7ffe67f8feb4,714221497,0,0x0,8
tick,0x7ffe67f8feb4,714236275,0,0x0,8
tick,0x7ffe67f8feb4,714250967,0,0x0,8
tick,0x7ffe67f8feb4,714266787,0,0x0,8
tick,0x7ffe67f8feb4,714282345,0,0x0,8
tick,0x7ffe67f8feb4,714297761,0,0x0,8
tick,0x7ffe67f8feb4,714313704,0,0x0,8
tick,0x7ffe67f8feb4,714329416,0,0x0,8
tick,0x7ffe67f8feb4,714345418,0,0x0,8
tick,0x7ffe67f8feb4,714360461,0,0x0,8
tick,0x7ffe67f8feb4,714376456,0,0x0,8
tick,0x7ffe67f8feb4,714391318,0,0x0,8
tick,0x7ffe67f8feb4,714406958,0,0x0,8
tick,0x7ffe67f8feb4,714422945,0,0x0,8
tick,0x7ffe67f8feb4,714438179,0,0x0,8
tick,0x7ffe67f8feb4,714453135,0,0x0,8
tick,0x7ffe67f8feb4,714469125,0,0x0,8
tick,0x7ffe67f8feb4,714484429,0,0x0,8
tick,0x7ffe67f8feb4,714500112,0,0x0,8
tick,0x7ffe67f8feb4,714515366,0,0x0,8
tick,0x7ffe67f8feb4,714531249,0,0x0,8
tick,0x7ffe67f8feb4,714547350,0,0x0,8
tick,0x7ffe67f8feb4,714562653,0,0x0,8
tick,0x7ffe67f8feb4,714578689,0,0x0,8
tick,0x7ffe67f8feb4,714594077,0,0x0,8
tick,0x7ffe67f8feb4,714609720,0,0x0,8
tick,0x7ffe67f8feb4,714624708,0,0x0,8
tick,0x7ffe67f8feb4,714640688,0,0x0,8
tick,0x7ffe67f8feb4,714656695,0,0x0,8
tick,0x7ffe67f8feb4,714671689,0,0x0,8
tick,0x7ffe67f8feb4,714686704,0,0x0,8
tick,0x7ffe67f8feb4,714702914,0,0x0,8
tick,0x7ffe67f8feb4,714718934,0,0x0,8
tick,0x7ffe67f8feb4,714735341,0,0x0,8
tick,0x7ffe67f8feb4,714750099,0,0x0,8
tick,0x7ffe67f8feb4,714765319,0,0x0,8
tick,0x7ffe67f8feb4,714780731,0,0x0,8
tick,0x7ffe67f8feb4,714796427,0,0x0,8
tick,0x7ffe67f8feb4,714811910,0,0x0,8
tick,0x7ffe67f8feb4,714827495,0,0x0,8
tick,0x7ffe67f8feb4,714843453,0,0x0,8
tick,0x7ffe67f8feb4,714858492,0,0x0,8
tick,0x7ffe67f8feb4,714874490,0,0x0,8
tick,0x7ffe67f8feb4,714889649,0,0x0,8
tick,0x7ffe67f8feb4,714905526,0,0x0,8
tick,0x7ffe67f8feb4,714921184,0,0x0,8
tick,0x7ffe67f8feb4,714936550,0,0x0,8
tick,0x7ffe67f8feb4,714952527,0,0x0,8
tick,0x7ffe67f8feb4,714968536,0,0x0,8
tick,0x7ffe67f8feb4,714983539,0,0x0,8
tick,0x7ffe67f8feb4,714999565,0,0x0,8
tick,0x7ffe67f8feb4,715014730,0,0x0,8
tick,0x7ffe67f8feb4,715030602,0,0x0,8
tick,0x7ffe67f8feb4,715045582,0,0x0,8
tick,0x7ffe67f8feb4,715061648,0,0x0,8
tick,0x7ffe67f8feb4,715077707,0,0x0,8
tick,0x7ffe67f8feb4,715092793,0,0x0,8
tick,0x7ffe67f8feb4,715108792,0,0x0,8
tick,0x7ffe67f8feb4,715124032,0,0x0,8
tick,0x7ffe67f8feb4,715139457,0,0x0,8
tick,0x7ffe67f8feb4,715154982,0,0x0,8
tick,0x7ffe67f8feb4,715170206,0,0x0,8
tick,0x7ffe67f8feb4,715186230,0,0x0,8
tick,0x7ffe67f8feb4,715201212,0,0x0,8
tick,0x7ffe67f8feb4,715217201,0,0x0,8
tick,0x7ffe67f8feb4,715232791,0,0x0,8
tick,0x7ffe67f8feb4,715248244,0,0x0,8
tick,0x7ffe67f8feb4,715264472,0,0x0,8
tick,0x7ffe67f8feb4,715280295,0,0x0,8
tick,0x7ffe67f8feb4,715296268,0,0x0,8
tick,0x7ffe67f8feb4,715312513,0,0x0,8
tick,0x7ffe67f8feb4,715329165,0,0x0,8
tick,0x7ffe67f8feb4,715345123,0,0x0,8
tick,0x7ffe67f8feb4,715359731,0,0x0,8
tick,0x7ffe67f8feb4,715375333,0,0x0,8
tick,0x7ffe67f8feb4,715391234,0,0x0,8
tick,0x7ffe67f8feb4,715407114,0,0x0,8
tick,0x7ffe67f8feb4,715423104,0,0x0,8
tick,0x7ffe67f8feb4,715438252,0,0x0,8
tick,0x7ffe67f8feb4,715454150,0,0x0,8
tick,0x7ffe67f8feb4,715469270,0,0x0,8
tick,0x7ffe67f8feb4,715485058,0,0x0,8
tick,0x7ffe67f8feb4,715500260,0,0x0,8
tick,0x7ffe67f8feb4,715515729,0,0x0,8
tick,0x7ffe67f8feb4,715531243,0,0x0,8
tick,0x7ffe67f8feb4,715547285,0,0x0,8
tick,0x7ffe67f8feb4,715562282,0,0x0,8
tick,0x7ffe67f8feb4,715578313,0,0x0,8
tick,0x7ffe67f8feb4,715594477,0,0x0,8
tick,0x7ffe67f8feb4,715610291,0,0x0,8
tick,0x7ffe67f8feb4,715626276,0,0x0,8
tick,0x7ffe67f8feb4,715642286,0,0x0,8
tick,0x7ffe67f8feb4,715658275,0,0x0,8
tick,0x7ffe67f8feb4,715674289,0,0x0,8
tick,0x7ffe67f8feb4,715690286,0,0x0,8
tick,0x7ffe67f8feb4,715706281,0,0x0,8
tick,0x7ffe67f8feb4,715722295,0,0x0,8
tick,0x7ffe67f8feb4,715738319,0,0x0,8
tick,0x7ffe67f8feb4,715754293,0,0x0,8
tick,0x7ffe67f8feb4,715770300,0,0x0,8
tick,0x7ffe67f8feb4,715786310,0,0x0,8
tick,0x7ffe67f8feb4,715802318,0,0x0,8
tick,0x7ffe67f8feb4,715818350,0,0x0,8
tick,0x7ffe67f8feb4,715834311,0,0x0,8
tick,0x7ffe67f8feb4,715850342,0,0x0,8
tick,0x7ffe67f8feb4,715866341,0,0x0,8
tick,0x7ffe67f8feb4,715882325,0,0x0,8
tick,0x7ffe67f8feb4,715897493,0,0x0,8
tick,0x7ffe67f8feb4,715913484,0,0x0,8
tick,0x7ffe67f8feb4,715928789,0,0x0,8
tick,0x7ffe67f8feb4,715944323,0,0x0,8
tick,0x7ffe67f8feb4,715959528,0,0x0,8
tick,0x7ffe67f8feb4,715974827,0,0x0,8
tick,0x7ffe67f8feb4,715990387,0,0x0,8
tick,0x7ffe67f8feb4,716006167,0,0x0,8
tick,0x7ffe67f8feb4,716021353,0,0x0,8
tick,0x7ffe67f8feb4,716037258,0,0x0,8
tick,0x7ffe67f8feb4,716053304,0,0x0,8
tick,0x7ffe67f8feb4,716068656,0,0x0,8
tick,0x7ffe67f8feb4,716084539,0,0x0,8
tick,0x7ffe67f8feb4,716100182,0,0x0,8
tick,0x7ffe67f8feb4,716115514,0,0x0,8
tick,0x7ffe67f8feb4,716130490,0,0x0,8
tick,0x7ffe67f8feb4,716145784,0,0x0,8
tick,0x7ffe67f8feb4,716161320,0,0x0,8
tick,0x7ffe67f8feb4,716176309,0,0x0,8
tick,0x7ffe67f8feb4,716191813,0,0x0,8
tick,0x7ffe67f8feb4,716206919,0,0x0,8
tick,0x7ffe67f8feb4,716222492,0,0x0,8
tick,0x7ffe67f8feb4,716238442,0,0x0,8
tick,0x7ffe67f8feb4,716254594,0,0x0,8
tick,0x7ffe67f8feb4,716270509,0,0x0,8
tick,0x7ffe67f8feb4,716286000,0,0x0,8
tick,0x7ffe67f8feb4,716301356,0,0x0,8
tick,0x7ffe67f8feb4,716316391,0,0x0,8
tick,0x7ffe67f8feb4,716332393,0,0x0,8
tick,0x7ffe67f8feb4,716348492,0,0x0,8
tick,0x7ffe67f8feb4,716364460,0,0x0,8
tick,0x7ffe67f8feb4,716380400,0,0x0,8
tick,0x7ffe67f8feb4,716395407,0,0x0,8
tick,0x7ffe67f8feb4,716410719,0,0x0,8
tick,0x7ffe67f8feb4,716426406,0,0x0,8
tick,0x7ffe67f8feb4,716441413,0,0x0,8
tick,0x7ffe67f8feb4,716457467,0,0x0,8
tick,0x7ffe67f8feb4,716473471,0,0x0,8
tick,0x7ffe67f8feb4,716489429,0,0x0,8
tick,0x7ffe67f8feb4,716505434,0,0x0,8
tick,0x7ffe67f8feb4,716521406,0,0x0,8
tick,0x7ffe67f8feb4,716537438,0,0x0,8
tick,0x7ffe67f8feb4,716552405,0,0x0,8
tick,0x7ffe67f8feb4,716568447,0,0x0,8
tick,0x7ffe67f8feb4,716584000,0,0x0,8
tick,0x7ffe67f8feb4,716600002,0,0x0,8
tick,0x7ffe67f8feb4,716615102,0,0x0,8
tick,0x7ffe67f8feb4,716631060,0,0x0,8
tick,0x7ffe67f8feb4,716647165,0,0x0,8
tick,0x7ffe67f8feb4,716663096,0,0x0,8
tick,0x7ffe67f8feb4,716679101,0,0x0,8
tick,0x7ffe67f8feb4,716694863,0,0x0,8
tick,0x7ffe67f8feb4,716710116,0,0x0,8
tick,0x7ffe67f8feb4,716725452,0,0x0,8
tick,0x7ffe67f8feb4,716741143,0,0x0,8
tick,0x7ffe67f8feb4,716757094,0,0x0,8
tick,0x7ffe67f8feb4,716771607,0,0x0,8
tick,0x7ffe67f8feb4,716786960,0,0x0,8
tick,0x7ffe67f8feb4,716802158,0,0x0,8
tick,0x7ffe67f8feb4,716817697,0,0x0,8
tick,0x7ffe67f8feb4,716833031,0,0x0,8
tick,0x7ffe67f8feb4,716848381,0,0x0,8
tick,0x7ffe67f8feb4,716864395,0,0x0,8
tick,0x7ffe67f8feb4,716880393,0,0x0,8
tick,0x7ffe67f8feb4,716896328,0,0x0,8
tick,0x7ffe67f8feb4,716912029,0,0x0,8
tick,0x7ffe67f8feb4,716927655,0,0x0,8
tick,0x7ffe67f8feb4,716942981,0,0x0,8
tick,0x7ffe67f8feb4,716957851,0,0x0,8
tick,0x7ffe67f8feb4,716973239,0,0x0,8
tick,0x7ffe67f8feb4,716988779,0,0x0,8
tick,0x7ffe67f8feb4,717005040,0,0x0,8
tick,0x7ffe67f8feb4,717020187,0,0x0,8
tick,0x7ffe67f8feb4,717036229,0,0x0,8
tick,0x7ffe67f8feb4,717051538,0,0x0,8
tick,0x7ffe67f8feb4,717066869,0,0x0,8
tick,0x7ffe67f8feb4,717082253,0,0x0,8
tick,0x7ffe67f8feb4,717097662,0,0x0,8
tick,0x7ffe67f8feb4,717113620,0,0x0,8
tick,0x7ffe67f8feb4,717129117,0,0x0,8
tick,0x7ffe67f8feb4,717144517,0,0x0,8
tick,0x7ffe67f8feb4,717160060,0,0x0,8
tick,0x7ffe67f8feb4,717176170,0,0x0,8
tick,0x7ffe67f8feb4,717191821,0,0x0,8
tick,0x7ffe67f8feb4,717207394,0,0x0,8
tick,0x7ffe67f8feb4,717222961,0,0x0,8
tick,0x7ffe67f8feb4,717238669,0,0x0,8
tick,0x7ffe67f8feb4,717253792,0,0x0,8
tick,0x7ffe67f8feb4,717269038,0,0x0,8
tick,0x7ffe67f8feb4,717284539,0,0x0,8
tick,0x7ffe67f8feb4,717300510,0,0x0,8
tick,0x7ffe67f8feb4,717315429,0,0x0,8
tick,0x7ffe67f8feb4,717331492,0,0x0,8
tick,0x7ffe67f8feb4,717347914,0,0x0,8
tick,0x7ffe67f8feb4,717363867,0,0x0,8
tick,0x7ffe67f8feb4,717379072,0,0x0,8
tick,0x7ffe67f8feb4,717393890,0,0x0,8
tick,0x7ffe67f8feb4,717409105,0,0x0,8
tick,0x7ffe67f8feb4,717425076,0,0x0,8
tick,0x7ffe67f8feb4,717440265,0,0x0,8
tick,0x7ffe67f8feb4,717456275,0,0x0,8
tick,0x7ffe67f8feb4,717471894,0,0x0,8
tick,0x7ffe67f8feb4,717486872,0,0x0,8
tick,0x7ffe67f8feb4,717502384,0,0x0,8
tick,0x7ffe67f8feb4,717517654,0,0x0,8
tick,0x7ffe67f8feb4,717533469,0,0x0,8
tick,0x7ffe67f8feb4,717549074,0,0x0,8
tick,0x7ffe67f8feb4,717565286,0,0x0,8
tick,0x7ffe67f8feb4,717580408,0,0x0,8
tick,0x7ffe67f8feb4,717596414,0,0x0,8
tick,0x7ffe67f8feb4,717612041,0,0x0,8
tick,0x7ffe67f8feb4,717627551,0,0x0,8
tick,0x7ffe67f8feb4,717643549,0,0x0,8
tick,0x7ffe67f8feb4,717659853,0,0x0,8
tick,0x7ffe67f8feb4,717674540,0,0x0,8
tick,0x7ffe67f8feb4,717692820,0,0x0,8
tick,0x7ffe67f8feb4,717706611,0,0x0,8
tick,0x7ffe67f8feb4,717722539,0,0x0,8
tick,0x7ffe67f8feb4,717737563,0,0x0,8
tick,0x7ffe67f8feb4,717753529,0,0x0,8
tick,0x7ffe67f8feb4,717769549,0,0x0,8
tick,0x7ffe67f8feb4,717785564,0,0x0,8
tick,0x7ffe67f8feb4,717801553,0,0x0,8
tick,0x7ffe67f8feb4,717817599,0,0x0,8
tick,0x7ffe67f8feb4,717833571,0,0x0,8
tick,0x7ffe67f8feb4,717849516,0,0x0,8
tick,0x7ffe67f8feb4,717864493,0,0x0,8
tick,0x7ffe67f8feb4,717880421,0,0x0,8
tick,0x7ffe67f8feb4,717895564,0,0x0,8
tick,0x7ffe67f8feb4,717911496,0,0x0,8
tick,0x7ffe67f8feb4,717927494,0,0x0,8
tick,0x7ffe67f8feb4,717942652,0,0x0,8
tick,0x7ffe67f8feb4,717958662,0,0x0,8
tick,0x7ffe67f8feb4,717974645,0,0x0,8
tick,0x7ffe67f8feb4,717989732,0,0x0,8
tick,0x7ffe67f8feb4,718005152,0,0x0,8
tick,0x7ffe67f8feb4,718021146,0,0x0,8
tick,0x7ffe67f8feb4,718036656,0,0x0,8
tick,0x7ffe67f8feb4,718052662,0,0x0,8
tick,0x7ffe67f8feb4,718068656,0,0x0,8
tick,0x7ffe67f8feb4,718084513,0,0x0,8
tick,0x7ffe67f8feb4,718099703,0,0x0,8
tick,0x7ffe67f8feb4,718115720,0,0x0,8
tick,0x7ffe67f8feb4,718131675,0,0x0,8
tick,0x7ffe67f8feb4,718147677,0,0x0,8
tick,0x7ffe67f8feb4,718163692,0,0x0,8
tick,0x7ffe67f8feb4,718179970,0,0x0,8
tick,0x7ffe67f8feb4,718194712,0,0x0,8
tick,0x7ffe67f8feb4,718210659,0,0x0,8
tick,0x7ffe67f8feb4,718226690,0,0x0,8
tick,0x7ffe67f8feb4,718242690,0,0x0,8
tick,0x7ffe67f8feb4,718258678,0,0x0,8
tick,0x7ffe67f8feb4,718274704,0,0x0,8
tick,0x7ffe67f8feb4,718290690,0,0x0,8
tick,0x7ffe67f8feb4,718306687,0,0x0,8
tick,0x7ffe67f8feb4,718322704,0,0x0,8
tick,0x7ffe67f8feb4,718338717,0,0x0,8
tick,0x7ffe67f8feb4,718354701,0,0x0,8
tick,0x7ffe67f8feb4,718370717,0,0x0,8
tick,0x7ffe67f8feb4,718385885,0,0x0,8
tick,0x7ffe67f8feb4,718401719,0,0x0,8
tick,0x7ffe67f8feb4,718417026,0,0x0,8
tick,0x7ffe67f8feb4,718432945,0,0x0,8
tick,0x7ffe67f8feb4,718448955,0,0x0,8
tick,0x7ffe67f8feb4,718464622,0,0x0,8
tick,0x7ffe67f8feb4,718480322,0,0x0,8
tick,0x7ffe67f8feb4,718495986,0,0x0,8
tick,0x7ffe67f8feb4,718511830,0,0x0,8
tick,0x7ffe67f8feb4,718527116,0,0x0,8
tick,0x7ffe67f8feb4,718542982,0,0x0,8
tick,0x7ffe67f8feb4,718559031,0,0x0,8
tick,0x7ffe67f8feb4,718574181,0,0x0,8
tick,0x7ffe67f8feb4,718589825,0,0x0,8
tick,0x7ffe67f8feb4,718605686,0,0x0,8
tick,0x7ffe67f8feb4,718621147,0,0x0,8
tick,0x7ffe67f8feb4,718636744,0,0x0,8
tick,0x7ffe67f8feb4,718652739,0,0x0,8
tick,0x7ffe67f8feb4,718667744,0,0x0,8
tick,0x7ffe67f8feb4,718683761,0,0x0,8
tick,0x7ffe67f8feb4,718699799,0,0x0,8
tick,0x7ffe67f8feb4,718715754,0,0x0,8
tick,0x7ffe67f8feb4,718731749,0,0x0,8
tick,0x7ffe67f8feb4,718747967,0,0x0,8
tick,0x7ffe67f8feb4,718763719,0,0x0,8
tick,0x7ffe67f8feb4,718778757,0,0x0,8
tick,0x7ffe67f8feb4,718794765,0,0x0,8
tick,0x7ffe67f8feb4,718810759,0,0x0,8
tick,0x7ffe67f8feb4,718826766,0,0x0,8
tick,0x7ffe67f8feb4,718842762,0,0x0,8
tick,0x7ffe67f8feb4,718858774,0,0x0,8
tick,0x7ffe67f8feb4,718874769,0,0x0,8
tick,0x7ffe67f8feb4,718889914,0,0x0,8
tick,0x7ffe67f8feb4,718905774,0,0x0,8
tick,0x7ffe67f8feb4,718921570,0,0x0,8
tick,0x7ffe67f8feb4,718936970,0,0x0,8
tick,0x7ffe67f8feb4,718952791,0,0x0,8
tick,0x7ffe67f8feb4,718968789,0,0x0,8
tick,0x7ffe67f8feb4,718984905,0,0x0,8
tick,0x7ffe67f8feb4,719000824,0,0x0,8
tick,0x7ffe67f8feb4,719016832,0,0x0,8
tick,0x7ffe67f8feb4,719033213,0,0x0,8
tick,0x7ffe67f8feb4,719048836,0,0x0,8
tick,0x7ffe67f8feb4,719064878,0,0x0,8
tick,0x7ffe67f8feb4,719079914,0,0x0,8
tick,0x7ffe67f8feb4,719095815,0,0x0,8
tick,0x7ffe67f8feb4,719111823,0,0x0,8
tick,0x7ffe67f8feb4,719127827,0,0x0,8
tick,0x7ffe67f8feb4,719143827,0,0x0,8
tick,0x7ffe67f8feb4,719158962,0,0x0,8
tick,0x7ffe67f8feb4,719174830,0,0x0,8
tick,0x7ffe67f8feb4,719190846,0,0x0,8
tick,0x7ffe67f8feb4,719206863,0,0x0,8
tick,0x7ffe67f8feb4,719222160,0,0x0,8
tick,0x7ffe67f8feb4,719237844,0,0x0,8
tick,0x7ffe67f8feb4,719253787,0,0x0,8
tick,0x7ffe67f8feb4,719269861,0,0x0,8
tick,0x7ffe67f8feb4,719285866,0,0x0,8
tick,0x7ffe67f8feb4,719301887,0,0x0,8
tick,0x7ffe67f8feb4,719318093,0,0x0,8
tick,0x7ffe67f8feb4,719333888,0,0x0,8
tick,0x7ffe67f8feb4,719349850,0,0x0,8
tick,0x7ffe67f8feb4,719365872,0,0x0,8
tick,0x7ffe67f8feb4,719381910,0,0x0,8
tick,0x7ffe67f8feb4,719398152,0,0x0,8
tick,0x7ffe67f8feb4,719413884,0,0x0,8
tick,0x7ffe67f8feb4,719429002,0,0x0,8
tick,0x7ffe67f8feb4,719445017,0,0x0,8
tick,0x7ffe67f8feb4,719461010,0,0x0,8
tick,0x7ffe67f8feb4,719477025,0,0x0,8
tick,0x7ffe67f8feb4,719493033,0,0x0,8
tick,0x7ffe67f8feb4,719509028,0,0x0,8
tick,0x7ffe67f8feb4,719525055,0,0x0,8
tick,0x7ffe67f8feb4,719541072,0,0x0,8
tick,0x7ffe67f8feb4,719556439,0,0x0,8
tick,0x7ffe67f8feb4,719572447,0,0x0,8
tick,0x7ffe67f8feb4,719588449,0,0x0,8
tick,0x7ffe67f8feb4,719604474,0,0x0,8
tick,0x7ffe67f8feb4,719620466,0,0x0,8
tick,0x7ffe67f8feb4,719636414,0,0x0,8
tick,0x7ffe67f8feb4,719652371,0,0x0,8
tick,0x7ffe67f8feb4,719668389,0,0x0,8
tick,0x7ffe67f8feb4,719684348,0,0x0,8
tick,0x7ffe67f8feb4,719700438,0,0x0,8
tick,0x7ffe67f8feb4,719716340,0,0x0,8
tick,0x7ffe67f8feb4,719732357,0,0x0,8
tick,0x7ffe67f8feb4,719748509,0,0x0,8
tick,0x7ffe67f8feb4,719763681,0,0x0,8
tick,0x7ffe67f8feb4,719778861,0,0x0,8
tick,0x7ffe67f8feb4,719794217,0,0x0,8
tick,0x7ffe67f8feb4,719809527,0,0x0,8
tick,0x7ffe67f8feb4,719824788,0,0x0,8
tick,0x7ffe67f8feb4,719840310,0,0x0,8
tick,0x7ffe67f8feb4,719856114,0,0x0,8
tick,0x7ffe67f8feb4,719871780,0,0x0,8
tick,0x7ffe67f8feb4,719887430,0,0x0,8
tick,0x7ffe67f8feb4,719902840,0,0x0,8
tick,0x7ffe67f8feb4,719917984,0,0x0,8
tick,0x7ffe67f8feb4,719933334,0,0x0,8
tick,0x7ffe67f8feb4,719949358,0,0x0,8
tick,0x7ffe67f8feb4,719965336,0,0x0,8
tick,0x7ffe67f8feb4,719980233,0,0x0,8
tick,0x7ffe67f8feb4,719995972,0,0x0,8
tick,0x7ffe67f8feb4,720012022,0,0x0,8
tick,0x7ffe67f8feb4,720027990,0,0x0,8
tick,0x7ffe67f8feb4,720043983,0,0x0,8
tick,0x7ffe67f8feb4,720058968,0,0x0,8
tick,0x7ffe67f8feb4,720074952,0,0x0,8
tick,0x7ffe67f8feb4,720090952,0,0x0,8
tick,0x7ffe67f8feb4,720106960,0,0x0,8
tick,0x7ffe67f8feb4,720123006,0,0x0,8
tick,0x7ffe67f8feb4,720139009,0,0x0,8
tick,0x7ffe67f8feb4,720155010,0,0x0,8
tick,0x7ffe67f8feb4,720171005,0,0x0,8
tick,0x7ffe67f8feb4,720187014,0,0x0,8
tick,0x7ffe67f8feb4,720203029,0,0x0,8
tick,0x7ffe67f8feb4,720219098,0,0x0,8
tick,0x7ffe67f8feb4,720235026,0,0x0,8
tick,0x7ffe67f8feb4,720251047,0,0x0,8
tick,0x7ffe67f8feb4,720267142,0,0x0,8
tick,0x7ffe67f8feb4,720283054,0,0x0,8
tick,0x7ffe67f8feb4,720298168,0,0x0,8
tick,0x7ffe67f8feb4,720314269,0,0x0,8
tick,0x7ffe67f8feb4,720329393,0,0x0,8
tick,0x7ffe67f8feb4,720345505,0,0x0,8
tick,0x7ffe67f8feb4,720361038,0,0x0,8
tick,0x7ffe67f8feb4,720377231,0,0x0,8
tick,0x7ffe67f8feb4,720392725,0,0x0,8
tick,0x7ffe67f8feb4,720407844,0,0x0,8
tick,0x7ffe67f8feb4,720423326,0,0x0,8
tick,0x7ffe67f8feb4,720438896,0,0x0,8
tick,0x7ffe67f8feb4,720454448,0,0x0,8
tick,0x7ffe67f8feb4,720470383,0,0x0,8
tick,0x7ffe67f8feb4,720486045,0,0x0,8
tick,0x7ffe67f8feb4,720501711,0,0x0,8
tick,0x7ffe67f8feb4,720517081,0,0x0,8
tick,0x7ffe67f8feb4,720533105,0,0x0,8
tick,0x7ffe67f8feb4,720548234,0,0x0,8
tick,0x7ffe67f8feb4,720563735,0,0x0,8
tick,0x7ffe67f8feb4,720579381,0,0x0,8
tick,0x7ffe67f8feb4,720595452,0,0x0,8
tick,0x7ffe67f8feb4,720611765,0,0x0,8
tick,0x7ffe67f8feb4,720627250,0,0x0,8
tick,0x7ffe67f8feb4,720642733,0,0x0,8
tick,0x7ffe67f8feb4,720658247,0,0x0,8
tick,0x7ffe67f8feb4,720674219,0,0x0,8
tick,0x7ffe67f8feb4,720689217,0,0x0,8
tick,0x7ffe67f8feb4,720705399,0,0x0,8
tick,0x7ffe67f8feb4,720721202,0,0x0,8
tick,0x7ffe67f8feb4,720737237,0,0x0,8
tick,0x7ffe67f8feb4,720753300,0,0x0,8
tick,0x7ffe67f8feb4,720769227,0,0x0,8
tick,0x7ffe67f8feb4,720784278,0,0x0,8
tick,0x7ffe67f8feb4,720800278,0,0x0,8
tick,0x7ffe67f8feb4,720815475,0,0x0,8
tick,0x7ffe67f8feb4,720830980,0,0x0,8
tick,0x7ffe67f8feb4,720846358,0,0x0,8
tick,0x7ffe67f8feb4,720862040,0,0x0,8
tick,0x7ffe67f8feb4,720877051,0,0x0,8
tick,0x7ffe67f8feb4,720892572,0,0x0,8
tick,0x7ffe67f8feb4,720908877,0,0x0,8
tick,0x7ffe67f8feb4,720924673,0,0x0,8
tick,0x7ffe67f8feb4,720940590,0,0x0,8
tick,0x7ffe67f8feb4,720956081,0,0x0,8
tick,0x7ffe67f8feb4,720971755,0,0x0,8
tick,0x7ffe67f8feb4,720987585,0,0x0,8
tick,0x7ffe67f8feb4,721002898,0,0x0,8
tick,0x7ffe67f8feb4,721018762,0,0x0,8
tick,0x7ffe67f8feb4,721033898,0,0x0,8
tick,0x7ffe67f8feb4,721049749,0,0x0,8
tick,0x7ffe67f8feb4,721065735,0,0x0,8
tick,0x7ffe67f8feb4,721081198,0,0x0,8
tick,0x7ffe67f8feb4,721097103,0,0x0,8
tick,0x7ffe67f8feb4,721112408,0,0x0,8
tick,0x7ffe67f8feb4,721127768,0,0x0,8
tick,0x7ffe67f8feb4,721143377,0,0x0,8
tick,0x7ffe67f8feb4,721158704,0,0x0,8
tick,0x7ffe67f8feb4,721173458,0,0x0,8
tick,0x7ffe67f8feb4,721189305,0,0x0,8
tick,0x7ffe67f8feb4,721205135,0,0x0,8
tick,0x7ffe67f8feb4,721220833,0,0x0,8
tick,0x7ffe67f8feb4,721236741,0,0x0,8
tick,0x7ffe67f8feb4,721252119,0,0x0,8
tick,0x7ffe67f8feb4,721267720,0,0x0,8
tick,0x7ffe67f8feb4,721283286,0,0x0,8
tick,0x7ffe67f8feb4,721299015,0,0x0,8
tick,0x7ffe67f8feb4,721314508,0,0x0,8
tick,0x7ffe67f8feb4,721329575,0,0x0,8
tick,0x7ffe67f8feb4,721344945,0,0x0,8
tick,0x7ffe67f8feb4,721359746,0,0x0,8
tick,0x7ffe67f8feb4,721376167,0,0x0,8
tick,0x7ffe67f8feb4,721391718,0,0x0,8
tick,0x7ffe67f8feb4,721407800,0,0x0,8
tick,0x7ffe67f8feb4,721423782,0,0x0,8
tick,0x7ffe67f8feb4,721439219,0,0x0,8
tick,0x7ffe67f8feb4,721454595,0,0x0,8
tick,0x7ffe67f8feb4,721470100,0,0x0,8
tick,0x7ffe67f8feb4,721486085,0,0x0,8
tick,0x7ffe67f8feb4,721502356,0,0x0,8
tick,0x7ffe67f8feb4,721518008,0,0x0,8
tick,0x7ffe67f8feb4,721534084,0,0x0,8
tick,0x7ffe67f8feb4,721550041,0,0x0,8
tick,0x7ffe67f8feb4,721566081,0,0x0,8
tick,0x7ffe67f8feb4,721582102,0,0x0,8
tick,0x7ffe67f8feb4,721597599,0,0x0,8
tick,0x7ffe67f8feb4,721613585,0,0x0,8
tick,0x7ffe67f8feb4,721629631,0,0x0,8
tick,0x7ffe67f8feb4,721645407,0,0x0,8
tick,0x7ffe67f8feb4,721660534,0,0x0,8
tick,0x7ffe67f8feb4,721676573,0,0x0,8
tick,0x7ffe67f8feb4,721692535,0,0x0,8
tick,0x7ffe67f8feb4,721708507,0,0x0,8
tick,0x7ffe67f8feb4,721724518,0,0x0,8
tick,0x7ffe67f8feb4,721740549,0,0x0,8
tick,0x7ffe67f8feb4,721756172,0,0x0,8
tick,0x7ffe67f8feb4,721772196,0,0x0,8
tick,0x7ffe67f8feb4,721788201,0,0x0,8
tick,0x7ffe67f8feb4,721804225,0,0x0,8
tick,0x7ffe67f8feb4,721819917,0,0x0,8
tick,0x7ffe67f8feb4,721835630,0,0x0,8
tick,0x7ffe67f8feb4,721851668,0,0x0,8
tick,0x7ffe67f8feb4,721867608,0,0x0,8
tick,0x7ffe67f8feb4,721883469,0,0x0,8
tick,0x7ffe67f8feb4,721899380,0,0x0,8
tick,0x7ffe67f8feb4,721914789,0,0x0,8
tick,0x7ffe67f8feb4,721930677,0,0x0,8
tick,0x7ffe67f8feb4,721946258,0,0x0,8
tick,0x7ffe67f8feb4,721962263,0,0x0,8
tick,0x7ffe67f8feb4,721977545,0,0x0,8
tick,0x7ffe67f8feb4,721992938,0,0x0,8
tick,0x7ffe67f8feb4,722008738,0,0x0,8
tick,0x7ffe67f8feb4,722023729,0,0x0,8
tick,0x7ffe67f8feb4,722038572,0,0x0,8
tick,0x7ffe67f8feb4,722054276,0,0x0,8
tick,0x7ffe67f8feb4,722069439,0,0x0,8
tick,0x7ffe67f8feb4,722084276,0,0x0,8
tick,0x7ffe67f8feb4,722099977,0,0x0,8
tick,0x7ffe67f8feb4,722115576,0,0x0,8
tick,0x7ffe67f8feb4,722131412,0,0x0,8
tick,0x7ffe67f8feb4,722147661,0,0x0,8
tick,0x7ffe67f8feb4,722162885,0,0x0,8
tick,0x7ffe67f8feb4,722178281,0,0x0,8
tick,0x7ffe67f8feb4,722194732,0,0x0,8
tick,0x7ffe67f8feb4,722209926,0,0x0,8
tick,0x7ffe67f8feb4,722226079,0,0x0,8
tick,0x7ffe67f8feb4,722241719,0,0x0,8
tick,0x7ffe67f8feb4,722257603,0,0x0,8
tick,0x7ffe67f8feb4,722273181,0,0x0,8
tick,0x7ffe67f8feb4,722288520,0,0x0,8
tick,0x7ffe67f8feb4,722304156,0,0x0,8
tick,0x7ffe67f8feb4,722320357,0,0x0,8
tick,0x7ffe67f8feb4,722336242,0,0x0,8
tick,0x7ffe67f8feb4,722352179,0,0x0,8
tick,0x7ffe67f8feb4,722367698,0,0x0,8
tick,0x7ffe67f8feb4,722383207,0,0x0,8
tick,0x7ffe67f8feb4,722398818,0,0x0,8
tick,0x7ffe67f8feb4,722414798,0,0x0,8
tick,0x7ffe67f8feb4,722430780,0,0x0,8
tick,0x7ffe67f8feb4,722446840,0,0x0,8
tick,0x7ffe67f8feb4,722463061,0,0x0,8
tick,0x7ffe67f8feb4,722478424,0,0x0,8
tick,0x7ffe67f8feb4,722493567,0,0x0,8
tick,0x7ffe67f8feb4,722509590,0,0x0,8
tick,0x7ffe67f8feb4,722525851,0,0x0,8
tick,0x7ffe67f8feb4,722541730,0,0x0,8
tick,0x7ffe67f8feb4,722557303,0,0x0,8
tick,0x7ffe67f8feb4,722572416,0,0x0,8
tick,0x7ffe67f8feb4,722588072,0,0x0,8
tick,0x7ffe67f8feb4,722604027,0,0x0,8
tick,0x7ffe67f8feb4,722620059,0,0x0,8
tick,0x7ffe67f8feb4,722636064,0,0x0,8
tick,0x7ffe67f8feb4,722652223,0,0x0,8
tick,0x7ffe67f8feb4,722668085,0,0x0,8
tick,0x7ffe67f8feb4,722684078,0,0x0,8
tick,0x7ffe67f8feb4,722700061,0,0x0,8
tick,0x7ffe67f8feb4,722716192,0,0x0,8
tick,0x7ffe67f8feb4,722732047,0,0x0,8
tick,0x7ffe67f8feb4,722747371,0,0x0,8
tick,0x7ffe67f8feb4,722763361,0,0x0,8
tick,0x7ffe67f8feb4,722779368,0,0x0,8
tick,0x7ffe67f8feb4,722795366,0,0x0,8
tick,0x7ffe67f8feb4,722811360,0,0x0,8
tick,0x7ffe67f8feb4,722827376,0,0x0,8
tick,0x7ffe67f8feb4,722843394,0,0x0,8
tick,0x7ffe67f8feb4,722859400,0,0x0,8
tick,0x7ffe67f8feb4,722875376,0,0x0,8
tick,0x7ffe67f8feb4,722891392,0,0x0,8
tick,0x7ffe67f8feb4,722907465,0,0x0,8
tick,0x7ffe67f8feb4,722922634,0,0x0,8
tick,0x7ffe67f8feb4,722938370,0,0x0,8
tick,0x7ffe67f8feb4,722954523,0,0x0,8
tick,0x7ffe67f8feb4,722970411,0,0x0,8
tick,0x7ffe67f8feb4,722986418,0,0x0,8
tick,0x7ffe67f8feb4,723002471,0,0x0,8
tick,0x7ffe67f8feb4,723018437,0,0x0,8
tick,0x7ffe67f8feb4,723034437,0,0x0,8
tick,0x7ffe67f8feb4,723050439,0,0x0,8
tick,0x7ffe67f8feb4,723065572,0,0x0,8
tick,0x7ffe67f8feb4,723081565,0,0x0,8
tick,0x7ffe67f8feb4,723097719,0,0x0,8
tick,0x7ffe67f8feb4,723113588,0,0x0,8
tick,0x7ffe67f8feb4,723128622,0,0x0,8
tick,0x7ffe67f8feb4,723144431,0,0x0,8
tick,0x7ffe67f8feb4,723159608,0,0x0,8
tick,0x7ffe67f8feb4,723175888,0,0x0,8
tick,0x7ffe67f8feb4,723191576,0,0x0,8
tick,0x7ffe67f8feb4,723207987,0,0x0,8
tick,0x7ffe67f8feb4,723223554,0,0x0,8
tick,0x7ffe67f8feb4,723238474,0,0x0,8
tick,0x7ffe67f8feb4,723254507,0,0x0,8
tick,0x7ffe67f8feb4,723269708,0,0x0,8
tick,0x7ffe67f8feb4,723285755,0,0x0,8
tick,0x7ffe67f8feb4,723302047,0,0x0,8
tick,0x7ffe67f8feb4,723316731,0,0x0,8
tick,0x7ffe67f8feb4,723332104,0,0x0,8
tick,0x7ffe67f8feb4,723347730,0,0x0,8
tick,0x7ffe67f8feb4,723363471,0,0x0,8
tick,0x7ffe67f8feb4,723379453,0,0x0,8
tick,0x7ffe67f8feb4,723395450,0,0x0,8
tick,0x7ffe67f8feb4,723411474,0,0x0,8
tick,0x7ffe67f8feb4,723426718,0,0x0,8
tick,0x7ffe67f8feb4,723442529,0,0x0,8
tick,0x7ffe67f8feb4,723458292,0,0x0,8
tick,0x7ffe67f8feb4,723473773,0,0x0,8
tick,0x7ffe67f8feb4,723488727,0,0x0,8
tick,0x7ffe67f8feb4,723503893,0,0x0,8
tick,0x7ffe67f8feb4,723519235,0,0x0,8
tick,0x7ffe67f8feb4,723535293,0,0x0,8
tick,0x7ffe67f8feb4,723551170,0,0x0,8
tick,0x7ffe67f8feb4,723567176,0,0x0,8
tick,0x7ffe67f8feb4,723583359,0,0x0,8
tick,0x7ffe67f8feb4,723599155,0,0x0,8
tick,0x7ffe67f8feb4,723615154,0,0x0,8
tick,0x7ffe67f8feb4,723631371,0,0x0,8
tick,0x7ffe67f8feb4,723647140,0,0x0,8
tick,0x7ffe67f8feb4,723663153,0,0x0,8
tick,0x7ffe67f8feb4,723679152,0,0x0,8
tick,0x7ffe67f8feb4,723695143,0,0x0,8
tick,0x7ffe67f8feb4,723711152,0,0x0,8
tick,0x7ffe67f8feb4,723727179,0,0x0,8
tick,0x7ffe67f8feb4,723743160,0,0x0,8
tick,0x7ffe67f8feb4,723759146,0,0x0,8
tick,0x7ffe67f8feb4,723775153,0,0x0,8
tick,0x7ffe67f8feb4,723791158,0,0x0,8
tick,0x7ffe67f8feb4,723807170,0,0x0,8
tick,0x7ffe67f8feb4,723823155,0,0x0,8
tick,0x7ffe67f8feb4,723839154,0,0x0,8
tick,0x7ffe67f8feb4,723855160,0,0x0,8
tick,0x7ffe67f8feb4,723871158,0,0x0,8
tick,0x7ffe67f8feb4,723887153,0,0x0,8
tick,0x7ffe67f8feb4,723903154,0,0x0,8
tick,0x7ffe67f8feb4,723918818,0,0x0,8
tick,0x7ffe67f8feb4,723934052,0,0x0,8
tick,0x7ffe67f8feb4,723949311,0,0x0,8
tick,0x7ffe67f8feb4,723964738,0,0x0,8
tick,0x7ffe67f8feb4,723979664,0,0x0,8
tick,0x7ffe67f8feb4,723995012,0,0x0,8
tick,0x7ffe67f8feb4,724010554,0,0x0,8
tick,0x7ffe67f8feb4,724025327,0,0x0,8
tick,0x7ffe67f8feb4,724041328,0,0x0,8
tick,0x7ffe67f8feb4,724057412,0,0x0,8
tick,0x7ffe67f8feb4,724073550,0,0x0,8
tick,0x7ffe67f8feb4,724088969,0,0x0,8
tick,0x7ffe67f8feb4,724104936,0,0x0,8
tick,0x7ffe67f8feb4,724120239,0,0x0,8
tick,0x7ffe67f8feb4,724136267,0,0x0,8
tick,0x7ffe67f8feb4,724152427,0,0x0,8
tick,0x7ffe67f8feb4,724167861,0,0x0,8
tick,0x7ffe67f8feb4,724184028,0,0x0,8
tick,0x7ffe67f8feb4,724200187,0,0x0,8
tick,0x7ffe67f8feb4,724215599,0,0x0,8
tick,0x7ffe67f8feb4,724230988,0,0x0,8
tick,0x7ffe67f8feb4,724246094,0,0x0,8
tick,0x7ffe67f8feb4,724261362,0,0x0,8
tick,0x7ffe67f8feb4,724276788,0,0x0,8
tick,0x7ffe67f8feb4,724292562,0,0x0,8
tick,0x7ffe67f8feb4,724307852,0,0x0,8
tick,0x7ffe67f8feb4,724323098,0,0x0,8
tick,0x7ffe67f8feb4,724339213,0,0x0,8
tick,0x7ffe67f8feb4,724355274,0,0x0,8
tick,0x7ffe67f8feb4,724370532,0,0x0,8
tick,0x7ffe67f8feb4,724386254,0,0x0,8
tick,0x7ffe67f8feb4,724402069,0,0x0,8
tick,0x7ffe67f8feb4,724417220,0,0x0,8
tick,0x7ffe67f8feb4,724432928,0,0x0,8
tick,0x7ffe67f8feb4,724447689,0,0x0,8
tick,0x7ffe67f8feb4,724463653,0,0x0,8
tick,0x7ffe67f8feb4,724479683,0,0x0,8
tick,0x7ffe67f8feb4,724495663,0,0x0,8
tick,0x7ffe67f8feb4,724511649,0,0x0,8
tick,0x7ffe67f8feb4,724526561,0,0x0,8
tick,0x7ffe67f8feb4,724542631,0,0x0,8
tick,0x7ffe67f8feb4,724557626,0,0x0,8
tick,0x7ffe67f8feb4,724573489,0,0x0,8
tick,0x7ffe67f8feb4,724588276,0,0x0,8
tick,0x7ffe67f8feb4,724604294,0,0x0,8
tick,0x7ffe67f8feb4,724619750,0,0x0,8
tick,0x7ffe67f8feb4,724635777,0,0x0,8
tick,0x7ffe67f8feb4,724650946,0,0x0,8
tick,0x7ffe67f8feb4,724666398,0,0x0,8
tick,0x7ffe67f8feb4,724681380,0,0x0,8
tick,0x7ffe67f8feb4,724697384,0,0x0,8
tick,0x7ffe67f8feb4,724713320,0,0x0,8
tick,0x7ffe67f8feb4,724729355,0,0x0,8
tick,0x7ffe67f8feb4,724744348,0,0x0,8
tick,0x7ffe67f8feb4,724760340,0,0x0,8
tick,0x7ffe67f8feb4,724775884,0,0x0,8
tick,0x7ffe67f8feb4,724791577,0,0x0,8
tick,0x7ffe67f8feb4,724807593,0,0x0,8
tick,0x7ffe67f8feb4,724822859,0,0x0,8
tick,0x7ffe67f8feb4,724838642,0,0x0,8
tick,0x7ffe67f8feb4,724854688,0,0x0,8
tick,0x7ffe67f8feb4,724870221,0,0x0,8
tick,0x7ffe67f8feb4,724886204,0,0x0,8
tick,0x7ffe67f8feb4,724901813,0,0x0,8
tick,0x7ffe67f8feb4,724917042,0,0x0,8
tick,0x7ffe67f8feb4,724932620,0,0x0,8
tick,0x7ffe67f8feb4,724947958,0,0x0,8
tick,0x7ffe67f8feb4,724963566,0,0x0,8
tick,0x7ffe67f8feb4,724979618,0,0x0,8
tick,0x7ffe67f8feb4,724994759,0,0x0,8
tick,0x7ffe67f8feb4,725010664,0,0x0,8
tick,0x7ffe67f8feb4,725026760,0,0x0,8
tick,0x7ffe67f8feb4,725042696,0,0x0,8
tick,0x7ffe67f8feb4,725058770,0,0x0,8
tick,0x7ffe67f8feb4,725074502,0,0x0,8
tick,0x7ffe67f8feb4,725090530,0,0x0,8
tick,0x7ffe67f8feb4,725105730,0,0x0,8
tick,0x7ffe67f8feb4,725121531,0,0x0,8
tick,0x7ffe67f8feb4,725137596,0,0x0,8
tick,0x7ffe67f8feb4,725153567,0,0x0,8
tick,0x7ffe67f8feb4,725168629,0,0x0,8
tick,0x7ffe67f8feb4,725183810,0,0x0,8
tick,0x7ffe67f8feb4,725199691,0,0x0,8
tick,0x7ffe67f8feb4,725214897,0,0x0,8
tick,0x7ffe67f8feb4,725230683,0,0x0,8
tick,0x7ffe67f8feb4,725245830,0,0x0,8
tick,0x7ffe67f8feb4,725261021,0,0x0,8
tick,0x7ffe67f8feb4,725276798,0,0x0,8
tick,0x7ffe67f8feb4,725292812,0,0x0,8
tick,0x7ffe67f8feb4,725308757,0,0x0,8
tick,0x7ffe67f8feb4,725324045,0,0x0,8
tick,0x7ffe67f8feb4,725339829,0,0x0,8
tick,0x7ffe67f8feb4,725355862,0,0x0,8
tick,0x7ffe67f8feb4,725371895,0,0x0,8
tick,0x7ffe67f8feb4,725387971,0,0x0,8
tick,0x7ffe67f8feb4,725403946,0,0x0,8
tick,0x7ffe67f8feb4,725419196,0,0x0,8
tick,0x7ffe67f8feb4,725434590,0,0x0,8
tick,0x7ffe67f8feb4,725449581,0,0x0,8
tick,0x7ffe67f8feb4,725465136,0,0x0,8
tick,0x7ffe67f8feb4,725480379,0,0x0,8
tick,0x7ffe67f8feb4,725496336,0,0x0,8
tick,0x7ffe67f8feb4,725511789,0,0x0,8
tick,0x7ffe67f8feb4,725527098,0,0x0,8
tick,0x7ffe67f8feb4,725542949,0,0x0,8
tick,0x7ffe67f8feb4,725558612,0,0x0,8
tick,0x7ffe67f8feb4,725573634,0,0x0,8
tick,0x7ffe67f8feb4,725589615,0,0x0,8
tick,0x7ffe67f8feb4,725605008,0,0x0,8
tick,0x7ffe67f8feb4,725620805,0,0x0,8
tick,0x7ffe67f8feb4,725636707,0,0x0,8
tick,0x7ffe67f8feb4,725651828,0,0x0,8
tick,0x7ffe67f8feb4,725667821,0,0x0,8
tick,0x7ffe67f8feb4,725682818,0,0x0,8
tick,0x7ffe67f8feb4,725698815,0,0x0,8
tick,0x7ffe67f8feb4,725714804,0,0x0,8
tick,0x7ffe67f8feb4,725730832,0,0x0,8
tick,0x7ffe67f8feb4,725746280,0,0x0,8
tick,0x7ffe67f8feb4,725761367,0,0x0,8
tick,0x7ffe67f8feb4,725777376,0,0x0,8
tick,0x7ffe67f8feb4,725793008,0,0x0,8
tick,0x7ffe67f8feb4,725808827,0,0x0,8
tick,0x7ffe67f8feb4,725824852,0,0x0,8
tick,0x7ffe67f8feb4,725840858,0,0x0,8
tick,0x7ffe67f8feb4,725855840,0,0x0,8
tick,0x7ffe67f8feb4,725871996,0,0x0,8
tick,0x7ffe67f8feb4,725886835,0,0x0,8
tick,0x7ffe67f8feb4,725902846,0,0x0,8
tick,0x7ffe67f8feb4,725918887,0,0x0,8
tick,0x7ffe67f8feb4,725933846,0,0x0,8
tick,0x7ffe67f8feb4,725949845,0,0x0,8
tick,0x7ffe67f8feb4,725965842,0,0x0,8
tick,0x7ffe67f8feb4,725981862,0,0x0,8
tick,0x7ffe67f8feb4,725997871,0,0x0,8
tick,0x7ffe67f8feb4,726013802,0,0x0,8
tick,0x7ffe67f8feb4,726028949,0,0x0,8
tick,0x7ffe67f8feb4,726044849,0,0x0,8
tick,0x7ffe67f8feb4,726060872,0,0x0,8
tick,0x7ffe67f8feb4,726076065,0,0x0,8
tick,0x7ffe67f8feb4,726091893,0,0x0,8
tick,0x7ffe67f8feb4,726108052,0,0x0,8
tick,0x7ffe67f8feb4,726124014,0,0x0,8
tick,0x7ffe67f8feb4,726139884,0,0x0,8
tick,0x7ffe67f8feb4,726155920,0,0x0,8
tick,0x7ffe67f8feb4,726171965,0,0x0,8
tick,0x7ffe67f8feb4,726187953,0,0x0,8
tick,0x7ffe67f8feb4,726203903,0,0x0,8
tick,0x7ffe67f8feb4,726219910,0,0x0,8
tick,0x7ffe67f8feb4,726235928,0,0x0,8
tick,0x7ffe67f8feb4,726251048,0,0x0,8
tick,0x7ffe67f8feb4,726266808,0,0x0,8
tick,0x7ffe67f8feb4,726282813,0,0x0,8
tick,0x7ffe67f8feb4,726297809,0,0x0,8
tick,0x7ffe67f8feb4,726313014,0,0x0,8
tick,0x7ffe67f8feb4,726328969,0,0x0,8
tick,0x7ffe67f8feb4,726344214,0,0x0,8
tick,0x7ffe67f8feb4,726359974,0,0x0,8
tick,0x7ffe67f8feb4,726375985,0,0x0,8
tick,0x7ffe67f8feb4,726392011,0,0x0,8
tick,0x7ffe67f8feb4,726408171,0,0x0,8
tick,0x7ffe67f8feb4,726424026,0,0x0,8
tick,0x7ffe67f8feb4,726440052,0,0x0,8
tick,0x7ffe67f8feb4,726456017,0,0x0,8
tick,0x7ffe67f8feb4,726472092,0,0x0,8
tick,0x7ffe67f8feb4,726488456,0,0x0,8
tick,0x7ffe67f8feb4,726504017,0,0x0,8
tick,0x7ffe67f8feb4,726520041,0,0x0,8
tick,0x7ffe67f8feb4,726535529,0,0x0,8
tick,0x7ffe67f8feb4,726550660,0,0x0,8
tick,0x7ffe67f8feb4,726566254,0,0x0,8
tick,0x7ffe67f8feb4,726582254,0,0x0,8
tick,0x7ffe67f8feb4,726598248,0,0x0,8
tick,0x7ffe67f8feb4,726614260,0,0x0,8
tick,0x7ffe67f8feb4,726630263,0,0x0,8
tick,0x7ffe67f8feb4,726645434,0,0x0,8
tick,0x7ffe67f8feb4,726661281,0,0x0,8
tick,0x7ffe67f8feb4,726676870,0,0x0,8
tick,0x7ffe67f8feb4,726692782,0,0x0,8
tick,0x7ffe67f8feb4,726708778,0,0x0,8
tick,0x7ffe67f8feb4,726724784,0,0x0,8
tick,0x7ffe67f8feb4,726740810,0,0x0,8
tick,0x7ffe67f8feb4,726756793,0,0x0,8
tick,0x7ffe67f8feb4,726772859,0,0x0,8
tick,0x7ffe67f8feb4,726788910,0,0x0,8
tick,0x7ffe67f8feb4,726805437,0,0x0,8
tick,0x7ffe67f8feb4,726821043,0,0x0,8
tick,0x7ffe67f8feb4,726837064,0,0x0,8
tick,0x7ffe67f8feb4,726852351,0,0x0,8
tick,0x7ffe67f8feb4,726868028,0,0x0,8
tick,0x7ffe67f8feb4,726884024,0,0x0,8
tick,0x7ffe67f8feb4,726899167,0,0x0,8
tick,0x7ffe67f8feb4,726915138,0,0x0,8
tick,0x7ffe67f8feb4,726930283,0,0x0,8
tick,0x7ffe67f8feb4,726945744,0,0x0,8
tick,0x7ffe67f8feb4,726961253,0,0x0,8
tick,0x7ffe67f8feb4,726977290,0,0x0,8
tick,0x7ffe67f8feb4,726993303,0,0x0,8
tick,0x7ffe67f8feb4,727009349,0,0x0,8
tick,0x7ffe67f8feb4,727025395,0,0x0,8
tick,0x7ffe67f8feb4,727040861,0,0x0,8
tick,0x7ffe67f8feb4,727056522,0,0x0,8
tick,0x7ffe67f8feb4,727072113,0,0x0,8
tick,0x7ffe67f8feb4,727087101,0,0x0,8
tick,0x7ffe67f8feb4,727103450,0,0x0,8
tick,0x7ffe67f8feb4,727119101,0,0x0,8
tick,0x7ffe67f8feb4,727135072,0,0x0,8
tick,0x7ffe67f8feb4,727150362,0,0x0,8
tick,0x7ffe67f8feb4,727166087,0,0x0,8
tick,0x7ffe67f8feb4,727181207,0,0x0,8
tick,0x7ffe67f8feb4,727197277,0,0x0,8
tick,0x7ffe67f8feb4,727213239,0,0x0,8
tick,0x7ffe67f8feb4,727229214,0,0x0,8
tick,0x7ffe67f8feb4,727244586,0,0x0,8
tick,0x7ffe67f8feb4,727260260,0,0x0,8
tick,0x7ffe67f8feb4,727275746,0,0x0,8
tick,0x7ffe67f8feb4,727291397,0,0x0,8
tick,0x7ffe67f8feb4,727306772,0,0x0,8
tick,0x7ffe67f8feb4,727322195,0,0x0,8
tick,0x7ffe67f8feb4,727337874,0,0x0,8
tick,0x7ffe67f8feb4,727353433,0,0x0,8
tick,0x7ffe67f8feb4,727368808,0,0x0,8
tick,0x7ffe67f8feb4,727384674,0,0x0,8
tick,0x7ffe67f8feb4,727400299,0,0x0,8
tick,0x7ffe67f8feb4,727415336,0,0x0,8
tick,0x7ffe67f8feb4,727431365,0,0x0,8
tick,0x7ffe67f8feb4,727446683,0,0x0,8
tick,0x7ffe67f8feb4,727462122,0,0x0,8
tick,0x7ffe67f8feb4,727478097,0,0x0,8
tick,0x7ffe67f8feb4,727494103,0,0x0,8
tick,0x7ffe67f8feb4,727510091,0,0x0,8
tick,0x7ffe67f8feb4,727526125,0,0x0,8
tick,0x7ffe67f8feb4,727541090,0,0x0,8
tick,0x7ffe67f8feb4,727557176,0,0x0,8
tick,0x7ffe67f8feb4,727573432,0,0x0,8
tick,0x7ffe67f8feb4,727589098,0,0x0,8
tick,0x7ffe67f8feb4,727605102,0,0x0,8
tick,0x7ffe67f8feb4,727621041,0,0x0,8
tick,0x7ffe67f8feb4,727637019,0,0x0,8
tick,0x7ffe67f8feb4,727653052,0,0x0,8
tick,0x7ffe67f8feb4,727669110,0,0x0,8
tick,0x7ffe67f8feb4,727684911,0,0x0,8
tick,0x7ffe67f8feb4,727700139,0,0x0,8
tick,0x7ffe67f8feb4,727716128,0,0x0,8
tick,0x7ffe67f8feb4,727732122,0,0x0,8
tick,0x7ffe67f8feb4,727748119,0,0x0,8
tick,0x7ffe67f8feb4,727764124,0,0x0,8
tick,0x7ffe67f8feb4,727780176,0,0x0,8
tick,0x7ffe67f8feb4,727796151,0,0x0,8
tick,0x7ffe67f8feb4,727812159,0,0x0,8
tick,0x7ffe67f8feb4,727828152,0,0x0,8
tick,0x7ffe67f8feb4,727843643,0,0x0,8
tick,0x7ffe67f8feb4,727859157,0,0x0,8
tick,0x7ffe67f8feb4,727875170,0,0x0,8
tick,0x7ffe67f8feb4,727890672,0,0x0,8
tick,0x7ffe67f8feb4,727906728,0,0x0,8
tick,0x7ffe67f8feb4,727921169,0,0x0,8
tick,0x7ffe67f8feb4,727936436,0,0x0,8
tick,0x7ffe67f8feb4,727952435,0,0x0,8
tick,0x7ffe67f8feb4,727968163,0,0x0,8
tick,0x7ffe67f8feb4,727984161,0,0x0,8
tick,0x7ffe67f8feb4,728000182,0,0x0,8
tick,0x7ffe67f8feb4,728016100,0,0x0,8
tick,0x7ffe67f8feb4,728031299,0,0x0,8
tick,0x7ffe67f8feb4,728047199,0,0x0,8
tick,0x7ffe67f8feb4,728062592,0,0x0,8
tick,0x7ffe67f8feb4,728078178,0,0x0,8
tick,0x7ffe67f8feb4,728094089,0,0x0,8
tick,0x7ffe67f8feb4,728110181,0,0x0,8
tick,0x7ffe67f8feb4,728126190,0,0x0,8
tick,0x7ffe67f8feb4,728142088,0,0x0,8
tick,0x7ffe67f8feb4,728158085,0,0x0,8
tick,0x7ffe67f8feb4,728174079,0,0x0,8
tick,0x7ffe67f8feb4,728190092,0,0x0,8
tick,0x7ffe67f8feb4,728205408,0,0x0,8
tick,0x7ffe67f8feb4,728221610,0,0x0,8
tick,0x7ffe67f8feb4,728236851,0,0x0,8
tick,0x7ffe67f8feb4,728252223,0,0x0,8
tick,0x7ffe67f8feb4,728267841,0,0x0,8
tick,0x7ffe67f8feb4,728283385,0,0x0,8
tick,0x7ffe67f8feb4,728298804,0,0x0,8
tick,0x7ffe67f8feb4,728314513,0,0x0,8
tick,0x7ffe67f8feb4,728329510,0,0x0,8
tick,0x7ffe67f8feb4,728345841,0,0x0,8
tick,0x7ffe67f8feb4,728361111,0,0x0,8
tick,0x7ffe67f8feb4,728376501,0,0x0,8
tick,0x7ffe67f8feb4,728392288,0,0x0,8
tick,0x7ffe67f8feb4,728407947,0,0x0,8
tick,0x7ffe67f8feb4,728423832,0,0x0,8
tick,0x7ffe67f8feb4,728439110,0,0x0,8
tick,0x7ffe67f8feb4,728455115,0,0x0,8
tick,0x7ffe67f8feb4,728470576,0,0x0,8
tick,0x7ffe67f8feb4,728485674,0,0x0,8
tick,0x7ffe67f8feb4,728501922,0,0x0,8
tick,0x7ffe67f8feb4,728517142,0,0x0,8
tick,0x7ffe67f8feb4,728532688,0,0x0,8
tick,0x7ffe67f8feb4,728548042,0,0x0,8
tick,0x7ffe67f8feb4,728563431,0,0x0,8
tick,0x7ffe67f8feb4,728579505,0,0x0,8
tick,0x7ffe67f8feb4,728594933,0,0x0,8
tick,0x7ffe67f8feb4,728610401,0,0x0,8
tick,0x7ffe67f8feb4,728626365,0,0x0,8
tick,0x7ffe67f8feb4,728643461,0,0x0,8
tick,0x7ffe67f8feb4,728658355,0,0x0,8
tick,0x7ffe67f8feb4,728674485,0,0x0,8
tick,0x7ffe67f8feb4,728690413,0,0x0,8
tick,0x7ffe67f8feb4,728706567,0,0x0,8
tick,0x7ffe67f8feb4,728722346,0,0x0,8
tick,0x7ffe67f8feb4,728738347,0,0x0,8
tick,0x7ffe67f8feb4,728754531,0,0x0,8
tick,0x7ffe67f8feb4,728770378,0,0x0,8
tick,0x7ffe67f8feb4,728786344,0,0x0,8
tick,0x7ffe67f8feb4,728802351,0,0x0,8
tick,0x7ffe67f8feb4,728818376,0,0x0,8
tick,0x7ffe67f8feb4,728834506,0,0x0,8
tick,0x7ffe67f8feb4,728850379,0,0x0,8
tick,0x7ffe67f8feb4,728865789,0,0x0,8
tick,0x7ffe67f8feb4,728881816,0,0x0,8
tick,0x7ffe67f8feb4,728897825,0,0x0,8
tick,0x7ffe67f8feb4,728913280,0,0x0,8
tick,0x7ffe67f8feb4,728928287,0,0x0,8
tick,0x7ffe67f8feb4,728944343,0,0x0,8
tick,0x7ffe67f8feb4,728960302,0,0x0,8
tick,0x7ffe67f8feb4,728976315,0,0x0,8
tick,0x7ffe67f8feb4,728992333,0,0x0,8
tick,0x7ffe67f8feb4,729008334,0,0x0,8
tick,0x7ffe67f8feb4,729024105,0,0x0,8
tick,0x7ffe67f8feb4,729039359,0,0x0,8
tick,0x7ffe67f8feb4,729054819,0,0x0,8
tick,0x7ffe67f8feb4,729070322,0,0x0,8
tick,0x7ffe67f8feb4,729086214,0,0x0,8
tick,0x7ffe67f8feb4,729101365,0,0x0,8
tick,0x7ffe67f8feb4,729117346,0,0x0,8
tick,0x7ffe67f8feb4,729133343,0,0x0,8
tick,0x7ffe67f8feb4,729149335,0,0x0,8
tick,0x7ffe67f8feb4,729165341,0,0x0,8
tick,0x7ffe67f8feb4,729181342,0,0x0,8
tick,0x7ffe67f8feb4,729197343,0,0x0,8
tick,0x7ffe67f8feb4,729213359,0,0x0,8
tick,0x7ffe67f8feb4,729229350,0,0x0,8
tick,0x7ffe67f8feb4,729245367,0,0x0,8
tick,0x7ffe67f8feb4,729261383,0,0x0,8
tick,0x7ffe67f8feb4,729277394,0,0x0,8
tick,0x7ffe67f8feb4,729293396,0,0x0,8
tick,0x7ffe67f8feb4,729309393,0,0x0,8
tick,0x7ffe67f8feb4,729325726,0,0x0,8
tick,0x7ffe67f8feb4,729341544,0,0x0,8
tick,0x7ffe67f8feb4,729357381,0,0x0,8
tick,0x7ffe67f8feb4,729373382,0,0x0,8
tick,0x7ffe67f8feb4,729389370,0,0x0,8
tick,0x7ffe67f8feb4,729405285,0,0x0,8
tick,0x7ffe67f8feb4,729421310,0,0x0,8
tick,0x7ffe67f8feb4,729437329,0,0x0,8
tick,0x7ffe67f8feb4,729453389,0,0x0,8
tick,0x7ffe67f8feb4,729469350,0,0x0,8
tick,0x7ffe67f8feb4,729484790,0,0x0,8
tick,0x7ffe67f8feb4,729500369,0,0x0,8
tick,0x7ffe67f8feb4,729516386,0,0x0,8
tick,0x7ffe67f8feb4,729532403,0,0x0,8
tick,0x7ffe67f8feb4,729548398,0,0x0,8
tick,0x7ffe67f8feb4,729564387,0,0x0,8
tick,0x7ffe67f8feb4,729579400,0,0x0,8
tick,0x7ffe67f8feb4,729594388,0,0x0,8
tick,0x7ffe67f8feb4,729610439,0,0x0,8
tick,0x7ffe67f8feb4,729626466,0,0x0,8
tick,0x7ffe67f8feb4,729642543,0,0x0,8
tick,0x7ffe67f8feb4,729658521,0,0x0,8
tick,0x7ffe67f8feb4,729674442,0,0x0,8
tick,0x7ffe67f8feb4,729690451,0,0x0,8
tick,0x7ffe67f8feb4,729706596,0,0x0,8
tick,0x7ffe67f8feb4,729722344,0,0x0,8
tick,0x7ffe67f8feb4,729738337,0,0x0,8
tick,0x7ffe67f8feb4,729754365,0,0x0,8
tick,0x7ffe67f8feb4,729770415,0,0x0,8
tick,0x7ffe67f8feb4,729785536,0,0x0,8
tick,0x7ffe67f8feb4,729801371,0,0x0,8
tick,0x7ffe67f8feb4,729817428,0,0x0,8
tick,0x7ffe67f8feb4,729833365,0,0x0,8
tick,0x7ffe67f8feb4,729849646,0,0x0,8
tick,0x7ffe67f8feb4,729865377,0,0x0,8
tick,0x7ffe67f8feb4,729881740,0,0x0,8
tick,0x7ffe67f8feb4,729897869,0,0x0,8
tick,0x7ffe67f8feb4,729913368,0,0x0,8
tick,0x7ffe67f8feb4,729929401,0,0x0,8
tick,0x7ffe67f8feb4,729945371,0,0x0,8
tick,0x7ffe67f8feb4,729961434,0,0x0,8
tick,0x7ffe67f8feb4,729977394,0,0x0,8
tick,0x7ffe67f8feb4,729993395,0,0x0,8
tick,0x7ffe67f8feb4,730008494,0,0x0,8
tick,0x7ffe67f8feb4,730024464,0,0x0,8
tick,0x7ffe67f8feb4,730039547,0,0x0,8
tick,0x7ffe67f8feb4,730055375,0,0x0,8
tick,0x7ffe67f8feb4,730071386,0,0x0,8
tick,0x7ffe67f8feb4,730087656,0,0x0,8
tick,0x7ffe67f8feb4,730102649,0,0x0,8
tick,0x7ffe67f8feb4,730118393,0,0x0,8
tick,0x7ffe67f8feb4,730134486,0,0x0,8
tick,0x7ffe67f8feb4,730150499,0,0x0,8
tick,0x7ffe67f8feb4,730166505,0,0x0,8
tick,0x7ffe67f8feb4,730182517,0,0x0,8
tick,0x7ffe67f8feb4,730198524,0,0x0,8
tick,0x7ffe67f8feb4,730214521,0,0x0,8
tick,0x7ffe67f8feb4,730230533,0,0x0,8
tick,0x7ffe67f8feb4,730246521,0,0x0,8
tick,0x7ffe67f8feb4,730262539,0,0x0,8
tick,0x7ffe67f8feb4,730279046,0,0x0,8
tick,0x7ffe67f8feb4,730294616,0,0x0,8
tick,0x7ffe67f8feb4,730310551,0,0x0,8
tick,0x7ffe67f8feb4,730336491,0,0x0,8
tick,0x7ffe67f8feb4,730342538,0,0x0,8
tick,0x7ffe67f8feb4,730358751,0,0x0,8
tick,0x7ffe67f8feb4,730374549,0,0x0,8
tick,0x7ffe67f8feb4,730390534,0,0x0,8
tick,0x7ffe67f8feb4,730406542,0,0x0,8
tick,0x7ffe67f8feb4,730421540,0,0x0,8
tick,0x7ffe67f8feb4,730437550,0,0x0,8
tick,0x7ffe67f8feb4,730453545,0,0x0,8
tick,0x7ffe67f8feb4,730469572,0,0x0,8
tick,0x7ffe67f8feb4,730485546,0,0x0,8
tick,0x7ffe67f8feb4,730501566,0,0x0,8
tick,0x7ffe67f8feb4,730517567,0,0x0,8
tick,0x7ffe67f8feb4,730533566,0,0x0,8
tick,0x7ffe67f8feb4,730549048,0,0x0,8
tick,0x7ffe67f8feb4,730564256,0,0x0,8
tick,0x7ffe67f8feb4,730579576,0,0x0,8
tick,0x7ffe67f8feb4,730595603,0,0x0,8
tick,0x7ffe67f8feb4,730611033,0,0x0,8
tick,0x7ffe67f8feb4,730626621,0,0x0,8
tick,0x7ffe67f8feb4,730642601,0,0x0,8
tick,0x7ffe67f8feb4,730658587,0,0x0,8
tick,0x7ffe67f8feb4,730674456,0,0x0,8
tick,0x7ffe67f8feb4,730689614,0,0x0,8
tick,0x7ffe67f8feb4,730705044,0,0x0,8
tick,0x7ffe67f8feb4,730720621,0,0x0,8
tick,0x7ffe67f8feb4,730736620,0,0x0,8
tick,0x7ffe67f8feb4,730752664,0,0x0,8
tick,0x7ffe67f8feb4,730768625,0,0x0,8
tick,0x7ffe67f8feb4,730783895,0,0x0,8
tick,0x7ffe67f8feb4,730799645,0,0x0,8
tick,0x7ffe67f8feb4,730815255,0,0x0,8
tick,0x7ffe67f8feb4,730830595,0,0x0,8
tick,0x7ffe67f8feb4,730846777,0,0x0,8
tick,0x7ffe67f8feb4,730862665,0,0x0,8
tick,0x7ffe67f8feb4,730878990,0,0x0,8
tick,0x7ffe67f8feb4,730894767,0,0x0,8
tick,0x7ffe67f8feb4,730910650,0,0x0,8
tick,0x7ffe67f8feb4,730926511,0,0x0,8
tick,0x7ffe67f8feb4,730942422,0,0x0,8
tick,0x7ffe67f8feb4,730958343,0,0x0,8
tick,0x7ffe67f8feb4,730973533,0,0x0,8
tick,0x7ffe67f8feb4,730989370,0,0x0,8
tick,0x7ffe67f8feb4,731004265,0,0x0,8
tick,0x7ffe67f8feb4,731019444,0,0x0,8
tick,0x7ffe67f8feb4,731035503,0,0x0,8
tick,0x7ffe67f8feb4,731051275,0,0x0,8
tick,0x7ffe67f8feb4,731066497,0,0x0,8
tick,0x7ffe67f8feb4,731081666,0,0x0,8
tick,0x7ffe67f8feb4,731097296,0,0x0,8
tick,0x7ffe67f8feb4,731112370,0,0x0,8
tick,0x7ffe67f8feb4,731128669,0,0x0,8
tick,0x7ffe67f8feb4,731144353,0,0x0,8
tick,0x7ffe67f8feb4,731160326,0,0x0,8
tick,0x7ffe67f8feb4,731176328,0,0x0,8
tick,0x7ffe67f8feb4,731191447,0,0x0,8
tick,0x7ffe67f8feb4,731206674,0,0x0,8
tick,0x7ffe67f8feb4,731222330,0,0x0,8
tick,0x7ffe67f8feb4,731237453,0,0x0,8
tick,0x7ffe67f8feb4,731253294,0,0x0,8
tick,0x7ffe67f8feb4,731269329,0,0x0,8
tick,0x7ffe67f8feb4,731284650,0,0x0,8
tick,0x7ffe67f8feb4,731300651,0,0x0,8
tick,0x7ffe67f8feb4,731316650,0,0x0,8
tick,0x7ffe67f8feb4,731332714,0,0x0,8
tick,0x7ffe67f8feb4,731347347,0,0x0,8
tick,0x7ffe67f8feb4,731362504,0,0x0,8
tick,0x7ffe67f8feb4,731377608,0,0x0,8
tick,0x7ffe67f8feb4,731392340,0,0x0,8
tick,0x7ffe67f8feb4,731408344,0,0x0,8
tick,0x7ffe67f8feb4,731423516,0,0x0,8
tick,0x7ffe67f8feb4,731438314,0,0x0,8
tick,0x7ffe67f8feb4,731453693,0,0x0,8
tick,0x7ffe67f8feb4,731469320,0,0x0,8
tick,0x7ffe67f8feb4,731484488,0,0x0,8
tick,0x7ffe67f8feb4,731499808,0,0x0,8
tick,0x7ffe67f8feb4,731515489,0,0x0,8
tick,0x7ffe67f8feb4,731530720,0,0x0,8
tick,0x7ffe67f8feb4,731546240,0,0x0,8
tick,0x7ffe67f8feb4,731562021,0,0x0,8
tick,0x7ffe67f8feb4,731578024,0,0x0,8
tick,0x7ffe67f8feb4,731593650,0,0x0,8
tick,0x7ffe67f8feb4,731609054,0,0x0,8
tick,0x7ffe67f8feb4,731624367,0,0x0,8
tick,0x7ffe67f8feb4,731640140,0,0x0,8
tick,0x7ffe67f8feb4,731655540,0,0x0,8
tick,0x7ffe67f8feb4,731671695,0,0x0,8
tick,0x7ffe67f8feb4,731687669,0,0x0,8
tick,0x7ffe67f8feb4,731703384,0,0x0,8
tick,0x7ffe67f8feb4,731719442,0,0x0,8
tick,0x7ffe67f8feb4,731734632,0,0x0,8
tick,0x7ffe67f8feb4,731750555,0,0x0,8
tick,0x7ffe67f8feb4,731766557,0,0x0,8
tick,0x7ffe67f8feb4,731782565,0,0x0,8
tick,0x7ffe67f8feb4,731798630,0,0x0,8
tick,0x7ffe67f8feb4,731814472,0,0x0,8
tick,0x7ffe67f8feb4,731829632,0,0x0,8
tick,0x7ffe67f8feb4,731845658,0,0x0,8
tick,0x7ffe67f8feb4,731861297,0,0x0,8
tick,0x7ffe67f8feb4,731876575,0,0x0,8
tick,0x7ffe67f8feb4,731892339,0,0x0,8
tick,0x7ffe67f8feb4,731907542,0,0x0,8
tick,0x7ffe67f8feb4,731923361,0,0x0,8
tick,0x7ffe67f8feb4,731939383,0,0x0,8
tick,0x7ffe67f8feb4,731955478,0,0x0,8
tick,0x7ffe67f8feb4,731971019,0,0x0,8
tick,0x7ffe67f8feb4,731986809,0,0x0,8
tick,0x7ffe67f8feb4,732001886,0,0x0,8
tick,0x7ffe67f8feb4,732018109,0,0x0,8
tick,0x7ffe67f8feb4,732033404,0,0x0,8
tick,0x7ffe67f8feb4,732049449,0,0x0,8
tick,0x7ffe67f8feb4,732064771,0,0x0,8
tick,0x7ffe67f8feb4,732079735,0,0x0,8
tick,0x7ffe67f8feb4,732095759,0,0x0,8
tick,0x7ffe67f8feb4,732111781,0,0x0,8
tick,0x7ffe67f8feb4,732127481,0,0x0,8
tick,0x7ffe67f8feb4,732142944,0,0x0,8
tick,0x7ffe67f8feb4,732157973,0,0x0,8
tick,0x7ffe67f8feb4,732173868,0,0x0,8
tick,0x7ffe67f8feb4,732189423,0,0x0,8
tick,0x7ffe67f8feb4,732204968,0,0x0,8
tick,0x7ffe67f8feb4,732220453,0,0x0,8
tick,0x7ffe67f8feb4,732236023,0,0x0,8
tick,0x7ffe67f8feb4,732251456,0,0x0,8
tick,0x7ffe67f8feb4,732266804,0,0x0,8
tick,0x7ffe67f8feb4,732282984,0,0x0,8
tick,0x7ffe67f8feb4,732298471,0,0x0,8
tick,0x7ffe67f8feb4,732313533,0,0x0,8
tick,0x7ffe67f8feb4,732329543,0,0x0,8
tick,0x7ffe67f8feb4,732344508,0,0x0,8
tick,0x7ffe67f8feb4,732360571,0,0x0,8
tick,0x7ffe67f8feb4,732375884,0,0x0,8
tick,0x7ffe67f8feb4,732391476,0,0x0,8
tick,0x7ffe67f8feb4,732406658,0,0x0,8
tick,0x7ffe67f8feb4,732422120,0,0x0,8
tick,0x7ffe67f8feb4,732438093,0,0x0,8
tick,0x7ffe67f8feb4,732453936,0,0x0,8
tick,0x7ffe67f8feb4,732469525,0,0x0,8
tick,0x7ffe67f8feb4,732485792,0,0x0,8
tick,0x7ffe67f8feb4,732501038,0,0x0,8
tick,0x7ffe67f8feb4,732516943,0,0x0,8
tick,0x7ffe67f8feb4,732531798,0,0x0,8
tick,0x7ffe67f8feb4,732546425,0,0x0,8
tick,0x7ffe67f8feb4,732562151,0,0x0,8
tick,0x7ffe67f8feb4,732577849,0,0x0,8
tick,0x7ffe67f8feb4,732594541,0,0x0,8
tick,0x7ffe67f8feb4,732610187,0,0x0,8
tick,0x7ffe67f8feb4,732625587,0,0x0,8
tick,0x7ffe67f8feb4,732640921,0,0x0,8
tick,0x7ffe67f8feb4,732656618,0,0x0,8
tick,0x7ffe67f8feb4,732672185,0,0x0,8
tick,0x7ffe67f8feb4,732687956,0,0x0,8
tick,0x7ffe67f8feb4,732703907,0,0x0,8
tick,0x7ffe67f8feb4,732719982,0,0x0,8
tick,0x7ffe67f8feb4,732734912,0,0x0,8
tick,0x7ffe67f8feb4,732750931,0,0x0,8
tick,0x7ffe67f8feb4,732766911,0,0x0,8
tick,0x7ffe67f8feb4,732782921,0,0x0,8
tick,0x7ffe67f8feb4,732798952,0,0x0,8
tick,0x7ffe67f8feb4,732814532,0,0x0,8
tick,0x7ffe67f8feb4,732829979,0,0x0,8
tick,0x7ffe67f8feb4,732846008,0,0x0,8
tick,0x7ffe67f8feb4,732860992,0,0x0,8
tick,0x7ffe67f8feb4,732876903,0,0x0,8
tick,0x7ffe67f8feb4,732892909,0,0x0,8
tick,0x7ffe67f8feb4,732908947,0,0x0,8
tick,0x7ffe67f8feb4,732924910,0,0x0,8
tick,0x7ffe67f8feb4,732940908,0,0x0,8
tick,0x7ffe67f8feb4,732956906,0,0x0,8
tick,0x7ffe67f8feb4,732972915,0,0x0,8
tick,0x7ffe67f8feb4,732988920,0,0x0,8
tick,0x7ffe67f8feb4,733004924,0,0x0,8
tick,0x7ffe67f8feb4,733020942,0,0x0,8
tick,0x7ffe67f8feb4,733036929,0,0x0,8
tick,0x7ffe67f8feb4,733052933,0,0x0,8
tick,0x7ffe67f8feb4,733068905,0,0x0,8
tick,0x7ffe67f8feb4,733084933,0,0x0,8
tick,0x7ffe67f8feb4,733100950,0,0x0,8
tick,0x7ffe67f8feb4,733116196,0,0x0,8
tick,0x7ffe67f8feb4,733132227,0,0x0,8
tick,0x7ffe67f8feb4,733148234,0,0x0,8
tick,0x7ffe67f8feb4,733164257,0,0x0,8
tick,0x7ffe67f8feb4,733180287,0,0x0,8
tick,0x7ffe67f8feb4,733196315,0,0x0,8
tick,0x7ffe67f8feb4,733212359,0,0x0,8
tick,0x7ffe67f8feb4,733227727,0,0x0,8
tick,0x7ffe67f8feb4,733243006,0,0x0,8
tick,0x7ffe67f8feb4,733258843,0,0x0,8
tick,0x7ffe67f8feb4,733274223,0,0x0,8
tick,0x7ffe67f8feb4,733289404,0,0x0,8
tick,0x7ffe67f8feb4,733305334,0,0x0,8
tick,0x7ffe67f8feb4,733321361,0,0x0,8
tick,0x7ffe67f8feb4,733337411,0,0x0,8
tick,0x7ffe67f8feb4,733352834,0,0x0,8
tick,0x7ffe67f8feb4,733368826,0,0x0,8
tick,0x7ffe67f8feb4,733384039,0,0x0,8
tick,0x7ffe67f8feb4,733400004,0,0x0,8
tick,0x7ffe67f8feb4,733415630,0,0x0,8
tick,0x7ffe67f8feb4,733431010,0,0x0,8
tick,0x7ffe67f8feb4,733446993,0,0x0,8
tick,0x7ffe67f8feb4,733463007,0,0x0,8
tick,0x7ffe67f8feb4,733479132,0,0x0,8
tick,0x7ffe67f8feb4,733494977,0,0x0,8
tick,0x7ffe67f8feb4,733510154,0,0x0,8
tick,0x7ffe67f8feb4,733526021,0,0x0,8
tick,0x7ffe67f8feb4,733542077,0,0x0,8
tick,0x7ffe67f8feb4,733558000,0,0x0,8
tick,0x7ffe67f8feb4,733573949,0,0x0,8
tick,0x7ffe67f8feb4,733590013,0,0x0,8
tick,0x7ffe67f8feb4,733606051,0,0x0,8
tick,0x7ffe67f8feb4,733621217,0,0x0,8
tick,0x7ffe67f8feb4,733637322,0,0x0,8
tick,0x7ffe67f8feb4,733653321,0,0x0,8
tick,0x7ffe67f8feb4,733668376,0,0x0,8
tick,0x7ffe67f8feb4,733684036,0,0x0,8
tick,0x7ffe67f8feb4,733699345,0,0x0,8
tick,0x7ffe67f8feb4,733715114,0,0x0,8
tick,0x7ffe67f8feb4,733731104,0,0x0,8
tick,0x7ffe67f8feb4,733747049,0,0x0,8
tick,0x7ffe67f8feb4,733763068,0,0x0,8
tick,0x7ffe67f8feb4,733779084,0,0x0,8
tick,0x7ffe67f8feb4,733795047,0,0x0,8
tick,0x7ffe67f8feb4,733811192,0,0x0,8
tick,0x7ffe67f8feb4,733827074,0,0x0,8
tick,0x7ffe67f8feb4,733843048,0,0x0,8
tick,0x7ffe67f8feb4,733859146,0,0x0,8
tick,0x7ffe67f8feb4,733875089,0,0x0,8
tick,0x7ffe67f8feb4,733890229,0,0x0,8
tick,0x7ffe67f8feb4,733906087,0,0x0,8
tick,0x7ffe67f8feb4,733921190,0,0x0,8
tick,0x7ffe67f8feb4,733937038,0,0x0,8
tick,0x7ffe67f8feb4,733953086,0,0x0,8
tick,0x7ffe67f8feb4,733969073,0,0x0,8
tick,0x7ffe67f8feb4,733985074,0,0x0,8
tick,0x7ffe67f8feb4,734001106,0,0x0,8
tick,0x7ffe67f8feb4,734017123,0,0x0,8
tick,0x7ffe67f8feb4,734033129,0,0x0,8
tick,0x7ffe67f8feb4,734049115,0,0x0,8
tick,0x7ffe67f8feb4,734065122,0,0x0,8
tick,0x7ffe67f8feb4,734081110,0,0x0,8
tick,0x7ffe67f8feb4,734097133,0,0x0,8
tick,0x7ffe67f8feb4,734113171,0,0x0,8
tick,0x7ffe67f8feb4,734129295,0,0x0,8
tick,0x7ffe67f8feb4,734145128,0,0x0,8
tick,0x7ffe67f8feb4,734161121,0,0x0,8
tick,0x7ffe67f8feb4,734177087,0,0x0,8
tick,0x7ffe67f8feb4,734192992,0,0x0,8
tick,0x7ffe67f8feb4,734209056,0,0x0,8
tick,0x7ffe67f8feb4,734225118,0,0x0,8
tick,0x7ffe67f8feb4,734241140,0,0x0,8
tick,0x7ffe67f8feb4,734256446,0,0x0,8
tick,0x7ffe67f8feb4,734272437,0,0x0,8
tick,0x7ffe67f8feb4,734288456,0,0x0,8
tick,0x7ffe67f8feb4,734304124,0,0x0,8
tick,0x7ffe67f8feb4,734320143,0,0x0,8
tick,0x7ffe67f8feb4,734336178,0,0x0,8
tick,0x7ffe67f8feb4,734352216,0,0x0,8
tick,0x7ffe67f8feb4,734368237,0,0x0,8
tick,0x7ffe67f8feb4,734383755,0,0x0,8
tick,0x7ffe67f8feb4,734399283,0,0x0,8
tick,0x7ffe67f8feb4,734414418,0,0x0,8
tick,0x7ffe67f8feb4,734430619,0,0x0,8
tick,0x7ffe67f8feb4,734446540,0,0x0,8
tick,0x7ffe67f8feb4,734462215,0,0x0,8
tick,0x7ffe67f8feb4,734478172,0,0x0,8
tick,0x7ffe67f8feb4,734493705,0,0x0,8
tick,0x7ffe67f8feb4,734508880,0,0x0,8
tick,0x7ffe67f8feb4,734524205,0,0x0,8
tick,0x7ffe67f8feb4,734540218,0,0x0,8
tick,0x7ffe67f8feb4,734555349,0,0x0,8
tick,0x7ffe67f8feb4,734571253,0,0x0,8
tick,0x7ffe67f8feb4,734586818,0,0x0,8
tick,0x7ffe67f8feb4,734602740,0,0x0,8
tick,0x7ffe67f8feb4,734618498,0,0x0,8
tick,0x7ffe67f8feb4,734634247,0,0x0,8
tick,0x7ffe67f8feb4,734650262,0,0x0,8
tick,0x7ffe67f8feb4,734666158,0,0x0,8
tick,0x7ffe67f8feb4,734682181,0,0x0,8
tick,0x7ffe67f8feb4,734697497,0,0x0,8
tick,0x7ffe67f8feb4,734712680,0,0x0,8
tick,0x7ffe67f8feb4,734728473,0,0x0,8
tick,0x7ffe67f8feb4,734743237,0,0x0,8
tick,0x7ffe67f8feb4,734759204,0,0x0,8
tick,0x7ffe67f8feb4,734775196,0,0x0,8
tick,0x7ffe67f8feb4,734791200,0,0x0,8
tick,0x7ffe67f8feb4,734807200,0,0x0,8
tick,0x7ffe67f8feb4,734823690,0,0x0,8
tick,0x7ffe67f8feb4,734839685,0,0x0,8
tick,0x7ffe67f8feb4,734855220,0,0x0,8
tick,0x7ffe67f8feb4,734870723,0,0x0,8
tick,0x7ffe67f8feb4,734886302,0,0x0,8
tick,0x7ffe67f8feb4,734902066,0,0x0,8
tick,0x7ffe67f8feb4,734917479,0,0x0,8
tick,0x7ffe67f8feb4,734933397,0,0x0,8
tick,0x7ffe67f8feb4,734949533,0,0x0,8
tick,0x7ffe67f8feb4,734965374,0,0x0,8
tick,0x7ffe67f8feb4,734981378,0,0x0,8
tick,0x7ffe67f8feb4,734997435,0,0x0,8
tick,0x7ffe67f8feb4,735013485,0,0x0,8
tick,0x7ffe67f8feb4,735029374,0,0x0,8
tick,0x7ffe67f8feb4,735045359,0,0x0,8
tick,0x7ffe67f8feb4,735061361,0,0x0,8
tick,0x7ffe67f8feb4,735077377,0,0x0,8
tick,0x7ffe67f8feb4,735093379,0,0x0,8
tick,0x7ffe67f8feb4,735108891,0,0x0,8
tick,0x7ffe67f8feb4,735124904,0,0x0,8
tick,0x7ffe67f8feb4,735140929,0,0x0,8
tick,0x7ffe67f8feb4,735156916,0,0x0,8
tick,0x7ffe67f8feb4,735172935,0,0x0,8
tick,0x7ffe67f8feb4,735188970,0,0x0,8
tick,0x7ffe67f8feb4,735204944,0,0x0,8
tick,0x7ffe67f8feb4,735220948,0,0x0,8
tick,0x7ffe67f8feb4,735236367,0,0x0,8
tick,0x7ffe67f8feb4,735252395,0,0x0,8
tick,0x7ffe67f8feb4,735268366,0,0x0,8
tick,0x7ffe67f8feb4,735284535,0,0x0,8
tick,0x7ffe67f8feb4,735300271,0,0x0,8
tick,0x7ffe67f8feb4,735316060,0,0x0,8
tick,0x7ffe67f8feb4,735331314,0,0x0,8
tick,0x7ffe67f8feb4,735346871,0,0x0,8
tick,0x7ffe67f8feb4,735362271,0,0x0,8
tick,0x7ffe67f8feb4,735378335,0,0x0,8
tick,0x7ffe67f8feb4,735393730,0,0x0,8
tick,0x7ffe67f8feb4,735409333,0,0x0,8
tick,0x7ffe67f8feb4,735425321,0,0x0,8
tick,0x7ffe67f8feb4,735441292,0,0x0,8
tick,0x7ffe67f8feb4,735457279,0,0x0,8
tick,0x7ffe67f8feb4,735473208,0,0x0,8
tick,0x7ffe67f8feb4,735488304,0,0x0,8
tick,0x7ffe67f8feb4,735503523,0,0x0,8
tick,0x7ffe67f8feb4,735519315,0,0x0,8
tick,0x7ffe67f8feb4,735535325,0,0x0,8
tick,0x7ffe67f8feb4,735551317,0,0x0,8
tick,0x7ffe67f8feb4,735567393,0,0x0,8
tick,0x7ffe67f8feb4,735583372,0,0x0,8
tick,0x7ffe67f8feb4,735599351,0,0x0,8
tick,0x7ffe67f8feb4,735615355,0,0x0,8
tick,0x7ffe67f8feb4,735631412,0,0x0,8
tick,0x7ffe67f8feb4,735647350,0,0x0,8
tick,0x7ffe67f8feb4,735662336,0,0x0,8
tick,0x7ffe67f8feb4,735678118,0,0x0,8
tick,0x7ffe67f8feb4,735693347,0,0x0,8
tick,0x7ffe67f8feb4,735709447,0,0x0,8
tick,0x7ffe67f8feb4,735725360,0,0x0,8
tick,0x7ffe67f8feb4,735741325,0,0x0,8
tick,0x7ffe67f8feb4,735756356,0,0x0,8
tick,0x7ffe67f8feb4,735772319,0,0x0,8
tick,0x7ffe67f8feb4,735788314,0,0x0,8
tick,0x7ffe67f8feb4,735804304,0,0x0,8
tick,0x7ffe67f8feb4,735819305,0,0x0,8
tick,0x7ffe67f8feb4,735835329,0,0x0,8
tick,0x7ffe67f8feb4,735851398,0,0x0,8
tick,0x7ffe67f8feb4,735866333,0,0x0,8
tick,0x7ffe67f8feb4,735882380,0,0x0,8
tick,0x7ffe67f8feb4,735898428,0,0x0,8
tick,0x7ffe67f8feb4,735914389,0,0x0,8
tick,0x7ffe67f8feb4,735930382,0,0x0,8
tick,0x7ffe67f8feb4,735946435,0,0x0,8
tick,0x7ffe67f8feb4,735962401,0,0x0,8
tick,0x7ffe67f8feb4,735978393,0,0x0,8
tick,0x7ffe67f8feb4,735993784,0,0x0,8
tick,0x7ffe67f8feb4,736009381,0,0x0,8
tick,0x7ffe67f8feb4,736025137,0,0x0,8
tick,0x7ffe67f8feb4,736040340,0,0x0,8
tick,0x7ffe67f8feb4,736056347,0,0x0,8
tick,0x7ffe67f8feb4,736072346,0,0x0,8
tick,0x7ffe67f8feb4,736088430,0,0x0,8
tick,0x7ffe67f8feb4,736104489,0,0x0,8
tick,0x7ffe67f8feb4,736119779,0,0x0,8
tick,0x7ffe67f8feb4,736135420,0,0x0,8
tick,0x7ffe67f8feb4,736151101,0,0x0,8
tick,0x7ffe67f8feb4,736167210,0,0x0,8
tick,0x7ffe67f8feb4,736182528,0,0x0,8
tick,0x7ffe67f8feb4,736198532,0,0x0,8
tick,0x7ffe67f8feb4,736214110,0,0x0,8
tick,0x7ffe67f8feb4,736230116,0,0x0,8
tick,0x7ffe67f8feb4,736245411,0,0x0,8
tick,0x7ffe67f8feb4,736261416,0,0x0,8
tick,0x7ffe67f8feb4,736277447,0,0x0,8
tick,0x7ffe67f8feb4,736293424,0,0x0,8
tick,0x7ffe67f8feb4,736309416,0,0x0,8
tick,0x7ffe67f8feb4,736325419,0,0x0,8
tick,0x7ffe67f8feb4,736341421,0,0x0,8
tick,0x7ffe67f8feb4,736356433,0,0x0,8
tick,0x7ffe67f8feb4,736372432,0,0x0,8
tick,0x7ffe67f8feb4,736388431,0,0x0,8
tick,0x7ffe67f8feb4,736404035,0,0x0,8
tick,0x7ffe67f8feb4,736419469,0,0x0,8
tick,0x7ffe67f8feb4,736435471,0,0x0,8
tick,0x7ffe67f8feb4,736451077,0,0x0,8
tick,0x7ffe67f8feb4,736466492,0,0x0,8
tick,0x7ffe67f8feb4,736482580,0,0x0,8
tick,0x7ffe67f8feb4,736498479,0,0x0,8
tick,0x7ffe67f8feb4,736513343,0,0x0,8
tick,0x7ffe67f8feb4,736529328,0,0x0,8
tick,0x7ffe67f8feb4,736544503,0,0x0,8
tick,0x7ffe67f8feb4,736560471,0,0x0,8
tick,0x7ffe67f8feb4,736576294,0,0x0,8
tick,0x7ffe67f8feb4,736591473,0,0x0,8
tick,0x7ffe67f8feb4,736607252,0,0x0,8
tick,0x7ffe67f8feb4,736622477,0,0x0,8
tick,0x7ffe67f8feb4,736638035,0,0x0,8
tick,0x7ffe67f8feb4,736653479,0,0x0,8
tick,0x7ffe67f8feb4,736669483,0,0x0,8
tick,0x7ffe67f8feb4,736685510,0,0x0,8
tick,0x7ffe67f8feb4,736701513,0,0x0,8
tick,0x7ffe67f8feb4,736716523,0,0x0,8
tick,0x7ffe67f8feb4,736732515,0,0x0,8
tick,0x7ffe67f8feb4,736748542,0,0x0,8
tick,0x7ffe67f8feb4,736764326,0,0x0,8
tick,0x7ffe67f8feb4,736779599,0,0x0,8
tick,0x7ffe67f8feb4,736795334,0,0x0,8
tick,0x7ffe67f8feb4,736811325,0,0x0,8
tick,0x7ffe67f8feb4,736827348,0,0x0,8
tick,0x7ffe67f8feb4,736843443,0,0x0,8
tick,0x7ffe67f8feb4,736859364,0,0x0,8
tick,0x7ffe67f8feb4,736874505,0,0x0,8
tick,0x7ffe67f8feb4,736890522,0,0x0,8
tick,0x7ffe67f8feb4,736906378,0,0x0,8
tick,0x7ffe67f8feb4,736921570,0,0x0,8
tick,0x7ffe67f8feb4,736937530,0,0x0,8
tick,0x7ffe67f8feb4,736952835,0,0x0,8
tick,0x7ffe67f8feb4,736968527,0,0x0,8
tick,0x7ffe67f8feb4,736984131,0,0x0,8
tick,0x7ffe67f8feb4,736999794,0,0x0,8
tick,0x7ffe67f8feb4,737015850,0,0x0,8
tick,0x7ffe67f8feb4,737031354,0,0x0,8
tick,0x7ffe67f8feb4,737047474,0,0x0,8
tick,0x7ffe67f8feb4,737062941,0,0x0,8
tick,0x7ffe67f8feb4,737077787,0,0x0,8
tick,0x7ffe67f8feb4,737093032,0,0x0,8
tick,0x7ffe67f8feb4,737108837,0,0x0,8
tick,0x7ffe67f8feb4,737124505,0,0x0,8
tick,0x7ffe67f8feb4,737139199,0,0x0,8
tick,0x7ffe67f8feb4,737154734,0,0x0,8
tick,0x7ffe67f8feb4,737170035,0,0x0,8
tick,0x7ffe67f8feb4,737184933,0,0x0,8
tick,0x7ffe67f8feb4,737200778,0,0x0,8
tick,0x7ffe67f8feb4,737216802,0,0x0,8
tick,0x7ffe67f8feb4,737232467,0,0x0,8
tick,0x7ffe67f8feb4,737247649,0,0x0,8
tick,0x7ffe67f8feb4,737263156,0,0x0,8
tick,0x7ffe67f8feb4,737278795,0,0x0,8
tick,0x7ffe67f8feb4,737294915,0,0x0,8
tick,0x7ffe67f8feb4,737310476,0,0x0,8
tick,0x7ffe67f8feb4,737326164,0,0x0,8
tick,0x7ffe67f8feb4,737341927,0,0x0,8
tick,0x7ffe67f8feb4,737357598,0,0x0,8
tick,0x7ffe67f8feb4,737373112,0,0x0,8
tick,0x7ffe67f8feb4,737388202,0,0x0,8
tick,0x7ffe67f8feb4,737404564,0,0x0,8
tick,0x7ffe67f8feb4,737420260,0,0x0,8
tick,0x7ffe67f8feb4,737435018,0,0x0,8
tick,0x7ffe67f8feb4,737451060,0,0x0,8
tick,0x7ffe67f8feb4,737466288,0,0x0,8
tick,0x7ffe67f8feb4,737481969,0,0x0,8
tick,0x7ffe67f8feb4,737497771,0,0x0,8
tick,0x7ffe67f8feb4,737513552,0,0x0,8
tick,0x7ffe67f8feb4,737529096,0,0x0,8
tick,0x7ffe67f8feb4,737545120,0,0x0,8
tick,0x7ffe67f8feb4,737560859,0,0x0,8
tick,0x7ffe67f8feb4,737577157,0,0x0,8
tick,0x7ffe67f8feb4,737592894,0,0x0,8
tick,0x7ffe67f8feb4,737608741,0,0x0,8
tick,0x7ffe67f8feb4,737624630,0,0x0,8
tick,0x7ffe67f8feb4,737640482,0,0x0,8
tick,0x7ffe67f8feb4,737656347,0,0x0,8
tick,0x7ffe67f8feb4,737672642,0,0x0,8
tick,0x7ffe67f8feb4,737687756,0,0x0,8
tick,0x7ffe67f8feb4,737703488,0,0x0,8
tick,0x7ffe67f8feb4,737719630,0,0x0,8
tick,0x7ffe67f8feb4,737735430,0,0x0,8
tick,0x7ffe67f8feb4,737751271,0,0x0,8
tick,0x7ffe67f8feb4,737767422,0,0x0,8
tick,0x7ffe67f8feb4,737782963,0,0x0,8
tick,0x7ffe67f8feb4,737798036,0,0x0,8
tick,0x7ffe67f8feb4,737814041,0,0x0,8
tick,0x7ffe67f8feb4,737830000,0,0x0,8
tick,0x7ffe67f8feb4,737845163,0,0x0,8
tick,0x7ffe67f8feb4,737861343,0,0x0,8
tick,0x7ffe67f8feb4,737877535,0,0x0,8
tick,0x7ffe67f8feb4,737893521,0,0x0,8
tick,0x7ffe67f8feb4,737909520,0,0x0,8
tick,0x7ffe67f8feb4,737925530,0,0x0,8
tick,0x7ffe67f8feb4,737941397,0,0x0,8
tick,0x7ffe67f8feb4,737956667,0,0x0,8
tick,0x7ffe67f8feb4,737972165,0,0x0,8
tick,0x7ffe67f8feb4,737987434,0,0x0,8
tick,0x7ffe67f8feb4,738003060,0,0x0,8
tick,0x7ffe67f8feb4,738018534,0,0x0,8
tick,0x7ffe67f8feb4,738034531,0,0x0,8
tick,0x7ffe67f8feb4,738049856,0,0x0,8
tick,0x7ffe67f8feb4,738065590,0,0x0,8
tick,0x7ffe67f8feb4,738080744,0,0x0,8
tick,0x7ffe67f8feb4,738096404,0,0x0,8
tick,0x7ffe67f8feb4,738112329,0,0x0,8
tick,0x7ffe67f8feb4,738127270,0,0x0,8
tick,0x7ffe67f8feb4,738142739,0,0x0,8
tick,0x7ffe67f8feb4,738158235,0,0x0,8
tick,0x7ffe67f8feb4,738173984,0,0x0,8
tick,0x7ffe67f8feb4,738189197,0,0x0,8
tick,0x7ffe67f8feb4,738204803,0,0x0,8
tick,0x7ffe67f8feb4,738220460,0,0x0,8
tick,0x7ffe67f8feb4,738235824,0,0x0,8
tick,0x7ffe67f8feb4,738251838,0,0x0,8
tick,0x7ffe67f8feb4,738267042,0,0x0,8
tick,0x7ffe67f8feb4,738283520,0,0x0,8
tick,0x7ffe67f8feb4,738298136,0,0x0,8
tick,0x7ffe67f8feb4,738313023,0,0x0,8
tick,0x7ffe67f8feb4,738328228,0,0x0,8
tick,0x7ffe67f8feb4,738343780,0,0x0,8
tick,0x7ffe67f8feb4,738359597,0,0x0,8
tick,0x7ffe67f8feb4,738375089,0,0x0,8
tick,0x7ffe67f8feb4,738391141,0,0x0,8
tick,0x7ffe67f8feb4,738406700,0,0x0,8
tick,0x7ffe67f8feb4,738422518,0,0x0,8
tick,0x7ffe67f8feb4,738438049,0,0x0,8
tick,0x7ffe67f8feb4,738453266,0,0x0,8
tick,0x7ffe67f8feb4,738469077,0,0x0,8
tick,0x7ffe67f8feb4,738484785,0,0x0,8
tick,0x7ffe67f8feb4,738499816,0,0x0,8
tick,0x7ffe67f8feb4,738515802,0,0x0,8
tick,0x7ffe67f8feb4,738530918,0,0x0,8
tick,0x7ffe67f8feb4,738546803,0,0x0,8
tick,0x7ffe67f8feb4,738562766,0,0x0,8
tick,0x7ffe67f8feb4,738578786,0,0x0,8
tick,0x7ffe67f8feb4,738594715,0,0x0,8
tick,0x7ffe67f8feb4,738610801,0,0x0,8
tick,0x7ffe67f8feb4,738626747,0,0x0,8
tick,0x7ffe67f8feb4,738642750,0,0x0,8
tick,0x7ffe67f8feb4,738658746,0,0x0,8
tick,0x7ffe67f8feb4,738674807,0,0x0,8
tick,0x7ffe67f8feb4,738690790,0,0x0,8
tick,0x7ffe67f8feb4,738705924,0,0x0,8
tick,0x7ffe67f8feb4,738721824,0,0x0,8
tick,0x7ffe67f8feb4,738737815,0,0x0,8
tick,0x7ffe67f8feb4,738753809,0,0x0,8
tick,0x7ffe67f8feb4,738769531,0,0x0,8
tick,0x7ffe67f8feb4,738784817,0,0x0,8
tick,0x7ffe67f8feb4,738800815,0,0x0,8
tick,0x7ffe67f8feb4,738816800,0,0x0,8
tick,0x7ffe67f8feb4,738832801,0,0x0,8
tick,0x7ffe67f8feb4,738859249,0,0x0,8
tick,0x7ffe67f8feb4,738865512,0,0x0,8
tick,0x7ffe67f8feb4,738881006,0,0x0,8
tick,0x7ffe67f8feb4,738896855,0,0x0,8
tick,0x7ffe67f8feb4,738911954,0,0x0,8
tick,0x7ffe67f8feb4,738927826,0,0x0,8
tick,0x7ffe67f8feb4,738942867,0,0x0,8
tick,0x7ffe67f8feb4,738958874,0,0x0,8
tick,0x7ffe67f8feb4,738974036,0,0x0,8
tick,0x7ffe67f8feb4,738989835,0,0x0,8
tick,0x7ffe67f8feb4,739005847,0,0x0,8
tick,0x7ffe67f8feb4,739021860,0,0x0,8
tick,0x7ffe67f8feb4,739037845,0,0x0,8
tick,0x7ffe67f8feb4,739053879,0,0x0,8
tick,0x7ffe67f8feb4,739069871,0,0x0,8
tick,0x7ffe67f8feb4,739085908,0,0x0,8
tick,0x7ffe67f8feb4,739101882,0,0x0,8
tick,0x7ffe67f8feb4,739118258,0,0x0,8
tick,0x7ffe67f8feb4,739133847,0,0x0,8
tick,0x7ffe67f8feb4,739149871,0,0x0,8
tick,0x7ffe67f8feb4,739165870,0,0x0,8
tick,0x7ffe67f8feb4,739181850,0,0x0,8
tick,0x7ffe67f8feb4,739197857,0,0x0,8
tick,0x7ffe67f8feb4,739213859,0,0x0,8
tick,0x7ffe67f8feb4,739229872,0,0x0,8
tick,0x7ffe67f8feb4,739245864,0,0x0,8
tick,0x7ffe67f8feb4,739261861,0,0x0,8
tick,0x7ffe67f8feb4,739277884,0,0x0,8
tick,0x7ffe67f8feb4,739293874,0,0x0,8
tick,0x7ffe67f8feb4,739309822,0,0x0,8
tick,0x7ffe67f8feb4,739325171,0,0x0,8
tick,0x7ffe67f8feb4,739340513,0,0x0,8
tick,0x7ffe67f8feb4,739355922,0,0x0,8
tick,0x7ffe67f8feb4,739371942,0,0x0,8
tick,0x7ffe67f8feb4,739388512,0,0x0,8
tick,0x7ffe67f8feb4,739404163,0,0x0,8
tick,0x7ffe67f8feb4,739420802,0,0x0,8
tick,0x7ffe67f8feb4,739437037,0,0x0,8
tick,0x7ffe67f8feb4,739453815,0,0x0,8
tick,0x7ffe67f8feb4,739469019,0,0x0,8
tick,0x7ffe67f8feb4,739484008,0,0x0,8
tick,0x7ffe67f8feb4,739499074,0,0x0,8
tick,0x7ffe67f8feb4,739514450,0,0x0,8
tick,0x7ffe67f8feb4,739529946,0,0x0,8
tick,0x7ffe67f8feb4,739545703,0,0x0,8
tick,0x7ffe67f8feb4,739561738,0,0x0,8
tick,0x7ffe67f8feb4,739577733,0,0x0,8
tick,0x7ffe67f8feb4,739592956,0,0x0,8
tick,0x7ffe67f8feb4,739608971,0,0x0,8
tick,0x7ffe67f8feb4,739624994,0,0x0,8
tick,0x7ffe67f8feb4,739640969,0,0x0,8
tick,0x7ffe67f8feb4,739656935,0,0x0,8
tick,0x7ffe67f8feb4,739672984,0,0x0,8
tick,0x7ffe67f8feb4,739688944,0,0x0,8
tick,0x7ffe67f8feb4,739704952,0,0x0,8
tick,0x7ffe67f8feb4,739720975,0,0x0,8
tick,0x7ffe67f8feb4,739737294,0,0x0,8
tick,0x7ffe67f8feb4,739753045,0,0x0,8
tick,0x7ffe67f8feb4,739769038,0,0x0,8
tick,0x7ffe67f8feb4,739785351,0,0x0,8
tick,0x7ffe67f8feb4,739800948,0,0x0,8
tick,0x7ffe67f8feb4,739816960,0,0x0,8
tick,0x7ffe67f8feb4,739832948,0,0x0,8
tick,0x7ffe67f8feb4,739848987,0,0x0,8
tick,0x7ffe67f8feb4,739865056,0,0x0,8
tick,0x7ffe67f8feb4,739880825,0,0x0,8
tick,0x7ffe67f8feb4,739895990,0,0x0,8
tick,0x7ffe67f8feb4,739910850,0,0x0,8
tick,0x7ffe67f8feb4,739925970,0,0x0,8
tick,0x7ffe67f8feb4,739941981,0,0x0,8
tick,0x7ffe67f8feb4,739958013,0,0x0,8
tick,0x7ffe67f8feb4,739973996,0,0x0,8
tick,0x7ffe67f8feb4,739989984,0,0x0,8
tick,0x7ffe67f8feb4,740005255,0,0x0,8
tick,0x7ffe67f8feb4,740021056,0,0x0,8
tick,0x7ffe67f8feb4,740036956,0,0x0,8
tick,0x7ffe67f8feb4,740052966,0,0x0,8
tick,0x7ffe67f8feb4,740069031,0,0x0,8
tick,0x7ffe67f8feb4,740085830,0,0x0,8
tick,0x7ffe67f8feb4,740100013,0,0x0,8
tick,0x7ffe67f8feb4,740115988,0,0x0,8
tick,0x7ffe67f8feb4,740131134,0,0x0,8
tick,0x7ffe67f8feb4,740146750,0,0x0,8
tick,0x7ffe67f8feb4,740162692,0,0x0,8
tick,0x7ffe67f8feb4,740178669,0,0x0,8
tick,0x7ffe67f8feb4,740194025,0,0x0,8
tick,0x7ffe67f8feb4,740210007,0,0x0,8
tick,0x7ffe67f8feb4,740225000,0,0x0,8
tick,0x7ffe67f8feb4,740241080,0,0x0,8
tick,0x7ffe67f8feb4,740257018,0,0x0,8
tick,0x7ffe67f8feb4,740272742,0,0x0,8
tick,0x7ffe67f8feb4,740288072,0,0x0,8
tick,0x7ffe67f8feb4,740304109,0,0x0,8
tick,0x7ffe67f8feb4,740319914,0,0x0,8
tick,0x7ffe67f8feb4,740335420,0,0x0,8
tick,0x7ffe67f8feb4,740351137,0,0x0,8
tick,0x7ffe67f8feb4,740366559,0,0x0,8
tick,0x7ffe67f8feb4,740381532,0,0x0,8
tick,0x7ffe67f8feb4,740397015,0,0x0,8
tick,0x7ffe67f8feb4,740412332,0,0x0,8
tick,0x7ffe67f8feb4,740427862,0,0x0,8
tick,0x7ffe67f8feb4,740443401,0,0x0,8
tick,0x7ffe67f8feb4,740458568,0,0x0,8
tick,0x7ffe67f8feb4,740474046,0,0x0,8
tick,0x7ffe67f8feb4,740489379,0,0x0,8
tick,0x7ffe67f8feb4,740504737,0,0x0,8
tick,0x7ffe67f8feb4,740520736,0,0x0,8
tick,0x7ffe67f8feb4,740536799,0,0x0,8
tick,0x7ffe67f8feb4,740552260,0,0x0,8
tick,0x7ffe67f8feb4,740567972,0,0x0,8
tick,0x7ffe67f8feb4,740583128,0,0x0,8
tick,0x7ffe67f8feb4,740598348,0,0x0,8
tick,0x7ffe67f8feb4,740613785,0,0x0,8
tick,0x7ffe67f8feb4,740629801,0,0x0,8
tick,0x7ffe67f8feb4,740644992,0,0x0,8
tick,0x7ffe67f8feb4,740660798,0,0x0,8
tick,0x7ffe67f8feb4,740676424,0,0x0,8
tick,0x7ffe67f8feb4,740691915,0,0x0,8
tick,0x7ffe67f8feb4,740708011,0,0x0,8
tick,0x7ffe67f8feb4,740723455,0,0x0,8
tick,0x7ffe67f8feb4,740738999,0,0x0,8
tick,0x7ffe67f8feb4,740754028,0,0x0,8
tick,0x7ffe67f8feb4,740770036,0,0x0,8
tick,0x7ffe67f8feb4,740786237,0,0x0,8
tick,0x7ffe67f8feb4,740802068,0,0x0,8
tick,0x7ffe67f8feb4,740818071,0,0x0,8
tick,0x7ffe67f8feb4,740834072,0,0x0,8
tick,0x7ffe67f8feb4,740849174,0,0x0,8
tick,0x7ffe67f8feb4,740865158,0,0x0,8
tick,0x7ffe67f8feb4,740880618,0,0x0,8
tick,0x7ffe67f8feb4,740895649,0,0x0,8
tick,0x7ffe67f8feb4,740911496,0,0x0,8
tick,0x7ffe67f8feb4,740927086,0,0x0,8
tick,0x7ffe67f8feb4,740943087,0,0x0,8
tick,0x7ffe67f8feb4,740958309,0,0x0,8
tick,0x7ffe67f8feb4,740973741,0,0x0,8
tick,0x7ffe67f8feb4,740989863,0,0x0,8
tick,0x7ffe67f8feb4,741006952,0,0x0,8
tick,0x7ffe67f8feb4,741021604,0,0x0,8
tick,0x7ffe67f8feb4,741037286,0,0x0,8
tick,0x7ffe67f8feb4,741053412,0,0x0,8
tick,0x7ffe67f8feb4,741069137,0,0x0,8
tick,0x7ffe67f8feb4,741084937,0,0x0,8
tick,0x7ffe67f8feb4,741099913,0,0x0,8
tick,0x7ffe67f8feb4,741115990,0,0x0,8
tick,0x7ffe67f8feb4,741131083,0,0x0,8
tick,0x7ffe67f8feb4,741147898,0,0x0,8
tick,0x7ffe67f8feb4,741163530,0,0x0,8
tick,0x7ffe67f8feb4,741177810,0,0x0,8
tick,0x7ffe67f8feb4,741192806,0,0x0,8
tick,0x7ffe67f8feb4,741208145,0,0x0,8
tick,0x7ffe67f8feb4,741223530,0,0x0,8
tick,0x7ffe67f8feb4,741238970,0,0x0,8
tick,0x7ffe67f8feb4,741255002,0,0x0,8
tick,0x7ffe67f8feb4,741270638,0,0x0,8
tick,0x7ffe67f8feb4,741286648,0,0x0,8
tick,0x7ffe67f8feb4,741302724,0,0x0,8
tick,0x7ffe67f8feb4,741318814,0,0x0,8
tick,0x7ffe67f8feb4,741334295,0,0x0,8
tick,0x7ffe67f8feb4,741350332,0,0x0,8
tick,0x7ffe67f8feb4,741365633,0,0x0,8
tick,0x7ffe67f8feb4,741380653,0,0x0,8
tick,0x7ffe67f8feb4,741396075,0,0x0,8
tick,0x7ffe67f8feb4,741411508,0,0x0,8
tick,0x7ffe67f8feb4,741426987,0,0x0,8
tick,0x7ffe67f8feb4,741442943,0,0x0,8
tick,0x7ffe67f8feb4,741458008,0,0x0,8
tick,0x7ffe67f8feb4,741472944,0,0x0,8
tick,0x7ffe67f8feb4,741488066,0,0x0,8
tick,0x7ffe67f8feb4,741503558,0,0x0,8
tick,0x7ffe67f8feb4,741519551,0,0x0,8
tick,0x7ffe67f8feb4,741535584,0,0x0,8
tick,0x7ffe67f8feb4,741551646,0,0x0,8
tick,0x7ffe67f8feb4,741567597,0,0x0,8
tick,0x7ffe67f8feb4,741582563,0,0x0,8
tick,0x7ffe67f8feb4,741598698,0,0x0,8
tick,0x7ffe67f8feb4,741614567,0,0x0,8
tick,0x7ffe67f8feb4,741630560,0,0x0,8
tick,0x7ffe67f8feb4,741645582,0,0x0,8
tick,0x7ffe67f8feb4,741661571,0,0x0,8
tick,0x7ffe67f8feb4,741677575,0,0x0,8
tick,0x7ffe67f8feb4,741694142,0,0x0,8
tick,0x7ffe67f8feb4,741708637,0,0x0,8
tick,0x7ffe67f8feb4,741724601,0,0x0,8
tick,0x7ffe67f8feb4,741740814,0,0x0,8
tick,0x7ffe67f8feb4,741757330,0,0x0,8
tick,0x7ffe67f8feb4,741772583,0,0x0,8
tick,0x7ffe67f8feb4,741788591,0,0x0,8
tick,0x7ffe67f8feb4,741805658,0,0x0,8
tick,0x7ffe67f8feb4,741821032,0,0x0,8
tick,0x7ffe67f8feb4,741836627,0,0x0,8
tick,0x7ffe67f8feb4,741857451,0,0x0,8
tick,0x7ffe67f8feb4,741868698,0,0x0,8
tick,0x7ffe67f8feb4,741884696,0,0x0,8
tick,0x7ffe67f8feb4,741900707,0,0x0,8
tick,0x7ffe67f8feb4,741916647,0,0x0,8
tick,0x7ffe67f8feb4,741932759,0,0x0,8
tick,0x7ffe67f8feb4,741949020,0,0x0,8
tick,0x7ffe67f8feb4,741964900,0,0x0,8
tick,0x7ffe67f8feb4,741980791,0,0x0,8
tick,0x7ffe67f8feb4,741996709,0,0x0,8
tick,0x7ffe67f8feb4,742012655,0,0x0,8
tick,0x7ffe67f8feb4,742029350,0,0x0,8
tick,0x7ffe67f8feb4,742045046,0,0x0,8
tick,0x7ffe67f8feb4,742060757,0,0x0,8
tick,0x7ffe67f8feb4,742078328,0,0x0,8
tick,0x7ffe67f8feb4,742092902,0,0x0,8
tick,0x7ffe67f8feb4,742109285,0,0x0,8
tick,0x7ffe67f8feb4,742125305,0,0x0,8
tick,0x7ffe67f8feb4,742141098,0,0x0,8
tick,0x7ffe67f8feb4,742156780,0,0x0,8
tick,0x7ffe67f8feb4,742172996,0,0x0,8
tick,0x7ffe67f8feb4,742188985,0,0x0,8
tick,0x7ffe67f8feb4,742206990,0,0x0,8
tick,0x7ffe67f8feb4,742221009,0,0x0,8
tick,0x7ffe67f8feb4,742238120,0,0x0,8
tick,0x7ffe67f8feb4,742252713,0,0x0,8
tick,0x7ffe67f8feb4,742268767,0,0x0,8
tick,0x7ffe67f8feb4,742284615,0,0x0,8
tick,0x7ffe67f8feb4,742300629,0,0x0,8
tick,0x7ffe67f8feb4,742316951,0,0x0,8
tick,0x7ffe67f8feb4,742332666,0,0x0,8
tick,0x7ffe67f8feb4,742348634,0,0x0,8
tick,0x7ffe67f8feb4,742364624,0,0x0,8
tick,0x7ffe67f8feb4,742380609,0,0x0,8
tick,0x7ffe67f8feb4,742403492,0,0x0,8
tick,0x7ffe67f8feb4,742413129,0,0x0,8
tick,0x7ffe67f8feb4,742428720,0,0x0,8
tick,0x7ffe67f8feb4,742445791,0,0x0,8
tick,0x7ffe67f8feb4,742460640,0,0x0,8
tick,0x7ffe67f8feb4,742476619,0,0x0,8
tick,0x7ffe67f8feb4,742492633,0,0x0,8
tick,0x7ffe67f8feb4,742508777,0,0x0,8
tick,0x7ffe67f8feb4,742524674,0,0x0,8
tick,0x7ffe67f8feb4,742540433,0,0x0,8
tick,0x7ffe67f8feb4,742556434,0,0x0,8
tick,0x7ffe67f8feb4,742573174,0,0x0,8
tick,0x7ffe67f8feb4,742588459,0,0x0,8
tick,0x7ffe67f8feb4,742604620,0,0x0,8
tick,0x7ffe67f8feb4,742620442,0,0x0,8
tick,0x7ffe67f8feb4,742635786,0,0x0,8
tick,0x7ffe67f8feb4,742651129,0,0x0,8
tick,0x7ffe67f8feb4,742666556,0,0x0,8
tick,0x7ffe67f8feb4,742682148,0,0x0,8
tick,0x7ffe67f8feb4,742697506,0,0x0,8
tick,0x7ffe67f8feb4,742713433,0,0x0,8
tick,0x7ffe67f8feb4,742729397,0,0x0,8
tick,0x7ffe67f8feb4,742745401,0,0x0,8
tick,0x7ffe67f8feb4,742761398,0,0x0,8
tick,0x7ffe67f8feb4,742777398,0,0x0,8
tick,0x7ffe67f8feb4,742793408,0,0x0,8
tick,0x7ffe67f8feb4,742809418,0,0x0,8
tick,0x7ffe67f8feb4,742825429,0,0x0,8
tick,0x7ffe67f8feb4,742841416,0,0x0,8
tick,0x7ffe67f8feb4,742857415,0,0x0,8
tick,0x7ffe67f8feb4,742873401,0,0x0,8
tick,0x7ffe67f8feb4,742889409,0,0x0,8
tick,0x7ffe67f8feb4,742905427,0,0x0,8
tick,0x7ffe67f8feb4,742921397,0,0x0,8
tick,0x7ffe67f8feb4,742937174,0,0x0,8
tick,0x7ffe67f8feb4,742953305,0,0x0,8
tick,0x7ffe67f8feb4,742969036,0,0x0,8
tick,0x7ffe67f8feb4,742983989,0,0x0,8
tick,0x7ffe67f8feb4,743000022,0,0x0,8
tick,0x7ffe67f8feb4,743016277,0,0x0,8
tick,0x7ffe67f8feb4,743031989,0,0x0,8
tick,0x7ffe67f8feb4,743048116,0,0x0,8
tick,0x7ffe67f8feb4,743064064,0,0x0,8
tick,0x7ffe67f8feb4,743080025,0,0x0,8
tick,0x7ffe67f8feb4,743096003,0,0x0,8
tick,0x7ffe67f8feb4,743112008,0,0x0,8
tick,0x7ffe67f8feb4,743128020,0,0x0,8
tick,0x7ffe67f8feb4,743144179,0,0x0,8
tick,0x7ffe67f8feb4,743159992,0,0x0,8
tick,0x7ffe67f8feb4,743175988,0,0x0,8
tick,0x7ffe67f8feb4,743191965,0,0x0,8
tick,0x7ffe67f8feb4,743207958,0,0x0,8
tick,0x7ffe67f8feb4,743223987,0,0x0,8
tick,0x7ffe67f8feb4,743239977,0,0x0,8
tick,0x7ffe67f8feb4,743255249,0,0x0,8
tick,0x7ffe67f8feb4,743271230,0,0x0,8
tick,0x7ffe67f8feb4,743287053,0,0x0,8
tick,0x7ffe67f8feb4,743302925,0,0x0,8
tick,0x7ffe67f8feb4,743318941,0,0x0,8
tick,0x7ffe67f8feb4,743334938,0,0x0,8
tick,0x7ffe67f8feb4,743350978,0,0x0,8
tick,0x7ffe67f8feb4,743366970,0,0x0,8
tick,0x7ffe67f8feb4,743387090,0,0x0,8
tick,0x7ffe67f8feb4,743401275,0,0x0,8
tick,0x7ffe67f8feb4,743414985,0,0x0,8
tick,0x7ffe67f8feb4,743431061,0,0x0,8
tick,0x7ffe67f8feb4,743446966,0,0x0,8
tick,0x7ffe67f8feb4,743462970,0,0x0,8
tick,0x7ffe67f8feb4,743478520,0,0x0,8
tick,0x7ffe67f8feb4,743494519,0,0x0,8
tick,0x7ffe67f8feb4,743510216,0,0x0,8
tick,0x7ffe67f8feb4,743525777,0,0x0,8
tick,0x7ffe67f8feb4,743541707,0,0x0,8
tick,0x7ffe67f8feb4,743557864,0,0x0,8
tick,0x7ffe67f8feb4,743573725,0,0x0,8
tick,0x7ffe67f8feb4,743589737,0,0x0,8
tick,0x7ffe67f8feb4,743605879,0,0x0,8
tick,0x7ffe67f8feb4,743621716,0,0x0,8
tick,0x7ffe67f8feb4,743643421,0,0x0,8
tick,0x7ffe67f8feb4,743667543,0,0x0,8
tick,0x7ffe67f8feb4,743671460,0,0x0,8
tick,0x7ffe67f8feb4,743700283,0,0x0,8
tick,0x7ffe67f8feb4,743702060,0,0x0,8
tick,0x7ffe67f8feb4,743718554,0,0x0,8
tick,0x7ffe67f8feb4,743733757,0,0x0,8
tick,0x7ffe67f8feb4,743749827,0,0x0,8
tick,0x7ffe67f8feb4,743765715,0,0x0,8
tick,0x7ffe67f8feb4,743781715,0,0x0,8
tick,0x7ffe67f8feb4,743798192,0,0x0,8
tick,0x7ffe67f8feb4,743813779,0,0x0,8
tick,0x7ffe67f8feb4,743830639,0,0x0,8
tick,0x7ffe67f8feb4,743845739,0,0x0,8
tick,0x7ffe67f8feb4,743864408,0,0x0,8
tick,0x7ffe67f8feb4,743877808,0,0x0,8
tick,0x7ffe67f8feb4,743893805,0,0x0,8
tick,0x7ffe67f8feb4,743909758,0,0x0,8
tick,0x7ffe67f8feb4,743925722,0,0x0,8
tick,0x7ffe67f8feb4,743942624,0,0x0,8
tick,0x7ffe67f8feb4,743957787,0,0x0,8
tick,0x7ffe67f8feb4,743973726,0,0x0,8
tick,0x7ffe67f8feb4,743990892,0,0x0,8
tick,0x7ffe67f8feb4,744004850,0,0x0,8
tick,0x7ffe67f8feb4,744020972,0,0x0,8
tick,0x7ffe67f8feb4,744036932,0,0x0,8
tick,0x7ffe67f8feb4,744053012,0,0x0,8
tick,0x7ffe67f8feb4,744070862,0,0x0,8
tick,0x7ffe67f8feb4,744085710,0,0x0,8
tick,0x7ffe67f8feb4,744113854,0,0x0,8
tick,0x7ffe67f8feb4,744118959,0,0x0,8
tick,0x7ffe67f8feb4,744134214,0,0x0,8
tick,0x7ffe67f8feb4,744147848,0,0x0,8
tick,0x7ffe67f8feb4,744163872,0,0x0,8
tick,0x7ffe67f8feb4,744180058,0,0x0,8
tick,0x7ffe67f8feb4,744195889,0,0x0,8
tick,0x7ffe67f8feb4,744211873,0,0x0,8
tick,0x7ffe67f8feb4,744227856,0,0x0,8
tick,0x7ffe67f8feb4,744243800,0,0x0,8
tick,0x7ffe67f8feb4,744259750,0,0x0,8
tick,0x7ffe67f8feb4,744275797,0,0x0,8
tick,0x7ffe67f8feb4,744291810,0,0x0,8
tick,0x7ffe67f8feb4,744307757,0,0x0,8
tick,0x7ffe67f8feb4,744323757,0,0x0,8
tick,0x7ffe67f8feb4,744339758,0,0x0,8
tick,0x7ffe67f8feb4,744355784,0,0x0,8
tick,0x7ffe67f8feb4,744371928,0,0x0,8
tick,0x7ffe67f8feb4,744387899,0,0x0,8
tick,0x7ffe67f8feb4,744403833,0,0x0,8
tick,0x7ffe67f8feb4,744419837,0,0x0,8
tick,0x7ffe67f8feb4,744435801,0,0x0,8
tick,0x7ffe67f8feb4,744451760,0,0x0,8
tick,0x7ffe67f8feb4,744467777,0,0x0,8
tick,0x7ffe67f8feb4,744483756,0,0x0,8
tick,0x7ffe67f8feb4,744499812,0,0x0,8
tick,0x7ffe67f8feb4,744515765,0,0x0,8
tick,0x7ffe67f8feb4,744531779,0,0x0,8
tick,0x7ffe67f8feb4,744547761,0,0x0,8
tick,0x7ffe67f8feb4,744563897,0,0x0,8
tick,0x7ffe67f8feb4,744579764,0,0x0,8
tick,0x7ffe67f8feb4,744595761,0,0x0,8
tick,0x7ffe67f8feb4,744611798,0,0x0,8
tick,0x7ffe67f8feb4,744627772,0,0x0,8
tick,0x7ffe67f8feb4,744643803,0,0x0,8
tick,0x7ffe67f8feb4,744659789,0,0x0,8
tick,0x7ffe67f8feb4,744675790,0,0x0,8
tick,0x7ffe67f8feb4,744691817,0,0x0,8
tick,0x7ffe67f8feb4,744707797,0,0x0,8
tick,0x7ffe67f8feb4,744723832,0,0x0,8
tick,0x7ffe67f8feb4,744739818,0,0x0,8
tick,0x7ffe67f8feb4,744755784,0,0x0,8
tick,0x7ffe67f8feb4,744771813,0,0x0,8
tick,0x7ffe67f8feb4,744787795,0,0x0,8
tick,0x7ffe67f8feb4,744803790,0,0x0,8
tick,0x7ffe67f8feb4,744819792,0,0x0,8
tick,0x7ffe67f8feb4,744835785,0,0x0,8
tick,0x7ffe67f8feb4,744851805,0,0x0,8
tick,0x7ffe67f8feb4,744867786,0,0x0,8
tick,0x7ffe67f8feb4,744883796,0,0x0,8
tick,0x7ffe67f8feb4,744899810,0,0x0,8
tick,0x7ffe67f8feb4,744915802,0,0x0,8
tick,0x7ffe67f8feb4,744931796,0,0x0,8
tick,0x7ffe67f8feb4,744947802,0,0x0,8
tick,0x7ffe67f8feb4,744963791,0,0x0,8
tick,0x7ffe67f8feb4,744979796,0,0x0,8
tick,0x7ffe67f8feb4,744995843,0,0x0,8
tick,0x7ffe67f8feb4,745011804,0,0x0,8
tick,0x7ffe67f8feb4,745027814,0,0x0,8
tick,0x7ffe67f8feb4,745043820,0,0x0,8
tick,0x7ffe67f8feb4,745059811,0,0x0,8
tick,0x7ffe67f8feb4,745075814,0,0x0,8
tick,0x7ffe67f8feb4,745091839,0,0x0,8
tick,0x7ffe67f8feb4,745107809,0,0x0,8
tick,0x7ffe67f8feb4,745123251,0,0x0,8
tick,0x7ffe67f8feb4,745138858,0,0x0,8
tick,0x7ffe67f8feb4,745154903,0,0x0,8
tick,0x7ffe67f8feb4,745170903,0,0x0,8
tick,0x7ffe67f8feb4,745185941,0,0x0,8
tick,0x7ffe67f8feb4,745201937,0,0x0,8
tick,0x7ffe67f8feb4,745217939,0,0x0,8
tick,0x7ffe67f8feb4,745233954,0,0x0,8
tick,0x7ffe67f8feb4,745249951,0,0x0,8
tick,0x7ffe67f8feb4,745265952,0,0x0,8
tick,0x7ffe67f8feb4,745282231,0,0x0,8
tick,0x7ffe67f8feb4,745298333,0,0x0,8
tick,0x7ffe67f8feb4,745314370,0,0x0,8
tick,0x7ffe67f8feb4,745329663,0,0x0,8
tick,0x7ffe67f8feb4,745345261,0,0x0,8
tick,0x7ffe67f8feb4,745360241,0,0x0,8
tick,0x7ffe67f8feb4,745375479,0,0x0,8
tick,0x7ffe67f8feb4,745391431,0,0x0,8
tick,0x7ffe67f8feb4,745407259,0,0x0,8
tick,0x7ffe67f8feb4,745422795,0,0x0,8
tick,0x7ffe67f8feb4,745438751,0,0x0,8
tick,0x7ffe67f8feb4,745454771,0,0x0,8
tick,0x7ffe67f8feb4,745470070,0,0x0,8
tick,0x7ffe67f8feb4,745485638,0,0x0,8
tick,0x7ffe67f8feb4,745501266,0,0x0,8
tick,0x7ffe67f8feb4,745516874,0,0x0,8
tick,0x7ffe67f8feb4,745532614,0,0x0,8
tick,0x7ffe67f8feb4,745548654,0,0x0,8
tick,0x7ffe67f8feb4,745563905,0,0x0,8
tick,0x7ffe67f8feb4,745579317,0,0x0,8
tick,0x7ffe67f8feb4,745595173,0,0x0,8
tick,0x7ffe67f8feb4,745610873,0,0x0,8
tick,0x7ffe67f8feb4,745626265,0,0x0,8
tick,0x7ffe67f8feb4,745641936,0,0x0,8
tick,0x7ffe67f8feb4,745657905,0,0x0,8
tick,0x7ffe67f8feb4,745673198,0,0x0,8
tick,0x7ffe67f8feb4,745689345,0,0x0,8
tick,0x7ffe67f8feb4,745705668,0,0x0,8
tick,0x7ffe67f8feb4,745721504,0,0x0,8
tick,0x7ffe67f8feb4,745736977,0,0x0,8
tick,0x7ffe67f8feb4,745752641,0,0x0,8
tick,0x7ffe67f8feb4,745768559,0,0x0,8
tick,0x7ffe67f8feb4,745784215,0,0x0,8
tick,0x7ffe67f8feb4,745800137,0,0x0,8
tick,0x7ffe67f8feb4,745816010,0,0x0,8
tick,0x7ffe67f8feb4,745832098,0,0x0,8
tick,0x7ffe67f8feb4,745847741,0,0x0,8
tick,0x7ffe67f8feb4,745863768,0,0x0,8
tick,0x7ffe67f8feb4,745879763,0,0x0,8
tick,0x7ffe67f8feb4,745895817,0,0x0,8
tick,0x7ffe67f8feb4,745910896,0,0x0,8
tick,0x7ffe67f8feb4,745927020,0,0x0,8
tick,0x7ffe67f8feb4,745942920,0,0x0,8
tick,0x7ffe67f8feb4,745958894,0,0x0,8
tick,0x7ffe67f8feb4,745974902,0,0x0,8
tick,0x7ffe67f8feb4,745991145,0,0x0,8
tick,0x7ffe67f8feb4,746006897,0,0x0,8
tick,0x7ffe67f8feb4,746021919,0,0x0,8
tick,0x7ffe67f8feb4,746037918,0,0x0,8
tick,0x7ffe67f8feb4,746053058,0,0x0,8
tick,0x7ffe67f8feb4,746068946,0,0x0,8
tick,0x7ffe67f8feb4,746084961,0,0x0,8
tick,0x7ffe67f8feb4,746100104,0,0x0,8
tick,0x7ffe67f8feb4,746115800,0,0x0,8
tick,0x7ffe67f8feb4,746130926,0,0x0,8
tick,0x7ffe67f8feb4,746146502,0,0x0,8
tick,0x7ffe67f8feb4,746162539,0,0x0,8
tick,0x7ffe67f8feb4,746178460,0,0x0,8
tick,0x7ffe67f8feb4,746193753,0,0x0,8
tick,0x7ffe67f8feb4,746209527,0,0x0,8
tick,0x7ffe67f8feb4,746224781,0,0x0,8
tick,0x7ffe67f8feb4,746239902,0,0x0,8
tick,0x7ffe67f8feb4,746255338,0,0x0,8
tick,0x7ffe67f8feb4,746271511,0,0x0,8
tick,0x7ffe67f8feb4,746287474,0,0x0,8
tick,0x7ffe67f8feb4,746303445,0,0x0,8
tick,0x7ffe67f8feb4,746319207,0,0x0,8
tick,0x7ffe67f8feb4,746335053,0,0x0,8
tick,0x7ffe67f8feb4,746351011,0,0x0,8
tick,0x7ffe67f8feb4,746367003,0,0x0,8
tick,0x7ffe67f8feb4,746382998,0,0x0,8
tick,0x7ffe67f8feb4,746398973,0,0x0,8
tick,0x7ffe67f8feb4,746414990,0,0x0,8
tick,0x7ffe67f8feb4,746430971,0,0x0,8
tick,0x7ffe67f8feb4,746446965,0,0x0,8
tick,0x7ffe67f8feb4,746462982,0,0x0,8
tick,0x7ffe67f8feb4,746478986,0,0x0,8
tick,0x7ffe67f8feb4,746494222,0,0x0,8
tick,0x7ffe67f8feb4,746510399,0,0x0,8
tick,0x7ffe67f8feb4,746526273,0,0x0,8
tick,0x7ffe67f8feb4,746543956,0,0x0,8
tick,0x7ffe67f8feb4,746558584,0,0x0,8
tick,0x7ffe67f8feb4,746573976,0,0x0,8
tick,0x7ffe67f8feb4,746589289,0,0x0,8
tick,0x7ffe67f8feb4,746605197,0,0x0,8
tick,0x7ffe67f8feb4,746620313,0,0x0,8
tick,0x7ffe67f8feb4,746635700,0,0x0,8
tick,0x7ffe67f8feb4,746651335,0,0x0,8
tick,0x7ffe67f8feb4,746666837,0,0x0,8
tick,0x7ffe67f8feb4,746682034,0,0x0,8
tick,0x7ffe67f8feb4,746698029,0,0x0,8
tick,0x7ffe67f8feb4,746714037,0,0x0,8
tick,0x7ffe67f8feb4,746729123,0,0x0,8
tick,0x7ffe67f8feb4,746744906,0,0x0,8
tick,0x7ffe67f8feb4,746760564,0,0x0,8
tick,0x7ffe67f8feb4,746776602,0,0x0,8
tick,0x7ffe67f8feb4,746792063,0,0x0,8
tick,0x7ffe67f8feb4,746807120,0,0x0,8
tick,0x7ffe67f8feb4,746823071,0,0x0,8
tick,0x7ffe67f8feb4,746839039,0,0x0,8
tick,0x7ffe67f8feb4,746855026,0,0x0,8
tick,0x7ffe67f8feb4,746871032,0,0x0,8
tick,0x7ffe67f8feb4,746887046,0,0x0,8
tick,0x7ffe67f8feb4,746903074,0,0x0,8
tick,0x7ffe67f8feb4,746919075,0,0x0,8
tick,0x7ffe67f8feb4,746935096,0,0x0,8
tick,0x7ffe67f8feb4,746951100,0,0x0,8
tick,0x7ffe67f8feb4,746966740,0,0x0,8
tick,0x7ffe67f8feb4,746982474,0,0x0,8
tick,0x7ffe67f8feb4,746998457,0,0x0,8
tick,0x7ffe67f8feb4,747014048,0,0x0,8
tick,0x7ffe67f8feb4,747029948,0,0x0,8
tick,0x7ffe67f8feb4,747045090,0,0x0,8
tick,0x7ffe67f8feb4,747060411,0,0x0,8
tick,0x7ffe67f8feb4,747076614,0,0x0,8
tick,0x7ffe67f8feb4,747092211,0,0x0,8
tick,0x7ffe67f8feb4,747107072,0,0x0,8
tick,0x7ffe67f8feb4,747122438,0,0x0,8
tick,0x7ffe67f8feb4,747138106,0,0x0,8
tick,0x7ffe67f8feb4,747154137,0,0x0,8
tick,0x7ffe67f8feb4,747169305,0,0x0,8
tick,0x7ffe67f8feb4,747185482,0,0x0,8
tick,0x7ffe67f8feb4,747200381,0,0x0,8
tick,0x7ffe67f8feb4,747216357,0,0x0,8
tick,0x7ffe67f8feb4,747232175,0,0x0,8
tick,0x7ffe67f8feb4,747248156,0,0x0,8
tick,0x7ffe67f8feb4,747263472,0,0x0,8
tick,0x7ffe67f8feb4,747279197,0,0x0,8
tick,0x7ffe67f8feb4,747295246,0,0x0,8
tick,0x7ffe67f8feb4,747311253,0,0x0,8
tick,0x7ffe67f8feb4,747327429,0,0x0,8
tick,0x7ffe67f8feb4,747343041,0,0x0,8
tick,0x7ffe67f8feb4,747358317,0,0x0,8
tick,0x7ffe67f8feb4,747374578,0,0x0,8
tick,0x7ffe67f8feb4,747389931,0,0x0,8
tick,0x7ffe67f8feb4,747419698,0,0x0,8
tick,0x7ffe67f8feb4,747423755,0,0x0,8
tick,0x7ffe67f8feb4,747437056,0,0x0,8
tick,0x7ffe67f8feb4,747453571,0,0x0,8
tick,0x7ffe67f8feb4,747468929,0,0x0,8
tick,0x7ffe67f8feb4,747484936,0,0x0,8
tick,0x7ffe67f8feb4,747500689,0,0x0,8
tick,0x7ffe67f8feb4,747516302,0,0x0,8
tick,0x7ffe67f8feb4,747531973,0,0x0,8
tick,0x7ffe67f8feb4,747547981,0,0x0,8
tick,0x7ffe67f8feb4,747563711,0,0x0,8
tick,0x7ffe67f8feb4,747579061,0,0x0,8
tick,0x7ffe67f8feb4,747595098,0,0x0,8
tick,0x7ffe67f8feb4,747611069,0,0x0,8
tick,0x7ffe67f8feb4,747627142,0,0x0,8
tick,0x7ffe67f8feb4,747643953,0,0x0,8
tick,0x7ffe67f8feb4,747659131,0,0x0,8
tick,0x7ffe67f8feb4,747675030,0,0x0,8
tick,0x7ffe67f8feb4,747690155,0,0x0,8
tick,0x7ffe67f8feb4,747706159,0,0x0,8
tick,0x7ffe67f8feb4,747721983,0,0x0,8
tick,0x7ffe67f8feb4,747737177,0,0x0,8
tick,0x7ffe67f8feb4,747753467,0,0x0,8
tick,0x7ffe67f8feb4,747769164,0,0x0,8
tick,0x7ffe67f8feb4,747784778,0,0x0,8
tick,0x7ffe67f8feb4,747799998,0,0x0,8
tick,0x7ffe67f8feb4,747815181,0,0x0,8
tick,0x7ffe67f8feb4,747831177,0,0x0,8
tick,0x7ffe67f8feb4,747847164,0,0x0,8
tick,0x7ffe67f8feb4,747863167,0,0x0,8
tick,0x7ffe67f8feb4,747879198,0,0x0,8
tick,0x7ffe67f8feb4,747895186,0,0x0,8
tick,0x7ffe67f8feb4,747911354,0,0x0,8
tick,0x7ffe67f8feb4,747927604,0,0x0,8
tick,0x7ffe67f8feb4,747943508,0,0x0,8
tick,0x7ffe67f8feb4,747959202,0,0x0,8
tick,0x7ffe67f8feb4,747975226,0,0x0,8
tick,0x7ffe67f8feb4,747991243,0,0x0,8
tick,0x7ffe67f8feb4,748007282,0,0x0,8
tick,0x7ffe67f8feb4,748023257,0,0x0,8
tick,0x7ffe67f8feb4,748039250,0,0x0,8
tick,0x7ffe67f8feb4,748055270,0,0x0,8
tick,0x7ffe67f8feb4,748071297,0,0x0,8
tick,0x7ffe67f8feb4,748087287,0,0x0,8
tick,0x7ffe67f8feb4,748102324,0,0x0,8
tick,0x7ffe67f8feb4,748118314,0,0x0,8
tick,0x7ffe67f8feb4,748133971,0,0x0,8
tick,0x7ffe67f8feb4,748149091,0,0x0,8
tick,0x7ffe67f8feb4,748164261,0,0x0,8
tick,0x7ffe67f8feb4,748180261,0,0x0,8
tick,0x7ffe67f8feb4,748196243,0,0x0,8
tick,0x7ffe67f8feb4,748212583,0,0x0,8
tick,0x7ffe67f8feb4,748228536,0,0x0,8
tick,0x7ffe67f8feb4,748243916,0,0x0,8
tick,0x7ffe67f8feb4,748259376,0,0x0,8
tick,0x7ffe67f8feb4,748274775,0,0x0,8
tick,0x7ffe67f8feb4,748290274,0,0x0,8
tick,0x7ffe67f8feb4,748305589,0,0x0,8
tick,0x7ffe67f8feb4,748321343,0,0x0,8
tick,0x7ffe67f8feb4,748337379,0,0x0,8
tick,0x7ffe67f8feb4,748353437,0,0x0,8
tick,0x7ffe67f8feb4,748369267,0,0x0,8
tick,0x7ffe67f8feb4,748384945,0,0x0,8
tick,0x7ffe67f8feb4,748400739,0,0x0,8
tick,0x7ffe67f8feb4,748416348,0,0x0,8
tick,0x7ffe67f8feb4,748432348,0,0x0,8
tick,0x7ffe67f8feb4,748448280,0,0x0,8
tick,0x7ffe67f8feb4,748464743,0,0x0,8
tick,0x7ffe67f8feb4,748480066,0,0x0,8
tick,0x7ffe67f8feb4,748496077,0,0x0,8
tick,0x7ffe67f8feb4,748511284,0,0x0,8
tick,0x7ffe67f8feb4,748527496,0,0x0,8
tick,0x7ffe67f8feb4,748543323,0,0x0,8
tick,0x7ffe67f8feb4,748559307,0,0x0,8
tick,0x7ffe67f8feb4,748575301,0,0x0,8
tick,0x7ffe67f8feb4,748591286,0,0x0,8
tick,0x7ffe67f8feb4,748607315,0,0x0,8
tick,0x7ffe67f8feb4,748623292,0,0x0,8
tick,0x7ffe67f8feb4,748639324,0,0x0,8
tick,0x7ffe67f8feb4,748655304,0,0x0,8
tick,0x7ffe67f8feb4,748671304,0,0x0,8
tick,0x7ffe67f8feb4,748687321,0,0x0,8
tick,0x7ffe67f8feb4,748703306,0,0x0,8
tick,0x7ffe67f8feb4,748719320,0,0x0,8
tick,0x7ffe67f8feb4,748735178,0,0x0,8
tick,0x7ffe67f8feb4,748750329,0,0x0,8
tick,0x7ffe67f8feb4,748765585,0,0x0,8
tick,0x7ffe67f8feb4,748780957,0,0x0,8
tick,0x7ffe67f8feb4,748796241,0,0x0,8
tick,0x7ffe67f8feb4,748811392,0,0x0,8
tick,0x7ffe67f8feb4,748826967,0,0x0,8
tick,0x7ffe67f8feb4,748842396,0,0x0,8
tick,0x7ffe67f8feb4,748858437,0,0x0,8
tick,0x7ffe67f8feb4,748874374,0,0x0,8
tick,0x7ffe67f8feb4,748890373,0,0x0,8
tick,0x7ffe67f8feb4,748906363,0,0x0,8
tick,0x7ffe67f8feb4,748922401,0,0x0,8
tick,0x7ffe67f8feb4,748938401,0,0x0,8
tick,0x7ffe67f8feb4,748954413,0,0x0,8
tick,0x7ffe67f8feb4,748970442,0,0x0,8
tick,0x7ffe67f8feb4,748986438,0,0x0,8
tick,0x7ffe67f8feb4,749002480,0,0x0,8
tick,0x7ffe67f8feb4,749017762,0,0x0,8
tick,0x7ffe67f8feb4,749033218,0,0x0,8
tick,0x7ffe67f8feb4,749048436,0,0x0,8
tick,0x7ffe67f8feb4,749064401,0,0x0,8
tick,0x7ffe67f8feb4,749080398,0,0x0,8
tick,0x7ffe67f8feb4,749096382,0,0x0,8
tick,0x7ffe67f8feb4,749112413,0,0x0,8
tick,0x7ffe67f8feb4,749128371,0,0x0,8
tick,0x7ffe67f8feb4,749144380,0,0x0,8
tick,0x7ffe67f8feb4,749160384,0,0x0,8
tick,0x7ffe67f8feb4,749176381,0,0x0,8
tick,0x7ffe67f8feb4,749192061,0,0x0,8
tick,0x7ffe67f8feb4,749207417,0,0x0,8
tick,0x7ffe67f8feb4,749223382,0,0x0,8
tick,0x7ffe67f8feb4,749239422,0,0x0,8
tick,0x7ffe67f8feb4,749255392,0,0x0,8
tick,0x7ffe67f8feb4,749271408,0,0x0,8
tick,0x7ffe67f8feb4,749287419,0,0x0,8
tick,0x7ffe67f8feb4,749303410,0,0x0,8
tick,0x7ffe67f8feb4,749319410,0,0x0,8
tick,0x7ffe67f8feb4,749335437,0,0x0,8
tick,0x7ffe67f8feb4,749351466,0,0x0,8
tick,0x7ffe67f8feb4,749367455,0,0x0,8
tick,0x7ffe67f8feb4,749383412,0,0x0,8
tick,0x7ffe67f8feb4,749399085,0,0x0,8
tick,0x7ffe67f8feb4,749415103,0,0x0,8
tick,0x7ffe67f8feb4,749431166,0,0x0,8
tick,0x7ffe67f8feb4,749447210,0,0x0,8
tick,0x7ffe67f8feb4,749463209,0,0x0,8
tick,0x7ffe67f8feb4,749479278,0,0x0,8
tick,0x7ffe67f8feb4,749495323,0,0x0,8
tick,0x7ffe67f8feb4,749510762,0,0x0,8
tick,0x7ffe67f8feb4,749526377,0,0x0,8
tick,0x7ffe67f8feb4,749542320,0,0x0,8
tick,0x7ffe67f8feb4,749558717,0,0x0,8
tick,0x7ffe67f8feb4,749574494,0,0x0,8
tick,0x7ffe67f8feb4,749589552,0,0x0,8
tick,0x7ffe67f8feb4,749605031,0,0x0,8
tick,0x7ffe67f8feb4,749620332,0,0x0,8
tick,0x7ffe67f8feb4,749635821,0,0x0,8
tick,0x7ffe67f8feb4,749652077,0,0x0,8
tick,0x7ffe67f8feb4,749667472,0,0x0,8
tick,0x7ffe67f8feb4,749682691,0,0x0,8
tick,0x7ffe67f8feb4,749698505,0,0x0,8
tick,0x7ffe67f8feb4,749714498,0,0x0,8
tick,0x7ffe67f8feb4,749730513,0,0x0,8
tick,0x7ffe67f8feb4,749746113,0,0x0,8
tick,0x7ffe67f8feb4,749762114,0,0x0,8
tick,0x7ffe67f8feb4,749778508,0,0x0,8
tick,0x7ffe67f8feb4,749793182,0,0x0,8
tick,0x7ffe67f8feb4,749809197,0,0x0,8
tick,0x7ffe67f8feb4,749824482,0,0x0,8
tick,0x7ffe67f8feb4,749840146,0,0x0,8
tick,0x7ffe67f8feb4,749855499,0,0x0,8
tick,0x7ffe67f8feb4,749871492,0,0x0,8
tick,0x7ffe67f8feb4,749887480,0,0x0,8
tick,0x7ffe67f8feb4,749903480,0,0x0,8
tick,0x7ffe67f8feb4,749919494,0,0x0,8
tick,0x7ffe67f8feb4,749935488,0,0x0,8
tick,0x7ffe67f8feb4,749951501,0,0x0,8
tick,0x7ffe67f8feb4,749967544,0,0x0,8
tick,0x7ffe67f8feb4,749983533,0,0x0,8
tick,0x7ffe67f8feb4,749999501,0,0x0,8
tick,0x7ffe67f8feb4,750015514,0,0x0,8
tick,0x7ffe67f8feb4,750031529,0,0x0,8
tick,0x7ffe67f8feb4,750047553,0,0x0,8
tick,0x7ffe67f8feb4,750063625,0,0x0,8
tick,0x7ffe67f8feb4,750079545,0,0x0,8
tick,0x7ffe67f8feb4,750095531,0,0x0,8
tick,0x7ffe67f8feb4,750110512,0,0x0,8
tick,0x7ffe67f8feb4,750126236,0,0x0,8
tick,0x7ffe67f8feb4,750141543,0,0x0,8
tick,0x7ffe67f8feb4,750157571,0,0x0,8
tick,0x7ffe67f8feb4,750172694,0,0x0,8
tick,0x7ffe67f8feb4,750188567,0,0x0,8
tick,0x7ffe67f8feb4,750204102,0,0x0,8
tick,0x7ffe67f8feb4,750219370,0,0x0,8
tick,0x7ffe67f8feb4,750234561,0,0x0,8
tick,0x7ffe67f8feb4,750250459,0,0x0,8
tick,0x7ffe67f8feb4,750266114,0,0x0,8
tick,0x7ffe67f8feb4,750282130,0,0x0,8
tick,0x7ffe67f8feb4,750298089,0,0x0,8
tick,0x7ffe67f8feb4,750313355,0,0x0,8
tick,0x7ffe67f8feb4,750328768,0,0x0,8
tick,0x7ffe67f8feb4,750344977,0,0x0,8
tick,0x7ffe67f8feb4,750360737,0,0x0,8
tick,0x7ffe67f8feb4,750376970,0,0x0,8
tick,0x7ffe67f8feb4,750392811,0,0x0,8
tick,0x7ffe67f8feb4,750408070,0,0x0,8
tick,0x7ffe67f8feb4,750423570,0,0x0,8
tick,0x7ffe67f8feb4,750439103,0,0x0,8
tick,0x7ffe67f8feb4,750454648,0,0x0,8
tick,0x7ffe67f8feb4,750470592,0,0x0,8
tick,0x7ffe67f8feb4,750486169,0,0x0,8
tick,0x7ffe67f8feb4,750502186,0,0x0,8
tick,0x7ffe67f8feb4,750518178,0,0x0,8
tick,0x7ffe67f8feb4,750534204,0,0x0,8
tick,0x7ffe67f8feb4,750550169,0,0x0,8
tick,0x7ffe67f8feb4,750566172,0,0x0,8
tick,0x7ffe67f8feb4,750582228,0,0x0,8
tick,0x7ffe67f8feb4,750598186,0,0x0,8
tick,0x7ffe67f8feb4,750614187,0,0x0,8
tick,0x7ffe67f8feb4,750630171,0,0x0,8
tick,0x7ffe67f8feb4,750645663,0,0x0,8
tick,0x7ffe67f8feb4,750660888,0,0x0,8
tick,0x7ffe67f8feb4,750676924,0,0x0,8
tick,0x7ffe67f8feb4,750692934,0,0x0,8
tick,0x7ffe67f8feb4,750708717,0,0x0,8
tick,0x7ffe67f8feb4,750724735,0,0x0,8
tick,0x7ffe67f8feb4,750739876,0,0x0,8
tick,0x7ffe67f8feb4,750755123,0,0x0,8
tick,0x7ffe67f8feb4,750770321,0,0x0,8
tick,0x7ffe67f8feb4,750786287,0,0x0,8
tick,0x7ffe67f8feb4,750801702,0,0x0,8
tick,0x7ffe67f8feb4,750817689,0,0x0,8
tick,0x7ffe67f8feb4,750833642,0,0x0,8
tick,0x7ffe67f8feb4,750849637,0,0x0,8
tick,0x7ffe67f8feb4,750865010,0,0x0,8
tick,0x7ffe67f8feb4,750880979,0,0x0,8
tick,0x7ffe67f8feb4,750897025,0,0x0,8
tick,0x7ffe67f8feb4,750913617,0,0x0,8
tick,0x7ffe67f8feb4,750928983,0,0x0,8
tick,0x7ffe67f8feb4,750944997,0,0x0,8
tick,0x7ffe67f8feb4,750960675,0,0x0,8
tick,0x7ffe67f8feb4,750976653,0,0x0,8
tick,0x7ffe67f8feb4,750991938,0,0x0,8
tick,0x7ffe67f8feb4,751007527,0,0x0,8
tick,0x7ffe67f8feb4,751023601,0,0x0,8
tick,0x7ffe67f8feb4,751039663,0,0x0,8
tick,0x7ffe67f8feb4,751055674,0,0x0,8
tick,0x7ffe67f8feb4,751071661,0,0x0,8
tick,0x7ffe67f8feb4,751087554,0,0x0,8
tick,0x7ffe67f8feb4,751103669,0,0x0,8
tick,0x7ffe67f8feb4,751119671,0,0x0,8
tick,0x7ffe67f8feb4,751135693,0,0x0,8
tick,0x7ffe67f8feb4,751151114,0,0x0,8
tick,0x7ffe67f8feb4,751167165,0,0x0,8
tick,0x7ffe67f8feb4,751182611,0,0x0,8
tick,0x7ffe67f8feb4,751198123,0,0x0,8
tick,0x7ffe67f8feb4,751214144,0,0x0,8
tick,0x7ffe67f8feb4,751236405,0,0x0,8
tick,0x7ffe67f8feb4,751245377,0,0x0,8
tick,0x7ffe67f8feb4,751261150,0,0x0,8
tick,0x7ffe67f8feb4,751277138,0,0x0,8
tick,0x7ffe67f8feb4,751293190,0,0x0,8
tick,0x7ffe67f8feb4,751308986,0,0x0,8
tick,0x7ffe67f8feb4,751324492,0,0x0,8
tick,0x7ffe67f8feb4,751340493,0,0x0,8
tick,0x7ffe67f8feb4,751356607,0,0x0,8
tick,0x7ffe67f8feb4,751372453,0,0x0,8
tick,0x7ffe67f8feb4,751388520,0,0x0,8
tick,0x7ffe67f8feb4,751404525,0,0x0,8
tick,0x7ffe67f8feb4,751420618,0,0x0,8
tick,0x7ffe67f8feb4,751436534,0,0x0,8
tick,0x7ffe67f8feb4,751451706,0,0x0,8
tick,0x7ffe67f8feb4,751467633,0,0x0,8
tick,0x7ffe67f8feb4,751483095,0,0x0,8
tick,0x7ffe67f8feb4,751498505,0,0x0,8
tick,0x7ffe67f8feb4,751514538,0,0x0,8
tick,0x7ffe67f8feb4,751530240,0,0x0,8
tick,0x7ffe67f8feb4,751545351,0,0x0,8
tick,0x7ffe67f8feb4,751561173,0,0x0,8
tick,0x7ffe67f8feb4,751577171,0,0x0,8
tick,0x7ffe67f8feb4,751593202,0,0x0,8
tick,0x7ffe67f8feb4,751608721,0,0x0,8
tick,0x7ffe67f8feb4,751624272,0,0x0,8
tick,0x7ffe67f8feb4,751640273,0,0x0,8
tick,0x7ffe67f8feb4,751655629,0,0x0,8
tick,0x7ffe67f8feb4,751671578,0,0x0,8
tick,0x7ffe67f8feb4,751686807,0,0x0,8
tick,0x7ffe67f8feb4,751702583,0,0x0,8
tick,0x7ffe67f8feb4,751718432,0,0x0,8
tick,0x7ffe67f8feb4,751734632,0,0x0,8
tick,0x7ffe67f8feb4,751749579,0,0x0,8
tick,0x7ffe67f8feb4,751765159,0,0x0,8
tick,0x7ffe67f8feb4,751780728,0,0x0,8
tick,0x7ffe67f8feb4,751796796,0,0x0,8
tick,0x7ffe67f8feb4,751812548,0,0x0,8
tick,0x7ffe67f8feb4,751828361,0,0x0,8
tick,0x7ffe67f8feb4,751843939,0,0x0,8
tick,0x7ffe67f8feb4,751868609,0,0x0,8
tick,0x7ffe67f8feb4,751876527,0,0x0,8
tick,0x7ffe67f8feb4,751891858,0,0x0,8
tick,0x7ffe67f8feb4,751908001,0,0x0,8
tick,0x7ffe67f8feb4,751923966,0,0x0,8
tick,0x7ffe67f8feb4,751939956,0,0x0,8
tick,0x7ffe67f8feb4,751955949,0,0x0,8
tick,0x7ffe67f8feb4,751971976,0,0x0,8
tick,0x7ffe67f8feb4,751987984,0,0x0,8
tick,0x7ffe67f8feb4,752004005,0,0x0,8
tick,0x7ffe67f8feb4,752020082,0,0x0,8
tick,0x7ffe67f8feb4,752035226,0,0x0,8
tick,0x7ffe67f8feb4,752051104,0,0x0,8
tick,0x7ffe67f8feb4,752067188,0,0x0,8
tick,0x7ffe67f8feb4,752082573,0,0x0,8
tick,0x7ffe67f8feb4,752098231,0,0x0,8
tick,0x7ffe67f8feb4,752113272,0,0x0,8
tick,0x7ffe67f8feb4,752129275,0,0x0,8
tick,0x7ffe67f8feb4,752145314,0,0x0,8
tick,0x7ffe67f8feb4,752160980,0,0x0,8
tick,0x7ffe67f8feb4,752187423,0,0x0,8
tick,0x7ffe67f8feb4,752195824,0,0x0,8
tick,0x7ffe67f8feb4,752209480,0,0x0,8
tick,0x7ffe67f8feb4,752225029,0,0x0,8
tick,0x7ffe67f8feb4,752240900,0,0x0,8
tick,0x7ffe67f8feb4,752256072,0,0x0,8
tick,0x7ffe67f8feb4,752272221,0,0x0,8
tick,0x7ffe67f8feb4,752287914,0,0x0,8
tick,0x7ffe67f8feb4,752303867,0,0x0,8
tick,0x7ffe67f8feb4,752319941,0,0x0,8
tick,0x7ffe67f8feb4,752335904,0,0x0,8
tick,0x7ffe67f8feb4,752352022,0,0x0,8
tick,0x7ffe67f8feb4,752367969,0,0x0,8
tick,0x7ffe67f8feb4,752384108,0,0x0,8
tick,0x7ffe67f8feb4,752399882,0,0x0,8
tick,0x7ffe67f8feb4,752417174,0,0x0,8
tick,0x7ffe67f8feb4,752432511,0,0x0,8
tick,0x7ffe67f8feb4,752447975,0,0x0,8
tick,0x7ffe67f8feb4,752463881,0,0x0,8
tick,0x7ffe67f8feb4,752496718,0,0x0,8
tick,0x7ffe67f8feb4,752510866,0,0x0,8
tick,0x7ffe67f8feb4,752526818,0,0x0,8
tick,0x7ffe67f8feb4,752542811,0,0x0,8
tick,0x7ffe67f8feb4,752558853,0,0x0,8
tick,0x7ffe67f8feb4,752574413,0,0x0,8
tick,0x7ffe67f8feb4,752589906,0,0x0,8
tick,0x7ffe67f8feb4,752605856,0,0x0,8
tick,0x7ffe67f8feb4,752621905,0,0x0,8
tick,0x7ffe67f8feb4,752638012,0,0x0,8
tick,0x7ffe67f8feb4,752653928,0,0x0,8
tick,0x7ffe67f8feb4,752669881,0,0x0,8
tick,0x7ffe67f8feb4,752685283,0,0x0,8
tick,0x7ffe67f8feb4,752700942,0,0x0,8
tick,0x7ffe67f8feb4,752716919,0,0x0,8
tick,0x7ffe67f8feb4,752732931,0,0x0,8
tick,0x7ffe67f8feb4,752748949,0,0x0,8
tick,0x7ffe67f8feb4,752764979,0,0x0,8
tick,0x7ffe67f8feb4,752780882,0,0x0,8
tick,0x7ffe67f8feb4,752795918,0,0x0,8
tick,0x7ffe67f8feb4,752811058,0,0x0,8
tick,0x7ffe67f8feb4,752826924,0,0x0,8
tick,0x7ffe67f8feb4,752842960,0,0x0,8
tick,0x7ffe67f8feb4,752858997,0,0x0,8
tick,0x7ffe67f8feb4,752874144,0,0x0,8
tick,0x7ffe67f8feb4,752890165,0,0x0,8
tick,0x7ffe67f8feb4,752906127,0,0x0,8
tick,0x7ffe67f8feb4,752922104,0,0x0,8
tick,0x7ffe67f8feb4,752938081,0,0x0,8
tick,0x7ffe67f8feb4,752954096,0,0x0,8
tick,0x7ffe67f8feb4,752970102,0,0x0,8
tick,0x7ffe67f8feb4,752986108,0,0x0,8
tick,0x7ffe67f8feb4,753001532,0,0x0,8
tick,0x7ffe67f8feb4,753017513,0,0x0,8
tick,0x7ffe67f8feb4,753032525,0,0x0,8
tick,0x7ffe67f8feb4,753048602,0,0x0,8
tick,0x7ffe67f8feb4,753064709,0,0x0,8
tick,0x7ffe67f8feb4,753079769,0,0x0,8
tick,0x7ffe67f8feb4,753095268,0,0x0,8
tick,0x7ffe67f8feb4,753111391,0,0x0,8
tick,0x7ffe67f8feb4,753126258,0,0x0,8
tick,0x7ffe67f8feb4,753142103,0,0x0,8
tick,0x7ffe67f8feb4,753157338,0,0x0,8
tick,0x7ffe67f8feb4,753172256,0,0x0,8
tick,0x7ffe67f8feb4,753187314,0,0x0,8
tick,0x7ffe67f8feb4,753202766,0,0x0,8
tick,0x7ffe67f8feb4,753218809,0,0x0,8
tick,0x7ffe67f8feb4,753234984,0,0x0,8
tick,0x7ffe67f8feb4,753250778,0,0x0,8
tick,0x7ffe67f8feb4,753266082,0,0x0,8
tick,0x7ffe67f8feb4,753282118,0,0x0,8
tick,0x7ffe67f8feb4,753297023,0,0x0,8
tick,0x7ffe67f8feb4,753312957,0,0x0,8
tick,0x7ffe67f8feb4,753329032,0,0x0,8
tick,0x7ffe67f8feb4,753344380,0,0x0,8
tick,0x7ffe67f8feb4,753360354,0,0x0,8
tick,0x7ffe67f8feb4,753375730,0,0x0,8
tick,0x7ffe67f8feb4,753391589,0,0x0,8
tick,0x7ffe67f8feb4,753407167,0,0x0,8
tick,0x7ffe67f8feb4,753422485,0,0x0,8
tick,0x7ffe67f8feb4,753437767,0,0x0,8
tick,0x7ffe67f8feb4,753453720,0,0x0,8
tick,0x7ffe67f8feb4,753469144,0,0x0,8
tick,0x7ffe67f8feb4,753484359,0,0x0,8
tick,0x7ffe67f8feb4,753500400,0,0x0,8
tick,0x7ffe67f8feb4,753516174,0,0x0,8
tick,0x7ffe67f8feb4,753531695,0,0x0,8
tick,0x7ffe67f8feb4,753547014,0,0x0,8
tick,0x7ffe67f8feb4,753562888,0,0x0,8
tick,0x7ffe67f8feb4,753578011,0,0x0,8
tick,0x7ffe67f8feb4,753593784,0,0x0,8
tick,0x7ffe67f8feb4,753609066,0,0x0,8
tick,0x7ffe67f8feb4,753625081,0,0x0,8
tick,0x7ffe67f8feb4,753640357,0,0x0,8
tick,0x7ffe67f8feb4,753656063,0,0x0,8
tick,0x7ffe67f8feb4,753672075,0,0x0,8
tick,0x7ffe67f8feb4,753688067,0,0x0,8
tick,0x7ffe67f8feb4,753704070,0,0x0,8
tick,0x7ffe67f8feb4,753720079,0,0x0,8
tick,0x7ffe67f8feb4,753736069,0,0x0,8
tick,0x7ffe67f8feb4,753752095,0,0x0,8
tick,0x7ffe67f8feb4,753767578,0,0x0,8
tick,0x7ffe67f8feb4,753783586,0,0x0,8
tick,0x7ffe67f8feb4,753799582,0,0x0,8
tick,0x7ffe67f8feb4,753815643,0,0x0,8
tick,0x7ffe67f8feb4,753831080,0,0x0,8
tick,0x7ffe67f8feb4,753846401,0,0x0,8
tick,0x7ffe67f8feb4,753862377,0,0x0,8
tick,0x7ffe67f8feb4,753877666,0,0x0,8
tick,0x7ffe67f8feb4,753893901,0,0x0,8
tick,0x7ffe67f8feb4,753909960,0,0x0,8
tick,0x7ffe67f8feb4,753925858,0,0x0,8
tick,0x7ffe67f8feb4,753941877,0,0x0,8
tick,0x7ffe67f8feb4,753957862,0,0x0,8
tick,0x7ffe67f8feb4,753973091,0,0x0,8
tick,0x7ffe67f8feb4,753989130,0,0x0,8
tick,0x7ffe67f8feb4,754005143,0,0x0,8
tick,0x7ffe67f8feb4,754021078,0,0x0,8
tick,0x7ffe67f8feb4,754037068,0,0x0,8
tick,0x7ffe67f8feb4,754053088,0,0x0,8
tick,0x7ffe67f8feb4,754069179,0,0x0,8
tick,0x7ffe67f8feb4,754085139,0,0x0,8
tick,0x7ffe67f8feb4,754101138,0,0x0,8
tick,0x7ffe67f8feb4,754117202,0,0x0,8
tick,0x7ffe67f8feb4,754132493,0,0x0,8
tick,0x7ffe67f8feb4,754148306,0,0x0,8
tick,0x7ffe67f8feb4,754163468,0,0x0,8
tick,0x7ffe67f8feb4,754179251,0,0x0,8
tick,0x7ffe67f8feb4,754195247,0,0x0,8
tick,0x7ffe67f8feb4,754210265,0,0x0,8
tick,0x7ffe67f8feb4,754226263,0,0x0,8
tick,0x7ffe67f8feb4,754241928,0,0x0,8
tick,0x7ffe67f8feb4,754257971,0,0x0,8
tick,0x7ffe67f8feb4,754273723,0,0x0,8
tick,0x7ffe67f8feb4,754289237,0,0x0,8
tick,0x7ffe67f8feb4,754305197,0,0x0,8
tick,0x7ffe67f8feb4,754321386,0,0x0,8
tick,0x7ffe67f8feb4,754337223,0,0x0,8
tick,0x7ffe67f8feb4,754353201,0,0x0,8
tick,0x7ffe67f8feb4,754369219,0,0x0,8
tick,0x7ffe67f8feb4,754385272,0,0x0,8
tick,0x7ffe67f8feb4,754401286,0,0x0,8
tick,0x7ffe67f8feb4,754417503,0,0x0,8
tick,0x7ffe67f8feb4,754433219,0,0x0,8
tick,0x7ffe67f8feb4,754449202,0,0x0,8
tick,0x7ffe67f8feb4,754464387,0,0x0,8
tick,0x7ffe67f8feb4,754479514,0,0x0,8
tick,0x7ffe67f8feb4,754495604,0,0x0,8
tick,0x7ffe67f8feb4,754510863,0,0x0,8
tick,0x7ffe67f8feb4,754526244,0,0x0,8
tick,0x7ffe67f8feb4,754541367,0,0x0,8
tick,0x7ffe67f8feb4,754556852,0,0x0,8
tick,0x7ffe67f8feb4,754571870,0,0x0,8
tick,0x7ffe67f8feb4,754587210,0,0x0,8
tick,0x7ffe67f8feb4,754602638,0,0x0,8
tick,0x7ffe67f8feb4,754618201,0,0x0,8
tick,0x7ffe67f8feb4,754634229,0,0x0,8
tick,0x7ffe67f8feb4,754650708,0,0x0,8
tick,0x7ffe67f8feb4,754666182,0,0x0,8
tick,0x7ffe67f8feb4,754682134,0,0x0,8
tick,0x7ffe67f8feb4,754697273,0,0x0,8
tick,0x7ffe67f8feb4,754713215,0,0x0,8
tick,0x7ffe67f8feb4,754728532,0,0x0,8
tick,0x7ffe67f8feb4,754744293,0,0x0,8
tick,0x7ffe67f8feb4,754760301,0,0x0,8
tick,0x7ffe67f8feb4,754775483,0,0x0,8
tick,0x7ffe67f8feb4,754790774,0,0x0,8
tick,0x7ffe67f8feb4,754805866,0,0x0,8
tick,0x7ffe67f8feb4,754821618,0,0x0,8
tick,0x7ffe67f8feb4,754837648,0,0x0,8
tick,0x7ffe67f8feb4,754853034,0,0x0,8
tick,0x7ffe67f8feb4,754868717,0,0x0,8
tick,0x7ffe67f8feb4,754884082,0,0x0,8
tick,0x7ffe67f8feb4,754899117,0,0x0,8
tick,0x7ffe67f8feb4,754915119,0,0x0,8
tick,0x7ffe67f8feb4,754931153,0,0x0,8
tick,0x7ffe67f8feb4,754947138,0,0x0,8
tick,0x7ffe67f8feb4,754962351,0,0x0,8
tick,0x7ffe67f8feb4,754978393,0,0x0,8
tick,0x7ffe67f8feb4,754994279,0,0x0,8
tick,0x7ffe67f8feb4,755010387,0,0x0,8
tick,0x7ffe67f8feb4,755026130,0,0x0,8
tick,0x7ffe67f8feb4,755041718,0,0x0,8
tick,0x7ffe67f8feb4,755056729,0,0x0,8
tick,0x7ffe67f8feb4,755071825,0,0x0,8
tick,0x7ffe67f8feb4,755086852,0,0x0,8
tick,0x7ffe67f8feb4,755102673,0,0x0,8
tick,0x7ffe67f8feb4,755117993,0,0x0,8
tick,0x7ffe67f8feb4,755133244,0,0x0,8
tick,0x7ffe67f8feb4,755149196,0,0x0,8
tick,0x7ffe67f8feb4,755165089,0,0x0,8
tick,0x7ffe67f8feb4,755180616,0,0x0,8
tick,0x7ffe67f8feb4,755196072,0,0x0,8
tick,0x7ffe67f8feb4,755211129,0,0x0,8
tick,0x7ffe67f8feb4,755227345,0,0x0,8
tick,0x7ffe67f8feb4,755242544,0,0x0,8
tick,0x7ffe67f8feb4,755257555,0,0x0,8
tick,0x7ffe67f8feb4,755273973,0,0x0,8
tick,0x7ffe67f8feb4,755289330,0,0x0,8
tick,0x7ffe67f8feb4,755305208,0,0x0,8
tick,0x7ffe67f8feb4,755321201,0,0x0,8
tick,0x7ffe67f8feb4,755336690,0,0x0,8
tick,0x7ffe67f8feb4,755351866,0,0x0,8
tick,0x7ffe67f8feb4,755368030,0,0x0,8
tick,0x7ffe67f8feb4,755384049,0,0x0,8
tick,0x7ffe67f8feb4,755399243,0,0x0,8
tick,0x7ffe67f8feb4,755414772,0,0x0,8
tick,0x7ffe67f8feb4,755431042,0,0x0,8
tick,0x7ffe67f8feb4,755446539,0,0x0,8
tick,0x7ffe67f8feb4,755462619,0,0x0,8
tick,0x7ffe67f8feb4,755477866,0,0x0,8
tick,0x7ffe67f8feb4,755493109,0,0x0,8
tick,0x7ffe67f8feb4,755508867,0,0x0,8
tick,0x7ffe67f8feb4,755524876,0,0x0,8
tick,0x7ffe67f8feb4,755539886,0,0x0,8
tick,0x7ffe67f8feb4,755556228,0,0x0,8
tick,0x7ffe67f8feb4,755571651,0,0x0,8
